
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e7d4  08017280  08017280  00027280  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025a54  08025a54  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08025a54  08025a54  00035a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025a5c  08025a5c  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025a5c  08025a5c  00035a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025a60  08025a60  00035a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08025a64  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cdf4  200002c0  08025d00  000402c0  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000d0b4  08025d00  0004d0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212e7  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fa5  00000000  00000000  000615b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00067558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  00069498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002179e  00000000  00000000  0006b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dc4b  00000000  00000000  0008c836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef67  00000000  00000000  000ba481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001593e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093e4  00000000  00000000  00159438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017258 	.word	0x08017258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	08017258 	.word	0x08017258

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <apInit>:
void sensorMain(void);
//void buttonMain(void);


void apInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 800102c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fd9d 	bl	8001b70 <cliOpen>
	menuSetCallBack(lcdMain);
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <apInit+0x18>)
 8001038:	f003 fc38 	bl	80048ac <menuSetCallBack>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	0800108d 	.word	0x0800108d

08001044 <apMain>:

void apMain(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800104a:	f000 f8ec 	bl	8001226 <millis>
 800104e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8001050:	f000 f8e9 	bl	8001226 <millis>
 8001054:	4602      	mov	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105e:	d302      	bcc.n	8001066 <apMain+0x22>
    {
      pre_time = millis();
 8001060:	f000 f8e1 	bl	8001226 <millis>
 8001064:	6078      	str	r0, [r7, #4]

    }

    sensorMain();
 8001066:	f000 f807 	bl	8001078 <sensorMain>
    buttonMain();
 800106a:	f000 fc7f 	bl	800196c <buttonMain>

    cliMain();
 800106e:	f000 fe37 	bl	8001ce0 <cliMain>
    //lcdMain();
    menuMain();
 8001072:	f003 fc77 	bl	8004964 <menuMain>
    if (millis()-pre_time >= 1000)
 8001076:	e7eb      	b.n	8001050 <apMain+0xc>

08001078 <sensorMain>:
  }
}

void sensorMain(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 800107c:	f001 fcfe 	bl	8002a7c <Ds18b20_ManualConvert>
    Sonar_measure();
 8001080:	f004 fd3e 	bl	8005b00 <Sonar_measure>
    tds_measure();
 8001084:	f005 fa04 	bl	8006490 <tds_measure>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <lcdMain>:
//		gpioPinWrite(BUZZER, RESET);
//	}
//}

void lcdMain(uint8_t layer)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  static bool blink = 0;

  if (lcdIsInit() != true)
 8001096:	f002 fc5d 	bl	8003954 <lcdIsInit>
 800109a:	4603      	mov	r3, r0
 800109c:	f083 0301 	eor.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d172      	bne.n	800118c <lcdMain+0x100>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 80010a6:	f002 fe7f 	bl	8003da8 <lcdDrawAvailable>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d06e      	beq.n	800118e <lcdMain+0x102>
  {
      lcdClearBuffer(black);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f002 fc8d 	bl	80039d0 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f003 fa54 	bl	8004564 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[풍경채 아쿠아리움]");
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <lcdMain+0x108>)
 80010be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2000      	movs	r0, #0
 80010c6:	f003 f87d 	bl	80041c4 <lcdPrintf>

      lcdDrawRoundRect(0, 16*7,  35, 17, 5, white);
 80010ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	2305      	movs	r3, #5
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2311      	movs	r3, #17
 80010d6:	2223      	movs	r2, #35	; 0x23
 80010d8:	2170      	movs	r1, #112	; 0x70
 80010da:	2000      	movs	r0, #0
 80010dc:	f002 fd20 	bl	8003b20 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(0, (16*7)+1, 34, 15, 5, red);
 80010e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	2305      	movs	r3, #5
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	230f      	movs	r3, #15
 80010ec:	2222      	movs	r2, #34	; 0x22
 80010ee:	2171      	movs	r1, #113	; 0x71
 80010f0:	2000      	movs	r0, #0
 80010f2:	f002 fe0f 	bl	8003d14 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f003 fa34 	bl	8004564 <lcdSetFont>
      lcdPrintf(5,(16*7)+5, white, "FAN");
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <lcdMain+0x10c>)
 80010fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001102:	2175      	movs	r1, #117	; 0x75
 8001104:	2005      	movs	r0, #5
 8001106:	f003 f85d 	bl	80041c4 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 800110a:	2003      	movs	r0, #3
 800110c:	f003 fa2a 	bl	8004564 <lcdSetFont>
      lcdPrintf(0,16*1, white, "물온도 : %3.1f 도" , ds18b20[0].Temperature);
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <lcdMain+0x110>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa2f 	bl	8000578 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9cd 2300 	strd	r2, r3, [sp]
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <lcdMain+0x114>)
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	2110      	movs	r1, #16
 800112a:	2000      	movs	r0, #0
 800112c:	f003 f84a 	bl	80041c4 <lcdPrintf>
      lcdPrintf(0,16*2, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <lcdMain+0x118>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <lcdMain+0x11c>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <lcdMain+0x120>)
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	2120      	movs	r1, #32
 8001146:	2000      	movs	r0, #0
 8001148:	f003 f83c 	bl	80041c4 <lcdPrintf>
      lcdPrintf(0,16*3, white, "TDS : %4.1f ppm" , tds_tbl[0].filter_tdsValue);
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <lcdMain+0x124>)
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa11 	bl	8000578 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9cd 2300 	strd	r2, r3, [sp]
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <lcdMain+0x128>)
 8001160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001164:	2130      	movs	r1, #48	; 0x30
 8001166:	2000      	movs	r0, #0
 8001168:	f003 f82c 	bl	80041c4 <lcdPrintf>
      //lcdDrawBufferImage(50, 20, 50, 50, TEST);

      blink = get_blink();
 800116c:	f005 fec6 	bl	8006efc <get_blink>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <lcdMain+0x12c>)
 8001176:	701a      	strb	r2, [r3, #0]
      draw_fan_status(0, 16*4, blink);
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <lcdMain+0x12c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	2000      	movs	r0, #0
 8001182:	f005 fe71 	bl	8006e68 <draw_fan_status>

      lcdRequestDraw();
 8001186:	f002 fe25 	bl	8003dd4 <lcdRequestDraw>
 800118a:	e000      	b.n	800118e <lcdMain+0x102>
    return;
 800118c:	bf00      	nop
  }

}
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08017280 	.word	0x08017280
 8001198:	0801729c 	.word	0x0801729c
 800119c:	20000728 	.word	0x20000728
 80011a0:	080172a0 	.word	0x080172a0
 80011a4:	2000cc2c 	.word	0x2000cc2c
 80011a8:	cccccccd 	.word	0xcccccccd
 80011ac:	080172b8 	.word	0x080172b8
 80011b0:	2000cde0 	.word	0x2000cde0
 80011b4:	080172cc 	.word	0x080172cc
 80011b8:	200002dc 	.word	0x200002dc

080011bc <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  HAL_Init();
 80011c2:	f00a fdad 	bl	800bd20 <HAL_Init>
  SystemClock_Config();
 80011c6:	f000 f835 	bl	8001234 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <bspInit+0x50>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <bspInit+0x50>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <bspInit+0x50>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <bspInit+0x50>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <bspInit+0x50>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <bspInit+0x50>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <delay>:

void delay(uint32_t ms)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f00a fdf3 	bl	800be04 <HAL_Delay>
#endif
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <millis>:

uint32_t millis(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800122a:	f00a fddf 	bl	800bdec <HAL_GetTick>
 800122e:	4603      	mov	r3, r0
}
 8001230:	4618      	mov	r0, r3
 8001232:	bd80      	pop	{r7, pc}

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f011 fd20 	bl	8012c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <SystemClock_Config+0xc8>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <SystemClock_Config+0xc8>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <SystemClock_Config+0xc8>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <SystemClock_Config+0xcc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a20      	ldr	r2, [pc, #128]	; (8001300 <SystemClock_Config+0xcc>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <SystemClock_Config+0xcc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001290:	2301      	movs	r3, #1
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012a4:	2319      	movs	r3, #25
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012a8:	23c0      	movs	r3, #192	; 0xc0
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00c faf5 	bl	800d8a8 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c4:	f000 f81e 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2103      	movs	r1, #3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00c fd4d 	bl	800dd84 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012f0:	f000 f808 	bl	8001304 <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	; 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f00a fd0a 	bl	800bdc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <ADC_IRQHandler+0x10>)
 80013ba:	f00a fd8a 	bl	800bed2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000cd38 	.word	0x2000cd38

080013c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM3_IRQHandler+0x10>)
 80013ce:	f00e ffb1 	bl	8010334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000cbec 	.word	0x2000cbec

080013dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <SPI1_IRQHandler+0x10>)
 80013e2:	f00e fc93 	bl	800fd0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000cc80 	.word	0x2000cc80

080013f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <USART1_IRQHandler+0x10>)
 80013f6:	f00f fe9f 	bl	8011138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000cf3c 	.word	0x2000cf3c

08001404 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <SDIO_IRQHandler+0x10>)
 800140a:	f00d f905 	bl	800e618 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000caa8 	.word	0x2000caa8

08001418 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA2_Stream0_IRQHandler+0x10>)
 800141e:	f00b fd19 	bl	800ce54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000cd80 	.word	0x2000cd80

0800142c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA2_Stream2_IRQHandler+0x10>)
 8001432:	f00b fd0f 	bl	800ce54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000cfdc 	.word	0x2000cfdc

08001440 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <DMA2_Stream3_IRQHandler+0x10>)
 8001446:	f00b fd05 	bl	800ce54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000cb8c 	.word	0x2000cb8c

08001454 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA2_Stream5_IRQHandler+0x10>)
 800145a:	f00b fcfb 	bl	800ce54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000ccd8 	.word	0x2000ccd8

08001468 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA2_Stream6_IRQHandler+0x10>)
 800146e:	f00b fcf1 	bl	800ce54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000cb2c 	.word	0x2000cb2c

0800147c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA2_Stream7_IRQHandler+0x10>)
 8001482:	f00b fce7 	bl	800ce54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000cf7c 	.word	0x2000cf7c

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014aa:	f011 fba5 	bl	8012bf8 <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
	return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014d2:	e7fe      	b.n	80014d2 <_exit+0x12>

080014d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e00a      	b.n	80014fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e6:	f3af 8000 	nop.w
 80014ea:	4601      	mov	r1, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbf0      	blt.n	80014e6 <_read+0x12>
	}

return len;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e009      	b.n	8001534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf1      	blt.n	8001520 <_write+0x12>
	}
	return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_close>:

int _close(int file)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156e:	605a      	str	r2, [r3, #4]
	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_isatty>:

int _isatty(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	return 1;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f011 fb0a 	bl	8012bf8 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20020000 	.word	0x20020000
 8001610:	00000400 	.word	0x00000400
 8001614:	200002e0 	.word	0x200002e0
 8001618:	2000d0b8 	.word	0x2000d0b8

0800161c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <SystemInit+0x28>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <SystemInit+0x28>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SystemInit+0x28>)
 8001632:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001636:	609a      	str	r2, [r3, #8]
#endif
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x14>
 800164c:	2100      	movs	r1, #0
 800164e:	e003      	b.n	8001658 <LoopCopyDataInit>

08001650 <CopyDataInit>:
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <LoopFillZerobss+0x18>)
 8001652:	585b      	ldr	r3, [r3, r1]
 8001654:	5043      	str	r3, [r0, r1]
 8001656:	3104      	adds	r1, #4

08001658 <LoopCopyDataInit>:
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <LoopFillZerobss+0x1c>)
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <LoopFillZerobss+0x20>)
 800165c:	1842      	adds	r2, r0, r1
 800165e:	429a      	cmp	r2, r3
 8001660:	d3f6      	bcc.n	8001650 <CopyDataInit>
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x24>)
 8001664:	e002      	b.n	800166c <LoopFillZerobss>

08001666 <FillZerobss>:
 8001666:	2300      	movs	r3, #0
 8001668:	f842 3b04 	str.w	r3, [r2], #4

0800166c <LoopFillZerobss>:
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <LoopFillZerobss+0x28>)
 800166e:	429a      	cmp	r2, r3
 8001670:	d3f9      	bcc.n	8001666 <FillZerobss>
 8001672:	f7ff ffd3 	bl	800161c <SystemInit>
 8001676:	f011 fac5 	bl	8012c04 <__libc_init_array>
 800167a:	f011 fab1 	bl	8012be0 <main>
 800167e:	4770      	bx	lr
 8001680:	20020000 	.word	0x20020000
 8001684:	08025a64 	.word	0x08025a64
 8001688:	20000000 	.word	0x20000000
 800168c:	2000029c 	.word	0x2000029c
 8001690:	200002c0 	.word	0x200002c0
 8001694:	2000d0b4 	.word	0x2000d0b4

08001698 <DMA1_Stream0_IRQHandler>:
 8001698:	e7fe      	b.n	8001698 <DMA1_Stream0_IRQHandler>

0800169a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  return ret;
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80016dc:	2301      	movs	r3, #1
 80016de:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e026      	b.n	8001734 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	441a      	add	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d00c      	beq.n	8001728 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	6892      	ldr	r2, [r2, #8]
 8001718:	fbb3 f1f2 	udiv	r1, r3, r2
 800171c:	fb01 f202 	mul.w	r2, r1, r2
 8001720:	1a9a      	subs	r2, r3, r2
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	e002      	b.n	800172e <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001728:	2300      	movs	r3, #0
 800172a:	75fb      	strb	r3, [r7, #23]
      break;
 800172c:	e006      	b.n	800173c <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3301      	adds	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8d4      	bhi.n	80016e6 <qbufferRead+0x16>
    }
  }

  return ret;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
}
 800173e:	4618      	mov	r0, r3
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6892      	ldr	r2, [r2, #8]
 8001760:	fbb3 f1f2 	udiv	r1, r3, r2
 8001764:	fb01 f202 	mul.w	r2, r1, r2
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

  return ret;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <DWT_Delay_Init+0x58>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <DWT_Delay_Init+0x58>)
 8001786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <DWT_Delay_Init+0x58>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <DWT_Delay_Init+0x58>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <DWT_Delay_Init+0x5c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <DWT_Delay_Init+0x5c>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <DWT_Delay_Init+0x5c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <DWT_Delay_Init+0x5c>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <DWT_Delay_Init+0x5c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80017b6:	bf00      	nop
     __ASM volatile ("NOP");
 80017b8:	bf00      	nop
     __ASM volatile ("NOP");
 80017ba:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <DWT_Delay_Init+0x5c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80017c8:	2301      	movs	r3, #1
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000edf0 	.word	0xe000edf0
 80017d8:	e0001000 	.word	0xe0001000

080017dc <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
  bool ret = true;
 80017e2:	2301      	movs	r3, #1
 80017e4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <buttonInit+0xa0>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <buttonInit+0xa0>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6313      	str	r3, [r2, #48]	; 0x30
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <buttonInit+0xa0>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	e023      	b.n	8001862 <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 800181a:	4919      	ldr	r1, [pc, #100]	; (8001880 <buttonInit+0xa4>)
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	3304      	adds	r3, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 800182e:	4914      	ldr	r1, [pc, #80]	; (8001880 <buttonInit+0xa4>)
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	3308      	adds	r3, #8
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001842:	490f      	ldr	r1, [pc, #60]	; (8001880 <buttonInit+0xa4>)
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f00b fd72 	bl	800d340 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	3301      	adds	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	2b04      	cmp	r3, #4
 8001866:	ddd8      	ble.n	800181a <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001868:	4906      	ldr	r1, [pc, #24]	; (8001884 <buttonInit+0xa8>)
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <buttonInit+0xac>)
 800186c:	f000 ff5a 	bl	8002724 <cliAdd>
#endif

  return ret;
 8001870:	7efb      	ldrb	r3, [r7, #27]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	20000004 	.word	0x20000004
 8001884:	08001a49 	.word	0x08001a49
 8001888:	080172dc 	.word	0x080172dc

0800188c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <buttonGetPressed+0xdc>)
 80018a6:	4413      	add	r3, r2
 80018a8:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d901      	bls.n	80018b4 <buttonGetPressed+0x28>
  {
    return false;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e054      	b.n	800195e <buttonGetPressed+0xd2>
  }

  switch(button->State)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	7b9b      	ldrb	r3, [r3, #14]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <buttonGetPressed+0x36>
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d018      	beq.n	80018f2 <buttonGetPressed+0x66>
 80018c0:	e04c      	b.n	800195c <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f00b ff9e 	bl	800d810 <HAL_GPIO_ReadPin>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	7b1b      	ldrb	r3, [r3, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d13a      	bne.n	8001956 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 80018e0:	f7ff fca1 	bl	8001226 <millis>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	615a      	str	r2, [r3, #20]
  			  button->State = BUTTON_Pressed;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2201      	movs	r2, #1
 80018ee:	739a      	strb	r2, [r3, #14]
  		  }
  		  break;
 80018f0:	e031      	b.n	8001956 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f00b ff86 	bl	800d810 <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d114      	bne.n	800193a <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8001910:	f7ff fc89 	bl	8001226 <millis>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d91a      	bls.n	800195a <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2201      	movs	r2, #1
 8001928:	735a      	strb	r2, [r3, #13]
				  ret = button->PinState;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	7b5b      	ldrb	r3, [r3, #13]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8001938:	e00f      	b.n	800195a <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	739a      	strb	r2, [r3, #14]
			  button->PinState = GPIO_PIN_RESET;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	735a      	strb	r2, [r3, #13]
			  ret = button->PinState;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	7b5b      	ldrb	r3, [r3, #13]
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
		  break;
 8001954:	e001      	b.n	800195a <buttonGetPressed+0xce>
  		  break;
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <buttonGetPressed+0xd0>
		  break;
 800195a:	bf00      	nop
  }
  return ret;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000004 	.word	0x20000004

0800196c <buttonMain>:

uint8_t buttonMain(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
	uint8_t ret = false;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
	button_tbl_t *button;

	for (int i=0; i<BUTTON_MAX_CH; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	e05b      	b.n	8001a34 <buttonMain+0xc8>
	{
		button = &button_tbl[i];
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <buttonMain+0xd8>)
 8001988:	4413      	add	r3, r2
 800198a:	607b      	str	r3, [r7, #4]
	    if (i >= BUTTON_MAX_CH)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b04      	cmp	r3, #4
 8001990:	dd01      	ble.n	8001996 <buttonMain+0x2a>
	    {
	    	return false;
 8001992:	2300      	movs	r3, #0
 8001994:	e052      	b.n	8001a3c <buttonMain+0xd0>
	    }

	    switch(button->State)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7b9b      	ldrb	r3, [r3, #14]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <buttonMain+0x38>
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d018      	beq.n	80019d4 <buttonMain+0x68>
 80019a2:	e044      	b.n	8001a2e <buttonMain+0xc2>
	    {
	    	case BUTTON_IDLE:
	    		if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f00b ff2d 	bl	800d810 <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7b1b      	ldrb	r3, [r3, #12]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d132      	bne.n	8001a28 <buttonMain+0xbc>
	    		{
	    			button->lastDebounceTime = millis();
 80019c2:	f7ff fc30 	bl	8001226 <millis>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	615a      	str	r2, [r3, #20]
	    			button->State = BUTTON_Pressed;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	739a      	strb	r2, [r3, #14]
	    		}
	    		break;
 80019d2:	e029      	b.n	8001a28 <buttonMain+0xbc>

	    	case BUTTON_Pressed:
	    		if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f00b ff15 	bl	800d810 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7b1b      	ldrb	r3, [r3, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d110      	bne.n	8001a14 <buttonMain+0xa8>
	    		{
	    			if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80019f2:	f7ff fc18 	bl	8001226 <millis>
 80019f6:	4602      	mov	r2, r0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	1ad2      	subs	r2, r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d912      	bls.n	8001a2c <buttonMain+0xc0>
	    			{
	    				button->PinState = GPIO_PIN_SET;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	735a      	strb	r2, [r3, #13]
	    				ret = button->PinState;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7b5b      	ldrb	r3, [r3, #13]
 8001a10:	73fb      	strb	r3, [r7, #15]
	    		{
	    			button->State = BUTTON_IDLE;
	    			button->PinState = GPIO_PIN_RESET;
	    			ret = button->PinState;
	    		}
	    		break;
 8001a12:	e00b      	b.n	8001a2c <buttonMain+0xc0>
	    			button->State = BUTTON_IDLE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	739a      	strb	r2, [r3, #14]
	    			button->PinState = GPIO_PIN_RESET;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	735a      	strb	r2, [r3, #13]
	    			ret = button->PinState;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7b5b      	ldrb	r3, [r3, #13]
 8001a24:	73fb      	strb	r3, [r7, #15]
	    		break;
 8001a26:	e001      	b.n	8001a2c <buttonMain+0xc0>
	    		break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <buttonMain+0xc2>
	    		break;
 8001a2c:	bf00      	nop
	for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	dda0      	ble.n	800197c <buttonMain+0x10>
	    }
	}
	  return ret;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000004 	.word	0x20000004

08001a48 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d128      	bne.n	8001aae <cliButton+0x66>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <cliButton+0x80>)
 8001a62:	2000      	movs	r0, #0
 8001a64:	4798      	blx	r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001a6c:	e018      	b.n	8001aa0 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	e00c      	b.n	8001a8e <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff07 	bl	800188c <buttonGetPressed>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4812      	ldr	r0, [pc, #72]	; (8001acc <cliButton+0x84>)
 8001a84:	f000 fd3e 	bl	8002504 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	ddef      	ble.n	8001a74 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001a94:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <cliButton+0x88>)
 8001a96:	f000 fd35 	bl	8002504 <cliPrintf>

      delay(100);
 8001a9a:	2064      	movs	r0, #100	; 0x64
 8001a9c:	f7ff fbb8 	bl	8001210 <delay>
    while(cliKeepLoop())
 8001aa0:	f000 fe2a 	bl	80026f8 <cliKeepLoop>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1e1      	bne.n	8001a6e <cliButton+0x26>
    }

    ret = true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <cliButton+0x8c>)
 8001abc:	f000 fd22 	bl	8002504 <cliPrintf>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	080172e4 	.word	0x080172e4
 8001acc:	080172ec 	.word	0x080172ec
 8001ad0:	080172f0 	.word	0x080172f0
 8001ad4:	080172f4 	.word	0x080172f4

08001ad8 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <cliInit+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <cliInit+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <cliInit+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <cliInit+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <cliInit+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <cliInit+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <cliInit+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <cliInit+0x74>)
 8001b10:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <cliInit+0x78>)
 8001b12:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <cliInit+0x74>)
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <cliInit+0x7c>)
 8001b1a:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <cliInit+0x74>)
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <cliInit+0x80>)
 8001b22:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <cliInit+0x74>)
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <cliInit+0x84>)
 8001b2a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <cliInit+0x74>)
 8001b30:	f000 fb5e 	bl	80021f0 <cliLineClean>


  cliAdd("help", cliShowList);
 8001b34:	490a      	ldr	r1, [pc, #40]	; (8001b60 <cliInit+0x88>)
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <cliInit+0x8c>)
 8001b38:	f000 fdf4 	bl	8002724 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001b3c:	490a      	ldr	r1, [pc, #40]	; (8001b68 <cliInit+0x90>)
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <cliInit+0x94>)
 8001b40:	f000 fdf0 	bl	8002724 <cliAdd>

  return true;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002e4 	.word	0x200002e4
 8001b50:	080025b5 	.word	0x080025b5
 8001b54:	08002605 	.word	0x08002605
 8001b58:	0800265d 	.word	0x0800265d
 8001b5c:	080026a5 	.word	0x080026a5
 8001b60:	080027b9 	.word	0x080027b9
 8001b64:	08017304 	.word	0x08017304
 8001b68:	08002829 	.word	0x08002829
 8001b6c:	0801730c 	.word	0x0801730c

08001b70 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <cliOpen+0x38>)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <cliOpen+0x38>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fe61 	bl	8006854 <uartOpen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <cliOpen+0x38>)
 8001b98:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001b9a:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <cliOpen+0x38>)
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002e4 	.word	0x200002e4

08001bac <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <cliShowLog+0xdc>)
 8001bb6:	7a5b      	ldrb	r3, [r3, #9]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d061      	beq.n	8001c80 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a98      	ldrb	r0, [r3, #10]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4930      	ldr	r1, [pc, #192]	; (8001c8c <cliShowLog+0xe0>)
 8001bca:	f004 fff9 	bl	8006bc0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7a98      	ldrb	r0, [r3, #10]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001bd8:	461a      	mov	r2, r3
 8001bda:	492d      	ldr	r1, [pc, #180]	; (8001c90 <cliShowLog+0xe4>)
 8001bdc:	f004 fff0 	bl	8006bc0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7a98      	ldrb	r0, [r3, #10]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001bea:	461a      	mov	r2, r3
 8001bec:	4929      	ldr	r1, [pc, #164]	; (8001c94 <cliShowLog+0xe8>)
 8001bee:	f004 ffe7 	bl	8006bc0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a98      	ldrb	r0, [r3, #10]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4926      	ldr	r1, [pc, #152]	; (8001c98 <cliShowLog+0xec>)
 8001c00:	f004 ffde 	bl	8006bc0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7a98      	ldrb	r0, [r3, #10]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4922      	ldr	r1, [pc, #136]	; (8001c9c <cliShowLog+0xf0>)
 8001c12:	f004 ffd5 	bl	8006bc0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7a98      	ldrb	r0, [r3, #10]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001c20:	461a      	mov	r2, r3
 8001c22:	491f      	ldr	r1, [pc, #124]	; (8001ca0 <cliShowLog+0xf4>)
 8001c24:	f004 ffcc 	bl	8006bc0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7a98      	ldrb	r0, [r3, #10]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c32:	461a      	mov	r2, r3
 8001c34:	491b      	ldr	r1, [pc, #108]	; (8001ca4 <cliShowLog+0xf8>)
 8001c36:	f004 ffc3 	bl	8006bc0 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e012      	b.n	8001c66 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7a98      	ldrb	r0, [r3, #10]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4613      	mov	r3, r2
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4913      	ldr	r1, [pc, #76]	; (8001ca8 <cliShowLog+0xfc>)
 8001c5c:	f004 ffb0 	bl	8006bc0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	dbe5      	blt.n	8001c40 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7a9b      	ldrb	r3, [r3, #10]
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <cliShowLog+0x100>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 ffa0 	bl	8006bc0 <uartPrintf>
  }
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200002e4 	.word	0x200002e4
 8001c8c:	08017310 	.word	0x08017310
 8001c90:	08017320 	.word	0x08017320
 8001c94:	08017330 	.word	0x08017330
 8001c98:	08017340 	.word	0x08017340
 8001c9c:	08017350 	.word	0x08017350
 8001ca0:	08017360 	.word	0x08017360
 8001ca4:	08017370 	.word	0x08017370
 8001ca8:	08017380 	.word	0x08017380
 8001cac:	08017390 	.word	0x08017390

08001cb0 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <cliShowPrompt+0x28>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 ff7e 	bl	8006bc0 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <cliShowPrompt+0x2c>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 ff78 	bl	8006bc0 <uartPrintf>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	08017394 	.word	0x08017394
 8001cdc:	08017398 	.word	0x08017398

08001ce0 <cliMain>:

bool cliMain(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <cliMain+0x40>)
 8001ce6:	7a1b      	ldrb	r3, [r3, #8]
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <cliMain+0x16>
  {
    return false;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e012      	b.n	8001d1c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <cliMain+0x40>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 febc 	bl	8006a78 <uartAvailable>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <cliMain+0x40>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fefa 	bl	8006b04 <uartRead>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <cliMain+0x40>)
 8001d16:	f000 f805 	bl	8001d24 <cliUpdate>
  }

  return true;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200002e4 	.word	0x200002e4

08001d24 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001d3c:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7c1b      	ldrb	r3, [r3, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8168 	bne.w	8002018 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d4c:	d02a      	beq.n	8001da4 <cliUpdate+0x80>
 8001d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d50:	f300 80da 	bgt.w	8001f08 <cliUpdate+0x1e4>
 8001d54:	2b1b      	cmp	r3, #27
 8001d56:	d021      	beq.n	8001d9c <cliUpdate+0x78>
 8001d58:	2b1b      	cmp	r3, #27
 8001d5a:	f300 80d5 	bgt.w	8001f08 <cliUpdate+0x1e4>
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d062      	beq.n	8001e28 <cliUpdate+0x104>
 8001d62:	2b0d      	cmp	r3, #13
 8001d64:	f040 80d0 	bne.w	8001f08 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa56 	bl	8002224 <cliLineAdd>
          cliRunCmd(p_cli);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fb21 	bl	80023c0 <cliRunCmd>
        }

        line->count = 0;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff8b 	bl	8001cb0 <cliShowPrompt>
        break;
 8001d9a:	e144      	b.n	8002026 <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	741a      	strb	r2, [r3, #16]
        break;
 8001da2:	e140      	b.n	8002026 <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f080 8133 	bcs.w	800201c <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dca:	e013      	b.n	8001df4 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	441a      	add	r2, r3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	4619      	mov	r1, r3
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	440b      	add	r3, r1
 8001de4:	3b01      	subs	r3, #1
 8001de6:	69f9      	ldr	r1, [r7, #28]
 8001de8:	5c89      	ldrb	r1, [r1, r2]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	3301      	adds	r3, #1
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df4:	7efb      	ldrb	r3, [r7, #27]
 8001df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbe7      	blt.n	8001dcc <cliUpdate+0xa8>
          }

          line->count--;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e12:	461a      	mov	r2, r3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	498e      	ldr	r1, [pc, #568]	; (8002058 <cliUpdate+0x334>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 fecd 	bl	8006bc0 <uartPrintf>
        }
        break;
 8001e26:	e0f9      	b.n	800201c <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d055      	beq.n	8001ede <cliUpdate+0x1ba>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d050      	beq.n	8001ede <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10e      	bne.n	8001e6a <cliUpdate+0x146>
          {
            line->count--;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e62:	461a      	mov	r2, r3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2100      	movs	r1, #0
 8001e68:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d231      	bcs.n	8001ede <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	e013      	b.n	8001eb8 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e96:	461a      	mov	r2, r3
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9a:	441a      	add	r2, r3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	69f9      	ldr	r1, [r7, #28]
 8001eac:	5c89      	ldrb	r1, [r1, r2]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb8:	7ebb      	ldrb	r3, [r7, #26]
 8001eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbe7      	blt.n	8001e90 <cliUpdate+0x16c>
            }

            line->count--;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2100      	movs	r1, #0
 8001edc:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 809b 	beq.w	8002020 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4957      	ldr	r1, [pc, #348]	; (800205c <cliUpdate+0x338>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 fe5d 	bl	8006bc0 <uartPrintf>
        }
        break;
 8001f06:	e08b      	b.n	8002020 <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f0e:	3301      	adds	r3, #1
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001f16:	4293      	cmp	r3, r2
 8001f18:	f280 8084 	bge.w	8002024 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d124      	bne.n	8001f76 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	1cf9      	adds	r1, r7, #3
 8001f32:	2201      	movs	r2, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 fe0b 	bl	8006b50 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f40:	461a      	mov	r2, r3
 8001f42:	78f9      	ldrb	r1, [r7, #3]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f6e:	461a      	mov	r2, r3
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d24e      	bcs.n	8002024 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e013      	b.n	8001fc4 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	1acb      	subs	r3, r1, r3
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	5c89      	ldrb	r1, [r1, r2]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	7e7b      	ldrb	r3, [r7, #25]
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbe7      	blt.n	8001f9c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	78f9      	ldrb	r1, [r7, #3]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002000:	461a      	mov	r2, r3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	4914      	ldr	r1, [pc, #80]	; (8002060 <cliUpdate+0x33c>)
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fdd5 	bl	8006bc0 <uartPrintf>
          }
        }
        break;
 8002016:	e005      	b.n	8002024 <cliUpdate+0x300>
    }
  }
 8002018:	bf00      	nop
 800201a:	e004      	b.n	8002026 <cliUpdate+0x302>
        break;
 800201c:	bf00      	nop
 800201e:	e002      	b.n	8002026 <cliUpdate+0x302>
        break;
 8002020:	bf00      	nop
 8002022:	e000      	b.n	8002026 <cliUpdate+0x302>
        break;
 8002024:	bf00      	nop

  switch(p_cli->state)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7c1b      	ldrb	r3, [r3, #16]
 800202a:	3b01      	subs	r3, #1
 800202c:	2b03      	cmp	r3, #3
 800202e:	f200 80d2 	bhi.w	80021d6 <cliUpdate+0x4b2>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <cliUpdate+0x314>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	08002049 	.word	0x08002049
 800203c:	08002051 	.word	0x08002051
 8002040:	08002065 	.word	0x08002065
 8002044:	080021cd 	.word	0x080021cd
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	741a      	strb	r2, [r3, #16]
      break;
 800204e:	e0c2      	b.n	80021d6 <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	741a      	strb	r2, [r3, #16]
      break;
 8002056:	e0be      	b.n	80021d6 <cliUpdate+0x4b2>
 8002058:	080173a0 	.word	0x080173a0
 800205c:	080173a8 	.word	0x080173a8
 8002060:	080173b0 	.word	0x080173b0

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	2b44      	cmp	r3, #68	; 0x44
 800206e:	d11a      	bne.n	80020a6 <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <cliUpdate+0x382>
        {
          line->cursor--;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	3b01      	subs	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 800208a:	231b      	movs	r3, #27
 800208c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800208e:	235b      	movs	r3, #91	; 0x5b
 8002090:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f107 010c 	add.w	r1, r7, #12
 800209e:	2203      	movs	r2, #3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 fd55 	bl	8006b50 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	2b43      	cmp	r3, #67	; 0x43
 80020aa:	d11d      	bne.n	80020e8 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->count)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d215      	bcs.n	80020e8 <cliUpdate+0x3c4>
        {
          line->cursor++;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 80020cc:	231b      	movs	r3, #27
 80020ce:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80020d0:	235b      	movs	r3, #91	; 0x5b
 80020d2:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	f107 010c 	add.w	r1, r7, #12
 80020e0:	2203      	movs	r2, #3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 fd34 	bl	8006b50 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b41      	cmp	r3, #65	; 0x41
 80020ec:	d10c      	bne.n	8002108 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 80020ee:	2101      	movs	r1, #1
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8db 	bl	80022ac <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f004 fd5c 	bl	8006bc0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	2b42      	cmp	r3, #66	; 0x42
 800210c:	d10c      	bne.n	8002128 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 800210e:	2100      	movs	r1, #0
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f8cb 	bl	80022ac <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f004 fd4c 	bl	8006bc0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	2b31      	cmp	r3, #49	; 0x31
 800212c:	d10f      	bne.n	800214e <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7818      	ldrb	r0, [r3, #0]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	461a      	mov	r2, r3
 800213a:	492b      	ldr	r1, [pc, #172]	; (80021e8 <cliUpdate+0x4c4>)
 800213c:	f004 fd40 	bl	8006bc0 <uartPrintf>
        line->cursor = 0;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2204      	movs	r2, #4
 800214c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b34      	cmp	r3, #52	; 0x34
 8002152:	d13f      	bne.n	80021d4 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002160:	429a      	cmp	r2, r3
 8002162:	d210      	bcs.n	8002186 <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800216a:	b29a      	uxth	r2, r3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002172:	b29b      	uxth	r3, r3
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	8afa      	ldrh	r2, [r7, #22]
 800217e:	491b      	ldr	r1, [pc, #108]	; (80021ec <cliUpdate+0x4c8>)
 8002180:	4618      	mov	r0, r3
 8002182:	f004 fd1d 	bl	8006bc0 <uartPrintf>
        }
        if (line->cursor > line->count)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219c:	b29a      	uxth	r2, r3
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	8afa      	ldrh	r2, [r7, #22]
 80021b0:	490d      	ldr	r1, [pc, #52]	; (80021e8 <cliUpdate+0x4c4>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fd04 	bl	8006bc0 <uartPrintf>
        }
        line->cursor = line->count;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2204      	movs	r2, #4
 80021c8:	741a      	strb	r2, [r3, #16]
      }
      break;
 80021ca:	e003      	b.n	80021d4 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	741a      	strb	r2, [r3, #16]
      break;
 80021d2:	e000      	b.n	80021d6 <cliUpdate+0x4b2>
      break;
 80021d4:	bf00      	nop
  }



  cliShowLog(p_cli);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fce8 	bl	8001bac <cliShowLog>

  return ret;
 80021dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3730      	adds	r7, #48	; 0x30
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	080173bc 	.word	0x080173bc
 80021ec:	080173c4 	.word	0x080173c4

080021f0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	223f      	movs	r2, #63	; 0x3f
 800220c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002232:	461a      	mov	r2, r3
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	4413      	add	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	440b      	add	r3, r1
 8002242:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4610      	mov	r0, r2
 800224a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800224e:	2243      	movs	r2, #67	; 0x43
 8002250:	4619      	mov	r1, r3
 8002252:	f010 fd0b 	bl	8012c6c <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800225c:	2b03      	cmp	r3, #3
 800225e:	d807      	bhi.n	8002270 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002276:	b25a      	sxtb	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002284:	3301      	adds	r3, #1
 8002286:	425a      	negs	r2, r3
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	f002 0203 	and.w	r2, r2, #3
 8002290:	bf58      	it	pl
 8002292:	4253      	negpl	r3, r2
 8002294:	b2da      	uxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d076      	beq.n	80023b0 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7818      	ldrb	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80022d6:	461a      	mov	r2, r3
 80022d8:	4937      	ldr	r1, [pc, #220]	; (80023b8 <cliLineChange+0x10c>)
 80022da:	f004 fc71 	bl	8006bc0 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7818      	ldrb	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80022f2:	461a      	mov	r2, r3
 80022f4:	4931      	ldr	r1, [pc, #196]	; (80023bc <cliLineChange+0x110>)
 80022f6:	f004 fc63 	bl	8006bc0 <uartPrintf>
  }


  if (key_up == true)
 80022fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d125      	bne.n	800234e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002312:	b25a      	sxtb	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002320:	461a      	mov	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002328:	4413      	add	r3, r2
 800232a:	3b01      	subs	r3, #1
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002332:	fb93 f1f2 	sdiv	r1, r3, r2
 8002336:	fb01 f202 	mul.w	r2, r1, r2
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	b25a      	sxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e013      	b.n	8002376 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002354:	3301      	adds	r3, #1
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800235c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002360:	fb01 f202 	mul.w	r2, r1, r2
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	b25a      	sxtb	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002374:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	4413      	add	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	4403      	add	r3, r0
 8002388:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800238c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002390:	4611      	mov	r1, r2
 8002392:	2243      	movs	r2, #67	; 0x43
 8002394:	4618      	mov	r0, r3
 8002396:	f010 fc69 	bl	8012c6c <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80023ae:	e000      	b.n	80023b2 <cliLineChange+0x106>
    return;
 80023b0:	bf00      	nop
}
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	080173bc 	.word	0x080173bc
 80023bc:	080173cc 	.word	0x080173cc

080023c0 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80023c8:	2300      	movs	r3, #0
 80023ca:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f851 	bl	8002474 <cliParseArgs>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d046      	beq.n	8002466 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80023d8:	4825      	ldr	r0, [pc, #148]	; (8002470 <cliRunCmd+0xb0>)
 80023da:	f000 f893 	bl	8002504 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f8b1 	bl	800254c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e033      	b.n	8002458 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	4619      	mov	r1, r3
 800240c:	f7fd fee8 	bl	80001e0 <strcmp>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11d      	bne.n	8002452 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 800244c:	4610      	mov	r0, r2
 800244e:	4798      	blx	r3
        break;
 8002450:	e009      	b.n	8002466 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3301      	adds	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4293      	cmp	r3, r2
 8002464:	dbc4      	blt.n	80023f0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002466:	7afb      	ldrb	r3, [r7, #11]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	080173d4 	.word	0x080173d4

08002474 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002492:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800249a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800249c:	8afb      	ldrh	r3, [r7, #22]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <cliParseArgs+0x8c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f107 0208 	add.w	r2, r7, #8
 80024b0:	4619      	mov	r1, r3
 80024b2:	6938      	ldr	r0, [r7, #16]
 80024b4:	f011 fffa 	bl	80144ac <strtok_r>
 80024b8:	61b8      	str	r0, [r7, #24]
 80024ba:	e010      	b.n	80024de <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80024bc:	8afb      	ldrh	r3, [r7, #22]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	82fa      	strh	r2, [r7, #22]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <cliParseArgs+0x8c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f107 0208 	add.w	r2, r7, #8
 80024d4:	4619      	mov	r1, r3
 80024d6:	2000      	movs	r0, #0
 80024d8:	f011 ffe8 	bl	80144ac <strtok_r>
 80024dc:	61b8      	str	r0, [r7, #24]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1eb      	bne.n	80024bc <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	8afa      	ldrh	r2, [r7, #22]
 80024e8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80024ec:	8afb      	ldrh	r3, [r7, #22]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <cliParseArgs+0x82>
  {
    ret = true;
 80024f2:	2301      	movs	r3, #1
 80024f4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000007c 	.word	0x2000007c

08002504 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002504:	b40f      	push	{r0, r1, r2, r3}
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <cliPrintf+0x44>)
 8002514:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f103 0011 	add.w	r0, r3, #17
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002524:	f012 f86e 	bl	8014604 <vsniprintf>
 8002528:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	7818      	ldrb	r0, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3311      	adds	r3, #17
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4619      	mov	r1, r3
 8002536:	f004 fb0b 	bl	8006b50 <uartWrite>
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002544:	b004      	add	sp, #16
 8002546:	4770      	bx	lr
 8002548:	200002e4 	.word	0x200002e4

0800254c <cliToUpper>:

void cliToUpper(char *str)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	81fb      	strh	r3, [r7, #14]
 8002558:	e018      	b.n	800258c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002564:	7b7b      	ldrb	r3, [r7, #13]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d014      	beq.n	8002594 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800256a:	7b7b      	ldrb	r3, [r7, #13]
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d905      	bls.n	800257c <cliToUpper+0x30>
 8002570:	7b7b      	ldrb	r3, [r7, #13]
 8002572:	2b7a      	cmp	r3, #122	; 0x7a
 8002574:	d802      	bhi.n	800257c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002576:	7b7b      	ldrb	r3, [r7, #13]
 8002578:	3b20      	subs	r3, #32
 800257a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	7b7a      	ldrb	r2, [r7, #13]
 8002584:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	3301      	adds	r3, #1
 800258a:	81fb      	strh	r3, [r7, #14]
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d9e3      	bls.n	800255a <cliToUpper+0xe>
 8002592:	e000      	b.n	8002596 <cliToUpper+0x4a>
      break;
 8002594:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	2b10      	cmp	r3, #16
 800259a:	d105      	bne.n	80025a8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	3b01      	subs	r3, #1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
  }
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <cliArgsGetData+0x4c>)
 80025c4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d301      	bcc.n	80025d8 <cliArgsGetData+0x24>
  {
    return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e00e      	b.n	80025f6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f011 ffd4 	bl	8014598 <strtoul>
 80025f0:	4603      	mov	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]

  return ret;
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200002e4 	.word	0x200002e4

08002604 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <cliArgsGetFloat+0x54>)
 8002616:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	b29a      	uxth	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <cliArgsGetFloat+0x28>
  {
    return 0;
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e00d      	b.n	8002648 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f011 feb1 	bl	80143a4 <strtof>
 8002642:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eeb0 0a67 	vmov.f32	s0, s15
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200002e4 	.word	0x200002e4

0800265c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <cliArgsGetStr+0x44>)
 800266c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	b29a      	uxth	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002678:	429a      	cmp	r2, r3
 800267a:	d301      	bcc.n	8002680 <cliArgsGetStr+0x24>
  {
    return 0;
 800267c:	2300      	movs	r3, #0
 800267e:	e008      	b.n	8002692 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002690:	68fb      	ldr	r3, [r7, #12]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200002e4 	.word	0x200002e4

080026a4 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <cliArgsIsStr+0x50>)
 80026b6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d301      	bcc.n	80026ca <cliArgsIsStr+0x26>
  {
    return 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e010      	b.n	80026ec <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f7fd fd80 	bl	80001e0 <strcmp>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <cliArgsIsStr+0x46>
  {
    ret = true;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200002e4 	.word	0x200002e4

080026f8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <cliKeepLoop+0x28>)
 8002700:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 f9b6 	bl	8006a78 <uartAvailable>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <cliKeepLoop+0x1e>
  {
    return true;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002716:	2300      	movs	r3, #0
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	200002e4 	.word	0x200002e4

08002724 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <cliAdd+0x90>)
 8002734:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d901      	bls.n	8002744 <cliAdd+0x20>
  {
    return false;
 8002740:	2300      	movs	r3, #0
 8002742:	e032      	b.n	80027aa <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800274a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800274c:	89fa      	ldrh	r2, [r7, #14]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f010 fff2 	bl	801374c <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002768:	89fa      	ldrh	r2, [r7, #14]
 800276a:	6939      	ldr	r1, [r7, #16]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800277e:	89fa      	ldrh	r2, [r7, #14]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff feda 	bl	800254c <cliToUpper>

  p_cli->cmd_count++;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800279e:	3301      	adds	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200002e4 	.word	0x200002e4

080027b8 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <cliShowList+0x60>)
 80027c2:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80027c4:	4815      	ldr	r0, [pc, #84]	; (800281c <cliShowList+0x64>)
 80027c6:	f7ff fe9d 	bl	8002504 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80027ca:	4815      	ldr	r0, [pc, #84]	; (8002820 <cliShowList+0x68>)
 80027cc:	f7ff fe9a 	bl	8002504 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e012      	b.n	80027fc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe8a 	bl	8002504 <cliPrintf>
    cliPrintf("\r\n");
 80027f0:	480a      	ldr	r0, [pc, #40]	; (800281c <cliShowList+0x64>)
 80027f2:	f7ff fe87 	bl	8002504 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3301      	adds	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4293      	cmp	r3, r2
 8002808:	dbe5      	blt.n	80027d6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <cliShowList+0x6c>)
 800280c:	f7ff fe7a 	bl	8002504 <cliPrintf>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200002e4 	.word	0x200002e4
 800281c:	080173d4 	.word	0x080173d4
 8002820:	080173d8 	.word	0x080173d8
 8002824:	080173f8 	.word	0x080173f8

08002828 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002830:	2310      	movs	r3, #16
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002848:	4840      	ldr	r0, [pc, #256]	; (800294c <cliMemoryDump+0x124>)
 800284a:	f7ff fe5b 	bl	8002504 <cliPrintf>
 800284e:	e07a      	b.n	8002946 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b01      	cmp	r3, #1
 8002854:	dd09      	ble.n	800286a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f011 fe99 	bl	8014598 <strtoul>
 8002866:	4603      	mov	r3, r0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f011 fe90 	bl	8014598 <strtoul>
 8002878:	4603      	mov	r3, r0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002880:	4833      	ldr	r0, [pc, #204]	; (8002950 <cliMemoryDump+0x128>)
 8002882:	f7ff fe3f 	bl	8002504 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	e058      	b.n	800293e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	4619      	mov	r1, r3
 800289a:	482e      	ldr	r0, [pc, #184]	; (8002954 <cliMemoryDump+0x12c>)
 800289c:	f7ff fe32 	bl	8002504 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	482c      	ldr	r0, [pc, #176]	; (8002958 <cliMemoryDump+0x130>)
 80028a8:	f7ff fe2c 	bl	8002504 <cliPrintf>

    if ((idx%4) == 3)
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	425a      	negs	r2, r3
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	f002 0203 	and.w	r2, r2, #3
 80028b8:	bf58      	it	pl
 80028ba:	4253      	negpl	r3, r2
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d138      	bne.n	8002932 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80028c0:	4826      	ldr	r0, [pc, #152]	; (800295c <cliMemoryDump+0x134>)
 80028c2:	f7ff fe1f 	bl	8002504 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	e02c      	b.n	8002926 <cliMemoryDump+0xfe>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80028d0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e01d      	b.n	8002914 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80028d8:	f107 020c 	add.w	r2, r7, #12
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b1f      	cmp	r3, #31
 80028e4:	d910      	bls.n	8002908 <cliMemoryDump+0xe0>
 80028e6:	f107 020c 	add.w	r2, r7, #12
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b7e      	cmp	r3, #126	; 0x7e
 80028f2:	d809      	bhi.n	8002908 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80028f4:	f107 020c 	add.w	r2, r7, #12
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4817      	ldr	r0, [pc, #92]	; (8002960 <cliMemoryDump+0x138>)
 8002902:	f7ff fdff 	bl	8002504 <cliPrintf>
 8002906:	e002      	b.n	800290e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002908:	4816      	ldr	r0, [pc, #88]	; (8002964 <cliMemoryDump+0x13c>)
 800290a:	f7ff fdfb 	bl	8002504 <cliPrintf>
        for (i=0;i<4;i++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b03      	cmp	r3, #3
 8002918:	ddde      	ble.n	80028d8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3304      	adds	r3, #4
 800291e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	3301      	adds	r3, #1
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2b03      	cmp	r3, #3
 800292a:	ddcf      	ble.n	80028cc <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800292c:	480e      	ldr	r0, [pc, #56]	; (8002968 <cliMemoryDump+0x140>)
 800292e:	f7ff fde9 	bl	8002504 <cliPrintf>
    }
    addr++;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	3304      	adds	r3, #4
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	3301      	adds	r3, #1
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	429a      	cmp	r2, r3
 8002944:	dba2      	blt.n	800288c <cliMemoryDump+0x64>
  }
}
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	08017418 	.word	0x08017418
 8002950:	0801742c 	.word	0x0801742c
 8002954:	08017434 	.word	0x08017434
 8002958:	08017440 	.word	0x08017440
 800295c:	08017448 	.word	0x08017448
 8002960:	0801744c 	.word	0x0801744c
 8002964:	08017450 	.word	0x08017450
 8002968:	08017454 	.word	0x08017454

0800296c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8002972:	2305      	movs	r3, #5
 8002974:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8002976:	2201      	movs	r2, #1
 8002978:	4939      	ldr	r1, [pc, #228]	; (8002a60 <Ds18b20_Init+0xf4>)
 800297a:	483a      	ldr	r0, [pc, #232]	; (8002a64 <Ds18b20_Init+0xf8>)
 800297c:	f002 f9d1 	bl	8004d22 <OneWire_Init>
		TempSensorCount = 0;
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <Ds18b20_Init+0xfc>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8002986:	e002      	b.n	800298e <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002988:	2064      	movs	r0, #100	; 0x64
 800298a:	f009 fa3b 	bl	800be04 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800298e:	f009 fa2d 	bl	800bdec <HAL_GetTick>
 8002992:	4603      	mov	r3, r0
 8002994:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002998:	4293      	cmp	r3, r2
 800299a:	d9f5      	bls.n	8002988 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800299c:	4831      	ldr	r0, [pc, #196]	; (8002a64 <Ds18b20_Init+0xf8>)
 800299e:	f002 faae 	bl	8004efe <OneWire_First>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <Ds18b20_Init+0x100>)
 80029a8:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80029aa:	e019      	b.n	80029e0 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f009 fa29 	bl	800be04 <HAL_Delay>
			TempSensorCount++;
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <Ds18b20_Init+0xfc>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <Ds18b20_Init+0xfc>)
 80029bc:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <Ds18b20_Init+0xfc>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <Ds18b20_Init+0x104>)
 80029c8:	4413      	add	r3, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	4825      	ldr	r0, [pc, #148]	; (8002a64 <Ds18b20_Init+0xf8>)
 80029ce:	f002 fbab 	bl	8005128 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80029d2:	4824      	ldr	r0, [pc, #144]	; (8002a64 <Ds18b20_Init+0xf8>)
 80029d4:	f002 faa3 	bl	8004f1e <OneWire_Next>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <Ds18b20_Init+0x100>)
 80029de:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <Ds18b20_Init+0x100>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e1      	bne.n	80029ac <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <Ds18b20_Init+0xfc>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1bc      	bne.n	8002976 <Ds18b20_Init+0xa>
 80029fc:	e000      	b.n	8002a00 <Ds18b20_Init+0x94>
			break;
 80029fe:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <Ds18b20_Init+0x9e>
		return false;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e026      	b.n	8002a58 <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71bb      	strb	r3, [r7, #6]
 8002a0e:	e019      	b.n	8002a44 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 8002a10:	2032      	movs	r0, #50	; 0x32
 8002a12:	f009 f9f7 	bl	800be04 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002a16:	79bb      	ldrb	r3, [r7, #6]
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <Ds18b20_Init+0x104>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	220c      	movs	r2, #12
 8002a20:	4619      	mov	r1, r3
 8002a22:	4810      	ldr	r0, [pc, #64]	; (8002a64 <Ds18b20_Init+0xf8>)
 8002a24:	f000 f9cc 	bl	8002dc0 <DS18B20_SetResolution>
		HAL_Delay(50);
 8002a28:	2032      	movs	r0, #50	; 0x32
 8002a2a:	f009 f9eb 	bl	800be04 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002a2e:	79bb      	ldrb	r3, [r7, #6]
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <Ds18b20_Init+0x104>)
 8002a34:	4413      	add	r3, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	480a      	ldr	r0, [pc, #40]	; (8002a64 <Ds18b20_Init+0xf8>)
 8002a3a:	f000 fa5a 	bl	8002ef2 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002a3e:	79bb      	ldrb	r3, [r7, #6]
 8002a40:	3301      	adds	r3, #1
 8002a42:	71bb      	strb	r3, [r7, #6]
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <Ds18b20_Init+0xfc>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	79ba      	ldrb	r2, [r7, #6]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3e0      	bcc.n	8002a10 <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 8002a4e:	4909      	ldr	r1, [pc, #36]	; (8002a74 <Ds18b20_Init+0x108>)
 8002a50:	4809      	ldr	r0, [pc, #36]	; (8002a78 <Ds18b20_Init+0x10c>)
 8002a52:	f7ff fe67 	bl	8002724 <cliAdd>
	#endif

	return true;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020400 	.word	0x40020400
 8002a64:	20000738 	.word	0x20000738
 8002a68:	2000074d 	.word	0x2000074d
 8002a6c:	2000074c 	.word	0x2000074c
 8002a70:	20000728 	.word	0x20000728
 8002a74:	08002fc1 	.word	0x08002fc1
 8002a78:	08017464 	.word	0x08017464

08002a7c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <Ds18b20_ManualConvert+0x104>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <Ds18b20_ManualConvert+0x14>
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d013      	beq.n	8002ab6 <Ds18b20_ManualConvert+0x3a>
 8002a8e:	e072      	b.n	8002b76 <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002a90:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <Ds18b20_ManualConvert+0x108>)
 8002a92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a96:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8002a98:	483b      	ldr	r0, [pc, #236]	; (8002b88 <Ds18b20_ManualConvert+0x10c>)
 8002a9a:	f000 f87d 	bl	8002b98 <DS18B20_StartAll>
	  		  pre_time = millis();
 8002a9e:	f7fe fbc2 	bl	8001226 <millis>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4a39      	ldr	r2, [pc, #228]	; (8002b8c <Ds18b20_ManualConvert+0x110>)
 8002aa6:	6013      	str	r3, [r2, #0]
	  		  state++;
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <Ds18b20_ManualConvert+0x104>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <Ds18b20_ManualConvert+0x104>)
 8002ab2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002ab4:	e05f      	b.n	8002b76 <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8002ab6:	f7fe fbb6 	bl	8001226 <millis>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <Ds18b20_ManualConvert+0x110>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	d956      	bls.n	8002b74 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8002ac6:	4830      	ldr	r0, [pc, #192]	; (8002b88 <Ds18b20_ManualConvert+0x10c>)
 8002ac8:	f000 fa6e 	bl	8002fa8 <DS18B20_AllDone>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d112      	bne.n	8002af8 <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 8002ad2:	f7fe fba8 	bl	8001226 <millis>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <Ds18b20_ManualConvert+0x110>)
 8002ada:	6013      	str	r3, [r2, #0]
					Ds18b20Timeout-=1;
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <Ds18b20_ManualConvert+0x108>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <Ds18b20_ManualConvert+0x108>)
 8002ae6:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <Ds18b20_ManualConvert+0x108>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d141      	bne.n	8002b74 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 8002af0:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <Ds18b20_ManualConvert+0x104>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
						break;
 8002af6:	e03e      	b.n	8002b76 <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <Ds18b20_ManualConvert+0x108>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d024      	beq.n	8002b4a <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	71fb      	strb	r3, [r7, #7]
 8002b04:	e01b      	b.n	8002b3e <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <Ds18b20_ManualConvert+0x114>)
 8002b0c:	1899      	adds	r1, r3, r2
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	3308      	adds	r3, #8
 8002b14:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <Ds18b20_ManualConvert+0x114>)
 8002b16:	4413      	add	r3, r2
 8002b18:	79fc      	ldrb	r4, [r7, #7]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	481a      	ldr	r0, [pc, #104]	; (8002b88 <Ds18b20_ManualConvert+0x10c>)
 8002b1e:	f000 f84f 	bl	8002bc0 <DS18B20_Read>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <Ds18b20_ManualConvert+0x114>)
 8002b28:	0123      	lsls	r3, r4, #4
 8002b2a:	4413      	add	r3, r2
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	460a      	mov	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <Ds18b20_ManualConvert+0x104>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <Ds18b20_ManualConvert+0x118>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	79fa      	ldrb	r2, [r7, #7]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3de      	bcc.n	8002b06 <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8002b48:	e014      	b.n	8002b74 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71bb      	strb	r3, [r7, #6]
 8002b4e:	e00c      	b.n	8002b6a <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8002b50:	79bb      	ldrb	r3, [r7, #6]
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <Ds18b20_ManualConvert+0x114>)
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	330c      	adds	r3, #12
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <Ds18b20_ManualConvert+0x104>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b64:	79bb      	ldrb	r3, [r7, #6]
 8002b66:	3301      	adds	r3, #1
 8002b68:	71bb      	strb	r3, [r7, #6]
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <Ds18b20_ManualConvert+0x118>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	79ba      	ldrb	r2, [r7, #6]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3ed      	bcc.n	8002b50 <Ds18b20_ManualConvert+0xd4>
			  break;
 8002b74:	bf00      	nop
	  }
	#endif
	  return true;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	20000750 	.word	0x20000750
 8002b84:	2000074e 	.word	0x2000074e
 8002b88:	20000738 	.word	0x20000738
 8002b8c:	20000754 	.word	0x20000754
 8002b90:	20000728 	.word	0x20000728
 8002b94:	2000074d 	.word	0x2000074d

08002b98 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f002 f8e7 	bl	8004d74 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002ba6:	21cc      	movs	r1, #204	; 0xcc
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f002 f969 	bl	8004e80 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002bae:	2144      	movs	r1, #68	; 0x44
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f002 f965 	bl	8004e80 <OneWire_WriteByte>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b08b      	sub	sp, #44	; 0x2c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	f000 f97a 	bl	8002ed0 <DS18B20_Is>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <DS18B20_Read+0x26>
		return false;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e0e1      	b.n	8002daa <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f002 f920 	bl	8004e2c <OneWire_ReadBit>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e0d9      	b.n	8002daa <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f002 f8bc 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f002 fa73 	bl	80050ea <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c04:	21be      	movs	r1, #190	; 0xbe
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f002 f93a 	bl	8004e80 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e00d      	b.n	8002c2e <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002c12:	7ffc      	ldrb	r4, [r7, #31]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f002 f951 	bl	8004ebc <OneWire_ReadByte>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002c22:	443b      	add	r3, r7
 8002c24:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	7ffb      	ldrb	r3, [r7, #31]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d9ee      	bls.n	8002c12 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2108      	movs	r1, #8
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fa91 	bl	8005162 <OneWire_CRC8>
 8002c40:	4603      	mov	r3, r0
 8002c42:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002c44:	7f3b      	ldrb	r3, [r7, #28]
 8002c46:	7fba      	ldrb	r2, [r7, #30]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e0ac      	b.n	8002daa <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002c50:	7d3b      	ldrb	r3, [r7, #20]
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	7d7b      	ldrb	r3, [r7, #21]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f002 f887 	bl	8004d74 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002c66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da05      	bge.n	8002c7a <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002c6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c70:	425b      	negs	r3, r3
 8002c72:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002c7a:	7e3b      	ldrb	r3, [r7, #24]
 8002c7c:	115b      	asrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3309      	adds	r3, #9
 8002c88:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002c8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca2:	b25a      	sxtb	r2, r3
 8002ca4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002cae:	7f7b      	ldrb	r3, [r7, #29]
 8002cb0:	3b09      	subs	r3, #9
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d858      	bhi.n	8002d68 <DS18B20_Read+0x1a8>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <DS18B20_Read+0xfc>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d1d 	.word	0x08002d1d
 8002cc8:	08002d45 	.word	0x08002d45
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002ccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cce:	08db      	lsrs	r3, r3, #3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cde:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ce6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002cf2:	e03e      	b.n	8002d72 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002cf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d06:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002d0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d0e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d16:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d1a:	e02a      	b.n	8002d72 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002d32:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d36:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d42:	e016      	b.n	8002d72 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d52:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002db4 <DS18B20_Read+0x1f4>
 8002d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d62:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d66:	e004      	b.n	8002d72 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <DS18B20_Read+0x1f8>)
 8002d6a:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002d72:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d7e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002d8a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002d92:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002dbc <DS18B20_Read+0x1fc>
 8002d96:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	372c      	adds	r7, #44	; 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	3d800000 	.word	0x3d800000
 8002db8:	437f0000 	.word	0x437f0000
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002dce:	68b8      	ldr	r0, [r7, #8]
 8002dd0:	f000 f87e 	bl	8002ed0 <DS18B20_Is>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <DS18B20_SetResolution+0x1e>
		return 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e074      	b.n	8002ec8 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f001 ffc8 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f002 f97f 	bl	80050ea <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002dec:	21be      	movs	r1, #190	; 0xbe
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f002 f846 	bl	8004e80 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f002 f861 	bl	8004ebc <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f002 f85e 	bl	8004ebc <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f002 f85b 	bl	8004ebc <OneWire_ReadByte>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f002 f856 	bl	8004ebc <OneWire_ReadByte>
 8002e10:	4603      	mov	r3, r0
 8002e12:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f002 f851 	bl	8004ebc <OneWire_ReadByte>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b09      	cmp	r3, #9
 8002e22:	d108      	bne.n	8002e36 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	f023 0320 	bic.w	r3, r3, #32
 8002e32:	75fb      	strb	r3, [r7, #23]
 8002e34:	e022      	b.n	8002e7c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b0a      	cmp	r3, #10
 8002e3a:	d108      	bne.n	8002e4e <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e42:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	f043 0320 	orr.w	r3, r3, #32
 8002e4a:	75fb      	strb	r3, [r7, #23]
 8002e4c:	e016      	b.n	8002e7c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	2b0b      	cmp	r3, #11
 8002e52:	d108      	bne.n	8002e66 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	f023 0320 	bic.w	r3, r3, #32
 8002e62:	75fb      	strb	r3, [r7, #23]
 8002e64:	e00a      	b.n	8002e7c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d107      	bne.n	8002e7c <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e72:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f001 ff79 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f002 f930 	bl	80050ea <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002e8a:	214e      	movs	r1, #78	; 0x4e
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f001 fff7 	bl	8004e80 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002e92:	7dbb      	ldrb	r3, [r7, #22]
 8002e94:	4619      	mov	r1, r3
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f001 fff2 	bl	8004e80 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002e9c:	7d7b      	ldrb	r3, [r7, #21]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f001 ffed 	bl	8004e80 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f001 ffe8 	bl	8004e80 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f001 ff5f 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f002 f916 	bl	80050ea <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002ebe:	2148      	movs	r1, #72	; 0x48
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f001 ffdd 	bl	8004e80 <OneWire_WriteByte>

	return 1;
 8002ec6:	2301      	movs	r3, #1
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b28      	cmp	r3, #40	; 0x28
 8002ede:	d101      	bne.n	8002ee4 <DS18B20_Is+0x14>
		return 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <DS18B20_Is+0x16>

	return 0;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f7ff ffe7 	bl	8002ed0 <DS18B20_Is>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e049      	b.n	8002fa0 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f001 ff31 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f002 f8e8 	bl	80050ea <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002f1a:	21be      	movs	r1, #190	; 0xbe
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 ffaf 	bl	8004e80 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f001 ffca 	bl	8004ebc <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f001 ffc7 	bl	8004ebc <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f001 ffc4 	bl	8004ebc <OneWire_ReadByte>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 ffbf 	bl	8004ebc <OneWire_ReadByte>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f001 ffba 	bl	8004ebc <OneWire_ReadByte>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002f4c:	237d      	movs	r3, #125	; 0x7d
 8002f4e:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002f50:	23c9      	movs	r3, #201	; 0xc9
 8002f52:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f001 ff0d 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f002 f8c4 	bl	80050ea <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002f62:	214e      	movs	r1, #78	; 0x4e
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 ff8b 	bl	8004e80 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 ff86 	bl	8004e80 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f001 ff81 	bl	8004e80 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002f7e:	7b7b      	ldrb	r3, [r7, #13]
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 ff7c 	bl	8004e80 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 fef3 	bl	8004d74 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f002 f8aa 	bl	80050ea <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f96:	2148      	movs	r1, #72	; 0x48
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 ff71 	bl	8004e80 <OneWire_WriteByte>

	return 1;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f001 ff3b 	bl	8004e2c <OneWire_ReadBit>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d11b      	bne.n	800300c <cliDS18B20+0x4c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4913      	ldr	r1, [pc, #76]	; (8003028 <cliDS18B20+0x68>)
 8002fda:	2000      	movs	r0, #0
 8002fdc:	4798      	blx	r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <cliDS18B20+0x4c>
  {

	  while(cliKeepLoop())
 8002fe4:	e00b      	b.n	8002ffe <cliDS18B20+0x3e>
	  {
		  Ds18b20_ManualConvert();
 8002fe6:	f7ff fd49 	bl	8002a7c <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <cliDS18B20+0x6c>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fac2 	bl	8000578 <__aeabi_f2d>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <cliDS18B20+0x70>)
 8002ffa:	f7ff fa83 	bl	8002504 <cliPrintf>
	  while(cliKeepLoop())
 8002ffe:	f7ff fb7b 	bl	80026f8 <cliKeepLoop>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ee      	bne.n	8002fe6 <cliDS18B20+0x26>
	  }
    ret = true;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <cliDS18B20+0x5e>
  {
    cliPrintf("DS18B20 test\n");
 8003018:	4806      	ldr	r0, [pc, #24]	; (8003034 <cliDS18B20+0x74>)
 800301a:	f7ff fa73 	bl	8002504 <cliPrintf>
  }
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	0801746c 	.word	0x0801746c
 800302c:	20000728 	.word	0x20000728
 8003030:	08017474 	.word	0x08017474
 8003034:	0801748c 	.word	0x0801748c

08003038 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  bool ret = true;
 800303e:	2301      	movs	r3, #1
 8003040:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <fatfsInit+0x40>)
 8003044:	480d      	ldr	r0, [pc, #52]	; (800307c <fatfsInit+0x44>)
 8003046:	f008 fd7f 	bl	800bb48 <FATFS_LinkDriver>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8003050:	2200      	movs	r2, #0
 8003052:	4909      	ldr	r1, [pc, #36]	; (8003078 <fatfsInit+0x40>)
 8003054:	480a      	ldr	r0, [pc, #40]	; (8003080 <fatfsInit+0x48>)
 8003056:	f007 f971 	bl	800a33c <f_mount>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <fatfsInit+0x2e>
    {
      is_init = true;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <fatfsInit+0x4c>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <fatfsInit+0x50>)
 8003068:	4808      	ldr	r0, [pc, #32]	; (800308c <fatfsInit+0x54>)
 800306a:	f7ff fb5b 	bl	8002724 <cliAdd>
#endif

  return ret;
 800306e:	79fb      	ldrb	r3, [r7, #7]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000990 	.word	0x20000990
 800307c:	0801795c 	.word	0x0801795c
 8003080:	2000075c 	.word	0x2000075c
 8003084:	20000758 	.word	0x20000758
 8003088:	08003165 	.word	0x08003165
 800308c:	0801749c 	.word	0x0801749c

08003090 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0d6      	sub	sp, #344	; 0x158
 8003094:	af00      	add	r7, sp, #0
 8003096:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800309a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800309e:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 80030a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80030a4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030a8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	4610      	mov	r0, r2
 80030b0:	f008 f8bd 	bl	800b22e <f_opendir>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 80030ba:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d144      	bne.n	800314c <fatfsDir+0xbc>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80030c2:	f107 0208 	add.w	r2, r7, #8
 80030c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f008 f957 	bl	800b380 <f_readdir>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80030d8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d130      	bne.n	8003142 <fatfsDir+0xb2>
 80030e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80030e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030e8:	7d9b      	ldrb	r3, [r3, #22]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d029      	beq.n	8003142 <fatfsDir+0xb2>
      if (fno.fattrib & AM_DIR)
 80030ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80030f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030f6:	7a1b      	ldrb	r3, [r3, #8]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <fatfsDir+0x8a>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8003100:	f107 0308 	add.w	r3, r7, #8
 8003104:	f103 0216 	add.w	r2, r3, #22
 8003108:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800310c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	4812      	ldr	r0, [pc, #72]	; (800315c <fatfsDir+0xcc>)
 8003114:	f7ff f9f6 	bl	8002504 <cliPrintf>
 8003118:	e7d3      	b.n	80030c2 <fatfsDir+0x32>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 800311a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800311e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	f103 0216 	add.w	r2, r3, #22
 800312e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003132:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 8003136:	4603      	mov	r3, r0
 8003138:	6809      	ldr	r1, [r1, #0]
 800313a:	4809      	ldr	r0, [pc, #36]	; (8003160 <fatfsDir+0xd0>)
 800313c:	f7ff f9e2 	bl	8002504 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003140:	e7bf      	b.n	80030c2 <fatfsDir+0x32>
      }
    }
    f_closedir(&dir);
 8003142:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003146:	4618      	mov	r0, r3
 8003148:	f008 f8f4 	bl	800b334 <f_closedir>
  }

  return res;
 800314c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8003150:	4618      	mov	r0, r3
 8003152:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	080174a4 	.word	0x080174a4
 8003160:	080174b0 	.word	0x080174b0

08003164 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800316a:	af00      	add	r7, sp, #0
 800316c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003170:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003174:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 800317c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003180:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d14d      	bne.n	8003228 <cliFatfs+0xc4>
 800318c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003190:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	4990      	ldr	r1, [pc, #576]	; (80033dc <cliFatfs+0x278>)
 800319a:	2000      	movs	r0, #0
 800319c:	4798      	blx	r3
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d041      	beq.n	8003228 <cliFatfs+0xc4>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 80031a4:	4b8e      	ldr	r3, [pc, #568]	; (80033e0 <cliFatfs+0x27c>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	488e      	ldr	r0, [pc, #568]	; (80033e4 <cliFatfs+0x280>)
 80031ac:	f7ff f9aa 	bl	8002504 <cliPrintf>

    if (is_init == true)
 80031b0:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <cliFatfs+0x27c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d034      	beq.n	8003222 <cliFatfs+0xbe>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 80031b8:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80031bc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80031c0:	4619      	mov	r1, r3
 80031c2:	4889      	ldr	r0, [pc, #548]	; (80033e8 <cliFatfs+0x284>)
 80031c4:	f008 f929 	bl	800b41a <f_getfree>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 80031ce:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11f      	bne.n	8003216 <cliFatfs+0xb2>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 80031d6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	3b02      	subs	r3, #2
 80031de:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80031e2:	8952      	ldrh	r2, [r2, #10]
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 80031ec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80031f0:	895b      	ldrh	r3, [r3, #10]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80031f8:	fb02 f303 	mul.w	r3, r2, r3
 80031fc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8003200:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003204:	0859      	lsrs	r1, r3, #1
 8003206:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	461a      	mov	r2, r3
 800320e:	4877      	ldr	r0, [pc, #476]	; (80033ec <cliFatfs+0x288>)
 8003210:	f7ff f978 	bl	8002504 <cliPrintf>
 8003214:	e005      	b.n	8003222 <cliFatfs+0xbe>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8003216:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800321a:	4619      	mov	r1, r3
 800321c:	4874      	ldr	r0, [pc, #464]	; (80033f0 <cliFatfs+0x28c>)
 800321e:	f7ff f971 	bl	8002504 <cliPrintf>
       }
    }

    ret = true;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8003228:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800322c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d11e      	bne.n	8003276 <cliFatfs+0x112>
 8003238:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800323c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	496b      	ldr	r1, [pc, #428]	; (80033f4 <cliFatfs+0x290>)
 8003246:	2000      	movs	r0, #0
 8003248:	4798      	blx	r3
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <cliFatfs+0x112>
  {
    FRESULT res;

    res = fatfsDir("/");
 8003250:	4869      	ldr	r0, [pc, #420]	; (80033f8 <cliFatfs+0x294>)
 8003252:	f7ff ff1d 	bl	8003090 <fatfsDir>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 800325c:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <cliFatfs+0x10c>
    {
      cliPrintf(" err : %d\n", res);
 8003264:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003268:	4619      	mov	r1, r3
 800326a:	4861      	ldr	r0, [pc, #388]	; (80033f0 <cliFatfs+0x28c>)
 800326c:	f7ff f94a 	bl	8002504 <cliPrintf>
    }

    ret = true;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003276:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800327a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 8095 	bne.w	80033b2 <cliFatfs+0x24e>
 8003288:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800328c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	4959      	ldr	r1, [pc, #356]	; (80033fc <cliFatfs+0x298>)
 8003296:	2000      	movs	r0, #0
 8003298:	4798      	blx	r3
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8088 	beq.w	80033b2 <cliFatfs+0x24e>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 80032a2:	f7fd ffc0 	bl	8001226 <millis>
 80032a6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	220b      	movs	r2, #11
 80032b0:	4953      	ldr	r1, [pc, #332]	; (8003400 <cliFatfs+0x29c>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f007 f888 	bl	800a3c8 <f_open>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 80032be:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d165      	bne.n	8003392 <cliFatfs+0x22e>
    {
      f_printf(&log_file, "test1, ");
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	494e      	ldr	r1, [pc, #312]	; (8003404 <cliFatfs+0x2a0>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f008 f9d1 	bl	800b674 <f_printf>
      f_printf(&log_file, "test2, ");
 80032d2:	f107 0308 	add.w	r3, r7, #8
 80032d6:	494c      	ldr	r1, [pc, #304]	; (8003408 <cliFatfs+0x2a4>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f008 f9cb 	bl	800b674 <f_printf>
      f_printf(&log_file, "test3, ");
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	494a      	ldr	r1, [pc, #296]	; (800340c <cliFatfs+0x2a8>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f008 f9c5 	bl	800b674 <f_printf>
      f_printf(&log_file, ", ");
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	4948      	ldr	r1, [pc, #288]	; (8003410 <cliFatfs+0x2ac>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f008 f9bf 	bl	800b674 <f_printf>
      f_printf(&log_file, "\n");
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4946      	ldr	r1, [pc, #280]	; (8003414 <cliFatfs+0x2b0>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f008 f9b9 	bl	800b674 <f_printf>

      for (int i=0; i<8; i++)
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003308:	e00c      	b.n	8003324 <cliFatfs+0x1c0>
      {
        f_printf(&log_file, "%d \n", i);
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003312:	4941      	ldr	r1, [pc, #260]	; (8003418 <cliFatfs+0x2b4>)
 8003314:	4618      	mov	r0, r3
 8003316:	f008 f9ad 	bl	800b674 <f_printf>
      for (int i=0; i<8; i++)
 800331a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800331e:	3301      	adds	r3, #1
 8003320:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003324:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003328:	2b07      	cmp	r3, #7
 800332a:	ddee      	ble.n	800330a <cliFatfs+0x1a6>
      }

      f_rewind(&log_file);
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f007 fd72 	bl	800ae1c <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8003338:	e01c      	b.n	8003374 <cliFatfs+0x210>
      {
        len = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 8003340:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003344:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8003348:	f107 0008 	add.w	r0, r7, #8
 800334c:	2201      	movs	r2, #1
 800334e:	f007 fa09 	bl	800a764 <f_read>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 8003358:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10f      	bne.n	8003380 <cliFatfs+0x21c>
        {
          break;
        }
        if (len == 0)
 8003360:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <cliFatfs+0x220>
        {
          break;
        }

        cliPrintf("%c", data);
 8003368:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 800336c:	4619      	mov	r1, r3
 800336e:	482b      	ldr	r0, [pc, #172]	; (800341c <cliFatfs+0x2b8>)
 8003370:	f7ff f8c8 	bl	8002504 <cliPrintf>
      while(cliKeepLoop())
 8003374:	f7ff f9c0 	bl	80026f8 <cliKeepLoop>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1dd      	bne.n	800333a <cliFatfs+0x1d6>
 800337e:	e002      	b.n	8003386 <cliFatfs+0x222>
          break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <cliFatfs+0x222>
          break;
 8003384:	bf00      	nop
      }

      f_close(&log_file);
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	4618      	mov	r0, r3
 800338c:	f007 fd1c 	bl	800adc8 <f_close>
 8003390:	e002      	b.n	8003398 <cliFatfs+0x234>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 8003392:	4823      	ldr	r0, [pc, #140]	; (8003420 <cliFatfs+0x2bc>)
 8003394:	f7ff f8b6 	bl	8002504 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8003398:	f7fd ff45 	bl	8001226 <millis>
 800339c:	4602      	mov	r2, r0
 800339e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	481f      	ldr	r0, [pc, #124]	; (8003424 <cliFatfs+0x2c0>)
 80033a8:	f7ff f8ac 	bl	8002504 <cliPrintf>

    ret = true;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 80033b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80033b6:	f083 0301 	eor.w	r3, r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <cliFatfs+0x26e>
  {
    cliPrintf("fatfs info\n");
 80033c0:	4819      	ldr	r0, [pc, #100]	; (8003428 <cliFatfs+0x2c4>)
 80033c2:	f7ff f89f 	bl	8002504 <cliPrintf>
    cliPrintf("fatfs dir\n");
 80033c6:	4819      	ldr	r0, [pc, #100]	; (800342c <cliFatfs+0x2c8>)
 80033c8:	f7ff f89c 	bl	8002504 <cliPrintf>
    cliPrintf("fatfs test\n");
 80033cc:	4818      	ldr	r0, [pc, #96]	; (8003430 <cliFatfs+0x2cc>)
 80033ce:	f7ff f899 	bl	8002504 <cliPrintf>
  }
}
 80033d2:	bf00      	nop
 80033d4:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	080174c4 	.word	0x080174c4
 80033e0:	20000758 	.word	0x20000758
 80033e4:	080174cc 	.word	0x080174cc
 80033e8:	080174e0 	.word	0x080174e0
 80033ec:	080174e4 	.word	0x080174e4
 80033f0:	08017518 	.word	0x08017518
 80033f4:	08017524 	.word	0x08017524
 80033f8:	08017528 	.word	0x08017528
 80033fc:	0801752c 	.word	0x0801752c
 8003400:	08017534 	.word	0x08017534
 8003404:	0801753c 	.word	0x0801753c
 8003408:	08017544 	.word	0x08017544
 800340c:	0801754c 	.word	0x0801754c
 8003410:	08017554 	.word	0x08017554
 8003414:	08017558 	.word	0x08017558
 8003418:	0801755c 	.word	0x0801755c
 800341c:	08017564 	.word	0x08017564
 8003420:	08017568 	.word	0x08017568
 8003424:	08017578 	.word	0x08017578
 8003428:	08017580 	.word	0x08017580
 800342c:	0801758c 	.word	0x0801758c
 8003430:	08017598 	.word	0x08017598

08003434 <gpioInit>:
#endif



bool gpioInit(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
  bool ret = true;
 800343a:	2301      	movs	r3, #1
 800343c:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <gpioInit+0xa0>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <gpioInit+0xa0>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <gpioInit+0xa0>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <gpioInit+0xa0>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <gpioInit+0xa0>)
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <gpioInit+0xa0>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e01e      	b.n	80034ba <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	b2d8      	uxtb	r0, r3
 8003480:	4915      	ldr	r1, [pc, #84]	; (80034d8 <gpioInit+0xa4>)
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3308      	adds	r3, #8
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	4619      	mov	r1, r3
 8003494:	f000 f826 	bl	80034e4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <gpioInit+0xa4>)
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	330b      	adds	r3, #11
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	f000 f88a 	bl	80035c8 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	dddd      	ble.n	800347c <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 80034c0:	4906      	ldr	r1, [pc, #24]	; (80034dc <gpioInit+0xa8>)
 80034c2:	4807      	ldr	r0, [pc, #28]	; (80034e0 <gpioInit+0xac>)
 80034c4:	f7ff f92e 	bl	8002724 <cliAdd>
#endif

  return ret;
 80034c8:	7afb      	ldrb	r3, [r7, #11]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08017874 	.word	0x08017874
 80034dc:	080036dd 	.word	0x080036dd
 80034e0:	080175a4 	.word	0x080175a4

080034e4 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	460a      	mov	r2, r1
 80034ee:	71fb      	strb	r3, [r7, #7]
 80034f0:	4613      	mov	r3, r2
 80034f2:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80034f4:	2301      	movs	r3, #1
 80034f6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0308 	add.w	r3, r7, #8
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d901      	bls.n	8003512 <gpioPinMode+0x2e>
  {
    return false;
 800350e:	2300      	movs	r3, #0
 8003510:	e054      	b.n	80035bc <gpioPinMode+0xd8>
  }

  switch(mode)
 8003512:	79bb      	ldrb	r3, [r7, #6]
 8003514:	2b06      	cmp	r3, #6
 8003516:	d838      	bhi.n	800358a <gpioPinMode+0xa6>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <gpioPinMode+0x3c>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	0800353d 	.word	0x0800353d
 8003524:	08003547 	.word	0x08003547
 8003528:	08003551 	.word	0x08003551
 800352c:	0800355b 	.word	0x0800355b
 8003530:	08003565 	.word	0x08003565
 8003534:	0800356f 	.word	0x0800356f
 8003538:	08003579 	.word	0x08003579
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
      break;
 8003544:	e021      	b.n	800358a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354a:	2301      	movs	r3, #1
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	e01c      	b.n	800358a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003554:	2302      	movs	r3, #2
 8003556:	613b      	str	r3, [r7, #16]
      break;
 8003558:	e017      	b.n	800358a <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355a:	2301      	movs	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
      break;
 8003562:	e012      	b.n	800358a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003564:	2301      	movs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003568:	2301      	movs	r3, #1
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	e00d      	b.n	800358a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356e:	2301      	movs	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003572:	2302      	movs	r3, #2
 8003574:	613b      	str	r3, [r7, #16]
      break;
 8003576:	e008      	b.n	800358a <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003584:	2302      	movs	r3, #2
 8003586:	61bb      	str	r3, [r7, #24]
      break;
 8003588:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 800358a:	79fa      	ldrb	r2, [r7, #7]
 800358c:	490d      	ldr	r1, [pc, #52]	; (80035c4 <gpioPinMode+0xe0>)
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3304      	adds	r3, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800359e:	79fa      	ldrb	r2, [r7, #7]
 80035a0:	4908      	ldr	r1, [pc, #32]	; (80035c4 <gpioPinMode+0xe0>)
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f107 0208 	add.w	r2, r7, #8
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f009 fec3 	bl	800d340 <HAL_GPIO_Init>

  return ret;
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	08017874 	.word	0x08017874

080035c8 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	460a      	mov	r2, r1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d840      	bhi.n	8003660 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 80035de:	79bb      	ldrb	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01e      	beq.n	8003622 <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80035e4:	79fa      	ldrb	r2, [r7, #7]
 80035e6:	4920      	ldr	r1, [pc, #128]	; (8003668 <gpioPinWrite+0xa0>)
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	491c      	ldr	r1, [pc, #112]	; (8003668 <gpioPinWrite+0xa0>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3304      	adds	r3, #4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	b299      	uxth	r1, r3
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	4c17      	ldr	r4, [pc, #92]	; (8003668 <gpioPinWrite+0xa0>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4423      	add	r3, r4
 8003616:	3309      	adds	r3, #9
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f00a f910 	bl	800d840 <HAL_GPIO_WritePin>
 8003620:	e01f      	b.n	8003662 <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	4910      	ldr	r1, [pc, #64]	; (8003668 <gpioPinWrite+0xa0>)
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	79fa      	ldrb	r2, [r7, #7]
 8003634:	490c      	ldr	r1, [pc, #48]	; (8003668 <gpioPinWrite+0xa0>)
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3304      	adds	r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b299      	uxth	r1, r3
 8003646:	79fa      	ldrb	r2, [r7, #7]
 8003648:	4c07      	ldr	r4, [pc, #28]	; (8003668 <gpioPinWrite+0xa0>)
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4423      	add	r3, r4
 8003654:	330a      	adds	r3, #10
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	f00a f8f1 	bl	800d840 <HAL_GPIO_WritePin>
 800365e:	e000      	b.n	8003662 <gpioPinWrite+0x9a>
    return;
 8003660:	bf00      	nop
  }
}
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	08017874 	.word	0x08017874

0800366c <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d901      	bls.n	8003684 <gpioPinRead+0x18>
  {
    return false;
 8003680:	2300      	movs	r3, #0
 8003682:	e024      	b.n	80036ce <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003684:	79fa      	ldrb	r2, [r7, #7]
 8003686:	4914      	ldr	r1, [pc, #80]	; (80036d8 <gpioPinRead+0x6c>)
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	79fa      	ldrb	r2, [r7, #7]
 8003696:	4910      	ldr	r1, [pc, #64]	; (80036d8 <gpioPinRead+0x6c>)
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3304      	adds	r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	f00a f8b1 	bl	800d810 <HAL_GPIO_ReadPin>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4618      	mov	r0, r3
 80036b2:	79fa      	ldrb	r2, [r7, #7]
 80036b4:	4908      	ldr	r1, [pc, #32]	; (80036d8 <gpioPinRead+0x6c>)
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3309      	adds	r3, #9
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4298      	cmp	r0, r3
 80036c6:	d101      	bne.n	80036cc <gpioPinRead+0x60>
  {
    ret = true;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	08017874 	.word	0x08017874

080036dc <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d128      	bne.n	8003742 <cliGpio+0x66>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4947      	ldr	r1, [pc, #284]	; (8003814 <cliGpio+0x138>)
 80036f6:	2000      	movs	r0, #0
 80036f8:	4798      	blx	r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8003700:	e018      	b.n	8003734 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e00c      	b.n	8003722 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ffad 	bl	800366c <gpioPinRead>
 8003712:	4603      	mov	r3, r0
 8003714:	4619      	mov	r1, r3
 8003716:	4840      	ldr	r0, [pc, #256]	; (8003818 <cliGpio+0x13c>)
 8003718:	f7fe fef4 	bl	8002504 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3301      	adds	r3, #1
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b0c      	cmp	r3, #12
 8003726:	ddef      	ble.n	8003708 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8003728:	483c      	ldr	r0, [pc, #240]	; (800381c <cliGpio+0x140>)
 800372a:	f7fe feeb 	bl	8002504 <cliPrintf>
      delay(100);
 800372e:	2064      	movs	r0, #100	; 0x64
 8003730:	f7fd fd6e 	bl	8001210 <delay>
    while(cliKeepLoop())
 8003734:	f7fe ffe0 	bl	80026f8 <cliKeepLoop>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e1      	bne.n	8003702 <cliGpio+0x26>
    }
    ret = true;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d123      	bne.n	8003792 <cliGpio+0xb6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4934      	ldr	r1, [pc, #208]	; (8003820 <cliGpio+0x144>)
 8003750:	2000      	movs	r0, #0
 8003752:	4798      	blx	r3
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01b      	beq.n	8003792 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2001      	movs	r0, #1
 8003760:	4798      	blx	r3
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8003766:	e00d      	b.n	8003784 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003768:	7bfc      	ldrb	r4, [r7, #15]
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff7d 	bl	800366c <gpioPinRead>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	4621      	mov	r1, r4
 8003778:	482a      	ldr	r0, [pc, #168]	; (8003824 <cliGpio+0x148>)
 800377a:	f7fe fec3 	bl	8002504 <cliPrintf>
      delay(100);
 800377e:	2064      	movs	r0, #100	; 0x64
 8003780:	f7fd fd46 	bl	8001210 <delay>
    while(cliKeepLoop())
 8003784:	f7fe ffb8 	bl	80026f8 <cliKeepLoop>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ec      	bne.n	8003768 <cliGpio+0x8c>
    }

    ret = true;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d126      	bne.n	80037e8 <cliGpio+0x10c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4922      	ldr	r1, [pc, #136]	; (8003828 <cliGpio+0x14c>)
 80037a0:	2000      	movs	r0, #0
 80037a2:	4798      	blx	r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01e      	beq.n	80037e8 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2001      	movs	r0, #1
 80037b0:	4798      	blx	r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2002      	movs	r0, #2
 80037bc:	4798      	blx	r3
 80037be:	4603      	mov	r3, r0
 80037c0:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 80037c2:	7b7b      	ldrb	r3, [r7, #13]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fef8 	bl	80035c8 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	7b7a      	ldrb	r2, [r7, #13]
 80037dc:	4619      	mov	r1, r3
 80037de:	4813      	ldr	r0, [pc, #76]	; (800382c <cliGpio+0x150>)
 80037e0:	f7fe fe90 	bl	8002504 <cliPrintf>
    ret = true;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	f083 0301 	eor.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 80037f4:	480e      	ldr	r0, [pc, #56]	; (8003830 <cliGpio+0x154>)
 80037f6:	f7fe fe85 	bl	8002504 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 80037fa:	210c      	movs	r1, #12
 80037fc:	480d      	ldr	r0, [pc, #52]	; (8003834 <cliGpio+0x158>)
 80037fe:	f7fe fe81 	bl	8002504 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8003802:	210c      	movs	r1, #12
 8003804:	480c      	ldr	r0, [pc, #48]	; (8003838 <cliGpio+0x15c>)
 8003806:	f7fe fe7d 	bl	8002504 <cliPrintf>
  }
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	bf00      	nop
 8003814:	080175ac 	.word	0x080175ac
 8003818:	080175b4 	.word	0x080175b4
 800381c:	080175b8 	.word	0x080175b8
 8003820:	080175bc 	.word	0x080175bc
 8003824:	080175c4 	.word	0x080175c4
 8003828:	080175d8 	.word	0x080175d8
 800382c:	080175e0 	.word	0x080175e0
 8003830:	080175f4 	.word	0x080175f4
 8003834:	08017600 	.word	0x08017600
 8003838:	08017614 	.word	0x08017614

0800383c <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8003840:	f7fd fcf1 	bl	8001226 <millis>
 8003844:	4602      	mov	r2, r0
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <TransferDoneISR+0x40>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <TransferDoneISR+0x44>)
 800384e:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8003850:	f7fd fce9 	bl	8001226 <millis>
 8003854:	4603      	mov	r3, r0
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <TransferDoneISR+0x40>)
 8003858:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <TransferDoneISR+0x44>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <TransferDoneISR+0x44>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	4a05      	ldr	r2, [pc, #20]	; (8003884 <TransferDoneISR+0x48>)
 8003870:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <TransferDoneISR+0x4c>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	200009b4 	.word	0x200009b4
 8003880:	200009b8 	.word	0x200009b8
 8003884:	200009bc 	.word	0x200009bc
 8003888:	200009b2 	.word	0x200009b2

0800388c <lcdInit>:


bool lcdInit(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <lcdInit+0xa4>)
 8003894:	2264      	movs	r2, #100	; 0x64
 8003896:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8003898:	f003 ff48 	bl	800772c <st7735Init>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <lcdInit+0xa8>)
 80038a2:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 80038a4:	4824      	ldr	r0, [pc, #144]	; (8003938 <lcdInit+0xac>)
 80038a6:	f003 ff4d 	bl	8007744 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <lcdInit+0xac>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4823      	ldr	r0, [pc, #140]	; (800393c <lcdInit+0xb0>)
 80038b0:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	e007      	b.n	80038c8 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 80038b8:	4a21      	ldr	r2, [pc, #132]	; (8003940 <lcdInit+0xb4>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2100      	movs	r1, #0
 80038be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3301      	adds	r3, #1
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80038ce:	dbf3      	blt.n	80038b8 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 80038d0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80038d4:	2100      	movs	r1, #0
 80038d6:	481a      	ldr	r0, [pc, #104]	; (8003940 <lcdInit+0xb4>)
 80038d8:	f00f f9d6 	bl	8012c88 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <lcdInit+0xb8>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	035b      	lsls	r3, r3, #13
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <lcdInit+0xb4>)
 80038ec:	4413      	add	r3, r2
 80038ee:	4a16      	ldr	r2, [pc, #88]	; (8003948 <lcdInit+0xbc>)
 80038f0:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 80038f2:	2300      	movs	r3, #0
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	22a0      	movs	r2, #160	; 0xa0
 80038fa:	2100      	movs	r1, #0
 80038fc:	2000      	movs	r0, #0
 80038fe:	f000 fbdb 	bl	80040b8 <lcdDrawFillRect>
  lcdUpdateDraw();
 8003902:	f000 fa9f 	bl	8003e44 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8003906:	2064      	movs	r0, #100	; 0x64
 8003908:	f000 f830 	bl	800396c <lcdSetBackLight>


  if (is_init != true)
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <lcdInit+0xa8>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <lcdInit+0x92>
  {
    return false;
 800391a:	2300      	movs	r3, #0
 800391c:	e004      	b.n	8003928 <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 800391e:	490b      	ldr	r1, [pc, #44]	; (800394c <lcdInit+0xc0>)
 8003920:	480b      	ldr	r0, [pc, #44]	; (8003950 <lcdInit+0xc4>)
 8003922:	f7fe feff 	bl	8002724 <cliAdd>
#endif

  return true;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000080 	.word	0x20000080
 8003934:	200009b0 	.word	0x200009b0
 8003938:	20000994 	.word	0x20000994
 800393c:	0800383d 	.word	0x0800383d
 8003940:	20000a00 	.word	0x20000a00
 8003944:	200009b1 	.word	0x200009b1
 8003948:	200009c0 	.word	0x200009c0
 800394c:	08004585 	.word	0x08004585
 8003950:	08017910 	.word	0x08017910

08003954 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return is_init;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <lcdIsInit+0x14>)
 800395a:	781b      	ldrb	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	200009b0 	.word	0x200009b0

0800396c <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	bf28      	it	cs
 800397c:	2364      	movcs	r3, #100	; 0x64
 800397e:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <lcdSetBackLight+0x48>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	79fa      	ldrb	r2, [r7, #7]
 8003986:	429a      	cmp	r2, r3
 8003988:	d002      	beq.n	8003990 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <lcdSetBackLight+0x48>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <lcdSetBackLight+0x48>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8003998:	2101      	movs	r1, #1
 800399a:	2001      	movs	r0, #1
 800399c:	f7ff fe14 	bl	80035c8 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 80039a0:	e003      	b.n	80039aa <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 80039a2:	2100      	movs	r1, #0
 80039a4:	2001      	movs	r0, #1
 80039a6:	f7ff fe0f 	bl	80035c8 <gpioPinWrite>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000080 	.word	0x20000080

080039b8 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <lcdDrawPixel+0x14>)
 80039ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80039c4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	200009c0 	.word	0x200009c0

080039d0 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 80039d0:	b510      	push	{r4, lr}
 80039d2:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 80039d4:	f000 fa62 	bl	8003e9c <lcdGetFrameBuffer>
 80039d8:	f500 411f 	add.w	r1, r0, #40704	; 0x9f00

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 80039dc:	b2a2      	uxth	r2, r4
 80039de:	1e83      	subs	r3, r0, #2
 80039e0:	31fe      	adds	r1, #254	; 0xfe
 80039e2:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d1fb      	bne.n	80039e2 <lcdClearBuffer+0x12>
  }
}
 80039ea:	bd10      	pop	{r4, pc}

080039ec <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 80039ec:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80039f0:	4616      	mov	r6, r2
 80039f2:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
  int32_t x     = 0;

  while (x < r)
 80039f4:	2e00      	cmp	r6, #0
{
 80039f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -2 * r;
 80039f8:	ebc6 7bc6 	rsb	fp, r6, r6, lsl #31
  while (x < r)
 80039fc:	f340 808d 	ble.w	8003b1a <lcdDrawCircleHelper+0x12e>
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003a00:	fa1f f981 	uxth.w	r9, r1
 8003a04:	f003 0104 	and.w	r1, r3, #4
 8003a08:	9103      	str	r1, [sp, #12]
 8003a0a:	f003 0102 	and.w	r1, r3, #2
 8003a0e:	9101      	str	r1, [sp, #4]
 8003a10:	f003 0108 	and.w	r1, r3, #8
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	f1c6 0401 	rsb	r4, r6, #1
 8003a1c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003a20:	fa1f f880 	uxth.w	r8, r0
 8003a24:	9102      	str	r1, [sp, #8]
 8003a26:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8003a28:	2500      	movs	r5, #0
 8003a2a:	e00a      	b.n	8003a42 <lcdDrawCircleHelper+0x56>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8003a2c:	9b01      	ldr	r3, [sp, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d12c      	bne.n	8003a8c <lcdDrawCircleHelper+0xa0>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8003a32:	9b02      	ldr	r3, [sp, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d141      	bne.n	8003abc <lcdDrawCircleHelper+0xd0>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8003a38:	9b04      	ldr	r3, [sp, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d156      	bne.n	8003aec <lcdDrawCircleHelper+0x100>
  while (x < r)
 8003a3e:	42ae      	cmp	r6, r5
 8003a40:	dd6b      	ble.n	8003b1a <lcdDrawCircleHelper+0x12e>
    if (f >= 0)
 8003a42:	2c00      	cmp	r4, #0
 8003a44:	db03      	blt.n	8003a4e <lcdDrawCircleHelper+0x62>
      ddF_y += 2;
 8003a46:	f10b 0b02 	add.w	fp, fp, #2
      r--;
 8003a4a:	3e01      	subs	r6, #1
      f     += ddF_y;
 8003a4c:	445c      	add	r4, fp
    x++;
 8003a4e:	3501      	adds	r5, #1
    if (cornername & 0x4)
 8003a50:	9b03      	ldr	r3, [sp, #12]
    f     += ddF_x;
 8003a52:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003a56:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0e7      	beq.n	8003a2c <lcdDrawCircleHelper+0x40>
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003a5c:	b2b3      	uxth	r3, r6
 8003a5e:	fa1f fa85 	uxth.w	sl, r5
 8003a62:	eb09 0103 	add.w	r1, r9, r3
 8003a66:	eb08 000a 	add.w	r0, r8, sl
 8003a6a:	b289      	uxth	r1, r1
 8003a6c:	b280      	uxth	r0, r0
 8003a6e:	9305      	str	r3, [sp, #20]
 8003a70:	f7ff ffa2 	bl	80039b8 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 8003a74:	9b05      	ldr	r3, [sp, #20]
 8003a76:	eb09 010a 	add.w	r1, r9, sl
 8003a7a:	eb08 0003 	add.w	r0, r8, r3
 8003a7e:	b289      	uxth	r1, r1
 8003a80:	b280      	uxth	r0, r0
 8003a82:	f7ff ff99 	bl	80039b8 <lcdDrawPixel>
    if (cornername & 0x2)
 8003a86:	9b01      	ldr	r3, [sp, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0d2      	beq.n	8003a32 <lcdDrawCircleHelper+0x46>
      lcdDrawPixel(x0 + x, y0 - r, color);
 8003a8c:	b2b3      	uxth	r3, r6
 8003a8e:	fa1f fa85 	uxth.w	sl, r5
 8003a92:	eba9 0103 	sub.w	r1, r9, r3
 8003a96:	eb08 000a 	add.w	r0, r8, sl
 8003a9a:	b289      	uxth	r1, r1
 8003a9c:	b280      	uxth	r0, r0
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f7ff ff8a 	bl	80039b8 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003aa4:	9b05      	ldr	r3, [sp, #20]
 8003aa6:	eba9 010a 	sub.w	r1, r9, sl
 8003aaa:	eb08 0003 	add.w	r0, r8, r3
 8003aae:	b289      	uxth	r1, r1
 8003ab0:	b280      	uxth	r0, r0
 8003ab2:	f7ff ff81 	bl	80039b8 <lcdDrawPixel>
    if (cornername & 0x8)
 8003ab6:	9b02      	ldr	r3, [sp, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0bd      	beq.n	8003a38 <lcdDrawCircleHelper+0x4c>
 8003abc:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 - r, y0 + x, color);
 8003abe:	fa1f fa86 	uxth.w	sl, r6
 8003ac2:	eb09 0103 	add.w	r1, r9, r3
 8003ac6:	eba8 000a 	sub.w	r0, r8, sl
 8003aca:	b289      	uxth	r1, r1
 8003acc:	b280      	uxth	r0, r0
 8003ace:	9305      	str	r3, [sp, #20]
 8003ad0:	f7ff ff72 	bl	80039b8 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003ad4:	9b05      	ldr	r3, [sp, #20]
 8003ad6:	eb0a 0109 	add.w	r1, sl, r9
 8003ada:	eba8 0003 	sub.w	r0, r8, r3
 8003ade:	b289      	uxth	r1, r1
 8003ae0:	b280      	uxth	r0, r0
 8003ae2:	f7ff ff69 	bl	80039b8 <lcdDrawPixel>
    if (cornername & 0x1)
 8003ae6:	9b04      	ldr	r3, [sp, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0a8      	beq.n	8003a3e <lcdDrawCircleHelper+0x52>
 8003aec:	b2ab      	uxth	r3, r5
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 8003aee:	fa1f fa86 	uxth.w	sl, r6
 8003af2:	eba9 0103 	sub.w	r1, r9, r3
 8003af6:	eba8 000a 	sub.w	r0, r8, sl
 8003afa:	b289      	uxth	r1, r1
 8003afc:	b280      	uxth	r0, r0
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	f7ff ff5a 	bl	80039b8 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 8003b04:	9b05      	ldr	r3, [sp, #20]
 8003b06:	eba9 010a 	sub.w	r1, r9, sl
 8003b0a:	eba8 0003 	sub.w	r0, r8, r3
 8003b0e:	b289      	uxth	r1, r1
 8003b10:	b280      	uxth	r0, r0
 8003b12:	f7ff ff51 	bl	80039b8 <lcdDrawPixel>
  while (x < r)
 8003b16:	42ae      	cmp	r6, r5
 8003b18:	dc93      	bgt.n	8003a42 <lcdDrawCircleHelper+0x56>
    }
  }
}
 8003b1a:	b006      	add	sp, #24
 8003b1c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003b20 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003b20:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003b24:	b08a      	sub	sp, #40	; 0x28
 8003b26:	4694      	mov	ip, r2
 8003b28:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b2a:	f8cd c00c 	str.w	ip, [sp, #12]
 8003b2e:	fa1f f886 	uxth.w	r8, r6
 8003b32:	ea4f 0248 	mov.w	r2, r8, lsl #1
{
 8003b36:	460c      	mov	r4, r1
 8003b38:	b291      	uxth	r1, r2
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b3a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
{
 8003b3e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003b42:	4605      	mov	r5, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b44:	b280      	uxth	r0, r0
 8003b46:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8003b4a:	9005      	str	r0, [sp, #20]
 8003b4c:	1a52      	subs	r2, r2, r1
 8003b4e:	4440      	add	r0, r8
{
 8003b50:	4699      	mov	r9, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b52:	b200      	sxth	r0, r0
 8003b54:	fa1f f38a 	uxth.w	r3, sl
 8003b58:	b212      	sxth	r2, r2
 8003b5a:	b221      	sxth	r1, r4
 8003b5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b60:	9004      	str	r0, [sp, #16]
 8003b62:	f000 fa83 	bl	800406c <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003b66:	9804      	ldr	r0, [sp, #16]
 8003b68:	f8cd 9010 	str.w	r9, [sp, #16]
 8003b6c:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 8003b70:	9a08      	ldr	r2, [sp, #32]
 8003b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b74:	9308      	str	r3, [sp, #32]
 8003b76:	fa1f fb84 	uxth.w	fp, r4
 8003b7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8003b7e:	4459      	add	r1, fp
 8003b80:	b209      	sxth	r1, r1
 8003b82:	f000 fa73 	bl	800406c <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8003b86:	9b07      	ldr	r3, [sp, #28]
 8003b88:	eb08 010b 	add.w	r1, r8, fp
 8003b8c:	eba9 0203 	sub.w	r2, r9, r3
 8003b90:	9b08      	ldr	r3, [sp, #32]
 8003b92:	b209      	sxth	r1, r1
 8003b94:	b212      	sxth	r2, r2
 8003b96:	b228      	sxth	r0, r5
 8003b98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b9c:	9107      	str	r1, [sp, #28]
 8003b9e:	f000 fa3f 	bl	8004020 <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003ba2:	9a06      	ldr	r2, [sp, #24]
 8003ba4:	9b05      	ldr	r3, [sp, #20]
 8003ba6:	9907      	ldr	r1, [sp, #28]
 8003ba8:	1e50      	subs	r0, r2, #1
 8003baa:	4418      	add	r0, r3

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003bac:	eb05 0806 	add.w	r8, r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003bb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bb4:	b200      	sxth	r0, r0
 8003bb6:	f000 fa33 	bl	8004020 <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003bba:	1931      	adds	r1, r6, r4
 8003bbc:	4632      	mov	r2, r6
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f8cd a000 	str.w	sl, [sp]
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	9105      	str	r1, [sp, #20]
 8003bc8:	f7ff ff10 	bl	80039ec <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003bcc:	9803      	ldr	r0, [sp, #12]
 8003bce:	9905      	ldr	r1, [sp, #20]
 8003bd0:	f8cd a000 	str.w	sl, [sp]
 8003bd4:	4428      	add	r0, r5
 8003bd6:	1b80      	subs	r0, r0, r6
 8003bd8:	3801      	subs	r0, #1
 8003bda:	4632      	mov	r2, r6
 8003bdc:	2302      	movs	r3, #2
 8003bde:	9003      	str	r0, [sp, #12]
 8003be0:	f7ff ff04 	bl	80039ec <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8003be4:	9904      	ldr	r1, [sp, #16]
 8003be6:	9803      	ldr	r0, [sp, #12]
 8003be8:	f8cd a000 	str.w	sl, [sp]
 8003bec:	4421      	add	r1, r4
 8003bee:	1b89      	subs	r1, r1, r6
 8003bf0:	3901      	subs	r1, #1
 8003bf2:	4632      	mov	r2, r6
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	9103      	str	r1, [sp, #12]
 8003bf8:	f7ff fef8 	bl	80039ec <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8003bfc:	9903      	ldr	r1, [sp, #12]
 8003bfe:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8003c02:	2308      	movs	r3, #8
 8003c04:	4632      	mov	r2, r6
 8003c06:	4640      	mov	r0, r8
}
 8003c08:	b00a      	add	sp, #40	; 0x28
 8003c0a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8003c0e:	f7ff beed 	b.w	80039ec <lcdDrawCircleHelper>
 8003c12:	bf00      	nop

08003c14 <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 8003c14:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003c18:	4690      	mov	r8, r2
 8003c1a:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8003c1c:	f1c8 0a00 	rsb	sl, r8, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 8003c20:	f1b8 0f00 	cmp.w	r8, #0
{
 8003c24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 8003c26:	ebaa 0a08 	sub.w	sl, sl, r8
  while (y < r)
 8003c2a:	dd6f      	ble.n	8003d0c <lcdDrawFillCircleHelper+0xf8>
 8003c2c:	3201      	adds	r2, #1
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	1c95      	adds	r5, r2, #2
 8003c32:	9204      	str	r2, [sp, #16]
 8003c34:	f003 0201 	and.w	r2, r3, #1
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	9302      	str	r3, [sp, #8]
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c40:	9203      	str	r2, [sp, #12]
 8003c42:	b280      	uxth	r0, r0
 8003c44:	b289      	uxth	r1, r1
 8003c46:	f1c8 0401 	rsb	r4, r8, #1
 8003c4a:	9000      	str	r0, [sp, #0]
 8003c4c:	9101      	str	r1, [sp, #4]
 8003c4e:	b2ad      	uxth	r5, r5
  int32_t y     = 0;
 8003c50:	2600      	movs	r6, #0
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	e006      	b.n	8003c64 <lcdDrawFillCircleHelper+0x50>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8003c56:	9a02      	ldr	r2, [sp, #8]
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d133      	bne.n	8003cc4 <lcdDrawFillCircleHelper+0xb0>
  while (y < r)
 8003c5c:	3502      	adds	r5, #2
 8003c5e:	45b0      	cmp	r8, r6
 8003c60:	b2ad      	uxth	r5, r5
 8003c62:	dd53      	ble.n	8003d0c <lcdDrawFillCircleHelper+0xf8>
    if (f >= 0)
 8003c64:	2c00      	cmp	r4, #0
    y++;
 8003c66:	f106 0601 	add.w	r6, r6, #1
    if (f >= 0)
 8003c6a:	db04      	blt.n	8003c76 <lcdDrawFillCircleHelper+0x62>
      ddF_y += 2;
 8003c6c:	f10a 0a02 	add.w	sl, sl, #2
      r--;
 8003c70:	f108 38ff 	add.w	r8, r8, #4294967295
      f     += ddF_y;
 8003c74:	4454      	add	r4, sl
    if (cornername & 0x1)
 8003c76:	9a03      	ldr	r2, [sp, #12]
    f     += ddF_x;
 8003c78:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8003c7c:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8003c7e:	2a00      	cmp	r2, #0
 8003c80:	d0e9      	beq.n	8003c56 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003c82:	9a04      	ldr	r2, [sp, #16]
 8003c84:	9901      	ldr	r1, [sp, #4]
 8003c86:	9800      	ldr	r0, [sp, #0]
 8003c88:	9305      	str	r3, [sp, #20]
 8003c8a:	fa1f f988 	uxth.w	r9, r8
 8003c8e:	fa1f fb86 	uxth.w	fp, r6
 8003c92:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8003c96:	4459      	add	r1, fp
 8003c98:	eba0 0009 	sub.w	r0, r0, r9
 8003c9c:	b212      	sxth	r2, r2
 8003c9e:	b209      	sxth	r1, r1
 8003ca0:	b200      	sxth	r0, r0
 8003ca2:	f000 f9e3 	bl	800406c <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003ca6:	9901      	ldr	r1, [sp, #4]
 8003ca8:	9800      	ldr	r0, [sp, #0]
 8003caa:	9b05      	ldr	r3, [sp, #20]
 8003cac:	4449      	add	r1, r9
 8003cae:	eba0 000b 	sub.w	r0, r0, fp
 8003cb2:	b22a      	sxth	r2, r5
 8003cb4:	b209      	sxth	r1, r1
 8003cb6:	b200      	sxth	r0, r0
 8003cb8:	f000 f9d8 	bl	800406c <lcdDrawHLine>
    if (cornername & 0x2)
 8003cbc:	9a02      	ldr	r2, [sp, #8]
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003cbe:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2)
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	d0cb      	beq.n	8003c5c <lcdDrawFillCircleHelper+0x48>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8003cc4:	9a04      	ldr	r2, [sp, #16]
 8003cc6:	9901      	ldr	r1, [sp, #4]
 8003cc8:	9800      	ldr	r0, [sp, #0]
 8003cca:	9305      	str	r3, [sp, #20]
 8003ccc:	fa1f f988 	uxth.w	r9, r8
 8003cd0:	fa1f fb86 	uxth.w	fp, r6
 8003cd4:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8003cd8:	eba1 010b 	sub.w	r1, r1, fp
 8003cdc:	eba0 0009 	sub.w	r0, r0, r9
 8003ce0:	b212      	sxth	r2, r2
 8003ce2:	b209      	sxth	r1, r1
 8003ce4:	b200      	sxth	r0, r0
 8003ce6:	f000 f9c1 	bl	800406c <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003cea:	9901      	ldr	r1, [sp, #4]
 8003cec:	9800      	ldr	r0, [sp, #0]
 8003cee:	9b05      	ldr	r3, [sp, #20]
 8003cf0:	eba1 0109 	sub.w	r1, r1, r9
 8003cf4:	eba0 000b 	sub.w	r0, r0, fp
 8003cf8:	b22a      	sxth	r2, r5
 8003cfa:	b209      	sxth	r1, r1
 8003cfc:	b200      	sxth	r0, r0
 8003cfe:	f000 f9b5 	bl	800406c <lcdDrawHLine>
  while (y < r)
 8003d02:	3502      	adds	r5, #2
 8003d04:	45b0      	cmp	r8, r6
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003d06:	9b05      	ldr	r3, [sp, #20]
  while (y < r)
 8003d08:	b2ad      	uxth	r5, r5
 8003d0a:	dcab      	bgt.n	8003c64 <lcdDrawFillCircleHelper+0x50>
    }
  }
}
 8003d0c:	b006      	add	sp, #24
 8003d0e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop

08003d14 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003d14:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8003d1e:	4688      	mov	r8, r1
 8003d20:	4614      	mov	r4, r2
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d22:	b2b1      	uxth	r1, r6
 8003d24:	fa1f f289 	uxth.w	r2, r9
{
 8003d28:	461d      	mov	r5, r3
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d2a:	9200      	str	r2, [sp, #0]
 8003d2c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003d30:	b222      	sxth	r2, r4
 8003d32:	4441      	add	r1, r8

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d34:	eba4 0446 	sub.w	r4, r4, r6, lsl #1
 8003d38:	4445      	add	r5, r8
{
 8003d3a:	4682      	mov	sl, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d3c:	3c01      	subs	r4, #1
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	b209      	sxth	r1, r1
 8003d42:	b200      	sxth	r0, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d44:	1bad      	subs	r5, r5, r6
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d46:	f000 f9b7 	bl	80040b8 <lcdDrawFillRect>
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d4a:	eb0a 0006 	add.w	r0, sl, r6
 8003d4e:	1e69      	subs	r1, r5, #1
 8003d50:	4632      	mov	r2, r6
 8003d52:	e9cd 4900 	strd	r4, r9, [sp]
 8003d56:	2301      	movs	r3, #1
 8003d58:	9003      	str	r0, [sp, #12]
 8003d5a:	f7ff ff5b 	bl	8003c14 <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003d5e:	9803      	ldr	r0, [sp, #12]
 8003d60:	2302      	movs	r3, #2
 8003d62:	4632      	mov	r2, r6
 8003d64:	eb08 0106 	add.w	r1, r8, r6
 8003d68:	e9cd 490c 	strd	r4, r9, [sp, #48]	; 0x30
}
 8003d6c:	b005      	add	sp, #20
 8003d6e:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003d72:	f7ff bf4f 	b.w	8003c14 <lcdDrawFillCircleHelper>
 8003d76:	bf00      	nop

08003d78 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return fps_count;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <lcdGetFps+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200009bc 	.word	0x200009bc

08003d90 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return fps_time;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <lcdGetFpsTime+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	200009b8 	.word	0x200009b8

08003da8 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <lcdDrawAvailable+0x28>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f083 0301 	eor.w	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	200009b2 	.word	0x200009b2

08003dd4 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8003dd4:	b598      	push	{r3, r4, r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  if (is_init != true)
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <lcdRequestDraw+0x5c>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	f083 0301 	eor.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <lcdRequestDraw+0x16>
  {
    return false;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e020      	b.n	8003e2c <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <lcdRequestDraw+0x60>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <lcdRequestDraw+0x22>
  {
    return false;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e01a      	b.n	8003e2c <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <lcdRequestDraw+0x64>)
 8003df8:	689c      	ldr	r4, [r3, #8]
 8003dfa:	237f      	movs	r3, #127	; 0x7f
 8003dfc:	229f      	movs	r2, #159	; 0x9f
 8003dfe:	2100      	movs	r1, #0
 8003e00:	2000      	movs	r0, #0
 8003e02:	47a0      	blx	r4

  lcd_request_draw = true;
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <lcdRequestDraw+0x60>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <lcdRequestDraw+0x64>)
 8003e0c:	699c      	ldr	r4, [r3, #24]
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <lcdRequestDraw+0x68>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	035b      	lsls	r3, r3, #13
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <lcdRequestDraw+0x6c>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	2200      	movs	r2, #0
 8003e22:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003e26:	4618      	mov	r0, r3
 8003e28:	47a0      	blx	r4

  return true;
 8003e2a:	2301      	movs	r3, #1
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd98      	pop	{r3, r4, r7, pc}
 8003e30:	200009b0 	.word	0x200009b0
 8003e34:	200009b2 	.word	0x200009b2
 8003e38:	20000994 	.word	0x20000994
 8003e3c:	200009b1 	.word	0x200009b1
 8003e40:	20000a00 	.word	0x20000a00

08003e44 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <lcdUpdateDraw+0x54>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	f083 0301 	eor.w	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d118      	bne.n	8003e8a <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003e58:	f7ff ffbc 	bl	8003dd4 <lcdRequestDraw>

  pre_time = millis();
 8003e5c:	f7fd f9e3 	bl	8001226 <millis>
 8003e60:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003e62:	e009      	b.n	8003e78 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7fd f9d3 	bl	8001210 <delay>
    if (millis()-pre_time >= 100)
 8003e6a:	f7fd f9dc 	bl	8001226 <millis>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b63      	cmp	r3, #99	; 0x63
 8003e76:	d80a      	bhi.n	8003e8e <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003e78:	f7ff ff96 	bl	8003da8 <lcdDrawAvailable>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f083 0301 	eor.w	r3, r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ed      	bne.n	8003e64 <lcdUpdateDraw+0x20>
 8003e88:	e002      	b.n	8003e90 <lcdUpdateDraw+0x4c>
    return;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <lcdUpdateDraw+0x4c>
    {
      break;
 8003e8e:	bf00      	nop
    }
  }
}
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200009b0 	.word	0x200009b0

08003e9c <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <lcdGetFrameBuffer+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200009c0 	.word	0x200009c0

08003eb4 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	80fb      	strh	r3, [r7, #6]
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80bb      	strh	r3, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003ed2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003ed6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003ee0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003ee4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eec:	1acb      	subs	r3, r1, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfb8      	it	lt
 8003ef2:	425b      	neglt	r3, r3
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	bfcc      	ite	gt
 8003ef8:	2301      	movgt	r3, #1
 8003efa:	2300      	movle	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8003f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da01      	bge.n	8003f0c <lcdDrawLine+0x58>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8003f0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da01      	bge.n	8003f18 <lcdDrawLine+0x64>
 8003f14:	2300      	movs	r3, #0
 8003f16:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8003f18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da01      	bge.n	8003f24 <lcdDrawLine+0x70>
 8003f20:	2300      	movs	r3, #0
 8003f22:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8003f24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da01      	bge.n	8003f30 <lcdDrawLine+0x7c>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003f30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	833b      	strh	r3, [r7, #24]
 8003f3c:	88bb      	ldrh	r3, [r7, #4]
 8003f3e:	80fb      	strh	r3, [r7, #6]
 8003f40:	8b3b      	ldrh	r3, [r7, #24]
 8003f42:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003f44:	887b      	ldrh	r3, [r7, #2]
 8003f46:	82fb      	strh	r3, [r7, #22]
 8003f48:	883b      	ldrh	r3, [r7, #0]
 8003f4a:	807b      	strh	r3, [r7, #2]
 8003f4c:	8afb      	ldrh	r3, [r7, #22]
 8003f4e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003f50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	dd0b      	ble.n	8003f74 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	82bb      	strh	r3, [r7, #20]
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	80fb      	strh	r3, [r7, #6]
 8003f64:	8abb      	ldrh	r3, [r7, #20]
 8003f66:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	827b      	strh	r3, [r7, #18]
 8003f6c:	883b      	ldrh	r3, [r7, #0]
 8003f6e:	80bb      	strh	r3, [r7, #4]
 8003f70:	8a7b      	ldrh	r3, [r7, #18]
 8003f72:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8003f7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bfb8      	it	lt
 8003f8c:	425b      	neglt	r3, r3
 8003f8e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003f90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f94:	0fda      	lsrs	r2, r3, #31
 8003f96:	4413      	add	r3, r2
 8003f98:	105b      	asrs	r3, r3, #1
 8003f9a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8003f9c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003fa0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	da02      	bge.n	8003fae <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	83bb      	strh	r3, [r7, #28]
 8003fac:	e02d      	b.n	800400a <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8003fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003fb4:	e029      	b.n	800400a <lcdDrawLine+0x156>
  {
    if (steep)
 8003fb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8003fbe:	88bb      	ldrh	r3, [r7, #4]
 8003fc0:	88f9      	ldrh	r1, [r7, #6]
 8003fc2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fcf7 	bl	80039b8 <lcdDrawPixel>
 8003fca:	e005      	b.n	8003fd8 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	88b9      	ldrh	r1, [r7, #4]
 8003fd0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fcf0 	bl	80039b8 <lcdDrawPixel>
    }
    err -= dy;
 8003fd8:	8bfa      	ldrh	r2, [r7, #30]
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8003fe2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da09      	bge.n	8003ffe <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8003fea:	88ba      	ldrh	r2, [r7, #4]
 8003fec:	8bbb      	ldrh	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8003ff4:	8bfa      	ldrh	r2, [r7, #30]
 8003ff6:	8a3b      	ldrh	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8003ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004002:	b29b      	uxth	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	80fb      	strh	r3, [r7, #6]
 800400a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800400e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004012:	429a      	cmp	r2, r3
 8004014:	ddcf      	ble.n	8003fb6 <lcdDrawLine+0x102>
    }
  }
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	3724      	adds	r7, #36	; 0x24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af02      	add	r7, sp, #8
 8004026:	4604      	mov	r4, r0
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4623      	mov	r3, r4
 8004030:	80fb      	strh	r3, [r7, #6]
 8004032:	4603      	mov	r3, r0
 8004034:	80bb      	strh	r3, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	807b      	strh	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 800403e:	88ba      	ldrh	r2, [r7, #4]
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	4413      	add	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	b21c      	sxth	r4, r3
 800404c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004050:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004054:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004058:	883b      	ldrh	r3, [r7, #0]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4623      	mov	r3, r4
 800405e:	f7ff ff29 	bl	8003eb4 <lcdDrawLine>
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop

0800406c <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b085      	sub	sp, #20
 8004070:	af02      	add	r7, sp, #8
 8004072:	4604      	mov	r4, r0
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4623      	mov	r3, r4
 800407c:	80fb      	strh	r3, [r7, #6]
 800407e:	4603      	mov	r3, r0
 8004080:	80bb      	strh	r3, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	807b      	strh	r3, [r7, #2]
 8004086:	4613      	mov	r3, r2
 8004088:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	4413      	add	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29b      	uxth	r3, r3
 8004096:	b21a      	sxth	r2, r3
 8004098:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800409c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040a4:	883b      	ldrh	r3, [r7, #0]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	4623      	mov	r3, r4
 80040aa:	f7ff ff03 	bl	8003eb4 <lcdDrawLine>
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	bf00      	nop

080040b8 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	4623      	mov	r3, r4
 80040c8:	80fb      	strh	r3, [r7, #6]
 80040ca:	4603      	mov	r3, r0
 80040cc:	80bb      	strh	r3, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	807b      	strh	r3, [r7, #2]
 80040d2:	4613      	mov	r3, r2
 80040d4:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	81fb      	strh	r3, [r7, #14]
 80040da:	e00e      	b.n	80040fa <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 80040dc:	8c3b      	ldrh	r3, [r7, #32]
 80040de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040e6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80040ea:	f7ff ff99 	bl	8004020 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 80040ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	81fb      	strh	r3, [r7, #14]
 80040fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80040fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004102:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004106:	440b      	add	r3, r1
 8004108:	429a      	cmp	r2, r3
 800410a:	dbe7      	blt.n	80040dc <lcdDrawFillRect+0x24>
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bd90      	pop	{r4, r7, pc}
 8004116:	bf00      	nop

08004118 <lcdDrawBufferImage>:
    if((y + h - 1) >= LCD_HEIGHT) return;

    lcd.setWindow(x, y, x+w-1, y+h-1);
    lcd.sendBuffer((uint8_t *)data, sizeof(uint16_t)*w*h, 10);
}
void lcdDrawBufferImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	4604      	mov	r4, r0
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	4623      	mov	r3, r4
 8004128:	80fb      	strh	r3, [r7, #6]
 800412a:	4603      	mov	r3, r0
 800412c:	80bb      	strh	r3, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	807b      	strh	r3, [r7, #2]
 8004132:	4613      	mov	r3, r2
 8004134:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	2b9f      	cmp	r3, #159	; 0x9f
 800413a:	d83b      	bhi.n	80041b4 <lcdDrawBufferImage+0x9c>
 800413c:	88bb      	ldrh	r3, [r7, #4]
 800413e:	2b7f      	cmp	r3, #127	; 0x7f
 8004140:	d838      	bhi.n	80041b4 <lcdDrawBufferImage+0x9c>
    if((x + w - 1) >= LCD_WIDTH) return;
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	4413      	add	r3, r2
 8004148:	2ba0      	cmp	r3, #160	; 0xa0
 800414a:	dc35      	bgt.n	80041b8 <lcdDrawBufferImage+0xa0>
    if((y + h - 1) >= LCD_HEIGHT) return;
 800414c:	88ba      	ldrh	r2, [r7, #4]
 800414e:	883b      	ldrh	r3, [r7, #0]
 8004150:	4413      	add	r3, r2
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	dc32      	bgt.n	80041bc <lcdDrawBufferImage+0xa4>

    uint16_t pixel_cnt = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	81fb      	strh	r3, [r7, #14]

    for (int16_t i=y; i<y+h; i++)
 800415a:	88bb      	ldrh	r3, [r7, #4]
 800415c:	81bb      	strh	r3, [r7, #12]
 800415e:	e021      	b.n	80041a4 <lcdDrawBufferImage+0x8c>
    {
		for (int16_t j=x; j<x+w; j++)
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	817b      	strh	r3, [r7, #10]
 8004164:	e011      	b.n	800418a <lcdDrawBufferImage+0x72>
		{
			lcdDrawPixel(j, i, data[pixel_cnt++]);
 8004166:	8978      	ldrh	r0, [r7, #10]
 8004168:	89b9      	ldrh	r1, [r7, #12]
 800416a:	89fb      	ldrh	r3, [r7, #14]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	81fa      	strh	r2, [r7, #14]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	6a3a      	ldr	r2, [r7, #32]
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	f7ff fc1d 	bl	80039b8 <lcdDrawPixel>
		for (int16_t j=x; j<x+w; j++)
 800417e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004182:	b29b      	uxth	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	b29b      	uxth	r3, r3
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800418e:	88f9      	ldrh	r1, [r7, #6]
 8004190:	887b      	ldrh	r3, [r7, #2]
 8004192:	440b      	add	r3, r1
 8004194:	429a      	cmp	r2, r3
 8004196:	dbe6      	blt.n	8004166 <lcdDrawBufferImage+0x4e>
    for (int16_t i=y; i<y+h; i++)
 8004198:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800419c:	b29b      	uxth	r3, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	81bb      	strh	r3, [r7, #12]
 80041a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041a8:	88b9      	ldrh	r1, [r7, #4]
 80041aa:	883b      	ldrh	r3, [r7, #0]
 80041ac:	440b      	add	r3, r1
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dbd6      	blt.n	8004160 <lcdDrawBufferImage+0x48>
 80041b2:	e004      	b.n	80041be <lcdDrawBufferImage+0xa6>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <lcdDrawBufferImage+0xa6>
    if((x + w - 1) >= LCD_WIDTH) return;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <lcdDrawBufferImage+0xa6>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80041bc:	bf00      	nop
		}
    }
}
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}

080041c4 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 80041c4:	b408      	push	{r3}
 80041c6:	b590      	push	{r4, r7, lr}
 80041c8:	b0d8      	sub	sp, #352	; 0x160
 80041ca:	af02      	add	r7, sp, #8
 80041cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041d4:	6018      	str	r0, [r3, #0]
 80041d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041de:	6019      	str	r1, [r3, #0]
 80041e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041e4:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80041e8:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 80041ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80041ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 80041f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8004200:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004204:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004208:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800420c:	21ff      	movs	r1, #255	; 0xff
 800420e:	f010 f9f9 	bl	8014604 <vsniprintf>
 8004212:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8004216:	4b80      	ldr	r3, [pc, #512]	; (8004418 <lcdPrintf+0x254>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4b7f      	ldr	r3, [pc, #508]	; (800441c <lcdPrintf+0x258>)
 800421e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d072      	beq.n	800430e <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800422e:	e067      	b.n	8004300 <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8004230:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004234:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8004238:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800423c:	4413      	add	r3, r2
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	4b75      	ldr	r3, [pc, #468]	; (8004418 <lcdPrintf+0x254>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	4b75      	ldr	r3, [pc, #468]	; (800441c <lcdPrintf+0x258>)
 8004248:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800424c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004250:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8004254:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004258:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 800425c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004260:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	4623      	mov	r3, r4
 800426a:	6809      	ldr	r1, [r1, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f000 f92d 	bl	80044cc <disEngFont>

      Size_Char = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8004278:	4b67      	ldr	r3, [pc, #412]	; (8004418 <lcdPrintf+0x254>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b67      	ldr	r3, [pc, #412]	; (800441c <lcdPrintf+0x258>)
 8004280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 800428a:	4b63      	ldr	r3, [pc, #396]	; (8004418 <lcdPrintf+0x254>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	4b62      	ldr	r3, [pc, #392]	; (800441c <lcdPrintf+0x258>)
 8004292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 800429c:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80042a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042a8:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80042ac:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 80042b0:	6809      	ldr	r1, [r1, #0]
 80042b2:	440a      	add	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80042b6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80042ba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	2ba0      	cmp	r3, #160	; 0xa0
 80042c8:	dd13      	ble.n	80042f2 <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 80042ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042d2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80042d6:	601a      	str	r2, [r3, #0]
        y += font_height;
 80042d8:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80042dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042e4:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80042e8:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80042ec:	6809      	ldr	r1, [r1, #0]
 80042ee:	440a      	add	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 80042f2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80042f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042fa:	4413      	add	r3, r2
 80042fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004300:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004304:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004308:	429a      	cmp	r2, r3
 800430a:	db91      	blt.n	8004230 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 800430c:	e07b      	b.n	8004406 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004314:	e06f      	b.n	80043f6 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8004316:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800431a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800431e:	4413      	add	r3, r2
 8004320:	f107 0214 	add.w	r2, r7, #20
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f002 ff0e 	bl	8007148 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 800432c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004330:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f107 0214 	add.w	r2, r7, #20
 800433a:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800433e:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8004342:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8004346:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 800434a:	6809      	ldr	r1, [r1, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f000 f867 	bl	8004420 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8004352:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004356:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800435a:	885b      	ldrh	r3, [r3, #2]
 800435c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8004360:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004364:	2b01      	cmp	r3, #1
 8004366:	dd0e      	ble.n	8004386 <lcdPrintf+0x1c2>
        font_width = 16;
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 800436e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004372:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004376:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800437a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	3210      	adds	r2, #16
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e00d      	b.n	80043a2 <lcdPrintf+0x1de>
        font_width = 8;
 8004386:	2308      	movs	r3, #8
 8004388:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 800438c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004390:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004394:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004398:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	3208      	adds	r2, #8
 80043a0:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 80043a2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80043a6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	2ba0      	cmp	r3, #160	; 0xa0
 80043b4:	dd11      	ble.n	80043da <lcdPrintf+0x216>
        x  = x_Pre;
 80043b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043be:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80043c2:	601a      	str	r2, [r3, #0]
        y += 16;
 80043c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043cc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80043d0:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	3210      	adds	r2, #16
 80043d8:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80043da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043e2:	889b      	ldrh	r3, [r3, #4]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d00d      	beq.n	8004404 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 80043e8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80043ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043f0:	4413      	add	r3, r2
 80043f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043f6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80043fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80043fe:	429a      	cmp	r2, r3
 8004400:	db89      	blt.n	8004316 <lcdPrintf+0x152>
}
 8004402:	e000      	b.n	8004406 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004404:	bf00      	nop
}
 8004406:	bf00      	nop
 8004408:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004412:	b001      	add	sp, #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000081 	.word	0x20000081
 800441c:	20000084 	.word	0x20000084

08004420 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	885b      	ldrh	r3, [r3, #2]
 8004432:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8004434:	8b3b      	ldrh	r3, [r7, #24]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <disHanFont+0x1e>
  {
    FontSize = 2;
 800443a:	2302      	movs	r3, #2
 800443c:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 800443e:	2300      	movs	r3, #0
 8004440:	83fb      	strh	r3, [r7, #30]
 8004442:	e03a      	b.n	80044ba <disHanFont+0x9a>
  {
    index_x = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004448:	2300      	movs	r3, #0
 800444a:	83bb      	strh	r3, [r7, #28]
 800444c:	e02e      	b.n	80044ac <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 800444e:	8bfb      	ldrh	r3, [r7, #30]
 8004450:	8b3a      	ldrh	r2, [r7, #24]
 8004452:	fb03 f202 	mul.w	r2, r3, r2
 8004456:	8bbb      	ldrh	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	799b      	ldrb	r3, [r3, #6]
 8004460:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8004462:	2300      	movs	r3, #0
 8004464:	837b      	strh	r3, [r7, #26]
 8004466:	e01b      	b.n	80044a0 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8004468:	7d7a      	ldrb	r2, [r7, #21]
 800446a:	8b7b      	ldrh	r3, [r7, #26]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	b29a      	uxth	r2, r3
 800447c:	8afb      	ldrh	r3, [r7, #22]
 800447e:	4413      	add	r3, r2
 8004480:	b298      	uxth	r0, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	b29a      	uxth	r2, r3
 8004486:	8bfb      	ldrh	r3, [r7, #30]
 8004488:	4413      	add	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	887a      	ldrh	r2, [r7, #2]
 800448e:	4619      	mov	r1, r3
 8004490:	f7ff fa92 	bl	80039b8 <lcdDrawPixel>
        }
        index_x++;
 8004494:	8afb      	ldrh	r3, [r7, #22]
 8004496:	3301      	adds	r3, #1
 8004498:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 800449a:	8b7b      	ldrh	r3, [r7, #26]
 800449c:	3301      	adds	r3, #1
 800449e:	837b      	strh	r3, [r7, #26]
 80044a0:	8b7b      	ldrh	r3, [r7, #26]
 80044a2:	2b07      	cmp	r3, #7
 80044a4:	d9e0      	bls.n	8004468 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80044a6:	8bbb      	ldrh	r3, [r7, #28]
 80044a8:	3301      	adds	r3, #1
 80044aa:	83bb      	strh	r3, [r7, #28]
 80044ac:	8bba      	ldrh	r2, [r7, #28]
 80044ae:	8b3b      	ldrh	r3, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3cc      	bcc.n	800444e <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80044b4:	8bfb      	ldrh	r3, [r7, #30]
 80044b6:	3301      	adds	r3, #1
 80044b8:	83fb      	strh	r3, [r7, #30]
 80044ba:	8bfb      	ldrh	r3, [r7, #30]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d9c1      	bls.n	8004444 <disHanFont+0x24>
      }
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop

080044cc <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e035      	b.n	800454e <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	3b20      	subs	r3, #32
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	7849      	ldrb	r1, [r1, #1]
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4619      	mov	r1, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	440b      	add	r3, r1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	e01a      	b.n	800453c <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00f      	beq.n	8004536 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	b29a      	uxth	r2, r3
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	b29b      	uxth	r3, r3
 800451e:	4413      	add	r3, r2
 8004520:	b298      	uxth	r0, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	b29a      	uxth	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	b29b      	uxth	r3, r3
 800452a:	4413      	add	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004530:	4619      	mov	r1, r3
 8004532:	f7ff fa41 	bl	80039b8 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3301      	adds	r3, #1
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	4293      	cmp	r3, r2
 8004546:	d3de      	bcc.n	8004506 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	3301      	adds	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	461a      	mov	r2, r3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	4293      	cmp	r3, r2
 8004558:	d3c3      	bcc.n	80044e2 <disEngFont+0x16>
      }
    }
  }
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 800456e:	4a04      	ldr	r2, [pc, #16]	; (8004580 <lcdSetFont+0x1c>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	7013      	strb	r3, [r2, #0]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20000081 	.word	0x20000081

08004584 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d163      	bne.n	8004660 <cliLcd+0xdc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	494e      	ldr	r1, [pc, #312]	; (80046d8 <cliLcd+0x154>)
 800459e:	2000      	movs	r0, #0
 80045a0:	4798      	blx	r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05b      	beq.n	8004660 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 80045a8:	2003      	movs	r0, #3
 80045aa:	f7ff ffdb 	bl	8004564 <lcdSetFont>

    while(cliKeepLoop())
 80045ae:	e04b      	b.n	8004648 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 80045b0:	f7ff fbfa 	bl	8003da8 <lcdDrawAvailable>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d046      	beq.n	8004648 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7ff fa08 	bl	80039d0 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <cliLcd+0x158>)
 80045c2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80045c6:	2100      	movs	r1, #0
 80045c8:	2019      	movs	r0, #25
 80045ca:	f7ff fdfb 	bl	80041c4 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 80045ce:	f7ff fbd3 	bl	8003d78 <lcdGetFps>
 80045d2:	4603      	mov	r3, r0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <cliLcd+0x15c>)
 80045d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045dc:	2110      	movs	r1, #16
 80045de:	2000      	movs	r0, #0
 80045e0:	f7ff fdf0 	bl	80041c4 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 80045e4:	f7ff fbd4 	bl	8003d90 <lcdGetFpsTime>
 80045e8:	4603      	mov	r3, r0
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <cliLcd+0x160>)
 80045ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f2:	2120      	movs	r1, #32
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7ff fde5 	bl	80041c4 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 80045fa:	f7fc fe14 	bl	8001226 <millis>
 80045fe:	4603      	mov	r3, r0
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <cliLcd+0x160>)
 8004604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004608:	2130      	movs	r1, #48	; 0x30
 800460a:	2000      	movs	r0, #0
 800460c:	f7ff fdda 	bl	80041c4 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8004610:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	230a      	movs	r3, #10
 8004618:	220a      	movs	r2, #10
 800461a:	2146      	movs	r1, #70	; 0x46
 800461c:	2000      	movs	r0, #0
 800461e:	f7ff fd4b 	bl	80040b8 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8004622:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	230a      	movs	r3, #10
 800462a:	220a      	movs	r2, #10
 800462c:	2146      	movs	r1, #70	; 0x46
 800462e:	200a      	movs	r0, #10
 8004630:	f7ff fd42 	bl	80040b8 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8004634:	231f      	movs	r3, #31
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	230a      	movs	r3, #10
 800463a:	220a      	movs	r2, #10
 800463c:	2146      	movs	r1, #70	; 0x46
 800463e:	2014      	movs	r0, #20
 8004640:	f7ff fd3a 	bl	80040b8 <lcdDrawFillRect>

        lcdRequestDraw();
 8004644:	f7ff fbc6 	bl	8003dd4 <lcdRequestDraw>
    while(cliKeepLoop())
 8004648:	f7fe f856 	bl	80026f8 <cliKeepLoop>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ae      	bne.n	80045b0 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8004652:	2000      	movs	r0, #0
 8004654:	f7ff f9bc 	bl	80039d0 <lcdClearBuffer>
    lcdUpdateDraw();
 8004658:	f7ff fbf4 	bl	8003e44 <lcdUpdateDraw>

    ret = true;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d126      	bne.n	80046b6 <cliLcd+0x132>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	491e      	ldr	r1, [pc, #120]	; (80046e8 <cliLcd+0x164>)
 800466e:	2000      	movs	r0, #0
 8004670:	4798      	blx	r3
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01e      	beq.n	80046b6 <cliLcd+0x132>
  {
	  lcdClearBuffer(black);
 8004678:	2000      	movs	r0, #0
 800467a:	f7ff f9a9 	bl	80039d0 <lcdClearBuffer>
	  lcdUpdateDraw();
 800467e:	f7ff fbe1 	bl	8003e44 <lcdUpdateDraw>
	  while(cliKeepLoop())
 8004682:	e00c      	b.n	800469e <cliLcd+0x11a>
	  {
		  static bool blink = 0;
		  blink = get_blink();
 8004684:	f002 fc3a 	bl	8006efc <get_blink>
 8004688:	4603      	mov	r3, r0
 800468a:	461a      	mov	r2, r3
 800468c:	4b17      	ldr	r3, [pc, #92]	; (80046ec <cliLcd+0x168>)
 800468e:	701a      	strb	r2, [r3, #0]
		  draw_fan_status(0, 0, blink);
 8004690:	4b16      	ldr	r3, [pc, #88]	; (80046ec <cliLcd+0x168>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	2100      	movs	r1, #0
 8004698:	2000      	movs	r0, #0
 800469a:	f002 fbe5 	bl	8006e68 <draw_fan_status>
	  while(cliKeepLoop())
 800469e:	f7fe f82b 	bl	80026f8 <cliKeepLoop>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ed      	bne.n	8004684 <cliLcd+0x100>
	  }
	  lcdClearBuffer(black);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7ff f991 	bl	80039d0 <lcdClearBuffer>
	  lcdUpdateDraw();
 80046ae:	f7ff fbc9 	bl	8003e44 <lcdUpdateDraw>

	  ret = true;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <cliLcd+0x14a>
  {
    cliPrintf("lcd test\n");
 80046c2:	480b      	ldr	r0, [pc, #44]	; (80046f0 <cliLcd+0x16c>)
 80046c4:	f7fd ff1e 	bl	8002504 <cliPrintf>
    cliPrintf("lcd image\n");
 80046c8:	480a      	ldr	r0, [pc, #40]	; (80046f4 <cliLcd+0x170>)
 80046ca:	f7fd ff1b 	bl	8002504 <cliPrintf>
  }
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	08017914 	.word	0x08017914
 80046dc:	0801791c 	.word	0x0801791c
 80046e0:	0801792c 	.word	0x0801792c
 80046e4:	08017934 	.word	0x08017934
 80046e8:	0801793c 	.word	0x0801793c
 80046ec:	2000aa00 	.word	0x2000aa00
 80046f0:	08017944 	.word	0x08017944
 80046f4:	08017950 	.word	0x08017950

080046f8 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
  bool ret = true;
 80046fe:	2301      	movs	r3, #1
 8004700:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004710:	2300      	movs	r3, #0
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <ledInit+0x8c>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <ledInit+0x8c>)
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	6313      	str	r3, [r2, #48]	; 0x30
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <ledInit+0x8c>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472c:	2301      	movs	r3, #1
 800472e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e016      	b.n	800476c <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800473e:	4a12      	ldr	r2, [pc, #72]	; (8004788 <ledInit+0x90>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	889b      	ldrh	r3, [r3, #4]
 8004748:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800474a:	4a0f      	ldr	r2, [pc, #60]	; (8004788 <ledInit+0x90>)
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004752:	1d3a      	adds	r2, r7, #4
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f008 fdf2 	bl	800d340 <HAL_GPIO_Init>

    ledOff(i);
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f817 	bl	8004794 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	dde5      	ble.n	800473e <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8004772:	4906      	ldr	r1, [pc, #24]	; (800478c <ledInit+0x94>)
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <ledInit+0x98>)
 8004776:	f7fd ffd5 	bl	8002724 <cliAdd>
#endif

  return ret;
 800477a:	7efb      	ldrb	r3, [r7, #27]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	20000094 	.word	0x20000094
 800478c:	0800480d 	.word	0x0800480d
 8004790:	08017630 	.word	0x08017630

08004794 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d111      	bne.n	80047c8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <ledOff+0x3c>)
 80047a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <ledOff+0x3c>)
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	8899      	ldrh	r1, [r3, #4]
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <ledOff+0x3c>)
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	79db      	ldrb	r3, [r3, #7]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f009 f83d 	bl	800d840 <HAL_GPIO_WritePin>
 80047c6:	e000      	b.n	80047ca <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80047c8:	bf00      	nop
}
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000094 	.word	0x20000094

080047d4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10d      	bne.n	8004800 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <ledToggle+0x34>)
 80047e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	4906      	ldr	r1, [pc, #24]	; (8004808 <ledToggle+0x34>)
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	889b      	ldrh	r3, [r3, #4]
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f009 f83a 	bl	800d872 <HAL_GPIO_TogglePin>
 80047fe:	e000      	b.n	8004802 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8004800:	bf00      	nop
}
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000094 	.word	0x20000094

0800480c <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004814:	2300      	movs	r3, #0
 8004816:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d133      	bne.n	8004888 <cliLed+0x7c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	491f      	ldr	r1, [pc, #124]	; (80048a4 <cliLed+0x98>)
 8004826:	2000      	movs	r0, #0
 8004828:	4798      	blx	r3
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02b      	beq.n	8004888 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2001      	movs	r0, #1
 8004836:	4798      	blx	r3
 8004838:	4603      	mov	r3, r0
 800483a:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2002      	movs	r0, #2
 8004842:	4798      	blx	r3
 8004844:	4603      	mov	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8004848:	7dbb      	ldrb	r3, [r7, #22]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <cliLed+0x48>
    {
      led_ch--;
 800484e:	7dbb      	ldrb	r3, [r7, #22]
 8004850:	3b01      	subs	r3, #1
 8004852:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8004854:	f7fc fce7 	bl	8001226 <millis>
 8004858:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800485a:	e00e      	b.n	800487a <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 800485c:	f7fc fce3 	bl	8001226 <millis>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d806      	bhi.n	800487a <cliLed+0x6e>
      {
        pre_time = millis();
 800486c:	f7fc fcdb 	bl	8001226 <millis>
 8004870:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8004872:	7dbb      	ldrb	r3, [r7, #22]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ffad 	bl	80047d4 <ledToggle>
    while(cliKeepLoop())
 800487a:	f7fd ff3d 	bl	80026f8 <cliKeepLoop>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1eb      	bne.n	800485c <cliLed+0x50>
      }
    }

    ret = true;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	f083 0301 	eor.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8004894:	2101      	movs	r1, #1
 8004896:	4804      	ldr	r0, [pc, #16]	; (80048a8 <cliLed+0x9c>)
 8004898:	f7fd fe34 	bl	8002504 <cliPrintf>
  }
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	08017634 	.word	0x08017634
 80048a8:	0801763c 	.word	0x0801763c

080048ac <menuSetCallBack>:
static bool     menuArgsIsStr(uint8_t index, char *p_str);

void menu_manual(menu_args_t *args);

void menuSetCallBack(void (*callback)(uint8_t layer))
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	menu_node.callback = callback;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <menuSetCallBack+0x24>)
 80048b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80048ba:	461a      	mov	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2000aa04 	.word	0x2000aa04

080048d4 <menuInit>:

bool menuInit(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
	menu_node.node = 1;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <menuInit+0x74>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
	menu_node.main = 0;
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <menuInit+0x74>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	705a      	strb	r2, [r3, #1]
	menu_node.layer = 0;
 80048e4:	4b18      	ldr	r3, [pc, #96]	; (8004948 <menuInit+0x74>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	709a      	strb	r2, [r3, #2]
	menu_node.menu_count = 0;
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <menuInit+0x74>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	70da      	strb	r2, [r3, #3]
	menu_node.menu_args.getData  = menuArgsGetData;
 80048f0:	4b15      	ldr	r3, [pc, #84]	; (8004948 <menuInit+0x74>)
 80048f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <menuInit+0x78>)
 80048fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	menu_node.menu_args.getFloat = menuArgsGetFloat;
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <menuInit+0x74>)
 8004900:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004904:	461a      	mov	r2, r3
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <menuInit+0x7c>)
 8004908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	menu_node.menu_args.getStr   = menuArgsGetStr;
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <menuInit+0x74>)
 800490e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004912:	461a      	mov	r2, r3
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <menuInit+0x80>)
 8004916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	menu_node.menu_args.isStr    = menuArgsIsStr;
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <menuInit+0x74>)
 800491c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004920:	461a      	mov	r2, r3
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <menuInit+0x84>)
 8004924:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	menu_node.callback = NULL;
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <menuInit+0x74>)
 800492a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	menuAdd("manual", 0, menu_manual);
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <menuInit+0x88>)
 8004938:	2100      	movs	r1, #0
 800493a:	4809      	ldr	r0, [pc, #36]	; (8004960 <menuInit+0x8c>)
 800493c:	f000 f928 	bl	8004b90 <menuAdd>

	return true;
 8004940:	2301      	movs	r3, #1
}
 8004942:	4618      	mov	r0, r3
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	2000aa04 	.word	0x2000aa04
 800494c:	08004a2d 	.word	0x08004a2d
 8004950:	08004a85 	.word	0x08004a85
 8004954:	08004ae5 	.word	0x08004ae5
 8004958:	08004b35 	.word	0x08004b35
 800495c:	08004c1d 	.word	0x08004c1d
 8004960:	0801765c 	.word	0x0801765c

08004964 <menuMain>:

bool menuMain(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  if (menu_node.node == 0)
 8004968:	4b07      	ldr	r3, [pc, #28]	; (8004988 <menuMain+0x24>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <menuMain+0x10>
  {
    return false;
 8004970:	2300      	movs	r3, #0
 8004972:	e007      	b.n	8004984 <menuMain+0x20>
  }

  if (menu_node.node >= 1)
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <menuMain+0x24>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <menuMain+0x1e>
  {
    menuUpdate(&menu_node);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <menuMain+0x24>)
 800497e:	f000 f805 	bl	800498c <menuUpdate>
  }

  return true;
 8004982:	2301      	movs	r3, #1
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	2000aa04 	.word	0x2000aa04

0800498c <menuUpdate>:

bool menuUpdate(menu_t *p_menu)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004994:	2300      	movs	r3, #0
 8004996:	73fb      	strb	r3, [r7, #15]

  if(p_menu->callback != NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800499e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <menuUpdate+0x2c>
  {
	  (*p_menu->callback)(p_menu->layer);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	7892      	ldrb	r2, [r2, #2]
 80049b4:	4610      	mov	r0, r2
 80049b6:	4798      	blx	r3
  }

  return ret;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <menu_strToUpper>:

void menu_strToUpper(char *str)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<MENU_NAME_MAX; i++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	81fb      	strh	r3, [r7, #14]
 80049ce:	e018      	b.n	8004a02 <menu_strToUpper+0x40>
  {
    str_ch = str[i];
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80049da:	7b7b      	ldrb	r3, [r7, #13]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d014      	beq.n	8004a0a <menu_strToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80049e0:	7b7b      	ldrb	r3, [r7, #13]
 80049e2:	2b60      	cmp	r3, #96	; 0x60
 80049e4:	d905      	bls.n	80049f2 <menu_strToUpper+0x30>
 80049e6:	7b7b      	ldrb	r3, [r7, #13]
 80049e8:	2b7a      	cmp	r3, #122	; 0x7a
 80049ea:	d802      	bhi.n	80049f2 <menu_strToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80049ec:	7b7b      	ldrb	r3, [r7, #13]
 80049ee:	3b20      	subs	r3, #32
 80049f0:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	7b7a      	ldrb	r2, [r7, #13]
 80049fa:	701a      	strb	r2, [r3, #0]
  for (i=0; i<MENU_NAME_MAX; i++)
 80049fc:	89fb      	ldrh	r3, [r7, #14]
 80049fe:	3301      	adds	r3, #1
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	2bff      	cmp	r3, #255	; 0xff
 8004a06:	d9e3      	bls.n	80049d0 <menu_strToUpper+0xe>
 8004a08:	e000      	b.n	8004a0c <menu_strToUpper+0x4a>
      break;
 8004a0a:	bf00      	nop
  }

  if (i == MENU_NAME_MAX)
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d105      	bne.n	8004a20 <menu_strToUpper+0x5e>
  {
    str[i-1] = 0;
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
  }
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <menuArgsGetData>:


int32_t menuArgsGetData(uint8_t index)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <menuArgsGetData+0x54>)
 8004a3c:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d301      	bcc.n	8004a54 <menuArgsGetData+0x28>
  {
    return 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e010      	b.n	8004a76 <menuArgsGetData+0x4a>
  }

  ret = (int32_t)strtoul((const char * ) p_menu->menu_args.argv[index], (char **)NULL, (int) 0);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f00f fd94 	bl	8014598 <strtoul>
 8004a70:	4603      	mov	r3, r0
 8004a72:	60fb      	str	r3, [r7, #12]

  return ret;
 8004a74:	68fb      	ldr	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000aa04 	.word	0x2000aa04

08004a84 <menuArgsGetFloat>:

float menuArgsGetFloat(uint8_t index)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <menuArgsGetFloat+0x5c>)
 8004a96:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004aa2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <menuArgsGetFloat+0x2c>
  {
    return 0;
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e00f      	b.n	8004ad0 <menuArgsGetFloat+0x4c>
  }

  ret = (float)strtof((const char * ) p_menu->menu_args.argv[index], (char **)NULL);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ab6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f00f fc6d 	bl	80143a4 <strtof>
 8004aca:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8004ace:	68fb      	ldr	r3, [r7, #12]
}
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	2000aa04 	.word	0x2000aa04

08004ae4 <menuArgsGetStr>:

char *menuArgsGetStr(uint8_t index)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <menuArgsGetStr+0x4c>)
 8004af4:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b00:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d301      	bcc.n	8004b0c <menuArgsGetStr+0x28>
  {
    return 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e00a      	b.n	8004b22 <menuArgsGetStr+0x3e>
  }

  ret = p_menu->menu_args.argv[index];
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]

  return ret;
 8004b20:	68fb      	ldr	r3, [r7, #12]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	2000aa04 	.word	0x2000aa04

08004b34 <menuArgsIsStr>:

bool menuArgsIsStr(uint8_t index, char *p_str)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	6039      	str	r1, [r7, #0]
 8004b3e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
  menu_t *p_menu = &menu_node;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <menuArgsIsStr+0x58>)
 8004b46:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b52:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d301      	bcc.n	8004b5e <menuArgsIsStr+0x2a>
  {
    return 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e012      	b.n	8004b84 <menuArgsIsStr+0x50>
  }

  if(strcmp(p_str, p_menu->menu_args.argv[index]) == 0)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	6838      	ldr	r0, [r7, #0]
 8004b74:	f7fb fb34 	bl	80001e0 <strcmp>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <menuArgsIsStr+0x4e>
  {
    ret = true;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	2000aa04 	.word	0x2000aa04

08004b90 <menuAdd>:

bool menuAdd(const char *menu_str, uint8_t layer, void (*p_func)(menu_args_t *))
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	77fb      	strb	r3, [r7, #31]
  menu_t *p_menu = &menu_node;
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <menuAdd+0x88>)
 8004ba4:	61bb      	str	r3, [r7, #24]
  uint16_t index;

  if (p_menu->menu_count >= MENU_LIST_MAX)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	78db      	ldrb	r3, [r3, #3]
 8004baa:	2b1f      	cmp	r3, #31
 8004bac:	d901      	bls.n	8004bb2 <menuAdd+0x22>
  {
    return false;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e02e      	b.n	8004c10 <menuAdd+0x80>
  }

  index = p_menu->menu_count;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	82fb      	strh	r3, [r7, #22]
  p_menu->layer = layer;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	7afa      	ldrb	r2, [r7, #11]
 8004bbc:	709a      	strb	r2, [r3, #2]

  strcpy(p_menu->menu_list[index].menu_str, menu_str);
 8004bbe:	8afa      	ldrh	r2, [r7, #22]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	019b      	lsls	r3, r3, #6
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f00e fdbb 	bl	801374c <strcpy>
  p_menu->menu_list[index].menu_func = p_func;
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	019b      	lsls	r3, r3, #6
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]

  menu_strToUpper(p_menu->menu_list[index].menu_str);
 8004bec:	8afa      	ldrh	r2, [r7, #22]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fee0 	bl	80049c2 <menu_strToUpper>

  p_menu->menu_count++;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	3301      	adds	r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	70da      	strb	r2, [r3, #3]

  return ret;
 8004c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	2000aa04 	.word	0x2000aa04

08004c1c <menu_manual>:

void menu_manual(menu_args_t *args)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	menu_t *p_menu = &menu_node;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <menu_manual+0x18>)
 8004c26:	60fb      	str	r3, [r7, #12]

}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	2000aa04 	.word	0x2000aa04

08004c38 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004c40:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <DWT_Delay_us+0x40>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004c46:	f009 fa49 	bl	800e0dc <HAL_RCC_GetHCLKFreq>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <DWT_Delay_us+0x44>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0c9b      	lsrs	r3, r3, #18
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004c5c:	bf00      	nop
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <DWT_Delay_us+0x40>)
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad2      	subs	r2, r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d3f8      	bcc.n	8004c5e <DWT_Delay_us+0x26>
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	e0001000 	.word	0xe0001000
 8004c7c:	431bde83 	.word	0x431bde83

08004c80 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	889b      	ldrh	r3, [r3, #4]
 8004c8c:	041a      	lsls	r2, r3, #16
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	619a      	str	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	889a      	ldrh	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	619a      	str	r2, [r3, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	889b      	ldrh	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f107 020c 	add.w	r2, r7, #12
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f008 fb2c 	bl	800d340 <HAL_GPIO_Init>
}
 8004ce8:	bf00      	nop
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8004cf8:	2311      	movs	r3, #17
 8004cfa:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d00:	2302      	movs	r3, #2
 8004d02:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	889b      	ldrh	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f107 020c 	add.w	r2, r7, #12
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f008 fb13 	bl	800d340 <HAL_GPIO_Init>

}
 8004d1a:	bf00      	nop
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ffd7 	bl	8004cf0 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ffac 	bl	8004ca0 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8004d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d4c:	f7ff ff74 	bl	8004c38 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ff95 	bl	8004c80 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8004d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d5a:	f7ff ff6d 	bl	8004c38 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff ff9e 	bl	8004ca0 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8004d64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d68:	f7ff ff66 	bl	8004c38 <DWT_Delay_us>
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff7f 	bl	8004c80 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ffb4 	bl	8004cf0 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8004d88:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004d8c:	f7ff ff54 	bl	8004c38 <DWT_Delay_us>
	DWT_Delay_us(20);
 8004d90:	2014      	movs	r0, #20
 8004d92:	f7ff ff51 	bl	8004c38 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ff91 	bl	8004cbe <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8004d9c:	2046      	movs	r0, #70	; 0x46
 8004d9e:	f7ff ff4b 	bl	8004c38 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	889b      	ldrh	r3, [r3, #4]
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f008 fd2f 	bl	800d810 <HAL_GPIO_ReadPin>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8004db6:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004dba:	f7ff ff3d 	bl	8004c38 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ff50 	bl	8004c80 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff85 	bl	8004cf0 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8004de6:	200a      	movs	r0, #10
 8004de8:	f7ff ff26 	bl	8004c38 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ff66 	bl	8004cbe <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8004df2:	2037      	movs	r0, #55	; 0x37
 8004df4:	f7ff ff20 	bl	8004c38 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff ff60 	bl	8004cbe <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8004dfe:	e011      	b.n	8004e24 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff3d 	bl	8004c80 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff ff72 	bl	8004cf0 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8004e0c:	2041      	movs	r0, #65	; 0x41
 8004e0e:	f7ff ff13 	bl	8004c38 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff53 	bl	8004cbe <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8004e18:	2005      	movs	r0, #5
 8004e1a:	f7ff ff0d 	bl	8004c38 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ff4d 	bl	8004cbe <ONEWIRE_INPUT>
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff21 	bl	8004c80 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ff56 	bl	8004cf0 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8004e44:	2002      	movs	r0, #2
 8004e46:	f7ff fef7 	bl	8004c38 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff37 	bl	8004cbe <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8004e50:	200a      	movs	r0, #10
 8004e52:	f7ff fef1 	bl	8004c38 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	889b      	ldrh	r3, [r3, #4]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f008 fcd5 	bl	800d810 <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8004e70:	2032      	movs	r0, #50	; 0x32
 8004e72:	f7ff fee1 	bl	8004c38 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8004e90:	e00a      	b.n	8004ea8 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ff93 	bl	8004dc8 <OneWire_WriteBit>
		byte >>= 1;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	1e5a      	subs	r2, r3, #1
 8004eac:	73fa      	strb	r2, [r7, #15]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1ef      	bne.n	8004e92 <OneWire_WriteByte+0x12>
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004ecc:	e00d      	b.n	8004eea <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ffa9 	bl	8004e2c <OneWire_ReadBit>
 8004eda:	4603      	mov	r3, r0
 8004edc:	01db      	lsls	r3, r3, #7
 8004ede:	b25a      	sxtb	r2, r3
 8004ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	b25b      	sxtb	r3, r3
 8004ee8:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	73fa      	strb	r2, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ec      	bne.n	8004ece <OneWire_ReadByte+0x12>
	}

	return byte;
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f816 	bl	8004f38 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004f0c:	21f0      	movs	r1, #240	; 0xf0
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f825 	bl	8004f5e <OneWire_Search>
 8004f14:	4603      	mov	r3, r0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004f26:	21f0      	movs	r1, #240	; 0xf0
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f818 	bl	8004f5e <OneWire_Search>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	71da      	strb	r2, [r3, #7]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	7a1b      	ldrb	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 809a 	bne.w	80050bc <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fef3 	bl	8004d74 <OneWire_Reset>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	71da      	strb	r2, [r3, #7]
			return 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e09b      	b.n	80050e2 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ff66 	bl	8004e80 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff39 	bl	8004e2c <OneWire_ReadBit>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff ff34 	bl	8004e2c <OneWire_ReadBit>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8004fc8:	7a7b      	ldrb	r3, [r7, #9]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <OneWire_Search+0x76>
 8004fce:	7a3b      	ldrb	r3, [r7, #8]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d064      	beq.n	800509e <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8004fd4:	7a7a      	ldrb	r2, [r7, #9]
 8004fd6:	7a3b      	ldrb	r3, [r7, #8]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d002      	beq.n	8004fe2 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8004fdc:	7a7b      	ldrb	r3, [r7, #9]
 8004fde:	72bb      	strb	r3, [r7, #10]
 8004fe0:	e026      	b.n	8005030 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	799b      	ldrb	r3, [r3, #6]
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d20d      	bcs.n	8005008 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8004fec:	7b7b      	ldrb	r3, [r7, #13]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	7a5a      	ldrb	r2, [r3, #9]
 8004ff4:	7afb      	ldrb	r3, [r7, #11]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	72bb      	strb	r3, [r7, #10]
 8005006:	e008      	b.n	800501a <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	799b      	ldrb	r3, [r3, #6]
 800500c:	7bfa      	ldrb	r2, [r7, #15]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 800501a:	7abb      	ldrb	r3, [r7, #10]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d107      	bne.n	8005030 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	2b08      	cmp	r3, #8
 8005028:	d802      	bhi.n	8005030 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7bba      	ldrb	r2, [r7, #14]
 800502e:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8005030:	7abb      	ldrb	r3, [r7, #10]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d10c      	bne.n	8005050 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8005036:	7b7b      	ldrb	r3, [r7, #13]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	7a59      	ldrb	r1, [r3, #9]
 800503e:	7b7b      	ldrb	r3, [r7, #13]
 8005040:	7afa      	ldrb	r2, [r7, #11]
 8005042:	430a      	orrs	r2, r1
 8005044:	b2d1      	uxtb	r1, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	460a      	mov	r2, r1
 800504c:	725a      	strb	r2, [r3, #9]
 800504e:	e010      	b.n	8005072 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8005050:	7b7b      	ldrb	r3, [r7, #13]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	7a5b      	ldrb	r3, [r3, #9]
 8005058:	b25a      	sxtb	r2, r3
 800505a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800505e:	43db      	mvns	r3, r3
 8005060:	b25b      	sxtb	r3, r3
 8005062:	4013      	ands	r3, r2
 8005064:	b25a      	sxtb	r2, r3
 8005066:	7b7b      	ldrb	r3, [r7, #13]
 8005068:	b2d1      	uxtb	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	460a      	mov	r2, r1
 8005070:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8005072:	7abb      	ldrb	r3, [r7, #10]
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fea6 	bl	8004dc8 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	3301      	adds	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8005082:	7afb      	ldrb	r3, [r7, #11]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8005088:	7afb      	ldrb	r3, [r7, #11]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 800508e:	7b7b      	ldrb	r3, [r7, #13]
 8005090:	3301      	adds	r3, #1
 8005092:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8005094:	2301      	movs	r3, #1
 8005096:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8005098:	7b7b      	ldrb	r3, [r7, #13]
 800509a:	2b07      	cmp	r3, #7
 800509c:	d98a      	bls.n	8004fb4 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d90b      	bls.n	80050bc <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7bba      	ldrb	r2, [r7, #14]
 80050a8:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	799b      	ldrb	r3, [r3, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80050b8:	2301      	movs	r3, #1
 80050ba:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80050bc:	7b3b      	ldrb	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <OneWire_Search+0x16c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7a5b      	ldrb	r3, [r3, #9]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80050e0:	7b3b      	ldrb	r3, [r7, #12]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80050f4:	2155      	movs	r1, #85	; 0x55
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fec2 	bl	8004e80 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	e00a      	b.n	8005118 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	4413      	add	r3, r2
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff feb7 	bl	8004e80 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	3301      	adds	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b07      	cmp	r3, #7
 800511c:	d9f1      	bls.n	8005102 <OneWire_SelectWithPointer+0x18>
	}
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	e00a      	b.n	800514e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	440b      	add	r3, r1
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	440a      	add	r2, r1
 8005144:	7a52      	ldrb	r2, [r2, #9]
 8005146:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	3301      	adds	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b07      	cmp	r3, #7
 8005152:	d9f1      	bls.n	8005138 <OneWire_GetFullROM+0x10>
	}
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8005172:	e022      	b.n	80051ba <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800517e:	2308      	movs	r3, #8
 8005180:	737b      	strb	r3, [r7, #13]
 8005182:	e017      	b.n	80051b4 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	4053      	eors	r3, r2
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8005198:	7b3b      	ldrb	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80051a4:	43db      	mvns	r3, r3
 80051a6:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80051ae:	7b7b      	ldrb	r3, [r7, #13]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	737b      	strb	r3, [r7, #13]
 80051b4:	7b7b      	ldrb	r3, [r7, #13]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e4      	bne.n	8005184 <OneWire_CRC8+0x22>
	while (len--) {
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	70fa      	strb	r2, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1d7      	bne.n	8005174 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
  bool ret = false;
 80051da:	2300      	movs	r3, #0
 80051dc:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <sdInit+0x80>)
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <sdInit+0x84>)
 80051e2:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <sdInit+0x80>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <sdInit+0x80>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80051f0:	4b18      	ldr	r3, [pc, #96]	; (8005254 <sdInit+0x80>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <sdInit+0x80>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80051fc:	4b15      	ldr	r3, [pc, #84]	; (8005254 <sdInit+0x80>)
 80051fe:	2200      	movs	r2, #0
 8005200:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <sdInit+0x80>)
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8005208:	4b14      	ldr	r3, [pc, #80]	; (800525c <sdInit+0x88>)
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <sdInit+0x88>)
 8005210:	2201      	movs	r2, #1
 8005212:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8005214:	4b11      	ldr	r3, [pc, #68]	; (800525c <sdInit+0x88>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 800521c:	480d      	ldr	r0, [pc, #52]	; (8005254 <sdInit+0x80>)
 800521e:	f008 ff91 	bl	800e144 <HAL_SD_Init>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8005228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800522c:	4809      	ldr	r0, [pc, #36]	; (8005254 <sdInit+0x80>)
 800522e:	f009 fd5d 	bl	800ecec <HAL_SD_ConfigWideBusOperation>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <sdInit+0x68>
      {
        ret = true;
 8005238:	2301      	movs	r3, #1
 800523a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <sdInit+0x8c>)
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 8005242:	4908      	ldr	r1, [pc, #32]	; (8005264 <sdInit+0x90>)
 8005244:	4808      	ldr	r0, [pc, #32]	; (8005268 <sdInit+0x94>)
 8005246:	f7fd fa6d 	bl	8002724 <cliAdd>
#endif

  return ret;
 800524a:	79fb      	ldrb	r3, [r7, #7]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	2000caa8 	.word	0x2000caa8
 8005258:	40012c00 	.word	0x40012c00
 800525c:	2000caa5 	.word	0x2000caa5
 8005260:	2000caa4 	.word	0x2000caa4
 8005264:	08005755 	.word	0x08005755
 8005268:	08017664 	.word	0x08017664

0800526c <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return is_init;
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <sdIsInit+0x14>)
 8005272:	781b      	ldrb	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000caa4 	.word	0x2000caa4

08005284 <sdIsDetected>:

bool sdIsDetected(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8005288:	2000      	movs	r0, #0
 800528a:	f7fe f9ef 	bl	800366c <gpioPinRead>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <sdIsDetected+0x18>
  {
    is_detected = true;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <sdIsDetected+0x28>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e002      	b.n	80052a2 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <sdIsDetected+0x28>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 80052a2:	4b02      	ldr	r3, [pc, #8]	; (80052ac <sdIsDetected+0x28>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	2000caa5 	.word	0x2000caa5

080052b0 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 80052b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b4:	b08c      	sub	sp, #48	; 0x30
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <sdGetInfo+0xa8>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d03d      	beq.n	8005348 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 80052cc:	f107 0308 	add.w	r3, r7, #8
 80052d0:	4619      	mov	r1, r3
 80052d2:	4822      	ldr	r0, [pc, #136]	; (800535c <sdGetInfo+0xac>)
 80052d4:	f009 fcde 	bl	800ec94 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8005302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2200      	movs	r2, #0
 800530e:	469a      	mov	sl, r3
 8005310:	4693      	mov	fp, r2
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	2200      	movs	r2, #0
 8005318:	4698      	mov	r8, r3
 800531a:	4691      	mov	r9, r2
 800531c:	fb08 f20b 	mul.w	r2, r8, fp
 8005320:	fb0a f309 	mul.w	r3, sl, r9
 8005324:	4413      	add	r3, r2
 8005326:	fbaa 4508 	umull	r4, r5, sl, r8
 800532a:	442b      	add	r3, r5
 800532c:	461d      	mov	r5, r3
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	0d22      	lsrs	r2, r4, #20
 8005338:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800533c:	0d2b      	lsrs	r3, r5, #20
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	621a      	str	r2, [r3, #32]
    ret = true;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8005348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800534c:	4618      	mov	r0, r3
 800534e:	3730      	adds	r7, #48	; 0x30
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	2000caa4 	.word	0x2000caa4
 800535c:	2000caa8 	.word	0x2000caa8

08005360 <sdIsBusy>:

bool sdIsBusy(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 8005366:	4808      	ldr	r0, [pc, #32]	; (8005388 <sdIsBusy+0x28>)
 8005368:	f009 fd3c 	bl	800ede4 <HAL_SD_GetCardState>
 800536c:	4603      	mov	r3, r0
 800536e:	2b04      	cmp	r3, #4
 8005370:	d102      	bne.n	8005378 <sdIsBusy+0x18>
  {
    is_busy = false;
 8005372:	2300      	movs	r3, #0
 8005374:	71fb      	strb	r3, [r7, #7]
 8005376:	e001      	b.n	800537c <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8005378:	2301      	movs	r3, #1
 800537a:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 800537c:	79fb      	ldrb	r3, [r7, #7]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	2000caa8 	.word	0x2000caa8

0800538c <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8005394:	f7fb ff47 	bl	8001226 <millis>
 8005398:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 800539a:	e009      	b.n	80053b0 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 800539c:	f7ff ffe0 	bl	8005360 <sdIsBusy>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f083 0301 	eor.w	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <sdIsReady+0x24>
    {
      return true;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e008      	b.n	80053c2 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 80053b0:	f7fb ff39 	bl	8001226 <millis>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d8ed      	bhi.n	800539c <sdIsReady+0x10>
    }
  }

  return false;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <sdReadBlocks+0x8c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	481c      	ldr	r0, [pc, #112]	; (800545c <sdReadBlocks+0x90>)
 80053ec:	f008 ff3a 	bl	800e264 <HAL_SD_ReadBlocks_DMA>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12a      	bne.n	800544c <sdReadBlocks+0x80>
  {

    pre_time = millis();
 80053f6:	f7fb ff16 	bl	8001226 <millis>
 80053fa:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 80053fc:	e007      	b.n	800540e <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80053fe:	f7fb ff12 	bl	8001226 <millis>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d908      	bls.n	8005420 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <sdReadBlocks+0x8c>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f083 0301 	eor.w	r3, r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ef      	bne.n	80053fe <sdReadBlocks+0x32>
 800541e:	e00d      	b.n	800543c <sdReadBlocks+0x70>
      {
        break;
 8005420:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8005422:	e00b      	b.n	800543c <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8005424:	f7fb feff 	bl	8001226 <millis>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d803      	bhi.n	800543c <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <sdReadBlocks+0x8c>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
        break;
 800543a:	e004      	b.n	8005446 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 800543c:	f7ff ff90 	bl	8005360 <sdIsBusy>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1ee      	bne.n	8005424 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 8005446:	4b04      	ldr	r3, [pc, #16]	; (8005458 <sdReadBlocks+0x8c>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800544c:	7dfb      	ldrb	r3, [r7, #23]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000caa6 	.word	0x2000caa6
 800545c:	2000caa8 	.word	0x2000caa8

08005460 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8005472:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <sdWriteBlocks+0x90>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	481d      	ldr	r0, [pc, #116]	; (80054f4 <sdWriteBlocks+0x94>)
 8005480:	f008 ffda 	bl	800e438 <HAL_SD_WriteBlocks_DMA>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d12d      	bne.n	80054e6 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 800548a:	f7fb fecc 	bl	8001226 <millis>
 800548e:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8005490:	e007      	b.n	80054a2 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8005492:	f7fb fec8 	bl	8001226 <millis>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d908      	bls.n	80054b4 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <sdWriteBlocks+0x90>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f083 0301 	eor.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ef      	bne.n	8005492 <sdWriteBlocks+0x32>
 80054b2:	e000      	b.n	80054b6 <sdWriteBlocks+0x56>
      {
        break;
 80054b4:	bf00      	nop
      }
    }
    pre_time = millis();
 80054b6:	f7fb feb6 	bl	8001226 <millis>
 80054ba:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 80054bc:	e00b      	b.n	80054d6 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 80054be:	f7fb feb2 	bl	8001226 <millis>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d803      	bhi.n	80054d6 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <sdWriteBlocks+0x90>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
        break;
 80054d4:	e004      	b.n	80054e0 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 80054d6:	f7ff ff43 	bl	8005360 <sdIsBusy>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ee      	bne.n	80054be <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <sdWriteBlocks+0x90>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000caa7 	.word	0x2000caa7
 80054f4:	2000caa8 	.word	0x2000caa8

080054f8 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <HAL_SD_RxCpltCallback+0x1c>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000caa6 	.word	0x2000caa6

08005518 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <HAL_SD_TxCpltCallback+0x1c>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000caa7 	.word	0x2000caa7

08005538 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005540:	f107 031c 	add.w	r3, r7, #28
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	609a      	str	r2, [r3, #8]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a77      	ldr	r2, [pc, #476]	; (8005734 <HAL_SD_MspInit+0x1fc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	f040 80e8 	bne.w	800572c <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	4b75      	ldr	r3, [pc, #468]	; (8005738 <HAL_SD_MspInit+0x200>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	4a74      	ldr	r2, [pc, #464]	; (8005738 <HAL_SD_MspInit+0x200>)
 8005566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800556a:	6313      	str	r3, [r2, #48]	; 0x30
 800556c:	4b72      	ldr	r3, [pc, #456]	; (8005738 <HAL_SD_MspInit+0x200>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	4b6e      	ldr	r3, [pc, #440]	; (8005738 <HAL_SD_MspInit+0x200>)
 800557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005580:	4a6d      	ldr	r2, [pc, #436]	; (8005738 <HAL_SD_MspInit+0x200>)
 8005582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005586:	6453      	str	r3, [r2, #68]	; 0x44
 8005588:	4b6b      	ldr	r3, [pc, #428]	; (8005738 <HAL_SD_MspInit+0x200>)
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	4b67      	ldr	r3, [pc, #412]	; (8005738 <HAL_SD_MspInit+0x200>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	4a66      	ldr	r2, [pc, #408]	; (8005738 <HAL_SD_MspInit+0x200>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6313      	str	r3, [r2, #48]	; 0x30
 80055a4:	4b64      	ldr	r3, [pc, #400]	; (8005738 <HAL_SD_MspInit+0x200>)
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	4b60      	ldr	r3, [pc, #384]	; (8005738 <HAL_SD_MspInit+0x200>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	4a5f      	ldr	r2, [pc, #380]	; (8005738 <HAL_SD_MspInit+0x200>)
 80055ba:	f043 0302 	orr.w	r3, r3, #2
 80055be:	6313      	str	r3, [r2, #48]	; 0x30
 80055c0:	4b5d      	ldr	r3, [pc, #372]	; (8005738 <HAL_SD_MspInit+0x200>)
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80055cc:	f44f 7350 	mov.w	r3, #832	; 0x340
 80055d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d2:	2302      	movs	r3, #2
 80055d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055da:	2301      	movs	r3, #1
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80055de:	230c      	movs	r3, #12
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e2:	f107 031c 	add.w	r3, r7, #28
 80055e6:	4619      	mov	r1, r3
 80055e8:	4854      	ldr	r0, [pc, #336]	; (800573c <HAL_SD_MspInit+0x204>)
 80055ea:	f007 fea9 	bl	800d340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80055ee:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80055f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	2302      	movs	r3, #2
 80055f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055fc:	2301      	movs	r3, #1
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005600:	230c      	movs	r3, #12
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005604:	f107 031c 	add.w	r3, r7, #28
 8005608:	4619      	mov	r1, r3
 800560a:	484d      	ldr	r0, [pc, #308]	; (8005740 <HAL_SD_MspInit+0x208>)
 800560c:	f007 fe98 	bl	800d340 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8005610:	4b4c      	ldr	r3, [pc, #304]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005612:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <HAL_SD_MspInit+0x210>)
 8005614:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005616:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800561c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800561e:	4b49      	ldr	r3, [pc, #292]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005624:	4b47      	ldr	r3, [pc, #284]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005626:	2200      	movs	r2, #0
 8005628:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800562a:	4b46      	ldr	r3, [pc, #280]	; (8005744 <HAL_SD_MspInit+0x20c>)
 800562c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005630:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005632:	4b44      	ldr	r3, [pc, #272]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005638:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800563a:	4b42      	ldr	r3, [pc, #264]	; (8005744 <HAL_SD_MspInit+0x20c>)
 800563c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005640:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005642:	4b40      	ldr	r3, [pc, #256]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005644:	2220      	movs	r2, #32
 8005646:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005648:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <HAL_SD_MspInit+0x20c>)
 800564a:	2200      	movs	r2, #0
 800564c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800564e:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005650:	2204      	movs	r2, #4
 8005652:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005654:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005656:	2203      	movs	r2, #3
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800565a:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <HAL_SD_MspInit+0x20c>)
 800565c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005660:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005662:	4b38      	ldr	r3, [pc, #224]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005664:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800566a:	4836      	ldr	r0, [pc, #216]	; (8005744 <HAL_SD_MspInit+0x20c>)
 800566c:	f007 fa6c 	bl	800cb48 <HAL_DMA_Init>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8005676:	f7fb fe45 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a31      	ldr	r2, [pc, #196]	; (8005744 <HAL_SD_MspInit+0x20c>)
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
 8005680:	4a30      	ldr	r2, [pc, #192]	; (8005744 <HAL_SD_MspInit+0x20c>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8005686:	4b31      	ldr	r3, [pc, #196]	; (800574c <HAL_SD_MspInit+0x214>)
 8005688:	4a31      	ldr	r2, [pc, #196]	; (8005750 <HAL_SD_MspInit+0x218>)
 800568a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800568c:	4b2f      	ldr	r3, [pc, #188]	; (800574c <HAL_SD_MspInit+0x214>)
 800568e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005692:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005694:	4b2d      	ldr	r3, [pc, #180]	; (800574c <HAL_SD_MspInit+0x214>)
 8005696:	2240      	movs	r2, #64	; 0x40
 8005698:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800569a:	4b2c      	ldr	r3, [pc, #176]	; (800574c <HAL_SD_MspInit+0x214>)
 800569c:	2200      	movs	r2, #0
 800569e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_SD_MspInit+0x214>)
 80056a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056a8:	4b28      	ldr	r3, [pc, #160]	; (800574c <HAL_SD_MspInit+0x214>)
 80056aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056b0:	4b26      	ldr	r3, [pc, #152]	; (800574c <HAL_SD_MspInit+0x214>)
 80056b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80056b8:	4b24      	ldr	r3, [pc, #144]	; (800574c <HAL_SD_MspInit+0x214>)
 80056ba:	2220      	movs	r2, #32
 80056bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <HAL_SD_MspInit+0x214>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_SD_MspInit+0x214>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056ca:	4b20      	ldr	r3, [pc, #128]	; (800574c <HAL_SD_MspInit+0x214>)
 80056cc:	2203      	movs	r2, #3
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_SD_MspInit+0x214>)
 80056d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056d8:	4b1c      	ldr	r3, [pc, #112]	; (800574c <HAL_SD_MspInit+0x214>)
 80056da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80056e0:	481a      	ldr	r0, [pc, #104]	; (800574c <HAL_SD_MspInit+0x214>)
 80056e2:	f007 fa31 	bl	800cb48 <HAL_DMA_Init>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 80056ec:	f7fb fe0a 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_SD_MspInit+0x214>)
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80056f6:	4a15      	ldr	r2, [pc, #84]	; (800574c <HAL_SD_MspInit+0x214>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 80056fc:	2200      	movs	r2, #0
 80056fe:	2103      	movs	r1, #3
 8005700:	2031      	movs	r0, #49	; 0x31
 8005702:	f007 f9dc 	bl	800cabe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005706:	2031      	movs	r0, #49	; 0x31
 8005708:	f007 f9f5 	bl	800caf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 800570c:	2200      	movs	r2, #0
 800570e:	2103      	movs	r1, #3
 8005710:	203b      	movs	r0, #59	; 0x3b
 8005712:	f007 f9d4 	bl	800cabe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005716:	203b      	movs	r0, #59	; 0x3b
 8005718:	f007 f9ed 	bl	800caf6 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 800571c:	2200      	movs	r2, #0
 800571e:	2103      	movs	r1, #3
 8005720:	2045      	movs	r0, #69	; 0x45
 8005722:	f007 f9cc 	bl	800cabe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005726:	2045      	movs	r0, #69	; 0x45
 8005728:	f007 f9e5 	bl	800caf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800572c:	bf00      	nop
 800572e:	3730      	adds	r7, #48	; 0x30
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40023800 	.word	0x40023800
 800573c:	40020000 	.word	0x40020000
 8005740:	40020400 	.word	0x40020400
 8005744:	2000cb2c 	.word	0x2000cb2c
 8005748:	400264a0 	.word	0x400264a0
 800574c:	2000cb8c 	.word	0x2000cb8c
 8005750:	40026458 	.word	0x40026458

08005754 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800575a:	af00      	add	r7, sp, #0
 800575c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005760:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005764:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 800576c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005770:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 8094 	bne.w	80058a6 <cliSd+0x152>
 800577e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005782:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4979      	ldr	r1, [pc, #484]	; (8005970 <cliSd+0x21c>)
 800578c:	2000      	movs	r0, #0
 800578e:	4798      	blx	r3
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8087 	beq.w	80058a6 <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8005798:	4b76      	ldr	r3, [pc, #472]	; (8005974 <cliSd+0x220>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4619      	mov	r1, r3
 800579e:	4876      	ldr	r0, [pc, #472]	; (8005978 <cliSd+0x224>)
 80057a0:	f7fc feb0 	bl	8002504 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 80057a4:	4b75      	ldr	r3, [pc, #468]	; (800597c <cliSd+0x228>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4875      	ldr	r0, [pc, #468]	; (8005980 <cliSd+0x22c>)
 80057ac:	f7fc feaa 	bl	8002504 <cliPrintf>

    if (is_init == true)
 80057b0:	4b70      	ldr	r3, [pc, #448]	; (8005974 <cliSd+0x220>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d073      	beq.n	80058a0 <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 80057b8:	f107 030c 	add.w	r3, r7, #12
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fd77 	bl	80052b0 <sdGetInfo>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d06b      	beq.n	80058a0 <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 80057c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4619      	mov	r1, r3
 80057d4:	486b      	ldr	r0, [pc, #428]	; (8005984 <cliSd+0x230>)
 80057d6:	f7fc fe95 	bl	8002504 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 80057da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057de:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4619      	mov	r1, r3
 80057e6:	4868      	ldr	r0, [pc, #416]	; (8005988 <cliSd+0x234>)
 80057e8:	f7fc fe8c 	bl	8002504 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 80057ec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057f0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4864      	ldr	r0, [pc, #400]	; (800598c <cliSd+0x238>)
 80057fa:	f7fc fe83 	bl	8002504 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80057fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005802:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4619      	mov	r1, r3
 800580a:	4861      	ldr	r0, [pc, #388]	; (8005990 <cliSd+0x23c>)
 800580c:	f7fc fe7a 	bl	8002504 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8005810:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005814:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	4619      	mov	r1, r3
 800581c:	485d      	ldr	r0, [pc, #372]	; (8005994 <cliSd+0x240>)
 800581e:	f7fc fe71 	bl	8002504 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8005822:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005826:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	4619      	mov	r1, r3
 800582e:	485a      	ldr	r0, [pc, #360]	; (8005998 <cliSd+0x244>)
 8005830:	f7fc fe68 	bl	8002504 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8005834:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005838:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	4619      	mov	r1, r3
 8005840:	4856      	ldr	r0, [pc, #344]	; (800599c <cliSd+0x248>)
 8005842:	f7fc fe5f 	bl	8002504 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8005846:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800584a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4619      	mov	r1, r3
 8005852:	4853      	ldr	r0, [pc, #332]	; (80059a0 <cliSd+0x24c>)
 8005854:	f7fc fe56 	bl	8002504 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8005858:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800585c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005860:	6a18      	ldr	r0, [r3, #32]
 8005862:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005866:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	0a9c      	lsrs	r4, r3, #10
 800586e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005872:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	0a99      	lsrs	r1, r3, #10
 8005882:	4b48      	ldr	r3, [pc, #288]	; (80059a4 <cliSd+0x250>)
 8005884:	fba3 2301 	umull	r2, r3, r3, r1
 8005888:	08da      	lsrs	r2, r3, #3
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	1aca      	subs	r2, r1, r3
 8005894:	4613      	mov	r3, r2
 8005896:	4622      	mov	r2, r4
 8005898:	4601      	mov	r1, r0
 800589a:	4843      	ldr	r0, [pc, #268]	; (80059a8 <cliSd+0x254>)
 800589c:	f7fc fe32 	bl	8002504 <cliPrintf>
      }
    }
    ret = true;
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80058a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058aa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d146      	bne.n	8005944 <cliSd+0x1f0>
 80058b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	493a      	ldr	r1, [pc, #232]	; (80059ac <cliSd+0x258>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	4798      	blx	r3
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d03a      	beq.n	8005944 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 80058ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2001      	movs	r0, #1
 80058dc:	4798      	blx	r3
 80058de:	4603      	mov	r3, r0
 80058e0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 80058e4:	f107 010c 	add.w	r1, r7, #12
 80058e8:	2364      	movs	r3, #100	; 0x64
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80058f0:	f7ff fd6c 	bl	80053cc <sdReadBlocks>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01e      	beq.n	8005938 <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005900:	e015      	b.n	800592e <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8005902:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005906:	0099      	lsls	r1, r3, #2
 8005908:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800590c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005910:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	460a      	mov	r2, r1
 800591a:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800591e:	4824      	ldr	r0, [pc, #144]	; (80059b0 <cliSd+0x25c>)
 8005920:	f7fc fdf0 	bl	8002504 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8005924:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005928:	3301      	adds	r3, #1
 800592a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800592e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005932:	2b7f      	cmp	r3, #127	; 0x7f
 8005934:	dde5      	ble.n	8005902 <cliSd+0x1ae>
 8005936:	e002      	b.n	800593e <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8005938:	481e      	ldr	r0, [pc, #120]	; (80059b4 <cliSd+0x260>)
 800593a:	f7fc fde3 	bl	8002504 <cliPrintf>
    }

    ret = true;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8005944:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005948:	f083 0301 	eor.w	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 8005952:	4819      	ldr	r0, [pc, #100]	; (80059b8 <cliSd+0x264>)
 8005954:	f7fc fdd6 	bl	8002504 <cliPrintf>

    if (is_init == true)
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <cliSd+0x220>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 8005960:	4816      	ldr	r0, [pc, #88]	; (80059bc <cliSd+0x268>)
 8005962:	f7fc fdcf 	bl	8002504 <cliPrintf>
    }
  }
}
 8005966:	bf00      	nop
 8005968:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800596c:	46bd      	mov	sp, r7
 800596e:	bd90      	pop	{r4, r7, pc}
 8005970:	08017668 	.word	0x08017668
 8005974:	2000caa4 	.word	0x2000caa4
 8005978:	08017670 	.word	0x08017670
 800597c:	2000caa5 	.word	0x2000caa5
 8005980:	08017684 	.word	0x08017684
 8005984:	08017698 	.word	0x08017698
 8005988:	080176b8 	.word	0x080176b8
 800598c:	080176d8 	.word	0x080176d8
 8005990:	080176f8 	.word	0x080176f8
 8005994:	08017718 	.word	0x08017718
 8005998:	08017738 	.word	0x08017738
 800599c:	08017758 	.word	0x08017758
 80059a0:	08017778 	.word	0x08017778
 80059a4:	cccccccd 	.word	0xcccccccd
 80059a8:	08017798 	.word	0x08017798
 80059ac:	080177c4 	.word	0x080177c4
 80059b0:	080177cc 	.word	0x080177cc
 80059b4:	080177e0 	.word	0x080177e0
 80059b8:	080177f0 	.word	0x080177f0
 80059bc:	080177fc 	.word	0x080177fc

080059c0 <DWT_Delay_us>:
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <DWT_Delay_us+0x40>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80059ce:	f008 fb85 	bl	800e0dc <HAL_RCC_GetHCLKFreq>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <DWT_Delay_us+0x44>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	0c9b      	lsrs	r3, r3, #18
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80059e4:	bf00      	nop
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <DWT_Delay_us+0x40>)
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3f8      	bcc.n	80059e6 <DWT_Delay_us+0x26>
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e0001000 	.word	0xe0001000
 8005a04:	431bde83 	.word	0x431bde83

08005a08 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08c      	sub	sp, #48	; 0x30
 8005a0c:	af00      	add	r7, sp, #0
	bool ret = false;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a14:	f107 031c 	add.w	r3, r7, #28
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a22:	f107 0314 	add.w	r3, r7, #20
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	605a      	str	r2, [r3, #4]
 8005a34:	609a      	str	r2, [r3, #8]
 8005a36:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 8005a38:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <sonarInit+0xec>)
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <sonarInit+0xf0>)
 8005a3c:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8005a3e:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <sonarInit+0xec>)
 8005a40:	225f      	movs	r2, #95	; 0x5f
 8005a42:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a44:	4b2b      	ldr	r3, [pc, #172]	; (8005af4 <sonarInit+0xec>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 8005a4a:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <sonarInit+0xec>)
 8005a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a50:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a52:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <sonarInit+0xec>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a58:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <sonarInit+0xec>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a5e:	4825      	ldr	r0, [pc, #148]	; (8005af4 <sonarInit+0xec>)
 8005a60:	f00a fba0 	bl	80101a4 <HAL_TIM_Base_Init>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <sonarInit+0x66>
	  {
	    Error_Handler();
 8005a6a:	f7fb fc4b 	bl	8001304 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a72:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a74:	f107 031c 	add.w	r3, r7, #28
 8005a78:	4619      	mov	r1, r3
 8005a7a:	481e      	ldr	r0, [pc, #120]	; (8005af4 <sonarInit+0xec>)
 8005a7c:	f00a fdfe 	bl	801067c <HAL_TIM_ConfigClockSource>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <sonarInit+0x82>
	  {
	    Error_Handler();
 8005a86:	f7fb fc3d 	bl	8001304 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005a8a:	481a      	ldr	r0, [pc, #104]	; (8005af4 <sonarInit+0xec>)
 8005a8c:	f00a fbb5 	bl	80101fa <HAL_TIM_IC_Init>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <sonarInit+0x92>
	  {
	    Error_Handler();
 8005a96:	f7fb fc35 	bl	8001304 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005aa2:	f107 0314 	add.w	r3, r7, #20
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4812      	ldr	r0, [pc, #72]	; (8005af4 <sonarInit+0xec>)
 8005aaa:	f00b f931 	bl	8010d10 <HAL_TIMEx_MasterConfigSynchronization>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <sonarInit+0xb0>
	  {
	    Error_Handler();
 8005ab4:	f7fb fc26 	bl	8001304 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005abc:	2301      	movs	r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	220c      	movs	r2, #12
 8005acc:	4619      	mov	r1, r3
 8005ace:	4809      	ldr	r0, [pc, #36]	; (8005af4 <sonarInit+0xec>)
 8005ad0:	f00a fd38 	bl	8010544 <HAL_TIM_IC_ConfigChannel>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <sonarInit+0xd6>
	  {
	    Error_Handler();
 8005ada:	f7fb fc13 	bl	8001304 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8005ade:	210c      	movs	r1, #12
 8005ae0:	4804      	ldr	r0, [pc, #16]	; (8005af4 <sonarInit+0xec>)
 8005ae2:	f00a fbbf 	bl	8010264 <HAL_TIM_IC_Start_IT>

	return ret;
 8005ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3730      	adds	r7, #48	; 0x30
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	2000cbec 	.word	0x2000cbec
 8005af8:	40000400 	.word	0x40000400
 8005afc:	00000000 	.word	0x00000000

08005b00 <Sonar_measure>:

bool Sonar_measure(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
	bool ret = false;
 8005b06:	2300      	movs	r3, #0
 8005b08:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8005b0a:	4b5d      	ldr	r3, [pc, #372]	; (8005c80 <Sonar_measure+0x180>)
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <Sonar_measure+0x18>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d022      	beq.n	8005b5c <Sonar_measure+0x5c>
 8005b16:	e0a9      	b.n	8005c6c <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8005b18:	2103      	movs	r1, #3
 8005b1a:	2007      	movs	r0, #7
 8005b1c:	f7fd fce2 	bl	80034e4 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8005b20:	2101      	movs	r1, #1
 8005b22:	2007      	movs	r0, #7
 8005b24:	f7fd fd50 	bl	80035c8 <gpioPinWrite>
			DWT_Delay_us(5);
 8005b28:	2005      	movs	r0, #5
 8005b2a:	f7ff ff49 	bl	80059c0 <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8005b2e:	2100      	movs	r1, #0
 8005b30:	2007      	movs	r0, #7
 8005b32:	f7fd fd49 	bl	80035c8 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8005b36:	2106      	movs	r1, #6
 8005b38:	2007      	movs	r0, #7
 8005b3a:	f7fd fcd3 	bl	80034e4 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8005b3e:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <Sonar_measure+0x180>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8005b44:	4b4e      	ldr	r3, [pc, #312]	; (8005c80 <Sonar_measure+0x180>)
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <Sonar_measure+0x180>)
 8005b4e:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8005b50:	f7fb fb69 	bl	8001226 <millis>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4a4b      	ldr	r2, [pc, #300]	; (8005c84 <Sonar_measure+0x184>)
 8005b58:	6013      	str	r3, [r2, #0]
			break;
 8005b5a:	e087      	b.n	8005c6c <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8005b5c:	4b48      	ldr	r3, [pc, #288]	; (8005c80 <Sonar_measure+0x180>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f083 0301 	eor.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d06a      	beq.n	8005c40 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8005b6a:	4b45      	ldr	r3, [pc, #276]	; (8005c80 <Sonar_measure+0x180>)
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	4b44      	ldr	r3, [pc, #272]	; (8005c80 <Sonar_measure+0x180>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d907      	bls.n	8005b86 <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8005b76:	4b42      	ldr	r3, [pc, #264]	; (8005c80 <Sonar_measure+0x180>)
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <Sonar_measure+0x180>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <Sonar_measure+0x180>)
 8005b82:	60d3      	str	r3, [r2, #12]
 8005b84:	e00e      	b.n	8005ba4 <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8005b86:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <Sonar_measure+0x180>)
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <Sonar_measure+0x180>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d208      	bcs.n	8005ba4 <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8005b92:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <Sonar_measure+0x180>)
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	4b3a      	ldr	r3, [pc, #232]	; (8005c80 <Sonar_measure+0x180>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005ba0:	4a37      	ldr	r2, [pc, #220]	; (8005c80 <Sonar_measure+0x180>)
 8005ba2:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8005ba4:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <Sonar_measure+0x180>)
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fa fcbf 	bl	8000534 <__aeabi_ui2d>
 8005bb6:	a330      	add	r3, pc, #192	; (adr r3, 8005c78 <Sonar_measure+0x178>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fd34 	bl	8000628 <__aeabi_dmul>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	f7fb f806 	bl	8000bd8 <__aeabi_d2uiz>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4a2c      	ldr	r2, [pc, #176]	; (8005c80 <Sonar_measure+0x180>)
 8005bd0:	6153      	str	r3, [r2, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8005bd2:	4b2d      	ldr	r3, [pc, #180]	; (8005c88 <Sonar_measure+0x188>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	3301      	adds	r3, #1
 8005bda:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8005bdc:	79bb      	ldrb	r3, [r7, #6]
 8005bde:	2b0b      	cmp	r3, #11
 8005be0:	d101      	bne.n	8005be6 <Sonar_measure+0xe6>
 8005be2:	2300      	movs	r3, #0
 8005be4:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <Sonar_measure+0x180>)
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <Sonar_measure+0x188>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	b211      	sxth	r1, r2
 8005bf0:	4a26      	ldr	r2, [pc, #152]	; (8005c8c <Sonar_measure+0x18c>)
 8005bf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <Sonar_measure+0x188>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a24      	ldr	r2, [pc, #144]	; (8005c8c <Sonar_measure+0x18c>)
 8005bfc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b23      	ldr	r3, [pc, #140]	; (8005c90 <Sonar_measure+0x190>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4413      	add	r3, r2
 8005c08:	4a21      	ldr	r2, [pc, #132]	; (8005c90 <Sonar_measure+0x190>)
 8005c0a:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8005c0c:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <Sonar_measure+0x190>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	79ba      	ldrb	r2, [r7, #6]
 8005c12:	491e      	ldr	r1, [pc, #120]	; (8005c8c <Sonar_measure+0x18c>)
 8005c14:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <Sonar_measure+0x190>)
 8005c1c:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8005c1e:	79bb      	ldrb	r3, [r7, #6]
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <Sonar_measure+0x188>)
 8005c22:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8005c24:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <Sonar_measure+0x190>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <Sonar_measure+0x194>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	08db      	lsrs	r3, r3, #3
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <Sonar_measure+0x180>)
 8005c32:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <Sonar_measure+0x180>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	705a      	strb	r2, [r3, #1]
				ret = true;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 8005c3e:	e014      	b.n	8005c6a <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8005c40:	f7fb faf1 	bl	8001226 <millis>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <Sonar_measure+0x184>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b18      	cmp	r3, #24
 8005c4e:	d90c      	bls.n	8005c6a <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <Sonar_measure+0x180>)
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <Sonar_measure+0x180>)
 8005c58:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <Sonar_measure+0x180>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <Sonar_measure+0x180>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	705a      	strb	r2, [r3, #1]
					ret = false;
 8005c66:	2300      	movs	r3, #0
 8005c68:	71fb      	strb	r3, [r7, #7]
			break;
 8005c6a:	bf00      	nop
	}
	return ret;
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	75f6fd22 	.word	0x75f6fd22
 8005c7c:	3f919ce0 	.word	0x3f919ce0
 8005c80:	2000cc2c 	.word	0x2000cc2c
 8005c84:	2000cc48 	.word	0x2000cc48
 8005c88:	2000cc4c 	.word	0x2000cc4c
 8005c8c:	2000cc50 	.word	0x2000cc50
 8005c90:	2000cc68 	.word	0x2000cc68
 8005c94:	cccccccd 	.word	0xcccccccd

08005c98 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <HAL_TIM_Base_MspInit+0x94>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d133      	bne.n	8005d22 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <HAL_TIM_Base_MspInit+0x98>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_TIM_Base_MspInit+0x98>)
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cca:	4b19      	ldr	r3, [pc, #100]	; (8005d30 <HAL_TIM_Base_MspInit+0x98>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <HAL_TIM_Base_MspInit+0x98>)
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <HAL_TIM_Base_MspInit+0x98>)
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <HAL_TIM_Base_MspInit+0x98>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d02:	2302      	movs	r3, #2
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d06:	f107 0314 	add.w	r3, r7, #20
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4809      	ldr	r0, [pc, #36]	; (8005d34 <HAL_TIM_Base_MspInit+0x9c>)
 8005d0e:	f007 fb17 	bl	800d340 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005d12:	2200      	movs	r2, #0
 8005d14:	2101      	movs	r1, #1
 8005d16:	201d      	movs	r0, #29
 8005d18:	f006 fed1 	bl	800cabe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d1c:	201d      	movs	r0, #29
 8005d1e:	f006 feea 	bl	800caf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005d22:	bf00      	nop
 8005d24:	3728      	adds	r7, #40	; 0x28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40023800 	.word	0x40023800
 8005d34:	40020400 	.word	0x40020400

08005d38 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7f1b      	ldrb	r3, [r3, #28]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d129      	bne.n	8005d9c <HAL_TIM_IC_CaptureCallback+0x64>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d124      	bne.n	8005d9c <HAL_TIM_IC_CaptureCallback+0x64>
 8005d52:	4b16      	ldr	r3, [pc, #88]	; (8005dac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d020      	beq.n	8005d9c <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	4a0e      	ldr	r2, [pc, #56]	; (8005dac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d72:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d7e:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8005d80:	e00c      	b.n	8005d9c <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	4a09      	ldr	r2, [pc, #36]	; (8005dac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d88:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4a06      	ldr	r2, [pc, #24]	; (8005da8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d94:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40000400 	.word	0x40000400
 8005dac:	2000cc2c 	.word	0x2000cc2c
 8005db0:	40020400 	.word	0x40020400

08005db4 <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
  bool ret = true;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	e03d      	b.n	8005e40 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8005dc4:	4923      	ldr	r1, [pc, #140]	; (8005e54 <spiInit+0xa0>)
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8005dd6:	491f      	ldr	r1, [pc, #124]	; (8005e54 <spiInit+0xa0>)
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3301      	adds	r3, #1
 8005de6:	2201      	movs	r2, #1
 8005de8:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8005dea:	491a      	ldr	r1, [pc, #104]	; (8005e54 <spiInit+0xa0>)
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	3302      	adds	r3, #2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8005dfe:	4915      	ldr	r1, [pc, #84]	; (8005e54 <spiInit+0xa0>)
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8005e12:	4910      	ldr	r1, [pc, #64]	; (8005e54 <spiInit+0xa0>)
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3310      	adds	r3, #16
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8005e26:	490b      	ldr	r1, [pc, #44]	; (8005e54 <spiInit+0xa0>)
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	330c      	adds	r3, #12
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	ddbe      	ble.n	8005dc4 <spiInit+0x10>
  }

  return ret;
 8005e46:	78fb      	ldrb	r3, [r7, #3]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	2000cc6c 	.word	0x2000cc6c

08005e58 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8005e66:	79fa      	ldrb	r2, [r7, #7]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <spiBegin+0xa8>)
 8005e72:	4413      	add	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <spiBegin+0x28>
 8005e7c:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 8005e7e:	e03a      	b.n	8005ef6 <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <spiBegin+0xac>)
 8005e84:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <spiBegin+0xb0>)
 8005e8a:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <spiBegin+0xac>)
 8005e8e:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <spiBegin+0xb4>)
 8005e90:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e92:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <spiBegin+0xac>)
 8005e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e98:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e9a:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <spiBegin+0xac>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ea0:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <spiBegin+0xac>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ea6:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <spiBegin+0xac>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005eac:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <spiBegin+0xac>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 8005eb2:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <spiBegin+0xac>)
 8005eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb8:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <spiBegin+0xac>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <spiBegin+0xac>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <spiBegin+0xac>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <spiBegin+0xac>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <spiBegin+0xac>)
 8005ed4:	220a      	movs	r2, #10
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8005ed8:	480a      	ldr	r0, [pc, #40]	; (8005f04 <spiBegin+0xac>)
 8005eda:	f009 fc9f 	bl	800f81c <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8005ede:	4809      	ldr	r0, [pc, #36]	; (8005f04 <spiBegin+0xac>)
 8005ee0:	f009 fc38 	bl	800f754 <HAL_SPI_Init>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <spiBegin+0x9c>
        p_spi->is_open = true;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	bf00      	nop
  }

  return ret;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	2000cc6c 	.word	0x2000cc6c
 8005f04:	2000cc80 	.word	0x2000cc80
 8005f08:	2000ccd8 	.word	0x2000ccd8
 8005f0c:	40013000 	.word	0x40013000

08005f10 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	460a      	mov	r2, r1
 8005f1a:	71fb      	strb	r3, [r7, #7]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005f20:	79fa      	ldrb	r2, [r7, #7]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <spiSetDataMode+0xc4>)
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f083 0301 	eor.w	r3, r3, #1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d146      	bne.n	8005fcc <spiSetDataMode+0xbc>


  switch( dataMode )
 8005f3e:	79bb      	ldrb	r3, [r7, #6]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d844      	bhi.n	8005fce <spiSetDataMode+0xbe>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <spiSetDataMode+0x3c>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f95 	.word	0x08005f95
 8005f58:	08005fb1 	.word	0x08005fb1
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2200      	movs	r2, #0
 8005f62:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f009 fbef 	bl	800f754 <HAL_SPI_Init>
      break;
 8005f76:	e02a      	b.n	8005fce <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2201      	movs	r2, #1
 8005f86:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f009 fbe1 	bl	800f754 <HAL_SPI_Init>
      break;
 8005f92:	e01c      	b.n	8005fce <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f009 fbd3 	bl	800f754 <HAL_SPI_Init>
      break;
 8005fae:	e00e      	b.n	8005fce <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f009 fbc5 	bl	800f754 <HAL_SPI_Init>
      break;
 8005fca:	e000      	b.n	8005fce <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8005fcc:	bf00      	nop
  }
}
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	2000cc6c 	.word	0x2000cc6c

08005fd8 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	71fb      	strb	r3, [r7, #7]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005fe8:	79fa      	ldrb	r2, [r7, #7]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a10      	ldr	r2, [pc, #64]	; (8006034 <spiSetBitWidth+0x5c>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f083 0301 	eor.w	r3, r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d111      	bne.n	800602a <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2200      	movs	r2, #0
 800600c:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 800600e:	79bb      	ldrb	r3, [r7, #6]
 8006010:	2b10      	cmp	r3, #16
 8006012:	d104      	bne.n	800601e <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800601c:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f009 fb96 	bl	800f754 <HAL_SPI_Init>
 8006028:	e000      	b.n	800602c <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 800602a:	bf00      	nop
}
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	2000cc6c 	.word	0x2000cc6c

08006038 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af02      	add	r7, sp, #8
 800603e:	4603      	mov	r3, r0
 8006040:	460a      	mov	r2, r1
 8006042:	71fb      	strb	r3, [r7, #7]
 8006044:	4613      	mov	r3, r2
 8006046:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 8006048:	79fa      	ldrb	r2, [r7, #7]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a0d      	ldr	r2, [pc, #52]	; (8006088 <spiTransfer8+0x50>)
 8006054:	4413      	add	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f083 0301 	eor.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <spiTransfer8+0x32>
 8006066:	2300      	movs	r3, #0
 8006068:	e00a      	b.n	8006080 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6898      	ldr	r0, [r3, #8]
 800606e:	f107 020b 	add.w	r2, r7, #11
 8006072:	1db9      	adds	r1, r7, #6
 8006074:	230a      	movs	r3, #10
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2301      	movs	r3, #1
 800607a:	f009 fbf7 	bl	800f86c <HAL_SPI_TransmitReceive>

  return ret;
 800607e:	7afb      	ldrb	r3, [r7, #11]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	2000cc6c 	.word	0x2000cc6c

0800608c <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <spiDmaTxStart+0x4c>)
 80060a6:	4413      	add	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10b      	bne.n	80060d0 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2200      	movs	r2, #0
 80060bc:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	b292      	uxth	r2, r2
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f009 fd71 	bl	800fbb0 <HAL_SPI_Transmit_DMA>
 80060ce:	e000      	b.n	80060d2 <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 80060d0:	bf00      	nop
}
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	2000cc6c 	.word	0x2000cc6c

080060dc <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff ffc8 	bl	800608c <spiDmaTxStart>

  t_time = millis();
 80060fc:	f7fb f893 	bl	8001226 <millis>
 8006100:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <spiDmaTxTransfer+0x30>
 8006108:	2301      	movs	r3, #1
 800610a:	e013      	b.n	8006134 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f814 	bl	800613c <spiDmaTxIsDone>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 800611a:	f7fb f884 	bl	8001226 <millis>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d2f0      	bcs.n	800610c <spiDmaTxTransfer+0x30>
    {
      ret = false;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
      break;
 800612e:	e000      	b.n	8006132 <spiDmaTxTransfer+0x56>
      break;
 8006130:	bf00      	nop
    }
  }

  return ret;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8006146:	79fa      	ldrb	r2, [r7, #7]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a09      	ldr	r2, [pc, #36]	; (8006178 <spiDmaTxIsDone+0x3c>)
 8006152:	4413      	add	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f083 0301 	eor.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <spiDmaTxIsDone+0x2c>
 8006164:	2301      	movs	r3, #1
 8006166:	e001      	b.n	800616c <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	785b      	ldrb	r3, [r3, #1]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	2000cc6c 	.word	0x2000cc6c

0800617c <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <spiAttachTxInterrupt+0x40>)
 8006194:	4413      	add	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f083 0301 	eor.w	r3, r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	e000      	b.n	80061b0 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 80061ae:	bf00      	nop
}
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	2000cc6c 	.word	0x2000cc6c

080061c0 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <HAL_SPI_ErrorCallback+0x28>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d102      	bne.n	80061dc <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 80061d6:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <HAL_SPI_ErrorCallback+0x28>)
 80061d8:	2201      	movs	r2, #1
 80061da:	709a      	strb	r2, [r3, #2]
  }
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	2000cc6c 	.word	0x2000cc6c

080061ec <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <HAL_SPI_TxCpltCallback+0x38>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d10b      	bne.n	800621a <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_SPI_TxCpltCallback+0x38>)
 8006204:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4798      	blx	r3
    }
  }
}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	2000cc6c 	.word	0x2000cc6c

08006228 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a40      	ldr	r2, [pc, #256]	; (8006348 <HAL_SPI_MspInit+0x120>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d179      	bne.n	800633e <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_SPI_MspInit+0x124>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	4a3e      	ldr	r2, [pc, #248]	; (800634c <HAL_SPI_MspInit+0x124>)
 8006254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006258:	6313      	str	r3, [r2, #48]	; 0x30
 800625a:	4b3c      	ldr	r3, [pc, #240]	; (800634c <HAL_SPI_MspInit+0x124>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <HAL_SPI_MspInit+0x124>)
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	4a37      	ldr	r2, [pc, #220]	; (800634c <HAL_SPI_MspInit+0x124>)
 8006270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006274:	6453      	str	r3, [r2, #68]	; 0x44
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_SPI_MspInit+0x124>)
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	4b31      	ldr	r3, [pc, #196]	; (800634c <HAL_SPI_MspInit+0x124>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4a30      	ldr	r2, [pc, #192]	; (800634c <HAL_SPI_MspInit+0x124>)
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	6313      	str	r3, [r2, #48]	; 0x30
 8006292:	4b2e      	ldr	r3, [pc, #184]	; (800634c <HAL_SPI_MspInit+0x124>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800629e:	23a0      	movs	r3, #160	; 0xa0
 80062a0:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a2:	2302      	movs	r3, #2
 80062a4:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062aa:	2303      	movs	r3, #3
 80062ac:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062ae:	2305      	movs	r3, #5
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b2:	f107 0314 	add.w	r3, r7, #20
 80062b6:	4619      	mov	r1, r3
 80062b8:	4825      	ldr	r0, [pc, #148]	; (8006350 <HAL_SPI_MspInit+0x128>)
 80062ba:	f007 f841 	bl	800d340 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 80062be:	4b25      	ldr	r3, [pc, #148]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062c0:	4a25      	ldr	r2, [pc, #148]	; (8006358 <HAL_SPI_MspInit+0x130>)
 80062c2:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80062c4:	4b23      	ldr	r3, [pc, #140]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80062ca:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062cc:	4b21      	ldr	r3, [pc, #132]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062ce:	2240      	movs	r2, #64	; 0x40
 80062d0:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062d2:	4b20      	ldr	r3, [pc, #128]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062de:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80062e0:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062e6:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062ee:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062fc:	4b15      	ldr	r3, [pc, #84]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 80062fe:	2200      	movs	r2, #0
 8006300:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006302:	4814      	ldr	r0, [pc, #80]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 8006304:	f006 fc20 	bl	800cb48 <HAL_DMA_Init>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 800630e:	f7fa fff9 	bl	8001304 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a0f      	ldr	r2, [pc, #60]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 8006316:	649a      	str	r2, [r3, #72]	; 0x48
 8006318:	4a0e      	ldr	r2, [pc, #56]	; (8006354 <HAL_SPI_MspInit+0x12c>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800631e:	2200      	movs	r2, #0
 8006320:	2100      	movs	r1, #0
 8006322:	2023      	movs	r0, #35	; 0x23
 8006324:	f006 fbcb 	bl	800cabe <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006328:	2023      	movs	r0, #35	; 0x23
 800632a:	f006 fbe4 	bl	800caf6 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800632e:	2200      	movs	r2, #0
 8006330:	2105      	movs	r1, #5
 8006332:	2044      	movs	r0, #68	; 0x44
 8006334:	f006 fbc3 	bl	800cabe <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8006338:	2044      	movs	r0, #68	; 0x44
 800633a:	f006 fbdc 	bl	800caf6 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800633e:	bf00      	nop
 8006340:	3728      	adds	r7, #40	; 0x28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40013000 	.word	0x40013000
 800634c:	40023800 	.word	0x40023800
 8006350:	40020000 	.word	0x40020000
 8006354:	2000ccd8 	.word	0x2000ccd8
 8006358:	40026488 	.word	0x40026488

0800635c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a0c      	ldr	r2, [pc, #48]	; (800639c <HAL_SPI_MspDeInit+0x40>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d111      	bne.n	8006392 <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <HAL_SPI_MspDeInit+0x44>)
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	4a0b      	ldr	r2, [pc, #44]	; (80063a0 <HAL_SPI_MspDeInit+0x44>)
 8006374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006378:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 800637a:	21a0      	movs	r1, #160	; 0xa0
 800637c:	4809      	ldr	r0, [pc, #36]	; (80063a4 <HAL_SPI_MspDeInit+0x48>)
 800637e:	f007 f963 	bl	800d648 <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006386:	4618      	mov	r0, r3
 8006388:	f006 fc8c 	bl	800cca4 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800638c:	2023      	movs	r0, #35	; 0x23
 800638e:	f006 fbc0 	bl	800cb12 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40013000 	.word	0x40013000
 80063a0:	40023800 	.word	0x40023800
 80063a4:	40020000 	.word	0x40020000

080063a8 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
	bool ret = true;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <tdsInit+0xd0>)
 80063b4:	2203      	movs	r2, #3
 80063b6:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 80063b8:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <tdsInit+0xd0>)
 80063ba:	4a30      	ldr	r2, [pc, #192]	; (800647c <tdsInit+0xd4>)
 80063bc:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 80063be:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <tdsInit+0xd0>)
 80063c0:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80063c4:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 80063c6:	4b2c      	ldr	r3, [pc, #176]	; (8006478 <tdsInit+0xd0>)
 80063c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80063cc:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 80063da:	4b29      	ldr	r3, [pc, #164]	; (8006480 <tdsInit+0xd8>)
 80063dc:	4a29      	ldr	r2, [pc, #164]	; (8006484 <tdsInit+0xdc>)
 80063de:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80063e0:	4b27      	ldr	r3, [pc, #156]	; (8006480 <tdsInit+0xd8>)
 80063e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063e6:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <tdsInit+0xd8>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <tdsInit+0xd8>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80063f4:	4b22      	ldr	r3, [pc, #136]	; (8006480 <tdsInit+0xd8>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80063fa:	4b21      	ldr	r3, [pc, #132]	; (8006480 <tdsInit+0xd8>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <tdsInit+0xd8>)
 8006404:	2200      	movs	r2, #0
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <tdsInit+0xd8>)
 800640a:	4a1f      	ldr	r2, [pc, #124]	; (8006488 <tdsInit+0xe0>)
 800640c:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800640e:	4b1c      	ldr	r3, [pc, #112]	; (8006480 <tdsInit+0xd8>)
 8006410:	2200      	movs	r2, #0
 8006412:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <tdsInit+0xd8>)
 8006416:	2201      	movs	r2, #1
 8006418:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800641a:	4b19      	ldr	r3, [pc, #100]	; (8006480 <tdsInit+0xd8>)
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006422:	4b17      	ldr	r3, [pc, #92]	; (8006480 <tdsInit+0xd8>)
 8006424:	2201      	movs	r2, #1
 8006426:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006428:	4815      	ldr	r0, [pc, #84]	; (8006480 <tdsInit+0xd8>)
 800642a:	f005 fd0f 	bl	800be4c <HAL_ADC_Init>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <tdsInit+0x90>
	  {
	    Error_Handler();
 8006434:	f7fa ff66 	bl	8001304 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8006438:	2301      	movs	r3, #1
 800643a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800643c:	2301      	movs	r3, #1
 800643e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006440:	2307      	movs	r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	4619      	mov	r1, r3
 8006448:	480d      	ldr	r0, [pc, #52]	; (8006480 <tdsInit+0xd8>)
 800644a:	f005 ff7f 	bl	800c34c <HAL_ADC_ConfigChannel>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <tdsInit+0xb0>
	  {
	    Error_Handler();
 8006454:	f7fa ff56 	bl	8001304 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 8006458:	2201      	movs	r2, #1
 800645a:	490c      	ldr	r1, [pc, #48]	; (800648c <tdsInit+0xe4>)
 800645c:	4808      	ldr	r0, [pc, #32]	; (8006480 <tdsInit+0xd8>)
 800645e:	f005 fe79 	bl	800c154 <HAL_ADC_Start_DMA>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <tdsInit+0xc4>
	{
		Error_Handler();
 8006468:	f7fa ff4c 	bl	8001304 <Error_Handler>
	}

	return ret;
 800646c:	7dfb      	ldrb	r3, [r7, #23]

}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	2000cde0 	.word	0x2000cde0
 800647c:	41c80000 	.word	0x41c80000
 8006480:	2000cd38 	.word	0x2000cd38
 8006484:	40012000 	.word	0x40012000
 8006488:	0f000001 	.word	0x0f000001
 800648c:	2000cdf0 	.word	0x2000cdf0

08006490 <tds_measure>:
bool tds_measure(void)
{
 8006490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
	bool ret = true;
 8006498:	2301      	movs	r3, #1
 800649a:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 800649c:	4b8e      	ldr	r3, [pc, #568]	; (80066d8 <tds_measure+0x248>)
 800649e:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fa f851 	bl	8000578 <__aeabi_f2d>
 80064d6:	a378      	add	r3, pc, #480	; (adr r3, 80066b8 <tds_measure+0x228>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7fa f8a4 	bl	8000628 <__aeabi_dmul>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4614      	mov	r4, r2
 80064e6:	461d      	mov	r5, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fa f843 	bl	8000578 <__aeabi_f2d>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa f895 	bl	8000628 <__aeabi_dmul>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4614      	mov	r4, r2
 8006504:	461d      	mov	r5, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa f834 	bl	8000578 <__aeabi_f2d>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	f7fa f886 	bl	8000628 <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4614      	mov	r4, r2
 8006522:	461d      	mov	r5, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	4618      	mov	r0, r3
 800652a:	f7fa f825 	bl	8000578 <__aeabi_f2d>
 800652e:	a364      	add	r3, pc, #400	; (adr r3, 80066c0 <tds_measure+0x230>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7fa f878 	bl	8000628 <__aeabi_dmul>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4690      	mov	r8, r2
 800653e:	4699      	mov	r9, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fa f817 	bl	8000578 <__aeabi_f2d>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7fa f869 	bl	8000628 <__aeabi_dmul>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7f9 feab 	bl	80002b8 <__aeabi_dsub>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4614      	mov	r4, r2
 8006568:	461d      	mov	r5, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	4618      	mov	r0, r3
 8006570:	f7fa f802 	bl	8000578 <__aeabi_f2d>
 8006574:	a354      	add	r3, pc, #336	; (adr r3, 80066c8 <tds_measure+0x238>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7fa f855 	bl	8000628 <__aeabi_dmul>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4620      	mov	r0, r4
 8006584:	4629      	mov	r1, r5
 8006586:	f7f9 fe99 	bl	80002bc <__adddf3>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4614      	mov	r4, r2
 8006590:	461d      	mov	r5, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	f7f9 ffee 	bl	8000578 <__aeabi_f2d>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4620      	mov	r0, r4
 80065a2:	4629      	mov	r1, r5
 80065a4:	f7fa f840 	bl	8000628 <__aeabi_dmul>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	f7fa fb32 	bl	8000c18 <__aeabi_d2f>
 80065b4:	4602      	mov	r2, r0
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7f9 ffda 	bl	8000578 <__aeabi_f2d>
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7f9 ffd3 	bl	8000578 <__aeabi_f2d>
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	4b41      	ldr	r3, [pc, #260]	; (80066dc <tds_measure+0x24c>)
 80065d8:	f7f9 fe6e 	bl	80002b8 <__aeabi_dsub>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	a33a      	add	r3, pc, #232	; (adr r3, 80066d0 <tds_measure+0x240>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fa f81d 	bl	8000628 <__aeabi_dmul>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <tds_measure+0x250>)
 80065fc:	f7f9 fe5e 	bl	80002bc <__adddf3>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	f7fa f938 	bl	800087c <__aeabi_ddiv>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4610      	mov	r0, r2
 8006612:	4619      	mov	r1, r3
 8006614:	f7fa fb00 	bl	8000c18 <__aeabi_d2f>
 8006618:	4602      	mov	r2, r0
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	edd3 7a07 	vldr	s15, [r3, #28]
 8006624:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8006632:	4b2c      	ldr	r3, [pc, #176]	; (80066e4 <tds_measure+0x254>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	3301      	adds	r3, #1
 800663a:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	2b0b      	cmp	r3, #11
 8006640:	d101      	bne.n	8006646 <tds_measure+0x1b6>
 8006642:	2300      	movs	r3, #0
 8006644:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	edd3 7a08 	vldr	s15, [r3, #32]
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <tds_measure+0x254>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006654:	ee17 2a90 	vmov	r2, s15
 8006658:	b211      	sxth	r1, r2
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <tds_measure+0x258>)
 800665c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 8006660:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <tds_measure+0x254>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a20      	ldr	r2, [pc, #128]	; (80066e8 <tds_measure+0x258>)
 8006666:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800666a:	461a      	mov	r2, r3
 800666c:	4b1f      	ldr	r3, [pc, #124]	; (80066ec <tds_measure+0x25c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4413      	add	r3, r2
 8006672:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <tds_measure+0x25c>)
 8006674:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <tds_measure+0x25c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	79fa      	ldrb	r2, [r7, #7]
 800667c:	491a      	ldr	r1, [pc, #104]	; (80066e8 <tds_measure+0x258>)
 800667e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	4a19      	ldr	r2, [pc, #100]	; (80066ec <tds_measure+0x25c>)
 8006686:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <tds_measure+0x254>)
 800668c:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 800668e:	4b17      	ldr	r3, [pc, #92]	; (80066ec <tds_measure+0x25c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <tds_measure+0x260>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	08db      	lsrs	r3, r3, #3
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 80066a8:	79bb      	ldrb	r3, [r7, #6]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80066b4:	f3af 8000 	nop.w
 80066b8:	a3d70a3d 	.word	0xa3d70a3d
 80066bc:	4060ad70 	.word	0x4060ad70
 80066c0:	1eb851ec 	.word	0x1eb851ec
 80066c4:	406ffb85 	.word	0x406ffb85
 80066c8:	b851eb85 	.word	0xb851eb85
 80066cc:	408acb1e 	.word	0x408acb1e
 80066d0:	47ae147b 	.word	0x47ae147b
 80066d4:	3f947ae1 	.word	0x3f947ae1
 80066d8:	2000cde0 	.word	0x2000cde0
 80066dc:	40390000 	.word	0x40390000
 80066e0:	3ff00000 	.word	0x3ff00000
 80066e4:	2000ce08 	.word	0x2000ce08
 80066e8:	2000ce0c 	.word	0x2000ce0c
 80066ec:	2000ce24 	.word	0x2000ce24
 80066f0:	cccccccd 	.word	0xcccccccd

080066f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fc:	f107 0314 	add.w	r3, r7, #20
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3e      	ldr	r2, [pc, #248]	; (800680c <HAL_ADC_MspInit+0x118>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d175      	bne.n	8006802 <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	4b3d      	ldr	r3, [pc, #244]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	4a3c      	ldr	r2, [pc, #240]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006724:	6313      	str	r3, [r2, #48]	; 0x30
 8006726:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	4b36      	ldr	r3, [pc, #216]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	4a35      	ldr	r2, [pc, #212]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 800673c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006740:	6453      	str	r3, [r2, #68]	; 0x44
 8006742:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	4a2e      	ldr	r2, [pc, #184]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6313      	str	r3, [r2, #48]	; 0x30
 800675e:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <HAL_ADC_MspInit+0x11c>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800676a:	2302      	movs	r3, #2
 800676c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800676e:	2303      	movs	r3, #3
 8006770:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	4619      	mov	r1, r3
 800677c:	4825      	ldr	r0, [pc, #148]	; (8006814 <HAL_ADC_MspInit+0x120>)
 800677e:	f006 fddf 	bl	800d340 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8006782:	4b25      	ldr	r3, [pc, #148]	; (8006818 <HAL_ADC_MspInit+0x124>)
 8006784:	4a25      	ldr	r2, [pc, #148]	; (800681c <HAL_ADC_MspInit+0x128>)
 8006786:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006788:	4b23      	ldr	r3, [pc, #140]	; (8006818 <HAL_ADC_MspInit+0x124>)
 800678a:	2200      	movs	r2, #0
 800678c:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800678e:	4b22      	ldr	r3, [pc, #136]	; (8006818 <HAL_ADC_MspInit+0x124>)
 8006790:	2200      	movs	r2, #0
 8006792:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006794:	4b20      	ldr	r3, [pc, #128]	; (8006818 <HAL_ADC_MspInit+0x124>)
 8006796:	2200      	movs	r2, #0
 8006798:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800679a:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <HAL_ADC_MspInit+0x124>)
 800679c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067a0:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067a8:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067b0:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80067b2:	4b19      	ldr	r3, [pc, #100]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b8:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80067ba:	4b17      	ldr	r3, [pc, #92]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067c0:	4b15      	ldr	r3, [pc, #84]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80067c6:	4814      	ldr	r0, [pc, #80]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067c8:	f006 f9be 	bl	800cb48 <HAL_DMA_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 80067d2:	f7fa fd97 	bl	8001304 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a0f      	ldr	r2, [pc, #60]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
 80067dc:	4a0e      	ldr	r2, [pc, #56]	; (8006818 <HAL_ADC_MspInit+0x124>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	2106      	movs	r1, #6
 80067e6:	2012      	movs	r0, #18
 80067e8:	f006 f969 	bl	800cabe <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80067ec:	2012      	movs	r0, #18
 80067ee:	f006 f982 	bl	800caf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2106      	movs	r1, #6
 80067f6:	2038      	movs	r0, #56	; 0x38
 80067f8:	f006 f961 	bl	800cabe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80067fc:	2038      	movs	r0, #56	; 0x38
 80067fe:	f006 f97a 	bl	800caf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006802:	bf00      	nop
 8006804:	3728      	adds	r7, #40	; 0x28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40012000 	.word	0x40012000
 8006810:	40023800 	.word	0x40023800
 8006814:	40020000 	.word	0x40020000
 8006818:	2000cd80 	.word	0x2000cd80
 800681c:	40026410 	.word	0x40026410

08006820 <uartInit>:
#endif



bool uartInit(void)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	e007      	b.n	800683c <uartInit+0x1c>
  {
    is_open[i] = false;
 800682c:	4a08      	ldr	r2, [pc, #32]	; (8006850 <uartInit+0x30>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3301      	adds	r3, #1
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	ddf4      	ble.n	800682c <uartInit+0xc>
  }


  return true;
 8006842:	2301      	movs	r3, #1
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	2000ce28 	.word	0x2000ce28

08006854 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8006860:	2300      	movs	r3, #0
 8006862:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <uartOpen+0x1c>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d078      	beq.n	8006960 <uartOpen+0x10c>
 800686e:	e0ef      	b.n	8006a50 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8006870:	4b7a      	ldr	r3, [pc, #488]	; (8006a5c <uartOpen+0x208>)
 8006872:	4a7b      	ldr	r2, [pc, #492]	; (8006a60 <uartOpen+0x20c>)
 8006874:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 8006876:	4a79      	ldr	r2, [pc, #484]	; (8006a5c <uartOpen+0x208>)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 800687c:	4b77      	ldr	r3, [pc, #476]	; (8006a5c <uartOpen+0x208>)
 800687e:	2200      	movs	r2, #0
 8006880:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8006882:	4b76      	ldr	r3, [pc, #472]	; (8006a5c <uartOpen+0x208>)
 8006884:	2200      	movs	r2, #0
 8006886:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8006888:	4b74      	ldr	r3, [pc, #464]	; (8006a5c <uartOpen+0x208>)
 800688a:	2200      	movs	r2, #0
 800688c:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 800688e:	4b73      	ldr	r3, [pc, #460]	; (8006a5c <uartOpen+0x208>)
 8006890:	220c      	movs	r2, #12
 8006892:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8006894:	4b71      	ldr	r3, [pc, #452]	; (8006a5c <uartOpen+0x208>)
 8006896:	2200      	movs	r2, #0
 8006898:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800689a:	4b70      	ldr	r3, [pc, #448]	; (8006a5c <uartOpen+0x208>)
 800689c:	2200      	movs	r2, #0
 800689e:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 80068a0:	486e      	ldr	r0, [pc, #440]	; (8006a5c <uartOpen+0x208>)
 80068a2:	f00a fb04 	bl	8010eae <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	4a6e      	ldr	r2, [pc, #440]	; (8006a64 <uartOpen+0x210>)
 80068ac:	4413      	add	r3, r2
 80068ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b2:	496d      	ldr	r1, [pc, #436]	; (8006a68 <uartOpen+0x214>)
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fa fef0 	bl	800169a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	4b6b      	ldr	r3, [pc, #428]	; (8006a6c <uartOpen+0x218>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	4a6a      	ldr	r2, [pc, #424]	; (8006a6c <uartOpen+0x218>)
 80068c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068c8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ca:	4b68      	ldr	r3, [pc, #416]	; (8006a6c <uartOpen+0x218>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80068d6:	2200      	movs	r2, #0
 80068d8:	2104      	movs	r1, #4
 80068da:	203a      	movs	r0, #58	; 0x3a
 80068dc:	f006 f8ef 	bl	800cabe <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80068e0:	203a      	movs	r0, #58	; 0x3a
 80068e2:	f006 f908 	bl	800caf6 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 80068e6:	2200      	movs	r2, #0
 80068e8:	2104      	movs	r1, #4
 80068ea:	2046      	movs	r0, #70	; 0x46
 80068ec:	f006 f8e7 	bl	800cabe <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80068f0:	2046      	movs	r0, #70	; 0x46
 80068f2:	f006 f900 	bl	800caf6 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 80068f6:	4859      	ldr	r0, [pc, #356]	; (8006a5c <uartOpen+0x208>)
 80068f8:	f00a fa8c 	bl	8010e14 <HAL_UART_Init>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <uartOpen+0xb4>
        {
          ret = false;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8006906:	e0a3      	b.n	8006a50 <uartOpen+0x1fc>
          ret = true;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	4a58      	ldr	r2, [pc, #352]	; (8006a70 <uartOpen+0x21c>)
 8006910:	2101      	movs	r1, #1
 8006912:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006918:	4953      	ldr	r1, [pc, #332]	; (8006a68 <uartOpen+0x214>)
 800691a:	4850      	ldr	r0, [pc, #320]	; (8006a5c <uartOpen+0x208>)
 800691c:	f00a fb8c 	bl	8011038 <HAL_UART_Receive_DMA>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <uartOpen+0xd6>
            ret = false;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	4a4d      	ldr	r2, [pc, #308]	; (8006a64 <uartOpen+0x210>)
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	4413      	add	r3, r2
 8006932:	3308      	adds	r3, #8
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	4b4f      	ldr	r3, [pc, #316]	; (8006a74 <uartOpen+0x220>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	1a8a      	subs	r2, r1, r2
 8006940:	4948      	ldr	r1, [pc, #288]	; (8006a64 <uartOpen+0x210>)
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	440b      	add	r3, r1
 8006946:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8006948:	79fa      	ldrb	r2, [r7, #7]
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	4945      	ldr	r1, [pc, #276]	; (8006a64 <uartOpen+0x210>)
 800694e:	0112      	lsls	r2, r2, #4
 8006950:	440a      	add	r2, r1
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	4943      	ldr	r1, [pc, #268]	; (8006a64 <uartOpen+0x210>)
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	440b      	add	r3, r1
 800695a:	3304      	adds	r3, #4
 800695c:	601a      	str	r2, [r3, #0]
      break;
 800695e:	e077      	b.n	8006a50 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8006960:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <uartOpen+0x208>)
 8006962:	4a3f      	ldr	r2, [pc, #252]	; (8006a60 <uartOpen+0x20c>)
 8006964:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8006966:	4a3d      	ldr	r2, [pc, #244]	; (8006a5c <uartOpen+0x208>)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800696c:	4b3b      	ldr	r3, [pc, #236]	; (8006a5c <uartOpen+0x208>)
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8006972:	4b3a      	ldr	r3, [pc, #232]	; (8006a5c <uartOpen+0x208>)
 8006974:	2200      	movs	r2, #0
 8006976:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8006978:	4b38      	ldr	r3, [pc, #224]	; (8006a5c <uartOpen+0x208>)
 800697a:	2200      	movs	r2, #0
 800697c:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800697e:	4b37      	ldr	r3, [pc, #220]	; (8006a5c <uartOpen+0x208>)
 8006980:	220c      	movs	r2, #12
 8006982:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <uartOpen+0x208>)
 8006986:	2200      	movs	r2, #0
 8006988:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800698a:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <uartOpen+0x208>)
 800698c:	2200      	movs	r2, #0
 800698e:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8006990:	4832      	ldr	r0, [pc, #200]	; (8006a5c <uartOpen+0x208>)
 8006992:	f00a fa8c 	bl	8010eae <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	4a32      	ldr	r2, [pc, #200]	; (8006a64 <uartOpen+0x210>)
 800699c:	4413      	add	r3, r2
 800699e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069a2:	4931      	ldr	r1, [pc, #196]	; (8006a68 <uartOpen+0x214>)
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fa fe78 	bl	800169a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <uartOpen+0x218>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	4a2e      	ldr	r2, [pc, #184]	; (8006a6c <uartOpen+0x218>)
 80069b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069b8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ba:	4b2c      	ldr	r3, [pc, #176]	; (8006a6c <uartOpen+0x218>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80069c6:	2200      	movs	r2, #0
 80069c8:	2104      	movs	r1, #4
 80069ca:	203a      	movs	r0, #58	; 0x3a
 80069cc:	f006 f877 	bl	800cabe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80069d0:	203a      	movs	r0, #58	; 0x3a
 80069d2:	f006 f890 	bl	800caf6 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 80069d6:	2200      	movs	r2, #0
 80069d8:	2104      	movs	r1, #4
 80069da:	2046      	movs	r0, #70	; 0x46
 80069dc:	f006 f86f 	bl	800cabe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80069e0:	2046      	movs	r0, #70	; 0x46
 80069e2:	f006 f888 	bl	800caf6 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 80069e6:	481d      	ldr	r0, [pc, #116]	; (8006a5c <uartOpen+0x208>)
 80069e8:	f00a fa14 	bl	8010e14 <HAL_UART_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <uartOpen+0x1a4>
      {
        ret = false;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 80069f6:	e02a      	b.n	8006a4e <uartOpen+0x1fa>
        ret = true;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <uartOpen+0x21c>)
 8006a00:	2101      	movs	r1, #1
 8006a02:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a08:	4917      	ldr	r1, [pc, #92]	; (8006a68 <uartOpen+0x214>)
 8006a0a:	4814      	ldr	r0, [pc, #80]	; (8006a5c <uartOpen+0x208>)
 8006a0c:	f00a fb14 	bl	8011038 <HAL_UART_Receive_DMA>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <uartOpen+0x1c6>
          ret = false;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <uartOpen+0x210>)
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	4413      	add	r3, r2
 8006a22:	3308      	adds	r3, #8
 8006a24:	6819      	ldr	r1, [r3, #0]
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <uartOpen+0x220>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	1a8a      	subs	r2, r1, r2
 8006a30:	490c      	ldr	r1, [pc, #48]	; (8006a64 <uartOpen+0x210>)
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	440b      	add	r3, r1
 8006a36:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8006a38:	79fa      	ldrb	r2, [r7, #7]
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	4909      	ldr	r1, [pc, #36]	; (8006a64 <uartOpen+0x210>)
 8006a3e:	0112      	lsls	r2, r2, #4
 8006a40:	440a      	add	r2, r1
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	4907      	ldr	r1, [pc, #28]	; (8006a64 <uartOpen+0x210>)
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	440b      	add	r3, r1
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	601a      	str	r2, [r3, #0]
      break;
 8006a4e:	bf00      	nop
  }

  return ret;
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	2000cf3c 	.word	0x2000cf3c
 8006a60:	40011000 	.word	0x40011000
 8006a64:	2000ce2c 	.word	0x2000ce2c
 8006a68:	2000ce3c 	.word	0x2000ce3c
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	2000ce28 	.word	0x2000ce28
 8006a74:	2000cfdc 	.word	0x2000cfdc

08006a78 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <uartAvailable+0x1a>
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d018      	beq.n	8006ac2 <uartAvailable+0x4a>
 8006a90:	e02f      	b.n	8006af2 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <uartAvailable+0x84>)
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	4413      	add	r3, r2
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	6819      	ldr	r1, [r3, #0]
 8006a9e:	4b18      	ldr	r3, [pc, #96]	; (8006b00 <uartAvailable+0x88>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	1a8a      	subs	r2, r1, r2
 8006aa8:	4914      	ldr	r1, [pc, #80]	; (8006afc <uartAvailable+0x84>)
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	440b      	add	r3, r1
 8006aae:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	4a11      	ldr	r2, [pc, #68]	; (8006afc <uartAvailable+0x84>)
 8006ab6:	4413      	add	r3, r2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fa fe46 	bl	800174a <qbufferAvailable>
 8006abe:	60f8      	str	r0, [r7, #12]
      break;
 8006ac0:	e017      	b.n	8006af2 <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <uartAvailable+0x84>)
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	4413      	add	r3, r2
 8006aca:	3308      	adds	r3, #8
 8006acc:	6819      	ldr	r1, [r3, #0]
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <uartAvailable+0x88>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	1a8a      	subs	r2, r1, r2
 8006ad8:	4908      	ldr	r1, [pc, #32]	; (8006afc <uartAvailable+0x84>)
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	440b      	add	r3, r1
 8006ade:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	4a05      	ldr	r2, [pc, #20]	; (8006afc <uartAvailable+0x84>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fa fe2e 	bl	800174a <qbufferAvailable>
 8006aee:	60f8      	str	r0, [r7, #12]
      break;
 8006af0:	bf00      	nop
  }

  return ret;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	2000ce2c 	.word	0x2000ce2c
 8006b00:	2000cfdc 	.word	0x2000cfdc

08006b04 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <uartRead+0x1a>
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d008      	beq.n	8006b2e <uartRead+0x2a>
 8006b1c:	e00f      	b.n	8006b3e <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8006b1e:	f107 030f 	add.w	r3, r7, #15
 8006b22:	2201      	movs	r2, #1
 8006b24:	4619      	mov	r1, r3
 8006b26:	4808      	ldr	r0, [pc, #32]	; (8006b48 <uartRead+0x44>)
 8006b28:	f7fa fdd2 	bl	80016d0 <qbufferRead>
      break;
 8006b2c:	e007      	b.n	8006b3e <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006b2e:	f107 030f 	add.w	r3, r7, #15
 8006b32:	2201      	movs	r2, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <uartRead+0x48>)
 8006b38:	f7fa fdca 	bl	80016d0 <qbufferRead>
      break;
 8006b3c:	bf00      	nop
  }

  return ret;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	2000ce2c 	.word	0x2000ce2c
 8006b4c:	2000ce3c 	.word	0x2000ce3c

08006b50 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <uartWrite+0x1e>
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d00f      	beq.n	8006b8c <uartWrite+0x3c>
 8006b6c:	e020      	b.n	8006bb0 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	2364      	movs	r3, #100	; 0x64
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	4811      	ldr	r0, [pc, #68]	; (8006bbc <uartWrite+0x6c>)
 8006b78:	f00a f9c5 	bl	8010f06 <HAL_UART_Transmit>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8006b80:	7cfb      	ldrb	r3, [r7, #19]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d111      	bne.n	8006baa <uartWrite+0x5a>
        {
          ret = length;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	617b      	str	r3, [r7, #20]
        }
      break;
 8006b8a:	e00e      	b.n	8006baa <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	2364      	movs	r3, #100	; 0x64
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	4809      	ldr	r0, [pc, #36]	; (8006bbc <uartWrite+0x6c>)
 8006b96:	f00a f9b6 	bl	8010f06 <HAL_UART_Transmit>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8006b9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <uartWrite+0x5e>
      {
        ret = length;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	617b      	str	r3, [r7, #20]
      }
      break;
 8006ba8:	e001      	b.n	8006bae <uartWrite+0x5e>
      break;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <uartWrite+0x60>
      break;
 8006bae:	bf00      	nop
  }

  return ret;
 8006bb0:	697b      	ldr	r3, [r7, #20]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	2000cf3c 	.word	0x2000cf3c

08006bc0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006bc0:	b40e      	push	{r1, r2, r3}
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b0c7      	sub	sp, #284	; 0x11c
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	4602      	mov	r2, r0
 8006bca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bce:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006bd2:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8006bd4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006bd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006be0:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8006be2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006be6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bea:	f107 0010 	add.w	r0, r7, #16
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bf8:	f00d fd04 	bl	8014604 <vsniprintf>
 8006bfc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006c00:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006c04:	f107 0110 	add.w	r1, r7, #16
 8006c08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c0c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff ff9c 	bl	8006b50 <uartWrite>
 8006c18:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8006c1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006c26:	46bd      	mov	sp, r7
 8006c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c2c:	b003      	add	sp, #12
 8006c2e:	4770      	bx	lr

08006c30 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	; 0x28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c60:	f107 0314 	add.w	r3, r7, #20
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	605a      	str	r2, [r3, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
 8006c6c:	60da      	str	r2, [r3, #12]
 8006c6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a5b      	ldr	r2, [pc, #364]	; (8006de4 <HAL_UART_MspInit+0x18c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	f040 80b0 	bne.w	8006ddc <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	4b59      	ldr	r3, [pc, #356]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c84:	4a58      	ldr	r2, [pc, #352]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006c86:	f043 0310 	orr.w	r3, r3, #16
 8006c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8006c8c:	4b56      	ldr	r3, [pc, #344]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	4b52      	ldr	r3, [pc, #328]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	4a51      	ldr	r2, [pc, #324]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca8:	4b4f      	ldr	r3, [pc, #316]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	4b4b      	ldr	r3, [pc, #300]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	4a4a      	ldr	r2, [pc, #296]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006cbe:	f043 0302 	orr.w	r3, r3, #2
 8006cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc4:	4b48      	ldr	r3, [pc, #288]	; (8006de8 <HAL_UART_MspInit+0x190>)
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ce6:	f107 0314 	add.w	r3, r7, #20
 8006cea:	4619      	mov	r1, r3
 8006cec:	483f      	ldr	r0, [pc, #252]	; (8006dec <HAL_UART_MspInit+0x194>)
 8006cee:	f006 fb27 	bl	800d340 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d02:	2307      	movs	r3, #7
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d06:	f107 0314 	add.w	r3, r7, #20
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4838      	ldr	r0, [pc, #224]	; (8006df0 <HAL_UART_MspInit+0x198>)
 8006d0e:	f006 fb17 	bl	800d340 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006d12:	4b38      	ldr	r3, [pc, #224]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d14:	4a38      	ldr	r2, [pc, #224]	; (8006df8 <HAL_UART_MspInit+0x1a0>)
 8006d16:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006d18:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d1e:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d20:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d22:	2240      	movs	r2, #64	; 0x40
 8006d24:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d26:	4b33      	ldr	r3, [pc, #204]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d2c:	4b31      	ldr	r3, [pc, #196]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d32:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d34:	4b2f      	ldr	r3, [pc, #188]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d3a:	4b2e      	ldr	r3, [pc, #184]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006d40:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d46:	4b2b      	ldr	r3, [pc, #172]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006d52:	4828      	ldr	r0, [pc, #160]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d54:	f005 fef8 	bl	800cb48 <HAL_DMA_Init>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8006d5e:	f7fa fad1 	bl	8001304 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
 8006d68:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <HAL_UART_MspInit+0x19c>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006d6e:	4b23      	ldr	r3, [pc, #140]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d70:	4a23      	ldr	r2, [pc, #140]	; (8006e00 <HAL_UART_MspInit+0x1a8>)
 8006d72:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006d74:	4b21      	ldr	r3, [pc, #132]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d7a:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d7c:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d82:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d88:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d8e:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d96:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006d9c:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006da2:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006daa:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006db0:	4812      	ldr	r0, [pc, #72]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006db2:	f005 fec9 	bl	800cb48 <HAL_DMA_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8006dbc:	f7fa faa2 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8006dc6:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <HAL_UART_MspInit+0x1a4>)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	2025      	movs	r0, #37	; 0x25
 8006dd2:	f005 fe74 	bl	800cabe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006dd6:	2025      	movs	r0, #37	; 0x25
 8006dd8:	f005 fe8d 	bl	800caf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006ddc:	bf00      	nop
 8006dde:	3728      	adds	r7, #40	; 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40011000 	.word	0x40011000
 8006de8:	40023800 	.word	0x40023800
 8006dec:	40020000 	.word	0x40020000
 8006df0:	40020400 	.word	0x40020400
 8006df4:	2000cf7c 	.word	0x2000cf7c
 8006df8:	400264b8 	.word	0x400264b8
 8006dfc:	2000cfdc 	.word	0x2000cfdc
 8006e00:	40026440 	.word	0x40026440

08006e04 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <HAL_UART_MspDeInit+0x54>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d11b      	bne.n	8006e4e <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006e16:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <HAL_UART_MspDeInit+0x58>)
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <HAL_UART_MspDeInit+0x58>)
 8006e1c:	f023 0310 	bic.w	r3, r3, #16
 8006e20:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e26:	480e      	ldr	r0, [pc, #56]	; (8006e60 <HAL_UART_MspDeInit+0x5c>)
 8006e28:	f006 fc0e 	bl	800d648 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006e2c:	2140      	movs	r1, #64	; 0x40
 8006e2e:	480d      	ldr	r0, [pc, #52]	; (8006e64 <HAL_UART_MspDeInit+0x60>)
 8006e30:	f006 fc0a 	bl	800d648 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f005 ff33 	bl	800cca4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	4618      	mov	r0, r3
 8006e44:	f005 ff2e 	bl	800cca4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006e48:	2025      	movs	r0, #37	; 0x25
 8006e4a:	f005 fe62 	bl	800cb12 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40020000 	.word	0x40020000
 8006e64:	40020400 	.word	0x40020400

08006e68 <draw_fan_status>:
#include "ui_common.h"
#include "image.h"
#include "lcd.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b089      	sub	sp, #36	; 0x24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	4603      	mov	r3, r0
 8006e70:	80fb      	strh	r3, [r7, #6]
 8006e72:	460b      	mov	r3, r1
 8006e74:	80bb      	strh	r3, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 127;
 8006e7a:	237f      	movs	r3, #127	; 0x7f
 8006e7c:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b7e      	cmp	r3, #126	; 0x7e
 8006e82:	d910      	bls.n	8006ea6 <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d006      	beq.n	8006e98 <draw_fan_status+0x30>
 8006e8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <draw_fan_status+0x8c>)
 8006e8c:	f107 030c 	add.w	r3, r7, #12
 8006e90:	6810      	ldr	r0, [r2, #0]
 8006e92:	6851      	ldr	r1, [r2, #4]
 8006e94:	c303      	stmia	r3!, {r0, r1}
 8006e96:	e020      	b.n	8006eda <draw_fan_status+0x72>
 8006e98:	4a17      	ldr	r2, [pc, #92]	; (8006ef8 <draw_fan_status+0x90>)
 8006e9a:	f107 030c 	add.w	r3, r7, #12
 8006e9e:	6810      	ldr	r0, [r2, #0]
 8006ea0:	6851      	ldr	r1, [r2, #4]
 8006ea2:	c303      	stmia	r3!, {r0, r1}
 8006ea4:	e019      	b.n	8006eda <draw_fan_status+0x72>
  }
  else if (fanSpeed > 0)
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <draw_fan_status+0x66>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d006      	beq.n	8006ec0 <draw_fan_status+0x58>
 8006eb2:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <draw_fan_status+0x8c>)
 8006eb4:	f107 030c 	add.w	r3, r7, #12
 8006eb8:	6810      	ldr	r0, [r2, #0]
 8006eba:	6851      	ldr	r1, [r2, #4]
 8006ebc:	c303      	stmia	r3!, {r0, r1}
 8006ebe:	e00c      	b.n	8006eda <draw_fan_status+0x72>
 8006ec0:	4a0d      	ldr	r2, [pc, #52]	; (8006ef8 <draw_fan_status+0x90>)
 8006ec2:	f107 030c 	add.w	r3, r7, #12
 8006ec6:	6810      	ldr	r0, [r2, #0]
 8006ec8:	6851      	ldr	r1, [r2, #4]
 8006eca:	c303      	stmia	r3!, {r0, r1}
 8006ecc:	e005      	b.n	8006eda <draw_fan_status+0x72>
  }
  else
  {
    image = Fan0_32x32x4;
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <draw_fan_status+0x90>)
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	6810      	ldr	r0, [r2, #0]
 8006ed6:	6851      	ldr	r1, [r2, #4]
 8006ed8:	c303      	stmia	r3!, {r0, r1}
  }
  lcdDrawBufferImage(x, y, image.width, image.height, image.data);
 8006eda:	8a3a      	ldrh	r2, [r7, #16]
 8006edc:	8a7c      	ldrh	r4, [r7, #18]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88b9      	ldrh	r1, [r7, #4]
 8006ee2:	88f8      	ldrh	r0, [r7, #6]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	f7fd f916 	bl	8004118 <lcdDrawBufferImage>
  //lcdRequestDraw();
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd90      	pop	{r4, r7, pc}
 8006ef4:	08021148 	.word	0x08021148
 8006ef8:	08021140 	.word	0x08021140

08006efc <get_blink>:

bool get_blink() {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 8006f02:	f7fa f990 	bl	8001226 <millis>
 8006f06:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <get_blink+0x44>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db0a      	blt.n	8006f2a <get_blink+0x2e>
    blink ^= 0xFF;
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <get_blink+0x48>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <get_blink+0x48>)
 8006f1e:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 8006f26:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <get_blink+0x44>)
 8006f28:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 8006f2a:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <get_blink+0x48>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	2000d03c 	.word	0x2000d03c
 8006f44:	2000d040 	.word	0x2000d040

08006f48 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006f52:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8006f58:	f7fe f988 	bl	800526c <sdIsInit>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f083 0301 	eor.w	r3, r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8006f68:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006f76:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8006f78:	f7fe f984 	bl	8005284 <sdIsDetected>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f083 0301 	eor.w	r3, r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f043 0302 	orr.w	r3, r3, #2
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006f96:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8006f98:	200a      	movs	r0, #10
 8006f9a:	f7fe f9f7 	bl	800538c <sdIsReady>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f083 0301 	eor.w	r3, r3, #1
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006fb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <SD_CheckStatus+0x80>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b2db      	uxtb	r3, r3
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	2000009c 	.word	0x2000009c

08006fcc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	; (800700c <SD_initialize+0x40>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8006fdc:	f7fe f946 	bl	800526c <sdIsInit>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f083 0301 	eor.w	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <SD_initialize+0x40>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <SD_initialize+0x40>)
 8006ffa:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <SD_initialize+0x40>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b2db      	uxtb	r3, r3
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	2000009c 	.word	0x2000009c

08007010 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff ff93 	bl	8006f48 <SD_CheckStatus>
 8007022:	4603      	mov	r3, r0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8007040:	f242 7310 	movw	r3, #10000	; 0x2710
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fe f9bf 	bl	80053cc <sdReadBlocks>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <SD_read+0x2c>
  {
    res = RES_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8007076:	f242 7310 	movw	r3, #10000	; 0x2710
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fe f9ee 	bl	8005460 <sdWriteBlocks>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SD_write+0x2c>
  {
    res = RES_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08c      	sub	sp, #48	; 0x30
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	603a      	str	r2, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
 80070a4:	460b      	mov	r3, r1
 80070a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80070ae:	4b25      	ldr	r3, [pc, #148]	; (8007144 <SD_ioctl+0xac>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <SD_ioctl+0x28>
 80070bc:	2303      	movs	r3, #3
 80070be:	e03c      	b.n	800713a <SD_ioctl+0xa2>

  switch (cmd)
 80070c0:	79bb      	ldrb	r3, [r7, #6]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d834      	bhi.n	8007130 <SD_ioctl+0x98>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <SD_ioctl+0x34>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070dd 	.word	0x080070dd
 80070d0:	080070e5 	.word	0x080070e5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007117 	.word	0x08007117
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80070e2:	e028      	b.n	8007136 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 80070e4:	f107 0308 	add.w	r3, r7, #8
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe f8e1 	bl	80052b0 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80070fa:	e01c      	b.n	8007136 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe f8d5 	bl	80052b0 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	b29a      	uxth	r2, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007114:	e00f      	b.n	8007136 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8007116:	f107 0308 	add.w	r3, r7, #8
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe f8c8 	bl	80052b0 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	0a5a      	lsrs	r2, r3, #9
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800712e:	e002      	b.n	8007136 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007130:	2304      	movs	r3, #4
 8007132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800713a:	4618      	mov	r0, r3
 800713c:	3730      	adds	r7, #48	; 0x30
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	2000009c 	.word	0x2000009c

08007148 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	3306      	adds	r3, #6
 8007156:	2220      	movs	r2, #32
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f00b fd94 	bl	8012c88 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2200      	movs	r2, #0
 8007164:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <hanFontLoad+0x2e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b0a      	cmp	r3, #10
 8007174:	d107      	bne.n	8007186 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2204      	movs	r2, #4
 800717a:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8007182:	2304      	movs	r3, #4
 8007184:	e03b      	b.n	80071fe <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b25b      	sxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	da2b      	bge.n	80071e8 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	041a      	lsls	r2, r3, #16
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3301      	adds	r3, #1
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	4313      	orrs	r3, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	3202      	adds	r2, #2
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <hanFontLoad+0xc0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d30e      	bcc.n	80071d0 <hanFontLoad+0x88>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <hanFontLoad+0xc4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d80a      	bhi.n	80071d0 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2201      	movs	r2, #1
 80071be:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2203      	movs	r2, #3
 80071c4:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f91f 	bl	800740c <hanUniFontLoad>
 80071ce:	e009      	b.n	80071e4 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2201      	movs	r2, #1
 80071d4:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2202      	movs	r2, #2
 80071da:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f816 	bl	8007210 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e00a      	b.n	80071fe <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2202      	movs	r2, #2
 80071ec:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2201      	movs	r2, #1
 80071f2:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa30 	bl	800765c <hanEngFontLoad>
    return PHAN_ENG_CODE;
 80071fc:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	00eab080 	.word	0x00eab080
 800720c:	00ed9fb0 	.word	0x00ed9fb0

08007210 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	b21a      	sxth	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3301      	adds	r3, #1
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b21b      	sxth	r3, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	b21b      	sxth	r3, r3
 800722e:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8007230:	89bb      	ldrh	r3, [r7, #12]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fa3c 	bl	80076b0 <hanCnvCodeWan2Johab>
 8007238:	4603      	mov	r3, r0
 800723a:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 800723c:	89bb      	ldrh	r3, [r7, #12]
 800723e:	0a9b      	lsrs	r3, r3, #10
 8007240:	b29b      	uxth	r3, r3
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	b29a      	uxth	r2, r3
 8007248:	4b63      	ldr	r3, [pc, #396]	; (80073d8 <hanWanFontLoad+0x1c8>)
 800724a:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 800724c:	89bb      	ldrh	r3, [r7, #12]
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	b29b      	uxth	r3, r3
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	b29a      	uxth	r2, r3
 8007258:	4b60      	ldr	r3, [pc, #384]	; (80073dc <hanWanFontLoad+0x1cc>)
 800725a:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 800725c:	89bb      	ldrh	r3, [r7, #12]
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	b29a      	uxth	r2, r3
 8007264:	4b5e      	ldr	r3, [pc, #376]	; (80073e0 <hanWanFontLoad+0x1d0>)
 8007266:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8007268:	4b5b      	ldr	r3, [pc, #364]	; (80073d8 <hanWanFontLoad+0x1c8>)
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	4b5d      	ldr	r3, [pc, #372]	; (80073e4 <hanWanFontLoad+0x1d4>)
 8007270:	5c9b      	ldrb	r3, [r3, r2]
 8007272:	b29a      	uxth	r2, r3
 8007274:	4b58      	ldr	r3, [pc, #352]	; (80073d8 <hanWanFontLoad+0x1c8>)
 8007276:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8007278:	4b58      	ldr	r3, [pc, #352]	; (80073dc <hanWanFontLoad+0x1cc>)
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	4b5a      	ldr	r3, [pc, #360]	; (80073e8 <hanWanFontLoad+0x1d8>)
 8007280:	5c9b      	ldrb	r3, [r3, r2]
 8007282:	b29a      	uxth	r2, r3
 8007284:	4b55      	ldr	r3, [pc, #340]	; (80073dc <hanWanFontLoad+0x1cc>)
 8007286:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8007288:	4b55      	ldr	r3, [pc, #340]	; (80073e0 <hanWanFontLoad+0x1d0>)
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	4b57      	ldr	r3, [pc, #348]	; (80073ec <hanWanFontLoad+0x1dc>)
 8007290:	5c9b      	ldrb	r3, [r3, r2]
 8007292:	b29a      	uxth	r2, r3
 8007294:	4b52      	ldr	r3, [pc, #328]	; (80073e0 <hanWanFontLoad+0x1d0>)
 8007296:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007298:	4b51      	ldr	r3, [pc, #324]	; (80073e0 <hanWanFontLoad+0x1d0>)
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <hanWanFontLoad+0x9e>
 80072a0:	4b4e      	ldr	r3, [pc, #312]	; (80073dc <hanWanFontLoad+0x1cc>)
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b52      	ldr	r3, [pc, #328]	; (80073f0 <hanWanFontLoad+0x1e0>)
 80072a8:	5c9b      	ldrb	r3, [r3, r2]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	e005      	b.n	80072ba <hanWanFontLoad+0xaa>
 80072ae:	4b4b      	ldr	r3, [pc, #300]	; (80073dc <hanWanFontLoad+0x1cc>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	4b4f      	ldr	r3, [pc, #316]	; (80073f4 <hanWanFontLoad+0x1e4>)
 80072b6:	5c9b      	ldrb	r3, [r3, r2]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4a4f      	ldr	r2, [pc, #316]	; (80073f8 <hanWanFontLoad+0x1e8>)
 80072bc:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80072be:	4b46      	ldr	r3, [pc, #280]	; (80073d8 <hanWanFontLoad+0x1c8>)
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <hanWanFontLoad+0xca>
 80072c6:	4b44      	ldr	r3, [pc, #272]	; (80073d8 <hanWanFontLoad+0x1c8>)
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d005      	beq.n	80072da <hanWanFontLoad+0xca>
 80072ce:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <hanWanFontLoad+0x1c8>)
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d001      	beq.n	80072da <hanWanFontLoad+0xca>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <hanWanFontLoad+0xcc>
 80072da:	2300      	movs	r3, #0
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4a40      	ldr	r2, [pc, #256]	; (80073e0 <hanWanFontLoad+0x1d0>)
 80072e0:	8812      	ldrh	r2, [r2, #0]
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	d001      	beq.n	80072ea <hanWanFontLoad+0xda>
 80072e6:	2202      	movs	r2, #2
 80072e8:	e000      	b.n	80072ec <hanWanFontLoad+0xdc>
 80072ea:	2200      	movs	r2, #0
 80072ec:	4413      	add	r3, r2
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	4b42      	ldr	r3, [pc, #264]	; (80073fc <hanWanFontLoad+0x1ec>)
 80072f2:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 80072f4:	4b39      	ldr	r3, [pc, #228]	; (80073dc <hanWanFontLoad+0x1cc>)
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b41      	ldr	r3, [pc, #260]	; (8007400 <hanWanFontLoad+0x1f0>)
 80072fc:	5c9b      	ldrb	r3, [r3, r2]
 80072fe:	b29a      	uxth	r2, r3
 8007300:	4b40      	ldr	r3, [pc, #256]	; (8007404 <hanWanFontLoad+0x1f4>)
 8007302:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8007304:	2300      	movs	r3, #0
 8007306:	81fb      	strh	r3, [r7, #14]
 8007308:	e035      	b.n	8007376 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800730a:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <hanWanFontLoad+0x1e8>)
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	461a      	mov	r2, r3
 800731a:	4b2f      	ldr	r3, [pc, #188]	; (80073d8 <hanWanFontLoad+0x1c8>)
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	441a      	add	r2, r3
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	4939      	ldr	r1, [pc, #228]	; (8007408 <hanWanFontLoad+0x1f8>)
 8007324:	0152      	lsls	r2, r2, #5
 8007326:	4413      	add	r3, r2
 8007328:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800732c:	89fb      	ldrh	r3, [r7, #14]
 800732e:	b2d1      	uxtb	r1, r2
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	4413      	add	r3, r2
 8007334:	460a      	mov	r2, r1
 8007336:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8007338:	89fb      	ldrh	r3, [r7, #14]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	4413      	add	r3, r2
 800733e:	7999      	ldrb	r1, [r3, #6]
 8007340:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <hanWanFontLoad+0x1ec>)
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	2316      	movs	r3, #22
 8007348:	fb02 f303 	mul.w	r3, r2, r3
 800734c:	33a0      	adds	r3, #160	; 0xa0
 800734e:	4a23      	ldr	r2, [pc, #140]	; (80073dc <hanWanFontLoad+0x1cc>)
 8007350:	8812      	ldrh	r2, [r2, #0]
 8007352:	441a      	add	r2, r3
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	482c      	ldr	r0, [pc, #176]	; (8007408 <hanWanFontLoad+0x1f8>)
 8007358:	0152      	lsls	r2, r2, #5
 800735a:	4413      	add	r3, r2
 800735c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	89fb      	ldrh	r3, [r7, #14]
 8007364:	430a      	orrs	r2, r1
 8007366:	b2d1      	uxtb	r1, r2
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	4413      	add	r3, r2
 800736c:	460a      	mov	r2, r1
 800736e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8007370:	89fb      	ldrh	r3, [r7, #14]
 8007372:	3301      	adds	r3, #1
 8007374:	81fb      	strh	r3, [r7, #14]
 8007376:	89fb      	ldrh	r3, [r7, #14]
 8007378:	2b1f      	cmp	r3, #31
 800737a:	d9c6      	bls.n	800730a <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 800737c:	4b18      	ldr	r3, [pc, #96]	; (80073e0 <hanWanFontLoad+0x1d0>)
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d025      	beq.n	80073d0 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8007384:	2300      	movs	r3, #0
 8007386:	81fb      	strh	r3, [r7, #14]
 8007388:	e01f      	b.n	80073ca <hanWanFontLoad+0x1ba>
 800738a:	89fb      	ldrh	r3, [r7, #14]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	4413      	add	r3, r2
 8007390:	7999      	ldrb	r1, [r3, #6]
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <hanWanFontLoad+0x1f4>)
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	33f8      	adds	r3, #248	; 0xf8
 80073a2:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <hanWanFontLoad+0x1d0>)
 80073a4:	8812      	ldrh	r2, [r2, #0]
 80073a6:	441a      	add	r2, r3
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	4817      	ldr	r0, [pc, #92]	; (8007408 <hanWanFontLoad+0x1f8>)
 80073ac:	0152      	lsls	r2, r2, #5
 80073ae:	4413      	add	r3, r2
 80073b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	89fb      	ldrh	r3, [r7, #14]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	b2d1      	uxtb	r1, r2
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	4413      	add	r3, r2
 80073c0:	460a      	mov	r2, r1
 80073c2:	719a      	strb	r2, [r3, #6]
 80073c4:	89fb      	ldrh	r3, [r7, #14]
 80073c6:	3301      	adds	r3, #1
 80073c8:	81fb      	strh	r3, [r7, #14]
 80073ca:	89fb      	ldrh	r3, [r7, #14]
 80073cc:	2b1f      	cmp	r3, #31
 80073ce:	d9dc      	bls.n	800738a <hanWanFontLoad+0x17a>
  }
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	2000d042 	.word	0x2000d042
 80073dc:	2000d044 	.word	0x2000d044
 80073e0:	2000d046 	.word	0x2000d046
 80073e4:	08019170 	.word	0x08019170
 80073e8:	08019190 	.word	0x08019190
 80073ec:	080191b0 	.word	0x080191b0
 80073f0:	08019248 	.word	0x08019248
 80073f4:	08019230 	.word	0x08019230
 80073f8:	2000d048 	.word	0x2000d048
 80073fc:	2000d04a 	.word	0x2000d04a
 8007400:	08019260 	.word	0x08019260
 8007404:	2000d04c 	.word	0x2000d04c
 8007408:	0801b740 	.word	0x0801b740

0800740c <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	031b      	lsls	r3, r3, #12
 800741c:	b21a      	sxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3301      	adds	r3, #1
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	019b      	lsls	r3, r3, #6
 8007426:	b21b      	sxth	r3, r3
 8007428:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800742c:	b21b      	sxth	r3, r3
 800742e:	4313      	orrs	r3, r2
 8007430:	b21a      	sxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3302      	adds	r3, #2
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b21b      	sxth	r3, r3
 800743a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800743e:	b21b      	sxth	r3, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	b21b      	sxth	r3, r3
 8007444:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8007446:	89bb      	ldrh	r3, [r7, #12]
 8007448:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800744c:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800744e:	89ba      	ldrh	r2, [r7, #12]
 8007450:	0893      	lsrs	r3, r2, #2
 8007452:	4973      	ldr	r1, [pc, #460]	; (8007620 <hanUniFontLoad+0x214>)
 8007454:	fba1 3103 	umull	r3, r1, r1, r3
 8007458:	460b      	mov	r3, r1
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	1a5b      	subs	r3, r3, r1
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	b29a      	uxth	r2, r3
 8007464:	4b6f      	ldr	r3, [pc, #444]	; (8007624 <hanUniFontLoad+0x218>)
 8007466:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8007468:	89bb      	ldrh	r3, [r7, #12]
 800746a:	089b      	lsrs	r3, r3, #2
 800746c:	4a6c      	ldr	r2, [pc, #432]	; (8007620 <hanUniFontLoad+0x214>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8007474:	89b9      	ldrh	r1, [r7, #12]
 8007476:	4b6c      	ldr	r3, [pc, #432]	; (8007628 <hanUniFontLoad+0x21c>)
 8007478:	fba3 2301 	umull	r2, r3, r3, r1
 800747c:	1aca      	subs	r2, r1, r3
 800747e:	0852      	lsrs	r2, r2, #1
 8007480:	4413      	add	r3, r2
 8007482:	091a      	lsrs	r2, r3, #4
 8007484:	4613      	mov	r3, r2
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4413      	add	r3, r2
 800748a:	00da      	lsls	r2, r3, #3
 800748c:	1ad2      	subs	r2, r2, r3
 800748e:	1a8b      	subs	r3, r1, r2
 8007490:	b29a      	uxth	r2, r3
 8007492:	4b66      	ldr	r3, [pc, #408]	; (800762c <hanUniFontLoad+0x220>)
 8007494:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8007496:	89ba      	ldrh	r2, [r7, #12]
 8007498:	4b63      	ldr	r3, [pc, #396]	; (8007628 <hanUniFontLoad+0x21c>)
 800749a:	fba3 1302 	umull	r1, r3, r3, r2
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	0852      	lsrs	r2, r2, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	4b61      	ldr	r3, [pc, #388]	; (8007630 <hanUniFontLoad+0x224>)
 80074aa:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80074ac:	4b60      	ldr	r3, [pc, #384]	; (8007630 <hanUniFontLoad+0x224>)
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b60      	ldr	r3, [pc, #384]	; (8007634 <hanUniFontLoad+0x228>)
 80074b4:	5c9b      	ldrb	r3, [r3, r2]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	4b5d      	ldr	r3, [pc, #372]	; (8007630 <hanUniFontLoad+0x224>)
 80074ba:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 80074bc:	4b5b      	ldr	r3, [pc, #364]	; (800762c <hanUniFontLoad+0x220>)
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b5d      	ldr	r3, [pc, #372]	; (8007638 <hanUniFontLoad+0x22c>)
 80074c4:	5c9b      	ldrb	r3, [r3, r2]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	4b58      	ldr	r3, [pc, #352]	; (800762c <hanUniFontLoad+0x220>)
 80074ca:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 80074cc:	4b55      	ldr	r3, [pc, #340]	; (8007624 <hanUniFontLoad+0x218>)
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	4b5a      	ldr	r3, [pc, #360]	; (800763c <hanUniFontLoad+0x230>)
 80074d4:	5c9b      	ldrb	r3, [r3, r2]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	4b52      	ldr	r3, [pc, #328]	; (8007624 <hanUniFontLoad+0x218>)
 80074da:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80074dc:	4b51      	ldr	r3, [pc, #324]	; (8007624 <hanUniFontLoad+0x218>)
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <hanUniFontLoad+0xe6>
 80074e4:	4b51      	ldr	r3, [pc, #324]	; (800762c <hanUniFontLoad+0x220>)
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	4b55      	ldr	r3, [pc, #340]	; (8007640 <hanUniFontLoad+0x234>)
 80074ec:	5c9b      	ldrb	r3, [r3, r2]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	e005      	b.n	80074fe <hanUniFontLoad+0xf2>
 80074f2:	4b4e      	ldr	r3, [pc, #312]	; (800762c <hanUniFontLoad+0x220>)
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	4b52      	ldr	r3, [pc, #328]	; (8007644 <hanUniFontLoad+0x238>)
 80074fa:	5c9b      	ldrb	r3, [r3, r2]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4a52      	ldr	r2, [pc, #328]	; (8007648 <hanUniFontLoad+0x23c>)
 8007500:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007502:	4b4b      	ldr	r3, [pc, #300]	; (8007630 <hanUniFontLoad+0x224>)
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <hanUniFontLoad+0x112>
 800750a:	4b49      	ldr	r3, [pc, #292]	; (8007630 <hanUniFontLoad+0x224>)
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d005      	beq.n	800751e <hanUniFontLoad+0x112>
 8007512:	4b47      	ldr	r3, [pc, #284]	; (8007630 <hanUniFontLoad+0x224>)
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	2b10      	cmp	r3, #16
 8007518:	d001      	beq.n	800751e <hanUniFontLoad+0x112>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <hanUniFontLoad+0x114>
 800751e:	2300      	movs	r3, #0
 8007520:	b29b      	uxth	r3, r3
 8007522:	4a40      	ldr	r2, [pc, #256]	; (8007624 <hanUniFontLoad+0x218>)
 8007524:	8812      	ldrh	r2, [r2, #0]
 8007526:	2a00      	cmp	r2, #0
 8007528:	d001      	beq.n	800752e <hanUniFontLoad+0x122>
 800752a:	2202      	movs	r2, #2
 800752c:	e000      	b.n	8007530 <hanUniFontLoad+0x124>
 800752e:	2200      	movs	r2, #0
 8007530:	4413      	add	r3, r2
 8007532:	b29a      	uxth	r2, r3
 8007534:	4b45      	ldr	r3, [pc, #276]	; (800764c <hanUniFontLoad+0x240>)
 8007536:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8007538:	4b3c      	ldr	r3, [pc, #240]	; (800762c <hanUniFontLoad+0x220>)
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	4b44      	ldr	r3, [pc, #272]	; (8007650 <hanUniFontLoad+0x244>)
 8007540:	5c9b      	ldrb	r3, [r3, r2]
 8007542:	b29a      	uxth	r2, r3
 8007544:	4b43      	ldr	r3, [pc, #268]	; (8007654 <hanUniFontLoad+0x248>)
 8007546:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8007548:	2300      	movs	r3, #0
 800754a:	81fb      	strh	r3, [r7, #14]
 800754c:	e035      	b.n	80075ba <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800754e:	4b3e      	ldr	r3, [pc, #248]	; (8007648 <hanUniFontLoad+0x23c>)
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	461a      	mov	r2, r3
 800755e:	4b34      	ldr	r3, [pc, #208]	; (8007630 <hanUniFontLoad+0x224>)
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	441a      	add	r2, r3
 8007564:	89fb      	ldrh	r3, [r7, #14]
 8007566:	493c      	ldr	r1, [pc, #240]	; (8007658 <hanUniFontLoad+0x24c>)
 8007568:	0152      	lsls	r2, r2, #5
 800756a:	4413      	add	r3, r2
 800756c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	b2d1      	uxtb	r1, r2
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	4413      	add	r3, r2
 8007578:	460a      	mov	r2, r1
 800757a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4413      	add	r3, r2
 8007582:	7999      	ldrb	r1, [r3, #6]
 8007584:	4b31      	ldr	r3, [pc, #196]	; (800764c <hanUniFontLoad+0x240>)
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	2316      	movs	r3, #22
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	33a0      	adds	r3, #160	; 0xa0
 8007592:	4a26      	ldr	r2, [pc, #152]	; (800762c <hanUniFontLoad+0x220>)
 8007594:	8812      	ldrh	r2, [r2, #0]
 8007596:	441a      	add	r2, r3
 8007598:	89fb      	ldrh	r3, [r7, #14]
 800759a:	482f      	ldr	r0, [pc, #188]	; (8007658 <hanUniFontLoad+0x24c>)
 800759c:	0152      	lsls	r2, r2, #5
 800759e:	4413      	add	r3, r2
 80075a0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	89fb      	ldrh	r3, [r7, #14]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	b2d1      	uxtb	r1, r2
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	4413      	add	r3, r2
 80075b0:	460a      	mov	r2, r1
 80075b2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 80075b4:	89fb      	ldrh	r3, [r7, #14]
 80075b6:	3301      	adds	r3, #1
 80075b8:	81fb      	strh	r3, [r7, #14]
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	2b1f      	cmp	r3, #31
 80075be:	d9c6      	bls.n	800754e <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 80075c0:	4b18      	ldr	r3, [pc, #96]	; (8007624 <hanUniFontLoad+0x218>)
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d025      	beq.n	8007614 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80075c8:	2300      	movs	r3, #0
 80075ca:	81fb      	strh	r3, [r7, #14]
 80075cc:	e01f      	b.n	800760e <hanUniFontLoad+0x202>
 80075ce:	89fb      	ldrh	r3, [r7, #14]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	4413      	add	r3, r2
 80075d4:	7999      	ldrb	r1, [r3, #6]
 80075d6:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <hanUniFontLoad+0x248>)
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	4613      	mov	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	33f8      	adds	r3, #248	; 0xf8
 80075e6:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <hanUniFontLoad+0x218>)
 80075e8:	8812      	ldrh	r2, [r2, #0]
 80075ea:	441a      	add	r2, r3
 80075ec:	89fb      	ldrh	r3, [r7, #14]
 80075ee:	481a      	ldr	r0, [pc, #104]	; (8007658 <hanUniFontLoad+0x24c>)
 80075f0:	0152      	lsls	r2, r2, #5
 80075f2:	4413      	add	r3, r2
 80075f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	89fb      	ldrh	r3, [r7, #14]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	b2d1      	uxtb	r1, r2
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	4413      	add	r3, r2
 8007604:	460a      	mov	r2, r1
 8007606:	719a      	strb	r2, [r3, #6]
 8007608:	89fb      	ldrh	r3, [r7, #14]
 800760a:	3301      	adds	r3, #1
 800760c:	81fb      	strh	r3, [r7, #14]
 800760e:	89fb      	ldrh	r3, [r7, #14]
 8007610:	2b1f      	cmp	r3, #31
 8007612:	d9dc      	bls.n	80075ce <hanUniFontLoad+0x1c2>
  }
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	24924925 	.word	0x24924925
 8007624:	2000d04e 	.word	0x2000d04e
 8007628:	86186187 	.word	0x86186187
 800762c:	2000d050 	.word	0x2000d050
 8007630:	2000d052 	.word	0x2000d052
 8007634:	080191d0 	.word	0x080191d0
 8007638:	080191f0 	.word	0x080191f0
 800763c:	08019210 	.word	0x08019210
 8007640:	08019248 	.word	0x08019248
 8007644:	08019230 	.word	0x08019230
 8007648:	2000d054 	.word	0x2000d054
 800764c:	2000d056 	.word	0x2000d056
 8007650:	08019260 	.word	0x08019260
 8007654:	2000d058 	.word	0x2000d058
 8007658:	0801b740 	.word	0x0801b740

0800765c <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 800766c:	7b7b      	ldrb	r3, [r7, #13]
 800766e:	3b20      	subs	r3, #32
 8007670:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8007672:	2300      	movs	r3, #0
 8007674:	81fb      	strh	r3, [r7, #14]
 8007676:	e00f      	b.n	8007698 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8007678:	7b7a      	ldrb	r2, [r7, #13]
 800767a:	89fb      	ldrh	r3, [r7, #14]
 800767c:	490b      	ldr	r1, [pc, #44]	; (80076ac <hanEngFontLoad+0x50>)
 800767e:	0112      	lsls	r2, r2, #4
 8007680:	4413      	add	r3, r2
 8007682:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007686:	89fb      	ldrh	r3, [r7, #14]
 8007688:	b2d1      	uxtb	r1, r2
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4413      	add	r3, r2
 800768e:	460a      	mov	r2, r1
 8007690:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	3301      	adds	r3, #1
 8007696:	81fb      	strh	r3, [r7, #14]
 8007698:	89fb      	ldrh	r3, [r7, #14]
 800769a:	2b0f      	cmp	r3, #15
 800769c:	d9ec      	bls.n	8007678 <hanEngFontLoad+0x1c>
  }
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	08017970 	.word	0x08017970

080076b0 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 80076c0:	88fb      	ldrh	r3, [r7, #6]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 80076c6:	89fb      	ldrh	r3, [r7, #14]
 80076c8:	3bb0      	subs	r3, #176	; 0xb0
 80076ca:	225e      	movs	r2, #94	; 0x5e
 80076cc:	fb03 f202 	mul.w	r2, r3, r2
 80076d0:	89bb      	ldrh	r3, [r7, #12]
 80076d2:	3ba1      	subs	r3, #161	; 0xa1
 80076d4:	4413      	add	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 80076d8:	4a05      	ldr	r2, [pc, #20]	; (80076f0 <hanCnvCodeWan2Johab+0x40>)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e0:	b29b      	uxth	r3, r3
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	08019280 	.word	0x08019280

080076f4 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <TransferDoneISR+0x30>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8007702:	4b08      	ldr	r3, [pc, #32]	; (8007724 <TransferDoneISR+0x30>)
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007708:	2101      	movs	r1, #1
 800770a:	2002      	movs	r0, #2
 800770c:	f7fb ff5c 	bl	80035c8 <gpioPinWrite>

    if (frameCallBack != NULL)
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <TransferDoneISR+0x34>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <TransferDoneISR+0x34>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4798      	blx	r3
    }
  }
}
 800771e:	bf00      	nop
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	2000d060 	.word	0x2000d060
 8007728:	2000d05c 	.word	0x2000d05c

0800772c <st7735Init>:


bool st7735Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8007732:	f000 f835 	bl	80077a0 <st7735Reset>
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]

  return ret;
 800773a:	79fb      	ldrb	r3, [r7, #7]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <st7735InitDriver+0x40>)
 8007750:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a0c      	ldr	r2, [pc, #48]	; (8007788 <st7735InitDriver+0x44>)
 8007756:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a0c      	ldr	r2, [pc, #48]	; (800778c <st7735InitDriver+0x48>)
 800775c:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a0b      	ldr	r2, [pc, #44]	; (8007790 <st7735InitDriver+0x4c>)
 8007762:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a0b      	ldr	r2, [pc, #44]	; (8007794 <st7735InitDriver+0x50>)
 8007768:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a0a      	ldr	r2, [pc, #40]	; (8007798 <st7735InitDriver+0x54>)
 800776e:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a0a      	ldr	r2, [pc, #40]	; (800779c <st7735InitDriver+0x58>)
 8007774:	619a      	str	r2, [r3, #24]
  return true;
 8007776:	2301      	movs	r3, #1
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	0800772d 	.word	0x0800772d
 8007788:	080077a1 	.word	0x080077a1
 800778c:	08007a65 	.word	0x08007a65
 8007790:	08007819 	.word	0x08007819
 8007794:	08007829 	.word	0x08007829
 8007798:	08007cbd 	.word	0x08007cbd
 800779c:	08007c71 	.word	0x08007c71

080077a0 <st7735Reset>:

bool st7735Reset(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <st7735Reset+0x70>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fb54 	bl	8005e58 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 80077b0:	4b17      	ldr	r3, [pc, #92]	; (8007810 <st7735Reset+0x70>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fbaa 	bl	8005f10 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 80077bc:	4b14      	ldr	r3, [pc, #80]	; (8007810 <st7735Reset+0x70>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	4914      	ldr	r1, [pc, #80]	; (8007814 <st7735Reset+0x74>)
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fcda 	bl	800617c <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 80077c8:	2100      	movs	r1, #0
 80077ca:	2001      	movs	r0, #1
 80077cc:	f7fb fefc 	bl	80035c8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 80077d0:	2101      	movs	r1, #1
 80077d2:	2003      	movs	r0, #3
 80077d4:	f7fb fef8 	bl	80035c8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 80077d8:	2101      	movs	r1, #1
 80077da:	2002      	movs	r0, #2
 80077dc:	f7fb fef4 	bl	80035c8 <gpioPinWrite>
  delay(10);
 80077e0:	200a      	movs	r0, #10
 80077e2:	f7f9 fd15 	bl	8001210 <delay>

  st7735InitRegs();
 80077e6:	f000 f863 	bl	80078b0 <st7735InitRegs>


  st7735SetRotation(1);
 80077ea:	2001      	movs	r0, #1
 80077ec:	f000 f910 	bl	8007a10 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 80077f0:	2300      	movs	r3, #0
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	22a0      	movs	r2, #160	; 0xa0
 80077f8:	2100      	movs	r1, #0
 80077fa:	2000      	movs	r0, #0
 80077fc:	f000 f97e 	bl	8007afc <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8007800:	2100      	movs	r1, #0
 8007802:	2001      	movs	r0, #1
 8007804:	f7fb fee0 	bl	80035c8 <gpioPinWrite>
  return true;
 8007808:	2301      	movs	r3, #1
}
 800780a:	4618      	mov	r0, r3
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	2000d05a 	.word	0x2000d05a
 8007814:	080076f5 	.word	0x080076f5

08007818 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 800781c:	23a0      	movs	r3, #160	; 0xa0
}
 800781e:	4618      	mov	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 800782c:	2380      	movs	r3, #128	; 0x80
}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <writecommand>:

void writecommand(uint8_t c)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8007842:	2100      	movs	r1, #0
 8007844:	2003      	movs	r0, #3
 8007846:	f7fb febf 	bl	80035c8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800784a:	2100      	movs	r1, #0
 800784c:	2002      	movs	r0, #2
 800784e:	f7fb febb 	bl	80035c8 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <writecommand+0x38>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	79fa      	ldrb	r2, [r7, #7]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fbec 	bl	8006038 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007860:	2101      	movs	r1, #1
 8007862:	2002      	movs	r0, #2
 8007864:	f7fb feb0 	bl	80035c8 <gpioPinWrite>
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	2000d05a 	.word	0x2000d05a

08007874 <writedata>:

void writedata(uint8_t d)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 800787e:	2101      	movs	r1, #1
 8007880:	2003      	movs	r0, #3
 8007882:	f7fb fea1 	bl	80035c8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007886:	2100      	movs	r1, #0
 8007888:	2002      	movs	r0, #2
 800788a:	f7fb fe9d 	bl	80035c8 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 800788e:	4b07      	ldr	r3, [pc, #28]	; (80078ac <writedata+0x38>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	79fa      	ldrb	r2, [r7, #7]
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fbce 	bl	8006038 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800789c:	2101      	movs	r1, #1
 800789e:	2002      	movs	r0, #2
 80078a0:	f7fb fe92 	bl	80035c8 <gpioPinWrite>
}
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000d05a 	.word	0x2000d05a

080078b0 <st7735InitRegs>:

void st7735InitRegs(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 80078b4:	2001      	movs	r0, #1
 80078b6:	f7ff ffbf 	bl	8007838 <writecommand>
  delay(10);
 80078ba:	200a      	movs	r0, #10
 80078bc:	f7f9 fca8 	bl	8001210 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 80078c0:	2011      	movs	r0, #17
 80078c2:	f7ff ffb9 	bl	8007838 <writecommand>
  delay(10);
 80078c6:	200a      	movs	r0, #10
 80078c8:	f7f9 fca2 	bl	8001210 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 80078cc:	20b1      	movs	r0, #177	; 0xb1
 80078ce:	f7ff ffb3 	bl	8007838 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7ff ffce 	bl	8007874 <writedata>
  writedata(0x2C);
 80078d8:	202c      	movs	r0, #44	; 0x2c
 80078da:	f7ff ffcb 	bl	8007874 <writedata>
  writedata(0x2D);
 80078de:	202d      	movs	r0, #45	; 0x2d
 80078e0:	f7ff ffc8 	bl	8007874 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 80078e4:	20b2      	movs	r0, #178	; 0xb2
 80078e6:	f7ff ffa7 	bl	8007838 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80078ea:	2001      	movs	r0, #1
 80078ec:	f7ff ffc2 	bl	8007874 <writedata>
  writedata(0x2C);
 80078f0:	202c      	movs	r0, #44	; 0x2c
 80078f2:	f7ff ffbf 	bl	8007874 <writedata>
  writedata(0x2D);
 80078f6:	202d      	movs	r0, #45	; 0x2d
 80078f8:	f7ff ffbc 	bl	8007874 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 80078fc:	20b3      	movs	r0, #179	; 0xb3
 80078fe:	f7ff ff9b 	bl	8007838 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8007902:	2001      	movs	r0, #1
 8007904:	f7ff ffb6 	bl	8007874 <writedata>
  writedata(0x2C);
 8007908:	202c      	movs	r0, #44	; 0x2c
 800790a:	f7ff ffb3 	bl	8007874 <writedata>
  writedata(0x2D);
 800790e:	202d      	movs	r0, #45	; 0x2d
 8007910:	f7ff ffb0 	bl	8007874 <writedata>
  writedata(0x01);              //     Line inversion mode
 8007914:	2001      	movs	r0, #1
 8007916:	f7ff ffad 	bl	8007874 <writedata>
  writedata(0x2C);
 800791a:	202c      	movs	r0, #44	; 0x2c
 800791c:	f7ff ffaa 	bl	8007874 <writedata>
  writedata(0x2D);
 8007920:	202d      	movs	r0, #45	; 0x2d
 8007922:	f7ff ffa7 	bl	8007874 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8007926:	20b4      	movs	r0, #180	; 0xb4
 8007928:	f7ff ff86 	bl	8007838 <writecommand>
  writedata(0x07);              //     No inversion
 800792c:	2007      	movs	r0, #7
 800792e:	f7ff ffa1 	bl	8007874 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8007932:	20c0      	movs	r0, #192	; 0xc0
 8007934:	f7ff ff80 	bl	8007838 <writecommand>
  writedata(0xA2);
 8007938:	20a2      	movs	r0, #162	; 0xa2
 800793a:	f7ff ff9b 	bl	8007874 <writedata>
  writedata(0x02);              //     -4.6V
 800793e:	2002      	movs	r0, #2
 8007940:	f7ff ff98 	bl	8007874 <writedata>
  writedata(0x84);              //     AUTO mode
 8007944:	2084      	movs	r0, #132	; 0x84
 8007946:	f7ff ff95 	bl	8007874 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 800794a:	20c1      	movs	r0, #193	; 0xc1
 800794c:	f7ff ff74 	bl	8007838 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8007950:	20c5      	movs	r0, #197	; 0xc5
 8007952:	f7ff ff8f 	bl	8007874 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8007956:	20c2      	movs	r0, #194	; 0xc2
 8007958:	f7ff ff6e 	bl	8007838 <writecommand>
  writedata(0x0A);              //     Opamp current small
 800795c:	200a      	movs	r0, #10
 800795e:	f7ff ff89 	bl	8007874 <writedata>
  writedata(0x00);              //     Boost frequency
 8007962:	2000      	movs	r0, #0
 8007964:	f7ff ff86 	bl	8007874 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8007968:	20c3      	movs	r0, #195	; 0xc3
 800796a:	f7ff ff65 	bl	8007838 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 800796e:	208a      	movs	r0, #138	; 0x8a
 8007970:	f7ff ff80 	bl	8007874 <writedata>
  writedata(0x2A);
 8007974:	202a      	movs	r0, #42	; 0x2a
 8007976:	f7ff ff7d 	bl	8007874 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 800797a:	20c4      	movs	r0, #196	; 0xc4
 800797c:	f7ff ff5c 	bl	8007838 <writecommand>
  writedata(0x8A);
 8007980:	208a      	movs	r0, #138	; 0x8a
 8007982:	f7ff ff77 	bl	8007874 <writedata>
  writedata(0xEE);
 8007986:	20ee      	movs	r0, #238	; 0xee
 8007988:	f7ff ff74 	bl	8007874 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 800798c:	20c5      	movs	r0, #197	; 0xc5
 800798e:	f7ff ff53 	bl	8007838 <writecommand>
  writedata(0x0E);
 8007992:	200e      	movs	r0, #14
 8007994:	f7ff ff6e 	bl	8007874 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8007998:	2020      	movs	r0, #32
 800799a:	f7ff ff4d 	bl	8007838 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 800799e:	2036      	movs	r0, #54	; 0x36
 80079a0:	f7ff ff4a 	bl	8007838 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 80079a4:	20c8      	movs	r0, #200	; 0xc8
 80079a6:	f7ff ff65 	bl	8007874 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 80079aa:	203a      	movs	r0, #58	; 0x3a
 80079ac:	f7ff ff44 	bl	8007838 <writecommand>
  writedata(0x05);              //     16-bit color
 80079b0:	2005      	movs	r0, #5
 80079b2:	f7ff ff5f 	bl	8007874 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 80079b6:	202a      	movs	r0, #42	; 0x2a
 80079b8:	f7ff ff3e 	bl	8007838 <writecommand>
  writedata(0x00);
 80079bc:	2000      	movs	r0, #0
 80079be:	f7ff ff59 	bl	8007874 <writedata>
  writedata(0x00);              //     XSTART = 0
 80079c2:	2000      	movs	r0, #0
 80079c4:	f7ff ff56 	bl	8007874 <writedata>
  writedata(0x00);
 80079c8:	2000      	movs	r0, #0
 80079ca:	f7ff ff53 	bl	8007874 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 80079ce:	209f      	movs	r0, #159	; 0x9f
 80079d0:	f7ff ff50 	bl	8007874 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 80079d4:	202b      	movs	r0, #43	; 0x2b
 80079d6:	f7ff ff2f 	bl	8007838 <writecommand>
  writedata(0x00);
 80079da:	2000      	movs	r0, #0
 80079dc:	f7ff ff4a 	bl	8007874 <writedata>
  writedata(0x00);              //     XSTART = 0
 80079e0:	2000      	movs	r0, #0
 80079e2:	f7ff ff47 	bl	8007874 <writedata>
  writedata(0x00);
 80079e6:	2000      	movs	r0, #0
 80079e8:	f7ff ff44 	bl	8007874 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 80079ec:	207f      	movs	r0, #127	; 0x7f
 80079ee:	f7ff ff41 	bl	8007874 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 80079f2:	2013      	movs	r0, #19
 80079f4:	f7ff ff20 	bl	8007838 <writecommand>
  delay(10);
 80079f8:	200a      	movs	r0, #10
 80079fa:	f7f9 fc09 	bl	8001210 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 80079fe:	2029      	movs	r0, #41	; 0x29
 8007a00:	f7ff ff1a 	bl	8007838 <writecommand>
  delay(10);
 8007a04:	200a      	movs	r0, #10
 8007a06:	f7f9 fc03 	bl	8001210 <delay>
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8007a1a:	2036      	movs	r0, #54	; 0x36
 8007a1c:	f7ff ff0c 	bl	8007838 <writecommand>

  switch (mode)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d81a      	bhi.n	8007a5c <st7735SetRotation+0x4c>
 8007a26:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <st7735SetRotation+0x1c>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a45 	.word	0x08007a45
 8007a34:	08007a4d 	.word	0x08007a4d
 8007a38:	08007a55 	.word	0x08007a55
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8007a3c:	20c0      	movs	r0, #192	; 0xc0
 8007a3e:	f7ff ff19 	bl	8007874 <writedata>
     break;
 8007a42:	e00b      	b.n	8007a5c <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8007a44:	20a0      	movs	r0, #160	; 0xa0
 8007a46:	f7ff ff15 	bl	8007874 <writedata>
     break;
 8007a4a:	e007      	b.n	8007a5c <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f7ff ff11 	bl	8007874 <writedata>
    break;
 8007a52:	e003      	b.n	8007a5c <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8007a54:	2060      	movs	r0, #96	; 0x60
 8007a56:	f7ff ff0d 	bl	8007874 <writedata>
     break;
 8007a5a:	bf00      	nop
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8007a72:	4b21      	ldr	r3, [pc, #132]	; (8007af8 <st7735SetWindow+0x94>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2108      	movs	r1, #8
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe faad 	bl	8005fd8 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8007a7e:	202a      	movs	r0, #42	; 0x2a
 8007a80:	f7ff feda 	bl	8007838 <writecommand>
  writedata(0x00);
 8007a84:	2000      	movs	r0, #0
 8007a86:	f7ff fef5 	bl	8007874 <writedata>
  writedata(x0+colstart);     // XSTART
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	2300      	movs	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	4413      	add	r3, r2
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff feec 	bl	8007874 <writedata>
  writedata(0x00);
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f7ff fee9 	bl	8007874 <writedata>
  writedata(x1+colstart);     // XEND
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fee0 	bl	8007874 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8007ab4:	202b      	movs	r0, #43	; 0x2b
 8007ab6:	f7ff febf 	bl	8007838 <writecommand>
  writedata(0x00);
 8007aba:	2000      	movs	r0, #0
 8007abc:	f7ff feda 	bl	8007874 <writedata>
  writedata(y0+rowstart);     // YSTART
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff fed1 	bl	8007874 <writedata>
  writedata(0x00);
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f7ff fece 	bl	8007874 <writedata>
  writedata(y1+rowstart);     // YEND
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	2300      	movs	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fec5 	bl	8007874 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8007aea:	202c      	movs	r0, #44	; 0x2c
 8007aec:	f7ff fea4 	bl	8007838 <writecommand>
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	2000d05a 	.word	0x2000d05a

08007afc <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8007afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b00:	b089      	sub	sp, #36	; 0x24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	466b      	mov	r3, sp
 8007b0e:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	1e4b      	subs	r3, r1, #1
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	460a      	mov	r2, r1
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4690      	mov	r8, r2
 8007b1c:	4699      	mov	r9, r3
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	f04f 0300 	mov.w	r3, #0
 8007b26:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8007b2a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8007b2e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8007b32:	460a      	mov	r2, r1
 8007b34:	2300      	movs	r3, #0
 8007b36:	4614      	mov	r4, r2
 8007b38:	461d      	mov	r5, r3
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	012b      	lsls	r3, r5, #4
 8007b44:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8007b48:	0122      	lsls	r2, r4, #4
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	3307      	adds	r3, #7
 8007b50:	08db      	lsrs	r3, r3, #3
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	ebad 0d03 	sub.w	sp, sp, r3
 8007b58:	466b      	mov	r3, sp
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 8007b62:	22a0      	movs	r2, #160	; 0xa0
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	da78      	bge.n	8007c5c <st7735FillRect+0x160>
 8007b6a:	2280      	movs	r2, #128	; 0x80
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	da74      	bge.n	8007c5c <st7735FillRect+0x160>

  if (x < 0) { w += x; x = 0; }
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da05      	bge.n	8007b84 <st7735FillRect+0x88>
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	607b      	str	r3, [r7, #4]
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da05      	bge.n	8007b96 <st7735FillRect+0x9a>
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4413      	add	r3, r2
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	22a0      	movs	r2, #160	; 0xa0
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	dd03      	ble.n	8007baa <st7735FillRect+0xae>
 8007ba2:	22a0      	movs	r2, #160	; 0xa0
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	4413      	add	r3, r2
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	dd03      	ble.n	8007bbe <st7735FillRect+0xc2>
 8007bb6:	2280      	movs	r2, #128	; 0x80
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dd4d      	ble.n	8007c60 <st7735FillRect+0x164>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dd4a      	ble.n	8007c60 <st7735FillRect+0x164>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4413      	add	r3, r2
 8007bd0:	1e59      	subs	r1, r3, #1
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	460a      	mov	r2, r1
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff ff40 	bl	8007a64 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8007be4:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <st7735FillRect+0x170>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2110      	movs	r1, #16
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe f9f4 	bl	8005fd8 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	2003      	movs	r0, #3
 8007bf4:	f7fb fce8 	bl	80035c8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	2002      	movs	r0, #2
 8007bfc:	f7fb fce4 	bl	80035c8 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	e008      	b.n	8007c18 <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 8007c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c08:	b299      	uxth	r1, r3
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3301      	adds	r3, #1
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	dbf2      	blt.n	8007c06 <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	e00e      	b.n	8007c44 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	230a      	movs	r3, #10
 8007c2a:	6939      	ldr	r1, [r7, #16]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f7fe fa55 	bl	80060dc <spiDmaTxTransfer>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f083 0301 	eor.w	r3, r3, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d107      	bne.n	8007c4e <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	3301      	adds	r3, #1
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	dbec      	blt.n	8007c26 <st7735FillRect+0x12a>
 8007c4c:	e000      	b.n	8007c50 <st7735FillRect+0x154>
    {
      break;
 8007c4e:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007c50:	2101      	movs	r1, #1
 8007c52:	2002      	movs	r0, #2
 8007c54:	f7fb fcb8 	bl	80035c8 <gpioPinWrite>
 8007c58:	46b5      	mov	sp, r6
 8007c5a:	e003      	b.n	8007c64 <st7735FillRect+0x168>
  if ((x >= _width) || (y >= _height)) return;
 8007c5c:	bf00      	nop
 8007c5e:	e000      	b.n	8007c62 <st7735FillRect+0x166>
  if ((w < 1) || (h < 1)) return;
 8007c60:	bf00      	nop
 8007c62:	46b5      	mov	sp, r6
}
 8007c64:	3724      	adds	r7, #36	; 0x24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6c:	2000d05a 	.word	0x2000d05a

08007c70 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <st7735SendBuffer+0x44>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 8007c82:	4b0d      	ldr	r3, [pc, #52]	; (8007cb8 <st7735SendBuffer+0x48>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2110      	movs	r1, #16
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe f9a5 	bl	8005fd8 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007c8e:	2101      	movs	r1, #1
 8007c90:	2003      	movs	r0, #3
 8007c92:	f7fb fc99 	bl	80035c8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007c96:	2100      	movs	r1, #0
 8007c98:	2002      	movs	r0, #2
 8007c9a:	f7fb fc95 	bl	80035c8 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f7fe fa19 	bl	80060dc <spiDmaTxTransfer>
  return true;
 8007caa:	2301      	movs	r3, #1
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	2000d060 	.word	0x2000d060
 8007cb8:	2000d05a 	.word	0x2000d05a

08007cbc <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8007cc4:	4a04      	ldr	r2, [pc, #16]	; (8007cd8 <st7735SetCallBack+0x1c>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6013      	str	r3, [r2, #0]

  return true;
 8007cca:	2301      	movs	r3, #1
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	2000d05c 	.word	0x2000d05c

08007cdc <hwInit>:




void hwInit(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  bspInit();
 8007ce0:	f7f9 fa6c 	bl	80011bc <bspInit>

  cliInit();
 8007ce4:	f7f9 fef8 	bl	8001ad8 <cliInit>
  ledInit();
 8007ce8:	f7fc fd06 	bl	80046f8 <ledInit>
  uartInit();
 8007cec:	f7fe fd98 	bl	8006820 <uartInit>
  spiInit();
 8007cf0:	f7fe f860 	bl	8005db4 <spiInit>
  DWT_Delay_Init();
 8007cf4:	f7f9 fd42 	bl	800177c <DWT_Delay_Init>
  buttonInit();
 8007cf8:	f7f9 fd70 	bl	80017dc <buttonInit>
  gpioInit();
 8007cfc:	f7fb fb9a 	bl	8003434 <gpioInit>
  Ds18b20_Init();
 8007d00:	f7fa fe34 	bl	800296c <Ds18b20_Init>
  sonarInit();
 8007d04:	f7fd fe80 	bl	8005a08 <sonarInit>

  //LCD_INIT();
  lcdInit();
 8007d08:	f7fb fdc0 	bl	800388c <lcdInit>
  tdsInit();
 8007d0c:	f7fe fb4c 	bl	80063a8 <tdsInit>

  if (sdInit() == true)
 8007d10:	f7fd fa60 	bl	80051d4 <sdInit>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <hwInit+0x42>
  {
    fatfsInit();
 8007d1a:	f7fb f98d 	bl	8003038 <fatfsInit>
  }

  menuInit();
 8007d1e:	f7fc fdd9 	bl	80048d4 <menuInit>
}
 8007d22:	bf00      	nop
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	4a08      	ldr	r2, [pc, #32]	; (8007d58 <disk_status+0x30>)
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	79fa      	ldrb	r2, [r7, #7]
 8007d40:	4905      	ldr	r1, [pc, #20]	; (8007d58 <disk_status+0x30>)
 8007d42:	440a      	add	r2, r1
 8007d44:	7b12      	ldrb	r2, [r2, #12]
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	2000d090 	.word	0x2000d090

08007d5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	; (8007da4 <disk_initialize+0x48>)
 8007d6e:	5cd3      	ldrb	r3, [r2, r3]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d111      	bne.n	8007d98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	4a0b      	ldr	r2, [pc, #44]	; (8007da4 <disk_initialize+0x48>)
 8007d78:	2101      	movs	r1, #1
 8007d7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <disk_initialize+0x48>)
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	79fa      	ldrb	r2, [r7, #7]
 8007d8a:	4906      	ldr	r1, [pc, #24]	; (8007da4 <disk_initialize+0x48>)
 8007d8c:	440a      	add	r2, r1
 8007d8e:	7b12      	ldrb	r2, [r2, #12]
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	2000d090 	.word	0x2000d090

08007da8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007da8:	b590      	push	{r4, r7, lr}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <disk_read+0x3c>)
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	689c      	ldr	r4, [r3, #8]
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4a07      	ldr	r2, [pc, #28]	; (8007de4 <disk_read+0x3c>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	7b18      	ldrb	r0, [r3, #12]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	47a0      	blx	r4
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	2000d090 	.word	0x2000d090

08007de8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	; (8007e24 <disk_write+0x3c>)
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	68dc      	ldr	r4, [r3, #12]
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <disk_write+0x3c>)
 8007e08:	4413      	add	r3, r2
 8007e0a:	7b18      	ldrb	r0, [r3, #12]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	47a0      	blx	r4
 8007e14:	4603      	mov	r3, r0
 8007e16:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd90      	pop	{r4, r7, pc}
 8007e22:	bf00      	nop
 8007e24:	2000d090 	.word	0x2000d090

08007e28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	603a      	str	r2, [r7, #0]
 8007e32:	71fb      	strb	r3, [r7, #7]
 8007e34:	460b      	mov	r3, r1
 8007e36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <disk_ioctl+0x38>)
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	79fa      	ldrb	r2, [r7, #7]
 8007e46:	4906      	ldr	r1, [pc, #24]	; (8007e60 <disk_ioctl+0x38>)
 8007e48:	440a      	add	r2, r1
 8007e4a:	7b10      	ldrb	r0, [r2, #12]
 8007e4c:	79b9      	ldrb	r1, [r7, #6]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	4798      	blx	r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
  return res;
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	2000d090 	.word	0x2000d090

08007e64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  return 0;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	b21a      	sxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b21b      	sxth	r3, r3
 8007e90:	4313      	orrs	r3, r2
 8007e92:	b21b      	sxth	r3, r3
 8007e94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e96:	89fb      	ldrh	r3, [r7, #14]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3303      	adds	r3, #3
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	3202      	adds	r2, #2
 8007ebc:	7812      	ldrb	r2, [r2, #0]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	3201      	adds	r2, #1
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
	return rv;
 8007edc:	68fb      	ldr	r3, [r7, #12]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	887a      	ldrh	r2, [r7, #2]
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	887b      	ldrh	r3, [r7, #2]
 8007f04:	0a1b      	lsrs	r3, r3, #8
 8007f06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	887a      	ldrh	r2, [r7, #2]
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	0a1b      	lsrs	r3, r3, #8
 8007f3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	607a      	str	r2, [r7, #4]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	0a1b      	lsrs	r3, r3, #8
 8007f5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	701a      	strb	r2, [r3, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	1c53      	adds	r3, r2, #1
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	1c59      	adds	r1, r3, #1
 8007f9c:	6179      	str	r1, [r7, #20]
 8007f9e:	7812      	ldrb	r2, [r2, #0]
 8007fa0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	607b      	str	r3, [r7, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f1      	bne.n	8007f92 <mem_cpy+0x1a>
	}
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007fba:	b480      	push	{r7}
 8007fbc:	b087      	sub	sp, #28
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	617a      	str	r2, [r7, #20]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f3      	bne.n	8007fca <mem_set+0x10>
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007ff0:	b480      	push	{r7}
 8007ff2:	b089      	sub	sp, #36	; 0x24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	61fb      	str	r3, [r7, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	61fa      	str	r2, [r7, #28]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	4619      	mov	r1, r3
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	61ba      	str	r2, [r7, #24]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	1acb      	subs	r3, r1, r3
 800801c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3b01      	subs	r3, #1
 8008022:	607b      	str	r3, [r7, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <mem_cmp+0x40>
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0eb      	beq.n	8008008 <mem_cmp+0x18>

	return r;
 8008030:	697b      	ldr	r3, [r7, #20]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3724      	adds	r7, #36	; 0x24
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008048:	e002      	b.n	8008050 <chk_chr+0x12>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3301      	adds	r3, #1
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <chk_chr+0x26>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	4293      	cmp	r3, r2
 8008062:	d1f2      	bne.n	800804a <chk_chr+0xc>
	return *str;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	781b      	ldrb	r3, [r3, #0]
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800807e:	2300      	movs	r3, #0
 8008080:	60bb      	str	r3, [r7, #8]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e029      	b.n	80080dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008088:	4a27      	ldr	r2, [pc, #156]	; (8008128 <chk_lock+0xb4>)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	4413      	add	r3, r2
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01d      	beq.n	80080d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008096:	4a24      	ldr	r2, [pc, #144]	; (8008128 <chk_lock+0xb4>)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	4413      	add	r3, r2
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d116      	bne.n	80080d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80080a8:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <chk_lock+0xb4>)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	4413      	add	r3, r2
 80080b0:	3304      	adds	r3, #4
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d10c      	bne.n	80080d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80080bc:	4a1a      	ldr	r2, [pc, #104]	; (8008128 <chk_lock+0xb4>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	4413      	add	r3, r2
 80080c4:	3308      	adds	r3, #8
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d102      	bne.n	80080d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80080d0:	e007      	b.n	80080e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80080d2:	2301      	movs	r3, #1
 80080d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3301      	adds	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d9d2      	bls.n	8008088 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d109      	bne.n	80080fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <chk_lock+0x80>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d101      	bne.n	80080f8 <chk_lock+0x84>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e010      	b.n	800811a <chk_lock+0xa6>
 80080f8:	2312      	movs	r3, #18
 80080fa:	e00e      	b.n	800811a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <chk_lock+0xa0>
 8008102:	4a09      	ldr	r2, [pc, #36]	; (8008128 <chk_lock+0xb4>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	4413      	add	r3, r2
 800810a:	330c      	adds	r3, #12
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008112:	d101      	bne.n	8008118 <chk_lock+0xa4>
 8008114:	2310      	movs	r3, #16
 8008116:	e000      	b.n	800811a <chk_lock+0xa6>
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	2000d070 	.word	0x2000d070

0800812c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
 8008136:	e002      	b.n	800813e <enq_lock+0x12>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3301      	adds	r3, #1
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d806      	bhi.n	8008152 <enq_lock+0x26>
 8008144:	4a09      	ldr	r2, [pc, #36]	; (800816c <enq_lock+0x40>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	4413      	add	r3, r2
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f2      	bne.n	8008138 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b02      	cmp	r3, #2
 8008156:	bf14      	ite	ne
 8008158:	2301      	movne	r3, #1
 800815a:	2300      	moveq	r3, #0
 800815c:	b2db      	uxtb	r3, r3
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	2000d070 	.word	0x2000d070

08008170 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e01f      	b.n	80081c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008180:	4a41      	ldr	r2, [pc, #260]	; (8008288 <inc_lock+0x118>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	4413      	add	r3, r2
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d113      	bne.n	80081ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008192:	4a3d      	ldr	r2, [pc, #244]	; (8008288 <inc_lock+0x118>)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	4413      	add	r3, r2
 800819a:	3304      	adds	r3, #4
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d109      	bne.n	80081ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80081a6:	4a38      	ldr	r2, [pc, #224]	; (8008288 <inc_lock+0x118>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	4413      	add	r3, r2
 80081ae:	3308      	adds	r3, #8
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d006      	beq.n	80081c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d9dc      	bls.n	8008180 <inc_lock+0x10>
 80081c6:	e000      	b.n	80081ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80081c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d132      	bne.n	8008236 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e002      	b.n	80081dc <inc_lock+0x6c>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d806      	bhi.n	80081f0 <inc_lock+0x80>
 80081e2:	4a29      	ldr	r2, [pc, #164]	; (8008288 <inc_lock+0x118>)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	4413      	add	r3, r2
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f2      	bne.n	80081d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d101      	bne.n	80081fa <inc_lock+0x8a>
 80081f6:	2300      	movs	r3, #0
 80081f8:	e040      	b.n	800827c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4922      	ldr	r1, [pc, #136]	; (8008288 <inc_lock+0x118>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	440b      	add	r3, r1
 8008206:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	491e      	ldr	r1, [pc, #120]	; (8008288 <inc_lock+0x118>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	440b      	add	r3, r1
 8008214:	3304      	adds	r3, #4
 8008216:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	491a      	ldr	r1, [pc, #104]	; (8008288 <inc_lock+0x118>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	011b      	lsls	r3, r3, #4
 8008222:	440b      	add	r3, r1
 8008224:	3308      	adds	r3, #8
 8008226:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008228:	4a17      	ldr	r2, [pc, #92]	; (8008288 <inc_lock+0x118>)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	4413      	add	r3, r2
 8008230:	330c      	adds	r3, #12
 8008232:	2200      	movs	r2, #0
 8008234:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <inc_lock+0xe0>
 800823c:	4a12      	ldr	r2, [pc, #72]	; (8008288 <inc_lock+0x118>)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	4413      	add	r3, r2
 8008244:	330c      	adds	r3, #12
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <inc_lock+0xe0>
 800824c:	2300      	movs	r3, #0
 800824e:	e015      	b.n	800827c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d108      	bne.n	8008268 <inc_lock+0xf8>
 8008256:	4a0c      	ldr	r2, [pc, #48]	; (8008288 <inc_lock+0x118>)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	4413      	add	r3, r2
 800825e:	330c      	adds	r3, #12
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	e001      	b.n	800826c <inc_lock+0xfc>
 8008268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800826c:	4906      	ldr	r1, [pc, #24]	; (8008288 <inc_lock+0x118>)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	440b      	add	r3, r1
 8008274:	330c      	adds	r3, #12
 8008276:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	2000d070 	.word	0x2000d070

0800828c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3b01      	subs	r3, #1
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d825      	bhi.n	80082ec <dec_lock+0x60>
		n = Files[i].ctr;
 80082a0:	4a17      	ldr	r2, [pc, #92]	; (8008300 <dec_lock+0x74>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	4413      	add	r3, r2
 80082a8:	330c      	adds	r3, #12
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80082ae:	89fb      	ldrh	r3, [r7, #14]
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b4:	d101      	bne.n	80082ba <dec_lock+0x2e>
 80082b6:	2300      	movs	r3, #0
 80082b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80082ba:	89fb      	ldrh	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <dec_lock+0x3a>
 80082c0:	89fb      	ldrh	r3, [r7, #14]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80082c6:	4a0e      	ldr	r2, [pc, #56]	; (8008300 <dec_lock+0x74>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	4413      	add	r3, r2
 80082ce:	330c      	adds	r3, #12
 80082d0:	89fa      	ldrh	r2, [r7, #14]
 80082d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <dec_lock+0x5a>
 80082da:	4a09      	ldr	r2, [pc, #36]	; (8008300 <dec_lock+0x74>)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	4413      	add	r3, r2
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	737b      	strb	r3, [r7, #13]
 80082ea:	e001      	b.n	80082f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80082ec:	2302      	movs	r3, #2
 80082ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80082f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	2000d070 	.word	0x2000d070

08008304 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e010      	b.n	8008334 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008312:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <clear_lock+0x44>)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	4413      	add	r3, r2
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	429a      	cmp	r2, r3
 8008320:	d105      	bne.n	800832e <clear_lock+0x2a>
 8008322:	4a09      	ldr	r2, [pc, #36]	; (8008348 <clear_lock+0x44>)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	4413      	add	r3, r2
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d9eb      	bls.n	8008312 <clear_lock+0xe>
	}
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	2000d070 	.word	0x2000d070

0800834c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	78db      	ldrb	r3, [r3, #3]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d034      	beq.n	80083ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	7858      	ldrb	r0, [r3, #1]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008370:	2301      	movs	r3, #1
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	f7ff fd38 	bl	8007de8 <disk_write>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <sync_window+0x38>
			res = FR_DISK_ERR;
 800837e:	2301      	movs	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
 8008382:	e022      	b.n	80083ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	1ad2      	subs	r2, r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	429a      	cmp	r2, r3
 8008398:	d217      	bcs.n	80083ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	789b      	ldrb	r3, [r3, #2]
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	e010      	b.n	80083c4 <sync_window+0x78>
					wsect += fs->fsize;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4413      	add	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7858      	ldrb	r0, [r3, #1]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083b6:	2301      	movs	r3, #1
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	f7ff fd15 	bl	8007de8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d8eb      	bhi.n	80083a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d01b      	beq.n	8008424 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ffad 	bl	800834c <sync_window>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d113      	bne.n	8008424 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7858      	ldrb	r0, [r3, #1]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008406:	2301      	movs	r3, #1
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	f7ff fccd 	bl	8007da8 <disk_read>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008414:	f04f 33ff 	mov.w	r3, #4294967295
 8008418:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff ff87 	bl	800834c <sync_window>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d158      	bne.n	80084fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b03      	cmp	r3, #3
 800844e:	d148      	bne.n	80084e2 <sync_fs+0xb2>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	791b      	ldrb	r3, [r3, #4]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d144      	bne.n	80084e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3334      	adds	r3, #52	; 0x34
 800845c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008460:	2100      	movs	r1, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fda9 	bl	8007fba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3334      	adds	r3, #52	; 0x34
 800846c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008470:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fd38 	bl	8007eea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3334      	adds	r3, #52	; 0x34
 800847e:	4921      	ldr	r1, [pc, #132]	; (8008504 <sync_fs+0xd4>)
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff fd4d 	bl	8007f20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3334      	adds	r3, #52	; 0x34
 800848a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800848e:	491e      	ldr	r1, [pc, #120]	; (8008508 <sync_fs+0xd8>)
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fd45 	bl	8007f20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3334      	adds	r3, #52	; 0x34
 800849a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f7ff fd3b 	bl	8007f20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3334      	adds	r3, #52	; 0x34
 80084ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7ff fd31 	bl	8007f20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7858      	ldrb	r0, [r3, #1]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d6:	2301      	movs	r3, #1
 80084d8:	f7ff fc86 	bl	8007de8 <disk_write>
			fs->fsi_flag = 0;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fc9c 	bl	8007e28 <disk_ioctl>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <sync_fs+0xca>
 80084f6:	2301      	movs	r3, #1
 80084f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	41615252 	.word	0x41615252
 8008508:	61417272 	.word	0x61417272

0800850c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	3b02      	subs	r3, #2
 800851a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	3b02      	subs	r3, #2
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d301      	bcc.n	800852c <clust2sect+0x20>
 8008528:	2300      	movs	r3, #0
 800852a:	e008      	b.n	800853e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	895b      	ldrh	r3, [r3, #10]
 8008530:	461a      	mov	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	fb03 f202 	mul.w	r2, r3, r2
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4413      	add	r3, r2
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d904      	bls.n	800856a <get_fat+0x20>
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d302      	bcc.n	8008570 <get_fat+0x26>
		val = 1;	/* Internal error */
 800856a:	2301      	movs	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	e08f      	b.n	8008690 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
 8008574:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b03      	cmp	r3, #3
 800857c:	d062      	beq.n	8008644 <get_fat+0xfa>
 800857e:	2b03      	cmp	r3, #3
 8008580:	dc7c      	bgt.n	800867c <get_fat+0x132>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d002      	beq.n	800858c <get_fat+0x42>
 8008586:	2b02      	cmp	r3, #2
 8008588:	d042      	beq.n	8008610 <get_fat+0xc6>
 800858a:	e077      	b.n	800867c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	0a5b      	lsrs	r3, r3, #9
 80085a2:	4413      	add	r3, r2
 80085a4:	4619      	mov	r1, r3
 80085a6:	6938      	ldr	r0, [r7, #16]
 80085a8:	f7ff ff14 	bl	80083d4 <move_window>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d167      	bne.n	8008682 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	60fa      	str	r2, [r7, #12]
 80085b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	0a5b      	lsrs	r3, r3, #9
 80085ce:	4413      	add	r3, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	6938      	ldr	r0, [r7, #16]
 80085d4:	f7ff fefe 	bl	80083d4 <move_window>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d153      	bne.n	8008686 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4413      	add	r3, r2
 80085e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	461a      	mov	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <get_fat+0xbc>
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	091b      	lsrs	r3, r3, #4
 8008604:	e002      	b.n	800860c <get_fat+0xc2>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800860c:	617b      	str	r3, [r7, #20]
			break;
 800860e:	e03f      	b.n	8008690 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	4413      	add	r3, r2
 800861a:	4619      	mov	r1, r3
 800861c:	6938      	ldr	r0, [r7, #16]
 800861e:	f7ff fed9 	bl	80083d4 <move_window>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d130      	bne.n	800868a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008636:	4413      	add	r3, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fc1b 	bl	8007e74 <ld_word>
 800863e:	4603      	mov	r3, r0
 8008640:	617b      	str	r3, [r7, #20]
			break;
 8008642:	e025      	b.n	8008690 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	09db      	lsrs	r3, r3, #7
 800864c:	4413      	add	r3, r2
 800864e:	4619      	mov	r1, r3
 8008650:	6938      	ldr	r0, [r7, #16]
 8008652:	f7ff febf 	bl	80083d4 <move_window>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d118      	bne.n	800868e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800866a:	4413      	add	r3, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fc19 	bl	8007ea4 <ld_dword>
 8008672:	4603      	mov	r3, r0
 8008674:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008678:	617b      	str	r3, [r7, #20]
			break;
 800867a:	e009      	b.n	8008690 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800867c:	2301      	movs	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e006      	b.n	8008690 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008682:	bf00      	nop
 8008684:	e004      	b.n	8008690 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008686:	bf00      	nop
 8008688:	e002      	b.n	8008690 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800868e:	bf00      	nop
		}
	}

	return val;
 8008690:	697b      	ldr	r3, [r7, #20]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800869a:	b590      	push	{r4, r7, lr}
 800869c:	b089      	sub	sp, #36	; 0x24
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80086a6:	2302      	movs	r3, #2
 80086a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	f240 80d2 	bls.w	8008856 <put_fat+0x1bc>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	f080 80cc 	bcs.w	8008856 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	f000 8096 	beq.w	80087f4 <put_fat+0x15a>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	f300 80cd 	bgt.w	8008868 <put_fat+0x1ce>
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d002      	beq.n	80086d8 <put_fat+0x3e>
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d06e      	beq.n	80087b4 <put_fat+0x11a>
 80086d6:	e0c7      	b.n	8008868 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4413      	add	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	0a5b      	lsrs	r3, r3, #9
 80086ee:	4413      	add	r3, r2
 80086f0:	4619      	mov	r1, r3
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fe6e 	bl	80083d4 <move_window>
 80086f8:	4603      	mov	r3, r0
 80086fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f040 80ab 	bne.w	800885a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	1c59      	adds	r1, r3, #1
 800870e:	61b9      	str	r1, [r7, #24]
 8008710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008714:	4413      	add	r3, r2
 8008716:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00d      	beq.n	800873e <put_fat+0xa4>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b25b      	sxtb	r3, r3
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	b25a      	sxtb	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	b25b      	sxtb	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b25b      	sxtb	r3, r3
 800873a:	b2db      	uxtb	r3, r3
 800873c:	e001      	b.n	8008742 <put_fat+0xa8>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	0a5b      	lsrs	r3, r3, #9
 8008754:	4413      	add	r3, r2
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff fe3b 	bl	80083d4 <move_window>
 800875e:	4603      	mov	r3, r0
 8008760:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d17a      	bne.n	800885e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008774:	4413      	add	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <put_fat+0xf0>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	b2db      	uxtb	r3, r3
 8008788:	e00e      	b.n	80087a8 <put_fat+0x10e>
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b25b      	sxtb	r3, r3
 8008790:	f023 030f 	bic.w	r3, r3, #15
 8008794:	b25a      	sxtb	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	b25b      	sxtb	r3, r3
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	b25b      	sxtb	r3, r3
 80087a2:	4313      	orrs	r3, r2
 80087a4:	b25b      	sxtb	r3, r3
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	70da      	strb	r2, [r3, #3]
			break;
 80087b2:	e059      	b.n	8008868 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	0a1b      	lsrs	r3, r3, #8
 80087bc:	4413      	add	r3, r2
 80087be:	4619      	mov	r1, r3
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7ff fe07 	bl	80083d4 <move_window>
 80087c6:	4603      	mov	r3, r0
 80087c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087ca:	7ffb      	ldrb	r3, [r7, #31]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d148      	bne.n	8008862 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80087de:	4413      	add	r3, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	b292      	uxth	r2, r2
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fb7f 	bl	8007eea <st_word>
			fs->wflag = 1;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	70da      	strb	r2, [r3, #3]
			break;
 80087f2:	e039      	b.n	8008868 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	09db      	lsrs	r3, r3, #7
 80087fc:	4413      	add	r3, r2
 80087fe:	4619      	mov	r1, r3
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f7ff fde7 	bl	80083d4 <move_window>
 8008806:	4603      	mov	r3, r0
 8008808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800880a:	7ffb      	ldrb	r3, [r7, #31]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d12a      	bne.n	8008866 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008824:	4413      	add	r3, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff fb3c 	bl	8007ea4 <ld_dword>
 800882c:	4603      	mov	r3, r0
 800882e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008832:	4323      	orrs	r3, r4
 8008834:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008844:	4413      	add	r3, r2
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff fb69 	bl	8007f20 <st_dword>
			fs->wflag = 1;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	70da      	strb	r2, [r3, #3]
			break;
 8008854:	e008      	b.n	8008868 <put_fat+0x1ce>
		}
	}
 8008856:	bf00      	nop
 8008858:	e006      	b.n	8008868 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800885a:	bf00      	nop
 800885c:	e004      	b.n	8008868 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800885e:	bf00      	nop
 8008860:	e002      	b.n	8008868 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008862:	bf00      	nop
 8008864:	e000      	b.n	8008868 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008866:	bf00      	nop
	return res;
 8008868:	7ffb      	ldrb	r3, [r7, #31]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3724      	adds	r7, #36	; 0x24
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}

08008872 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b088      	sub	sp, #32
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d904      	bls.n	8008898 <remove_chain+0x26>
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	d301      	bcc.n	800889c <remove_chain+0x2a>
 8008898:	2302      	movs	r3, #2
 800889a:	e04b      	b.n	8008934 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	69b8      	ldr	r0, [r7, #24]
 80088aa:	f7ff fef6 	bl	800869a <put_fat>
 80088ae:	4603      	mov	r3, r0
 80088b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80088b2:	7ffb      	ldrb	r3, [r7, #31]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <remove_chain+0x4a>
 80088b8:	7ffb      	ldrb	r3, [r7, #31]
 80088ba:	e03b      	b.n	8008934 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80088bc:	68b9      	ldr	r1, [r7, #8]
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff fe43 	bl	800854a <get_fat>
 80088c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d031      	beq.n	8008930 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d101      	bne.n	80088d6 <remove_chain+0x64>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e02e      	b.n	8008934 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d101      	bne.n	80088e2 <remove_chain+0x70>
 80088de:	2301      	movs	r3, #1
 80088e0:	e028      	b.n	8008934 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80088e2:	2200      	movs	r2, #0
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	69b8      	ldr	r0, [r7, #24]
 80088e8:	f7ff fed7 	bl	800869a <put_fat>
 80088ec:	4603      	mov	r3, r0
 80088ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80088f0:	7ffb      	ldrb	r3, [r7, #31]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <remove_chain+0x88>
 80088f6:	7ffb      	ldrb	r3, [r7, #31]
 80088f8:	e01c      	b.n	8008934 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	695a      	ldr	r2, [r3, #20]
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	3b02      	subs	r3, #2
 8008904:	429a      	cmp	r2, r3
 8008906:	d20b      	bcs.n	8008920 <remove_chain+0xae>
			fs->free_clst++;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	791b      	ldrb	r3, [r3, #4]
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3c6      	bcc.n	80088bc <remove_chain+0x4a>
 800892e:	e000      	b.n	8008932 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008930:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10d      	bne.n	800896e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <create_chain+0x2c>
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	429a      	cmp	r2, r3
 8008966:	d31b      	bcc.n	80089a0 <create_chain+0x64>
 8008968:	2301      	movs	r3, #1
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e018      	b.n	80089a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff fdea 	bl	800854a <get_fat>
 8008976:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d801      	bhi.n	8008982 <create_chain+0x46>
 800897e:	2301      	movs	r3, #1
 8008980:	e070      	b.n	8008a64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d101      	bne.n	800898e <create_chain+0x52>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	e06a      	b.n	8008a64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	429a      	cmp	r2, r3
 8008996:	d201      	bcs.n	800899c <create_chain+0x60>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	e063      	b.n	8008a64 <create_chain+0x128>
		scl = clst;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	3301      	adds	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d307      	bcc.n	80089c4 <create_chain+0x88>
				ncl = 2;
 80089b4:	2302      	movs	r3, #2
 80089b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d901      	bls.n	80089c4 <create_chain+0x88>
 80089c0:	2300      	movs	r3, #0
 80089c2:	e04f      	b.n	8008a64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80089c4:	69f9      	ldr	r1, [r7, #28]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fdbf 	bl	800854a <get_fat>
 80089cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d003      	beq.n	80089e2 <create_chain+0xa6>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d101      	bne.n	80089e6 <create_chain+0xaa>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	e03e      	b.n	8008a64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d1da      	bne.n	80089a4 <create_chain+0x68>
 80089ee:	2300      	movs	r3, #0
 80089f0:	e038      	b.n	8008a64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80089f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80089f4:	f04f 32ff 	mov.w	r2, #4294967295
 80089f8:	69f9      	ldr	r1, [r7, #28]
 80089fa:	6938      	ldr	r0, [r7, #16]
 80089fc:	f7ff fe4d 	bl	800869a <put_fat>
 8008a00:	4603      	mov	r3, r0
 8008a02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <create_chain+0xe2>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a10:	69fa      	ldr	r2, [r7, #28]
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6938      	ldr	r0, [r7, #16]
 8008a16:	f7ff fe40 	bl	800869a <put_fat>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d116      	bne.n	8008a52 <create_chain+0x116>
		fs->last_clst = ncl;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	3b02      	subs	r3, #2
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d804      	bhi.n	8008a42 <create_chain+0x106>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	1e5a      	subs	r2, r3, #1
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	791b      	ldrb	r3, [r3, #4]
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	711a      	strb	r2, [r3, #4]
 8008a50:	e007      	b.n	8008a62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d102      	bne.n	8008a5e <create_chain+0x122>
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	e000      	b.n	8008a60 <create_chain+0x124>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008a62:	69fb      	ldr	r3, [r7, #28]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3720      	adds	r7, #32
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	3304      	adds	r3, #4
 8008a82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	0a5b      	lsrs	r3, r3, #9
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	8952      	ldrh	r2, [r2, #10]
 8008a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	613a      	str	r2, [r7, #16]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <clmt_clust+0x3a>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e010      	b.n	8008ac8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d307      	bcc.n	8008abe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008abc:	e7e9      	b.n	8008a92 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008abe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	4413      	add	r3, r2
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aea:	d204      	bcs.n	8008af6 <dir_sdi+0x22>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f003 031f 	and.w	r3, r3, #31
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <dir_sdi+0x26>
		return FR_INT_ERR;
 8008af6:	2302      	movs	r3, #2
 8008af8:	e063      	b.n	8008bc2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d106      	bne.n	8008b1a <dir_sdi+0x46>
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d902      	bls.n	8008b1a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10c      	bne.n	8008b3a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	095b      	lsrs	r3, r3, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	8912      	ldrh	r2, [r2, #8]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d301      	bcc.n	8008b30 <dir_sdi+0x5c>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e048      	b.n	8008bc2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	61da      	str	r2, [r3, #28]
 8008b38:	e029      	b.n	8008b8e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	895b      	ldrh	r3, [r3, #10]
 8008b3e:	025b      	lsls	r3, r3, #9
 8008b40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b42:	e019      	b.n	8008b78 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff fcfe 	bl	800854a <get_fat>
 8008b4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d101      	bne.n	8008b5c <dir_sdi+0x88>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e032      	b.n	8008bc2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d904      	bls.n	8008b6c <dir_sdi+0x98>
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d301      	bcc.n	8008b70 <dir_sdi+0x9c>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e028      	b.n	8008bc2 <dir_sdi+0xee>
			ofs -= csz;
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d2e1      	bcs.n	8008b44 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008b80:	6979      	ldr	r1, [r7, #20]
 8008b82:	6938      	ldr	r0, [r7, #16]
 8008b84:	f7ff fcc2 	bl	800850c <clust2sect>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <dir_sdi+0xcc>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e010      	b.n	8008bc2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	69da      	ldr	r2, [r3, #28]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	0a5b      	lsrs	r3, r3, #9
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	441a      	add	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b086      	sub	sp, #24
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	3320      	adds	r3, #32
 8008be0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <dir_next+0x28>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf0:	d301      	bcc.n	8008bf6 <dir_next+0x2c>
 8008bf2:	2304      	movs	r3, #4
 8008bf4:	e0aa      	b.n	8008d4c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f040 8098 	bne.w	8008d32 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	095b      	lsrs	r3, r3, #5
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	8912      	ldrh	r2, [r2, #8]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	f0c0 8088 	bcc.w	8008d32 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	61da      	str	r2, [r3, #28]
 8008c28:	2304      	movs	r3, #4
 8008c2a:	e08f      	b.n	8008d4c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	0a5b      	lsrs	r3, r3, #9
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	8952      	ldrh	r2, [r2, #10]
 8008c34:	3a01      	subs	r2, #1
 8008c36:	4013      	ands	r3, r2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d17a      	bne.n	8008d32 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7ff fc80 	bl	800854a <get_fat>
 8008c4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d801      	bhi.n	8008c56 <dir_next+0x8c>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e07a      	b.n	8008d4c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d101      	bne.n	8008c62 <dir_next+0x98>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e074      	b.n	8008d4c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d358      	bcc.n	8008d1e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	61da      	str	r2, [r3, #28]
 8008c78:	2304      	movs	r3, #4
 8008c7a:	e067      	b.n	8008d4c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f7ff fe59 	bl	800893c <create_chain>
 8008c8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <dir_next+0xcc>
 8008c92:	2307      	movs	r3, #7
 8008c94:	e05a      	b.n	8008d4c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <dir_next+0xd6>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e055      	b.n	8008d4c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca6:	d101      	bne.n	8008cac <dir_next+0xe2>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e04f      	b.n	8008d4c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fb4d 	bl	800834c <sync_window>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <dir_next+0xf2>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e047      	b.n	8008d4c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3334      	adds	r3, #52	; 0x34
 8008cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff f977 	bl	8007fba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ccc:	2300      	movs	r3, #0
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	6979      	ldr	r1, [r7, #20]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fc1a 	bl	800850c <clust2sect>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8008cde:	e012      	b.n	8008d06 <dir_next+0x13c>
						fs->wflag = 1;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff fb30 	bl	800834c <sync_window>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <dir_next+0x12c>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e02a      	b.n	8008d4c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	631a      	str	r2, [r3, #48]	; 0x30
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	895b      	ldrh	r3, [r3, #10]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d3e6      	bcc.n	8008ce0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad2      	subs	r2, r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008d24:	6979      	ldr	r1, [r7, #20]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fbf0 	bl	800850c <clust2sect>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d44:	441a      	add	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d64:	2100      	movs	r1, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff feb4 	bl	8008ad4 <dir_sdi>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d12b      	bne.n	8008dce <dir_alloc+0x7a>
		n = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f7ff fb27 	bl	80083d4 <move_window>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d11d      	bne.n	8008dcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2be5      	cmp	r3, #229	; 0xe5
 8008d98:	d004      	beq.n	8008da4 <dir_alloc+0x50>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d107      	bne.n	8008db4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d102      	bne.n	8008db8 <dir_alloc+0x64>
 8008db2:	e00c      	b.n	8008dce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008db8:	2101      	movs	r1, #1
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ff05 	bl	8008bca <dir_next>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0d7      	beq.n	8008d7a <dir_alloc+0x26>
 8008dca:	e000      	b.n	8008dce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008dcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d101      	bne.n	8008dd8 <dir_alloc+0x84>
 8008dd4:	2307      	movs	r3, #7
 8008dd6:	75fb      	strb	r3, [r7, #23]
	return res;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	331a      	adds	r3, #26
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff f83f 	bl	8007e74 <ld_word>
 8008df6:	4603      	mov	r3, r0
 8008df8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d109      	bne.n	8008e16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	3314      	adds	r3, #20
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff f834 	bl	8007e74 <ld_word>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	041b      	lsls	r3, r3, #16
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e16:	68fb      	ldr	r3, [r7, #12]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	331a      	adds	r3, #26
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	b292      	uxth	r2, r2
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff f857 	bl	8007eea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d109      	bne.n	8008e58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f103 0214 	add.w	r2, r3, #20
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	0c1b      	lsrs	r3, r3, #16
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4619      	mov	r1, r3
 8008e52:	4610      	mov	r0, r2
 8008e54:	f7ff f849 	bl	8007eea <st_word>
	}
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	331a      	adds	r3, #26
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff f800 	bl	8007e74 <ld_word>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <cmp_lfn+0x1e>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e059      	b.n	8008f32 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e86:	1e5a      	subs	r2, r3, #1
 8008e88:	4613      	mov	r3, r2
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008e94:	2301      	movs	r3, #1
 8008e96:	81fb      	strh	r3, [r7, #14]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	e033      	b.n	8008f06 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008e9e:	4a27      	ldr	r2, [pc, #156]	; (8008f3c <cmp_lfn+0xdc>)
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	4413      	add	r3, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe ffe1 	bl	8007e74 <ld_word>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008eb6:	89fb      	ldrh	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8008ec0:	d812      	bhi.n	8008ee8 <cmp_lfn+0x88>
 8008ec2:	89bb      	ldrh	r3, [r7, #12]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f002 fea1 	bl	800bc0c <ff_wtoupper>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461c      	mov	r4, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	617a      	str	r2, [r7, #20]
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f002 fe95 	bl	800bc0c <ff_wtoupper>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d001      	beq.n	8008eec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e022      	b.n	8008f32 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008eec:	89bb      	ldrh	r3, [r7, #12]
 8008eee:	81fb      	strh	r3, [r7, #14]
 8008ef0:	e006      	b.n	8008f00 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008ef2:	89bb      	ldrh	r3, [r7, #12]
 8008ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d001      	beq.n	8008f00 <cmp_lfn+0xa0>
 8008efc:	2300      	movs	r3, #0
 8008efe:	e018      	b.n	8008f32 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3301      	adds	r3, #1
 8008f04:	613b      	str	r3, [r7, #16]
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b0c      	cmp	r3, #12
 8008f0a:	d9c8      	bls.n	8008e9e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <cmp_lfn+0xd0>
 8008f18:	89fb      	ldrh	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <cmp_lfn+0xd0>
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	4413      	add	r3, r2
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <cmp_lfn+0xd0>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e000      	b.n	8008f32 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008f30:	2301      	movs	r3, #1
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	371c      	adds	r7, #28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd90      	pop	{r4, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	080251e4 	.word	0x080251e4

08008f40 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	331a      	adds	r3, #26
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe ff90 	bl	8007e74 <ld_word>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <pick_lfn+0x1e>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e04d      	b.n	8008ffa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f66:	1e5a      	subs	r2, r3, #1
 8008f68:	4613      	mov	r3, r2
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f74:	2301      	movs	r3, #1
 8008f76:	81fb      	strh	r3, [r7, #14]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	e028      	b.n	8008fd0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f7e:	4a21      	ldr	r2, [pc, #132]	; (8009004 <pick_lfn+0xc4>)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	4413      	add	r3, r2
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe ff71 	bl	8007e74 <ld_word>
 8008f92:	4603      	mov	r3, r0
 8008f94:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008f96:	89fb      	ldrh	r3, [r7, #14]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00f      	beq.n	8008fbc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2bfe      	cmp	r3, #254	; 0xfe
 8008fa0:	d901      	bls.n	8008fa6 <pick_lfn+0x66>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e029      	b.n	8008ffa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008fa6:	89bb      	ldrh	r3, [r7, #12]
 8008fa8:	81fb      	strh	r3, [r7, #14]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	617a      	str	r2, [r7, #20]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	89fa      	ldrh	r2, [r7, #14]
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	e006      	b.n	8008fca <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008fbc:	89bb      	ldrh	r3, [r7, #12]
 8008fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d001      	beq.n	8008fca <pick_lfn+0x8a>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e017      	b.n	8008ffa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2b0c      	cmp	r3, #12
 8008fd4:	d9d3      	bls.n	8008f7e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2bfe      	cmp	r3, #254	; 0xfe
 8008fe6:	d901      	bls.n	8008fec <pick_lfn+0xac>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e006      	b.n	8008ffa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008ff8:	2301      	movs	r3, #1
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	080251e4 	.word	0x080251e4

08009008 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	4611      	mov	r1, r2
 8009014:	461a      	mov	r2, r3
 8009016:	460b      	mov	r3, r1
 8009018:	71fb      	strb	r3, [r7, #7]
 800901a:	4613      	mov	r3, r2
 800901c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	330d      	adds	r3, #13
 8009022:	79ba      	ldrb	r2, [r7, #6]
 8009024:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	330b      	adds	r3, #11
 800902a:	220f      	movs	r2, #15
 800902c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	330c      	adds	r3, #12
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	331a      	adds	r3, #26
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe ff54 	bl	8007eea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	1e5a      	subs	r2, r3, #1
 8009046:	4613      	mov	r3, r2
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	82fb      	strh	r3, [r7, #22]
 8009056:	2300      	movs	r3, #0
 8009058:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800905a:	8afb      	ldrh	r3, [r7, #22]
 800905c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009060:	4293      	cmp	r3, r2
 8009062:	d007      	beq.n	8009074 <put_lfn+0x6c>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	61fa      	str	r2, [r7, #28]
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009074:	4a17      	ldr	r2, [pc, #92]	; (80090d4 <put_lfn+0xcc>)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	4413      	add	r3, r2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	4413      	add	r3, r2
 8009082:	8afa      	ldrh	r2, [r7, #22]
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe ff2f 	bl	8007eea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800908c:	8afb      	ldrh	r3, [r7, #22]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <put_lfn+0x90>
 8009092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009096:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	3301      	adds	r3, #1
 800909c:	61bb      	str	r3, [r7, #24]
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b0c      	cmp	r3, #12
 80090a2:	d9da      	bls.n	800905a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80090a4:	8afb      	ldrh	r3, [r7, #22]
 80090a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d006      	beq.n	80090bc <put_lfn+0xb4>
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4413      	add	r3, r2
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d103      	bne.n	80090c4 <put_lfn+0xbc>
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	79fa      	ldrb	r2, [r7, #7]
 80090c8:	701a      	strb	r2, [r3, #0]
}
 80090ca:	bf00      	nop
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	080251e4 	.word	0x080251e4

080090d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08c      	sub	sp, #48	; 0x30
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80090e6:	220b      	movs	r2, #11
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7fe ff44 	bl	8007f78 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d92b      	bls.n	800914e <gen_numname+0x76>
		sr = seq;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80090fa:	e022      	b.n	8009142 <gen_numname+0x6a>
			wc = *lfn++;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	1c9a      	adds	r2, r3, #2
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009106:	2300      	movs	r3, #0
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28
 800910a:	e017      	b.n	800913c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	005a      	lsls	r2, r3, #1
 8009110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	4413      	add	r3, r2
 8009118:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800911a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <gen_numname+0x5e>
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009130:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009134:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	3301      	adds	r3, #1
 800913a:	62bb      	str	r3, [r7, #40]	; 0x28
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	2b0f      	cmp	r3, #15
 8009140:	d9e4      	bls.n	800910c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1d8      	bne.n	80090fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800914e:	2307      	movs	r3, #7
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	b2db      	uxtb	r3, r3
 800915c:	3330      	adds	r3, #48	; 0x30
 800915e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009166:	2b39      	cmp	r3, #57	; 0x39
 8009168:	d904      	bls.n	8009174 <gen_numname+0x9c>
 800916a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800916e:	3307      	adds	r3, #7
 8009170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	1e5a      	subs	r2, r3, #1
 8009178:	62ba      	str	r2, [r7, #40]	; 0x28
 800917a:	3330      	adds	r3, #48	; 0x30
 800917c:	443b      	add	r3, r7
 800917e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009182:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	091b      	lsrs	r3, r3, #4
 800918a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1df      	bne.n	8009152 <gen_numname+0x7a>
	ns[i] = '~';
 8009192:	f107 0214 	add.w	r2, r7, #20
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	4413      	add	r3, r2
 800919a:	227e      	movs	r2, #126	; 0x7e
 800919c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800919e:	2300      	movs	r3, #0
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
 80091a2:	e002      	b.n	80091aa <gen_numname+0xd2>
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	3301      	adds	r3, #1
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
 80091aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d205      	bcs.n	80091be <gen_numname+0xe6>
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	4413      	add	r3, r2
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d1f2      	bne.n	80091a4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	2b07      	cmp	r3, #7
 80091c2:	d807      	bhi.n	80091d4 <gen_numname+0xfc>
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80091ca:	3330      	adds	r3, #48	; 0x30
 80091cc:	443b      	add	r3, r7
 80091ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80091d2:	e000      	b.n	80091d6 <gen_numname+0xfe>
 80091d4:	2120      	movs	r1, #32
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	627a      	str	r2, [r7, #36]	; 0x24
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	460a      	mov	r2, r1
 80091e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	2b07      	cmp	r3, #7
 80091e8:	d9e9      	bls.n	80091be <gen_numname+0xe6>
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	3730      	adds	r7, #48	; 0x30
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009200:	230b      	movs	r3, #11
 8009202:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	b2da      	uxtb	r2, r3
 8009208:	0852      	lsrs	r2, r2, #1
 800920a:	01db      	lsls	r3, r3, #7
 800920c:	4313      	orrs	r3, r2
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	1c59      	adds	r1, r3, #1
 8009214:	6079      	str	r1, [r7, #4]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	4413      	add	r3, r2
 800921a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	3b01      	subs	r3, #1
 8009220:	60bb      	str	r3, [r7, #8]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1ed      	bne.n	8009204 <sum_sfn+0x10>
	return sum;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009240:	2304      	movs	r3, #4
 8009242:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800924a:	23ff      	movs	r3, #255	; 0xff
 800924c:	757b      	strb	r3, [r7, #21]
 800924e:	23ff      	movs	r3, #255	; 0xff
 8009250:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009252:	e081      	b.n	8009358 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	4619      	mov	r1, r3
 800925a:	6938      	ldr	r0, [r7, #16]
 800925c:	f7ff f8ba 	bl	80083d4 <move_window>
 8009260:	4603      	mov	r3, r0
 8009262:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d17c      	bne.n	8009364 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009272:	7dbb      	ldrb	r3, [r7, #22]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009278:	2304      	movs	r3, #4
 800927a:	75fb      	strb	r3, [r7, #23]
 800927c:	e077      	b.n	800936e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	330b      	adds	r3, #11
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800928a:	73fb      	strb	r3, [r7, #15]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7bfa      	ldrb	r2, [r7, #15]
 8009290:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009292:	7dbb      	ldrb	r3, [r7, #22]
 8009294:	2be5      	cmp	r3, #229	; 0xe5
 8009296:	d00e      	beq.n	80092b6 <dir_read+0x80>
 8009298:	7dbb      	ldrb	r3, [r7, #22]
 800929a:	2b2e      	cmp	r3, #46	; 0x2e
 800929c:	d00b      	beq.n	80092b6 <dir_read+0x80>
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	f023 0320 	bic.w	r3, r3, #32
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	bf0c      	ite	eq
 80092a8:	2301      	moveq	r3, #1
 80092aa:	2300      	movne	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d002      	beq.n	80092bc <dir_read+0x86>
				ord = 0xFF;
 80092b6:	23ff      	movs	r3, #255	; 0xff
 80092b8:	757b      	strb	r3, [r7, #21]
 80092ba:	e044      	b.n	8009346 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b0f      	cmp	r3, #15
 80092c0:	d12f      	bne.n	8009322 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80092c2:	7dbb      	ldrb	r3, [r7, #22]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00d      	beq.n	80092e8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	7b5b      	ldrb	r3, [r3, #13]
 80092d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80092d4:	7dbb      	ldrb	r3, [r7, #22]
 80092d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092da:	75bb      	strb	r3, [r7, #22]
 80092dc:	7dbb      	ldrb	r3, [r7, #22]
 80092de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	695a      	ldr	r2, [r3, #20]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80092e8:	7dba      	ldrb	r2, [r7, #22]
 80092ea:	7d7b      	ldrb	r3, [r7, #21]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d115      	bne.n	800931c <dir_read+0xe6>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	330d      	adds	r3, #13
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	7d3a      	ldrb	r2, [r7, #20]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d10e      	bne.n	800931c <dir_read+0xe6>
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7ff fe19 	bl	8008f40 <pick_lfn>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <dir_read+0xe6>
 8009314:	7d7b      	ldrb	r3, [r7, #21]
 8009316:	3b01      	subs	r3, #1
 8009318:	b2db      	uxtb	r3, r3
 800931a:	e000      	b.n	800931e <dir_read+0xe8>
 800931c:	23ff      	movs	r3, #255	; 0xff
 800931e:	757b      	strb	r3, [r7, #21]
 8009320:	e011      	b.n	8009346 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009322:	7d7b      	ldrb	r3, [r7, #21]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d109      	bne.n	800933c <dir_read+0x106>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff ff61 	bl	80091f4 <sum_sfn>
 8009332:	4603      	mov	r3, r0
 8009334:	461a      	mov	r2, r3
 8009336:	7d3b      	ldrb	r3, [r7, #20]
 8009338:	4293      	cmp	r3, r2
 800933a:	d015      	beq.n	8009368 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f04f 32ff 	mov.w	r2, #4294967295
 8009342:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8009344:	e010      	b.n	8009368 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009346:	2100      	movs	r1, #0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff fc3e 	bl	8008bca <dir_next>
 800934e:	4603      	mov	r3, r0
 8009350:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <dir_read+0x136>
	while (dp->sect) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f47f af79 	bne.w	8009254 <dir_read+0x1e>
 8009362:	e004      	b.n	800936e <dir_read+0x138>
		if (res != FR_OK) break;
 8009364:	bf00      	nop
 8009366:	e002      	b.n	800936e <dir_read+0x138>
					break;
 8009368:	bf00      	nop
 800936a:	e000      	b.n	800936e <dir_read+0x138>
		if (res != FR_OK) break;
 800936c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <dir_read+0x144>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	61da      	str	r2, [r3, #28]
	return res;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009392:	2100      	movs	r1, #0
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fb9d 	bl	8008ad4 <dir_sdi>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <dir_find+0x24>
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	e0a9      	b.n	80094fc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80093a8:	23ff      	movs	r3, #255	; 0xff
 80093aa:	753b      	strb	r3, [r7, #20]
 80093ac:	7d3b      	ldrb	r3, [r7, #20]
 80093ae:	757b      	strb	r3, [r7, #21]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	4619      	mov	r1, r3
 80093be:	6938      	ldr	r0, [r7, #16]
 80093c0:	f7ff f808 	bl	80083d4 <move_window>
 80093c4:	4603      	mov	r3, r0
 80093c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 8090 	bne.w	80094f0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80093d8:	7dbb      	ldrb	r3, [r7, #22]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <dir_find+0x60>
 80093de:	2304      	movs	r3, #4
 80093e0:	75fb      	strb	r3, [r7, #23]
 80093e2:	e08a      	b.n	80094fa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	330b      	adds	r3, #11
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f0:	73fb      	strb	r3, [r7, #15]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7bfa      	ldrb	r2, [r7, #15]
 80093f6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80093f8:	7dbb      	ldrb	r3, [r7, #22]
 80093fa:	2be5      	cmp	r3, #229	; 0xe5
 80093fc:	d007      	beq.n	800940e <dir_find+0x8a>
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	2b00      	cmp	r3, #0
 8009406:	d009      	beq.n	800941c <dir_find+0x98>
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b0f      	cmp	r3, #15
 800940c:	d006      	beq.n	800941c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800940e:	23ff      	movs	r3, #255	; 0xff
 8009410:	757b      	strb	r3, [r7, #21]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
 800941a:	e05e      	b.n	80094da <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b0f      	cmp	r3, #15
 8009420:	d136      	bne.n	8009490 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d154      	bne.n	80094da <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009430:	7dbb      	ldrb	r3, [r7, #22]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	7b5b      	ldrb	r3, [r3, #13]
 8009440:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009442:	7dbb      	ldrb	r3, [r7, #22]
 8009444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009448:	75bb      	strb	r3, [r7, #22]
 800944a:	7dbb      	ldrb	r3, [r7, #22]
 800944c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695a      	ldr	r2, [r3, #20]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	7d7b      	ldrb	r3, [r7, #21]
 800945a:	429a      	cmp	r2, r3
 800945c:	d115      	bne.n	800948a <dir_find+0x106>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	330d      	adds	r3, #13
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	7d3a      	ldrb	r2, [r7, #20]
 8009468:	429a      	cmp	r2, r3
 800946a:	d10e      	bne.n	800948a <dir_find+0x106>
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7ff fcf2 	bl	8008e60 <cmp_lfn>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <dir_find+0x106>
 8009482:	7d7b      	ldrb	r3, [r7, #21]
 8009484:	3b01      	subs	r3, #1
 8009486:	b2db      	uxtb	r3, r3
 8009488:	e000      	b.n	800948c <dir_find+0x108>
 800948a:	23ff      	movs	r3, #255	; 0xff
 800948c:	757b      	strb	r3, [r7, #21]
 800948e:	e024      	b.n	80094da <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009490:	7d7b      	ldrb	r3, [r7, #21]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <dir_find+0x126>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff feaa 	bl	80091f4 <sum_sfn>
 80094a0:	4603      	mov	r3, r0
 80094a2:	461a      	mov	r2, r3
 80094a4:	7d3b      	ldrb	r3, [r7, #20]
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d024      	beq.n	80094f4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <dir_find+0x14a>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a18      	ldr	r0, [r3, #32]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	220b      	movs	r2, #11
 80094c2:	4619      	mov	r1, r3
 80094c4:	f7fe fd94 	bl	8007ff0 <mem_cmp>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d014      	beq.n	80094f8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80094ce:	23ff      	movs	r3, #255	; 0xff
 80094d0:	757b      	strb	r3, [r7, #21]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fb74 	bl	8008bca <dir_next>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f43f af65 	beq.w	80093b8 <dir_find+0x34>
 80094ee:	e004      	b.n	80094fa <dir_find+0x176>
		if (res != FR_OK) break;
 80094f0:	bf00      	nop
 80094f2:	e002      	b.n	80094fa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80094f8:	bf00      	nop

	return res;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08c      	sub	sp, #48	; 0x30
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009518:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <dir_register+0x20>
 8009520:	2306      	movs	r3, #6
 8009522:	e0e0      	b.n	80096e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009524:	2300      	movs	r3, #0
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
 8009528:	e002      	b.n	8009530 <dir_register+0x2c>
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	3301      	adds	r3, #1
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1f4      	bne.n	800952a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009546:	f107 030c 	add.w	r3, r7, #12
 800954a:	220c      	movs	r2, #12
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fd13 	bl	8007f78 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d032      	beq.n	80095c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2240      	movs	r2, #64	; 0x40
 8009560:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009564:	2301      	movs	r3, #1
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
 8009568:	e016      	b.n	8009598 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	f107 010c 	add.w	r1, r7, #12
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	f7ff fdad 	bl	80090d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff ff00 	bl	8009384 <dir_find>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800958a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	3301      	adds	r3, #1
 8009596:	62bb      	str	r3, [r7, #40]	; 0x28
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	2b63      	cmp	r3, #99	; 0x63
 800959c:	d9e5      	bls.n	800956a <dir_register+0x66>
 800959e:	e000      	b.n	80095a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80095a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	2b64      	cmp	r3, #100	; 0x64
 80095a6:	d101      	bne.n	80095ac <dir_register+0xa8>
 80095a8:	2307      	movs	r3, #7
 80095aa:	e09c      	b.n	80096e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80095ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d002      	beq.n	80095ba <dir_register+0xb6>
 80095b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095b8:	e095      	b.n	80096e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80095ba:	7dfa      	ldrb	r2, [r7, #23]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <dir_register+0xd8>
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	330c      	adds	r3, #12
 80095d0:	4a47      	ldr	r2, [pc, #284]	; (80096f0 <dir_register+0x1ec>)
 80095d2:	fba2 2303 	umull	r2, r3, r2, r3
 80095d6:	089b      	lsrs	r3, r3, #2
 80095d8:	3301      	adds	r3, #1
 80095da:	e000      	b.n	80095de <dir_register+0xda>
 80095dc:	2301      	movs	r3, #1
 80095de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80095e0:	6a39      	ldr	r1, [r7, #32]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fbb6 	bl	8008d54 <dir_alloc>
 80095e8:	4603      	mov	r3, r0
 80095ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80095ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d148      	bne.n	8009688 <dir_register+0x184>
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	623b      	str	r3, [r7, #32]
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d042      	beq.n	8009688 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695a      	ldr	r2, [r3, #20]
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	015b      	lsls	r3, r3, #5
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff fa60 	bl	8008ad4 <dir_sdi>
 8009614:	4603      	mov	r3, r0
 8009616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800961a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800961e:	2b00      	cmp	r3, #0
 8009620:	d132      	bne.n	8009688 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3324      	adds	r3, #36	; 0x24
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fde4 	bl	80091f4 <sum_sfn>
 800962c:	4603      	mov	r3, r0
 800962e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	4619      	mov	r1, r3
 8009636:	69f8      	ldr	r0, [r7, #28]
 8009638:	f7fe fecc 	bl	80083d4 <move_window>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009646:	2b00      	cmp	r3, #0
 8009648:	d11d      	bne.n	8009686 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	68d8      	ldr	r0, [r3, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a19      	ldr	r1, [r3, #32]
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	b2da      	uxtb	r2, r3
 8009656:	7efb      	ldrb	r3, [r7, #27]
 8009658:	f7ff fcd6 	bl	8009008 <put_lfn>
				fs->wflag = 1;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2201      	movs	r2, #1
 8009660:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009662:	2100      	movs	r1, #0
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fab0 	bl	8008bca <dir_next>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009674:	2b00      	cmp	r3, #0
 8009676:	d107      	bne.n	8009688 <dir_register+0x184>
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	3b01      	subs	r3, #1
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1d5      	bne.n	8009630 <dir_register+0x12c>
 8009684:	e000      	b.n	8009688 <dir_register+0x184>
				if (res != FR_OK) break;
 8009686:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800968c:	2b00      	cmp	r3, #0
 800968e:	d128      	bne.n	80096e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	4619      	mov	r1, r3
 8009696:	69f8      	ldr	r0, [r7, #28]
 8009698:	f7fe fe9c 	bl	80083d4 <move_window>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80096a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d11b      	bne.n	80096e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	2220      	movs	r2, #32
 80096b0:	2100      	movs	r1, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fc81 	bl	8007fba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a18      	ldr	r0, [r3, #32]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3324      	adds	r3, #36	; 0x24
 80096c0:	220b      	movs	r2, #11
 80096c2:	4619      	mov	r1, r3
 80096c4:	f7fe fc58 	bl	8007f78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	330c      	adds	r3, #12
 80096d4:	f002 0218 	and.w	r2, r2, #24
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	2201      	movs	r2, #1
 80096e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80096e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3730      	adds	r7, #48	; 0x30
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	4ec4ec4f 	.word	0x4ec4ec4f

080096f4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2200      	movs	r2, #0
 8009708:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80c9 	beq.w	80098a6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971c:	d032      	beq.n	8009784 <get_fileinfo+0x90>
			i = j = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009726:	e01b      	b.n	8009760 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009728:	89fb      	ldrh	r3, [r7, #14]
 800972a:	2100      	movs	r1, #0
 800972c:	4618      	mov	r0, r3
 800972e:	f002 fa31 	bl	800bb94 <ff_convert>
 8009732:	4603      	mov	r3, r0
 8009734:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009736:	89fb      	ldrh	r3, [r7, #14]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <get_fileinfo+0x4e>
 800973c:	2300      	movs	r3, #0
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e01a      	b.n	8009778 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	2bfe      	cmp	r3, #254	; 0xfe
 8009746:	d902      	bls.n	800974e <get_fileinfo+0x5a>
 8009748:	2300      	movs	r3, #0
 800974a:	61fb      	str	r3, [r7, #28]
 800974c:	e014      	b.n	8009778 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	61fa      	str	r2, [r7, #28]
 8009754:	89fa      	ldrh	r2, [r7, #14]
 8009756:	b2d1      	uxtb	r1, r2
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	4413      	add	r3, r2
 800975c:	460a      	mov	r2, r1
 800975e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	1c59      	adds	r1, r3, #1
 8009768:	61b9      	str	r1, [r7, #24]
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	4413      	add	r3, r2
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	81fb      	strh	r3, [r7, #14]
 8009772:	89fb      	ldrh	r3, [r7, #14]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1d7      	bne.n	8009728 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	3316      	adds	r3, #22
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	3316      	adds	r3, #22
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009798:	e04c      	b.n	8009834 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1a      	ldr	r2, [r3, #32]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	1c59      	adds	r1, r3, #1
 80097a2:	61f9      	str	r1, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	d100      	bne.n	80097b2 <get_fileinfo+0xbe>
 80097b0:	e040      	b.n	8009834 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b05      	cmp	r3, #5
 80097b6:	d101      	bne.n	80097bc <get_fileinfo+0xc8>
 80097b8:	23e5      	movs	r3, #229	; 0xe5
 80097ba:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d10f      	bne.n	80097e2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80097c2:	89bb      	ldrh	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <get_fileinfo+0xe0>
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	4413      	add	r3, r2
 80097ce:	3316      	adds	r3, #22
 80097d0:	222e      	movs	r2, #46	; 0x2e
 80097d2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	61ba      	str	r2, [r7, #24]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4413      	add	r3, r2
 80097de:	222e      	movs	r2, #46	; 0x2e
 80097e0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	4413      	add	r3, r2
 80097e8:	3309      	adds	r3, #9
 80097ea:	7dfa      	ldrb	r2, [r7, #23]
 80097ec:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80097ee:	89bb      	ldrh	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d11c      	bne.n	800982e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d913      	bls.n	8009822 <get_fileinfo+0x12e>
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	2b5a      	cmp	r3, #90	; 0x5a
 80097fe:	d810      	bhi.n	8009822 <get_fileinfo+0x12e>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	330c      	adds	r3, #12
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	2b08      	cmp	r3, #8
 800980e:	d901      	bls.n	8009814 <get_fileinfo+0x120>
 8009810:	2310      	movs	r3, #16
 8009812:	e000      	b.n	8009816 <get_fileinfo+0x122>
 8009814:	2308      	movs	r3, #8
 8009816:	4013      	ands	r3, r2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	3320      	adds	r3, #32
 8009820:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	4413      	add	r3, r2
 8009828:	3316      	adds	r3, #22
 800982a:	7dfa      	ldrb	r2, [r7, #23]
 800982c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	3301      	adds	r3, #1
 8009832:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	2b0a      	cmp	r3, #10
 8009838:	d9af      	bls.n	800979a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800983a:	89bb      	ldrh	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10d      	bne.n	800985c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	4413      	add	r3, r2
 8009846:	3316      	adds	r3, #22
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	330c      	adds	r3, #12
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <get_fileinfo+0x168>
 8009858:	2300      	movs	r3, #0
 800985a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	4413      	add	r3, r2
 8009862:	3309      	adds	r3, #9
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	7ada      	ldrb	r2, [r3, #11]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	331c      	adds	r3, #28
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fb13 	bl	8007ea4 <ld_dword>
 800987e:	4602      	mov	r2, r0
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	3316      	adds	r3, #22
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fb0a 	bl	8007ea4 <ld_dword>
 8009890:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	b29a      	uxth	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	80da      	strh	r2, [r3, #6]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	0c1b      	lsrs	r3, r3, #16
 800989e:	b29a      	uxth	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	809a      	strh	r2, [r3, #4]
 80098a4:	e000      	b.n	80098a8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80098a6:	bf00      	nop
}
 80098a8:	3720      	adds	r7, #32
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	; 0x28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	61ba      	str	r2, [r7, #24]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4413      	add	r3, r2
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80098de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098e0:	2b1f      	cmp	r3, #31
 80098e2:	d940      	bls.n	8009966 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80098e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098e6:	2b2f      	cmp	r3, #47	; 0x2f
 80098e8:	d006      	beq.n	80098f8 <create_name+0x48>
 80098ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098ec:	2b5c      	cmp	r3, #92	; 0x5c
 80098ee:	d110      	bne.n	8009912 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80098f0:	e002      	b.n	80098f8 <create_name+0x48>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	3301      	adds	r3, #1
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	4413      	add	r3, r2
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b2f      	cmp	r3, #47	; 0x2f
 8009902:	d0f6      	beq.n	80098f2 <create_name+0x42>
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	4413      	add	r3, r2
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b5c      	cmp	r3, #92	; 0x5c
 800990e:	d0f0      	beq.n	80098f2 <create_name+0x42>
			break;
 8009910:	e02a      	b.n	8009968 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2bfe      	cmp	r3, #254	; 0xfe
 8009916:	d901      	bls.n	800991c <create_name+0x6c>
 8009918:	2306      	movs	r3, #6
 800991a:	e17d      	b.n	8009c18 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800991c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991e:	b2db      	uxtb	r3, r3
 8009920:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	2101      	movs	r1, #1
 8009926:	4618      	mov	r0, r3
 8009928:	f002 f934 	bl	800bb94 <ff_convert>
 800992c:	4603      	mov	r3, r0
 800992e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <create_name+0x8a>
 8009936:	2306      	movs	r3, #6
 8009938:	e16e      	b.n	8009c18 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800993a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800993c:	2b7f      	cmp	r3, #127	; 0x7f
 800993e:	d809      	bhi.n	8009954 <create_name+0xa4>
 8009940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009942:	4619      	mov	r1, r3
 8009944:	488d      	ldr	r0, [pc, #564]	; (8009b7c <create_name+0x2cc>)
 8009946:	f7fe fb7a 	bl	800803e <chk_chr>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <create_name+0xa4>
 8009950:	2306      	movs	r3, #6
 8009952:	e161      	b.n	8009c18 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	617a      	str	r2, [r7, #20]
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009962:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009964:	e7b4      	b.n	80098d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009966:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	441a      	add	r2, r3
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009974:	2b1f      	cmp	r3, #31
 8009976:	d801      	bhi.n	800997c <create_name+0xcc>
 8009978:	2304      	movs	r3, #4
 800997a:	e000      	b.n	800997e <create_name+0xce>
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009982:	e011      	b.n	80099a8 <create_name+0xf8>
		w = lfn[di - 1];
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800998a:	3b01      	subs	r3, #1
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4413      	add	r3, r2
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009998:	2b20      	cmp	r3, #32
 800999a:	d002      	beq.n	80099a2 <create_name+0xf2>
 800999c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800999e:	2b2e      	cmp	r3, #46	; 0x2e
 80099a0:	d106      	bne.n	80099b0 <create_name+0x100>
		di--;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1ea      	bne.n	8009984 <create_name+0xd4>
 80099ae:	e000      	b.n	80099b2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80099b0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <create_name+0x118>
 80099c4:	2306      	movs	r3, #6
 80099c6:	e127      	b.n	8009c18 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3324      	adds	r3, #36	; 0x24
 80099cc:	220b      	movs	r2, #11
 80099ce:	2120      	movs	r1, #32
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe faf2 	bl	8007fba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80099d6:	2300      	movs	r3, #0
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	e002      	b.n	80099e2 <create_name+0x132>
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	3301      	adds	r3, #1
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	d0f5      	beq.n	80099dc <create_name+0x12c>
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	2b2e      	cmp	r3, #46	; 0x2e
 80099fc:	d0ee      	beq.n	80099dc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d009      	beq.n	8009a18 <create_name+0x168>
 8009a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a08:	f043 0303 	orr.w	r3, r3, #3
 8009a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a10:	e002      	b.n	8009a18 <create_name+0x168>
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <create_name+0x182>
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a24:	3b01      	subs	r3, #1
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a30:	d1ef      	bne.n	8009a12 <create_name+0x162>

	i = b = 0; ni = 8;
 8009a32:	2300      	movs	r3, #0
 8009a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a38:	2300      	movs	r3, #0
 8009a3a:	623b      	str	r3, [r7, #32]
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	61ba      	str	r2, [r7, #24]
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 8090 	beq.w	8009b78 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d006      	beq.n	8009a6c <create_name+0x1bc>
 8009a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a60:	2b2e      	cmp	r3, #46	; 0x2e
 8009a62:	d10a      	bne.n	8009a7a <create_name+0x1ca>
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d006      	beq.n	8009a7a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a70:	f043 0303 	orr.w	r3, r3, #3
 8009a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a78:	e07d      	b.n	8009b76 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009a7a:	6a3a      	ldr	r2, [r7, #32]
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d203      	bcs.n	8009a8a <create_name+0x1da>
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d123      	bne.n	8009ad2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	2b0b      	cmp	r3, #11
 8009a8e:	d106      	bne.n	8009a9e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a94:	f043 0303 	orr.w	r3, r3, #3
 8009a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a9c:	e075      	b.n	8009b8a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d005      	beq.n	8009ab2 <create_name+0x202>
 8009aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aaa:	f043 0303 	orr.w	r3, r3, #3
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d866      	bhi.n	8009b88 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	61bb      	str	r3, [r7, #24]
 8009abe:	2308      	movs	r3, #8
 8009ac0:	623b      	str	r3, [r7, #32]
 8009ac2:	230b      	movs	r3, #11
 8009ac4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ad0:	e051      	b.n	8009b76 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ad6:	d914      	bls.n	8009b02 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ada:	2100      	movs	r1, #0
 8009adc:	4618      	mov	r0, r3
 8009ade:	f002 f859 	bl	800bb94 <ff_convert>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <create_name+0x246>
 8009aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009aee:	3b80      	subs	r3, #128	; 0x80
 8009af0:	4a23      	ldr	r2, [pc, #140]	; (8009b80 <create_name+0x2d0>)
 8009af2:	5cd3      	ldrb	r3, [r2, r3]
 8009af4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009afa:	f043 0302 	orr.w	r3, r3, #2
 8009afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d007      	beq.n	8009b18 <create_name+0x268>
 8009b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	481d      	ldr	r0, [pc, #116]	; (8009b84 <create_name+0x2d4>)
 8009b0e:	f7fe fa96 	bl	800803e <chk_chr>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d008      	beq.n	8009b2a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b18:	235f      	movs	r3, #95	; 0x5f
 8009b1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b20:	f043 0303 	orr.w	r3, r3, #3
 8009b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b28:	e01b      	b.n	8009b62 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b2c:	2b40      	cmp	r3, #64	; 0x40
 8009b2e:	d909      	bls.n	8009b44 <create_name+0x294>
 8009b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b32:	2b5a      	cmp	r3, #90	; 0x5a
 8009b34:	d806      	bhi.n	8009b44 <create_name+0x294>
					b |= 2;
 8009b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b3a:	f043 0302 	orr.w	r3, r3, #2
 8009b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b42:	e00e      	b.n	8009b62 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b46:	2b60      	cmp	r3, #96	; 0x60
 8009b48:	d90b      	bls.n	8009b62 <create_name+0x2b2>
 8009b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b4c:	2b7a      	cmp	r3, #122	; 0x7a
 8009b4e:	d808      	bhi.n	8009b62 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b5e:	3b20      	subs	r3, #32
 8009b60:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	623a      	str	r2, [r7, #32]
 8009b68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b6a:	b2d1      	uxtb	r1, r2
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	4413      	add	r3, r2
 8009b70:	460a      	mov	r2, r1
 8009b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009b76:	e763      	b.n	8009a40 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009b78:	bf00      	nop
 8009b7a:	e006      	b.n	8009b8a <create_name+0x2da>
 8009b7c:	08017814 	.word	0x08017814
 8009b80:	08025164 	.word	0x08025164
 8009b84:	08017820 	.word	0x08017820
			if (si > di) break;			/* No extension */
 8009b88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b90:	2be5      	cmp	r3, #229	; 0xe5
 8009b92:	d103      	bne.n	8009b9c <create_name+0x2ec>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2205      	movs	r2, #5
 8009b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	2b08      	cmp	r3, #8
 8009ba0:	d104      	bne.n	8009bac <create_name+0x2fc>
 8009ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bb0:	f003 030c 	and.w	r3, r3, #12
 8009bb4:	2b0c      	cmp	r3, #12
 8009bb6:	d005      	beq.n	8009bc4 <create_name+0x314>
 8009bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bbc:	f003 0303 	and.w	r3, r3, #3
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d105      	bne.n	8009bd0 <create_name+0x320>
 8009bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d117      	bne.n	8009c0c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d105      	bne.n	8009bf4 <create_name+0x344>
 8009be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bec:	f043 0310 	orr.w	r3, r3, #16
 8009bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bf8:	f003 030c 	and.w	r3, r3, #12
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d105      	bne.n	8009c0c <create_name+0x35c>
 8009c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c04:	f043 0308 	orr.w	r3, r3, #8
 8009c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009c16:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3728      	adds	r7, #40	; 0x28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c34:	e002      	b.n	8009c3c <follow_path+0x1c>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b2f      	cmp	r3, #47	; 0x2f
 8009c42:	d0f8      	beq.n	8009c36 <follow_path+0x16>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b5c      	cmp	r3, #92	; 0x5c
 8009c4a:	d0f4      	beq.n	8009c36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b1f      	cmp	r3, #31
 8009c58:	d80a      	bhi.n	8009c70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2280      	movs	r2, #128	; 0x80
 8009c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009c62:	2100      	movs	r1, #0
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7fe ff35 	bl	8008ad4 <dir_sdi>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75fb      	strb	r3, [r7, #23]
 8009c6e:	e043      	b.n	8009cf8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c70:	463b      	mov	r3, r7
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff fe1b 	bl	80098b0 <create_name>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d134      	bne.n	8009cee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fb7d 	bl	8009384 <dir_find>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d127      	bne.n	8009cf2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ca2:	7afb      	ldrb	r3, [r7, #11]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d122      	bne.n	8009cf2 <follow_path+0xd2>
 8009cac:	2305      	movs	r3, #5
 8009cae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009cb0:	e01f      	b.n	8009cf2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cb2:	7afb      	ldrb	r3, [r7, #11]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11c      	bne.n	8009cf6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	799b      	ldrb	r3, [r3, #6]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d102      	bne.n	8009cce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009cc8:	2305      	movs	r3, #5
 8009cca:	75fb      	strb	r3, [r7, #23]
 8009ccc:	e014      	b.n	8009cf8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cdc:	4413      	add	r3, r2
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff f87e 	bl	8008de2 <ld_clust>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009cec:	e7c0      	b.n	8009c70 <follow_path+0x50>
			if (res != FR_OK) break;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <follow_path+0xd8>
				break;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cf6:	bf00      	nop
			}
		}
	}

	return res;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b087      	sub	sp, #28
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d031      	beq.n	8009d7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	e002      	b.n	8009d26 <get_ldnumber+0x24>
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	3301      	adds	r3, #1
 8009d24:	617b      	str	r3, [r7, #20]
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b1f      	cmp	r3, #31
 8009d2c:	d903      	bls.n	8009d36 <get_ldnumber+0x34>
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b3a      	cmp	r3, #58	; 0x3a
 8009d34:	d1f4      	bne.n	8009d20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8009d3c:	d11c      	bne.n	8009d78 <get_ldnumber+0x76>
			tp = *path;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	60fa      	str	r2, [r7, #12]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	3b30      	subs	r3, #48	; 0x30
 8009d4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b09      	cmp	r3, #9
 8009d54:	d80e      	bhi.n	8009d74 <get_ldnumber+0x72>
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d10a      	bne.n	8009d74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d807      	bhi.n	8009d74 <get_ldnumber+0x72>
					vol = (int)i;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	e002      	b.n	8009d7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d78:	2300      	movs	r3, #0
 8009d7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d7c:	693b      	ldr	r3, [r7, #16]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
	...

08009d8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	70da      	strb	r2, [r3, #3]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009da2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7fe fb14 	bl	80083d4 <move_window>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <check_fs+0x2a>
 8009db2:	2304      	movs	r3, #4
 8009db4:	e038      	b.n	8009e28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3334      	adds	r3, #52	; 0x34
 8009dba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe f858 	bl	8007e74 <ld_word>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d001      	beq.n	8009dd4 <check_fs+0x48>
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e029      	b.n	8009e28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dda:	2be9      	cmp	r3, #233	; 0xe9
 8009ddc:	d009      	beq.n	8009df2 <check_fs+0x66>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009de4:	2beb      	cmp	r3, #235	; 0xeb
 8009de6:	d11e      	bne.n	8009e26 <check_fs+0x9a>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009dee:	2b90      	cmp	r3, #144	; 0x90
 8009df0:	d119      	bne.n	8009e26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3334      	adds	r3, #52	; 0x34
 8009df6:	3336      	adds	r3, #54	; 0x36
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fe f853 	bl	8007ea4 <ld_dword>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e04:	4a0a      	ldr	r2, [pc, #40]	; (8009e30 <check_fs+0xa4>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d101      	bne.n	8009e0e <check_fs+0x82>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e00c      	b.n	8009e28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3334      	adds	r3, #52	; 0x34
 8009e12:	3352      	adds	r3, #82	; 0x52
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe f845 	bl	8007ea4 <ld_dword>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4a05      	ldr	r2, [pc, #20]	; (8009e34 <check_fs+0xa8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d101      	bne.n	8009e26 <check_fs+0x9a>
 8009e22:	2300      	movs	r3, #0
 8009e24:	e000      	b.n	8009e28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e26:	2302      	movs	r3, #2
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	00544146 	.word	0x00544146
 8009e34:	33544146 	.word	0x33544146

08009e38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b096      	sub	sp, #88	; 0x58
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	4613      	mov	r3, r2
 8009e44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff ff58 	bl	8009d02 <get_ldnumber>
 8009e52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	da01      	bge.n	8009e5e <find_volume+0x26>
 8009e5a:	230b      	movs	r3, #11
 8009e5c:	e22d      	b.n	800a2ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e5e:	4aa1      	ldr	r2, [pc, #644]	; (800a0e4 <find_volume+0x2ac>)
 8009e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <find_volume+0x3a>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	e223      	b.n	800a2ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01a      	beq.n	8009ebe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	785b      	ldrb	r3, [r3, #1]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fd ff4b 	bl	8007d28 <disk_status>
 8009e92:	4603      	mov	r3, r0
 8009e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10c      	bne.n	8009ebe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <find_volume+0x82>
 8009eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eae:	f003 0304 	and.w	r3, r3, #4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009eb6:	230a      	movs	r3, #10
 8009eb8:	e1ff      	b.n	800a2ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e1fd      	b.n	800a2ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fd ff43 	bl	8007d5c <disk_initialize>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e1e6      	b.n	800a2ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <find_volume+0xca>
 8009ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009efe:	230a      	movs	r3, #10
 8009f00:	e1db      	b.n	800a2ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f0a:	f7ff ff3f 	bl	8009d8c <check_fs>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d149      	bne.n	8009fb0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f20:	e01e      	b.n	8009f60 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009f30:	4413      	add	r3, r2
 8009f32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	3304      	adds	r3, #4
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d006      	beq.n	8009f4c <find_volume+0x114>
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	3308      	adds	r3, #8
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd ffae 	bl	8007ea4 <ld_dword>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	e000      	b.n	8009f4e <find_volume+0x116>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	3358      	adds	r3, #88	; 0x58
 8009f54:	443b      	add	r3, r7
 8009f56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d9dd      	bls.n	8009f22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f66:	2300      	movs	r3, #0
 8009f68:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <find_volume+0x13e>
 8009f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f72:	3b01      	subs	r3, #1
 8009f74:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	3358      	adds	r3, #88	; 0x58
 8009f7c:	443b      	add	r3, r7
 8009f7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <find_volume+0x15e>
 8009f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f8e:	f7ff fefd 	bl	8009d8c <check_fs>
 8009f92:	4603      	mov	r3, r0
 8009f94:	e000      	b.n	8009f98 <find_volume+0x160>
 8009f96:	2303      	movs	r3, #3
 8009f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d905      	bls.n	8009fb0 <find_volume+0x178>
 8009fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8009faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d9e2      	bls.n	8009f76 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d101      	bne.n	8009fbc <find_volume+0x184>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e17e      	b.n	800a2ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d901      	bls.n	8009fc8 <find_volume+0x190>
 8009fc4:	230d      	movs	r3, #13
 8009fc6:	e178      	b.n	800a2ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	3334      	adds	r3, #52	; 0x34
 8009fcc:	330b      	adds	r3, #11
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fd ff50 	bl	8007e74 <ld_word>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fda:	d001      	beq.n	8009fe0 <find_volume+0x1a8>
 8009fdc:	230d      	movs	r3, #13
 8009fde:	e16c      	b.n	800a2ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	3334      	adds	r3, #52	; 0x34
 8009fe4:	3316      	adds	r3, #22
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fd ff44 	bl	8007e74 <ld_word>
 8009fec:	4603      	mov	r3, r0
 8009fee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <find_volume+0x1cc>
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	3334      	adds	r3, #52	; 0x34
 8009ffa:	3324      	adds	r3, #36	; 0x24
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fd ff51 	bl	8007ea4 <ld_dword>
 800a002:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a008:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	789b      	ldrb	r3, [r3, #2]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d005      	beq.n	800a028 <find_volume+0x1f0>
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	789b      	ldrb	r3, [r3, #2]
 800a020:	2b02      	cmp	r3, #2
 800a022:	d001      	beq.n	800a028 <find_volume+0x1f0>
 800a024:	230d      	movs	r3, #13
 800a026:	e148      	b.n	800a2ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	789b      	ldrb	r3, [r3, #2]
 800a02c:	461a      	mov	r2, r3
 800a02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a030:	fb02 f303 	mul.w	r3, r2, r3
 800a034:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	895b      	ldrh	r3, [r3, #10]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d008      	beq.n	800a05c <find_volume+0x224>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	895b      	ldrh	r3, [r3, #10]
 800a04e:	461a      	mov	r2, r3
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	895b      	ldrh	r3, [r3, #10]
 800a054:	3b01      	subs	r3, #1
 800a056:	4013      	ands	r3, r2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <find_volume+0x228>
 800a05c:	230d      	movs	r3, #13
 800a05e:	e12c      	b.n	800a2ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	3334      	adds	r3, #52	; 0x34
 800a064:	3311      	adds	r3, #17
 800a066:	4618      	mov	r0, r3
 800a068:	f7fd ff04 	bl	8007e74 <ld_word>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a072:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	891b      	ldrh	r3, [r3, #8]
 800a078:	f003 030f 	and.w	r3, r3, #15
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <find_volume+0x24e>
 800a082:	230d      	movs	r3, #13
 800a084:	e119      	b.n	800a2ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	3334      	adds	r3, #52	; 0x34
 800a08a:	3313      	adds	r3, #19
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd fef1 	bl	8007e74 <ld_word>
 800a092:	4603      	mov	r3, r0
 800a094:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <find_volume+0x272>
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	3334      	adds	r3, #52	; 0x34
 800a0a0:	3320      	adds	r3, #32
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fd fefe 	bl	8007ea4 <ld_dword>
 800a0a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	3334      	adds	r3, #52	; 0x34
 800a0ae:	330e      	adds	r3, #14
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fd fedf 	bl	8007e74 <ld_word>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a0ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <find_volume+0x28c>
 800a0c0:	230d      	movs	r3, #13
 800a0c2:	e0fa      	b.n	800a2ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c8:	4413      	add	r3, r2
 800a0ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0cc:	8912      	ldrh	r2, [r2, #8]
 800a0ce:	0912      	lsrs	r2, r2, #4
 800a0d0:	b292      	uxth	r2, r2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d204      	bcs.n	800a0e8 <find_volume+0x2b0>
 800a0de:	230d      	movs	r3, #13
 800a0e0:	e0eb      	b.n	800a2ba <find_volume+0x482>
 800a0e2:	bf00      	nop
 800a0e4:	2000d064 	.word	0x2000d064
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0f0:	8952      	ldrh	r2, [r2, #10]
 800a0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <find_volume+0x2ca>
 800a0fe:	230d      	movs	r3, #13
 800a100:	e0db      	b.n	800a2ba <find_volume+0x482>
		fmt = FS_FAT32;
 800a102:	2303      	movs	r3, #3
 800a104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a10e:	4293      	cmp	r3, r2
 800a110:	d802      	bhi.n	800a118 <find_volume+0x2e0>
 800a112:	2302      	movs	r3, #2
 800a114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a11e:	4293      	cmp	r3, r2
 800a120:	d802      	bhi.n	800a128 <find_volume+0x2f0>
 800a122:	2301      	movs	r3, #1
 800a124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	1c9a      	adds	r2, r3, #2
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a134:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a136:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a13a:	441a      	add	r2, r3
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	441a      	add	r2, r3
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a14a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d11e      	bne.n	800a190 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	3334      	adds	r3, #52	; 0x34
 800a156:	332a      	adds	r3, #42	; 0x2a
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd fe8b 	bl	8007e74 <ld_word>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <find_volume+0x330>
 800a164:	230d      	movs	r3, #13
 800a166:	e0a8      	b.n	800a2ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	891b      	ldrh	r3, [r3, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <find_volume+0x33c>
 800a170:	230d      	movs	r3, #13
 800a172:	e0a2      	b.n	800a2ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	3334      	adds	r3, #52	; 0x34
 800a178:	332c      	adds	r3, #44	; 0x2c
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fd fe92 	bl	8007ea4 <ld_dword>
 800a180:	4602      	mov	r2, r0
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	647b      	str	r3, [r7, #68]	; 0x44
 800a18e:	e01f      	b.n	800a1d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	891b      	ldrh	r3, [r3, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <find_volume+0x364>
 800a198:	230d      	movs	r3, #13
 800a19a:	e08e      	b.n	800a2ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a2:	441a      	add	r2, r3
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a1a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d103      	bne.n	800a1b8 <find_volume+0x380>
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	e00a      	b.n	800a1ce <find_volume+0x396>
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	699a      	ldr	r2, [r3, #24]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	4413      	add	r3, r2
 800a1c2:	085a      	lsrs	r2, r3, #1
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a1da:	0a5b      	lsrs	r3, r3, #9
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d201      	bcs.n	800a1e4 <find_volume+0x3ac>
 800a1e0:	230d      	movs	r3, #13
 800a1e2:	e06a      	b.n	800a2ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	615a      	str	r2, [r3, #20]
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	695a      	ldr	r2, [r3, #20]
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	2280      	movs	r2, #128	; 0x80
 800a1f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a1fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d149      	bne.n	800a296 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	3334      	adds	r3, #52	; 0x34
 800a206:	3330      	adds	r3, #48	; 0x30
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fd fe33 	bl	8007e74 <ld_word>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b01      	cmp	r3, #1
 800a212:	d140      	bne.n	800a296 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a216:	3301      	adds	r3, #1
 800a218:	4619      	mov	r1, r3
 800a21a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a21c:	f7fe f8da 	bl	80083d4 <move_window>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d137      	bne.n	800a296 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	2200      	movs	r2, #0
 800a22a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	3334      	adds	r3, #52	; 0x34
 800a230:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fe1d 	bl	8007e74 <ld_word>
 800a23a:	4603      	mov	r3, r0
 800a23c:	461a      	mov	r2, r3
 800a23e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a242:	429a      	cmp	r2, r3
 800a244:	d127      	bne.n	800a296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	3334      	adds	r3, #52	; 0x34
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fd fe2a 	bl	8007ea4 <ld_dword>
 800a250:	4603      	mov	r3, r0
 800a252:	4a1c      	ldr	r2, [pc, #112]	; (800a2c4 <find_volume+0x48c>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d11e      	bne.n	800a296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	3334      	adds	r3, #52	; 0x34
 800a25c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd fe1f 	bl	8007ea4 <ld_dword>
 800a266:	4603      	mov	r3, r0
 800a268:	4a17      	ldr	r2, [pc, #92]	; (800a2c8 <find_volume+0x490>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d113      	bne.n	800a296 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	3334      	adds	r3, #52	; 0x34
 800a272:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a276:	4618      	mov	r0, r3
 800a278:	f7fd fe14 	bl	8007ea4 <ld_dword>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	3334      	adds	r3, #52	; 0x34
 800a286:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fd fe0a 	bl	8007ea4 <ld_dword>
 800a290:	4602      	mov	r2, r0
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a29c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a29e:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <find_volume+0x494>)
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <find_volume+0x494>)
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	4b08      	ldr	r3, [pc, #32]	; (800a2cc <find_volume+0x494>)
 800a2ac:	881a      	ldrh	r2, [r3, #0]
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a2b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2b4:	f7fe f826 	bl	8008304 <clear_lock>
#endif
	return FR_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3758      	adds	r7, #88	; 0x58
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	41615252 	.word	0x41615252
 800a2c8:	61417272 	.word	0x61417272
 800a2cc:	2000d06c 	.word	0x2000d06c

0800a2d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a2da:	2309      	movs	r3, #9
 800a2dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d01c      	beq.n	800a31e <validate+0x4e>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d018      	beq.n	800a31e <validate+0x4e>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d013      	beq.n	800a31e <validate+0x4e>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	889a      	ldrh	r2, [r3, #4]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	88db      	ldrh	r3, [r3, #6]
 800a300:	429a      	cmp	r2, r3
 800a302:	d10c      	bne.n	800a31e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	785b      	ldrb	r3, [r3, #1]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd fd0c 	bl	8007d28 <disk_status>
 800a310:	4603      	mov	r3, r0
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <validate+0x4e>
			res = FR_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <validate+0x5a>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	e000      	b.n	800a32c <validate+0x5c>
 800a32a:	2300      	movs	r3, #0
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	6013      	str	r3, [r2, #0]
	return res;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a34e:	f107 0310 	add.w	r3, r7, #16
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff fcd5 	bl	8009d02 <get_ldnumber>
 800a358:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da01      	bge.n	800a364 <f_mount+0x28>
 800a360:	230b      	movs	r3, #11
 800a362:	e02b      	b.n	800a3bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a364:	4a17      	ldr	r2, [pc, #92]	; (800a3c4 <f_mount+0x88>)
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a36c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a374:	69b8      	ldr	r0, [r7, #24]
 800a376:	f7fd ffc5 	bl	8008304 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	490d      	ldr	r1, [pc, #52]	; (800a3c4 <f_mount+0x88>)
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <f_mount+0x66>
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d001      	beq.n	800a3a6 <f_mount+0x6a>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e00a      	b.n	800a3bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a3a6:	f107 010c 	add.w	r1, r7, #12
 800a3aa:	f107 0308 	add.w	r3, r7, #8
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff fd41 	bl	8009e38 <find_volume>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3720      	adds	r7, #32
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	2000d064 	.word	0x2000d064

0800a3c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b09a      	sub	sp, #104	; 0x68
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <f_open+0x18>
 800a3dc:	2309      	movs	r3, #9
 800a3de:	e1bd      	b.n	800a75c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a3e8:	79fa      	ldrb	r2, [r7, #7]
 800a3ea:	f107 0110 	add.w	r1, r7, #16
 800a3ee:	f107 0308 	add.w	r3, r7, #8
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fd20 	bl	8009e38 <find_volume>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a3fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a402:	2b00      	cmp	r3, #0
 800a404:	f040 81a1 	bne.w	800a74a <f_open+0x382>
		dj.obj.fs = fs;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800a40c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a410:	f001 fba9 	bl	800bb66 <ff_memalloc>
 800a414:	65b8      	str	r0, [r7, #88]	; 0x58
 800a416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <f_open+0x58>
 800a41c:	2311      	movs	r3, #17
 800a41e:	e19d      	b.n	800a75c <f_open+0x394>
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a424:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	f107 0314 	add.w	r3, r7, #20
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f7ff fbf6 	bl	8009c20 <follow_path>
 800a434:	4603      	mov	r3, r0
 800a436:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a43a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d11a      	bne.n	800a478 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a442:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a446:	b25b      	sxtb	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da03      	bge.n	800a454 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800a44c:	2306      	movs	r3, #6
 800a44e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a452:	e011      	b.n	800a478 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bf14      	ite	ne
 800a45e:	2301      	movne	r3, #1
 800a460:	2300      	moveq	r3, #0
 800a462:	b2db      	uxtb	r3, r3
 800a464:	461a      	mov	r2, r3
 800a466:	f107 0314 	add.w	r3, r7, #20
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fd fe01 	bl	8008074 <chk_lock>
 800a472:	4603      	mov	r3, r0
 800a474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	f003 031c 	and.w	r3, r3, #28
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d07f      	beq.n	800a582 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800a482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a486:	2b00      	cmp	r3, #0
 800a488:	d017      	beq.n	800a4ba <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a48a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d10e      	bne.n	800a4b0 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a492:	f7fd fe4b 	bl	800812c <enq_lock>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d006      	beq.n	800a4aa <f_open+0xe2>
 800a49c:	f107 0314 	add.w	r3, r7, #20
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff f82f 	bl	8009504 <dir_register>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	e000      	b.n	800a4ac <f_open+0xe4>
 800a4aa:	2312      	movs	r3, #18
 800a4ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	f043 0308 	orr.w	r3, r3, #8
 800a4b6:	71fb      	strb	r3, [r7, #7]
 800a4b8:	e010      	b.n	800a4dc <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a4ba:	7ebb      	ldrb	r3, [r7, #26]
 800a4bc:	f003 0311 	and.w	r3, r3, #17
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <f_open+0x104>
					res = FR_DENIED;
 800a4c4:	2307      	movs	r3, #7
 800a4c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a4ca:	e007      	b.n	800a4dc <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	f003 0304 	and.w	r3, r3, #4
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <f_open+0x114>
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a4dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d168      	bne.n	800a5b6 <f_open+0x1ee>
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	f003 0308 	and.w	r3, r3, #8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d063      	beq.n	800a5b6 <f_open+0x1ee>
				dw = GET_FATTIME();
 800a4ee:	f7fd fcb9 	bl	8007e64 <get_fattime>
 800a4f2:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	330e      	adds	r3, #14
 800a4f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fd fd10 	bl	8007f20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a502:	3316      	adds	r3, #22
 800a504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd fd0a 	bl	8007f20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	330b      	adds	r3, #11
 800a510:	2220      	movs	r2, #32
 800a512:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fc61 	bl	8008de2 <ld_clust>
 800a520:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a526:	2200      	movs	r2, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fc79 	bl	8008e20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a530:	331c      	adds	r3, #28
 800a532:	2100      	movs	r1, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f7fd fcf3 	bl	8007f20 <st_dword>
					fs->wflag = 1;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	2201      	movs	r2, #1
 800a53e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a542:	2b00      	cmp	r3, #0
 800a544:	d037      	beq.n	800a5b6 <f_open+0x1ee>
						dw = fs->winsect;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800a54c:	f107 0314 	add.w	r3, r7, #20
 800a550:	2200      	movs	r2, #0
 800a552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe f98c 	bl	8008872 <remove_chain>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a560:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a564:	2b00      	cmp	r3, #0
 800a566:	d126      	bne.n	800a5b6 <f_open+0x1ee>
							res = move_window(fs, dw);
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fd ff31 	bl	80083d4 <move_window>
 800a572:	4603      	mov	r3, r0
 800a574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a57c:	3a01      	subs	r2, #1
 800a57e:	611a      	str	r2, [r3, #16]
 800a580:	e019      	b.n	800a5b6 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a586:	2b00      	cmp	r3, #0
 800a588:	d115      	bne.n	800a5b6 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a58a:	7ebb      	ldrb	r3, [r7, #26]
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <f_open+0x1d4>
					res = FR_NO_FILE;
 800a594:	2304      	movs	r3, #4
 800a596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a59a:	e00c      	b.n	800a5b6 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d007      	beq.n	800a5b6 <f_open+0x1ee>
 800a5a6:	7ebb      	ldrb	r3, [r7, #26]
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <f_open+0x1ee>
						res = FR_DENIED;
 800a5b0:	2307      	movs	r3, #7
 800a5b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d128      	bne.n	800a610 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	f003 0308 	and.w	r3, r3, #8
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <f_open+0x208>
				mode |= FA_MODIFIED;
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ce:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a5de:	79fb      	ldrb	r3, [r7, #7]
 800a5e0:	f023 0301 	bic.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bf14      	ite	ne
 800a5e8:	2301      	movne	r3, #1
 800a5ea:	2300      	moveq	r3, #0
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f107 0314 	add.w	r3, r7, #20
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fd fdba 	bl	8008170 <inc_lock>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <f_open+0x248>
 800a60a:	2302      	movs	r3, #2
 800a60c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 8095 	bne.w	800a744 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61e:	4611      	mov	r1, r2
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe fbde 	bl	8008de2 <ld_clust>
 800a626:	4602      	mov	r2, r0
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62e:	331c      	adds	r3, #28
 800a630:	4618      	mov	r0, r3
 800a632:	f7fd fc37 	bl	8007ea4 <ld_dword>
 800a636:	4602      	mov	r2, r0
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	88da      	ldrh	r2, [r3, #6]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	79fa      	ldrb	r2, [r7, #7]
 800a654:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3330      	adds	r3, #48	; 0x30
 800a66c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f7fd fca1 	bl	8007fba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	f003 0320 	and.w	r3, r3, #32
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d060      	beq.n	800a744 <f_open+0x37c>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d05c      	beq.n	800a744 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	895b      	ldrh	r3, [r3, #10]
 800a696:	025b      	lsls	r3, r3, #9
 800a698:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6a6:	e016      	b.n	800a6d6 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd ff4c 	bl	800854a <get_fat>
 800a6b2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a6b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d802      	bhi.n	800a6c0 <f_open+0x2f8>
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a6c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d102      	bne.n	800a6ce <f_open+0x306>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d103      	bne.n	800a6e6 <f_open+0x31e>
 800a6de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d8e0      	bhi.n	800a6a8 <f_open+0x2e0>
				}
				fp->clust = clst;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6ea:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a6ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d127      	bne.n	800a744 <f_open+0x37c>
 800a6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d022      	beq.n	800a744 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a702:	4618      	mov	r0, r3
 800a704:	f7fd ff02 	bl	800850c <clust2sect>
 800a708:	64b8      	str	r0, [r7, #72]	; 0x48
 800a70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d103      	bne.n	800a718 <f_open+0x350>
						res = FR_INT_ERR;
 800a710:	2302      	movs	r3, #2
 800a712:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a716:	e015      	b.n	800a744 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a71a:	0a5a      	lsrs	r2, r3, #9
 800a71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a71e:	441a      	add	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	7858      	ldrb	r0, [r3, #1]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a1a      	ldr	r2, [r3, #32]
 800a732:	2301      	movs	r3, #1
 800a734:	f7fd fb38 	bl	8007da8 <disk_read>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <f_open+0x37c>
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800a744:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a746:	f001 fa1a 	bl	800bb7e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a74a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <f_open+0x390>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a758:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3768      	adds	r7, #104	; 0x68
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08e      	sub	sp, #56	; 0x38
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f107 0214 	add.w	r2, r7, #20
 800a782:	4611      	mov	r1, r2
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff fda3 	bl	800a2d0 <validate>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a794:	2b00      	cmp	r3, #0
 800a796:	d107      	bne.n	800a7a8 <f_read+0x44>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	7d5b      	ldrb	r3, [r3, #21]
 800a79c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a7a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <f_read+0x4a>
 800a7a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7ac:	e115      	b.n	800a9da <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	7d1b      	ldrb	r3, [r3, #20]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <f_read+0x5a>
 800a7ba:	2307      	movs	r3, #7
 800a7bc:	e10d      	b.n	800a9da <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	f240 80fe 	bls.w	800a9d0 <f_read+0x26c>
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a7d8:	e0fa      	b.n	800a9d0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f040 80c6 	bne.w	800a974 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	0a5b      	lsrs	r3, r3, #9
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	8952      	ldrh	r2, [r2, #10]
 800a7f2:	3a01      	subs	r2, #1
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d12f      	bne.n	800a85e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	633b      	str	r3, [r7, #48]	; 0x30
 800a80c:	e013      	b.n	800a836 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	4619      	mov	r1, r3
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7fe f925 	bl	8008a6c <clmt_clust>
 800a822:	6338      	str	r0, [r7, #48]	; 0x30
 800a824:	e007      	b.n	800a836 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f7fd fe8b 	bl	800854a <get_fat>
 800a834:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d804      	bhi.n	800a846 <f_read+0xe2>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2202      	movs	r2, #2
 800a840:	755a      	strb	r2, [r3, #21]
 800a842:	2302      	movs	r3, #2
 800a844:	e0c9      	b.n	800a9da <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d104      	bne.n	800a858 <f_read+0xf4>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2201      	movs	r2, #1
 800a852:	755a      	strb	r2, [r3, #21]
 800a854:	2301      	movs	r3, #1
 800a856:	e0c0      	b.n	800a9da <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a85c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	4619      	mov	r1, r3
 800a866:	4610      	mov	r0, r2
 800a868:	f7fd fe50 	bl	800850c <clust2sect>
 800a86c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d104      	bne.n	800a87e <f_read+0x11a>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2202      	movs	r2, #2
 800a878:	755a      	strb	r2, [r3, #21]
 800a87a:	2302      	movs	r3, #2
 800a87c:	e0ad      	b.n	800a9da <f_read+0x276>
			sect += csect;
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	4413      	add	r3, r2
 800a884:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	0a5b      	lsrs	r3, r3, #9
 800a88a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d039      	beq.n	800a906 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	4413      	add	r3, r2
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	8952      	ldrh	r2, [r2, #10]
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d905      	bls.n	800a8ac <f_read+0x148>
					cc = fs->csize - csect;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	895b      	ldrh	r3, [r3, #10]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	7858      	ldrb	r0, [r3, #1]
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8b6:	f7fd fa77 	bl	8007da8 <disk_read>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <f_read+0x166>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	755a      	strb	r2, [r3, #21]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e087      	b.n	800a9da <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	7d1b      	ldrb	r3, [r3, #20]
 800a8ce:	b25b      	sxtb	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	da14      	bge.n	800a8fe <f_read+0x19a>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6a1a      	ldr	r2, [r3, #32]
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d90d      	bls.n	800a8fe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6a1a      	ldr	r2, [r3, #32]
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	025b      	lsls	r3, r3, #9
 800a8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ee:	18d0      	adds	r0, r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3330      	adds	r3, #48	; 0x30
 800a8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f7fd fb3d 	bl	8007f78 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	025b      	lsls	r3, r3, #9
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a904:	e050      	b.n	800a9a8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d02e      	beq.n	800a96e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	7d1b      	ldrb	r3, [r3, #20]
 800a914:	b25b      	sxtb	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	da18      	bge.n	800a94c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	7858      	ldrb	r0, [r3, #1]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6a1a      	ldr	r2, [r3, #32]
 800a928:	2301      	movs	r3, #1
 800a92a:	f7fd fa5d 	bl	8007de8 <disk_write>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d004      	beq.n	800a93e <f_read+0x1da>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	755a      	strb	r2, [r3, #21]
 800a93a:	2301      	movs	r3, #1
 800a93c:	e04d      	b.n	800a9da <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	7d1b      	ldrb	r3, [r3, #20]
 800a942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a946:	b2da      	uxtb	r2, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	7858      	ldrb	r0, [r3, #1]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a956:	2301      	movs	r3, #1
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	f7fd fa25 	bl	8007da8 <disk_read>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <f_read+0x20a>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2201      	movs	r2, #1
 800a968:	755a      	strb	r2, [r3, #21]
 800a96a:	2301      	movs	r3, #1
 800a96c:	e035      	b.n	800a9da <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a980:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	429a      	cmp	r2, r3
 800a988:	d901      	bls.n	800a98e <f_read+0x22a>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99c:	4413      	add	r3, r2
 800a99e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9a4:	f7fd fae8 	bl	8007f78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	4413      	add	r3, r2
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	699a      	ldr	r2, [r3, #24]
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	441a      	add	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	619a      	str	r2, [r3, #24]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	441a      	add	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f47f af01 	bne.w	800a7da <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3738      	adds	r7, #56	; 0x38
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b08c      	sub	sp, #48	; 0x30
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f107 0210 	add.w	r2, r7, #16
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff fc64 	bl	800a2d0 <validate>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d107      	bne.n	800aa26 <f_write+0x44>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	7d5b      	ldrb	r3, [r3, #21]
 800aa1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d002      	beq.n	800aa2c <f_write+0x4a>
 800aa26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa2a:	e14b      	b.n	800acc4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	7d1b      	ldrb	r3, [r3, #20]
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <f_write+0x5a>
 800aa38:	2307      	movs	r3, #7
 800aa3a:	e143      	b.n	800acc4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	699a      	ldr	r2, [r3, #24]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	441a      	add	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	f080 812d 	bcs.w	800aca8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	43db      	mvns	r3, r3
 800aa54:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aa56:	e127      	b.n	800aca8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 80e3 	bne.w	800ac2c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	0a5b      	lsrs	r3, r3, #9
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	8952      	ldrh	r2, [r2, #10]
 800aa70:	3a01      	subs	r2, #1
 800aa72:	4013      	ands	r3, r2
 800aa74:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d143      	bne.n	800ab04 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10c      	bne.n	800aa9e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d11a      	bne.n	800aac6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2100      	movs	r1, #0
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fd ff51 	bl	800893c <create_chain>
 800aa9a:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa9c:	e013      	b.n	800aac6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d007      	beq.n	800aab6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fd ffdd 	bl	8008a6c <clmt_clust>
 800aab2:	62b8      	str	r0, [r7, #40]	; 0x28
 800aab4:	e007      	b.n	800aac6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	4619      	mov	r1, r3
 800aabe:	4610      	mov	r0, r2
 800aac0:	f7fd ff3c 	bl	800893c <create_chain>
 800aac4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80f2 	beq.w	800acb2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d104      	bne.n	800aade <f_write+0xfc>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2202      	movs	r2, #2
 800aad8:	755a      	strb	r2, [r3, #21]
 800aada:	2302      	movs	r3, #2
 800aadc:	e0f2      	b.n	800acc4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae4:	d104      	bne.n	800aaf0 <f_write+0x10e>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	755a      	strb	r2, [r3, #21]
 800aaec:	2301      	movs	r3, #1
 800aaee:	e0e9      	b.n	800acc4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <f_write+0x122>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	da18      	bge.n	800ab40 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	7858      	ldrb	r0, [r3, #1]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a1a      	ldr	r2, [r3, #32]
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f7fd f963 	bl	8007de8 <disk_write>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <f_write+0x150>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	755a      	strb	r2, [r3, #21]
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e0c8      	b.n	800acc4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	7d1b      	ldrb	r3, [r3, #20]
 800ab36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	4619      	mov	r1, r3
 800ab48:	4610      	mov	r0, r2
 800ab4a:	f7fd fcdf 	bl	800850c <clust2sect>
 800ab4e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <f_write+0x17e>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	755a      	strb	r2, [r3, #21]
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0b1      	b.n	800acc4 <f_write+0x2e2>
			sect += csect;
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	4413      	add	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	0a5b      	lsrs	r3, r3, #9
 800ab6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d03c      	beq.n	800abee <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	4413      	add	r3, r2
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	8952      	ldrh	r2, [r2, #10]
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d905      	bls.n	800ab8e <f_write+0x1ac>
					cc = fs->csize - csect;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	895b      	ldrh	r3, [r3, #10]
 800ab86:	461a      	mov	r2, r3
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	7858      	ldrb	r0, [r3, #1]
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	69f9      	ldr	r1, [r7, #28]
 800ab98:	f7fd f926 	bl	8007de8 <disk_write>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d004      	beq.n	800abac <f_write+0x1ca>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	755a      	strb	r2, [r3, #21]
 800aba8:	2301      	movs	r3, #1
 800abaa:	e08b      	b.n	800acc4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	6a3a      	ldr	r2, [r7, #32]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d915      	bls.n	800abe6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1a      	ldr	r2, [r3, #32]
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	025b      	lsls	r3, r3, #9
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	4413      	add	r3, r2
 800abce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abd2:	4619      	mov	r1, r3
 800abd4:	f7fd f9d0 	bl	8007f78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	7d1b      	ldrb	r3, [r3, #20]
 800abdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	025b      	lsls	r3, r3, #9
 800abea:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800abec:	e03f      	b.n	800ac6e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d016      	beq.n	800ac26 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	699a      	ldr	r2, [r3, #24]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d210      	bcs.n	800ac26 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	7858      	ldrb	r0, [r3, #1]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac0e:	2301      	movs	r3, #1
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	f7fd f8c9 	bl	8007da8 <disk_read>
 800ac16:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	755a      	strb	r2, [r3, #21]
 800ac22:	2301      	movs	r3, #1
 800ac24:	e04e      	b.n	800acc4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac34:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ac3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d901      	bls.n	800ac46 <f_write+0x264>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac54:	4413      	add	r3, r2
 800ac56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac58:	69f9      	ldr	r1, [r7, #28]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fd f98c 	bl	8007f78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ac6e:	69fa      	ldr	r2, [r7, #28]
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	4413      	add	r3, r2
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	441a      	add	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	619a      	str	r2, [r3, #24]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	bf38      	it	cc
 800ac8e:	461a      	movcc	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	60da      	str	r2, [r3, #12]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	441a      	add	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f47f aed4 	bne.w	800aa58 <f_write+0x76>
 800acb0:	e000      	b.n	800acb4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acb2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	7d1b      	ldrb	r3, [r3, #20]
 800acb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3730      	adds	r7, #48	; 0x30
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f107 0208 	add.w	r2, r7, #8
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff faf7 	bl	800a2d0 <validate>
 800ace2:	4603      	mov	r3, r0
 800ace4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d168      	bne.n	800adbe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	7d1b      	ldrb	r3, [r3, #20]
 800acf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d062      	beq.n	800adbe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	7d1b      	ldrb	r3, [r3, #20]
 800acfc:	b25b      	sxtb	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da15      	bge.n	800ad2e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	7858      	ldrb	r0, [r3, #1]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a1a      	ldr	r2, [r3, #32]
 800ad10:	2301      	movs	r3, #1
 800ad12:	f7fd f869 	bl	8007de8 <disk_write>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <f_sync+0x54>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e04f      	b.n	800adc0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7d1b      	ldrb	r3, [r3, #20]
 800ad24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ad2e:	f7fd f899 	bl	8007e64 <get_fattime>
 800ad32:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	f7fd fb49 	bl	80083d4 <move_window>
 800ad42:	4603      	mov	r3, r0
 800ad44:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d138      	bne.n	800adbe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad50:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	330b      	adds	r3, #11
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	330b      	adds	r3, #11
 800ad5c:	f042 0220 	orr.w	r2, r2, #32
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6818      	ldr	r0, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	f7fe f856 	bl	8008e20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f103 021c 	add.w	r2, r3, #28
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	4610      	mov	r0, r2
 800ad82:	f7fd f8cd 	bl	8007f20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3316      	adds	r3, #22
 800ad8a:	6939      	ldr	r1, [r7, #16]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fd f8c7 	bl	8007f20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3312      	adds	r3, #18
 800ad96:	2100      	movs	r1, #0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fd f8a6 	bl	8007eea <st_word>
					fs->wflag = 1;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2201      	movs	r2, #1
 800ada2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd fb42 	bl	8008430 <sync_fs>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7d1b      	ldrb	r3, [r3, #20]
 800adb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff ff7b 	bl	800accc <f_sync>
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d118      	bne.n	800ae12 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f107 0208 	add.w	r2, r7, #8
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fa71 	bl	800a2d0 <validate>
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10c      	bne.n	800ae12 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fd fa45 	bl	800828c <dec_lock>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b090      	sub	sp, #64	; 0x40
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f107 0208 	add.w	r2, r7, #8
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff fa4e 	bl	800a2d0 <validate>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ae3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <f_lseek+0x2e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7d5b      	ldrb	r3, [r3, #21]
 800ae46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ae4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <f_lseek+0x3c>
 800ae52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae56:	e1e6      	b.n	800b226 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 80d1 	beq.w	800b004 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d15a      	bne.n	800af20 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	1d1a      	adds	r2, r3, #4
 800ae74:	627a      	str	r2, [r7, #36]	; 0x24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	617b      	str	r3, [r7, #20]
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d03a      	beq.n	800af00 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	3302      	adds	r3, #2
 800ae96:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	3301      	adds	r3, #1
 800aea0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fb4f 	bl	800854a <get_fat>
 800aeac:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d804      	bhi.n	800aebe <f_lseek+0xa2>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	755a      	strb	r2, [r3, #21]
 800aeba:	2302      	movs	r3, #2
 800aebc:	e1b3      	b.n	800b226 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec4:	d104      	bne.n	800aed0 <f_lseek+0xb4>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	755a      	strb	r2, [r3, #21]
 800aecc:	2301      	movs	r3, #1
 800aece:	e1aa      	b.n	800b226 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d0de      	beq.n	800ae98 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aeda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d809      	bhi.n	800aef6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	1d1a      	adds	r2, r3, #4
 800aee6:	627a      	str	r2, [r7, #36]	; 0x24
 800aee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	1d1a      	adds	r2, r3, #4
 800aef0:	627a      	str	r2, [r7, #36]	; 0x24
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d3c4      	bcc.n	800ae8a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af06:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800af08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d803      	bhi.n	800af18 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	e184      	b.n	800b222 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800af18:	2311      	movs	r3, #17
 800af1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800af1e:	e180      	b.n	800b222 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d902      	bls.n	800af30 <f_lseek+0x114>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8172 	beq.w	800b222 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	3b01      	subs	r3, #1
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7fd fd91 	bl	8008a6c <clmt_clust>
 800af4a:	4602      	mov	r2, r0
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fd fad7 	bl	800850c <clust2sect>
 800af5e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d104      	bne.n	800af70 <f_lseek+0x154>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	755a      	strb	r2, [r3, #21]
 800af6c:	2302      	movs	r3, #2
 800af6e:	e15a      	b.n	800b226 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	3b01      	subs	r3, #1
 800af74:	0a5b      	lsrs	r3, r3, #9
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	8952      	ldrh	r2, [r2, #10]
 800af7a:	3a01      	subs	r2, #1
 800af7c:	4013      	ands	r3, r2
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	4413      	add	r3, r2
 800af82:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8148 	beq.w	800b222 <f_lseek+0x406>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	429a      	cmp	r2, r3
 800af9a:	f000 8142 	beq.w	800b222 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	da18      	bge.n	800afda <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	7858      	ldrb	r0, [r3, #1]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1a      	ldr	r2, [r3, #32]
 800afb6:	2301      	movs	r3, #1
 800afb8:	f7fc ff16 	bl	8007de8 <disk_write>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d004      	beq.n	800afcc <f_lseek+0x1b0>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	755a      	strb	r2, [r3, #21]
 800afc8:	2301      	movs	r3, #1
 800afca:	e12c      	b.n	800b226 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	7d1b      	ldrb	r3, [r3, #20]
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	7858      	ldrb	r0, [r3, #1]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afe4:	2301      	movs	r3, #1
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	f7fc fede 	bl	8007da8 <disk_read>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <f_lseek+0x1e0>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	755a      	strb	r2, [r3, #21]
 800aff8:	2301      	movs	r3, #1
 800affa:	e114      	b.n	800b226 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	621a      	str	r2, [r3, #32]
 800b002:	e10e      	b.n	800b222 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d908      	bls.n	800b020 <f_lseek+0x204>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	7d1b      	ldrb	r3, [r3, #20]
 800b012:	f003 0302 	and.w	r3, r3, #2
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b02e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 80a7 	beq.w	800b186 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	895b      	ldrh	r3, [r3, #10]
 800b03c:	025b      	lsls	r3, r3, #9
 800b03e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d01b      	beq.n	800b07e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	1e5a      	subs	r2, r3, #1
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	1e59      	subs	r1, r3, #1
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d30f      	bcc.n	800b07e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	1e5a      	subs	r2, r3, #1
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	425b      	negs	r3, r3
 800b066:	401a      	ands	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b07c:	e022      	b.n	800b0c4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	2b00      	cmp	r3, #0
 800b088:	d119      	bne.n	800b0be <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fd fc54 	bl	800893c <create_chain>
 800b094:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d104      	bne.n	800b0a6 <f_lseek+0x28a>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	755a      	strb	r2, [r3, #21]
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e0bf      	b.n	800b226 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ac:	d104      	bne.n	800b0b8 <f_lseek+0x29c>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	755a      	strb	r2, [r3, #21]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e0b6      	b.n	800b226 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0bc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0c2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d05d      	beq.n	800b186 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b0ca:	e03a      	b.n	800b142 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699a      	ldr	r2, [r3, #24]
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	441a      	add	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7d1b      	ldrb	r3, [r3, #20]
 800b0e4:	f003 0302 	and.w	r3, r3, #2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fd fc23 	bl	800893c <create_chain>
 800b0f6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d108      	bne.n	800b110 <f_lseek+0x2f4>
							ofs = 0; break;
 800b0fe:	2300      	movs	r3, #0
 800b100:	603b      	str	r3, [r7, #0]
 800b102:	e022      	b.n	800b14a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fd fa1e 	bl	800854a <get_fat>
 800b10e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d104      	bne.n	800b122 <f_lseek+0x306>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	755a      	strb	r2, [r3, #21]
 800b11e:	2301      	movs	r3, #1
 800b120:	e081      	b.n	800b226 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	2b01      	cmp	r3, #1
 800b126:	d904      	bls.n	800b132 <f_lseek+0x316>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b12e:	429a      	cmp	r2, r3
 800b130:	d304      	bcc.n	800b13c <f_lseek+0x320>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2202      	movs	r2, #2
 800b136:	755a      	strb	r2, [r3, #21]
 800b138:	2302      	movs	r3, #2
 800b13a:	e074      	b.n	800b226 <f_lseek+0x40a>
					fp->clust = clst;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b140:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	429a      	cmp	r2, r3
 800b148:	d8c0      	bhi.n	800b0cc <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	699a      	ldr	r2, [r3, #24]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	441a      	add	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d012      	beq.n	800b186 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b164:	4618      	mov	r0, r3
 800b166:	f7fd f9d1 	bl	800850c <clust2sect>
 800b16a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <f_lseek+0x360>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2202      	movs	r2, #2
 800b176:	755a      	strb	r2, [r3, #21]
 800b178:	2302      	movs	r3, #2
 800b17a:	e054      	b.n	800b226 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	0a5b      	lsrs	r3, r3, #9
 800b180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b182:	4413      	add	r3, r2
 800b184:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	699a      	ldr	r2, [r3, #24]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d90a      	bls.n	800b1a8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	699a      	ldr	r2, [r3, #24]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7d1b      	ldrb	r3, [r3, #20]
 800b19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d036      	beq.n	800b222 <f_lseek+0x406>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d031      	beq.n	800b222 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	7d1b      	ldrb	r3, [r3, #20]
 800b1c2:	b25b      	sxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	da18      	bge.n	800b1fa <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	7858      	ldrb	r0, [r3, #1]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1a      	ldr	r2, [r3, #32]
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f7fc fe06 	bl	8007de8 <disk_write>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <f_lseek+0x3d0>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	755a      	strb	r2, [r3, #21]
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e01c      	b.n	800b226 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	7d1b      	ldrb	r3, [r3, #20]
 800b1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	7858      	ldrb	r0, [r3, #1]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b204:	2301      	movs	r3, #1
 800b206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b208:	f7fc fdce 	bl	8007da8 <disk_read>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d004      	beq.n	800b21c <f_lseek+0x400>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	755a      	strb	r2, [r3, #21]
 800b218:	2301      	movs	r3, #1
 800b21a:	e004      	b.n	800b226 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b220:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b222:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b226:	4618      	mov	r0, r3
 800b228:	3740      	adds	r7, #64	; 0x40
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b086      	sub	sp, #24
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <f_opendir+0x14>
 800b23e:	2309      	movs	r3, #9
 800b240:	e074      	b.n	800b32c <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b246:	f107 0108 	add.w	r1, r7, #8
 800b24a:	463b      	mov	r3, r7
 800b24c:	2200      	movs	r2, #0
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fdf2 	bl	8009e38 <find_volume>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d15f      	bne.n	800b31e <f_opendir+0xf0>
		obj->fs = fs;
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800b264:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b268:	f000 fc7d 	bl	800bb66 <ff_memalloc>
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <f_opendir+0x4a>
 800b274:	2311      	movs	r3, #17
 800b276:	e059      	b.n	800b32c <f_opendir+0xfe>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7fe fccc 	bl	8009c20 <follow_path>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d13d      	bne.n	800b30e <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b298:	b25b      	sxtb	r3, r3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	db12      	blt.n	800b2c4 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	799b      	ldrb	r3, [r3, #6]
 800b2a2:	f003 0310 	and.w	r3, r3, #16
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00a      	beq.n	800b2c0 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7fd fd95 	bl	8008de2 <ld_clust>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	609a      	str	r2, [r3, #8]
 800b2be:	e001      	b.n	800b2c4 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b2c0:	2305      	movs	r3, #5
 800b2c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d121      	bne.n	800b30e <f_opendir+0xe0>
				obj->id = fs->id;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	88da      	ldrh	r2, [r3, #6]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7fd fbfd 	bl	8008ad4 <dir_sdi>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d114      	bne.n	800b30e <f_opendir+0xe0>
					if (obj->sclust) {
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00d      	beq.n	800b308 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7fc ff3e 	bl	8008170 <inc_lock>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d105      	bne.n	800b30e <f_opendir+0xe0>
 800b302:	2312      	movs	r3, #18
 800b304:	75fb      	strb	r3, [r7, #23]
 800b306:	e002      	b.n	800b30e <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	2200      	movs	r2, #0
 800b30c:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 fc35 	bl	800bb7e <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	2b04      	cmp	r3, #4
 800b318:	d101      	bne.n	800b31e <f_opendir+0xf0>
 800b31a:	2305      	movs	r3, #5
 800b31c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <f_opendir+0xfc>
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f107 0208 	add.w	r2, r7, #8
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe ffc3 	bl	800a2d0 <validate>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d110      	bne.n	800b376 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d006      	beq.n	800b36a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	4618      	mov	r0, r3
 800b362:	f7fc ff93 	bl	800828c <dec_lock>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b36a:	7bfb      	ldrb	r3, [r7, #15]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b376:	7bfb      	ldrb	r3, [r7, #15]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f107 020c 	add.w	r2, r7, #12
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe ff9c 	bl	800a2d0 <validate>
 800b398:	4603      	mov	r3, r0
 800b39a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d136      	bne.n	800b410 <f_readdir+0x90>
		if (!fno) {
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d106      	bne.n	800b3b6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7fd fb92 	bl	8008ad4 <dir_sdi>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	75fb      	strb	r3, [r7, #23]
 800b3b4:	e02c      	b.n	800b410 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800b3b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b3ba:	f000 fbd4 	bl	800bb66 <ff_memalloc>
 800b3be:	6138      	str	r0, [r7, #16]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <f_readdir+0x4a>
 800b3c6:	2311      	movs	r3, #17
 800b3c8:	e023      	b.n	800b412 <f_readdir+0x92>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7fd ff2f 	bl	8009236 <dir_read>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d101      	bne.n	800b3e6 <f_readdir+0x66>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10e      	bne.n	800b40a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7fe f980 	bl	80096f4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7fd fbe7 	bl	8008bca <dir_next>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	2b04      	cmp	r3, #4
 800b404:	d101      	bne.n	800b40a <f_readdir+0x8a>
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800b40a:	6938      	ldr	r0, [r7, #16]
 800b40c:	f000 fbb7 	bl	800bb7e <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800b410:	7dfb      	ldrb	r3, [r7, #23]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3718      	adds	r7, #24
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b092      	sub	sp, #72	; 0x48
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b426:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b42a:	f107 030c 	add.w	r3, r7, #12
 800b42e:	2200      	movs	r2, #0
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe fd01 	bl	8009e38 <find_volume>
 800b436:	4603      	mov	r3, r0
 800b438:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b43c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b440:	2b00      	cmp	r3, #0
 800b442:	f040 8099 	bne.w	800b578 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44e:	695a      	ldr	r2, [r3, #20]
 800b450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	3b02      	subs	r3, #2
 800b456:	429a      	cmp	r2, r3
 800b458:	d804      	bhi.n	800b464 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45c:	695a      	ldr	r2, [r3, #20]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	e089      	b.n	800b578 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d128      	bne.n	800b4c2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b470:	2302      	movs	r3, #2
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b478:	f107 0314 	add.w	r3, r7, #20
 800b47c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd f863 	bl	800854a <get_fat>
 800b484:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48c:	d103      	bne.n	800b496 <f_getfree+0x7c>
 800b48e:	2301      	movs	r3, #1
 800b490:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b494:	e063      	b.n	800b55e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d103      	bne.n	800b4a4 <f_getfree+0x8a>
 800b49c:	2302      	movs	r3, #2
 800b49e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b4a2:	e05c      	b.n	800b55e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <f_getfree+0x96>
 800b4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d3db      	bcc.n	800b478 <f_getfree+0x5e>
 800b4c0:	e04d      	b.n	800b55e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d113      	bne.n	800b504 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	f7fc ff75 	bl	80083d4 <move_window>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b4f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d131      	bne.n	800b55c <f_getfree+0x142>
							p = fs->win;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	3334      	adds	r3, #52	; 0x34
 800b4fc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b4fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b502:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d10f      	bne.n	800b52c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b50e:	f7fc fcb1 	bl	8007e74 <ld_word>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d102      	bne.n	800b51e <f_getfree+0x104>
 800b518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51a:	3301      	adds	r3, #1
 800b51c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	3302      	adds	r3, #2
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	3b02      	subs	r3, #2
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
 800b52a:	e010      	b.n	800b54e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b52c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b52e:	f7fc fcb9 	bl	8007ea4 <ld_dword>
 800b532:	4603      	mov	r3, r0
 800b534:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <f_getfree+0x128>
 800b53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53e:	3301      	adds	r3, #1
 800b540:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	3304      	adds	r3, #4
 800b546:	633b      	str	r3, [r7, #48]	; 0x30
 800b548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54a:	3b04      	subs	r3, #4
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b550:	3b01      	subs	r3, #1
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1bd      	bne.n	800b4d6 <f_getfree+0xbc>
 800b55a:	e000      	b.n	800b55e <f_getfree+0x144>
							if (res != FR_OK) break;
 800b55c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b562:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b568:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	791a      	ldrb	r2, [r3, #4]
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	f042 0201 	orr.w	r2, r2, #1
 800b574:	b2d2      	uxtb	r2, r2
 800b576:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b578:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3748      	adds	r7, #72	; 0x48
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	2b0a      	cmp	r3, #10
 800b594:	d103      	bne.n	800b59e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b596:	210d      	movs	r1, #13
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff fff3 	bl	800b584 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	db25      	blt.n	800b5f6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1c5a      	adds	r2, r3, #1
 800b5ae:	60fa      	str	r2, [r7, #12]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	78fa      	ldrb	r2, [r7, #3]
 800b5b6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b3c      	cmp	r3, #60	; 0x3c
 800b5bc:	dd12      	ble.n	800b5e4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f103 010c 	add.w	r1, r3, #12
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	f7ff fa08 	bl	800a9e2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d101      	bne.n	800b5de <putc_bfd+0x5a>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	e001      	b.n	800b5e2 <putc_bfd+0x5e>
 800b5de:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	609a      	str	r2, [r3, #8]
 800b5f4:	e000      	b.n	800b5f8 <putc_bfd+0x74>
	if (i < 0) return;
 800b5f6:	bf00      	nop
}
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	db16      	blt.n	800b63c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f103 010c 	add.w	r1, r3, #12
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	461a      	mov	r2, r3
 800b61e:	f107 030c 	add.w	r3, r7, #12
 800b622:	f7ff f9de 	bl	800a9e2 <f_write>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d107      	bne.n	800b63c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	4293      	cmp	r3, r2
 800b634:	d102      	bne.n	800b63c <putc_flush+0x3e>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	e001      	b.n	800b640 <putc_flush+0x42>
	return EOF;
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	683a      	ldr	r2, [r7, #0]
 800b656:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	605a      	str	r2, [r3, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	609a      	str	r2, [r3, #8]
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
	...

0800b674 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b674:	b40e      	push	{r1, r2, r3}
 800b676:	b580      	push	{r7, lr}
 800b678:	b0a7      	sub	sp, #156	; 0x9c
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b67e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff ffdf 	bl	800b648 <putc_init>

	va_start(arp, fmt);
 800b68a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b68e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b690:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b6a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 81f2 	beq.w	800ba8e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800b6aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6ae:	2b25      	cmp	r3, #37	; 0x25
 800b6b0:	d008      	beq.n	800b6c4 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b6b2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b6b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff ff61 	bl	800b584 <putc_bfd>
			continue;
 800b6c2:	e1e3      	b.n	800ba8c <f_printf+0x418>
		}
		w = f = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b6d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b6e0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6e4:	2b30      	cmp	r3, #48	; 0x30
 800b6e6:	d10b      	bne.n	800b700 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b6fe:	e024      	b.n	800b74a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b700:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b704:	2b2d      	cmp	r3, #45	; 0x2d
 800b706:	d120      	bne.n	800b74a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b708:	2302      	movs	r3, #2
 800b70a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b70e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b71e:	e014      	b.n	800b74a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b720:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b724:	4613      	mov	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	461a      	mov	r2, r3
 800b72e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b732:	4413      	add	r3, r2
 800b734:	3b30      	subs	r3, #48	; 0x30
 800b736:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b73a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b74a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b74e:	2b2f      	cmp	r3, #47	; 0x2f
 800b750:	d903      	bls.n	800b75a <f_printf+0xe6>
 800b752:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b756:	2b39      	cmp	r3, #57	; 0x39
 800b758:	d9e2      	bls.n	800b720 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b75a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b75e:	2b6c      	cmp	r3, #108	; 0x6c
 800b760:	d003      	beq.n	800b76a <f_printf+0xf6>
 800b762:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b766:	2b4c      	cmp	r3, #76	; 0x4c
 800b768:	d10d      	bne.n	800b786 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b76a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b76e:	f043 0304 	orr.w	r3, r3, #4
 800b772:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b786:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 8181 	beq.w	800ba92 <f_printf+0x41e>
		d = c;
 800b790:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b794:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b798:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b79c:	2b60      	cmp	r3, #96	; 0x60
 800b79e:	d908      	bls.n	800b7b2 <f_printf+0x13e>
 800b7a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b7a4:	2b7a      	cmp	r3, #122	; 0x7a
 800b7a6:	d804      	bhi.n	800b7b2 <f_printf+0x13e>
 800b7a8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b7ac:	3b20      	subs	r3, #32
 800b7ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b7b2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b7b6:	3b42      	subs	r3, #66	; 0x42
 800b7b8:	2b16      	cmp	r3, #22
 800b7ba:	f200 8098 	bhi.w	800b8ee <f_printf+0x27a>
 800b7be:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <f_printf+0x150>)
 800b7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c4:	0800b8cf 	.word	0x0800b8cf
 800b7c8:	0800b8b7 	.word	0x0800b8b7
 800b7cc:	0800b8df 	.word	0x0800b8df
 800b7d0:	0800b8ef 	.word	0x0800b8ef
 800b7d4:	0800b8ef 	.word	0x0800b8ef
 800b7d8:	0800b8ef 	.word	0x0800b8ef
 800b7dc:	0800b8ef 	.word	0x0800b8ef
 800b7e0:	0800b8ef 	.word	0x0800b8ef
 800b7e4:	0800b8ef 	.word	0x0800b8ef
 800b7e8:	0800b8ef 	.word	0x0800b8ef
 800b7ec:	0800b8ef 	.word	0x0800b8ef
 800b7f0:	0800b8ef 	.word	0x0800b8ef
 800b7f4:	0800b8ef 	.word	0x0800b8ef
 800b7f8:	0800b8d7 	.word	0x0800b8d7
 800b7fc:	0800b8ef 	.word	0x0800b8ef
 800b800:	0800b8ef 	.word	0x0800b8ef
 800b804:	0800b8ef 	.word	0x0800b8ef
 800b808:	0800b821 	.word	0x0800b821
 800b80c:	0800b8ef 	.word	0x0800b8ef
 800b810:	0800b8df 	.word	0x0800b8df
 800b814:	0800b8ef 	.word	0x0800b8ef
 800b818:	0800b8ef 	.word	0x0800b8ef
 800b81c:	0800b8e7 	.word	0x0800b8e7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	67ba      	str	r2, [r7, #120]	; 0x78
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b82a:	2300      	movs	r3, #0
 800b82c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b830:	e004      	b.n	800b83c <f_printf+0x1c8>
 800b832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b836:	3301      	adds	r3, #1
 800b838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b83c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b842:	4413      	add	r3, r2
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1f3      	bne.n	800b832 <f_printf+0x1be>
			if (!(f & 2)) {
 800b84a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b84e:	f003 0302 	and.w	r3, r3, #2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d11a      	bne.n	800b88c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b856:	e005      	b.n	800b864 <f_printf+0x1f0>
 800b858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b85c:	2120      	movs	r1, #32
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff fe90 	bl	800b584 <putc_bfd>
 800b864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b86e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b872:	429a      	cmp	r2, r3
 800b874:	d8f0      	bhi.n	800b858 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b876:	e009      	b.n	800b88c <f_printf+0x218>
 800b878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b87e:	781a      	ldrb	r2, [r3, #0]
 800b880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b884:	4611      	mov	r1, r2
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff fe7c 	bl	800b584 <putc_bfd>
 800b88c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f1      	bne.n	800b878 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b894:	e005      	b.n	800b8a2 <f_printf+0x22e>
 800b896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b89a:	2120      	movs	r1, #32
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fe71 	bl	800b584 <putc_bfd>
 800b8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d8f0      	bhi.n	800b896 <f_printf+0x222>
			continue;
 800b8b4:	e0ea      	b.n	800ba8c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b8b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8b8:	1d1a      	adds	r2, r3, #4
 800b8ba:	67ba      	str	r2, [r7, #120]	; 0x78
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff fe5c 	bl	800b584 <putc_bfd>
 800b8cc:	e0de      	b.n	800ba8c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b8d4:	e014      	b.n	800b900 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b8dc:	e010      	b.n	800b900 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b8de:	230a      	movs	r3, #10
 800b8e0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b8e4:	e00c      	b.n	800b900 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b8e6:	2310      	movs	r3, #16
 800b8e8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b8ec:	e008      	b.n	800b900 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b8ee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b8f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff fe43 	bl	800b584 <putc_bfd>
 800b8fe:	e0c5      	b.n	800ba8c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b900:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d004      	beq.n	800b916 <f_printf+0x2a2>
 800b90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b90e:	1d1a      	adds	r2, r3, #4
 800b910:	67ba      	str	r2, [r7, #120]	; 0x78
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	e00c      	b.n	800b930 <f_printf+0x2bc>
 800b916:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b91a:	2b44      	cmp	r3, #68	; 0x44
 800b91c:	d104      	bne.n	800b928 <f_printf+0x2b4>
 800b91e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b920:	1d1a      	adds	r2, r3, #4
 800b922:	67ba      	str	r2, [r7, #120]	; 0x78
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	e003      	b.n	800b930 <f_printf+0x2bc>
 800b928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b934:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b938:	2b44      	cmp	r3, #68	; 0x44
 800b93a:	d10e      	bne.n	800b95a <f_printf+0x2e6>
 800b93c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b940:	2b00      	cmp	r3, #0
 800b942:	da0a      	bge.n	800b95a <f_printf+0x2e6>
			v = 0 - v;
 800b944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b948:	425b      	negs	r3, r3
 800b94a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b94e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b952:	f043 0308 	orr.w	r3, r3, #8
 800b956:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b960:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b968:	fbb3 f1f2 	udiv	r1, r3, r2
 800b96c:	fb01 f202 	mul.w	r2, r1, r2
 800b970:	1a9b      	subs	r3, r3, r2
 800b972:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b976:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b97a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b97e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b986:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b98a:	2b09      	cmp	r3, #9
 800b98c:	d90b      	bls.n	800b9a6 <f_printf+0x332>
 800b98e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b992:	2b78      	cmp	r3, #120	; 0x78
 800b994:	d101      	bne.n	800b99a <f_printf+0x326>
 800b996:	2227      	movs	r2, #39	; 0x27
 800b998:	e000      	b.n	800b99c <f_printf+0x328>
 800b99a:	2207      	movs	r2, #7
 800b99c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b9a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b9b0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b9b4:	3230      	adds	r2, #48	; 0x30
 800b9b6:	b2d2      	uxtb	r2, r2
 800b9b8:	3398      	adds	r3, #152	; 0x98
 800b9ba:	443b      	add	r3, r7
 800b9bc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b9c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <f_printf+0x35c>
 800b9c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9cc:	2b1f      	cmp	r3, #31
 800b9ce:	d9c7      	bls.n	800b960 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b9d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b9d4:	f003 0308 	and.w	r3, r3, #8
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d009      	beq.n	800b9f0 <f_printf+0x37c>
 800b9dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b9e6:	3398      	adds	r3, #152	; 0x98
 800b9e8:	443b      	add	r3, r7
 800b9ea:	222d      	movs	r2, #45	; 0x2d
 800b9ec:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b9f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b9f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <f_printf+0x394>
 800ba04:	2330      	movs	r3, #48	; 0x30
 800ba06:	e000      	b.n	800ba0a <f_printf+0x396>
 800ba08:	2320      	movs	r3, #32
 800ba0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ba0e:	e007      	b.n	800ba20 <f_printf+0x3ac>
 800ba10:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ba14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba18:	4611      	mov	r1, r2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff fdb2 	bl	800b584 <putc_bfd>
 800ba20:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ba24:	f003 0302 	and.w	r3, r3, #2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d108      	bne.n	800ba3e <f_printf+0x3ca>
 800ba2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d8e8      	bhi.n	800ba10 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ba3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba42:	3b01      	subs	r3, #1
 800ba44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba48:	f107 020c 	add.w	r2, r7, #12
 800ba4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba50:	4413      	add	r3, r2
 800ba52:	781a      	ldrb	r2, [r3, #0]
 800ba54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff fd92 	bl	800b584 <putc_bfd>
		} while (i);
 800ba60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1ea      	bne.n	800ba3e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ba68:	e007      	b.n	800ba7a <f_printf+0x406>
 800ba6a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ba6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff fd85 	bl	800b584 <putc_bfd>
 800ba7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d8ee      	bhi.n	800ba6a <f_printf+0x3f6>
		c = *fmt++;
 800ba8c:	e600      	b.n	800b690 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ba8e:	bf00      	nop
 800ba90:	e000      	b.n	800ba94 <f_printf+0x420>
		if (!c) break;
 800ba92:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ba94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fdb0 	bl	800b5fe <putc_flush>
 800ba9e:	4603      	mov	r3, r0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	379c      	adds	r7, #156	; 0x9c
 800baa4:	46bd      	mov	sp, r7
 800baa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baaa:	b003      	add	sp, #12
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop

0800bab0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	4613      	mov	r3, r2
 800babc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800babe:	2301      	movs	r3, #1
 800bac0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bac6:	4b1f      	ldr	r3, [pc, #124]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bac8:	7b9b      	ldrb	r3, [r3, #14]
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d831      	bhi.n	800bb34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bad0:	4b1c      	ldr	r3, [pc, #112]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bad2:	7b9b      	ldrb	r3, [r3, #14]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	461a      	mov	r2, r3
 800bad8:	4b1a      	ldr	r3, [pc, #104]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bada:	2100      	movs	r1, #0
 800badc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bade:	4b19      	ldr	r3, [pc, #100]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bae0:	7b9b      	ldrb	r3, [r3, #14]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	4a17      	ldr	r2, [pc, #92]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800baee:	4b15      	ldr	r3, [pc, #84]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800baf0:	7b9b      	ldrb	r3, [r3, #14]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	461a      	mov	r2, r3
 800baf6:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800baf8:	4413      	add	r3, r2
 800bafa:	79fa      	ldrb	r2, [r7, #7]
 800bafc:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800bafe:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bb00:	7b9b      	ldrb	r3, [r3, #14]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	b2d1      	uxtb	r1, r2
 800bb08:	4a0e      	ldr	r2, [pc, #56]	; (800bb44 <FATFS_LinkDriverEx+0x94>)
 800bb0a:	7391      	strb	r1, [r2, #14]
 800bb0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb0e:	7dbb      	ldrb	r3, [r7, #22]
 800bb10:	3330      	adds	r3, #48	; 0x30
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	223a      	movs	r2, #58	; 0x3a
 800bb1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	3302      	adds	r3, #2
 800bb24:	222f      	movs	r2, #47	; 0x2f
 800bb26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	3303      	adds	r3, #3
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	2000d090 	.word	0x2000d090

0800bb48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb52:	2200      	movs	r2, #0
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff ffaa 	bl	800bab0 <FATFS_LinkDriverEx>
 800bb5c:	4603      	mov	r3, r0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f007 f86c 	bl	8012c4c <malloc>
 800bb74:	4603      	mov	r3, r0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f007 f868 	bl	8012c5c <free>
}
 800bb8c:	bf00      	nop
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bba0:	88fb      	ldrh	r3, [r7, #6]
 800bba2:	2b7f      	cmp	r3, #127	; 0x7f
 800bba4:	d802      	bhi.n	800bbac <ff_convert+0x18>
		c = chr;
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	81fb      	strh	r3, [r7, #14]
 800bbaa:	e025      	b.n	800bbf8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00b      	beq.n	800bbca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bbb2:	88fb      	ldrh	r3, [r7, #6]
 800bbb4:	2bff      	cmp	r3, #255	; 0xff
 800bbb6:	d805      	bhi.n	800bbc4 <ff_convert+0x30>
 800bbb8:	88fb      	ldrh	r3, [r7, #6]
 800bbba:	3b80      	subs	r3, #128	; 0x80
 800bbbc:	4a12      	ldr	r2, [pc, #72]	; (800bc08 <ff_convert+0x74>)
 800bbbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc2:	e000      	b.n	800bbc6 <ff_convert+0x32>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	81fb      	strh	r3, [r7, #14]
 800bbc8:	e016      	b.n	800bbf8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bbca:	2300      	movs	r3, #0
 800bbcc:	81fb      	strh	r3, [r7, #14]
 800bbce:	e009      	b.n	800bbe4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bbd0:	89fb      	ldrh	r3, [r7, #14]
 800bbd2:	4a0d      	ldr	r2, [pc, #52]	; (800bc08 <ff_convert+0x74>)
 800bbd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbd8:	88fa      	ldrh	r2, [r7, #6]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d006      	beq.n	800bbec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bbde:	89fb      	ldrh	r3, [r7, #14]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	81fb      	strh	r3, [r7, #14]
 800bbe4:	89fb      	ldrh	r3, [r7, #14]
 800bbe6:	2b7f      	cmp	r3, #127	; 0x7f
 800bbe8:	d9f2      	bls.n	800bbd0 <ff_convert+0x3c>
 800bbea:	e000      	b.n	800bbee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bbec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bbee:	89fb      	ldrh	r3, [r7, #14]
 800bbf0:	3380      	adds	r3, #128	; 0x80
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bbf8:	89fb      	ldrh	r3, [r7, #14]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	080251f4 	.word	0x080251f4

0800bc0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc1c:	d201      	bcs.n	800bc22 <ff_wtoupper+0x16>
 800bc1e:	4b3e      	ldr	r3, [pc, #248]	; (800bd18 <ff_wtoupper+0x10c>)
 800bc20:	e000      	b.n	800bc24 <ff_wtoupper+0x18>
 800bc22:	4b3e      	ldr	r3, [pc, #248]	; (800bd1c <ff_wtoupper+0x110>)
 800bc24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	1c9a      	adds	r2, r3, #2
 800bc2a:	617a      	str	r2, [r7, #20]
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bc30:	8a7b      	ldrh	r3, [r7, #18]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d068      	beq.n	800bd08 <ff_wtoupper+0xfc>
 800bc36:	88fa      	ldrh	r2, [r7, #6]
 800bc38:	8a7b      	ldrh	r3, [r7, #18]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d364      	bcc.n	800bd08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	1c9a      	adds	r2, r3, #2
 800bc42:	617a      	str	r2, [r7, #20]
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	823b      	strh	r3, [r7, #16]
 800bc48:	8a3b      	ldrh	r3, [r7, #16]
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	81fb      	strh	r3, [r7, #14]
 800bc4e:	8a3b      	ldrh	r3, [r7, #16]
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	8a79      	ldrh	r1, [r7, #18]
 800bc58:	8a3b      	ldrh	r3, [r7, #16]
 800bc5a:	440b      	add	r3, r1
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	da49      	bge.n	800bcf4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bc60:	89fb      	ldrh	r3, [r7, #14]
 800bc62:	2b08      	cmp	r3, #8
 800bc64:	d84f      	bhi.n	800bd06 <ff_wtoupper+0xfa>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <ff_wtoupper+0x60>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc91 	.word	0x0800bc91
 800bc70:	0800bca3 	.word	0x0800bca3
 800bc74:	0800bcb9 	.word	0x0800bcb9
 800bc78:	0800bcc1 	.word	0x0800bcc1
 800bc7c:	0800bcc9 	.word	0x0800bcc9
 800bc80:	0800bcd1 	.word	0x0800bcd1
 800bc84:	0800bcd9 	.word	0x0800bcd9
 800bc88:	0800bce1 	.word	0x0800bce1
 800bc8c:	0800bce9 	.word	0x0800bce9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bc90:	88fa      	ldrh	r2, [r7, #6]
 800bc92:	8a7b      	ldrh	r3, [r7, #18]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	80fb      	strh	r3, [r7, #6]
 800bca0:	e027      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bca2:	88fa      	ldrh	r2, [r7, #6]
 800bca4:	8a7b      	ldrh	r3, [r7, #18]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f003 0301 	and.w	r3, r3, #1
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	88fa      	ldrh	r2, [r7, #6]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	80fb      	strh	r3, [r7, #6]
 800bcb6:	e01c      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	3b10      	subs	r3, #16
 800bcbc:	80fb      	strh	r3, [r7, #6]
 800bcbe:	e018      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bcc0:	88fb      	ldrh	r3, [r7, #6]
 800bcc2:	3b20      	subs	r3, #32
 800bcc4:	80fb      	strh	r3, [r7, #6]
 800bcc6:	e014      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	3b30      	subs	r3, #48	; 0x30
 800bccc:	80fb      	strh	r3, [r7, #6]
 800bcce:	e010      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	3b1a      	subs	r3, #26
 800bcd4:	80fb      	strh	r3, [r7, #6]
 800bcd6:	e00c      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	80fb      	strh	r3, [r7, #6]
 800bcde:	e008      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	3b50      	subs	r3, #80	; 0x50
 800bce4:	80fb      	strh	r3, [r7, #6]
 800bce6:	e004      	b.n	800bcf2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bce8:	88fb      	ldrh	r3, [r7, #6]
 800bcea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bcee:	80fb      	strh	r3, [r7, #6]
 800bcf0:	bf00      	nop
			}
			break;
 800bcf2:	e008      	b.n	800bd06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d195      	bne.n	800bc26 <ff_wtoupper+0x1a>
 800bcfa:	8a3b      	ldrh	r3, [r7, #16]
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4413      	add	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bd04:	e78f      	b.n	800bc26 <ff_wtoupper+0x1a>
			break;
 800bd06:	bf00      	nop
	}

	return chr;
 800bd08:	88fb      	ldrh	r3, [r7, #6]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	080252f4 	.word	0x080252f4
 800bd1c:	080254e8 	.word	0x080254e8

0800bd20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bd24:	4b0e      	ldr	r3, [pc, #56]	; (800bd60 <HAL_Init+0x40>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a0d      	ldr	r2, [pc, #52]	; (800bd60 <HAL_Init+0x40>)
 800bd2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <HAL_Init+0x40>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a0a      	ldr	r2, [pc, #40]	; (800bd60 <HAL_Init+0x40>)
 800bd36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bd3c:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <HAL_Init+0x40>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a07      	ldr	r2, [pc, #28]	; (800bd60 <HAL_Init+0x40>)
 800bd42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bd48:	2003      	movs	r0, #3
 800bd4a:	f000 fead 	bl	800caa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bd4e:	2000      	movs	r0, #0
 800bd50:	f000 f808 	bl	800bd64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bd54:	f7f5 fadc 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	40023c00 	.word	0x40023c00

0800bd64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bd6c:	4b12      	ldr	r3, [pc, #72]	; (800bdb8 <HAL_InitTick+0x54>)
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <HAL_InitTick+0x58>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	4619      	mov	r1, r3
 800bd76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fed3 	bl	800cb2e <HAL_SYSTICK_Config>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e00e      	b.n	800bdb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b0f      	cmp	r3, #15
 800bd96:	d80a      	bhi.n	800bdae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bd98:	2200      	movs	r2, #0
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bda0:	f000 fe8d 	bl	800cabe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bda4:	4a06      	ldr	r2, [pc, #24]	; (800bdc0 <HAL_InitTick+0x5c>)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e000      	b.n	800bdb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20000000 	.word	0x20000000
 800bdbc:	200000c4 	.word	0x200000c4
 800bdc0:	200000c0 	.word	0x200000c0

0800bdc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bdc8:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <HAL_IncTick+0x20>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <HAL_IncTick+0x24>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	4a04      	ldr	r2, [pc, #16]	; (800bde8 <HAL_IncTick+0x24>)
 800bdd6:	6013      	str	r3, [r2, #0]
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	200000c4 	.word	0x200000c4
 800bde8:	2000d0a0 	.word	0x2000d0a0

0800bdec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  return uwTick;
 800bdf0:	4b03      	ldr	r3, [pc, #12]	; (800be00 <HAL_GetTick+0x14>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	2000d0a0 	.word	0x2000d0a0

0800be04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800be0c:	f7ff ffee 	bl	800bdec <HAL_GetTick>
 800be10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d005      	beq.n	800be2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800be1e:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <HAL_Delay+0x44>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	4413      	add	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800be2a:	bf00      	nop
 800be2c:	f7ff ffde 	bl	800bdec <HAL_GetTick>
 800be30:	4602      	mov	r2, r0
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d8f7      	bhi.n	800be2c <HAL_Delay+0x28>
  {
  }
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	200000c4 	.word	0x200000c4

0800be4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e033      	b.n	800beca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be66:	2b00      	cmp	r3, #0
 800be68:	d109      	bne.n	800be7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7fa fc42 	bl	80066f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	f003 0310 	and.w	r3, r3, #16
 800be86:	2b00      	cmp	r3, #0
 800be88:	d118      	bne.n	800bebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800be92:	f023 0302 	bic.w	r3, r3, #2
 800be96:	f043 0202 	orr.w	r2, r3, #2
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fb86 	bl	800c5b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0201 	orr.w	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	641a      	str	r2, [r3, #64]	; 0x40
 800beba:	e001      	b.n	800bec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800beda:	2300      	movs	r3, #0
 800bedc:	60fb      	str	r3, [r7, #12]
 800bede:	2300      	movs	r3, #0
 800bee0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0302 	and.w	r3, r3, #2
 800beec:	2b02      	cmp	r3, #2
 800beee:	bf0c      	ite	eq
 800bef0:	2301      	moveq	r3, #1
 800bef2:	2300      	movne	r3, #0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f003 0320 	and.w	r3, r3, #32
 800bf02:	2b20      	cmp	r3, #32
 800bf04:	bf0c      	ite	eq
 800bf06:	2301      	moveq	r3, #1
 800bf08:	2300      	movne	r3, #0
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d049      	beq.n	800bfa8 <HAL_ADC_IRQHandler+0xd6>
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d046      	beq.n	800bfa8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1e:	f003 0310 	and.w	r3, r3, #16
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d105      	bne.n	800bf32 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d12b      	bne.n	800bf98 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d127      	bne.n	800bf98 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d006      	beq.n	800bf64 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d119      	bne.n	800bf98 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f022 0220 	bic.w	r2, r2, #32
 800bf72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d105      	bne.n	800bf98 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf90:	f043 0201 	orr.w	r2, r3, #1
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f9af 	bl	800c2fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f06f 0212 	mvn.w	r2, #18
 800bfa6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 0304 	and.w	r3, r3, #4
 800bfb2:	2b04      	cmp	r3, #4
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2301      	moveq	r3, #1
 800bfb8:	2300      	movne	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc8:	2b80      	cmp	r3, #128	; 0x80
 800bfca:	bf0c      	ite	eq
 800bfcc:	2301      	moveq	r3, #1
 800bfce:	2300      	movne	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d057      	beq.n	800c08a <HAL_ADC_IRQHandler+0x1b8>
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d054      	beq.n	800c08a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe4:	f003 0310 	and.w	r3, r3, #16
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d105      	bne.n	800bff8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d139      	bne.n	800c07a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c010:	2b00      	cmp	r3, #0
 800c012:	d006      	beq.n	800c022 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d12b      	bne.n	800c07a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d124      	bne.n	800c07a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d11d      	bne.n	800c07a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c042:	2b00      	cmp	r3, #0
 800c044:	d119      	bne.n	800c07a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c054:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d105      	bne.n	800c07a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	f043 0201 	orr.w	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fc16 	bl	800c8ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f06f 020c 	mvn.w	r2, #12
 800c088:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b01      	cmp	r3, #1
 800c096:	bf0c      	ite	eq
 800c098:	2301      	moveq	r3, #1
 800c09a:	2300      	movne	r3, #0
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0aa:	2b40      	cmp	r3, #64	; 0x40
 800c0ac:	bf0c      	ite	eq
 800c0ae:	2301      	moveq	r3, #1
 800c0b0:	2300      	movne	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d017      	beq.n	800c0ec <HAL_ADC_IRQHandler+0x21a>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d014      	beq.n	800c0ec <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d10d      	bne.n	800c0ec <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f921 	bl	800c324 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f06f 0201 	mvn.w	r2, #1
 800c0ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0320 	and.w	r3, r3, #32
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	bf0c      	ite	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c10c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c110:	bf0c      	ite	eq
 800c112:	2301      	moveq	r3, #1
 800c114:	2300      	movne	r3, #0
 800c116:	b2db      	uxtb	r3, r3
 800c118:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d015      	beq.n	800c14c <HAL_ADC_IRQHandler+0x27a>
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d012      	beq.n	800c14c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12a:	f043 0202 	orr.w	r2, r3, #2
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f06f 0220 	mvn.w	r2, #32
 800c13a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f8fb 	bl	800c338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f06f 0220 	mvn.w	r2, #32
 800c14a:	601a      	str	r2, [r3, #0]
  }
}
 800c14c:	bf00      	nop
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <HAL_ADC_Start_DMA+0x1e>
 800c16e:	2302      	movs	r3, #2
 800c170:	e0b1      	b.n	800c2d6 <HAL_ADC_Start_DMA+0x182>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b01      	cmp	r3, #1
 800c186:	d018      	beq.n	800c1ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0201 	orr.w	r2, r2, #1
 800c196:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c198:	4b51      	ldr	r3, [pc, #324]	; (800c2e0 <HAL_ADC_Start_DMA+0x18c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a51      	ldr	r2, [pc, #324]	; (800c2e4 <HAL_ADC_Start_DMA+0x190>)
 800c19e:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a2:	0c9a      	lsrs	r2, r3, #18
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	4413      	add	r3, r2
 800c1aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c1ac:	e002      	b.n	800c1b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1f9      	bne.n	800c1ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	f040 8085 	bne.w	800c2d4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c1d2:	f023 0301 	bic.w	r3, r3, #1
 800c1d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d007      	beq.n	800c1fc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c1f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c208:	d106      	bne.n	800c218 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c20e:	f023 0206 	bic.w	r2, r3, #6
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	645a      	str	r2, [r3, #68]	; 0x44
 800c216:	e002      	b.n	800c21e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c226:	4b30      	ldr	r3, [pc, #192]	; (800c2e8 <HAL_ADC_Start_DMA+0x194>)
 800c228:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	4a2f      	ldr	r2, [pc, #188]	; (800c2ec <HAL_ADC_Start_DMA+0x198>)
 800c230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c236:	4a2e      	ldr	r2, [pc, #184]	; (800c2f0 <HAL_ADC_Start_DMA+0x19c>)
 800c238:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	4a2d      	ldr	r2, [pc, #180]	; (800c2f4 <HAL_ADC_Start_DMA+0x1a0>)
 800c240:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c24a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c25a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	689a      	ldr	r2, [r3, #8]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c26a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	334c      	adds	r3, #76	; 0x4c
 800c276:	4619      	mov	r1, r3
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f000 fd70 	bl	800cd60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f003 031f 	and.w	r3, r3, #31
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10f      	bne.n	800c2ac <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c296:	2b00      	cmp	r3, #0
 800c298:	d11c      	bne.n	800c2d4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c2a8:	609a      	str	r2, [r3, #8]
 800c2aa:	e013      	b.n	800c2d4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a11      	ldr	r2, [pc, #68]	; (800c2f8 <HAL_ADC_Start_DMA+0x1a4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d10e      	bne.n	800c2d4 <HAL_ADC_Start_DMA+0x180>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d107      	bne.n	800c2d4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c2d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3718      	adds	r7, #24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000000 	.word	0x20000000
 800c2e4:	431bde83 	.word	0x431bde83
 800c2e8:	40012300 	.word	0x40012300
 800c2ec:	0800c7a9 	.word	0x0800c7a9
 800c2f0:	0800c863 	.word	0x0800c863
 800c2f4:	0800c87f 	.word	0x0800c87f
 800c2f8:	40012000 	.word	0x40012000

0800c2fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c360:	2b01      	cmp	r3, #1
 800c362:	d101      	bne.n	800c368 <HAL_ADC_ConfigChannel+0x1c>
 800c364:	2302      	movs	r3, #2
 800c366:	e113      	b.n	800c590 <HAL_ADC_ConfigChannel+0x244>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b09      	cmp	r3, #9
 800c376:	d925      	bls.n	800c3c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68d9      	ldr	r1, [r3, #12]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	461a      	mov	r2, r3
 800c386:	4613      	mov	r3, r2
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	3b1e      	subs	r3, #30
 800c38e:	2207      	movs	r2, #7
 800c390:	fa02 f303 	lsl.w	r3, r2, r3
 800c394:	43da      	mvns	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	400a      	ands	r2, r1
 800c39c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68d9      	ldr	r1, [r3, #12]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	689a      	ldr	r2, [r3, #8]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4403      	add	r3, r0
 800c3b6:	3b1e      	subs	r3, #30
 800c3b8:	409a      	lsls	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	e022      	b.n	800c40a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6919      	ldr	r1, [r3, #16]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	2207      	movs	r2, #7
 800c3da:	fa02 f303 	lsl.w	r3, r2, r3
 800c3de:	43da      	mvns	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	400a      	ands	r2, r1
 800c3e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6919      	ldr	r1, [r3, #16]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	689a      	ldr	r2, [r3, #8]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4403      	add	r3, r0
 800c400:	409a      	lsls	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	430a      	orrs	r2, r1
 800c408:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	2b06      	cmp	r3, #6
 800c410:	d824      	bhi.n	800c45c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	4613      	mov	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	3b05      	subs	r3, #5
 800c424:	221f      	movs	r2, #31
 800c426:	fa02 f303 	lsl.w	r3, r2, r3
 800c42a:	43da      	mvns	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	400a      	ands	r2, r1
 800c432:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	b29b      	uxth	r3, r3
 800c440:	4618      	mov	r0, r3
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	3b05      	subs	r3, #5
 800c44e:	fa00 f203 	lsl.w	r2, r0, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	430a      	orrs	r2, r1
 800c458:	635a      	str	r2, [r3, #52]	; 0x34
 800c45a:	e04c      	b.n	800c4f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	2b0c      	cmp	r3, #12
 800c462:	d824      	bhi.n	800c4ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	3b23      	subs	r3, #35	; 0x23
 800c476:	221f      	movs	r2, #31
 800c478:	fa02 f303 	lsl.w	r3, r2, r3
 800c47c:	43da      	mvns	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	400a      	ands	r2, r1
 800c484:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	b29b      	uxth	r3, r3
 800c492:	4618      	mov	r0, r3
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	3b23      	subs	r3, #35	; 0x23
 800c4a0:	fa00 f203 	lsl.w	r2, r0, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	430a      	orrs	r2, r1
 800c4aa:	631a      	str	r2, [r3, #48]	; 0x30
 800c4ac:	e023      	b.n	800c4f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	3b41      	subs	r3, #65	; 0x41
 800c4c0:	221f      	movs	r2, #31
 800c4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c6:	43da      	mvns	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	400a      	ands	r2, r1
 800c4ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4618      	mov	r0, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	3b41      	subs	r3, #65	; 0x41
 800c4ea:	fa00 f203 	lsl.w	r2, r0, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c4f6:	4b29      	ldr	r3, [pc, #164]	; (800c59c <HAL_ADC_ConfigChannel+0x250>)
 800c4f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a28      	ldr	r2, [pc, #160]	; (800c5a0 <HAL_ADC_ConfigChannel+0x254>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d10f      	bne.n	800c524 <HAL_ADC_ConfigChannel+0x1d8>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b12      	cmp	r3, #18
 800c50a:	d10b      	bne.n	800c524 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a1d      	ldr	r2, [pc, #116]	; (800c5a0 <HAL_ADC_ConfigChannel+0x254>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d12b      	bne.n	800c586 <HAL_ADC_ConfigChannel+0x23a>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a1c      	ldr	r2, [pc, #112]	; (800c5a4 <HAL_ADC_ConfigChannel+0x258>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d003      	beq.n	800c540 <HAL_ADC_ConfigChannel+0x1f4>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b11      	cmp	r3, #17
 800c53e:	d122      	bne.n	800c586 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a11      	ldr	r2, [pc, #68]	; (800c5a4 <HAL_ADC_ConfigChannel+0x258>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d111      	bne.n	800c586 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c562:	4b11      	ldr	r3, [pc, #68]	; (800c5a8 <HAL_ADC_ConfigChannel+0x25c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a11      	ldr	r2, [pc, #68]	; (800c5ac <HAL_ADC_ConfigChannel+0x260>)
 800c568:	fba2 2303 	umull	r2, r3, r2, r3
 800c56c:	0c9a      	lsrs	r2, r3, #18
 800c56e:	4613      	mov	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c578:	e002      	b.n	800c580 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1f9      	bne.n	800c57a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	40012300 	.word	0x40012300
 800c5a0:	40012000 	.word	0x40012000
 800c5a4:	10000012 	.word	0x10000012
 800c5a8:	20000000 	.word	0x20000000
 800c5ac:	431bde83 	.word	0x431bde83

0800c5b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c5b8:	4b79      	ldr	r3, [pc, #484]	; (800c7a0 <ADC_Init+0x1f0>)
 800c5ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6859      	ldr	r1, [r3, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	021a      	lsls	r2, r3, #8
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6859      	ldr	r1, [r3, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	430a      	orrs	r2, r1
 800c61a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c62a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6899      	ldr	r1, [r3, #8]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	430a      	orrs	r2, r1
 800c63c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	4a58      	ldr	r2, [pc, #352]	; (800c7a4 <ADC_Init+0x1f4>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d022      	beq.n	800c68e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689a      	ldr	r2, [r3, #8]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6899      	ldr	r1, [r3, #8]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	430a      	orrs	r2, r1
 800c668:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	689a      	ldr	r2, [r3, #8]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6899      	ldr	r1, [r3, #8]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	430a      	orrs	r2, r1
 800c68a:	609a      	str	r2, [r3, #8]
 800c68c:	e00f      	b.n	800c6ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	689a      	ldr	r2, [r3, #8]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c69c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c6ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	689a      	ldr	r2, [r3, #8]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f022 0202 	bic.w	r2, r2, #2
 800c6bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6899      	ldr	r1, [r3, #8]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7e1b      	ldrb	r3, [r3, #24]
 800c6c8:	005a      	lsls	r2, r3, #1
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d01b      	beq.n	800c714 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c6fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6859      	ldr	r1, [r3, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	3b01      	subs	r3, #1
 800c708:	035a      	lsls	r2, r3, #13
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	605a      	str	r2, [r3, #4]
 800c712:	e007      	b.n	800c724 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c722:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	3b01      	subs	r3, #1
 800c740:	051a      	lsls	r2, r3, #20
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	430a      	orrs	r2, r1
 800c748:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6899      	ldr	r1, [r3, #8]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c766:	025a      	lsls	r2, r3, #9
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689a      	ldr	r2, [r3, #8]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c77e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6899      	ldr	r1, [r3, #8]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	029a      	lsls	r2, r3, #10
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	430a      	orrs	r2, r1
 800c792:	609a      	str	r2, [r3, #8]
}
 800c794:	bf00      	nop
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	40012300 	.word	0x40012300
 800c7a4:	0f000001 	.word	0x0f000001

0800c7a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d13c      	bne.n	800c83c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d12b      	bne.n	800c834 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d127      	bne.n	800c834 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d006      	beq.n	800c800 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d119      	bne.n	800c834 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f022 0220 	bic.w	r2, r2, #32
 800c80e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d105      	bne.n	800c834 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82c:	f043 0201 	orr.w	r2, r3, #1
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff fd61 	bl	800c2fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c83a:	e00e      	b.n	800c85a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c840:	f003 0310 	and.w	r3, r3, #16
 800c844:	2b00      	cmp	r3, #0
 800c846:	d003      	beq.n	800c850 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f7ff fd75 	bl	800c338 <HAL_ADC_ErrorCallback>
}
 800c84e:	e004      	b.n	800c85a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	4798      	blx	r3
}
 800c85a:	bf00      	nop
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff fd4d 	bl	800c310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c876:	bf00      	nop
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2240      	movs	r2, #64	; 0x40
 800c890:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c896:	f043 0204 	orr.w	r2, r3, #4
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f7ff fd4a 	bl	800c338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c8a4:	bf00      	nop
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f003 0307 	and.w	r3, r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c8d0:	4b0c      	ldr	r3, [pc, #48]	; (800c904 <__NVIC_SetPriorityGrouping+0x44>)
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c8dc:	4013      	ands	r3, r2
 800c8de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c8e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c8ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c8f2:	4a04      	ldr	r2, [pc, #16]	; (800c904 <__NVIC_SetPriorityGrouping+0x44>)
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	60d3      	str	r3, [r2, #12]
}
 800c8f8:	bf00      	nop
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	e000ed00 	.word	0xe000ed00

0800c908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c908:	b480      	push	{r7}
 800c90a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c90c:	4b04      	ldr	r3, [pc, #16]	; (800c920 <__NVIC_GetPriorityGrouping+0x18>)
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	0a1b      	lsrs	r3, r3, #8
 800c912:	f003 0307 	and.w	r3, r3, #7
}
 800c916:	4618      	mov	r0, r3
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	e000ed00 	.word	0xe000ed00

0800c924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	4603      	mov	r3, r0
 800c92c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c932:	2b00      	cmp	r3, #0
 800c934:	db0b      	blt.n	800c94e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c936:	79fb      	ldrb	r3, [r7, #7]
 800c938:	f003 021f 	and.w	r2, r3, #31
 800c93c:	4907      	ldr	r1, [pc, #28]	; (800c95c <__NVIC_EnableIRQ+0x38>)
 800c93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c942:	095b      	lsrs	r3, r3, #5
 800c944:	2001      	movs	r0, #1
 800c946:	fa00 f202 	lsl.w	r2, r0, r2
 800c94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c94e:	bf00      	nop
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	e000e100 	.word	0xe000e100

0800c960 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c96a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	db12      	blt.n	800c998 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	f003 021f 	and.w	r2, r3, #31
 800c978:	490a      	ldr	r1, [pc, #40]	; (800c9a4 <__NVIC_DisableIRQ+0x44>)
 800c97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c97e:	095b      	lsrs	r3, r3, #5
 800c980:	2001      	movs	r0, #1
 800c982:	fa00 f202 	lsl.w	r2, r0, r2
 800c986:	3320      	adds	r3, #32
 800c988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c98c:	f3bf 8f4f 	dsb	sy
}
 800c990:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c992:	f3bf 8f6f 	isb	sy
}
 800c996:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c998:	bf00      	nop
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	e000e100 	.word	0xe000e100

0800c9a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	6039      	str	r1, [r7, #0]
 800c9b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c9b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	db0a      	blt.n	800c9d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	490c      	ldr	r1, [pc, #48]	; (800c9f4 <__NVIC_SetPriority+0x4c>)
 800c9c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9c6:	0112      	lsls	r2, r2, #4
 800c9c8:	b2d2      	uxtb	r2, r2
 800c9ca:	440b      	add	r3, r1
 800c9cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c9d0:	e00a      	b.n	800c9e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	4908      	ldr	r1, [pc, #32]	; (800c9f8 <__NVIC_SetPriority+0x50>)
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	f003 030f 	and.w	r3, r3, #15
 800c9de:	3b04      	subs	r3, #4
 800c9e0:	0112      	lsls	r2, r2, #4
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	440b      	add	r3, r1
 800c9e6:	761a      	strb	r2, [r3, #24]
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	e000e100 	.word	0xe000e100
 800c9f8:	e000ed00 	.word	0xe000ed00

0800c9fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b089      	sub	sp, #36	; 0x24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	f1c3 0307 	rsb	r3, r3, #7
 800ca16:	2b04      	cmp	r3, #4
 800ca18:	bf28      	it	cs
 800ca1a:	2304      	movcs	r3, #4
 800ca1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	3304      	adds	r3, #4
 800ca22:	2b06      	cmp	r3, #6
 800ca24:	d902      	bls.n	800ca2c <NVIC_EncodePriority+0x30>
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	3b03      	subs	r3, #3
 800ca2a:	e000      	b.n	800ca2e <NVIC_EncodePriority+0x32>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca30:	f04f 32ff 	mov.w	r2, #4294967295
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3a:	43da      	mvns	r2, r3
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	401a      	ands	r2, r3
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ca44:	f04f 31ff 	mov.w	r1, #4294967295
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca4e:	43d9      	mvns	r1, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca54:	4313      	orrs	r3, r2
         );
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3724      	adds	r7, #36	; 0x24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
	...

0800ca64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca74:	d301      	bcc.n	800ca7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ca76:	2301      	movs	r3, #1
 800ca78:	e00f      	b.n	800ca9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ca7a:	4a0a      	ldr	r2, [pc, #40]	; (800caa4 <SysTick_Config+0x40>)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ca82:	210f      	movs	r1, #15
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	f7ff ff8e 	bl	800c9a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ca8c:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <SysTick_Config+0x40>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca92:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <SysTick_Config+0x40>)
 800ca94:	2207      	movs	r2, #7
 800ca96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	e000e010 	.word	0xe000e010

0800caa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7ff ff05 	bl	800c8c0 <__NVIC_SetPriorityGrouping>
}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b086      	sub	sp, #24
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	4603      	mov	r3, r0
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cacc:	2300      	movs	r3, #0
 800cace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cad0:	f7ff ff1a 	bl	800c908 <__NVIC_GetPriorityGrouping>
 800cad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	6978      	ldr	r0, [r7, #20]
 800cadc:	f7ff ff8e 	bl	800c9fc <NVIC_EncodePriority>
 800cae0:	4602      	mov	r2, r0
 800cae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff ff5d 	bl	800c9a8 <__NVIC_SetPriority>
}
 800caee:	bf00      	nop
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	4603      	mov	r3, r0
 800cafe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cb00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff ff0d 	bl	800c924 <__NVIC_EnableIRQ>
}
 800cb0a:	bf00      	nop
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	4603      	mov	r3, r0
 800cb1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cb1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff ff1d 	bl	800c960 <__NVIC_DisableIRQ>
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b082      	sub	sp, #8
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ff94 	bl	800ca64 <SysTick_Config>
 800cb3c:	4603      	mov	r3, r0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800cb54:	f7ff f94a 	bl	800bdec <HAL_GetTick>
 800cb58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	e099      	b.n	800cc98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2202      	movs	r2, #2
 800cb70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f022 0201 	bic.w	r2, r2, #1
 800cb82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cb84:	e00f      	b.n	800cba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cb86:	f7ff f931 	bl	800bdec <HAL_GetTick>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	2b05      	cmp	r3, #5
 800cb92:	d908      	bls.n	800cba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2220      	movs	r2, #32
 800cb98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2203      	movs	r2, #3
 800cb9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e078      	b.n	800cc98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1e8      	bne.n	800cb86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	4b38      	ldr	r3, [pc, #224]	; (800cca0 <HAL_DMA_Init+0x158>)
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cbd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	699b      	ldr	r3, [r3, #24]
 800cbe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d107      	bne.n	800cc10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f023 0307 	bic.w	r3, r3, #7
 800cc26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2c:	697a      	ldr	r2, [r7, #20]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	2b04      	cmp	r3, #4
 800cc38:	d117      	bne.n	800cc6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00e      	beq.n	800cc6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fafb 	bl	800d248 <DMA_CheckFifoParam>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d008      	beq.n	800cc6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2240      	movs	r2, #64	; 0x40
 800cc5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2201      	movs	r2, #1
 800cc62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800cc66:	2301      	movs	r3, #1
 800cc68:	e016      	b.n	800cc98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fab2 	bl	800d1dc <DMA_CalcBaseAndBitshift>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc80:	223f      	movs	r2, #63	; 0x3f
 800cc82:	409a      	lsls	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	f010803f 	.word	0xf010803f

0800cca4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e050      	b.n	800cd58 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d101      	bne.n	800ccc6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800ccc2:	2302      	movs	r3, #2
 800ccc4:	e048      	b.n	800cd58 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f022 0201 	bic.w	r2, r2, #1
 800ccd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2200      	movs	r2, #0
 800cce4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2200      	movs	r2, #0
 800ccec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2221      	movs	r2, #33	; 0x21
 800cd04:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fa68 	bl	800d1dc <DMA_CalcBaseAndBitshift>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd38:	223f      	movs	r2, #63	; 0x3f
 800cd3a:	409a      	lsls	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d101      	bne.n	800cd86 <HAL_DMA_Start_IT+0x26>
 800cd82:	2302      	movs	r3, #2
 800cd84:	e040      	b.n	800ce08 <HAL_DMA_Start_IT+0xa8>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d12f      	bne.n	800cdfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	68b9      	ldr	r1, [r7, #8]
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 f9e6 	bl	800d180 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdb8:	223f      	movs	r2, #63	; 0x3f
 800cdba:	409a      	lsls	r2, r3
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f042 0216 	orr.w	r2, r2, #22
 800cdce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d007      	beq.n	800cde8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f042 0208 	orr.w	r2, r2, #8
 800cde6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f042 0201 	orr.w	r2, r2, #1
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	e005      	b.n	800ce06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ce02:	2302      	movs	r3, #2
 800ce04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d004      	beq.n	800ce2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2280      	movs	r2, #128	; 0x80
 800ce28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e00c      	b.n	800ce48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2205      	movs	r2, #5
 800ce32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f022 0201 	bic.w	r2, r2, #1
 800ce44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ce60:	4b8e      	ldr	r3, [pc, #568]	; (800d09c <HAL_DMA_IRQHandler+0x248>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a8e      	ldr	r2, [pc, #568]	; (800d0a0 <HAL_DMA_IRQHandler+0x24c>)
 800ce66:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6a:	0a9b      	lsrs	r3, r3, #10
 800ce6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce7e:	2208      	movs	r2, #8
 800ce80:	409a      	lsls	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	4013      	ands	r3, r2
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d01a      	beq.n	800cec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0304 	and.w	r3, r3, #4
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d013      	beq.n	800cec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f022 0204 	bic.w	r2, r2, #4
 800cea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceac:	2208      	movs	r2, #8
 800ceae:	409a      	lsls	r2, r3
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceb8:	f043 0201 	orr.w	r2, r3, #1
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cec4:	2201      	movs	r2, #1
 800cec6:	409a      	lsls	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4013      	ands	r3, r2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d012      	beq.n	800cef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cee2:	2201      	movs	r2, #1
 800cee4:	409a      	lsls	r2, r3
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceee:	f043 0202 	orr.w	r2, r3, #2
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cefa:	2204      	movs	r2, #4
 800cefc:	409a      	lsls	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	4013      	ands	r3, r2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d012      	beq.n	800cf2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0302 	and.w	r3, r3, #2
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf18:	2204      	movs	r2, #4
 800cf1a:	409a      	lsls	r2, r3
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf24:	f043 0204 	orr.w	r2, r3, #4
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf30:	2210      	movs	r2, #16
 800cf32:	409a      	lsls	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4013      	ands	r3, r2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d043      	beq.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0308 	and.w	r3, r3, #8
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d03c      	beq.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf4e:	2210      	movs	r2, #16
 800cf50:	409a      	lsls	r2, r3
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d018      	beq.n	800cf96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d108      	bne.n	800cf84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d024      	beq.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	4798      	blx	r3
 800cf82:	e01f      	b.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01b      	beq.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	4798      	blx	r3
 800cf94:	e016      	b.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d107      	bne.n	800cfb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f022 0208 	bic.w	r2, r2, #8
 800cfb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfc8:	2220      	movs	r2, #32
 800cfca:	409a      	lsls	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4013      	ands	r3, r2
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 808f 	beq.w	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0310 	and.w	r3, r3, #16
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 8087 	beq.w	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfea:	2220      	movs	r2, #32
 800cfec:	409a      	lsls	r2, r3
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b05      	cmp	r3, #5
 800cffc:	d136      	bne.n	800d06c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f022 0216 	bic.w	r2, r2, #22
 800d00c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	695a      	ldr	r2, [r3, #20]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d01c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	2b00      	cmp	r3, #0
 800d024:	d103      	bne.n	800d02e <HAL_DMA_IRQHandler+0x1da>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d007      	beq.n	800d03e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f022 0208 	bic.w	r2, r2, #8
 800d03c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d042:	223f      	movs	r2, #63	; 0x3f
 800d044:	409a      	lsls	r2, r3
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d07e      	beq.n	800d160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	4798      	blx	r3
        }
        return;
 800d06a:	e079      	b.n	800d160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d01d      	beq.n	800d0b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10d      	bne.n	800d0a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d031      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	4798      	blx	r3
 800d098:	e02c      	b.n	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
 800d09a:	bf00      	nop
 800d09c:	20000000 	.word	0x20000000
 800d0a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d023      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	4798      	blx	r3
 800d0b4:	e01e      	b.n	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10f      	bne.n	800d0e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f022 0210 	bic.w	r2, r2, #16
 800d0d2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d032      	beq.n	800d162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	d022      	beq.n	800d14e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2205      	movs	r2, #5
 800d10c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f022 0201 	bic.w	r2, r2, #1
 800d11e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3301      	adds	r3, #1
 800d124:	60bb      	str	r3, [r7, #8]
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d307      	bcc.n	800d13c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1f2      	bne.n	800d120 <HAL_DMA_IRQHandler+0x2cc>
 800d13a:	e000      	b.n	800d13e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800d13c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d005      	beq.n	800d162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	4798      	blx	r3
 800d15e:	e000      	b.n	800d162 <HAL_DMA_IRQHandler+0x30e>
        return;
 800d160:	bf00      	nop
    }
  }
}
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d19c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	2b40      	cmp	r3, #64	; 0x40
 800d1ac:	d108      	bne.n	800d1c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d1be:	e007      	b.n	800d1d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	60da      	str	r2, [r3, #12]
}
 800d1d0:	bf00      	nop
 800d1d2:	3714      	adds	r7, #20
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	3b10      	subs	r3, #16
 800d1ec:	4a14      	ldr	r2, [pc, #80]	; (800d240 <DMA_CalcBaseAndBitshift+0x64>)
 800d1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f2:	091b      	lsrs	r3, r3, #4
 800d1f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d1f6:	4a13      	ldr	r2, [pc, #76]	; (800d244 <DMA_CalcBaseAndBitshift+0x68>)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b03      	cmp	r3, #3
 800d208:	d909      	bls.n	800d21e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d212:	f023 0303 	bic.w	r3, r3, #3
 800d216:	1d1a      	adds	r2, r3, #4
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	659a      	str	r2, [r3, #88]	; 0x58
 800d21c:	e007      	b.n	800d22e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d226:	f023 0303 	bic.w	r3, r3, #3
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	aaaaaaab 	.word	0xaaaaaaab
 800d244:	080255a4 	.word	0x080255a4

0800d248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d11f      	bne.n	800d2a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	2b03      	cmp	r3, #3
 800d266:	d856      	bhi.n	800d316 <DMA_CheckFifoParam+0xce>
 800d268:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <DMA_CheckFifoParam+0x28>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d293 	.word	0x0800d293
 800d278:	0800d281 	.word	0x0800d281
 800d27c:	0800d317 	.word	0x0800d317
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d046      	beq.n	800d31a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d290:	e043      	b.n	800d31a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d29a:	d140      	bne.n	800d31e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d2a0:	e03d      	b.n	800d31e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2aa:	d121      	bne.n	800d2f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	d837      	bhi.n	800d322 <DMA_CheckFifoParam+0xda>
 800d2b2:	a201      	add	r2, pc, #4	; (adr r2, 800d2b8 <DMA_CheckFifoParam+0x70>)
 800d2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b8:	0800d2c9 	.word	0x0800d2c9
 800d2bc:	0800d2cf 	.word	0x0800d2cf
 800d2c0:	0800d2c9 	.word	0x0800d2c9
 800d2c4:	0800d2e1 	.word	0x0800d2e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d2cc:	e030      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d025      	beq.n	800d326 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d2de:	e022      	b.n	800d326 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d2e8:	d11f      	bne.n	800d32a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d2ee:	e01c      	b.n	800d32a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d903      	bls.n	800d2fe <DMA_CheckFifoParam+0xb6>
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	d003      	beq.n	800d304 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d2fc:	e018      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	73fb      	strb	r3, [r7, #15]
      break;
 800d302:	e015      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00e      	beq.n	800d32e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	73fb      	strb	r3, [r7, #15]
      break;
 800d314:	e00b      	b.n	800d32e <DMA_CheckFifoParam+0xe6>
      break;
 800d316:	bf00      	nop
 800d318:	e00a      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      break;
 800d31a:	bf00      	nop
 800d31c:	e008      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      break;
 800d31e:	bf00      	nop
 800d320:	e006      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      break;
 800d322:	bf00      	nop
 800d324:	e004      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      break;
 800d326:	bf00      	nop
 800d328:	e002      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      break;   
 800d32a:	bf00      	nop
 800d32c:	e000      	b.n	800d330 <DMA_CheckFifoParam+0xe8>
      break;
 800d32e:	bf00      	nop
    }
  } 
  
  return status; 
 800d330:	7bfb      	ldrb	r3, [r7, #15]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop

0800d340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d340:	b480      	push	{r7}
 800d342:	b089      	sub	sp, #36	; 0x24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d34a:	2300      	movs	r3, #0
 800d34c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d34e:	2300      	movs	r3, #0
 800d350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d352:	2300      	movs	r3, #0
 800d354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d356:	2300      	movs	r3, #0
 800d358:	61fb      	str	r3, [r7, #28]
 800d35a:	e159      	b.n	800d610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d35c:	2201      	movs	r2, #1
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	fa02 f303 	lsl.w	r3, r2, r3
 800d364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	4013      	ands	r3, r2
 800d36e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	429a      	cmp	r2, r3
 800d376:	f040 8148 	bne.w	800d60a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d00b      	beq.n	800d39a <HAL_GPIO_Init+0x5a>
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	2b02      	cmp	r3, #2
 800d388:	d007      	beq.n	800d39a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d38e:	2b11      	cmp	r3, #17
 800d390:	d003      	beq.n	800d39a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	2b12      	cmp	r3, #18
 800d398:	d130      	bne.n	800d3fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3aa:	43db      	mvns	r3, r3
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	68da      	ldr	r2, [r3, #12]
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d3be:	69ba      	ldr	r2, [r7, #24]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d8:	43db      	mvns	r3, r3
 800d3da:	69ba      	ldr	r2, [r7, #24]
 800d3dc:	4013      	ands	r3, r2
 800d3de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	091b      	lsrs	r3, r3, #4
 800d3e6:	f003 0201 	and.w	r2, r3, #1
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f0:	69ba      	ldr	r2, [r7, #24]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69ba      	ldr	r2, [r7, #24]
 800d3fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	2203      	movs	r2, #3
 800d408:	fa02 f303 	lsl.w	r3, r2, r3
 800d40c:	43db      	mvns	r3, r3
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	4013      	ands	r3, r2
 800d412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	005b      	lsls	r3, r3, #1
 800d41c:	fa02 f303 	lsl.w	r3, r2, r3
 800d420:	69ba      	ldr	r2, [r7, #24]
 800d422:	4313      	orrs	r3, r2
 800d424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	69ba      	ldr	r2, [r7, #24]
 800d42a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d003      	beq.n	800d43c <HAL_GPIO_Init+0xfc>
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	2b12      	cmp	r3, #18
 800d43a:	d123      	bne.n	800d484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	08da      	lsrs	r2, r3, #3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3208      	adds	r2, #8
 800d444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	f003 0307 	and.w	r3, r3, #7
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	220f      	movs	r2, #15
 800d454:	fa02 f303 	lsl.w	r3, r2, r3
 800d458:	43db      	mvns	r3, r3
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	4013      	ands	r3, r2
 800d45e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	691a      	ldr	r2, [r3, #16]
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	fa02 f303 	lsl.w	r3, r2, r3
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	4313      	orrs	r3, r2
 800d474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	08da      	lsrs	r2, r3, #3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	3208      	adds	r2, #8
 800d47e:	69b9      	ldr	r1, [r7, #24]
 800d480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	005b      	lsls	r3, r3, #1
 800d48e:	2203      	movs	r2, #3
 800d490:	fa02 f303 	lsl.w	r3, r2, r3
 800d494:	43db      	mvns	r3, r3
 800d496:	69ba      	ldr	r2, [r7, #24]
 800d498:	4013      	ands	r3, r2
 800d49a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	f003 0203 	and.w	r2, r3, #3
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ac:	69ba      	ldr	r2, [r7, #24]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 80a2 	beq.w	800d60a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60fb      	str	r3, [r7, #12]
 800d4ca:	4b57      	ldr	r3, [pc, #348]	; (800d628 <HAL_GPIO_Init+0x2e8>)
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ce:	4a56      	ldr	r2, [pc, #344]	; (800d628 <HAL_GPIO_Init+0x2e8>)
 800d4d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4d4:	6453      	str	r3, [r2, #68]	; 0x44
 800d4d6:	4b54      	ldr	r3, [pc, #336]	; (800d628 <HAL_GPIO_Init+0x2e8>)
 800d4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4de:	60fb      	str	r3, [r7, #12]
 800d4e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d4e2:	4a52      	ldr	r2, [pc, #328]	; (800d62c <HAL_GPIO_Init+0x2ec>)
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	089b      	lsrs	r3, r3, #2
 800d4e8:	3302      	adds	r3, #2
 800d4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	220f      	movs	r2, #15
 800d4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d4fe:	43db      	mvns	r3, r3
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	4013      	ands	r3, r2
 800d504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a49      	ldr	r2, [pc, #292]	; (800d630 <HAL_GPIO_Init+0x2f0>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d019      	beq.n	800d542 <HAL_GPIO_Init+0x202>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a48      	ldr	r2, [pc, #288]	; (800d634 <HAL_GPIO_Init+0x2f4>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d013      	beq.n	800d53e <HAL_GPIO_Init+0x1fe>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4a47      	ldr	r2, [pc, #284]	; (800d638 <HAL_GPIO_Init+0x2f8>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d00d      	beq.n	800d53a <HAL_GPIO_Init+0x1fa>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a46      	ldr	r2, [pc, #280]	; (800d63c <HAL_GPIO_Init+0x2fc>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d007      	beq.n	800d536 <HAL_GPIO_Init+0x1f6>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a45      	ldr	r2, [pc, #276]	; (800d640 <HAL_GPIO_Init+0x300>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d101      	bne.n	800d532 <HAL_GPIO_Init+0x1f2>
 800d52e:	2304      	movs	r3, #4
 800d530:	e008      	b.n	800d544 <HAL_GPIO_Init+0x204>
 800d532:	2307      	movs	r3, #7
 800d534:	e006      	b.n	800d544 <HAL_GPIO_Init+0x204>
 800d536:	2303      	movs	r3, #3
 800d538:	e004      	b.n	800d544 <HAL_GPIO_Init+0x204>
 800d53a:	2302      	movs	r3, #2
 800d53c:	e002      	b.n	800d544 <HAL_GPIO_Init+0x204>
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <HAL_GPIO_Init+0x204>
 800d542:	2300      	movs	r3, #0
 800d544:	69fa      	ldr	r2, [r7, #28]
 800d546:	f002 0203 	and.w	r2, r2, #3
 800d54a:	0092      	lsls	r2, r2, #2
 800d54c:	4093      	lsls	r3, r2
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	4313      	orrs	r3, r2
 800d552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d554:	4935      	ldr	r1, [pc, #212]	; (800d62c <HAL_GPIO_Init+0x2ec>)
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	089b      	lsrs	r3, r3, #2
 800d55a:	3302      	adds	r3, #2
 800d55c:	69ba      	ldr	r2, [r7, #24]
 800d55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d562:	4b38      	ldr	r3, [pc, #224]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	43db      	mvns	r3, r3
 800d56c:	69ba      	ldr	r2, [r7, #24]
 800d56e:	4013      	ands	r3, r2
 800d570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800d57e:	69ba      	ldr	r2, [r7, #24]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	4313      	orrs	r3, r2
 800d584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d586:	4a2f      	ldr	r2, [pc, #188]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d58c:	4b2d      	ldr	r3, [pc, #180]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	43db      	mvns	r3, r3
 800d596:	69ba      	ldr	r2, [r7, #24]
 800d598:	4013      	ands	r3, r2
 800d59a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d003      	beq.n	800d5b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800d5a8:	69ba      	ldr	r2, [r7, #24]
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d5b0:	4a24      	ldr	r2, [pc, #144]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d5b6:	4b23      	ldr	r3, [pc, #140]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	43db      	mvns	r3, r3
 800d5c0:	69ba      	ldr	r2, [r7, #24]
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800d5d2:	69ba      	ldr	r2, [r7, #24]
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d5da:	4a1a      	ldr	r2, [pc, #104]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d5e0:	4b18      	ldr	r3, [pc, #96]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	43db      	mvns	r3, r3
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800d5fc:	69ba      	ldr	r2, [r7, #24]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	4313      	orrs	r3, r2
 800d602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d604:	4a0f      	ldr	r2, [pc, #60]	; (800d644 <HAL_GPIO_Init+0x304>)
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	3301      	adds	r3, #1
 800d60e:	61fb      	str	r3, [r7, #28]
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	2b0f      	cmp	r3, #15
 800d614:	f67f aea2 	bls.w	800d35c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d618:	bf00      	nop
 800d61a:	bf00      	nop
 800d61c:	3724      	adds	r7, #36	; 0x24
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	40023800 	.word	0x40023800
 800d62c:	40013800 	.word	0x40013800
 800d630:	40020000 	.word	0x40020000
 800d634:	40020400 	.word	0x40020400
 800d638:	40020800 	.word	0x40020800
 800d63c:	40020c00 	.word	0x40020c00
 800d640:	40021000 	.word	0x40021000
 800d644:	40013c00 	.word	0x40013c00

0800d648 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d648:	b480      	push	{r7}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800d656:	2300      	movs	r3, #0
 800d658:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800d65a:	2300      	movs	r3, #0
 800d65c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d65e:	2300      	movs	r3, #0
 800d660:	617b      	str	r3, [r7, #20]
 800d662:	e0bb      	b.n	800d7dc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d664:	2201      	movs	r2, #1
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	fa02 f303 	lsl.w	r3, r2, r3
 800d66c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d66e:	683a      	ldr	r2, [r7, #0]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	4013      	ands	r3, r2
 800d674:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	f040 80ab 	bne.w	800d7d6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d680:	4a5c      	ldr	r2, [pc, #368]	; (800d7f4 <HAL_GPIO_DeInit+0x1ac>)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	089b      	lsrs	r3, r3, #2
 800d686:	3302      	adds	r3, #2
 800d688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d68c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f003 0303 	and.w	r3, r3, #3
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	220f      	movs	r2, #15
 800d698:	fa02 f303 	lsl.w	r3, r2, r3
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	4013      	ands	r3, r2
 800d6a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a54      	ldr	r2, [pc, #336]	; (800d7f8 <HAL_GPIO_DeInit+0x1b0>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d019      	beq.n	800d6de <HAL_GPIO_DeInit+0x96>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a53      	ldr	r2, [pc, #332]	; (800d7fc <HAL_GPIO_DeInit+0x1b4>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d013      	beq.n	800d6da <HAL_GPIO_DeInit+0x92>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a52      	ldr	r2, [pc, #328]	; (800d800 <HAL_GPIO_DeInit+0x1b8>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d00d      	beq.n	800d6d6 <HAL_GPIO_DeInit+0x8e>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a51      	ldr	r2, [pc, #324]	; (800d804 <HAL_GPIO_DeInit+0x1bc>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d007      	beq.n	800d6d2 <HAL_GPIO_DeInit+0x8a>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a50      	ldr	r2, [pc, #320]	; (800d808 <HAL_GPIO_DeInit+0x1c0>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d101      	bne.n	800d6ce <HAL_GPIO_DeInit+0x86>
 800d6ca:	2304      	movs	r3, #4
 800d6cc:	e008      	b.n	800d6e0 <HAL_GPIO_DeInit+0x98>
 800d6ce:	2307      	movs	r3, #7
 800d6d0:	e006      	b.n	800d6e0 <HAL_GPIO_DeInit+0x98>
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	e004      	b.n	800d6e0 <HAL_GPIO_DeInit+0x98>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e002      	b.n	800d6e0 <HAL_GPIO_DeInit+0x98>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e000      	b.n	800d6e0 <HAL_GPIO_DeInit+0x98>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	f002 0203 	and.w	r2, r2, #3
 800d6e6:	0092      	lsls	r2, r2, #2
 800d6e8:	4093      	lsls	r3, r2
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d132      	bne.n	800d756 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d6f0:	4b46      	ldr	r3, [pc, #280]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	43db      	mvns	r3, r3
 800d6f8:	4944      	ldr	r1, [pc, #272]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d6fe:	4b43      	ldr	r3, [pc, #268]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	43db      	mvns	r3, r3
 800d706:	4941      	ldr	r1, [pc, #260]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d708:	4013      	ands	r3, r2
 800d70a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d70c:	4b3f      	ldr	r3, [pc, #252]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d70e:	689a      	ldr	r2, [r3, #8]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	43db      	mvns	r3, r3
 800d714:	493d      	ldr	r1, [pc, #244]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d716:	4013      	ands	r3, r2
 800d718:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d71a:	4b3c      	ldr	r3, [pc, #240]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	43db      	mvns	r3, r3
 800d722:	493a      	ldr	r1, [pc, #232]	; (800d80c <HAL_GPIO_DeInit+0x1c4>)
 800d724:	4013      	ands	r3, r2
 800d726:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	f003 0303 	and.w	r3, r3, #3
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	220f      	movs	r2, #15
 800d732:	fa02 f303 	lsl.w	r3, r2, r3
 800d736:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d738:	4a2e      	ldr	r2, [pc, #184]	; (800d7f4 <HAL_GPIO_DeInit+0x1ac>)
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	089b      	lsrs	r3, r3, #2
 800d73e:	3302      	adds	r3, #2
 800d740:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	43da      	mvns	r2, r3
 800d748:	482a      	ldr	r0, [pc, #168]	; (800d7f4 <HAL_GPIO_DeInit+0x1ac>)
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	089b      	lsrs	r3, r3, #2
 800d74e:	400a      	ands	r2, r1
 800d750:	3302      	adds	r3, #2
 800d752:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	2103      	movs	r1, #3
 800d760:	fa01 f303 	lsl.w	r3, r1, r3
 800d764:	43db      	mvns	r3, r3
 800d766:	401a      	ands	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	08da      	lsrs	r2, r3, #3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	3208      	adds	r2, #8
 800d774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	220f      	movs	r2, #15
 800d782:	fa02 f303 	lsl.w	r3, r2, r3
 800d786:	43db      	mvns	r3, r3
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	08d2      	lsrs	r2, r2, #3
 800d78c:	4019      	ands	r1, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	3208      	adds	r2, #8
 800d792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68da      	ldr	r2, [r3, #12]
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	2103      	movs	r1, #3
 800d7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d7a4:	43db      	mvns	r3, r3
 800d7a6:	401a      	ands	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d7b8:	43db      	mvns	r3, r3
 800d7ba:	401a      	ands	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	689a      	ldr	r2, [r3, #8]
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	2103      	movs	r1, #3
 800d7ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ce:	43db      	mvns	r3, r3
 800d7d0:	401a      	ands	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2b0f      	cmp	r3, #15
 800d7e0:	f67f af40 	bls.w	800d664 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop
 800d7e8:	371c      	adds	r7, #28
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	40013800 	.word	0x40013800
 800d7f8:	40020000 	.word	0x40020000
 800d7fc:	40020400 	.word	0x40020400
 800d800:	40020800 	.word	0x40020800
 800d804:	40020c00 	.word	0x40020c00
 800d808:	40021000 	.word	0x40021000
 800d80c:	40013c00 	.word	0x40013c00

0800d810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	691a      	ldr	r2, [r3, #16]
 800d820:	887b      	ldrh	r3, [r7, #2]
 800d822:	4013      	ands	r3, r2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d828:	2301      	movs	r3, #1
 800d82a:	73fb      	strb	r3, [r7, #15]
 800d82c:	e001      	b.n	800d832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d82e:	2300      	movs	r3, #0
 800d830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d832:	7bfb      	ldrb	r3, [r7, #15]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3714      	adds	r7, #20
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	807b      	strh	r3, [r7, #2]
 800d84c:	4613      	mov	r3, r2
 800d84e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d850:	787b      	ldrb	r3, [r7, #1]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d856:	887a      	ldrh	r2, [r7, #2]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d85c:	e003      	b.n	800d866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d85e:	887b      	ldrh	r3, [r7, #2]
 800d860:	041a      	lsls	r2, r3, #16
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	619a      	str	r2, [r3, #24]
}
 800d866:	bf00      	nop
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	460b      	mov	r3, r1
 800d87c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695a      	ldr	r2, [r3, #20]
 800d882:	887b      	ldrh	r3, [r7, #2]
 800d884:	401a      	ands	r2, r3
 800d886:	887b      	ldrh	r3, [r7, #2]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d104      	bne.n	800d896 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d88c:	887b      	ldrh	r3, [r7, #2]
 800d88e:	041a      	lsls	r2, r3, #16
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800d894:	e002      	b.n	800d89c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800d896:	887a      	ldrh	r2, [r7, #2]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	619a      	str	r2, [r3, #24]
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e25e      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d075      	beq.n	800d9b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d8c6:	4b88      	ldr	r3, [pc, #544]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f003 030c 	and.w	r3, r3, #12
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d00c      	beq.n	800d8ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d8d2:	4b85      	ldr	r3, [pc, #532]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d8da:	2b08      	cmp	r3, #8
 800d8dc:	d112      	bne.n	800d904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d8de:	4b82      	ldr	r3, [pc, #520]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8ea:	d10b      	bne.n	800d904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8ec:	4b7e      	ldr	r3, [pc, #504]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d05b      	beq.n	800d9b0 <HAL_RCC_OscConfig+0x108>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d157      	bne.n	800d9b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e239      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d90c:	d106      	bne.n	800d91c <HAL_RCC_OscConfig+0x74>
 800d90e:	4b76      	ldr	r3, [pc, #472]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a75      	ldr	r2, [pc, #468]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d918:	6013      	str	r3, [r2, #0]
 800d91a:	e01d      	b.n	800d958 <HAL_RCC_OscConfig+0xb0>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d924:	d10c      	bne.n	800d940 <HAL_RCC_OscConfig+0x98>
 800d926:	4b70      	ldr	r3, [pc, #448]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a6f      	ldr	r2, [pc, #444]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d92c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d930:	6013      	str	r3, [r2, #0]
 800d932:	4b6d      	ldr	r3, [pc, #436]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a6c      	ldr	r2, [pc, #432]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d93c:	6013      	str	r3, [r2, #0]
 800d93e:	e00b      	b.n	800d958 <HAL_RCC_OscConfig+0xb0>
 800d940:	4b69      	ldr	r3, [pc, #420]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a68      	ldr	r2, [pc, #416]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	4b66      	ldr	r3, [pc, #408]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a65      	ldr	r2, [pc, #404]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d013      	beq.n	800d988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d960:	f7fe fa44 	bl	800bdec <HAL_GetTick>
 800d964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d966:	e008      	b.n	800d97a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d968:	f7fe fa40 	bl	800bdec <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	2b64      	cmp	r3, #100	; 0x64
 800d974:	d901      	bls.n	800d97a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e1fe      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d97a:	4b5b      	ldr	r3, [pc, #364]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0f0      	beq.n	800d968 <HAL_RCC_OscConfig+0xc0>
 800d986:	e014      	b.n	800d9b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d988:	f7fe fa30 	bl	800bdec <HAL_GetTick>
 800d98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d98e:	e008      	b.n	800d9a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d990:	f7fe fa2c 	bl	800bdec <HAL_GetTick>
 800d994:	4602      	mov	r2, r0
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	2b64      	cmp	r3, #100	; 0x64
 800d99c:	d901      	bls.n	800d9a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e1ea      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d9a2:	4b51      	ldr	r3, [pc, #324]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1f0      	bne.n	800d990 <HAL_RCC_OscConfig+0xe8>
 800d9ae:	e000      	b.n	800d9b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d063      	beq.n	800da86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d9be:	4b4a      	ldr	r3, [pc, #296]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f003 030c 	and.w	r3, r3, #12
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d9ca:	4b47      	ldr	r3, [pc, #284]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d9d2:	2b08      	cmp	r3, #8
 800d9d4:	d11c      	bne.n	800da10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d9d6:	4b44      	ldr	r3, [pc, #272]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d116      	bne.n	800da10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9e2:	4b41      	ldr	r3, [pc, #260]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f003 0302 	and.w	r3, r3, #2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d005      	beq.n	800d9fa <HAL_RCC_OscConfig+0x152>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d001      	beq.n	800d9fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e1be      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9fa:	4b3b      	ldr	r3, [pc, #236]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	4937      	ldr	r1, [pc, #220]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800da0a:	4313      	orrs	r3, r2
 800da0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800da0e:	e03a      	b.n	800da86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d020      	beq.n	800da5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da18:	4b34      	ldr	r3, [pc, #208]	; (800daec <HAL_RCC_OscConfig+0x244>)
 800da1a:	2201      	movs	r2, #1
 800da1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da1e:	f7fe f9e5 	bl	800bdec <HAL_GetTick>
 800da22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da24:	e008      	b.n	800da38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da26:	f7fe f9e1 	bl	800bdec <HAL_GetTick>
 800da2a:	4602      	mov	r2, r0
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	2b02      	cmp	r3, #2
 800da32:	d901      	bls.n	800da38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800da34:	2303      	movs	r3, #3
 800da36:	e19f      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da38:	4b2b      	ldr	r3, [pc, #172]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f003 0302 	and.w	r3, r3, #2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0f0      	beq.n	800da26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da44:	4b28      	ldr	r3, [pc, #160]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	4925      	ldr	r1, [pc, #148]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800da54:	4313      	orrs	r3, r2
 800da56:	600b      	str	r3, [r1, #0]
 800da58:	e015      	b.n	800da86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da5a:	4b24      	ldr	r3, [pc, #144]	; (800daec <HAL_RCC_OscConfig+0x244>)
 800da5c:	2200      	movs	r2, #0
 800da5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da60:	f7fe f9c4 	bl	800bdec <HAL_GetTick>
 800da64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da66:	e008      	b.n	800da7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da68:	f7fe f9c0 	bl	800bdec <HAL_GetTick>
 800da6c:	4602      	mov	r2, r0
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	2b02      	cmp	r3, #2
 800da74:	d901      	bls.n	800da7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e17e      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da7a:	4b1b      	ldr	r3, [pc, #108]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 0302 	and.w	r3, r3, #2
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1f0      	bne.n	800da68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 0308 	and.w	r3, r3, #8
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d036      	beq.n	800db00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d016      	beq.n	800dac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da9a:	4b15      	ldr	r3, [pc, #84]	; (800daf0 <HAL_RCC_OscConfig+0x248>)
 800da9c:	2201      	movs	r2, #1
 800da9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daa0:	f7fe f9a4 	bl	800bdec <HAL_GetTick>
 800daa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800daa6:	e008      	b.n	800daba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800daa8:	f7fe f9a0 	bl	800bdec <HAL_GetTick>
 800daac:	4602      	mov	r2, r0
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d901      	bls.n	800daba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e15e      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800daba:	4b0b      	ldr	r3, [pc, #44]	; (800dae8 <HAL_RCC_OscConfig+0x240>)
 800dabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dabe:	f003 0302 	and.w	r3, r3, #2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0f0      	beq.n	800daa8 <HAL_RCC_OscConfig+0x200>
 800dac6:	e01b      	b.n	800db00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dac8:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <HAL_RCC_OscConfig+0x248>)
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dace:	f7fe f98d 	bl	800bdec <HAL_GetTick>
 800dad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dad4:	e00e      	b.n	800daf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dad6:	f7fe f989 	bl	800bdec <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d907      	bls.n	800daf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e147      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
 800dae8:	40023800 	.word	0x40023800
 800daec:	42470000 	.word	0x42470000
 800daf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800daf4:	4b88      	ldr	r3, [pc, #544]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800daf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf8:	f003 0302 	and.w	r3, r3, #2
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1ea      	bne.n	800dad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f000 8097 	beq.w	800dc3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db12:	4b81      	ldr	r3, [pc, #516]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10f      	bne.n	800db3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db1e:	2300      	movs	r3, #0
 800db20:	60bb      	str	r3, [r7, #8]
 800db22:	4b7d      	ldr	r3, [pc, #500]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db26:	4a7c      	ldr	r2, [pc, #496]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db2c:	6413      	str	r3, [r2, #64]	; 0x40
 800db2e:	4b7a      	ldr	r3, [pc, #488]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db36:	60bb      	str	r3, [r7, #8]
 800db38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800db3a:	2301      	movs	r3, #1
 800db3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db3e:	4b77      	ldr	r3, [pc, #476]	; (800dd1c <HAL_RCC_OscConfig+0x474>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db46:	2b00      	cmp	r3, #0
 800db48:	d118      	bne.n	800db7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800db4a:	4b74      	ldr	r3, [pc, #464]	; (800dd1c <HAL_RCC_OscConfig+0x474>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a73      	ldr	r2, [pc, #460]	; (800dd1c <HAL_RCC_OscConfig+0x474>)
 800db50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800db56:	f7fe f949 	bl	800bdec <HAL_GetTick>
 800db5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db5c:	e008      	b.n	800db70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db5e:	f7fe f945 	bl	800bdec <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d901      	bls.n	800db70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800db6c:	2303      	movs	r3, #3
 800db6e:	e103      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db70:	4b6a      	ldr	r3, [pc, #424]	; (800dd1c <HAL_RCC_OscConfig+0x474>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d0f0      	beq.n	800db5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d106      	bne.n	800db92 <HAL_RCC_OscConfig+0x2ea>
 800db84:	4b64      	ldr	r3, [pc, #400]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db88:	4a63      	ldr	r2, [pc, #396]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db8a:	f043 0301 	orr.w	r3, r3, #1
 800db8e:	6713      	str	r3, [r2, #112]	; 0x70
 800db90:	e01c      	b.n	800dbcc <HAL_RCC_OscConfig+0x324>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	2b05      	cmp	r3, #5
 800db98:	d10c      	bne.n	800dbb4 <HAL_RCC_OscConfig+0x30c>
 800db9a:	4b5f      	ldr	r3, [pc, #380]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800db9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9e:	4a5e      	ldr	r2, [pc, #376]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dba0:	f043 0304 	orr.w	r3, r3, #4
 800dba4:	6713      	str	r3, [r2, #112]	; 0x70
 800dba6:	4b5c      	ldr	r3, [pc, #368]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbaa:	4a5b      	ldr	r2, [pc, #364]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dbac:	f043 0301 	orr.w	r3, r3, #1
 800dbb0:	6713      	str	r3, [r2, #112]	; 0x70
 800dbb2:	e00b      	b.n	800dbcc <HAL_RCC_OscConfig+0x324>
 800dbb4:	4b58      	ldr	r3, [pc, #352]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb8:	4a57      	ldr	r2, [pc, #348]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dbba:	f023 0301 	bic.w	r3, r3, #1
 800dbbe:	6713      	str	r3, [r2, #112]	; 0x70
 800dbc0:	4b55      	ldr	r3, [pc, #340]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc4:	4a54      	ldr	r2, [pc, #336]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dbc6:	f023 0304 	bic.w	r3, r3, #4
 800dbca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d015      	beq.n	800dc00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dbd4:	f7fe f90a 	bl	800bdec <HAL_GetTick>
 800dbd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbda:	e00a      	b.n	800dbf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dbdc:	f7fe f906 	bl	800bdec <HAL_GetTick>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d901      	bls.n	800dbf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	e0c2      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbf2:	4b49      	ldr	r3, [pc, #292]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0ee      	beq.n	800dbdc <HAL_RCC_OscConfig+0x334>
 800dbfe:	e014      	b.n	800dc2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc00:	f7fe f8f4 	bl	800bdec <HAL_GetTick>
 800dc04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc06:	e00a      	b.n	800dc1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc08:	f7fe f8f0 	bl	800bdec <HAL_GetTick>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d901      	bls.n	800dc1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	e0ac      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc1e:	4b3e      	ldr	r3, [pc, #248]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc22:	f003 0302 	and.w	r3, r3, #2
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1ee      	bne.n	800dc08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d105      	bne.n	800dc3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc30:	4b39      	ldr	r3, [pc, #228]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc34:	4a38      	ldr	r2, [pc, #224]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dc36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	699b      	ldr	r3, [r3, #24]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f000 8098 	beq.w	800dd76 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dc46:	4b34      	ldr	r3, [pc, #208]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f003 030c 	and.w	r3, r3, #12
 800dc4e:	2b08      	cmp	r3, #8
 800dc50:	d05c      	beq.n	800dd0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d141      	bne.n	800dcde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc5a:	4b31      	ldr	r3, [pc, #196]	; (800dd20 <HAL_RCC_OscConfig+0x478>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc60:	f7fe f8c4 	bl	800bdec <HAL_GetTick>
 800dc64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc66:	e008      	b.n	800dc7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc68:	f7fe f8c0 	bl	800bdec <HAL_GetTick>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d901      	bls.n	800dc7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e07e      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc7a:	4b27      	ldr	r3, [pc, #156]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1f0      	bne.n	800dc68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	69da      	ldr	r2, [r3, #28]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	431a      	orrs	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc94:	019b      	lsls	r3, r3, #6
 800dc96:	431a      	orrs	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9c:	085b      	lsrs	r3, r3, #1
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	041b      	lsls	r3, r3, #16
 800dca2:	431a      	orrs	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca8:	061b      	lsls	r3, r3, #24
 800dcaa:	491b      	ldr	r1, [pc, #108]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dcac:	4313      	orrs	r3, r2
 800dcae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dcb0:	4b1b      	ldr	r3, [pc, #108]	; (800dd20 <HAL_RCC_OscConfig+0x478>)
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dcb6:	f7fe f899 	bl	800bdec <HAL_GetTick>
 800dcba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcbc:	e008      	b.n	800dcd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dcbe:	f7fe f895 	bl	800bdec <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d901      	bls.n	800dcd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dccc:	2303      	movs	r3, #3
 800dcce:	e053      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcd0:	4b11      	ldr	r3, [pc, #68]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d0f0      	beq.n	800dcbe <HAL_RCC_OscConfig+0x416>
 800dcdc:	e04b      	b.n	800dd76 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <HAL_RCC_OscConfig+0x478>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dce4:	f7fe f882 	bl	800bdec <HAL_GetTick>
 800dce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcea:	e008      	b.n	800dcfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dcec:	f7fe f87e 	bl	800bdec <HAL_GetTick>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d901      	bls.n	800dcfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e03c      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcfe:	4b06      	ldr	r3, [pc, #24]	; (800dd18 <HAL_RCC_OscConfig+0x470>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1f0      	bne.n	800dcec <HAL_RCC_OscConfig+0x444>
 800dd0a:	e034      	b.n	800dd76 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	699b      	ldr	r3, [r3, #24]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d107      	bne.n	800dd24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e02f      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
 800dd18:	40023800 	.word	0x40023800
 800dd1c:	40007000 	.word	0x40007000
 800dd20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dd24:	4b16      	ldr	r3, [pc, #88]	; (800dd80 <HAL_RCC_OscConfig+0x4d8>)
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	69db      	ldr	r3, [r3, #28]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d11c      	bne.n	800dd72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d115      	bne.n	800dd72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d10d      	bne.n	800dd72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d106      	bne.n	800dd72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d001      	beq.n	800dd76 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e000      	b.n	800dd78 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	40023800 	.word	0x40023800

0800dd84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d101      	bne.n	800dd98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	e0cc      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd98:	4b68      	ldr	r3, [pc, #416]	; (800df3c <HAL_RCC_ClockConfig+0x1b8>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f003 030f 	and.w	r3, r3, #15
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d90c      	bls.n	800ddc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dda6:	4b65      	ldr	r3, [pc, #404]	; (800df3c <HAL_RCC_ClockConfig+0x1b8>)
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	b2d2      	uxtb	r2, r2
 800ddac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddae:	4b63      	ldr	r3, [pc, #396]	; (800df3c <HAL_RCC_ClockConfig+0x1b8>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 030f 	and.w	r3, r3, #15
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d001      	beq.n	800ddc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e0b8      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 0302 	and.w	r3, r3, #2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d020      	beq.n	800de0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 0304 	and.w	r3, r3, #4
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d005      	beq.n	800dde4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ddd8:	4b59      	ldr	r3, [pc, #356]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	4a58      	ldr	r2, [pc, #352]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800ddde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dde2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f003 0308 	and.w	r3, r3, #8
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d005      	beq.n	800ddfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ddf0:	4b53      	ldr	r3, [pc, #332]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	4a52      	ldr	r2, [pc, #328]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800ddf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ddfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ddfc:	4b50      	ldr	r3, [pc, #320]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	494d      	ldr	r1, [pc, #308]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de0a:	4313      	orrs	r3, r2
 800de0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d044      	beq.n	800dea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d107      	bne.n	800de32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de22:	4b47      	ldr	r3, [pc, #284]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d119      	bne.n	800de62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	e07f      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d003      	beq.n	800de42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800de3e:	2b03      	cmp	r3, #3
 800de40:	d107      	bne.n	800de52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de42:	4b3f      	ldr	r3, [pc, #252]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d109      	bne.n	800de62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e06f      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de52:	4b3b      	ldr	r3, [pc, #236]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 0302 	and.w	r3, r3, #2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d101      	bne.n	800de62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e067      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800de62:	4b37      	ldr	r3, [pc, #220]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	f023 0203 	bic.w	r2, r3, #3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	4934      	ldr	r1, [pc, #208]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de70:	4313      	orrs	r3, r2
 800de72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800de74:	f7fd ffba 	bl	800bdec <HAL_GetTick>
 800de78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de7a:	e00a      	b.n	800de92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de7c:	f7fd ffb6 	bl	800bdec <HAL_GetTick>
 800de80:	4602      	mov	r2, r0
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	f241 3288 	movw	r2, #5000	; 0x1388
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d901      	bls.n	800de92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	e04f      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de92:	4b2b      	ldr	r3, [pc, #172]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f003 020c 	and.w	r2, r3, #12
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d1eb      	bne.n	800de7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dea4:	4b25      	ldr	r3, [pc, #148]	; (800df3c <HAL_RCC_ClockConfig+0x1b8>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 030f 	and.w	r3, r3, #15
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d20c      	bcs.n	800decc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800deb2:	4b22      	ldr	r3, [pc, #136]	; (800df3c <HAL_RCC_ClockConfig+0x1b8>)
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	b2d2      	uxtb	r2, r2
 800deb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800deba:	4b20      	ldr	r3, [pc, #128]	; (800df3c <HAL_RCC_ClockConfig+0x1b8>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d001      	beq.n	800decc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	e032      	b.n	800df32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d008      	beq.n	800deea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ded8:	4b19      	ldr	r3, [pc, #100]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	4916      	ldr	r1, [pc, #88]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800dee6:	4313      	orrs	r3, r2
 800dee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0308 	and.w	r3, r3, #8
 800def2:	2b00      	cmp	r3, #0
 800def4:	d009      	beq.n	800df0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800def6:	4b12      	ldr	r3, [pc, #72]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	00db      	lsls	r3, r3, #3
 800df04:	490e      	ldr	r1, [pc, #56]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800df06:	4313      	orrs	r3, r2
 800df08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800df0a:	f000 f821 	bl	800df50 <HAL_RCC_GetSysClockFreq>
 800df0e:	4602      	mov	r2, r0
 800df10:	4b0b      	ldr	r3, [pc, #44]	; (800df40 <HAL_RCC_ClockConfig+0x1bc>)
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	091b      	lsrs	r3, r3, #4
 800df16:	f003 030f 	and.w	r3, r3, #15
 800df1a:	490a      	ldr	r1, [pc, #40]	; (800df44 <HAL_RCC_ClockConfig+0x1c0>)
 800df1c:	5ccb      	ldrb	r3, [r1, r3]
 800df1e:	fa22 f303 	lsr.w	r3, r2, r3
 800df22:	4a09      	ldr	r2, [pc, #36]	; (800df48 <HAL_RCC_ClockConfig+0x1c4>)
 800df24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800df26:	4b09      	ldr	r3, [pc, #36]	; (800df4c <HAL_RCC_ClockConfig+0x1c8>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fd ff1a 	bl	800bd64 <HAL_InitTick>

  return HAL_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	40023c00 	.word	0x40023c00
 800df40:	40023800 	.word	0x40023800
 800df44:	0801785c 	.word	0x0801785c
 800df48:	20000000 	.word	0x20000000
 800df4c:	200000c0 	.word	0x200000c0

0800df50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df54:	b090      	sub	sp, #64	; 0x40
 800df56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800df58:	2300      	movs	r3, #0
 800df5a:	637b      	str	r3, [r7, #52]	; 0x34
 800df5c:	2300      	movs	r3, #0
 800df5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df60:	2300      	movs	r3, #0
 800df62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800df64:	2300      	movs	r3, #0
 800df66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df68:	4b59      	ldr	r3, [pc, #356]	; (800e0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	f003 030c 	and.w	r3, r3, #12
 800df70:	2b08      	cmp	r3, #8
 800df72:	d00d      	beq.n	800df90 <HAL_RCC_GetSysClockFreq+0x40>
 800df74:	2b08      	cmp	r3, #8
 800df76:	f200 80a1 	bhi.w	800e0bc <HAL_RCC_GetSysClockFreq+0x16c>
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <HAL_RCC_GetSysClockFreq+0x34>
 800df7e:	2b04      	cmp	r3, #4
 800df80:	d003      	beq.n	800df8a <HAL_RCC_GetSysClockFreq+0x3a>
 800df82:	e09b      	b.n	800e0bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df84:	4b53      	ldr	r3, [pc, #332]	; (800e0d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800df86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800df88:	e09b      	b.n	800e0c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df8a:	4b53      	ldr	r3, [pc, #332]	; (800e0d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800df8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800df8e:	e098      	b.n	800e0c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df90:	4b4f      	ldr	r3, [pc, #316]	; (800e0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800df9a:	4b4d      	ldr	r3, [pc, #308]	; (800e0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d028      	beq.n	800dff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dfa6:	4b4a      	ldr	r3, [pc, #296]	; (800e0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	099b      	lsrs	r3, r3, #6
 800dfac:	2200      	movs	r2, #0
 800dfae:	623b      	str	r3, [r7, #32]
 800dfb0:	627a      	str	r2, [r7, #36]	; 0x24
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800dfb8:	2100      	movs	r1, #0
 800dfba:	4b47      	ldr	r3, [pc, #284]	; (800e0d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800dfbc:	fb03 f201 	mul.w	r2, r3, r1
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	fb00 f303 	mul.w	r3, r0, r3
 800dfc6:	4413      	add	r3, r2
 800dfc8:	4a43      	ldr	r2, [pc, #268]	; (800e0d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800dfca:	fba0 1202 	umull	r1, r2, r0, r2
 800dfce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfd0:	460a      	mov	r2, r1
 800dfd2:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfd6:	4413      	add	r3, r2
 800dfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfdc:	2200      	movs	r2, #0
 800dfde:	61bb      	str	r3, [r7, #24]
 800dfe0:	61fa      	str	r2, [r7, #28]
 800dfe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dfe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dfea:	f7f2 fe65 	bl	8000cb8 <__aeabi_uldivmod>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4613      	mov	r3, r2
 800dff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dff6:	e053      	b.n	800e0a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dff8:	4b35      	ldr	r3, [pc, #212]	; (800e0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	099b      	lsrs	r3, r3, #6
 800dffe:	2200      	movs	r2, #0
 800e000:	613b      	str	r3, [r7, #16]
 800e002:	617a      	str	r2, [r7, #20]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800e00a:	f04f 0b00 	mov.w	fp, #0
 800e00e:	4652      	mov	r2, sl
 800e010:	465b      	mov	r3, fp
 800e012:	f04f 0000 	mov.w	r0, #0
 800e016:	f04f 0100 	mov.w	r1, #0
 800e01a:	0159      	lsls	r1, r3, #5
 800e01c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e020:	0150      	lsls	r0, r2, #5
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
 800e026:	ebb2 080a 	subs.w	r8, r2, sl
 800e02a:	eb63 090b 	sbc.w	r9, r3, fp
 800e02e:	f04f 0200 	mov.w	r2, #0
 800e032:	f04f 0300 	mov.w	r3, #0
 800e036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800e03a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800e03e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800e042:	ebb2 0408 	subs.w	r4, r2, r8
 800e046:	eb63 0509 	sbc.w	r5, r3, r9
 800e04a:	f04f 0200 	mov.w	r2, #0
 800e04e:	f04f 0300 	mov.w	r3, #0
 800e052:	00eb      	lsls	r3, r5, #3
 800e054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e058:	00e2      	lsls	r2, r4, #3
 800e05a:	4614      	mov	r4, r2
 800e05c:	461d      	mov	r5, r3
 800e05e:	eb14 030a 	adds.w	r3, r4, sl
 800e062:	603b      	str	r3, [r7, #0]
 800e064:	eb45 030b 	adc.w	r3, r5, fp
 800e068:	607b      	str	r3, [r7, #4]
 800e06a:	f04f 0200 	mov.w	r2, #0
 800e06e:	f04f 0300 	mov.w	r3, #0
 800e072:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e076:	4629      	mov	r1, r5
 800e078:	028b      	lsls	r3, r1, #10
 800e07a:	4621      	mov	r1, r4
 800e07c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e080:	4621      	mov	r1, r4
 800e082:	028a      	lsls	r2, r1, #10
 800e084:	4610      	mov	r0, r2
 800e086:	4619      	mov	r1, r3
 800e088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08a:	2200      	movs	r2, #0
 800e08c:	60bb      	str	r3, [r7, #8]
 800e08e:	60fa      	str	r2, [r7, #12]
 800e090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e094:	f7f2 fe10 	bl	8000cb8 <__aeabi_uldivmod>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4613      	mov	r3, r2
 800e09e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	0c1b      	lsrs	r3, r3, #16
 800e0a6:	f003 0303 	and.w	r3, r3, #3
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800e0b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e0ba:	e002      	b.n	800e0c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e0bc:	4b05      	ldr	r3, [pc, #20]	; (800e0d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800e0be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e0c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3740      	adds	r7, #64	; 0x40
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0ce:	bf00      	nop
 800e0d0:	40023800 	.word	0x40023800
 800e0d4:	00f42400 	.word	0x00f42400
 800e0d8:	017d7840 	.word	0x017d7840

0800e0dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e0e0:	4b03      	ldr	r3, [pc, #12]	; (800e0f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20000000 	.word	0x20000000

0800e0f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e0f8:	f7ff fff0 	bl	800e0dc <HAL_RCC_GetHCLKFreq>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	4b05      	ldr	r3, [pc, #20]	; (800e114 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	0a9b      	lsrs	r3, r3, #10
 800e104:	f003 0307 	and.w	r3, r3, #7
 800e108:	4903      	ldr	r1, [pc, #12]	; (800e118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e10a:	5ccb      	ldrb	r3, [r1, r3]
 800e10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e110:	4618      	mov	r0, r3
 800e112:	bd80      	pop	{r7, pc}
 800e114:	40023800 	.word	0x40023800
 800e118:	0801786c 	.word	0x0801786c

0800e11c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e120:	f7ff ffdc 	bl	800e0dc <HAL_RCC_GetHCLKFreq>
 800e124:	4602      	mov	r2, r0
 800e126:	4b05      	ldr	r3, [pc, #20]	; (800e13c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	0b5b      	lsrs	r3, r3, #13
 800e12c:	f003 0307 	and.w	r3, r3, #7
 800e130:	4903      	ldr	r1, [pc, #12]	; (800e140 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e132:	5ccb      	ldrb	r3, [r1, r3]
 800e134:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e138:	4618      	mov	r0, r3
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	40023800 	.word	0x40023800
 800e140:	0801786c 	.word	0x0801786c

0800e144 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e022      	b.n	800e19c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d105      	bne.n	800e16e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7f7 f9e5 	bl	8005538 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2203      	movs	r2, #3
 800e172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f814 	bl	800e1a4 <HAL_SD_InitCard>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e00a      	b.n	800e19c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e1a4:	b5b0      	push	{r4, r5, r7, lr}
 800e1a6:	b08e      	sub	sp, #56	; 0x38
 800e1a8:	af04      	add	r7, sp, #16
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e1c0:	2376      	movs	r3, #118	; 0x76
 800e1c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681d      	ldr	r5, [r3, #0]
 800e1c8:	466c      	mov	r4, sp
 800e1ca:	f107 0314 	add.w	r3, r7, #20
 800e1ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1d6:	f107 0308 	add.w	r3, r7, #8
 800e1da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f003 ff9b 	bl	8012118 <SDIO_Init>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e031      	b.n	800e258 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e1f4:	4b1a      	ldr	r3, [pc, #104]	; (800e260 <HAL_SD_InitCard+0xbc>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f003 ffd3 	bl	80121aa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e204:	4b16      	ldr	r3, [pc, #88]	; (800e260 <HAL_SD_InitCard+0xbc>)
 800e206:	2201      	movs	r2, #1
 800e208:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 ffe6 	bl	800f1dc <SD_PowerON>
 800e210:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	431a      	orrs	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e013      	b.n	800e258 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 ff05 	bl	800f040 <SD_InitCard>
 800e236:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00b      	beq.n	800e256 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	431a      	orrs	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e000      	b.n	800e258 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3728      	adds	r7, #40	; 0x28
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bdb0      	pop	{r4, r5, r7, pc}
 800e260:	422580a0 	.word	0x422580a0

0800e264 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	; 0x30
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d107      	bne.n	800e28c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e280:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e288:	2301      	movs	r3, #1
 800e28a:	e0c9      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e292:	b2db      	uxtb	r3, r3
 800e294:	2b01      	cmp	r3, #1
 800e296:	f040 80c2 	bne.w	800e41e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	441a      	add	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d907      	bls.n	800e2be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e0b0      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2203      	movs	r2, #3
 800e2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	6812      	ldr	r2, [r2, #0]
 800e2d8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800e2dc:	f043 0302 	orr.w	r3, r3, #2
 800e2e0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e6:	4a50      	ldr	r2, [pc, #320]	; (800e428 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e2e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ee:	4a4f      	ldr	r2, [pc, #316]	; (800e42c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e2f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3380      	adds	r3, #128	; 0x80
 800e304:	4619      	mov	r1, r3
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	025b      	lsls	r3, r3, #9
 800e30c:	089b      	lsrs	r3, r3, #2
 800e30e:	f7fe fd27 	bl	800cd60 <HAL_DMA_Start_IT>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d017      	beq.n	800e348 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e326:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a40      	ldr	r2, [pc, #256]	; (800e430 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e32e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e334:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e06b      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e348:	4b3a      	ldr	r3, [pc, #232]	; (800e434 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800e34a:	2201      	movs	r2, #1
 800e34c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e352:	2b01      	cmp	r3, #1
 800e354:	d002      	beq.n	800e35c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e358:	025b      	lsls	r3, r3, #9
 800e35a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e364:	4618      	mov	r0, r3
 800e366:	f003 ffb3 	bl	80122d0 <SDMMC_CmdBlockLength>
 800e36a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00f      	beq.n	800e392 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a2e      	ldr	r2, [pc, #184]	; (800e430 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e378:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	431a      	orrs	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e38e:	2301      	movs	r3, #1
 800e390:	e046      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e392:	f04f 33ff 	mov.w	r3, #4294967295
 800e396:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	025b      	lsls	r3, r3, #9
 800e39c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e39e:	2390      	movs	r3, #144	; 0x90
 800e3a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f107 0210 	add.w	r2, r7, #16
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f003 ff5d 	bl	8012278 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d90a      	bls.n	800e3da <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2282      	movs	r2, #130	; 0x82
 800e3c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f003 ffc1 	bl	8012358 <SDMMC_CmdReadMultiBlock>
 800e3d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3d8:	e009      	b.n	800e3ee <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2281      	movs	r2, #129	; 0x81
 800e3de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f003 ff94 	bl	8012314 <SDMMC_CmdReadSingleBlock>
 800e3ec:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d012      	beq.n	800e41a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a0d      	ldr	r2, [pc, #52]	; (800e430 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e3fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	431a      	orrs	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e002      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800e41a:	2300      	movs	r3, #0
 800e41c:	e000      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800e41e:	2302      	movs	r3, #2
  }
}
 800e420:	4618      	mov	r0, r3
 800e422:	3730      	adds	r7, #48	; 0x30
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	0800ee4f 	.word	0x0800ee4f
 800e42c:	0800eec1 	.word	0x0800eec1
 800e430:	004005ff 	.word	0x004005ff
 800e434:	4225858c 	.word	0x4225858c

0800e438 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08c      	sub	sp, #48	; 0x30
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d107      	bne.n	800e460 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e454:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e0ce      	b.n	800e5fe <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b01      	cmp	r3, #1
 800e46a:	f040 80c7 	bne.w	800e5fc <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	441a      	add	r2, r3
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e47e:	429a      	cmp	r2, r3
 800e480:	d907      	bls.n	800e492 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e486:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	e0b5      	b.n	800e5fe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2203      	movs	r2, #3
 800e496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	6812      	ldr	r2, [r2, #0]
 800e4ac:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800e4b0:	f043 0302 	orr.w	r3, r3, #2
 800e4b4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ba:	4a53      	ldr	r2, [pc, #332]	; (800e608 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800e4bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c2:	4a52      	ldr	r2, [pc, #328]	; (800e60c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800e4c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d002      	beq.n	800e4dc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800e4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d8:	025b      	lsls	r3, r3, #9
 800e4da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f003 fef3 	bl	80122d0 <SDMMC_CmdBlockLength>
 800e4ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00f      	beq.n	800e512 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a46      	ldr	r2, [pc, #280]	; (800e610 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e4f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	431a      	orrs	r2, r3
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2201      	movs	r2, #1
 800e50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	e075      	b.n	800e5fe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d90a      	bls.n	800e52e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	22a0      	movs	r2, #160	; 0xa0
 800e51c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e524:	4618      	mov	r0, r3
 800e526:	f003 ff5b 	bl	80123e0 <SDMMC_CmdWriteMultiBlock>
 800e52a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e52c:	e009      	b.n	800e542 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2290      	movs	r2, #144	; 0x90
 800e532:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e53a:	4618      	mov	r0, r3
 800e53c:	f003 ff2e 	bl	801239c <SDMMC_CmdWriteSingleBlock>
 800e540:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d012      	beq.n	800e56e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a30      	ldr	r2, [pc, #192]	; (800e610 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	431a      	orrs	r2, r3
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2200      	movs	r2, #0
 800e568:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	e047      	b.n	800e5fe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e56e:	4b29      	ldr	r3, [pc, #164]	; (800e614 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800e570:	2201      	movs	r2, #1
 800e572:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	3380      	adds	r3, #128	; 0x80
 800e580:	461a      	mov	r2, r3
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	025b      	lsls	r3, r3, #9
 800e586:	089b      	lsrs	r3, r3, #2
 800e588:	f7fe fbea 	bl	800cd60 <HAL_DMA_Start_IT>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d01c      	beq.n	800e5cc <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	6812      	ldr	r2, [r2, #0]
 800e59c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800e5a0:	f023 0302 	bic.w	r3, r3, #2
 800e5a4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a19      	ldr	r2, [pc, #100]	; (800e610 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e5ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e018      	b.n	800e5fe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	025b      	lsls	r3, r3, #9
 800e5d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e5d8:	2390      	movs	r3, #144	; 0x90
 800e5da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f107 0210 	add.w	r2, r7, #16
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f003 fe40 	bl	8012278 <SDIO_ConfigData>

      return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	e000      	b.n	800e5fe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e5fc:	2302      	movs	r3, #2
  }
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3730      	adds	r7, #48	; 0x30
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	0800ee25 	.word	0x0800ee25
 800e60c:	0800eec1 	.word	0x0800eec1
 800e610:	004005ff 	.word	0x004005ff
 800e614:	4225858c 	.word	0x4225858c

0800e618 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e624:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e630:	2b00      	cmp	r3, #0
 800e632:	d008      	beq.n	800e646 <HAL_SD_IRQHandler+0x2e>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f003 0308 	and.w	r3, r3, #8
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 ffe2 	bl	800f608 <SD_Read_IT>
 800e644:	e165      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 808f 	beq.w	800e774 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e65e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	6812      	ldr	r2, [r2, #0]
 800e66a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800e66e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800e672:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f022 0201 	bic.w	r2, r2, #1
 800e682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f003 0308 	and.w	r3, r3, #8
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d039      	beq.n	800e702 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f003 0302 	and.w	r3, r3, #2
 800e694:	2b00      	cmp	r3, #0
 800e696:	d104      	bne.n	800e6a2 <HAL_SD_IRQHandler+0x8a>
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f003 0320 	and.w	r3, r3, #32
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d011      	beq.n	800e6c6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f003 febc 	bl	8012424 <SDMMC_CmdStopTransfer>
 800e6ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d008      	beq.n	800e6c6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	431a      	orrs	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f92f 	bl	800e924 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f240 523a 	movw	r2, #1338	; 0x53a
 800e6ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f003 0301 	and.w	r3, r3, #1
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d104      	bne.n	800e6f2 <HAL_SD_IRQHandler+0xda>
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f003 0302 	and.w	r3, r3, #2
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7f6 ff00 	bl	80054f8 <HAL_SD_RxCpltCallback>
 800e6f8:	e10b      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7f6 ff0c 	bl	8005518 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e700:	e107      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 8102 	beq.w	800e912 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f003 0320 	and.w	r3, r3, #32
 800e714:	2b00      	cmp	r3, #0
 800e716:	d011      	beq.n	800e73c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f003 fe81 	bl	8012424 <SDMMC_CmdStopTransfer>
 800e722:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d008      	beq.n	800e73c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	431a      	orrs	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 f8f4 	bl	800e924 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f003 0301 	and.w	r3, r3, #1
 800e742:	2b00      	cmp	r3, #0
 800e744:	f040 80e5 	bne.w	800e912 <HAL_SD_IRQHandler+0x2fa>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f003 0302 	and.w	r3, r3, #2
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 80df 	bne.w	800e912 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f022 0208 	bic.w	r2, r2, #8
 800e762:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7f6 fed3 	bl	8005518 <HAL_SD_TxCpltCallback>
}
 800e772:	e0ce      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d008      	beq.n	800e794 <HAL_SD_IRQHandler+0x17c>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f003 0308 	and.w	r3, r3, #8
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d003      	beq.n	800e794 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 ff8c 	bl	800f6aa <SD_Write_IT>
 800e792:	e0be      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e79a:	f240 233a 	movw	r3, #570	; 0x23a
 800e79e:	4013      	ands	r3, r2
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 80b6 	beq.w	800e912 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d005      	beq.n	800e7c0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b8:	f043 0202 	orr.w	r2, r3, #2
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c6:	f003 0308 	and.w	r3, r3, #8
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d005      	beq.n	800e7da <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d2:	f043 0208 	orr.w	r2, r3, #8
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e0:	f003 0320 	and.w	r3, r3, #32
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d005      	beq.n	800e7f4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ec:	f043 0220 	orr.w	r2, r3, #32
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7fa:	f003 0310 	and.w	r3, r3, #16
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d005      	beq.n	800e80e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e806:	f043 0210 	orr.w	r2, r3, #16
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d005      	beq.n	800e828 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e820:	f043 0208 	orr.w	r2, r3, #8
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f240 723a 	movw	r2, #1850	; 0x73a
 800e830:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	6812      	ldr	r2, [r2, #0]
 800e83c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800e840:	f023 0302 	bic.w	r3, r3, #2
 800e844:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f003 fdea 	bl	8012424 <SDMMC_CmdStopTransfer>
 800e850:	4602      	mov	r2, r0
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e856:	431a      	orrs	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f003 0308 	and.w	r3, r3, #8
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00a      	beq.n	800e87c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f855 	bl	800e924 <HAL_SD_ErrorCallback>
}
 800e87a:	e04a      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e882:	2b00      	cmp	r3, #0
 800e884:	d045      	beq.n	800e912 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f003 0310 	and.w	r3, r3, #16
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d104      	bne.n	800e89a <HAL_SD_IRQHandler+0x282>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f003 0320 	and.w	r3, r3, #32
 800e896:	2b00      	cmp	r3, #0
 800e898:	d011      	beq.n	800e8be <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89e:	4a1f      	ldr	r2, [pc, #124]	; (800e91c <HAL_SD_IRQHandler+0x304>)
 800e8a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe fab2 	bl	800ce10 <HAL_DMA_Abort_IT>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d02f      	beq.n	800e912 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f000 fb54 	bl	800ef64 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e8bc:	e029      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f003 0301 	and.w	r3, r3, #1
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d104      	bne.n	800e8d2 <HAL_SD_IRQHandler+0x2ba>
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f003 0302 	and.w	r3, r3, #2
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d011      	beq.n	800e8f6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d6:	4a12      	ldr	r2, [pc, #72]	; (800e920 <HAL_SD_IRQHandler+0x308>)
 800e8d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fe fa96 	bl	800ce10 <HAL_DMA_Abort_IT>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d013      	beq.n	800e912 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fb6f 	bl	800efd2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e8f4:	e00d      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f814 	bl	800e938 <HAL_SD_AbortCallback>
}
 800e910:	e7ff      	b.n	800e912 <HAL_SD_IRQHandler+0x2fa>
 800e912:	bf00      	nop
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	0800ef65 	.word	0x0800ef65
 800e920:	0800efd3 	.word	0x0800efd3

0800e924 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e95a:	0f9b      	lsrs	r3, r3, #30
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e966:	0e9b      	lsrs	r3, r3, #26
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	f003 030f 	and.w	r3, r3, #15
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e978:	0e1b      	lsrs	r3, r3, #24
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0303 	and.w	r3, r3, #3
 800e980:	b2da      	uxtb	r2, r3
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e98a:	0c1b      	lsrs	r3, r3, #16
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e996:	0a1b      	lsrs	r3, r3, #8
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ac:	0d1b      	lsrs	r3, r3, #20
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9b8:	0c1b      	lsrs	r3, r3, #16
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ca:	0bdb      	lsrs	r3, r3, #15
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9dc:	0b9b      	lsrs	r3, r3, #14
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ee:	0b5b      	lsrs	r3, r3, #13
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea00:	0b1b      	lsrs	r3, r3, #12
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2200      	movs	r2, #0
 800ea12:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d163      	bne.n	800eae4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea20:	009a      	lsls	r2, r3, #2
 800ea22:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ea26:	4013      	ands	r3, r2
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ea2c:	0f92      	lsrs	r2, r2, #30
 800ea2e:	431a      	orrs	r2, r3
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea38:	0edb      	lsrs	r3, r3, #27
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	f003 0307 	and.w	r3, r3, #7
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea4a:	0e1b      	lsrs	r3, r3, #24
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	f003 0307 	and.w	r3, r3, #7
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea5c:	0d5b      	lsrs	r3, r3, #21
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	f003 0307 	and.w	r3, r3, #7
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea6e:	0c9b      	lsrs	r3, r3, #18
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	f003 0307 	and.w	r3, r3, #7
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea80:	0bdb      	lsrs	r3, r3, #15
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0307 	and.w	r3, r3, #7
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	7e1b      	ldrb	r3, [r3, #24]
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	f003 0307 	and.w	r3, r3, #7
 800eaa2:	3302      	adds	r3, #2
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	fa02 f303 	lsl.w	r3, r2, r3
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800eaae:	fb03 f202 	mul.w	r2, r3, r2
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	7a1b      	ldrb	r3, [r3, #8]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	f003 030f 	and.w	r3, r3, #15
 800eac0:	2201      	movs	r2, #1
 800eac2:	409a      	lsls	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ead0:	0a52      	lsrs	r2, r2, #9
 800ead2:	fb03 f202 	mul.w	r2, r3, r2
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eae0:	661a      	str	r2, [r3, #96]	; 0x60
 800eae2:	e031      	b.n	800eb48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d11d      	bne.n	800eb28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaf0:	041b      	lsls	r3, r3, #16
 800eaf2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eafa:	0c1b      	lsrs	r3, r3, #16
 800eafc:	431a      	orrs	r2, r3
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	691b      	ldr	r3, [r3, #16]
 800eb06:	3301      	adds	r3, #1
 800eb08:	029a      	lsls	r2, r3, #10
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb1c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	661a      	str	r2, [r3, #96]	; 0x60
 800eb26:	e00f      	b.n	800eb48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a58      	ldr	r2, [pc, #352]	; (800ec90 <HAL_SD_GetCardCSD+0x344>)
 800eb2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	e09d      	b.n	800ec84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb4c:	0b9b      	lsrs	r3, r3, #14
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 0301 	and.w	r3, r3, #1
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb5e:	09db      	lsrs	r3, r3, #7
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb80:	0fdb      	lsrs	r3, r3, #31
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb8c:	0f5b      	lsrs	r3, r3, #29
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	f003 0303 	and.w	r3, r3, #3
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb9e:	0e9b      	lsrs	r3, r3, #26
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	f003 0307 	and.w	r3, r3, #7
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb0:	0d9b      	lsrs	r3, r3, #22
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	f003 030f 	and.w	r3, r3, #15
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc2:	0d5b      	lsrs	r3, r3, #21
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	f003 0301 	and.w	r3, r3, #1
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebde:	0c1b      	lsrs	r3, r3, #16
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 0301 	and.w	r3, r3, #1
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf2:	0bdb      	lsrs	r3, r3, #15
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec06:	0b9b      	lsrs	r3, r3, #14
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1a:	0b5b      	lsrs	r3, r3, #13
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2e:	0b1b      	lsrs	r3, r3, #12
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	b2da      	uxtb	r2, r3
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec42:	0a9b      	lsrs	r3, r3, #10
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	f003 0303 	and.w	r3, r3, #3
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec56:	0a1b      	lsrs	r3, r3, #8
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	f003 0303 	and.w	r3, r3, #3
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec6a:	085b      	lsrs	r3, r3, #1
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	004005ff 	.word	0x004005ff

0800ec94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ecec:	b5b0      	push	{r4, r5, r7, lr}
 800ecee:	b08e      	sub	sp, #56	; 0x38
 800ecf0:	af04      	add	r7, sp, #16
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2203      	movs	r2, #3
 800ecfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d02e      	beq.n	800ed64 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed0c:	d106      	bne.n	800ed1c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	639a      	str	r2, [r3, #56]	; 0x38
 800ed1a:	e029      	b.n	800ed70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed22:	d10a      	bne.n	800ed3a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 fb0f 	bl	800f348 <SD_WideBus_Enable>
 800ed2a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed32:	431a      	orrs	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	639a      	str	r2, [r3, #56]	; 0x38
 800ed38:	e01a      	b.n	800ed70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10a      	bne.n	800ed56 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fb4c 	bl	800f3de <SD_WideBus_Disable>
 800ed46:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	639a      	str	r2, [r3, #56]	; 0x38
 800ed54:	e00c      	b.n	800ed70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	639a      	str	r2, [r3, #56]	; 0x38
 800ed62:	e005      	b.n	800ed70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d009      	beq.n	800ed8c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a18      	ldr	r2, [pc, #96]	; (800ede0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ed7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e024      	b.n	800edd6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	699b      	ldr	r3, [r3, #24]
 800edac:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681d      	ldr	r5, [r3, #0]
 800edb2:	466c      	mov	r4, sp
 800edb4:	f107 0318 	add.w	r3, r7, #24
 800edb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800edc0:	f107 030c 	add.w	r3, r7, #12
 800edc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800edc6:	4628      	mov	r0, r5
 800edc8:	f003 f9a6 	bl	8012118 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3728      	adds	r7, #40	; 0x28
 800edda:	46bd      	mov	sp, r7
 800eddc:	bdb0      	pop	{r4, r5, r7, pc}
 800edde:	bf00      	nop
 800ede0:	004005ff 	.word	0x004005ff

0800ede4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800edec:	2300      	movs	r3, #0
 800edee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800edf0:	f107 030c 	add.w	r3, r7, #12
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fa7e 	bl	800f2f8 <SD_SendStatus>
 800edfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d005      	beq.n	800ee10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	431a      	orrs	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	0a5b      	lsrs	r3, r3, #9
 800ee14:	f003 030f 	and.w	r3, r3, #15
 800ee18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ee1a:	693b      	ldr	r3, [r7, #16]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ee42:	bf00      	nop
 800ee44:	3714      	adds	r7, #20
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr

0800ee4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee60:	2b82      	cmp	r3, #130	; 0x82
 800ee62:	d111      	bne.n	800ee88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f003 fadb 	bl	8012424 <SDMMC_CmdStopTransfer>
 800ee6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d008      	beq.n	800ee88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	431a      	orrs	r2, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff fd4e 	bl	800e924 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f022 0208 	bic.w	r2, r2, #8
 800ee96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f240 523a 	movw	r2, #1338	; 0x53a
 800eea0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2201      	movs	r2, #1
 800eea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f7f6 fb21 	bl	80054f8 <HAL_SD_RxCpltCallback>
#endif
}
 800eeb6:	bf00      	nop
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eecc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7fe f94a 	bl	800d168 <HAL_DMA_GetError>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	d03e      	beq.n	800ef58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eee0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eee8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d002      	beq.n	800eef6 <SD_DMAError+0x36>
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d12d      	bne.n	800ef52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a19      	ldr	r2, [pc, #100]	; (800ef60 <SD_DMAError+0xa0>)
 800eefc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ef0c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	f7ff ff62 	bl	800ede4 <HAL_SD_GetCardState>
 800ef20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2b06      	cmp	r3, #6
 800ef26:	d002      	beq.n	800ef2e <SD_DMAError+0x6e>
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2b05      	cmp	r3, #5
 800ef2c:	d10a      	bne.n	800ef44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f003 fa76 	bl	8012424 <SDMMC_CmdStopTransfer>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef3e:	431a      	orrs	r2, r3
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ef52:	6978      	ldr	r0, [r7, #20]
 800ef54:	f7ff fce6 	bl	800e924 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ef58:	bf00      	nop
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	004005ff 	.word	0x004005ff

0800ef64 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef70:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f240 523a 	movw	r2, #1338	; 0x53a
 800ef7a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f7ff ff31 	bl	800ede4 <HAL_SD_GetCardState>
 800ef82:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	2b06      	cmp	r3, #6
 800ef96:	d002      	beq.n	800ef9e <SD_DMATxAbort+0x3a>
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	d10a      	bne.n	800efb4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f003 fa3e 	bl	8012424 <SDMMC_CmdStopTransfer>
 800efa8:	4602      	mov	r2, r0
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efae:	431a      	orrs	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d103      	bne.n	800efc4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f7ff fcbb 	bl	800e938 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800efc2:	e002      	b.n	800efca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f7ff fcad 	bl	800e924 <HAL_SD_ErrorCallback>
}
 800efca:	bf00      	nop
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efde:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f240 523a 	movw	r2, #1338	; 0x53a
 800efe8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800efea:	68f8      	ldr	r0, [r7, #12]
 800efec:	f7ff fefa 	bl	800ede4 <HAL_SD_GetCardState>
 800eff0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2201      	movs	r2, #1
 800eff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2200      	movs	r2, #0
 800effe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b06      	cmp	r3, #6
 800f004:	d002      	beq.n	800f00c <SD_DMARxAbort+0x3a>
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2b05      	cmp	r3, #5
 800f00a:	d10a      	bne.n	800f022 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4618      	mov	r0, r3
 800f012:	f003 fa07 	bl	8012424 <SDMMC_CmdStopTransfer>
 800f016:	4602      	mov	r2, r0
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01c:	431a      	orrs	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f026:	2b00      	cmp	r3, #0
 800f028:	d103      	bne.n	800f032 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f7ff fc84 	bl	800e938 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f030:	e002      	b.n	800f038 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7ff fc76 	bl	800e924 <HAL_SD_ErrorCallback>
}
 800f038:	bf00      	nop
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f040:	b5b0      	push	{r4, r5, r7, lr}
 800f042:	b094      	sub	sp, #80	; 0x50
 800f044:	af04      	add	r7, sp, #16
 800f046:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f048:	2301      	movs	r3, #1
 800f04a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4618      	mov	r0, r3
 800f052:	f003 f8b9 	bl	80121c8 <SDIO_GetPowerState>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d102      	bne.n	800f062 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f05c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f060:	e0b8      	b.n	800f1d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f066:	2b03      	cmp	r3, #3
 800f068:	d02f      	beq.n	800f0ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4618      	mov	r0, r3
 800f070:	f003 fae2 	bl	8012638 <SDMMC_CmdSendCID>
 800f074:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <SD_InitCard+0x40>
    {
      return errorstate;
 800f07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07e:	e0a9      	b.n	800f1d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2100      	movs	r1, #0
 800f086:	4618      	mov	r0, r3
 800f088:	f003 f8e3 	bl	8012252 <SDIO_GetResponse>
 800f08c:	4602      	mov	r2, r0
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2104      	movs	r1, #4
 800f098:	4618      	mov	r0, r3
 800f09a:	f003 f8da 	bl	8012252 <SDIO_GetResponse>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2108      	movs	r1, #8
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f003 f8d1 	bl	8012252 <SDIO_GetResponse>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	210c      	movs	r1, #12
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f003 f8c8 	bl	8012252 <SDIO_GetResponse>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d00d      	beq.n	800f0ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f107 020e 	add.w	r2, r7, #14
 800f0da:	4611      	mov	r1, r2
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f003 fae8 	bl	80126b2 <SDMMC_CmdSetRelAdd>
 800f0e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <SD_InitCard+0xae>
    {
      return errorstate;
 800f0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ec:	e072      	b.n	800f1d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	d036      	beq.n	800f164 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f0f6:	89fb      	ldrh	r3, [r7, #14]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f106:	041b      	lsls	r3, r3, #16
 800f108:	4619      	mov	r1, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	f003 fab2 	bl	8012674 <SDMMC_CmdSendCSD>
 800f110:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f114:	2b00      	cmp	r3, #0
 800f116:	d001      	beq.n	800f11c <SD_InitCard+0xdc>
    {
      return errorstate;
 800f118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f11a:	e05b      	b.n	800f1d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2100      	movs	r1, #0
 800f122:	4618      	mov	r0, r3
 800f124:	f003 f895 	bl	8012252 <SDIO_GetResponse>
 800f128:	4602      	mov	r2, r0
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2104      	movs	r1, #4
 800f134:	4618      	mov	r0, r3
 800f136:	f003 f88c 	bl	8012252 <SDIO_GetResponse>
 800f13a:	4602      	mov	r2, r0
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2108      	movs	r1, #8
 800f146:	4618      	mov	r0, r3
 800f148:	f003 f883 	bl	8012252 <SDIO_GetResponse>
 800f14c:	4602      	mov	r2, r0
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	210c      	movs	r1, #12
 800f158:	4618      	mov	r0, r3
 800f15a:	f003 f87a 	bl	8012252 <SDIO_GetResponse>
 800f15e:	4602      	mov	r2, r0
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2104      	movs	r1, #4
 800f16a:	4618      	mov	r0, r3
 800f16c:	f003 f871 	bl	8012252 <SDIO_GetResponse>
 800f170:	4603      	mov	r3, r0
 800f172:	0d1a      	lsrs	r2, r3, #20
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f178:	f107 0310 	add.w	r3, r7, #16
 800f17c:	4619      	mov	r1, r3
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7ff fbe4 	bl	800e94c <HAL_SD_GetCardCSD>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f18a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f18e:	e021      	b.n	800f1d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6819      	ldr	r1, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f198:	041b      	lsls	r3, r3, #16
 800f19a:	2200      	movs	r2, #0
 800f19c:	461c      	mov	r4, r3
 800f19e:	4615      	mov	r5, r2
 800f1a0:	4622      	mov	r2, r4
 800f1a2:	462b      	mov	r3, r5
 800f1a4:	4608      	mov	r0, r1
 800f1a6:	f003 f95f 	bl	8012468 <SDMMC_CmdSelDesel>
 800f1aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <SD_InitCard+0x176>
  {
    return errorstate;
 800f1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1b4:	e00e      	b.n	800f1d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681d      	ldr	r5, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	466c      	mov	r4, sp
 800f1be:	f103 0210 	add.w	r2, r3, #16
 800f1c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f1c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f002 ffa3 	bl	8012118 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3740      	adds	r7, #64	; 0x40
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bdb0      	pop	{r4, r5, r7, pc}

0800f1dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	617b      	str	r3, [r7, #20]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f003 f95a 	bl	80124ae <SDMMC_CmdGoIdleState>
 800f1fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	e072      	b.n	800f2ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f003 f96d 	bl	80124ea <SDMMC_CmdOperCond>
 800f210:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00d      	beq.n	800f234 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4618      	mov	r0, r3
 800f224:	f003 f943 	bl	80124ae <SDMMC_CmdGoIdleState>
 800f228:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <SD_PowerON+0x5e>
    {
      return errorstate;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	e05b      	b.n	800f2ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d137      	bne.n	800f2b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2100      	movs	r1, #0
 800f248:	4618      	mov	r0, r3
 800f24a:	f003 f96d 	bl	8012528 <SDMMC_CmdAppCommand>
 800f24e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d02d      	beq.n	800f2b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f25a:	e047      	b.n	800f2ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2100      	movs	r1, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f003 f960 	bl	8012528 <SDMMC_CmdAppCommand>
 800f268:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <SD_PowerON+0x98>
    {
      return errorstate;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	e03b      	b.n	800f2ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	491e      	ldr	r1, [pc, #120]	; (800f2f4 <SD_PowerON+0x118>)
 800f27a:	4618      	mov	r0, r3
 800f27c:	f003 f976 	bl	801256c <SDMMC_CmdAppOperCommand>
 800f280:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f288:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f28c:	e02e      	b.n	800f2ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2100      	movs	r1, #0
 800f294:	4618      	mov	r0, r3
 800f296:	f002 ffdc 	bl	8012252 <SDIO_GetResponse>
 800f29a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	0fdb      	lsrs	r3, r3, #31
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d101      	bne.n	800f2a8 <SD_PowerON+0xcc>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e000      	b.n	800f2aa <SD_PowerON+0xce>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	613b      	str	r3, [r7, #16]

    count++;
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d802      	bhi.n	800f2c2 <SD_PowerON+0xe6>
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d0cc      	beq.n	800f25c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d902      	bls.n	800f2d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f2cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f2d0:	e00c      	b.n	800f2ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	645a      	str	r2, [r3, #68]	; 0x44
 800f2e2:	e002      	b.n	800f2ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f2ea:	2300      	movs	r3, #0
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3718      	adds	r7, #24
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	c1100000 	.word	0xc1100000

0800f2f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f30c:	e018      	b.n	800f340 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f316:	041b      	lsls	r3, r3, #16
 800f318:	4619      	mov	r1, r3
 800f31a:	4610      	mov	r0, r2
 800f31c:	f003 f9ea 	bl	80126f4 <SDMMC_CmdSendStatus>
 800f320:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <SD_SendStatus+0x34>
  {
    return errorstate;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	e009      	b.n	800f340 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2100      	movs	r1, #0
 800f332:	4618      	mov	r0, r3
 800f334:	f002 ff8d 	bl	8012252 <SDIO_GetResponse>
 800f338:	4602      	mov	r2, r0
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f350:	2300      	movs	r3, #0
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	2300      	movs	r3, #0
 800f356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2100      	movs	r1, #0
 800f35e:	4618      	mov	r0, r3
 800f360:	f002 ff77 	bl	8012252 <SDIO_GetResponse>
 800f364:	4603      	mov	r3, r0
 800f366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f36a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f36e:	d102      	bne.n	800f376 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f374:	e02f      	b.n	800f3d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f376:	f107 030c 	add.w	r3, r7, #12
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f879 	bl	800f474 <SD_FindSCR>
 800f382:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	e023      	b.n	800f3d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f394:	2b00      	cmp	r3, #0
 800f396:	d01c      	beq.n	800f3d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3a0:	041b      	lsls	r3, r3, #16
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	f003 f8bf 	bl	8012528 <SDMMC_CmdAppCommand>
 800f3aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	e00f      	b.n	800f3d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2102      	movs	r1, #2
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f003 f8f8 	bl	80125b2 <SDMMC_CmdBusWidth>
 800f3c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	e003      	b.n	800f3d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	e001      	b.n	800f3d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f3d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b086      	sub	sp, #24
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	60fb      	str	r3, [r7, #12]
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f002 ff2c 	bl	8012252 <SDIO_GetResponse>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f404:	d102      	bne.n	800f40c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f40a:	e02f      	b.n	800f46c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f40c:	f107 030c 	add.w	r3, r7, #12
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f82e 	bl	800f474 <SD_FindSCR>
 800f418:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	e023      	b.n	800f46c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d01c      	beq.n	800f468 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f436:	041b      	lsls	r3, r3, #16
 800f438:	4619      	mov	r1, r3
 800f43a:	4610      	mov	r0, r2
 800f43c:	f003 f874 	bl	8012528 <SDMMC_CmdAppCommand>
 800f440:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	e00f      	b.n	800f46c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2100      	movs	r1, #0
 800f452:	4618      	mov	r0, r3
 800f454:	f003 f8ad 	bl	80125b2 <SDMMC_CmdBusWidth>
 800f458:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	e003      	b.n	800f46c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f464:	2300      	movs	r3, #0
 800f466:	e001      	b.n	800f46c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f468:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f474:	b590      	push	{r4, r7, lr}
 800f476:	b08f      	sub	sp, #60	; 0x3c
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f47e:	f7fc fcb5 	bl	800bdec <HAL_GetTick>
 800f482:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f484:	2300      	movs	r3, #0
 800f486:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f488:	2300      	movs	r3, #0
 800f48a:	60bb      	str	r3, [r7, #8]
 800f48c:	2300      	movs	r3, #0
 800f48e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2108      	movs	r1, #8
 800f49a:	4618      	mov	r0, r3
 800f49c:	f002 ff18 	bl	80122d0 <SDMMC_CmdBlockLength>
 800f4a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <SD_FindSCR+0x38>
  {
    return errorstate;
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	e0a9      	b.n	800f600 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4b4:	041b      	lsls	r3, r3, #16
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	f003 f835 	bl	8012528 <SDMMC_CmdAppCommand>
 800f4be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <SD_FindSCR+0x56>
  {
    return errorstate;
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	e09a      	b.n	800f600 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f4d0:	2308      	movs	r3, #8
 800f4d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800f4d4:	2330      	movs	r3, #48	; 0x30
 800f4d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f4d8:	2302      	movs	r3, #2
 800f4da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f107 0210 	add.w	r2, r7, #16
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f002 fec2 	bl	8012278 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f003 f87c 	bl	80125f6 <SDMMC_CmdSendSCR>
 800f4fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f502:	2b00      	cmp	r3, #0
 800f504:	d022      	beq.n	800f54c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f508:	e07a      	b.n	800f600 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00e      	beq.n	800f536 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6819      	ldr	r1, [r3, #0]
 800f51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	f107 0208 	add.w	r2, r7, #8
 800f524:	18d4      	adds	r4, r2, r3
 800f526:	4608      	mov	r0, r1
 800f528:	f002 fe21 	bl	801216e <SDIO_ReadFIFO>
 800f52c:	4603      	mov	r3, r0
 800f52e:	6023      	str	r3, [r4, #0]
      index++;
 800f530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f532:	3301      	adds	r3, #1
 800f534:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f536:	f7fc fc59 	bl	800bdec <HAL_GetTick>
 800f53a:	4602      	mov	r2, r0
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f544:	d102      	bne.n	800f54c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f546:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f54a:	e059      	b.n	800f600 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f552:	f240 432a 	movw	r3, #1066	; 0x42a
 800f556:	4013      	ands	r3, r2
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d0d6      	beq.n	800f50a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f562:	f003 0308 	and.w	r3, r3, #8
 800f566:	2b00      	cmp	r3, #0
 800f568:	d005      	beq.n	800f576 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2208      	movs	r2, #8
 800f570:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f572:	2308      	movs	r3, #8
 800f574:	e044      	b.n	800f600 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f57c:	f003 0302 	and.w	r3, r3, #2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d005      	beq.n	800f590 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2202      	movs	r2, #2
 800f58a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f58c:	2302      	movs	r3, #2
 800f58e:	e037      	b.n	800f600 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f596:	f003 0320 	and.w	r3, r3, #32
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d005      	beq.n	800f5aa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2220      	movs	r2, #32
 800f5a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f5a6:	2320      	movs	r3, #32
 800f5a8:	e02a      	b.n	800f600 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f240 523a 	movw	r2, #1338	; 0x53a
 800f5b2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	061a      	lsls	r2, r3, #24
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	021b      	lsls	r3, r3, #8
 800f5bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	0a1b      	lsrs	r3, r3, #8
 800f5c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f5ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	0e1b      	lsrs	r3, r3, #24
 800f5d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d4:	601a      	str	r2, [r3, #0]
    scr++;
 800f5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d8:	3304      	adds	r3, #4
 800f5da:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	061a      	lsls	r2, r3, #24
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	021b      	lsls	r3, r3, #8
 800f5e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	0a1b      	lsrs	r3, r3, #8
 800f5ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f5f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	0e1b      	lsrs	r3, r3, #24
 800f5f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	373c      	adds	r7, #60	; 0x3c
 800f604:	46bd      	mov	sp, r7
 800f606:	bd90      	pop	{r4, r7, pc}

0800f608 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f614:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d03f      	beq.n	800f6a2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f622:	2300      	movs	r3, #0
 800f624:	617b      	str	r3, [r7, #20]
 800f626:	e033      	b.n	800f690 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f002 fd9e 	bl	801216e <SDIO_ReadFIFO>
 800f632:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	b2da      	uxtb	r2, r3
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	3301      	adds	r3, #1
 800f640:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	3b01      	subs	r3, #1
 800f646:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	0a1b      	lsrs	r3, r3, #8
 800f64c:	b2da      	uxtb	r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3301      	adds	r3, #1
 800f656:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	0c1b      	lsrs	r3, r3, #16
 800f662:	b2da      	uxtb	r2, r3
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	3301      	adds	r3, #1
 800f66c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	3b01      	subs	r3, #1
 800f672:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	0e1b      	lsrs	r3, r3, #24
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	3301      	adds	r3, #1
 800f682:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	3b01      	subs	r3, #1
 800f688:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	3301      	adds	r3, #1
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	2b07      	cmp	r3, #7
 800f694:	d9c8      	bls.n	800f628 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f6a2:	bf00      	nop
 800f6a4:	3718      	adds	r7, #24
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b086      	sub	sp, #24
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6bc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d043      	beq.n	800f74c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	617b      	str	r3, [r7, #20]
 800f6c8:	e037      	b.n	800f73a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	021a      	lsls	r2, r3, #8
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	041a      	lsls	r2, r3, #16
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	3301      	adds	r3, #1
 800f704:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3b01      	subs	r3, #1
 800f70a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	061a      	lsls	r2, r3, #24
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	4313      	orrs	r3, r2
 800f716:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	3301      	adds	r3, #1
 800f71c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	3b01      	subs	r3, #1
 800f722:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f107 0208 	add.w	r2, r7, #8
 800f72c:	4611      	mov	r1, r2
 800f72e:	4618      	mov	r0, r3
 800f730:	f002 fd2a 	bl	8012188 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	3301      	adds	r3, #1
 800f738:	617b      	str	r3, [r7, #20]
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	2b07      	cmp	r3, #7
 800f73e:	d9c4      	bls.n	800f6ca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f74c:	bf00      	nop
 800f74e:	3718      	adds	r7, #24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d101      	bne.n	800f766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e056      	b.n	800f814 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2200      	movs	r2, #0
 800f76a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f772:	b2db      	uxtb	r3, r3
 800f774:	2b00      	cmp	r3, #0
 800f776:	d106      	bne.n	800f786 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7f6 fd51 	bl	8006228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2202      	movs	r2, #2
 800f78a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f79c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	685a      	ldr	r2, [r3, #4]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	431a      	orrs	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	431a      	orrs	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	431a      	orrs	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	699b      	ldr	r3, [r3, #24]
 800f7be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f7c2:	431a      	orrs	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	69db      	ldr	r3, [r3, #28]
 800f7c8:	431a      	orrs	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	ea42 0103 	orr.w	r1, r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	430a      	orrs	r2, r1
 800f7dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	699b      	ldr	r3, [r3, #24]
 800f7e2:	0c1b      	lsrs	r3, r3, #16
 800f7e4:	f003 0104 	and.w	r1, r3, #4
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	430a      	orrs	r2, r1
 800f7f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	69da      	ldr	r2, [r3, #28]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d101      	bne.n	800f82e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f82a:	2301      	movs	r3, #1
 800f82c:	e01a      	b.n	800f864 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2202      	movs	r2, #2
 800f832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f844:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7f6 fd88 	bl	800635c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2200      	movs	r2, #0
 800f850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08c      	sub	sp, #48	; 0x30
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f87a:	2301      	movs	r3, #1
 800f87c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f87e:	2300      	movs	r3, #0
 800f880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d101      	bne.n	800f892 <HAL_SPI_TransmitReceive+0x26>
 800f88e:	2302      	movs	r3, #2
 800f890:	e18a      	b.n	800fba8 <HAL_SPI_TransmitReceive+0x33c>
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2201      	movs	r2, #1
 800f896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f89a:	f7fc faa7 	bl	800bdec <HAL_GetTick>
 800f89e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f8b0:	887b      	ldrh	r3, [r7, #2]
 800f8b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d00f      	beq.n	800f8dc <HAL_SPI_TransmitReceive+0x70>
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8c2:	d107      	bne.n	800f8d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d103      	bne.n	800f8d4 <HAL_SPI_TransmitReceive+0x68>
 800f8cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8d0:	2b04      	cmp	r3, #4
 800f8d2:	d003      	beq.n	800f8dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f8da:	e15b      	b.n	800fb94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d005      	beq.n	800f8ee <HAL_SPI_TransmitReceive+0x82>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <HAL_SPI_TransmitReceive+0x82>
 800f8e8:	887b      	ldrh	r3, [r7, #2]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d103      	bne.n	800f8f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f8f4:	e14e      	b.n	800fb94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b04      	cmp	r3, #4
 800f900:	d003      	beq.n	800f90a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2205      	movs	r2, #5
 800f906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2200      	movs	r2, #0
 800f90e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	887a      	ldrh	r2, [r7, #2]
 800f91a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	887a      	ldrh	r2, [r7, #2]
 800f920:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	887a      	ldrh	r2, [r7, #2]
 800f92c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	887a      	ldrh	r2, [r7, #2]
 800f932:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f94a:	2b40      	cmp	r3, #64	; 0x40
 800f94c:	d007      	beq.n	800f95e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f95c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f966:	d178      	bne.n	800fa5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <HAL_SPI_TransmitReceive+0x10a>
 800f970:	8b7b      	ldrh	r3, [r7, #26]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d166      	bne.n	800fa44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f97a:	881a      	ldrh	r2, [r3, #0]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f986:	1c9a      	adds	r2, r3, #2
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f990:	b29b      	uxth	r3, r3
 800f992:	3b01      	subs	r3, #1
 800f994:	b29a      	uxth	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f99a:	e053      	b.n	800fa44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f003 0302 	and.w	r3, r3, #2
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d11b      	bne.n	800f9e2 <HAL_SPI_TransmitReceive+0x176>
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d016      	beq.n	800f9e2 <HAL_SPI_TransmitReceive+0x176>
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d113      	bne.n	800f9e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9be:	881a      	ldrh	r2, [r3, #0]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ca:	1c9a      	adds	r2, r3, #2
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	3b01      	subs	r3, #1
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	f003 0301 	and.w	r3, r3, #1
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d119      	bne.n	800fa24 <HAL_SPI_TransmitReceive+0x1b8>
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d014      	beq.n	800fa24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	68da      	ldr	r2, [r3, #12]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa04:	b292      	uxth	r2, r2
 800fa06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	1c9a      	adds	r2, r3, #2
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fa20:	2301      	movs	r3, #1
 800fa22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fa24:	f7fc f9e2 	bl	800bdec <HAL_GetTick>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d807      	bhi.n	800fa44 <HAL_SPI_TransmitReceive+0x1d8>
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3a:	d003      	beq.n	800fa44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fa42:	e0a7      	b.n	800fb94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1a6      	bne.n	800f99c <HAL_SPI_TransmitReceive+0x130>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1a1      	bne.n	800f99c <HAL_SPI_TransmitReceive+0x130>
 800fa58:	e07c      	b.n	800fb54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d002      	beq.n	800fa68 <HAL_SPI_TransmitReceive+0x1fc>
 800fa62:	8b7b      	ldrh	r3, [r7, #26]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d16b      	bne.n	800fb40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	330c      	adds	r3, #12
 800fa72:	7812      	ldrb	r2, [r2, #0]
 800fa74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa7a:	1c5a      	adds	r2, r3, #1
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	3b01      	subs	r3, #1
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa8e:	e057      	b.n	800fb40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	f003 0302 	and.w	r3, r3, #2
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	d11c      	bne.n	800fad8 <HAL_SPI_TransmitReceive+0x26c>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d017      	beq.n	800fad8 <HAL_SPI_TransmitReceive+0x26c>
 800faa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d114      	bne.n	800fad8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	330c      	adds	r3, #12
 800fab8:	7812      	ldrb	r2, [r2, #0]
 800faba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800faca:	b29b      	uxth	r3, r3
 800facc:	3b01      	subs	r3, #1
 800face:	b29a      	uxth	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fad4:	2300      	movs	r3, #0
 800fad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f003 0301 	and.w	r3, r3, #1
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d119      	bne.n	800fb1a <HAL_SPI_TransmitReceive+0x2ae>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faea:	b29b      	uxth	r3, r3
 800faec:	2b00      	cmp	r3, #0
 800faee:	d014      	beq.n	800fb1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	68da      	ldr	r2, [r3, #12]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafa:	b2d2      	uxtb	r2, r2
 800fafc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb02:	1c5a      	adds	r2, r3, #1
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fb16:	2301      	movs	r3, #1
 800fb18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fb1a:	f7fc f967 	bl	800bdec <HAL_GetTick>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d803      	bhi.n	800fb32 <HAL_SPI_TransmitReceive+0x2c6>
 800fb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb30:	d102      	bne.n	800fb38 <HAL_SPI_TransmitReceive+0x2cc>
 800fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d103      	bne.n	800fb40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fb38:	2303      	movs	r3, #3
 800fb3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fb3e:	e029      	b.n	800fb94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d1a2      	bne.n	800fa90 <HAL_SPI_TransmitReceive+0x224>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d19d      	bne.n	800fa90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 fae1 	bl	8010120 <SPI_EndRxTxTransaction>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d006      	beq.n	800fb72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fb64:	2301      	movs	r3, #1
 800fb66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2220      	movs	r2, #32
 800fb6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800fb70:	e010      	b.n	800fb94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10b      	bne.n	800fb92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	617b      	str	r3, [r7, #20]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	617b      	str	r3, [r7, #20]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	617b      	str	r3, [r7, #20]
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	e000      	b.n	800fb94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fb92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fba4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3730      	adds	r7, #48	; 0x30
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d101      	bne.n	800fbd0 <HAL_SPI_Transmit_DMA+0x20>
 800fbcc:	2302      	movs	r3, #2
 800fbce:	e093      	b.n	800fcf8 <HAL_SPI_Transmit_DMA+0x148>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d002      	beq.n	800fbea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fbe8:	e081      	b.n	800fcee <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d002      	beq.n	800fbf6 <HAL_SPI_Transmit_DMA+0x46>
 800fbf0:	88fb      	ldrh	r3, [r7, #6]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d102      	bne.n	800fbfc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fbfa:	e078      	b.n	800fcee <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2203      	movs	r2, #3
 800fc00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2200      	movs	r2, #0
 800fc08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	88fa      	ldrh	r2, [r7, #6]
 800fc14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	88fa      	ldrh	r2, [r7, #6]
 800fc1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	689b      	ldr	r3, [r3, #8]
 800fc3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc42:	d107      	bne.n	800fc54 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fc52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc58:	4a29      	ldr	r2, [pc, #164]	; (800fd00 <HAL_SPI_Transmit_DMA+0x150>)
 800fc5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc60:	4a28      	ldr	r2, [pc, #160]	; (800fd04 <HAL_SPI_Transmit_DMA+0x154>)
 800fc62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc68:	4a27      	ldr	r2, [pc, #156]	; (800fd08 <HAL_SPI_Transmit_DMA+0x158>)
 800fc6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc70:	2200      	movs	r2, #0
 800fc72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	330c      	adds	r3, #12
 800fc84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fc8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fc8c:	f7fd f868 	bl	800cd60 <HAL_DMA_Start_IT>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00c      	beq.n	800fcb0 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc9a:	f043 0210 	orr.w	r2, r3, #16
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800fcae:	e01e      	b.n	800fcee <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcba:	2b40      	cmp	r3, #64	; 0x40
 800fcbc:	d007      	beq.n	800fcce <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fccc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	685a      	ldr	r2, [r3, #4]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f042 0220 	orr.w	r2, r2, #32
 800fcdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	685a      	ldr	r2, [r3, #4]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f042 0202 	orr.w	r2, r2, #2
 800fcec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fcf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3718      	adds	r7, #24
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	0800ffc9 	.word	0x0800ffc9
 800fd04:	0800ff21 	.word	0x0800ff21
 800fd08:	0800ffe5 	.word	0x0800ffe5

0800fd0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	099b      	lsrs	r3, r3, #6
 800fd28:	f003 0301 	and.w	r3, r3, #1
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d10f      	bne.n	800fd50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00a      	beq.n	800fd50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	099b      	lsrs	r3, r3, #6
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d004      	beq.n	800fd50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	4798      	blx	r3
    return;
 800fd4e:	e0d7      	b.n	800ff00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	085b      	lsrs	r3, r3, #1
 800fd54:	f003 0301 	and.w	r3, r3, #1
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00a      	beq.n	800fd72 <HAL_SPI_IRQHandler+0x66>
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	09db      	lsrs	r3, r3, #7
 800fd60:	f003 0301 	and.w	r3, r3, #1
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	4798      	blx	r3
    return;
 800fd70:	e0c6      	b.n	800ff00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	095b      	lsrs	r3, r3, #5
 800fd76:	f003 0301 	and.w	r3, r3, #1
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10c      	bne.n	800fd98 <HAL_SPI_IRQHandler+0x8c>
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	099b      	lsrs	r3, r3, #6
 800fd82:	f003 0301 	and.w	r3, r3, #1
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d106      	bne.n	800fd98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	0a1b      	lsrs	r3, r3, #8
 800fd8e:	f003 0301 	and.w	r3, r3, #1
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 80b4 	beq.w	800ff00 <HAL_SPI_IRQHandler+0x1f4>
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	095b      	lsrs	r3, r3, #5
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f000 80ad 	beq.w	800ff00 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	099b      	lsrs	r3, r3, #6
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d023      	beq.n	800fdfa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d011      	beq.n	800fde2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdc2:	f043 0204 	orr.w	r2, r3, #4
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fdca:	2300      	movs	r3, #0
 800fdcc:	617b      	str	r3, [r7, #20]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	617b      	str	r3, [r7, #20]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	689b      	ldr	r3, [r3, #8]
 800fddc:	617b      	str	r3, [r7, #20]
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	e00b      	b.n	800fdfa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fde2:	2300      	movs	r3, #0
 800fde4:	613b      	str	r3, [r7, #16]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	613b      	str	r3, [r7, #16]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	613b      	str	r3, [r7, #16]
 800fdf6:	693b      	ldr	r3, [r7, #16]
        return;
 800fdf8:	e082      	b.n	800ff00 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	095b      	lsrs	r3, r3, #5
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d014      	beq.n	800fe30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe0a:	f043 0201 	orr.w	r2, r3, #1
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fe12:	2300      	movs	r3, #0
 800fe14:	60fb      	str	r3, [r7, #12]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	689b      	ldr	r3, [r3, #8]
 800fe1c:	60fb      	str	r3, [r7, #12]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	0a1b      	lsrs	r3, r3, #8
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00c      	beq.n	800fe56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe40:	f043 0208 	orr.w	r2, r3, #8
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fe48:	2300      	movs	r3, #0
 800fe4a:	60bb      	str	r3, [r7, #8]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	60bb      	str	r3, [r7, #8]
 800fe54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d04f      	beq.n	800fefe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fe6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2201      	movs	r2, #1
 800fe72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	f003 0302 	and.w	r3, r3, #2
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d104      	bne.n	800fe8a <HAL_SPI_IRQHandler+0x17e>
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	f003 0301 	and.w	r3, r3, #1
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d034      	beq.n	800fef4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	685a      	ldr	r2, [r3, #4]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f022 0203 	bic.w	r2, r2, #3
 800fe98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d011      	beq.n	800fec6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fea6:	4a18      	ldr	r2, [pc, #96]	; (800ff08 <HAL_SPI_IRQHandler+0x1fc>)
 800fea8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fc ffae 	bl	800ce10 <HAL_DMA_Abort_IT>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d005      	beq.n	800fec6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800febe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d016      	beq.n	800fefc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fed2:	4a0d      	ldr	r2, [pc, #52]	; (800ff08 <HAL_SPI_IRQHandler+0x1fc>)
 800fed4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fc ff98 	bl	800ce10 <HAL_DMA_Abort_IT>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00a      	beq.n	800fefc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800fef2:	e003      	b.n	800fefc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7f6 f963 	bl	80061c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800fefa:	e000      	b.n	800fefe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800fefc:	bf00      	nop
    return;
 800fefe:	bf00      	nop
  }
}
 800ff00:	3720      	adds	r7, #32
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	08010025 	.word	0x08010025

0800ff0c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff2e:	f7fb ff5d 	bl	800bdec <HAL_GetTick>
 800ff32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff42:	d03b      	beq.n	800ffbc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	685a      	ldr	r2, [r3, #4]
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f022 0220 	bic.w	r2, r2, #32
 800ff52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	685a      	ldr	r2, [r3, #4]
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f022 0202 	bic.w	r2, r2, #2
 800ff62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	2164      	movs	r1, #100	; 0x64
 800ff68:	6978      	ldr	r0, [r7, #20]
 800ff6a:	f000 f8d9 	bl	8010120 <SPI_EndRxTxTransaction>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d005      	beq.n	800ff80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff78:	f043 0220 	orr.w	r2, r3, #32
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10a      	bne.n	800ff9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	60fb      	str	r3, [r7, #12]
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	60fb      	str	r3, [r7, #12]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d003      	beq.n	800ffbc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ffb4:	6978      	ldr	r0, [r7, #20]
 800ffb6:	f7f6 f903 	bl	80061c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ffba:	e002      	b.n	800ffc2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ffbc:	6978      	ldr	r0, [r7, #20]
 800ffbe:	f7f6 f915 	bl	80061ec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ffd6:	68f8      	ldr	r0, [r7, #12]
 800ffd8:	f7ff ff98 	bl	800ff0c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ffdc:	bf00      	nop
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f022 0203 	bic.w	r2, r2, #3
 8010000:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010006:	f043 0210 	orr.w	r2, r3, #16
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2201      	movs	r2, #1
 8010012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7f6 f8d2 	bl	80061c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801001c:	bf00      	nop
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010030:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7f6 f8be 	bl	80061c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010044:	bf00      	nop
 8010046:	3710      	adds	r7, #16
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	603b      	str	r3, [r7, #0]
 8010058:	4613      	mov	r3, r2
 801005a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801005c:	e04c      	b.n	80100f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010064:	d048      	beq.n	80100f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010066:	f7fb fec1 	bl	800bdec <HAL_GetTick>
 801006a:	4602      	mov	r2, r0
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	683a      	ldr	r2, [r7, #0]
 8010072:	429a      	cmp	r2, r3
 8010074:	d902      	bls.n	801007c <SPI_WaitFlagStateUntilTimeout+0x30>
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d13d      	bne.n	80100f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	685a      	ldr	r2, [r3, #4]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801008a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010094:	d111      	bne.n	80100ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801009e:	d004      	beq.n	80100aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100a8:	d107      	bne.n	80100ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100c2:	d10f      	bne.n	80100e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80100d2:	601a      	str	r2, [r3, #0]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80100e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2200      	movs	r2, #0
 80100f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80100f4:	2303      	movs	r3, #3
 80100f6:	e00f      	b.n	8010118 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	689a      	ldr	r2, [r3, #8]
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	4013      	ands	r3, r2
 8010102:	68ba      	ldr	r2, [r7, #8]
 8010104:	429a      	cmp	r2, r3
 8010106:	bf0c      	ite	eq
 8010108:	2301      	moveq	r3, #1
 801010a:	2300      	movne	r3, #0
 801010c:	b2db      	uxtb	r3, r3
 801010e:	461a      	mov	r2, r3
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	429a      	cmp	r2, r3
 8010114:	d1a3      	bne.n	801005e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b088      	sub	sp, #32
 8010124:	af02      	add	r7, sp, #8
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801012c:	4b1b      	ldr	r3, [pc, #108]	; (801019c <SPI_EndRxTxTransaction+0x7c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a1b      	ldr	r2, [pc, #108]	; (80101a0 <SPI_EndRxTxTransaction+0x80>)
 8010132:	fba2 2303 	umull	r2, r3, r2, r3
 8010136:	0d5b      	lsrs	r3, r3, #21
 8010138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801013c:	fb02 f303 	mul.w	r3, r2, r3
 8010140:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801014a:	d112      	bne.n	8010172 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	2200      	movs	r2, #0
 8010154:	2180      	movs	r1, #128	; 0x80
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f7ff ff78 	bl	801004c <SPI_WaitFlagStateUntilTimeout>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d016      	beq.n	8010190 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010166:	f043 0220 	orr.w	r2, r3, #32
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801016e:	2303      	movs	r3, #3
 8010170:	e00f      	b.n	8010192 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00a      	beq.n	801018e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	3b01      	subs	r3, #1
 801017c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010188:	2b80      	cmp	r3, #128	; 0x80
 801018a:	d0f2      	beq.n	8010172 <SPI_EndRxTxTransaction+0x52>
 801018c:	e000      	b.n	8010190 <SPI_EndRxTxTransaction+0x70>
        break;
 801018e:	bf00      	nop
  }

  return HAL_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3718      	adds	r7, #24
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	20000000 	.word	0x20000000
 80101a0:	165e9f81 	.word	0x165e9f81

080101a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	e01d      	b.n	80101f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d106      	bne.n	80101d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7f5 fd64 	bl	8005c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2202      	movs	r2, #2
 80101d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3304      	adds	r3, #4
 80101e0:	4619      	mov	r1, r3
 80101e2:	4610      	mov	r0, r2
 80101e4:	f000 fb36 	bl	8010854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2201      	movs	r2, #1
 80101ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80101f0:	2300      	movs	r3, #0
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b082      	sub	sp, #8
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d101      	bne.n	801020c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	e01d      	b.n	8010248 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010212:	b2db      	uxtb	r3, r3
 8010214:	2b00      	cmp	r3, #0
 8010216:	d106      	bne.n	8010226 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f815 	bl	8010250 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2202      	movs	r2, #2
 801022a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3304      	adds	r3, #4
 8010236:	4619      	mov	r1, r3
 8010238:	4610      	mov	r0, r2
 801023a:	f000 fb0b 	bl	8010854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2201      	movs	r2, #1
 8010242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010258:	bf00      	nop
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	2b0c      	cmp	r3, #12
 8010272:	d841      	bhi.n	80102f8 <HAL_TIM_IC_Start_IT+0x94>
 8010274:	a201      	add	r2, pc, #4	; (adr r2, 801027c <HAL_TIM_IC_Start_IT+0x18>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	080102b1 	.word	0x080102b1
 8010280:	080102f9 	.word	0x080102f9
 8010284:	080102f9 	.word	0x080102f9
 8010288:	080102f9 	.word	0x080102f9
 801028c:	080102c3 	.word	0x080102c3
 8010290:	080102f9 	.word	0x080102f9
 8010294:	080102f9 	.word	0x080102f9
 8010298:	080102f9 	.word	0x080102f9
 801029c:	080102d5 	.word	0x080102d5
 80102a0:	080102f9 	.word	0x080102f9
 80102a4:	080102f9 	.word	0x080102f9
 80102a8:	080102f9 	.word	0x080102f9
 80102ac:	080102e7 	.word	0x080102e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	68da      	ldr	r2, [r3, #12]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f042 0202 	orr.w	r2, r2, #2
 80102be:	60da      	str	r2, [r3, #12]
      break;
 80102c0:	e01b      	b.n	80102fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	68da      	ldr	r2, [r3, #12]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f042 0204 	orr.w	r2, r2, #4
 80102d0:	60da      	str	r2, [r3, #12]
      break;
 80102d2:	e012      	b.n	80102fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68da      	ldr	r2, [r3, #12]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f042 0208 	orr.w	r2, r2, #8
 80102e2:	60da      	str	r2, [r3, #12]
      break;
 80102e4:	e009      	b.n	80102fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	68da      	ldr	r2, [r3, #12]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f042 0210 	orr.w	r2, r2, #16
 80102f4:	60da      	str	r2, [r3, #12]
      break;
 80102f6:	e000      	b.n	80102fa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80102f8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2201      	movs	r2, #1
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fcde 	bl	8010cc4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	f003 0307 	and.w	r3, r3, #7
 8010312:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b06      	cmp	r3, #6
 8010318:	d007      	beq.n	801032a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f042 0201 	orr.w	r2, r2, #1
 8010328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	f003 0302 	and.w	r3, r3, #2
 8010346:	2b02      	cmp	r3, #2
 8010348:	d122      	bne.n	8010390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	f003 0302 	and.w	r3, r3, #2
 8010354:	2b02      	cmp	r3, #2
 8010356:	d11b      	bne.n	8010390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f06f 0202 	mvn.w	r2, #2
 8010360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2201      	movs	r2, #1
 8010366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	699b      	ldr	r3, [r3, #24]
 801036e:	f003 0303 	and.w	r3, r3, #3
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7f5 fcde 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 801037c:	e005      	b.n	801038a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 fa4a 	bl	8010818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 fa51 	bl	801082c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	691b      	ldr	r3, [r3, #16]
 8010396:	f003 0304 	and.w	r3, r3, #4
 801039a:	2b04      	cmp	r3, #4
 801039c:	d122      	bne.n	80103e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	f003 0304 	and.w	r3, r3, #4
 80103a8:	2b04      	cmp	r3, #4
 80103aa:	d11b      	bne.n	80103e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f06f 0204 	mvn.w	r2, #4
 80103b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2202      	movs	r2, #2
 80103ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	699b      	ldr	r3, [r3, #24]
 80103c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d003      	beq.n	80103d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f7f5 fcb4 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 80103d0:	e005      	b.n	80103de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 fa20 	bl	8010818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 fa27 	bl	801082c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	f003 0308 	and.w	r3, r3, #8
 80103ee:	2b08      	cmp	r3, #8
 80103f0:	d122      	bne.n	8010438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	f003 0308 	and.w	r3, r3, #8
 80103fc:	2b08      	cmp	r3, #8
 80103fe:	d11b      	bne.n	8010438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f06f 0208 	mvn.w	r2, #8
 8010408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2204      	movs	r2, #4
 801040e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	69db      	ldr	r3, [r3, #28]
 8010416:	f003 0303 	and.w	r3, r3, #3
 801041a:	2b00      	cmp	r3, #0
 801041c:	d003      	beq.n	8010426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7f5 fc8a 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8010424:	e005      	b.n	8010432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f9f6 	bl	8010818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 f9fd 	bl	801082c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2200      	movs	r2, #0
 8010436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	f003 0310 	and.w	r3, r3, #16
 8010442:	2b10      	cmp	r3, #16
 8010444:	d122      	bne.n	801048c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	f003 0310 	and.w	r3, r3, #16
 8010450:	2b10      	cmp	r3, #16
 8010452:	d11b      	bne.n	801048c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f06f 0210 	mvn.w	r2, #16
 801045c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2208      	movs	r2, #8
 8010462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	69db      	ldr	r3, [r3, #28]
 801046a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801046e:	2b00      	cmp	r3, #0
 8010470:	d003      	beq.n	801047a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7f5 fc60 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8010478:	e005      	b.n	8010486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f9cc 	bl	8010818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 f9d3 	bl	801082c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	f003 0301 	and.w	r3, r3, #1
 8010496:	2b01      	cmp	r3, #1
 8010498:	d10e      	bne.n	80104b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d107      	bne.n	80104b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f06f 0201 	mvn.w	r2, #1
 80104b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 f9a6 	bl	8010804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	691b      	ldr	r3, [r3, #16]
 80104be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104c2:	2b80      	cmp	r3, #128	; 0x80
 80104c4:	d10e      	bne.n	80104e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104d0:	2b80      	cmp	r3, #128	; 0x80
 80104d2:	d107      	bne.n	80104e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80104dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 fc8e 	bl	8010e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104ee:	2b40      	cmp	r3, #64	; 0x40
 80104f0:	d10e      	bne.n	8010510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104fc:	2b40      	cmp	r3, #64	; 0x40
 80104fe:	d107      	bne.n	8010510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 f998 	bl	8010840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	691b      	ldr	r3, [r3, #16]
 8010516:	f003 0320 	and.w	r3, r3, #32
 801051a:	2b20      	cmp	r3, #32
 801051c:	d10e      	bne.n	801053c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	f003 0320 	and.w	r3, r3, #32
 8010528:	2b20      	cmp	r3, #32
 801052a:	d107      	bne.n	801053c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f06f 0220 	mvn.w	r2, #32
 8010534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fc58 	bl	8010dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010556:	2b01      	cmp	r3, #1
 8010558:	d101      	bne.n	801055e <HAL_TIM_IC_ConfigChannel+0x1a>
 801055a:	2302      	movs	r3, #2
 801055c:	e08a      	b.n	8010674 <HAL_TIM_IC_ConfigChannel+0x130>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2202      	movs	r2, #2
 801056a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d11b      	bne.n	80105ac <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6818      	ldr	r0, [r3, #0]
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	6819      	ldr	r1, [r3, #0]
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	685a      	ldr	r2, [r3, #4]
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	f000 f9e6 	bl	8010954 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	699a      	ldr	r2, [r3, #24]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f022 020c 	bic.w	r2, r2, #12
 8010596:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6999      	ldr	r1, [r3, #24]
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	689a      	ldr	r2, [r3, #8]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	430a      	orrs	r2, r1
 80105a8:	619a      	str	r2, [r3, #24]
 80105aa:	e05a      	b.n	8010662 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b04      	cmp	r3, #4
 80105b0:	d11c      	bne.n	80105ec <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6818      	ldr	r0, [r3, #0]
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	6819      	ldr	r1, [r3, #0]
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	f000 fa5e 	bl	8010a82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	699a      	ldr	r2, [r3, #24]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80105d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	6999      	ldr	r1, [r3, #24]
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	021a      	lsls	r2, r3, #8
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	430a      	orrs	r2, r1
 80105e8:	619a      	str	r2, [r3, #24]
 80105ea:	e03a      	b.n	8010662 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b08      	cmp	r3, #8
 80105f0:	d11b      	bne.n	801062a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6818      	ldr	r0, [r3, #0]
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	6819      	ldr	r1, [r3, #0]
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	685a      	ldr	r2, [r3, #4]
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	f000 faab 	bl	8010b5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	69da      	ldr	r2, [r3, #28]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f022 020c 	bic.w	r2, r2, #12
 8010614:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	69d9      	ldr	r1, [r3, #28]
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	689a      	ldr	r2, [r3, #8]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	430a      	orrs	r2, r1
 8010626:	61da      	str	r2, [r3, #28]
 8010628:	e01b      	b.n	8010662 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6818      	ldr	r0, [r3, #0]
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	6819      	ldr	r1, [r3, #0]
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	f000 facb 	bl	8010bd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	69da      	ldr	r2, [r3, #28]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801064c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	69d9      	ldr	r1, [r3, #28]
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	021a      	lsls	r2, r3, #8
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	430a      	orrs	r2, r1
 8010660:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2201      	movs	r2, #1
 8010666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	4618      	mov	r0, r3
 8010676:	3710      	adds	r7, #16
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801068c:	2b01      	cmp	r3, #1
 801068e:	d101      	bne.n	8010694 <HAL_TIM_ConfigClockSource+0x18>
 8010690:	2302      	movs	r3, #2
 8010692:	e0b3      	b.n	80107fc <HAL_TIM_ConfigClockSource+0x180>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2201      	movs	r2, #1
 8010698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2202      	movs	r2, #2
 80106a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	689b      	ldr	r3, [r3, #8]
 80106aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80106b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80106ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106cc:	d03e      	beq.n	801074c <HAL_TIM_ConfigClockSource+0xd0>
 80106ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106d2:	f200 8087 	bhi.w	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 80106d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106da:	f000 8085 	beq.w	80107e8 <HAL_TIM_ConfigClockSource+0x16c>
 80106de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106e2:	d87f      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 80106e4:	2b70      	cmp	r3, #112	; 0x70
 80106e6:	d01a      	beq.n	801071e <HAL_TIM_ConfigClockSource+0xa2>
 80106e8:	2b70      	cmp	r3, #112	; 0x70
 80106ea:	d87b      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 80106ec:	2b60      	cmp	r3, #96	; 0x60
 80106ee:	d050      	beq.n	8010792 <HAL_TIM_ConfigClockSource+0x116>
 80106f0:	2b60      	cmp	r3, #96	; 0x60
 80106f2:	d877      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 80106f4:	2b50      	cmp	r3, #80	; 0x50
 80106f6:	d03c      	beq.n	8010772 <HAL_TIM_ConfigClockSource+0xf6>
 80106f8:	2b50      	cmp	r3, #80	; 0x50
 80106fa:	d873      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 80106fc:	2b40      	cmp	r3, #64	; 0x40
 80106fe:	d058      	beq.n	80107b2 <HAL_TIM_ConfigClockSource+0x136>
 8010700:	2b40      	cmp	r3, #64	; 0x40
 8010702:	d86f      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 8010704:	2b30      	cmp	r3, #48	; 0x30
 8010706:	d064      	beq.n	80107d2 <HAL_TIM_ConfigClockSource+0x156>
 8010708:	2b30      	cmp	r3, #48	; 0x30
 801070a:	d86b      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 801070c:	2b20      	cmp	r3, #32
 801070e:	d060      	beq.n	80107d2 <HAL_TIM_ConfigClockSource+0x156>
 8010710:	2b20      	cmp	r3, #32
 8010712:	d867      	bhi.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
 8010714:	2b00      	cmp	r3, #0
 8010716:	d05c      	beq.n	80107d2 <HAL_TIM_ConfigClockSource+0x156>
 8010718:	2b10      	cmp	r3, #16
 801071a:	d05a      	beq.n	80107d2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801071c:	e062      	b.n	80107e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6818      	ldr	r0, [r3, #0]
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	6899      	ldr	r1, [r3, #8]
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	685a      	ldr	r2, [r3, #4]
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	f000 faa9 	bl	8010c84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010740:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	609a      	str	r2, [r3, #8]
      break;
 801074a:	e04e      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	6899      	ldr	r1, [r3, #8]
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	685a      	ldr	r2, [r3, #4]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	f000 fa92 	bl	8010c84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	689a      	ldr	r2, [r3, #8]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801076e:	609a      	str	r2, [r3, #8]
      break;
 8010770:	e03b      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6818      	ldr	r0, [r3, #0]
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	6859      	ldr	r1, [r3, #4]
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	461a      	mov	r2, r3
 8010780:	f000 f950 	bl	8010a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2150      	movs	r1, #80	; 0x50
 801078a:	4618      	mov	r0, r3
 801078c:	f000 fa5f 	bl	8010c4e <TIM_ITRx_SetConfig>
      break;
 8010790:	e02b      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6818      	ldr	r0, [r3, #0]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	6859      	ldr	r1, [r3, #4]
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	461a      	mov	r2, r3
 80107a0:	f000 f9ac 	bl	8010afc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2160      	movs	r1, #96	; 0x60
 80107aa:	4618      	mov	r0, r3
 80107ac:	f000 fa4f 	bl	8010c4e <TIM_ITRx_SetConfig>
      break;
 80107b0:	e01b      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	6859      	ldr	r1, [r3, #4]
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	461a      	mov	r2, r3
 80107c0:	f000 f930 	bl	8010a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2140      	movs	r1, #64	; 0x40
 80107ca:	4618      	mov	r0, r3
 80107cc:	f000 fa3f 	bl	8010c4e <TIM_ITRx_SetConfig>
      break;
 80107d0:	e00b      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4619      	mov	r1, r3
 80107dc:	4610      	mov	r0, r2
 80107de:	f000 fa36 	bl	8010c4e <TIM_ITRx_SetConfig>
      break;
 80107e2:	e002      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80107e4:	bf00      	nop
 80107e6:	e000      	b.n	80107ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80107e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80107fa:	2300      	movs	r3, #0
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3710      	adds	r7, #16
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801080c:	bf00      	nop
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr

0801082c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010834:	bf00      	nop
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010848:	bf00      	nop
 801084a:	370c      	adds	r7, #12
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr

08010854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a34      	ldr	r2, [pc, #208]	; (8010938 <TIM_Base_SetConfig+0xe4>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d00f      	beq.n	801088c <TIM_Base_SetConfig+0x38>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010872:	d00b      	beq.n	801088c <TIM_Base_SetConfig+0x38>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4a31      	ldr	r2, [pc, #196]	; (801093c <TIM_Base_SetConfig+0xe8>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d007      	beq.n	801088c <TIM_Base_SetConfig+0x38>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4a30      	ldr	r2, [pc, #192]	; (8010940 <TIM_Base_SetConfig+0xec>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d003      	beq.n	801088c <TIM_Base_SetConfig+0x38>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	4a2f      	ldr	r2, [pc, #188]	; (8010944 <TIM_Base_SetConfig+0xf0>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d108      	bne.n	801089e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	68fa      	ldr	r2, [r7, #12]
 801089a:	4313      	orrs	r3, r2
 801089c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4a25      	ldr	r2, [pc, #148]	; (8010938 <TIM_Base_SetConfig+0xe4>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d01b      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108ac:	d017      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	4a22      	ldr	r2, [pc, #136]	; (801093c <TIM_Base_SetConfig+0xe8>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d013      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4a21      	ldr	r2, [pc, #132]	; (8010940 <TIM_Base_SetConfig+0xec>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d00f      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4a20      	ldr	r2, [pc, #128]	; (8010944 <TIM_Base_SetConfig+0xf0>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d00b      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	4a1f      	ldr	r2, [pc, #124]	; (8010948 <TIM_Base_SetConfig+0xf4>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d007      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4a1e      	ldr	r2, [pc, #120]	; (801094c <TIM_Base_SetConfig+0xf8>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d003      	beq.n	80108de <TIM_Base_SetConfig+0x8a>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	4a1d      	ldr	r2, [pc, #116]	; (8010950 <TIM_Base_SetConfig+0xfc>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d108      	bne.n	80108f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	4313      	orrs	r3, r2
 80108ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	695b      	ldr	r3, [r3, #20]
 80108fa:	4313      	orrs	r3, r2
 80108fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	689a      	ldr	r2, [r3, #8]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	4a08      	ldr	r2, [pc, #32]	; (8010938 <TIM_Base_SetConfig+0xe4>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d103      	bne.n	8010924 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	691a      	ldr	r2, [r3, #16]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2201      	movs	r2, #1
 8010928:	615a      	str	r2, [r3, #20]
}
 801092a:	bf00      	nop
 801092c:	3714      	adds	r7, #20
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	40010000 	.word	0x40010000
 801093c:	40000400 	.word	0x40000400
 8010940:	40000800 	.word	0x40000800
 8010944:	40000c00 	.word	0x40000c00
 8010948:	40014000 	.word	0x40014000
 801094c:	40014400 	.word	0x40014400
 8010950:	40014800 	.word	0x40014800

08010954 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010954:	b480      	push	{r7}
 8010956:	b087      	sub	sp, #28
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
 8010960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	f023 0201 	bic.w	r2, r3, #1
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	699b      	ldr	r3, [r3, #24]
 8010972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6a1b      	ldr	r3, [r3, #32]
 8010978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	4a24      	ldr	r2, [pc, #144]	; (8010a10 <TIM_TI1_SetConfig+0xbc>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d013      	beq.n	80109aa <TIM_TI1_SetConfig+0x56>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010988:	d00f      	beq.n	80109aa <TIM_TI1_SetConfig+0x56>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	4a21      	ldr	r2, [pc, #132]	; (8010a14 <TIM_TI1_SetConfig+0xc0>)
 801098e:	4293      	cmp	r3, r2
 8010990:	d00b      	beq.n	80109aa <TIM_TI1_SetConfig+0x56>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	4a20      	ldr	r2, [pc, #128]	; (8010a18 <TIM_TI1_SetConfig+0xc4>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d007      	beq.n	80109aa <TIM_TI1_SetConfig+0x56>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	4a1f      	ldr	r2, [pc, #124]	; (8010a1c <TIM_TI1_SetConfig+0xc8>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d003      	beq.n	80109aa <TIM_TI1_SetConfig+0x56>
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	4a1e      	ldr	r2, [pc, #120]	; (8010a20 <TIM_TI1_SetConfig+0xcc>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d101      	bne.n	80109ae <TIM_TI1_SetConfig+0x5a>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e000      	b.n	80109b0 <TIM_TI1_SetConfig+0x5c>
 80109ae:	2300      	movs	r3, #0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d008      	beq.n	80109c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	f023 0303 	bic.w	r3, r3, #3
 80109ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	e003      	b.n	80109ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	f043 0301 	orr.w	r3, r3, #1
 80109cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80109d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	011b      	lsls	r3, r3, #4
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	697a      	ldr	r2, [r7, #20]
 80109de:	4313      	orrs	r3, r2
 80109e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	f023 030a 	bic.w	r3, r3, #10
 80109e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	f003 030a 	and.w	r3, r3, #10
 80109f0:	693a      	ldr	r2, [r7, #16]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	697a      	ldr	r2, [r7, #20]
 80109fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	621a      	str	r2, [r3, #32]
}
 8010a02:	bf00      	nop
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	40010000 	.word	0x40010000
 8010a14:	40000400 	.word	0x40000400
 8010a18:	40000800 	.word	0x40000800
 8010a1c:	40000c00 	.word	0x40000c00
 8010a20:	40014000 	.word	0x40014000

08010a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b087      	sub	sp, #28
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6a1b      	ldr	r3, [r3, #32]
 8010a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	6a1b      	ldr	r3, [r3, #32]
 8010a3a:	f023 0201 	bic.w	r2, r3, #1
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	011b      	lsls	r3, r3, #4
 8010a54:	693a      	ldr	r2, [r7, #16]
 8010a56:	4313      	orrs	r3, r2
 8010a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	f023 030a 	bic.w	r3, r3, #10
 8010a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010a62:	697a      	ldr	r2, [r7, #20]
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	4313      	orrs	r3, r2
 8010a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	693a      	ldr	r2, [r7, #16]
 8010a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	621a      	str	r2, [r3, #32]
}
 8010a76:	bf00      	nop
 8010a78:	371c      	adds	r7, #28
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010a82:	b480      	push	{r7}
 8010a84:	b087      	sub	sp, #28
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	60f8      	str	r0, [r7, #12]
 8010a8a:	60b9      	str	r1, [r7, #8]
 8010a8c:	607a      	str	r2, [r7, #4]
 8010a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6a1b      	ldr	r3, [r3, #32]
 8010a94:	f023 0210 	bic.w	r2, r3, #16
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	699b      	ldr	r3, [r3, #24]
 8010aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	021b      	lsls	r3, r3, #8
 8010ab4:	697a      	ldr	r2, [r7, #20]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	031b      	lsls	r3, r3, #12
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	4313      	orrs	r3, r2
 8010acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010ade:	693a      	ldr	r2, [r7, #16]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	693a      	ldr	r2, [r7, #16]
 8010aee:	621a      	str	r2, [r3, #32]
}
 8010af0:	bf00      	nop
 8010af2:	371c      	adds	r7, #28
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b087      	sub	sp, #28
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6a1b      	ldr	r3, [r3, #32]
 8010b0c:	f023 0210 	bic.w	r2, r3, #16
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6a1b      	ldr	r3, [r3, #32]
 8010b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010b26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	031b      	lsls	r3, r3, #12
 8010b2c:	697a      	ldr	r2, [r7, #20]
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010b38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	011b      	lsls	r3, r3, #4
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	4313      	orrs	r3, r2
 8010b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	693a      	ldr	r2, [r7, #16]
 8010b4e:	621a      	str	r2, [r3, #32]
}
 8010b50:	bf00      	nop
 8010b52:	371c      	adds	r7, #28
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b087      	sub	sp, #28
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6a1b      	ldr	r3, [r3, #32]
 8010b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	69db      	ldr	r3, [r3, #28]
 8010b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6a1b      	ldr	r3, [r3, #32]
 8010b80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	f023 0303 	bic.w	r3, r3, #3
 8010b88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8010b8a:	697a      	ldr	r2, [r7, #20]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	4313      	orrs	r3, r2
 8010b90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	011b      	lsls	r3, r3, #4
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	697a      	ldr	r2, [r7, #20]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010bac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	021b      	lsls	r3, r3, #8
 8010bb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8010bb6:	693a      	ldr	r2, [r7, #16]
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	621a      	str	r2, [r3, #32]
}
 8010bc8:	bf00      	nop
 8010bca:	371c      	adds	r7, #28
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr

08010bd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6a1b      	ldr	r3, [r3, #32]
 8010be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	69db      	ldr	r3, [r3, #28]
 8010bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6a1b      	ldr	r3, [r3, #32]
 8010bf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	021b      	lsls	r3, r3, #8
 8010c06:	697a      	ldr	r2, [r7, #20]
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010c12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	031b      	lsls	r3, r3, #12
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	697a      	ldr	r2, [r7, #20]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8010c26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	031b      	lsls	r3, r3, #12
 8010c2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010c30:	693a      	ldr	r2, [r7, #16]
 8010c32:	4313      	orrs	r3, r2
 8010c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	697a      	ldr	r2, [r7, #20]
 8010c3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	693a      	ldr	r2, [r7, #16]
 8010c40:	621a      	str	r2, [r3, #32]
}
 8010c42:	bf00      	nop
 8010c44:	371c      	adds	r7, #28
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010c4e:	b480      	push	{r7}
 8010c50:	b085      	sub	sp, #20
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	689b      	ldr	r3, [r3, #8]
 8010c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c66:	683a      	ldr	r2, [r7, #0]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	f043 0307 	orr.w	r3, r3, #7
 8010c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	609a      	str	r2, [r3, #8]
}
 8010c78:	bf00      	nop
 8010c7a:	3714      	adds	r7, #20
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b087      	sub	sp, #28
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	689b      	ldr	r3, [r3, #8]
 8010c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	021a      	lsls	r2, r3, #8
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	431a      	orrs	r2, r3
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	4313      	orrs	r3, r2
 8010cac:	697a      	ldr	r2, [r7, #20]
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	697a      	ldr	r2, [r7, #20]
 8010cb6:	609a      	str	r2, [r3, #8]
}
 8010cb8:	bf00      	nop
 8010cba:	371c      	adds	r7, #28
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b087      	sub	sp, #28
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	60b9      	str	r1, [r7, #8]
 8010cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	f003 031f 	and.w	r3, r3, #31
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	6a1a      	ldr	r2, [r3, #32]
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	43db      	mvns	r3, r3
 8010ce6:	401a      	ands	r2, r3
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	6a1a      	ldr	r2, [r3, #32]
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	f003 031f 	and.w	r3, r3, #31
 8010cf6:	6879      	ldr	r1, [r7, #4]
 8010cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8010cfc:	431a      	orrs	r2, r3
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	621a      	str	r2, [r3, #32]
}
 8010d02:	bf00      	nop
 8010d04:	371c      	adds	r7, #28
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
	...

08010d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b085      	sub	sp, #20
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d101      	bne.n	8010d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d24:	2302      	movs	r3, #2
 8010d26:	e050      	b.n	8010dca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2202      	movs	r2, #2
 8010d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	689b      	ldr	r3, [r3, #8]
 8010d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	68fa      	ldr	r2, [r7, #12]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a1c      	ldr	r2, [pc, #112]	; (8010dd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d018      	beq.n	8010d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d74:	d013      	beq.n	8010d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a18      	ldr	r2, [pc, #96]	; (8010ddc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d00e      	beq.n	8010d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4a16      	ldr	r2, [pc, #88]	; (8010de0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d009      	beq.n	8010d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	4a15      	ldr	r2, [pc, #84]	; (8010de4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d004      	beq.n	8010d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a13      	ldr	r2, [pc, #76]	; (8010de8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d10c      	bne.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	68ba      	ldr	r2, [r7, #8]
 8010db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	40010000 	.word	0x40010000
 8010ddc:	40000400 	.word	0x40000400
 8010de0:	40000800 	.word	0x40000800
 8010de4:	40000c00 	.word	0x40000c00
 8010de8:	40014000 	.word	0x40014000

08010dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010df4:	bf00      	nop
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d101      	bne.n	8010e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e22:	2301      	movs	r3, #1
 8010e24:	e03f      	b.n	8010ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d106      	bne.n	8010e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7f5 ff0c 	bl	8006c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2224      	movs	r2, #36	; 0x24
 8010e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	68da      	ldr	r2, [r3, #12]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fc8f 	bl	801177c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	691a      	ldr	r2, [r3, #16]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	695a      	ldr	r2, [r3, #20]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68da      	ldr	r2, [r3, #12]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2200      	movs	r2, #0
 8010e92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2220      	movs	r2, #32
 8010e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2220      	movs	r2, #32
 8010ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b082      	sub	sp, #8
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d101      	bne.n	8010ec0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	e01e      	b.n	8010efe <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2224      	movs	r2, #36	; 0x24
 8010ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	68da      	ldr	r2, [r3, #12]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010ed6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7f5 ff93 	bl	8006e04 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8010efc:	2300      	movs	r3, #0
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b088      	sub	sp, #32
 8010f0a:	af02      	add	r7, sp, #8
 8010f0c:	60f8      	str	r0, [r7, #12]
 8010f0e:	60b9      	str	r1, [r7, #8]
 8010f10:	603b      	str	r3, [r7, #0]
 8010f12:	4613      	mov	r3, r2
 8010f14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010f16:	2300      	movs	r3, #0
 8010f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	2b20      	cmp	r3, #32
 8010f24:	f040 8083 	bne.w	801102e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d002      	beq.n	8010f34 <HAL_UART_Transmit+0x2e>
 8010f2e:	88fb      	ldrh	r3, [r7, #6]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d101      	bne.n	8010f38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010f34:	2301      	movs	r3, #1
 8010f36:	e07b      	b.n	8011030 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	d101      	bne.n	8010f46 <HAL_UART_Transmit+0x40>
 8010f42:	2302      	movs	r3, #2
 8010f44:	e074      	b.n	8011030 <HAL_UART_Transmit+0x12a>
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2200      	movs	r2, #0
 8010f52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2221      	movs	r2, #33	; 0x21
 8010f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010f5c:	f7fa ff46 	bl	800bdec <HAL_GetTick>
 8010f60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	88fa      	ldrh	r2, [r7, #6]
 8010f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	88fa      	ldrh	r2, [r7, #6]
 8010f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010f76:	e042      	b.n	8010ffe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	689b      	ldr	r3, [r3, #8]
 8010f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f8e:	d122      	bne.n	8010fd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2200      	movs	r2, #0
 8010f98:	2180      	movs	r1, #128	; 0x80
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f000 fa6c 	bl	8011478 <UART_WaitOnFlagUntilTimeout>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d001      	beq.n	8010faa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	e042      	b.n	8011030 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	691b      	ldr	r3, [r3, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d103      	bne.n	8010fce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	3302      	adds	r3, #2
 8010fca:	60bb      	str	r3, [r7, #8]
 8010fcc:	e017      	b.n	8010ffe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	60bb      	str	r3, [r7, #8]
 8010fd4:	e013      	b.n	8010ffe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2180      	movs	r1, #128	; 0x80
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f000 fa49 	bl	8011478 <UART_WaitOnFlagUntilTimeout>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010fec:	2303      	movs	r3, #3
 8010fee:	e01f      	b.n	8011030 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	1c5a      	adds	r2, r3, #1
 8010ff4:	60ba      	str	r2, [r7, #8]
 8010ff6:	781a      	ldrb	r2, [r3, #0]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011002:	b29b      	uxth	r3, r3
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1b7      	bne.n	8010f78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	2200      	movs	r2, #0
 8011010:	2140      	movs	r1, #64	; 0x40
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f000 fa30 	bl	8011478 <UART_WaitOnFlagUntilTimeout>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d001      	beq.n	8011022 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801101e:	2303      	movs	r3, #3
 8011020:	e006      	b.n	8011030 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2220      	movs	r2, #32
 8011026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801102a:	2300      	movs	r3, #0
 801102c:	e000      	b.n	8011030 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801102e:	2302      	movs	r3, #2
  }
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	4613      	mov	r3, r2
 8011044:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801104c:	b2db      	uxtb	r3, r3
 801104e:	2b20      	cmp	r3, #32
 8011050:	d166      	bne.n	8011120 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <HAL_UART_Receive_DMA+0x26>
 8011058:	88fb      	ldrh	r3, [r7, #6]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801105e:	2301      	movs	r3, #1
 8011060:	e05f      	b.n	8011122 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011068:	2b01      	cmp	r3, #1
 801106a:	d101      	bne.n	8011070 <HAL_UART_Receive_DMA+0x38>
 801106c:	2302      	movs	r3, #2
 801106e:	e058      	b.n	8011122 <HAL_UART_Receive_DMA+0xea>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2201      	movs	r2, #1
 8011074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8011078:	68ba      	ldr	r2, [r7, #8]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	88fa      	ldrh	r2, [r7, #6]
 8011082:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2200      	movs	r2, #0
 8011088:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2222      	movs	r2, #34	; 0x22
 801108e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011096:	4a25      	ldr	r2, [pc, #148]	; (801112c <HAL_UART_Receive_DMA+0xf4>)
 8011098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801109e:	4a24      	ldr	r2, [pc, #144]	; (8011130 <HAL_UART_Receive_DMA+0xf8>)
 80110a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110a6:	4a23      	ldr	r2, [pc, #140]	; (8011134 <HAL_UART_Receive_DMA+0xfc>)
 80110a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ae:	2200      	movs	r2, #0
 80110b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80110b2:	f107 0308 	add.w	r3, r7, #8
 80110b6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	3304      	adds	r3, #4
 80110c2:	4619      	mov	r1, r3
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	88fb      	ldrh	r3, [r7, #6]
 80110ca:	f7fb fe49 	bl	800cd60 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80110ce:	2300      	movs	r3, #0
 80110d0:	613b      	str	r3, [r7, #16]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	613b      	str	r3, [r7, #16]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	613b      	str	r3, [r7, #16]
 80110e2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2200      	movs	r2, #0
 80110e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80110fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	695a      	ldr	r2, [r3, #20]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f042 0201 	orr.w	r2, r2, #1
 801110a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	695a      	ldr	r2, [r3, #20]
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801111a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	e000      	b.n	8011122 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8011120:	2302      	movs	r3, #2
  }
}
 8011122:	4618      	mov	r0, r3
 8011124:	3718      	adds	r7, #24
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	08011361 	.word	0x08011361
 8011130:	080113c9 	.word	0x080113c9
 8011134:	080113e5 	.word	0x080113e5

08011138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b088      	sub	sp, #32
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	695b      	ldr	r3, [r3, #20]
 8011156:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8011158:	2300      	movs	r3, #0
 801115a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801115c:	2300      	movs	r3, #0
 801115e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	f003 030f 	and.w	r3, r3, #15
 8011166:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10d      	bne.n	801118a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	f003 0320 	and.w	r3, r3, #32
 8011174:	2b00      	cmp	r3, #0
 8011176:	d008      	beq.n	801118a <HAL_UART_IRQHandler+0x52>
 8011178:	69bb      	ldr	r3, [r7, #24]
 801117a:	f003 0320 	and.w	r3, r3, #32
 801117e:	2b00      	cmp	r3, #0
 8011180:	d003      	beq.n	801118a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 fa78 	bl	8011678 <UART_Receive_IT>
      return;
 8011188:	e0d0      	b.n	801132c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 80b0 	beq.w	80112f2 <HAL_UART_IRQHandler+0x1ba>
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	f003 0301 	and.w	r3, r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	d105      	bne.n	80111a8 <HAL_UART_IRQHandler+0x70>
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 80a5 	beq.w	80112f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	f003 0301 	and.w	r3, r3, #1
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00a      	beq.n	80111c8 <HAL_UART_IRQHandler+0x90>
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d005      	beq.n	80111c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111c0:	f043 0201 	orr.w	r2, r3, #1
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	f003 0304 	and.w	r3, r3, #4
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00a      	beq.n	80111e8 <HAL_UART_IRQHandler+0xb0>
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	f003 0301 	and.w	r3, r3, #1
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d005      	beq.n	80111e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111e0:	f043 0202 	orr.w	r2, r3, #2
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	f003 0302 	and.w	r3, r3, #2
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00a      	beq.n	8011208 <HAL_UART_IRQHandler+0xd0>
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d005      	beq.n	8011208 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011200:	f043 0204 	orr.w	r2, r3, #4
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	f003 0308 	and.w	r3, r3, #8
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00f      	beq.n	8011232 <HAL_UART_IRQHandler+0xfa>
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	f003 0320 	and.w	r3, r3, #32
 8011218:	2b00      	cmp	r3, #0
 801121a:	d104      	bne.n	8011226 <HAL_UART_IRQHandler+0xee>
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b00      	cmp	r3, #0
 8011224:	d005      	beq.n	8011232 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801122a:	f043 0208 	orr.w	r2, r3, #8
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011236:	2b00      	cmp	r3, #0
 8011238:	d077      	beq.n	801132a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	f003 0320 	and.w	r3, r3, #32
 8011240:	2b00      	cmp	r3, #0
 8011242:	d007      	beq.n	8011254 <HAL_UART_IRQHandler+0x11c>
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	f003 0320 	and.w	r3, r3, #32
 801124a:	2b00      	cmp	r3, #0
 801124c:	d002      	beq.n	8011254 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fa12 	bl	8011678 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	695b      	ldr	r3, [r3, #20]
 801125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801125e:	2b40      	cmp	r3, #64	; 0x40
 8011260:	bf0c      	ite	eq
 8011262:	2301      	moveq	r3, #1
 8011264:	2300      	movne	r3, #0
 8011266:	b2db      	uxtb	r3, r3
 8011268:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801126e:	f003 0308 	and.w	r3, r3, #8
 8011272:	2b00      	cmp	r3, #0
 8011274:	d102      	bne.n	801127c <HAL_UART_IRQHandler+0x144>
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d031      	beq.n	80112e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 f95b 	bl	8011538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	695b      	ldr	r3, [r3, #20]
 8011288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801128c:	2b40      	cmp	r3, #64	; 0x40
 801128e:	d123      	bne.n	80112d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	695a      	ldr	r2, [r3, #20]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801129e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d013      	beq.n	80112d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112ac:	4a21      	ldr	r2, [pc, #132]	; (8011334 <HAL_UART_IRQHandler+0x1fc>)
 80112ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fb fdab 	bl	800ce10 <HAL_DMA_Abort_IT>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d016      	beq.n	80112ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80112ca:	4610      	mov	r0, r2
 80112cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112ce:	e00e      	b.n	80112ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7f5 fcad 	bl	8006c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112d6:	e00a      	b.n	80112ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7f5 fca9 	bl	8006c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112de:	e006      	b.n	80112ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7f5 fca5 	bl	8006c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2200      	movs	r2, #0
 80112ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80112ec:	e01d      	b.n	801132a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112ee:	bf00      	nop
    return;
 80112f0:	e01b      	b.n	801132a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d008      	beq.n	801130e <HAL_UART_IRQHandler+0x1d6>
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011302:	2b00      	cmp	r3, #0
 8011304:	d003      	beq.n	801130e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 f948 	bl	801159c <UART_Transmit_IT>
    return;
 801130c:	e00e      	b.n	801132c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011314:	2b00      	cmp	r3, #0
 8011316:	d009      	beq.n	801132c <HAL_UART_IRQHandler+0x1f4>
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801131e:	2b00      	cmp	r3, #0
 8011320:	d004      	beq.n	801132c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f000 f990 	bl	8011648 <UART_EndTransmit_IT>
    return;
 8011328:	e000      	b.n	801132c <HAL_UART_IRQHandler+0x1f4>
    return;
 801132a:	bf00      	nop
  }
}
 801132c:	3720      	adds	r7, #32
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	08011575 	.word	0x08011575

08011338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011340:	bf00      	nop
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr

0801134c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011354:	bf00      	nop
 8011356:	370c      	adds	r7, #12
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr

08011360 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801136c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011378:	2b00      	cmp	r3, #0
 801137a:	d11e      	bne.n	80113ba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2200      	movs	r2, #0
 8011380:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	68da      	ldr	r2, [r3, #12]
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011390:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	695a      	ldr	r2, [r3, #20]
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f022 0201 	bic.w	r2, r2, #1
 80113a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	695a      	ldr	r2, [r3, #20]
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80113b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2220      	movs	r2, #32
 80113b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f7f5 fc42 	bl	8006c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113c0:	bf00      	nop
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f7ff ffb8 	bl	801134c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113dc:	bf00      	nop
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	695b      	ldr	r3, [r3, #20]
 80113fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011400:	2b80      	cmp	r3, #128	; 0x80
 8011402:	bf0c      	ite	eq
 8011404:	2301      	moveq	r3, #1
 8011406:	2300      	movne	r3, #0
 8011408:	b2db      	uxtb	r3, r3
 801140a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011412:	b2db      	uxtb	r3, r3
 8011414:	2b21      	cmp	r3, #33	; 0x21
 8011416:	d108      	bne.n	801142a <UART_DMAError+0x46>
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d005      	beq.n	801142a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	2200      	movs	r2, #0
 8011422:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011424:	68b8      	ldr	r0, [r7, #8]
 8011426:	f000 f871 	bl	801150c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	695b      	ldr	r3, [r3, #20]
 8011430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011434:	2b40      	cmp	r3, #64	; 0x40
 8011436:	bf0c      	ite	eq
 8011438:	2301      	moveq	r3, #1
 801143a:	2300      	movne	r3, #0
 801143c:	b2db      	uxtb	r3, r3
 801143e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011446:	b2db      	uxtb	r3, r3
 8011448:	2b22      	cmp	r3, #34	; 0x22
 801144a:	d108      	bne.n	801145e <UART_DMAError+0x7a>
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d005      	beq.n	801145e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2200      	movs	r2, #0
 8011456:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011458:	68b8      	ldr	r0, [r7, #8]
 801145a:	f000 f86d 	bl	8011538 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011462:	f043 0210 	orr.w	r2, r3, #16
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801146a:	68b8      	ldr	r0, [r7, #8]
 801146c:	f7f5 fbe0 	bl	8006c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011470:	bf00      	nop
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	603b      	str	r3, [r7, #0]
 8011484:	4613      	mov	r3, r2
 8011486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011488:	e02c      	b.n	80114e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011490:	d028      	beq.n	80114e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d007      	beq.n	80114a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011498:	f7fa fca8 	bl	800bdec <HAL_GetTick>
 801149c:	4602      	mov	r2, r0
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	69ba      	ldr	r2, [r7, #24]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d21d      	bcs.n	80114e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	68da      	ldr	r2, [r3, #12]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80114b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	695a      	ldr	r2, [r3, #20]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f022 0201 	bic.w	r2, r2, #1
 80114c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2220      	movs	r2, #32
 80114cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2220      	movs	r2, #32
 80114d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2200      	movs	r2, #0
 80114dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80114e0:	2303      	movs	r3, #3
 80114e2:	e00f      	b.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	4013      	ands	r3, r2
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	bf0c      	ite	eq
 80114f4:	2301      	moveq	r3, #1
 80114f6:	2300      	movne	r3, #0
 80114f8:	b2db      	uxtb	r3, r3
 80114fa:	461a      	mov	r2, r3
 80114fc:	79fb      	ldrb	r3, [r7, #7]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d0c3      	beq.n	801148a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011522:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2220      	movs	r2, #32
 8011528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 801152c:	bf00      	nop
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	68da      	ldr	r2, [r3, #12]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801154e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	695a      	ldr	r2, [r3, #20]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f022 0201 	bic.w	r2, r2, #1
 801155e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2220      	movs	r2, #32
 8011564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8011568:	bf00      	nop
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801158e:	68f8      	ldr	r0, [r7, #12]
 8011590:	f7f5 fb4e 	bl	8006c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011594:	bf00      	nop
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	2b21      	cmp	r3, #33	; 0x21
 80115ae:	d144      	bne.n	801163a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115b8:	d11a      	bne.n	80115f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6a1b      	ldr	r3, [r3, #32]
 80115be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	461a      	mov	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80115ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d105      	bne.n	80115e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6a1b      	ldr	r3, [r3, #32]
 80115dc:	1c9a      	adds	r2, r3, #2
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	621a      	str	r2, [r3, #32]
 80115e2:	e00e      	b.n	8011602 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6a1b      	ldr	r3, [r3, #32]
 80115e8:	1c5a      	adds	r2, r3, #1
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	621a      	str	r2, [r3, #32]
 80115ee:	e008      	b.n	8011602 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6a1b      	ldr	r3, [r3, #32]
 80115f4:	1c59      	adds	r1, r3, #1
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	6211      	str	r1, [r2, #32]
 80115fa:	781a      	ldrb	r2, [r3, #0]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011606:	b29b      	uxth	r3, r3
 8011608:	3b01      	subs	r3, #1
 801160a:	b29b      	uxth	r3, r3
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	4619      	mov	r1, r3
 8011610:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011612:	2b00      	cmp	r3, #0
 8011614:	d10f      	bne.n	8011636 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	68da      	ldr	r2, [r3, #12]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011624:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	68da      	ldr	r2, [r3, #12]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011634:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011636:	2300      	movs	r3, #0
 8011638:	e000      	b.n	801163c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801163a:	2302      	movs	r3, #2
  }
}
 801163c:	4618      	mov	r0, r3
 801163e:	3714      	adds	r7, #20
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	68da      	ldr	r2, [r3, #12]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801165e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2220      	movs	r2, #32
 8011664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7ff fe65 	bl	8011338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011686:	b2db      	uxtb	r3, r3
 8011688:	2b22      	cmp	r3, #34	; 0x22
 801168a:	d171      	bne.n	8011770 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011694:	d123      	bne.n	80116de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801169a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	691b      	ldr	r3, [r3, #16]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d10e      	bne.n	80116c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116ba:	1c9a      	adds	r2, r3, #2
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	629a      	str	r2, [r3, #40]	; 0x28
 80116c0:	e029      	b.n	8011716 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	629a      	str	r2, [r3, #40]	; 0x28
 80116dc:	e01b      	b.n	8011716 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	691b      	ldr	r3, [r3, #16]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10a      	bne.n	80116fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	6858      	ldr	r0, [r3, #4]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f0:	1c59      	adds	r1, r3, #1
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	6291      	str	r1, [r2, #40]	; 0x28
 80116f6:	b2c2      	uxtb	r2, r0
 80116f8:	701a      	strb	r2, [r3, #0]
 80116fa:	e00c      	b.n	8011716 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	b2da      	uxtb	r2, r3
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011708:	1c58      	adds	r0, r3, #1
 801170a:	6879      	ldr	r1, [r7, #4]
 801170c:	6288      	str	r0, [r1, #40]	; 0x28
 801170e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011712:	b2d2      	uxtb	r2, r2
 8011714:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801171a:	b29b      	uxth	r3, r3
 801171c:	3b01      	subs	r3, #1
 801171e:	b29b      	uxth	r3, r3
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	4619      	mov	r1, r3
 8011724:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011726:	2b00      	cmp	r3, #0
 8011728:	d120      	bne.n	801176c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	68da      	ldr	r2, [r3, #12]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f022 0220 	bic.w	r2, r2, #32
 8011738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	68da      	ldr	r2, [r3, #12]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	695a      	ldr	r2, [r3, #20]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f022 0201 	bic.w	r2, r2, #1
 8011758:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2220      	movs	r2, #32
 801175e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7f5 fa6e 	bl	8006c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8011768:	2300      	movs	r3, #0
 801176a:	e002      	b.n	8011772 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	e000      	b.n	8011772 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8011770:	2302      	movs	r3, #2
  }
}
 8011772:	4618      	mov	r0, r3
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
	...

0801177c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011780:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8011784:	af00      	add	r7, sp, #0
 8011786:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801178a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	691b      	ldr	r3, [r3, #16]
 8011792:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011796:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801179a:	68d9      	ldr	r1, [r3, #12]
 801179c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	ea40 0301 	orr.w	r3, r0, r1
 80117a6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80117a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117ac:	689a      	ldr	r2, [r3, #8]
 80117ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	431a      	orrs	r2, r3
 80117b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117ba:	695b      	ldr	r3, [r3, #20]
 80117bc:	431a      	orrs	r2, r3
 80117be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117c2:	69db      	ldr	r3, [r3, #28]
 80117c4:	4313      	orrs	r3, r2
 80117c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80117ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80117d6:	f021 010c 	bic.w	r1, r1, #12
 80117da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80117e4:	430b      	orrs	r3, r1
 80117e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80117e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	695b      	ldr	r3, [r3, #20]
 80117f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80117f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117f8:	6999      	ldr	r1, [r3, #24]
 80117fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	ea40 0301 	orr.w	r3, r0, r1
 8011804:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011806:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801180a:	69db      	ldr	r3, [r3, #28]
 801180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011810:	f040 824a 	bne.w	8011ca8 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011814:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	4b96      	ldr	r3, [pc, #600]	; (8011a74 <UART_SetConfig+0x2f8>)
 801181c:	429a      	cmp	r2, r3
 801181e:	d006      	beq.n	801182e <UART_SetConfig+0xb2>
 8011820:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	4b94      	ldr	r3, [pc, #592]	; (8011a78 <UART_SetConfig+0x2fc>)
 8011828:	429a      	cmp	r2, r3
 801182a:	f040 8129 	bne.w	8011a80 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801182e:	f7fc fc75 	bl	800e11c <HAL_RCC_GetPCLK2Freq>
 8011832:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011836:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801183a:	2200      	movs	r2, #0
 801183c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8011840:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8011844:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8011848:	4622      	mov	r2, r4
 801184a:	462b      	mov	r3, r5
 801184c:	1891      	adds	r1, r2, r2
 801184e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8011852:	415b      	adcs	r3, r3
 8011854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011858:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801185c:	4621      	mov	r1, r4
 801185e:	1851      	adds	r1, r2, r1
 8011860:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8011864:	4629      	mov	r1, r5
 8011866:	414b      	adcs	r3, r1
 8011868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801186c:	f04f 0200 	mov.w	r2, #0
 8011870:	f04f 0300 	mov.w	r3, #0
 8011874:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8011878:	4649      	mov	r1, r9
 801187a:	00cb      	lsls	r3, r1, #3
 801187c:	4641      	mov	r1, r8
 801187e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011882:	4641      	mov	r1, r8
 8011884:	00ca      	lsls	r2, r1, #3
 8011886:	4610      	mov	r0, r2
 8011888:	4619      	mov	r1, r3
 801188a:	4603      	mov	r3, r0
 801188c:	4622      	mov	r2, r4
 801188e:	189b      	adds	r3, r3, r2
 8011890:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8011894:	462b      	mov	r3, r5
 8011896:	460a      	mov	r2, r1
 8011898:	eb42 0303 	adc.w	r3, r2, r3
 801189c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80118a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80118ac:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80118b0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80118b4:	460b      	mov	r3, r1
 80118b6:	18db      	adds	r3, r3, r3
 80118b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80118bc:	4613      	mov	r3, r2
 80118be:	eb42 0303 	adc.w	r3, r2, r3
 80118c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80118c6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80118ca:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80118ce:	f7ef f9f3 	bl	8000cb8 <__aeabi_uldivmod>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	4b69      	ldr	r3, [pc, #420]	; (8011a7c <UART_SetConfig+0x300>)
 80118d8:	fba3 2302 	umull	r2, r3, r3, r2
 80118dc:	095b      	lsrs	r3, r3, #5
 80118de:	011c      	lsls	r4, r3, #4
 80118e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80118e4:	2200      	movs	r2, #0
 80118e6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80118ea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80118ee:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80118f2:	4642      	mov	r2, r8
 80118f4:	464b      	mov	r3, r9
 80118f6:	1891      	adds	r1, r2, r2
 80118f8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80118fc:	415b      	adcs	r3, r3
 80118fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011902:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011906:	4641      	mov	r1, r8
 8011908:	1851      	adds	r1, r2, r1
 801190a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801190e:	4649      	mov	r1, r9
 8011910:	414b      	adcs	r3, r1
 8011912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011916:	f04f 0200 	mov.w	r2, #0
 801191a:	f04f 0300 	mov.w	r3, #0
 801191e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8011922:	4659      	mov	r1, fp
 8011924:	00cb      	lsls	r3, r1, #3
 8011926:	4651      	mov	r1, sl
 8011928:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801192c:	4651      	mov	r1, sl
 801192e:	00ca      	lsls	r2, r1, #3
 8011930:	4610      	mov	r0, r2
 8011932:	4619      	mov	r1, r3
 8011934:	4603      	mov	r3, r0
 8011936:	4642      	mov	r2, r8
 8011938:	189b      	adds	r3, r3, r2
 801193a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 801193e:	464b      	mov	r3, r9
 8011940:	460a      	mov	r2, r1
 8011942:	eb42 0303 	adc.w	r3, r2, r3
 8011946:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 801194a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	2200      	movs	r2, #0
 8011952:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8011956:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 801195a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 801195e:	460b      	mov	r3, r1
 8011960:	18db      	adds	r3, r3, r3
 8011962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011966:	4613      	mov	r3, r2
 8011968:	eb42 0303 	adc.w	r3, r2, r3
 801196c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011970:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011974:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8011978:	f7ef f99e 	bl	8000cb8 <__aeabi_uldivmod>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	4611      	mov	r1, r2
 8011982:	4b3e      	ldr	r3, [pc, #248]	; (8011a7c <UART_SetConfig+0x300>)
 8011984:	fba3 2301 	umull	r2, r3, r3, r1
 8011988:	095b      	lsrs	r3, r3, #5
 801198a:	2264      	movs	r2, #100	; 0x64
 801198c:	fb02 f303 	mul.w	r3, r2, r3
 8011990:	1acb      	subs	r3, r1, r3
 8011992:	00db      	lsls	r3, r3, #3
 8011994:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011998:	4b38      	ldr	r3, [pc, #224]	; (8011a7c <UART_SetConfig+0x300>)
 801199a:	fba3 2302 	umull	r2, r3, r3, r2
 801199e:	095b      	lsrs	r3, r3, #5
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80119a6:	441c      	add	r4, r3
 80119a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80119ac:	2200      	movs	r2, #0
 80119ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80119b2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80119b6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80119ba:	4642      	mov	r2, r8
 80119bc:	464b      	mov	r3, r9
 80119be:	1891      	adds	r1, r2, r2
 80119c0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80119c4:	415b      	adcs	r3, r3
 80119c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80119ca:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80119ce:	4641      	mov	r1, r8
 80119d0:	1851      	adds	r1, r2, r1
 80119d2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80119d6:	4649      	mov	r1, r9
 80119d8:	414b      	adcs	r3, r1
 80119da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80119de:	f04f 0200 	mov.w	r2, #0
 80119e2:	f04f 0300 	mov.w	r3, #0
 80119e6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80119ea:	4659      	mov	r1, fp
 80119ec:	00cb      	lsls	r3, r1, #3
 80119ee:	4651      	mov	r1, sl
 80119f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80119f4:	4651      	mov	r1, sl
 80119f6:	00ca      	lsls	r2, r1, #3
 80119f8:	4610      	mov	r0, r2
 80119fa:	4619      	mov	r1, r3
 80119fc:	4603      	mov	r3, r0
 80119fe:	4642      	mov	r2, r8
 8011a00:	189b      	adds	r3, r3, r2
 8011a02:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8011a06:	464b      	mov	r3, r9
 8011a08:	460a      	mov	r2, r1
 8011a0a:	eb42 0303 	adc.w	r3, r2, r3
 8011a0e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8011a12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8011a1e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8011a22:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8011a26:	460b      	mov	r3, r1
 8011a28:	18db      	adds	r3, r3, r3
 8011a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a2e:	4613      	mov	r3, r2
 8011a30:	eb42 0303 	adc.w	r3, r2, r3
 8011a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011a38:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011a3c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8011a40:	f7ef f93a 	bl	8000cb8 <__aeabi_uldivmod>
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	4b0c      	ldr	r3, [pc, #48]	; (8011a7c <UART_SetConfig+0x300>)
 8011a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8011a4e:	095b      	lsrs	r3, r3, #5
 8011a50:	2164      	movs	r1, #100	; 0x64
 8011a52:	fb01 f303 	mul.w	r3, r1, r3
 8011a56:	1ad3      	subs	r3, r2, r3
 8011a58:	00db      	lsls	r3, r3, #3
 8011a5a:	3332      	adds	r3, #50	; 0x32
 8011a5c:	4a07      	ldr	r2, [pc, #28]	; (8011a7c <UART_SetConfig+0x300>)
 8011a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a62:	095b      	lsrs	r3, r3, #5
 8011a64:	f003 0207 	and.w	r2, r3, #7
 8011a68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4422      	add	r2, r4
 8011a70:	609a      	str	r2, [r3, #8]
 8011a72:	e349      	b.n	8012108 <UART_SetConfig+0x98c>
 8011a74:	40011000 	.word	0x40011000
 8011a78:	40011400 	.word	0x40011400
 8011a7c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011a80:	f7fc fb38 	bl	800e0f4 <HAL_RCC_GetPCLK1Freq>
 8011a84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8011a92:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8011a96:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	1891      	adds	r1, r2, r2
 8011aa0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8011aa4:	415b      	adcs	r3, r3
 8011aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011aaa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011aae:	4621      	mov	r1, r4
 8011ab0:	eb12 0a01 	adds.w	sl, r2, r1
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	eb43 0b01 	adc.w	fp, r3, r1
 8011aba:	f04f 0200 	mov.w	r2, #0
 8011abe:	f04f 0300 	mov.w	r3, #0
 8011ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011ac6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011ace:	4692      	mov	sl, r2
 8011ad0:	469b      	mov	fp, r3
 8011ad2:	4623      	mov	r3, r4
 8011ad4:	eb1a 0303 	adds.w	r3, sl, r3
 8011ad8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8011adc:	462b      	mov	r3, r5
 8011ade:	eb4b 0303 	adc.w	r3, fp, r3
 8011ae2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8011ae6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8011af2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8011af6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8011afa:	460b      	mov	r3, r1
 8011afc:	18db      	adds	r3, r3, r3
 8011afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b02:	4613      	mov	r3, r2
 8011b04:	eb42 0303 	adc.w	r3, r2, r3
 8011b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b0c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011b10:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8011b14:	f7ef f8d0 	bl	8000cb8 <__aeabi_uldivmod>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	4b61      	ldr	r3, [pc, #388]	; (8011ca4 <UART_SetConfig+0x528>)
 8011b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8011b22:	095b      	lsrs	r3, r3, #5
 8011b24:	011c      	lsls	r4, r3, #4
 8011b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8011b30:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8011b34:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8011b38:	4642      	mov	r2, r8
 8011b3a:	464b      	mov	r3, r9
 8011b3c:	1891      	adds	r1, r2, r2
 8011b3e:	67b9      	str	r1, [r7, #120]	; 0x78
 8011b40:	415b      	adcs	r3, r3
 8011b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011b48:	4641      	mov	r1, r8
 8011b4a:	1851      	adds	r1, r2, r1
 8011b4c:	6739      	str	r1, [r7, #112]	; 0x70
 8011b4e:	4649      	mov	r1, r9
 8011b50:	414b      	adcs	r3, r1
 8011b52:	677b      	str	r3, [r7, #116]	; 0x74
 8011b54:	f04f 0200 	mov.w	r2, #0
 8011b58:	f04f 0300 	mov.w	r3, #0
 8011b5c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8011b60:	4659      	mov	r1, fp
 8011b62:	00cb      	lsls	r3, r1, #3
 8011b64:	4651      	mov	r1, sl
 8011b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b6a:	4651      	mov	r1, sl
 8011b6c:	00ca      	lsls	r2, r1, #3
 8011b6e:	4610      	mov	r0, r2
 8011b70:	4619      	mov	r1, r3
 8011b72:	4603      	mov	r3, r0
 8011b74:	4642      	mov	r2, r8
 8011b76:	189b      	adds	r3, r3, r2
 8011b78:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8011b7c:	464b      	mov	r3, r9
 8011b7e:	460a      	mov	r2, r1
 8011b80:	eb42 0303 	adc.w	r3, r2, r3
 8011b84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8011b88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011b94:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8011b98:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	18db      	adds	r3, r3, r3
 8011ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ba2:	4613      	mov	r3, r2
 8011ba4:	eb42 0303 	adc.w	r3, r2, r3
 8011ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011baa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011bae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8011bb2:	f7ef f881 	bl	8000cb8 <__aeabi_uldivmod>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	460b      	mov	r3, r1
 8011bba:	4611      	mov	r1, r2
 8011bbc:	4b39      	ldr	r3, [pc, #228]	; (8011ca4 <UART_SetConfig+0x528>)
 8011bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8011bc2:	095b      	lsrs	r3, r3, #5
 8011bc4:	2264      	movs	r2, #100	; 0x64
 8011bc6:	fb02 f303 	mul.w	r3, r2, r3
 8011bca:	1acb      	subs	r3, r1, r3
 8011bcc:	00db      	lsls	r3, r3, #3
 8011bce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011bd2:	4b34      	ldr	r3, [pc, #208]	; (8011ca4 <UART_SetConfig+0x528>)
 8011bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8011bd8:	095b      	lsrs	r3, r3, #5
 8011bda:	005b      	lsls	r3, r3, #1
 8011bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011be0:	441c      	add	r4, r3
 8011be2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011be6:	2200      	movs	r2, #0
 8011be8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8011bec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8011bf0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8011bf4:	4642      	mov	r2, r8
 8011bf6:	464b      	mov	r3, r9
 8011bf8:	1891      	adds	r1, r2, r2
 8011bfa:	6639      	str	r1, [r7, #96]	; 0x60
 8011bfc:	415b      	adcs	r3, r3
 8011bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8011c00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011c04:	4641      	mov	r1, r8
 8011c06:	1851      	adds	r1, r2, r1
 8011c08:	65b9      	str	r1, [r7, #88]	; 0x58
 8011c0a:	4649      	mov	r1, r9
 8011c0c:	414b      	adcs	r3, r1
 8011c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c10:	f04f 0200 	mov.w	r2, #0
 8011c14:	f04f 0300 	mov.w	r3, #0
 8011c18:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8011c1c:	4659      	mov	r1, fp
 8011c1e:	00cb      	lsls	r3, r1, #3
 8011c20:	4651      	mov	r1, sl
 8011c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011c26:	4651      	mov	r1, sl
 8011c28:	00ca      	lsls	r2, r1, #3
 8011c2a:	4610      	mov	r0, r2
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4603      	mov	r3, r0
 8011c30:	4642      	mov	r2, r8
 8011c32:	189b      	adds	r3, r3, r2
 8011c34:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011c38:	464b      	mov	r3, r9
 8011c3a:	460a      	mov	r2, r1
 8011c3c:	eb42 0303 	adc.w	r3, r2, r3
 8011c40:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011c44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8011c50:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8011c54:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8011c58:	460b      	mov	r3, r1
 8011c5a:	18db      	adds	r3, r3, r3
 8011c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c5e:	4613      	mov	r3, r2
 8011c60:	eb42 0303 	adc.w	r3, r2, r3
 8011c64:	657b      	str	r3, [r7, #84]	; 0x54
 8011c66:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011c6a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8011c6e:	f7ef f823 	bl	8000cb8 <__aeabi_uldivmod>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	4b0b      	ldr	r3, [pc, #44]	; (8011ca4 <UART_SetConfig+0x528>)
 8011c78:	fba3 1302 	umull	r1, r3, r3, r2
 8011c7c:	095b      	lsrs	r3, r3, #5
 8011c7e:	2164      	movs	r1, #100	; 0x64
 8011c80:	fb01 f303 	mul.w	r3, r1, r3
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	00db      	lsls	r3, r3, #3
 8011c88:	3332      	adds	r3, #50	; 0x32
 8011c8a:	4a06      	ldr	r2, [pc, #24]	; (8011ca4 <UART_SetConfig+0x528>)
 8011c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8011c90:	095b      	lsrs	r3, r3, #5
 8011c92:	f003 0207 	and.w	r2, r3, #7
 8011c96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4422      	add	r2, r4
 8011c9e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011ca0:	e232      	b.n	8012108 <UART_SetConfig+0x98c>
 8011ca2:	bf00      	nop
 8011ca4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011ca8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	4b8d      	ldr	r3, [pc, #564]	; (8011ee4 <UART_SetConfig+0x768>)
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d006      	beq.n	8011cc2 <UART_SetConfig+0x546>
 8011cb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	4b8b      	ldr	r3, [pc, #556]	; (8011ee8 <UART_SetConfig+0x76c>)
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	f040 8117 	bne.w	8011ef0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011cc2:	f7fc fa2b 	bl	800e11c <HAL_RCC_GetPCLK2Freq>
 8011cc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8011cd4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8011cd8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8011cdc:	4622      	mov	r2, r4
 8011cde:	462b      	mov	r3, r5
 8011ce0:	1891      	adds	r1, r2, r2
 8011ce2:	64b9      	str	r1, [r7, #72]	; 0x48
 8011ce4:	415b      	adcs	r3, r3
 8011ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011cec:	4621      	mov	r1, r4
 8011cee:	eb12 0801 	adds.w	r8, r2, r1
 8011cf2:	4629      	mov	r1, r5
 8011cf4:	eb43 0901 	adc.w	r9, r3, r1
 8011cf8:	f04f 0200 	mov.w	r2, #0
 8011cfc:	f04f 0300 	mov.w	r3, #0
 8011d00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011d04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011d08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011d0c:	4690      	mov	r8, r2
 8011d0e:	4699      	mov	r9, r3
 8011d10:	4623      	mov	r3, r4
 8011d12:	eb18 0303 	adds.w	r3, r8, r3
 8011d16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8011d1a:	462b      	mov	r3, r5
 8011d1c:	eb49 0303 	adc.w	r3, r9, r3
 8011d20:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8011d24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8011d30:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8011d34:	f04f 0200 	mov.w	r2, #0
 8011d38:	f04f 0300 	mov.w	r3, #0
 8011d3c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8011d40:	4629      	mov	r1, r5
 8011d42:	008b      	lsls	r3, r1, #2
 8011d44:	4621      	mov	r1, r4
 8011d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	008a      	lsls	r2, r1, #2
 8011d4e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8011d52:	f7ee ffb1 	bl	8000cb8 <__aeabi_uldivmod>
 8011d56:	4602      	mov	r2, r0
 8011d58:	460b      	mov	r3, r1
 8011d5a:	4b64      	ldr	r3, [pc, #400]	; (8011eec <UART_SetConfig+0x770>)
 8011d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8011d60:	095b      	lsrs	r3, r3, #5
 8011d62:	011c      	lsls	r4, r3, #4
 8011d64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8011d6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8011d72:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8011d76:	4642      	mov	r2, r8
 8011d78:	464b      	mov	r3, r9
 8011d7a:	1891      	adds	r1, r2, r2
 8011d7c:	6439      	str	r1, [r7, #64]	; 0x40
 8011d7e:	415b      	adcs	r3, r3
 8011d80:	647b      	str	r3, [r7, #68]	; 0x44
 8011d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d86:	4641      	mov	r1, r8
 8011d88:	1851      	adds	r1, r2, r1
 8011d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8011d8c:	4649      	mov	r1, r9
 8011d8e:	414b      	adcs	r3, r1
 8011d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d92:	f04f 0200 	mov.w	r2, #0
 8011d96:	f04f 0300 	mov.w	r3, #0
 8011d9a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8011d9e:	4659      	mov	r1, fp
 8011da0:	00cb      	lsls	r3, r1, #3
 8011da2:	4651      	mov	r1, sl
 8011da4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011da8:	4651      	mov	r1, sl
 8011daa:	00ca      	lsls	r2, r1, #3
 8011dac:	4610      	mov	r0, r2
 8011dae:	4619      	mov	r1, r3
 8011db0:	4603      	mov	r3, r0
 8011db2:	4642      	mov	r2, r8
 8011db4:	189b      	adds	r3, r3, r2
 8011db6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011dba:	464b      	mov	r3, r9
 8011dbc:	460a      	mov	r2, r1
 8011dbe:	eb42 0303 	adc.w	r3, r2, r3
 8011dc2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8011dc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011dd2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8011dd6:	f04f 0200 	mov.w	r2, #0
 8011dda:	f04f 0300 	mov.w	r3, #0
 8011dde:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8011de2:	4649      	mov	r1, r9
 8011de4:	008b      	lsls	r3, r1, #2
 8011de6:	4641      	mov	r1, r8
 8011de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011dec:	4641      	mov	r1, r8
 8011dee:	008a      	lsls	r2, r1, #2
 8011df0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8011df4:	f7ee ff60 	bl	8000cb8 <__aeabi_uldivmod>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4b3b      	ldr	r3, [pc, #236]	; (8011eec <UART_SetConfig+0x770>)
 8011dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8011e02:	095b      	lsrs	r3, r3, #5
 8011e04:	2164      	movs	r1, #100	; 0x64
 8011e06:	fb01 f303 	mul.w	r3, r1, r3
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	011b      	lsls	r3, r3, #4
 8011e0e:	3332      	adds	r3, #50	; 0x32
 8011e10:	4a36      	ldr	r2, [pc, #216]	; (8011eec <UART_SetConfig+0x770>)
 8011e12:	fba2 2303 	umull	r2, r3, r2, r3
 8011e16:	095b      	lsrs	r3, r3, #5
 8011e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e1c:	441c      	add	r4, r3
 8011e1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011e22:	2200      	movs	r2, #0
 8011e24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011e28:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8011e2c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8011e30:	4642      	mov	r2, r8
 8011e32:	464b      	mov	r3, r9
 8011e34:	1891      	adds	r1, r2, r2
 8011e36:	6339      	str	r1, [r7, #48]	; 0x30
 8011e38:	415b      	adcs	r3, r3
 8011e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8011e3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011e40:	4641      	mov	r1, r8
 8011e42:	1851      	adds	r1, r2, r1
 8011e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8011e46:	4649      	mov	r1, r9
 8011e48:	414b      	adcs	r3, r1
 8011e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e4c:	f04f 0200 	mov.w	r2, #0
 8011e50:	f04f 0300 	mov.w	r3, #0
 8011e54:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8011e58:	4659      	mov	r1, fp
 8011e5a:	00cb      	lsls	r3, r1, #3
 8011e5c:	4651      	mov	r1, sl
 8011e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e62:	4651      	mov	r1, sl
 8011e64:	00ca      	lsls	r2, r1, #3
 8011e66:	4610      	mov	r0, r2
 8011e68:	4619      	mov	r1, r3
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	4642      	mov	r2, r8
 8011e6e:	189b      	adds	r3, r3, r2
 8011e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011e74:	464b      	mov	r3, r9
 8011e76:	460a      	mov	r2, r1
 8011e78:	eb42 0303 	adc.w	r3, r2, r3
 8011e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011e80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8011e8c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8011e90:	f04f 0200 	mov.w	r2, #0
 8011e94:	f04f 0300 	mov.w	r3, #0
 8011e98:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	008b      	lsls	r3, r1, #2
 8011ea0:	4641      	mov	r1, r8
 8011ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011ea6:	4641      	mov	r1, r8
 8011ea8:	008a      	lsls	r2, r1, #2
 8011eaa:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8011eae:	f7ee ff03 	bl	8000cb8 <__aeabi_uldivmod>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4b0d      	ldr	r3, [pc, #52]	; (8011eec <UART_SetConfig+0x770>)
 8011eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8011ebc:	095b      	lsrs	r3, r3, #5
 8011ebe:	2164      	movs	r1, #100	; 0x64
 8011ec0:	fb01 f303 	mul.w	r3, r1, r3
 8011ec4:	1ad3      	subs	r3, r2, r3
 8011ec6:	011b      	lsls	r3, r3, #4
 8011ec8:	3332      	adds	r3, #50	; 0x32
 8011eca:	4a08      	ldr	r2, [pc, #32]	; (8011eec <UART_SetConfig+0x770>)
 8011ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8011ed0:	095b      	lsrs	r3, r3, #5
 8011ed2:	f003 020f 	and.w	r2, r3, #15
 8011ed6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4422      	add	r2, r4
 8011ede:	609a      	str	r2, [r3, #8]
 8011ee0:	e112      	b.n	8012108 <UART_SetConfig+0x98c>
 8011ee2:	bf00      	nop
 8011ee4:	40011000 	.word	0x40011000
 8011ee8:	40011400 	.word	0x40011400
 8011eec:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8011ef0:	f7fc f900 	bl	800e0f4 <HAL_RCC_GetPCLK1Freq>
 8011ef4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011ef8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011efc:	2200      	movs	r2, #0
 8011efe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8011f02:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8011f06:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8011f0a:	4642      	mov	r2, r8
 8011f0c:	464b      	mov	r3, r9
 8011f0e:	1891      	adds	r1, r2, r2
 8011f10:	6239      	str	r1, [r7, #32]
 8011f12:	415b      	adcs	r3, r3
 8011f14:	627b      	str	r3, [r7, #36]	; 0x24
 8011f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011f1a:	4641      	mov	r1, r8
 8011f1c:	1854      	adds	r4, r2, r1
 8011f1e:	4649      	mov	r1, r9
 8011f20:	eb43 0501 	adc.w	r5, r3, r1
 8011f24:	f04f 0200 	mov.w	r2, #0
 8011f28:	f04f 0300 	mov.w	r3, #0
 8011f2c:	00eb      	lsls	r3, r5, #3
 8011f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011f32:	00e2      	lsls	r2, r4, #3
 8011f34:	4614      	mov	r4, r2
 8011f36:	461d      	mov	r5, r3
 8011f38:	4643      	mov	r3, r8
 8011f3a:	18e3      	adds	r3, r4, r3
 8011f3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8011f40:	464b      	mov	r3, r9
 8011f42:	eb45 0303 	adc.w	r3, r5, r3
 8011f46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011f4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	2200      	movs	r2, #0
 8011f52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8011f56:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8011f5a:	f04f 0200 	mov.w	r2, #0
 8011f5e:	f04f 0300 	mov.w	r3, #0
 8011f62:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8011f66:	4629      	mov	r1, r5
 8011f68:	008b      	lsls	r3, r1, #2
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011f70:	4621      	mov	r1, r4
 8011f72:	008a      	lsls	r2, r1, #2
 8011f74:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8011f78:	f7ee fe9e 	bl	8000cb8 <__aeabi_uldivmod>
 8011f7c:	4602      	mov	r2, r0
 8011f7e:	460b      	mov	r3, r1
 8011f80:	4b64      	ldr	r3, [pc, #400]	; (8012114 <UART_SetConfig+0x998>)
 8011f82:	fba3 2302 	umull	r2, r3, r3, r2
 8011f86:	095b      	lsrs	r3, r3, #5
 8011f88:	011c      	lsls	r4, r3, #4
 8011f8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011f94:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8011f98:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8011f9c:	4642      	mov	r2, r8
 8011f9e:	464b      	mov	r3, r9
 8011fa0:	1891      	adds	r1, r2, r2
 8011fa2:	61b9      	str	r1, [r7, #24]
 8011fa4:	415b      	adcs	r3, r3
 8011fa6:	61fb      	str	r3, [r7, #28]
 8011fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011fac:	4641      	mov	r1, r8
 8011fae:	1851      	adds	r1, r2, r1
 8011fb0:	6139      	str	r1, [r7, #16]
 8011fb2:	4649      	mov	r1, r9
 8011fb4:	414b      	adcs	r3, r1
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	f04f 0200 	mov.w	r2, #0
 8011fbc:	f04f 0300 	mov.w	r3, #0
 8011fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011fc4:	4659      	mov	r1, fp
 8011fc6:	00cb      	lsls	r3, r1, #3
 8011fc8:	4651      	mov	r1, sl
 8011fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011fce:	4651      	mov	r1, sl
 8011fd0:	00ca      	lsls	r2, r1, #3
 8011fd2:	4610      	mov	r0, r2
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	4642      	mov	r2, r8
 8011fda:	189b      	adds	r3, r3, r2
 8011fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011fe0:	464b      	mov	r3, r9
 8011fe2:	460a      	mov	r2, r1
 8011fe4:	eb42 0303 	adc.w	r3, r2, r3
 8011fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011fec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011ff8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8011ffc:	f04f 0200 	mov.w	r2, #0
 8012000:	f04f 0300 	mov.w	r3, #0
 8012004:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8012008:	4649      	mov	r1, r9
 801200a:	008b      	lsls	r3, r1, #2
 801200c:	4641      	mov	r1, r8
 801200e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012012:	4641      	mov	r1, r8
 8012014:	008a      	lsls	r2, r1, #2
 8012016:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801201a:	f7ee fe4d 	bl	8000cb8 <__aeabi_uldivmod>
 801201e:	4602      	mov	r2, r0
 8012020:	460b      	mov	r3, r1
 8012022:	4b3c      	ldr	r3, [pc, #240]	; (8012114 <UART_SetConfig+0x998>)
 8012024:	fba3 1302 	umull	r1, r3, r3, r2
 8012028:	095b      	lsrs	r3, r3, #5
 801202a:	2164      	movs	r1, #100	; 0x64
 801202c:	fb01 f303 	mul.w	r3, r1, r3
 8012030:	1ad3      	subs	r3, r2, r3
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	3332      	adds	r3, #50	; 0x32
 8012036:	4a37      	ldr	r2, [pc, #220]	; (8012114 <UART_SetConfig+0x998>)
 8012038:	fba2 2303 	umull	r2, r3, r2, r3
 801203c:	095b      	lsrs	r3, r3, #5
 801203e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012042:	441c      	add	r4, r3
 8012044:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012048:	2200      	movs	r2, #0
 801204a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801204e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012052:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8012056:	4642      	mov	r2, r8
 8012058:	464b      	mov	r3, r9
 801205a:	1891      	adds	r1, r2, r2
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	415b      	adcs	r3, r3
 8012060:	60fb      	str	r3, [r7, #12]
 8012062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012066:	4641      	mov	r1, r8
 8012068:	1851      	adds	r1, r2, r1
 801206a:	6039      	str	r1, [r7, #0]
 801206c:	4649      	mov	r1, r9
 801206e:	414b      	adcs	r3, r1
 8012070:	607b      	str	r3, [r7, #4]
 8012072:	f04f 0200 	mov.w	r2, #0
 8012076:	f04f 0300 	mov.w	r3, #0
 801207a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801207e:	4659      	mov	r1, fp
 8012080:	00cb      	lsls	r3, r1, #3
 8012082:	4651      	mov	r1, sl
 8012084:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012088:	4651      	mov	r1, sl
 801208a:	00ca      	lsls	r2, r1, #3
 801208c:	4610      	mov	r0, r2
 801208e:	4619      	mov	r1, r3
 8012090:	4603      	mov	r3, r0
 8012092:	4642      	mov	r2, r8
 8012094:	189b      	adds	r3, r3, r2
 8012096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801209a:	464b      	mov	r3, r9
 801209c:	460a      	mov	r2, r1
 801209e:	eb42 0303 	adc.w	r3, r2, r3
 80120a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80120a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80120b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80120b6:	f04f 0200 	mov.w	r2, #0
 80120ba:	f04f 0300 	mov.w	r3, #0
 80120be:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80120c2:	4649      	mov	r1, r9
 80120c4:	008b      	lsls	r3, r1, #2
 80120c6:	4641      	mov	r1, r8
 80120c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80120cc:	4641      	mov	r1, r8
 80120ce:	008a      	lsls	r2, r1, #2
 80120d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80120d4:	f7ee fdf0 	bl	8000cb8 <__aeabi_uldivmod>
 80120d8:	4602      	mov	r2, r0
 80120da:	460b      	mov	r3, r1
 80120dc:	4b0d      	ldr	r3, [pc, #52]	; (8012114 <UART_SetConfig+0x998>)
 80120de:	fba3 1302 	umull	r1, r3, r3, r2
 80120e2:	095b      	lsrs	r3, r3, #5
 80120e4:	2164      	movs	r1, #100	; 0x64
 80120e6:	fb01 f303 	mul.w	r3, r1, r3
 80120ea:	1ad3      	subs	r3, r2, r3
 80120ec:	011b      	lsls	r3, r3, #4
 80120ee:	3332      	adds	r3, #50	; 0x32
 80120f0:	4a08      	ldr	r2, [pc, #32]	; (8012114 <UART_SetConfig+0x998>)
 80120f2:	fba2 2303 	umull	r2, r3, r2, r3
 80120f6:	095b      	lsrs	r3, r3, #5
 80120f8:	f003 020f 	and.w	r2, r3, #15
 80120fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4422      	add	r2, r4
 8012104:	609a      	str	r2, [r3, #8]
}
 8012106:	e7ff      	b.n	8012108 <UART_SetConfig+0x98c>
 8012108:	bf00      	nop
 801210a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 801210e:	46bd      	mov	sp, r7
 8012110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012114:	51eb851f 	.word	0x51eb851f

08012118 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8012118:	b084      	sub	sp, #16
 801211a:	b480      	push	{r7}
 801211c:	b085      	sub	sp, #20
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
 8012122:	f107 001c 	add.w	r0, r7, #28
 8012126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801212e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012130:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012132:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8012136:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012138:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801213a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801213e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012142:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	4313      	orrs	r3, r2
 8012148:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8012152:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	431a      	orrs	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3714      	adds	r7, #20
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	b004      	add	sp, #16
 801216c:	4770      	bx	lr

0801216e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801216e:	b480      	push	{r7}
 8012170:	b083      	sub	sp, #12
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b082      	sub	sp, #8
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2203      	movs	r2, #3
 80121b6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80121b8:	2002      	movs	r0, #2
 80121ba:	f7f9 fe23 	bl	800be04 <HAL_Delay>
  
  return HAL_OK;
 80121be:	2300      	movs	r3, #0
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80121c8:	b480      	push	{r7}
 80121ca:	b083      	sub	sp, #12
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f003 0303 	and.w	r3, r3, #3
}
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b085      	sub	sp, #20
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012202:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012208:	431a      	orrs	r2, r3
                       Command->CPSM);
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801220e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	4313      	orrs	r3, r2
 8012214:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801221e:	f023 030f 	bic.w	r3, r3, #15
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	431a      	orrs	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3714      	adds	r7, #20
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr

08012238 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	691b      	ldr	r3, [r3, #16]
 8012244:	b2db      	uxtb	r3, r3
}
 8012246:	4618      	mov	r0, r3
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr

08012252 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8012252:	b480      	push	{r7}
 8012254:	b085      	sub	sp, #20
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
 801225a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	3314      	adds	r3, #20
 8012260:	461a      	mov	r2, r3
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	4413      	add	r3, r2
 8012266:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
}  
 801226c:	4618      	mov	r0, r3
 801226e:	3714      	adds	r7, #20
 8012270:	46bd      	mov	sp, r7
 8012272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012276:	4770      	bx	lr

08012278 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8012278:	b480      	push	{r7}
 801227a:	b085      	sub	sp, #20
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012282:	2300      	movs	r3, #0
 8012284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	685a      	ldr	r2, [r3, #4]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801229e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80122a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80122aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80122ac:	68fa      	ldr	r2, [r7, #12]
 80122ae:	4313      	orrs	r3, r2
 80122b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	431a      	orrs	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80122c2:	2300      	movs	r3, #0

}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3714      	adds	r7, #20
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b088      	sub	sp, #32
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80122de:	2310      	movs	r3, #16
 80122e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122e2:	2340      	movs	r3, #64	; 0x40
 80122e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80122e6:	2300      	movs	r3, #0
 80122e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122f0:	f107 0308 	add.w	r3, r7, #8
 80122f4:	4619      	mov	r1, r3
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ff ff74 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80122fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012300:	2110      	movs	r1, #16
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fa40 	bl	8012788 <SDMMC_GetCmdResp1>
 8012308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801230a:	69fb      	ldr	r3, [r7, #28]
}
 801230c:	4618      	mov	r0, r3
 801230e:	3720      	adds	r7, #32
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b088      	sub	sp, #32
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012322:	2311      	movs	r3, #17
 8012324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012326:	2340      	movs	r3, #64	; 0x40
 8012328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801232a:	2300      	movs	r3, #0
 801232c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801232e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012332:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012334:	f107 0308 	add.w	r3, r7, #8
 8012338:	4619      	mov	r1, r3
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f7ff ff52 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012340:	f241 3288 	movw	r2, #5000	; 0x1388
 8012344:	2111      	movs	r1, #17
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f000 fa1e 	bl	8012788 <SDMMC_GetCmdResp1>
 801234c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801234e:	69fb      	ldr	r3, [r7, #28]
}
 8012350:	4618      	mov	r0, r3
 8012352:	3720      	adds	r7, #32
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b088      	sub	sp, #32
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012366:	2312      	movs	r3, #18
 8012368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801236a:	2340      	movs	r3, #64	; 0x40
 801236c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801236e:	2300      	movs	r3, #0
 8012370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012376:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012378:	f107 0308 	add.w	r3, r7, #8
 801237c:	4619      	mov	r1, r3
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7ff ff30 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012384:	f241 3288 	movw	r2, #5000	; 0x1388
 8012388:	2112      	movs	r1, #18
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 f9fc 	bl	8012788 <SDMMC_GetCmdResp1>
 8012390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012392:	69fb      	ldr	r3, [r7, #28]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3720      	adds	r7, #32
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b088      	sub	sp, #32
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80123aa:	2318      	movs	r3, #24
 80123ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80123ae:	2340      	movs	r3, #64	; 0x40
 80123b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80123b2:	2300      	movs	r3, #0
 80123b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80123b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80123bc:	f107 0308 	add.w	r3, r7, #8
 80123c0:	4619      	mov	r1, r3
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7ff ff0e 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80123c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80123cc:	2118      	movs	r1, #24
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f9da 	bl	8012788 <SDMMC_GetCmdResp1>
 80123d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123d6:	69fb      	ldr	r3, [r7, #28]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3720      	adds	r7, #32
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b088      	sub	sp, #32
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80123ee:	2319      	movs	r3, #25
 80123f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80123f2:	2340      	movs	r3, #64	; 0x40
 80123f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80123f6:	2300      	movs	r3, #0
 80123f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80123fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012400:	f107 0308 	add.w	r3, r7, #8
 8012404:	4619      	mov	r1, r3
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff feec 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012410:	2119      	movs	r1, #25
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f000 f9b8 	bl	8012788 <SDMMC_GetCmdResp1>
 8012418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801241a:	69fb      	ldr	r3, [r7, #28]
}
 801241c:	4618      	mov	r0, r3
 801241e:	3720      	adds	r7, #32
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b088      	sub	sp, #32
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801242c:	2300      	movs	r3, #0
 801242e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012430:	230c      	movs	r3, #12
 8012432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012434:	2340      	movs	r3, #64	; 0x40
 8012436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012438:	2300      	movs	r3, #0
 801243a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801243c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012440:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012442:	f107 0308 	add.w	r3, r7, #8
 8012446:	4619      	mov	r1, r3
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff fecb 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801244e:	4a05      	ldr	r2, [pc, #20]	; (8012464 <SDMMC_CmdStopTransfer+0x40>)
 8012450:	210c      	movs	r1, #12
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f998 	bl	8012788 <SDMMC_GetCmdResp1>
 8012458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801245a:	69fb      	ldr	r3, [r7, #28]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	05f5e100 	.word	0x05f5e100

08012468 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b08a      	sub	sp, #40	; 0x28
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012478:	2307      	movs	r3, #7
 801247a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801247c:	2340      	movs	r3, #64	; 0x40
 801247e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012480:	2300      	movs	r3, #0
 8012482:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012488:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801248a:	f107 0310 	add.w	r3, r7, #16
 801248e:	4619      	mov	r1, r3
 8012490:	68f8      	ldr	r0, [r7, #12]
 8012492:	f7ff fea7 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8012496:	f241 3288 	movw	r2, #5000	; 0x1388
 801249a:	2107      	movs	r1, #7
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f000 f973 	bl	8012788 <SDMMC_GetCmdResp1>
 80124a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3728      	adds	r7, #40	; 0x28
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b088      	sub	sp, #32
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80124b6:	2300      	movs	r3, #0
 80124b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80124ba:	2300      	movs	r3, #0
 80124bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80124be:	2300      	movs	r3, #0
 80124c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80124c2:	2300      	movs	r3, #0
 80124c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124cc:	f107 0308 	add.w	r3, r7, #8
 80124d0:	4619      	mov	r1, r3
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff fe86 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f000 f92d 	bl	8012738 <SDMMC_GetCmdError>
 80124de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124e0:	69fb      	ldr	r3, [r7, #28]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3720      	adds	r7, #32
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}

080124ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80124ea:	b580      	push	{r7, lr}
 80124ec:	b088      	sub	sp, #32
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80124f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80124f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80124f8:	2308      	movs	r3, #8
 80124fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80124fc:	2340      	movs	r3, #64	; 0x40
 80124fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012500:	2300      	movs	r3, #0
 8012502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012508:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801250a:	f107 0308 	add.w	r3, r7, #8
 801250e:	4619      	mov	r1, r3
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7ff fe67 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 fb16 	bl	8012b48 <SDMMC_GetCmdResp7>
 801251c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801251e:	69fb      	ldr	r3, [r7, #28]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3720      	adds	r7, #32
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b088      	sub	sp, #32
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012536:	2337      	movs	r3, #55	; 0x37
 8012538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801253a:	2340      	movs	r3, #64	; 0x40
 801253c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801253e:	2300      	movs	r3, #0
 8012540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012546:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012548:	f107 0308 	add.w	r3, r7, #8
 801254c:	4619      	mov	r1, r3
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff fe48 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8012554:	f241 3288 	movw	r2, #5000	; 0x1388
 8012558:	2137      	movs	r1, #55	; 0x37
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 f914 	bl	8012788 <SDMMC_GetCmdResp1>
 8012560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012562:	69fb      	ldr	r3, [r7, #28]
}
 8012564:	4618      	mov	r0, r3
 8012566:	3720      	adds	r7, #32
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801257c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012582:	2329      	movs	r3, #41	; 0x29
 8012584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012586:	2340      	movs	r3, #64	; 0x40
 8012588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801258e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012592:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012594:	f107 0308 	add.w	r3, r7, #8
 8012598:	4619      	mov	r1, r3
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7ff fe22 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fa23 	bl	80129ec <SDMMC_GetCmdResp3>
 80125a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125a8:	69fb      	ldr	r3, [r7, #28]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3720      	adds	r7, #32
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b088      	sub	sp, #32
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
 80125ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80125c0:	2306      	movs	r3, #6
 80125c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80125c4:	2340      	movs	r3, #64	; 0x40
 80125c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125c8:	2300      	movs	r3, #0
 80125ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80125d2:	f107 0308 	add.w	r3, r7, #8
 80125d6:	4619      	mov	r1, r3
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7ff fe03 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80125de:	f241 3288 	movw	r2, #5000	; 0x1388
 80125e2:	2106      	movs	r1, #6
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 f8cf 	bl	8012788 <SDMMC_GetCmdResp1>
 80125ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125ec:	69fb      	ldr	r3, [r7, #28]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3720      	adds	r7, #32
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b088      	sub	sp, #32
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80125fe:	2300      	movs	r3, #0
 8012600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012602:	2333      	movs	r3, #51	; 0x33
 8012604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012606:	2340      	movs	r3, #64	; 0x40
 8012608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801260a:	2300      	movs	r3, #0
 801260c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012612:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012614:	f107 0308 	add.w	r3, r7, #8
 8012618:	4619      	mov	r1, r3
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f7ff fde2 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8012620:	f241 3288 	movw	r2, #5000	; 0x1388
 8012624:	2133      	movs	r1, #51	; 0x33
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f000 f8ae 	bl	8012788 <SDMMC_GetCmdResp1>
 801262c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801262e:	69fb      	ldr	r3, [r7, #28]
}
 8012630:	4618      	mov	r0, r3
 8012632:	3720      	adds	r7, #32
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b088      	sub	sp, #32
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012640:	2300      	movs	r3, #0
 8012642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012644:	2302      	movs	r3, #2
 8012646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012648:	23c0      	movs	r3, #192	; 0xc0
 801264a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801264c:	2300      	movs	r3, #0
 801264e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012654:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012656:	f107 0308 	add.w	r3, r7, #8
 801265a:	4619      	mov	r1, r3
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f7ff fdc1 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 f97c 	bl	8012960 <SDMMC_GetCmdResp2>
 8012668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801266a:	69fb      	ldr	r3, [r7, #28]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3720      	adds	r7, #32
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b088      	sub	sp, #32
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012682:	2309      	movs	r3, #9
 8012684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012686:	23c0      	movs	r3, #192	; 0xc0
 8012688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801268a:	2300      	movs	r3, #0
 801268c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801268e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012694:	f107 0308 	add.w	r3, r7, #8
 8012698:	4619      	mov	r1, r3
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7ff fda2 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f000 f95d 	bl	8012960 <SDMMC_GetCmdResp2>
 80126a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126a8:	69fb      	ldr	r3, [r7, #28]
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3720      	adds	r7, #32
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}

080126b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80126b2:	b580      	push	{r7, lr}
 80126b4:	b088      	sub	sp, #32
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
 80126ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80126bc:	2300      	movs	r3, #0
 80126be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80126c0:	2303      	movs	r3, #3
 80126c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80126c4:	2340      	movs	r3, #64	; 0x40
 80126c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80126c8:	2300      	movs	r3, #0
 80126ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80126cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80126d2:	f107 0308 	add.w	r3, r7, #8
 80126d6:	4619      	mov	r1, r3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7ff fd83 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80126de:	683a      	ldr	r2, [r7, #0]
 80126e0:	2103      	movs	r1, #3
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 f9bc 	bl	8012a60 <SDMMC_GetCmdResp6>
 80126e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126ea:	69fb      	ldr	r3, [r7, #28]
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3720      	adds	r7, #32
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b088      	sub	sp, #32
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012702:	230d      	movs	r3, #13
 8012704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012706:	2340      	movs	r3, #64	; 0x40
 8012708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801270a:	2300      	movs	r3, #0
 801270c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801270e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012714:	f107 0308 	add.w	r3, r7, #8
 8012718:	4619      	mov	r1, r3
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ff fd62 	bl	80121e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8012720:	f241 3288 	movw	r2, #5000	; 0x1388
 8012724:	210d      	movs	r1, #13
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 f82e 	bl	8012788 <SDMMC_GetCmdResp1>
 801272c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801272e:	69fb      	ldr	r3, [r7, #28]
}
 8012730:	4618      	mov	r0, r3
 8012732:	3720      	adds	r7, #32
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8012738:	b490      	push	{r4, r7}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012740:	4b0f      	ldr	r3, [pc, #60]	; (8012780 <SDMMC_GetCmdError+0x48>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a0f      	ldr	r2, [pc, #60]	; (8012784 <SDMMC_GetCmdError+0x4c>)
 8012746:	fba2 2303 	umull	r2, r3, r2, r3
 801274a:	0a5b      	lsrs	r3, r3, #9
 801274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012750:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012754:	4623      	mov	r3, r4
 8012756:	1e5c      	subs	r4, r3, #1
 8012758:	2b00      	cmp	r3, #0
 801275a:	d102      	bne.n	8012762 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801275c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012760:	e009      	b.n	8012776 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801276a:	2b00      	cmp	r3, #0
 801276c:	d0f2      	beq.n	8012754 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	22c5      	movs	r2, #197	; 0xc5
 8012772:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012774:	2300      	movs	r3, #0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bc90      	pop	{r4, r7}
 801277e:	4770      	bx	lr
 8012780:	20000000 	.word	0x20000000
 8012784:	10624dd3 	.word	0x10624dd3

08012788 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012788:	b590      	push	{r4, r7, lr}
 801278a:	b087      	sub	sp, #28
 801278c:	af00      	add	r7, sp, #0
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	460b      	mov	r3, r1
 8012792:	607a      	str	r2, [r7, #4]
 8012794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012796:	4b6f      	ldr	r3, [pc, #444]	; (8012954 <SDMMC_GetCmdResp1+0x1cc>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4a6f      	ldr	r2, [pc, #444]	; (8012958 <SDMMC_GetCmdResp1+0x1d0>)
 801279c:	fba2 2303 	umull	r2, r3, r2, r3
 80127a0:	0a5b      	lsrs	r3, r3, #9
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80127a8:	4623      	mov	r3, r4
 80127aa:	1e5c      	subs	r4, r3, #1
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127b4:	e0c9      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d0f0      	beq.n	80127a8 <SDMMC_GetCmdResp1+0x20>
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1eb      	bne.n	80127a8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d4:	f003 0304 	and.w	r3, r3, #4
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d004      	beq.n	80127e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2204      	movs	r2, #4
 80127e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127e2:	2304      	movs	r3, #4
 80127e4:	e0b1      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ea:	f003 0301 	and.w	r3, r3, #1
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d004      	beq.n	80127fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	2201      	movs	r2, #1
 80127f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127f8:	2301      	movs	r3, #1
 80127fa:	e0a6      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	22c5      	movs	r2, #197	; 0xc5
 8012800:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f7ff fd18 	bl	8012238 <SDIO_GetCommandResponse>
 8012808:	4603      	mov	r3, r0
 801280a:	461a      	mov	r2, r3
 801280c:	7afb      	ldrb	r3, [r7, #11]
 801280e:	4293      	cmp	r3, r2
 8012810:	d001      	beq.n	8012816 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012812:	2301      	movs	r3, #1
 8012814:	e099      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012816:	2100      	movs	r1, #0
 8012818:	68f8      	ldr	r0, [r7, #12]
 801281a:	f7ff fd1a 	bl	8012252 <SDIO_GetResponse>
 801281e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012820:	693a      	ldr	r2, [r7, #16]
 8012822:	4b4e      	ldr	r3, [pc, #312]	; (801295c <SDMMC_GetCmdResp1+0x1d4>)
 8012824:	4013      	ands	r3, r2
 8012826:	2b00      	cmp	r3, #0
 8012828:	d101      	bne.n	801282e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801282a:	2300      	movs	r3, #0
 801282c:	e08d      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	da02      	bge.n	801283a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012838:	e087      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012840:	2b00      	cmp	r3, #0
 8012842:	d001      	beq.n	8012848 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012844:	2340      	movs	r3, #64	; 0x40
 8012846:	e080      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012852:	2380      	movs	r3, #128	; 0x80
 8012854:	e079      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801285c:	2b00      	cmp	r3, #0
 801285e:	d002      	beq.n	8012866 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012864:	e071      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012874:	e069      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801287c:	2b00      	cmp	r3, #0
 801287e:	d002      	beq.n	8012886 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012884:	e061      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012894:	e059      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801289c:	2b00      	cmp	r3, #0
 801289e:	d002      	beq.n	80128a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80128a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128a4:	e051      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d002      	beq.n	80128b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80128b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80128b4:	e049      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d002      	beq.n	80128c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80128c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80128c4:	e041      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80128d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80128d4:	e039      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d002      	beq.n	80128e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80128e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80128e4:	e031      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d002      	beq.n	80128f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80128f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80128f4:	e029      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d002      	beq.n	8012906 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012904:	e021      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801290c:	2b00      	cmp	r3, #0
 801290e:	d002      	beq.n	8012916 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012910:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012914:	e019      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012920:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012924:	e011      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012930:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012934:	e009      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	f003 0308 	and.w	r3, r3, #8
 801293c:	2b00      	cmp	r3, #0
 801293e:	d002      	beq.n	8012946 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012940:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012944:	e001      	b.n	801294a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801294a:	4618      	mov	r0, r3
 801294c:	371c      	adds	r7, #28
 801294e:	46bd      	mov	sp, r7
 8012950:	bd90      	pop	{r4, r7, pc}
 8012952:	bf00      	nop
 8012954:	20000000 	.word	0x20000000
 8012958:	10624dd3 	.word	0x10624dd3
 801295c:	fdffe008 	.word	0xfdffe008

08012960 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8012960:	b490      	push	{r4, r7}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012968:	4b1e      	ldr	r3, [pc, #120]	; (80129e4 <SDMMC_GetCmdResp2+0x84>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4a1e      	ldr	r2, [pc, #120]	; (80129e8 <SDMMC_GetCmdResp2+0x88>)
 801296e:	fba2 2303 	umull	r2, r3, r2, r3
 8012972:	0a5b      	lsrs	r3, r3, #9
 8012974:	f241 3288 	movw	r2, #5000	; 0x1388
 8012978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801297c:	4623      	mov	r3, r4
 801297e:	1e5c      	subs	r4, r3, #1
 8012980:	2b00      	cmp	r3, #0
 8012982:	d102      	bne.n	801298a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012988:	e026      	b.n	80129d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801298e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012996:	2b00      	cmp	r3, #0
 8012998:	d0f0      	beq.n	801297c <SDMMC_GetCmdResp2+0x1c>
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d1eb      	bne.n	801297c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a8:	f003 0304 	and.w	r3, r3, #4
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d004      	beq.n	80129ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2204      	movs	r2, #4
 80129b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129b6:	2304      	movs	r3, #4
 80129b8:	e00e      	b.n	80129d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129be:	f003 0301 	and.w	r3, r3, #1
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d004      	beq.n	80129d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2201      	movs	r2, #1
 80129ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129cc:	2301      	movs	r3, #1
 80129ce:	e003      	b.n	80129d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	22c5      	movs	r2, #197	; 0xc5
 80129d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80129d6:	2300      	movs	r3, #0
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bc90      	pop	{r4, r7}
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	20000000 	.word	0x20000000
 80129e8:	10624dd3 	.word	0x10624dd3

080129ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80129ec:	b490      	push	{r4, r7}
 80129ee:	b084      	sub	sp, #16
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80129f4:	4b18      	ldr	r3, [pc, #96]	; (8012a58 <SDMMC_GetCmdResp3+0x6c>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4a18      	ldr	r2, [pc, #96]	; (8012a5c <SDMMC_GetCmdResp3+0x70>)
 80129fa:	fba2 2303 	umull	r2, r3, r2, r3
 80129fe:	0a5b      	lsrs	r3, r3, #9
 8012a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012a08:	4623      	mov	r3, r4
 8012a0a:	1e5c      	subs	r4, r3, #1
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d102      	bne.n	8012a16 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a14:	e01b      	b.n	8012a4e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a1a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d0f0      	beq.n	8012a08 <SDMMC_GetCmdResp3+0x1c>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1eb      	bne.n	8012a08 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a34:	f003 0304 	and.w	r3, r3, #4
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d004      	beq.n	8012a46 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2204      	movs	r2, #4
 8012a40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a42:	2304      	movs	r3, #4
 8012a44:	e003      	b.n	8012a4e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	22c5      	movs	r2, #197	; 0xc5
 8012a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012a4c:	2300      	movs	r3, #0
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3710      	adds	r7, #16
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bc90      	pop	{r4, r7}
 8012a56:	4770      	bx	lr
 8012a58:	20000000 	.word	0x20000000
 8012a5c:	10624dd3 	.word	0x10624dd3

08012a60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012a60:	b590      	push	{r4, r7, lr}
 8012a62:	b087      	sub	sp, #28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	460b      	mov	r3, r1
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012a6e:	4b34      	ldr	r3, [pc, #208]	; (8012b40 <SDMMC_GetCmdResp6+0xe0>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4a34      	ldr	r2, [pc, #208]	; (8012b44 <SDMMC_GetCmdResp6+0xe4>)
 8012a74:	fba2 2303 	umull	r2, r3, r2, r3
 8012a78:	0a5b      	lsrs	r3, r3, #9
 8012a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a7e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012a82:	4623      	mov	r3, r4
 8012a84:	1e5c      	subs	r4, r3, #1
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d102      	bne.n	8012a90 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a8e:	e052      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a94:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d0f0      	beq.n	8012a82 <SDMMC_GetCmdResp6+0x22>
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d1eb      	bne.n	8012a82 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aae:	f003 0304 	and.w	r3, r3, #4
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d004      	beq.n	8012ac0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2204      	movs	r2, #4
 8012aba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012abc:	2304      	movs	r3, #4
 8012abe:	e03a      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ac4:	f003 0301 	and.w	r3, r3, #1
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d004      	beq.n	8012ad6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2201      	movs	r2, #1
 8012ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	e02f      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012ad6:	68f8      	ldr	r0, [r7, #12]
 8012ad8:	f7ff fbae 	bl	8012238 <SDIO_GetCommandResponse>
 8012adc:	4603      	mov	r3, r0
 8012ade:	461a      	mov	r2, r3
 8012ae0:	7afb      	ldrb	r3, [r7, #11]
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	d001      	beq.n	8012aea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e025      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	22c5      	movs	r2, #197	; 0xc5
 8012aee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012af0:	2100      	movs	r1, #0
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	f7ff fbad 	bl	8012252 <SDIO_GetResponse>
 8012af8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d106      	bne.n	8012b12 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	0c1b      	lsrs	r3, r3, #16
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	e011      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d002      	beq.n	8012b22 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012b20:	e009      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b30:	e001      	b.n	8012b36 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	371c      	adds	r7, #28
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd90      	pop	{r4, r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	20000000 	.word	0x20000000
 8012b44:	10624dd3 	.word	0x10624dd3

08012b48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012b48:	b490      	push	{r4, r7}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012b50:	4b21      	ldr	r3, [pc, #132]	; (8012bd8 <SDMMC_GetCmdResp7+0x90>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	4a21      	ldr	r2, [pc, #132]	; (8012bdc <SDMMC_GetCmdResp7+0x94>)
 8012b56:	fba2 2303 	umull	r2, r3, r2, r3
 8012b5a:	0a5b      	lsrs	r3, r3, #9
 8012b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012b64:	4623      	mov	r3, r4
 8012b66:	1e5c      	subs	r4, r3, #1
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d102      	bne.n	8012b72 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b70:	e02c      	b.n	8012bcc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d0f0      	beq.n	8012b64 <SDMMC_GetCmdResp7+0x1c>
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1eb      	bne.n	8012b64 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b90:	f003 0304 	and.w	r3, r3, #4
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d004      	beq.n	8012ba2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b9e:	2304      	movs	r3, #4
 8012ba0:	e014      	b.n	8012bcc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba6:	f003 0301 	and.w	r3, r3, #1
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d004      	beq.n	8012bb8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	e009      	b.n	8012bcc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d002      	beq.n	8012bca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2240      	movs	r2, #64	; 0x40
 8012bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012bca:	2300      	movs	r3, #0
  
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3710      	adds	r7, #16
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bc90      	pop	{r4, r7}
 8012bd4:	4770      	bx	lr
 8012bd6:	bf00      	nop
 8012bd8:	20000000 	.word	0x20000000
 8012bdc:	10624dd3 	.word	0x10624dd3

08012be0 <main>:




int main(void)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0
  hwInit();
 8012be4:	f7f5 f87a 	bl	8007cdc <hwInit>
  apInit();
 8012be8:	f7ee fa1e 	bl	8001028 <apInit>

  apMain();
 8012bec:	f7ee fa2a 	bl	8001044 <apMain>

  return 0;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	bd80      	pop	{r7, pc}
	...

08012bf8 <__errno>:
 8012bf8:	4b01      	ldr	r3, [pc, #4]	; (8012c00 <__errno+0x8>)
 8012bfa:	6818      	ldr	r0, [r3, #0]
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	200000c8 	.word	0x200000c8

08012c04 <__libc_init_array>:
 8012c04:	b570      	push	{r4, r5, r6, lr}
 8012c06:	4d0d      	ldr	r5, [pc, #52]	; (8012c3c <__libc_init_array+0x38>)
 8012c08:	4c0d      	ldr	r4, [pc, #52]	; (8012c40 <__libc_init_array+0x3c>)
 8012c0a:	1b64      	subs	r4, r4, r5
 8012c0c:	10a4      	asrs	r4, r4, #2
 8012c0e:	2600      	movs	r6, #0
 8012c10:	42a6      	cmp	r6, r4
 8012c12:	d109      	bne.n	8012c28 <__libc_init_array+0x24>
 8012c14:	4d0b      	ldr	r5, [pc, #44]	; (8012c44 <__libc_init_array+0x40>)
 8012c16:	4c0c      	ldr	r4, [pc, #48]	; (8012c48 <__libc_init_array+0x44>)
 8012c18:	f004 fb1e 	bl	8017258 <_init>
 8012c1c:	1b64      	subs	r4, r4, r5
 8012c1e:	10a4      	asrs	r4, r4, #2
 8012c20:	2600      	movs	r6, #0
 8012c22:	42a6      	cmp	r6, r4
 8012c24:	d105      	bne.n	8012c32 <__libc_init_array+0x2e>
 8012c26:	bd70      	pop	{r4, r5, r6, pc}
 8012c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c2c:	4798      	blx	r3
 8012c2e:	3601      	adds	r6, #1
 8012c30:	e7ee      	b.n	8012c10 <__libc_init_array+0xc>
 8012c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c36:	4798      	blx	r3
 8012c38:	3601      	adds	r6, #1
 8012c3a:	e7f2      	b.n	8012c22 <__libc_init_array+0x1e>
 8012c3c:	08025a5c 	.word	0x08025a5c
 8012c40:	08025a5c 	.word	0x08025a5c
 8012c44:	08025a5c 	.word	0x08025a5c
 8012c48:	08025a60 	.word	0x08025a60

08012c4c <malloc>:
 8012c4c:	4b02      	ldr	r3, [pc, #8]	; (8012c58 <malloc+0xc>)
 8012c4e:	4601      	mov	r1, r0
 8012c50:	6818      	ldr	r0, [r3, #0]
 8012c52:	f000 b88d 	b.w	8012d70 <_malloc_r>
 8012c56:	bf00      	nop
 8012c58:	200000c8 	.word	0x200000c8

08012c5c <free>:
 8012c5c:	4b02      	ldr	r3, [pc, #8]	; (8012c68 <free+0xc>)
 8012c5e:	4601      	mov	r1, r0
 8012c60:	6818      	ldr	r0, [r3, #0]
 8012c62:	f000 b819 	b.w	8012c98 <_free_r>
 8012c66:	bf00      	nop
 8012c68:	200000c8 	.word	0x200000c8

08012c6c <memcpy>:
 8012c6c:	440a      	add	r2, r1
 8012c6e:	4291      	cmp	r1, r2
 8012c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c74:	d100      	bne.n	8012c78 <memcpy+0xc>
 8012c76:	4770      	bx	lr
 8012c78:	b510      	push	{r4, lr}
 8012c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c82:	4291      	cmp	r1, r2
 8012c84:	d1f9      	bne.n	8012c7a <memcpy+0xe>
 8012c86:	bd10      	pop	{r4, pc}

08012c88 <memset>:
 8012c88:	4402      	add	r2, r0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d100      	bne.n	8012c92 <memset+0xa>
 8012c90:	4770      	bx	lr
 8012c92:	f803 1b01 	strb.w	r1, [r3], #1
 8012c96:	e7f9      	b.n	8012c8c <memset+0x4>

08012c98 <_free_r>:
 8012c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c9a:	2900      	cmp	r1, #0
 8012c9c:	d044      	beq.n	8012d28 <_free_r+0x90>
 8012c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ca2:	9001      	str	r0, [sp, #4]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8012caa:	bfb8      	it	lt
 8012cac:	18e4      	addlt	r4, r4, r3
 8012cae:	f003 f995 	bl	8015fdc <__malloc_lock>
 8012cb2:	4a1e      	ldr	r2, [pc, #120]	; (8012d2c <_free_r+0x94>)
 8012cb4:	9801      	ldr	r0, [sp, #4]
 8012cb6:	6813      	ldr	r3, [r2, #0]
 8012cb8:	b933      	cbnz	r3, 8012cc8 <_free_r+0x30>
 8012cba:	6063      	str	r3, [r4, #4]
 8012cbc:	6014      	str	r4, [r2, #0]
 8012cbe:	b003      	add	sp, #12
 8012cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012cc4:	f003 b990 	b.w	8015fe8 <__malloc_unlock>
 8012cc8:	42a3      	cmp	r3, r4
 8012cca:	d908      	bls.n	8012cde <_free_r+0x46>
 8012ccc:	6825      	ldr	r5, [r4, #0]
 8012cce:	1961      	adds	r1, r4, r5
 8012cd0:	428b      	cmp	r3, r1
 8012cd2:	bf01      	itttt	eq
 8012cd4:	6819      	ldreq	r1, [r3, #0]
 8012cd6:	685b      	ldreq	r3, [r3, #4]
 8012cd8:	1949      	addeq	r1, r1, r5
 8012cda:	6021      	streq	r1, [r4, #0]
 8012cdc:	e7ed      	b.n	8012cba <_free_r+0x22>
 8012cde:	461a      	mov	r2, r3
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	b10b      	cbz	r3, 8012ce8 <_free_r+0x50>
 8012ce4:	42a3      	cmp	r3, r4
 8012ce6:	d9fa      	bls.n	8012cde <_free_r+0x46>
 8012ce8:	6811      	ldr	r1, [r2, #0]
 8012cea:	1855      	adds	r5, r2, r1
 8012cec:	42a5      	cmp	r5, r4
 8012cee:	d10b      	bne.n	8012d08 <_free_r+0x70>
 8012cf0:	6824      	ldr	r4, [r4, #0]
 8012cf2:	4421      	add	r1, r4
 8012cf4:	1854      	adds	r4, r2, r1
 8012cf6:	42a3      	cmp	r3, r4
 8012cf8:	6011      	str	r1, [r2, #0]
 8012cfa:	d1e0      	bne.n	8012cbe <_free_r+0x26>
 8012cfc:	681c      	ldr	r4, [r3, #0]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	6053      	str	r3, [r2, #4]
 8012d02:	4421      	add	r1, r4
 8012d04:	6011      	str	r1, [r2, #0]
 8012d06:	e7da      	b.n	8012cbe <_free_r+0x26>
 8012d08:	d902      	bls.n	8012d10 <_free_r+0x78>
 8012d0a:	230c      	movs	r3, #12
 8012d0c:	6003      	str	r3, [r0, #0]
 8012d0e:	e7d6      	b.n	8012cbe <_free_r+0x26>
 8012d10:	6825      	ldr	r5, [r4, #0]
 8012d12:	1961      	adds	r1, r4, r5
 8012d14:	428b      	cmp	r3, r1
 8012d16:	bf04      	itt	eq
 8012d18:	6819      	ldreq	r1, [r3, #0]
 8012d1a:	685b      	ldreq	r3, [r3, #4]
 8012d1c:	6063      	str	r3, [r4, #4]
 8012d1e:	bf04      	itt	eq
 8012d20:	1949      	addeq	r1, r1, r5
 8012d22:	6021      	streq	r1, [r4, #0]
 8012d24:	6054      	str	r4, [r2, #4]
 8012d26:	e7ca      	b.n	8012cbe <_free_r+0x26>
 8012d28:	b003      	add	sp, #12
 8012d2a:	bd30      	pop	{r4, r5, pc}
 8012d2c:	2000d0a4 	.word	0x2000d0a4

08012d30 <sbrk_aligned>:
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	4e0e      	ldr	r6, [pc, #56]	; (8012d6c <sbrk_aligned+0x3c>)
 8012d34:	460c      	mov	r4, r1
 8012d36:	6831      	ldr	r1, [r6, #0]
 8012d38:	4605      	mov	r5, r0
 8012d3a:	b911      	cbnz	r1, 8012d42 <sbrk_aligned+0x12>
 8012d3c:	f000 fcf6 	bl	801372c <_sbrk_r>
 8012d40:	6030      	str	r0, [r6, #0]
 8012d42:	4621      	mov	r1, r4
 8012d44:	4628      	mov	r0, r5
 8012d46:	f000 fcf1 	bl	801372c <_sbrk_r>
 8012d4a:	1c43      	adds	r3, r0, #1
 8012d4c:	d00a      	beq.n	8012d64 <sbrk_aligned+0x34>
 8012d4e:	1cc4      	adds	r4, r0, #3
 8012d50:	f024 0403 	bic.w	r4, r4, #3
 8012d54:	42a0      	cmp	r0, r4
 8012d56:	d007      	beq.n	8012d68 <sbrk_aligned+0x38>
 8012d58:	1a21      	subs	r1, r4, r0
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	f000 fce6 	bl	801372c <_sbrk_r>
 8012d60:	3001      	adds	r0, #1
 8012d62:	d101      	bne.n	8012d68 <sbrk_aligned+0x38>
 8012d64:	f04f 34ff 	mov.w	r4, #4294967295
 8012d68:	4620      	mov	r0, r4
 8012d6a:	bd70      	pop	{r4, r5, r6, pc}
 8012d6c:	2000d0a8 	.word	0x2000d0a8

08012d70 <_malloc_r>:
 8012d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d74:	1ccd      	adds	r5, r1, #3
 8012d76:	f025 0503 	bic.w	r5, r5, #3
 8012d7a:	3508      	adds	r5, #8
 8012d7c:	2d0c      	cmp	r5, #12
 8012d7e:	bf38      	it	cc
 8012d80:	250c      	movcc	r5, #12
 8012d82:	2d00      	cmp	r5, #0
 8012d84:	4607      	mov	r7, r0
 8012d86:	db01      	blt.n	8012d8c <_malloc_r+0x1c>
 8012d88:	42a9      	cmp	r1, r5
 8012d8a:	d905      	bls.n	8012d98 <_malloc_r+0x28>
 8012d8c:	230c      	movs	r3, #12
 8012d8e:	603b      	str	r3, [r7, #0]
 8012d90:	2600      	movs	r6, #0
 8012d92:	4630      	mov	r0, r6
 8012d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d98:	4e2e      	ldr	r6, [pc, #184]	; (8012e54 <_malloc_r+0xe4>)
 8012d9a:	f003 f91f 	bl	8015fdc <__malloc_lock>
 8012d9e:	6833      	ldr	r3, [r6, #0]
 8012da0:	461c      	mov	r4, r3
 8012da2:	bb34      	cbnz	r4, 8012df2 <_malloc_r+0x82>
 8012da4:	4629      	mov	r1, r5
 8012da6:	4638      	mov	r0, r7
 8012da8:	f7ff ffc2 	bl	8012d30 <sbrk_aligned>
 8012dac:	1c43      	adds	r3, r0, #1
 8012dae:	4604      	mov	r4, r0
 8012db0:	d14d      	bne.n	8012e4e <_malloc_r+0xde>
 8012db2:	6834      	ldr	r4, [r6, #0]
 8012db4:	4626      	mov	r6, r4
 8012db6:	2e00      	cmp	r6, #0
 8012db8:	d140      	bne.n	8012e3c <_malloc_r+0xcc>
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	4631      	mov	r1, r6
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	eb04 0803 	add.w	r8, r4, r3
 8012dc4:	f000 fcb2 	bl	801372c <_sbrk_r>
 8012dc8:	4580      	cmp	r8, r0
 8012dca:	d13a      	bne.n	8012e42 <_malloc_r+0xd2>
 8012dcc:	6821      	ldr	r1, [r4, #0]
 8012dce:	3503      	adds	r5, #3
 8012dd0:	1a6d      	subs	r5, r5, r1
 8012dd2:	f025 0503 	bic.w	r5, r5, #3
 8012dd6:	3508      	adds	r5, #8
 8012dd8:	2d0c      	cmp	r5, #12
 8012dda:	bf38      	it	cc
 8012ddc:	250c      	movcc	r5, #12
 8012dde:	4629      	mov	r1, r5
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7ff ffa5 	bl	8012d30 <sbrk_aligned>
 8012de6:	3001      	adds	r0, #1
 8012de8:	d02b      	beq.n	8012e42 <_malloc_r+0xd2>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	442b      	add	r3, r5
 8012dee:	6023      	str	r3, [r4, #0]
 8012df0:	e00e      	b.n	8012e10 <_malloc_r+0xa0>
 8012df2:	6822      	ldr	r2, [r4, #0]
 8012df4:	1b52      	subs	r2, r2, r5
 8012df6:	d41e      	bmi.n	8012e36 <_malloc_r+0xc6>
 8012df8:	2a0b      	cmp	r2, #11
 8012dfa:	d916      	bls.n	8012e2a <_malloc_r+0xba>
 8012dfc:	1961      	adds	r1, r4, r5
 8012dfe:	42a3      	cmp	r3, r4
 8012e00:	6025      	str	r5, [r4, #0]
 8012e02:	bf18      	it	ne
 8012e04:	6059      	strne	r1, [r3, #4]
 8012e06:	6863      	ldr	r3, [r4, #4]
 8012e08:	bf08      	it	eq
 8012e0a:	6031      	streq	r1, [r6, #0]
 8012e0c:	5162      	str	r2, [r4, r5]
 8012e0e:	604b      	str	r3, [r1, #4]
 8012e10:	4638      	mov	r0, r7
 8012e12:	f104 060b 	add.w	r6, r4, #11
 8012e16:	f003 f8e7 	bl	8015fe8 <__malloc_unlock>
 8012e1a:	f026 0607 	bic.w	r6, r6, #7
 8012e1e:	1d23      	adds	r3, r4, #4
 8012e20:	1af2      	subs	r2, r6, r3
 8012e22:	d0b6      	beq.n	8012d92 <_malloc_r+0x22>
 8012e24:	1b9b      	subs	r3, r3, r6
 8012e26:	50a3      	str	r3, [r4, r2]
 8012e28:	e7b3      	b.n	8012d92 <_malloc_r+0x22>
 8012e2a:	6862      	ldr	r2, [r4, #4]
 8012e2c:	42a3      	cmp	r3, r4
 8012e2e:	bf0c      	ite	eq
 8012e30:	6032      	streq	r2, [r6, #0]
 8012e32:	605a      	strne	r2, [r3, #4]
 8012e34:	e7ec      	b.n	8012e10 <_malloc_r+0xa0>
 8012e36:	4623      	mov	r3, r4
 8012e38:	6864      	ldr	r4, [r4, #4]
 8012e3a:	e7b2      	b.n	8012da2 <_malloc_r+0x32>
 8012e3c:	4634      	mov	r4, r6
 8012e3e:	6876      	ldr	r6, [r6, #4]
 8012e40:	e7b9      	b.n	8012db6 <_malloc_r+0x46>
 8012e42:	230c      	movs	r3, #12
 8012e44:	603b      	str	r3, [r7, #0]
 8012e46:	4638      	mov	r0, r7
 8012e48:	f003 f8ce 	bl	8015fe8 <__malloc_unlock>
 8012e4c:	e7a1      	b.n	8012d92 <_malloc_r+0x22>
 8012e4e:	6025      	str	r5, [r4, #0]
 8012e50:	e7de      	b.n	8012e10 <_malloc_r+0xa0>
 8012e52:	bf00      	nop
 8012e54:	2000d0a4 	.word	0x2000d0a4

08012e58 <__cvt>:
 8012e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e5c:	ec55 4b10 	vmov	r4, r5, d0
 8012e60:	2d00      	cmp	r5, #0
 8012e62:	460e      	mov	r6, r1
 8012e64:	4619      	mov	r1, r3
 8012e66:	462b      	mov	r3, r5
 8012e68:	bfbb      	ittet	lt
 8012e6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012e6e:	461d      	movlt	r5, r3
 8012e70:	2300      	movge	r3, #0
 8012e72:	232d      	movlt	r3, #45	; 0x2d
 8012e74:	700b      	strb	r3, [r1, #0]
 8012e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012e7c:	4691      	mov	r9, r2
 8012e7e:	f023 0820 	bic.w	r8, r3, #32
 8012e82:	bfbc      	itt	lt
 8012e84:	4622      	movlt	r2, r4
 8012e86:	4614      	movlt	r4, r2
 8012e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e8c:	d005      	beq.n	8012e9a <__cvt+0x42>
 8012e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012e92:	d100      	bne.n	8012e96 <__cvt+0x3e>
 8012e94:	3601      	adds	r6, #1
 8012e96:	2102      	movs	r1, #2
 8012e98:	e000      	b.n	8012e9c <__cvt+0x44>
 8012e9a:	2103      	movs	r1, #3
 8012e9c:	ab03      	add	r3, sp, #12
 8012e9e:	9301      	str	r3, [sp, #4]
 8012ea0:	ab02      	add	r3, sp, #8
 8012ea2:	9300      	str	r3, [sp, #0]
 8012ea4:	ec45 4b10 	vmov	d0, r4, r5
 8012ea8:	4653      	mov	r3, sl
 8012eaa:	4632      	mov	r2, r6
 8012eac:	f001 fd04 	bl	80148b8 <_dtoa_r>
 8012eb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012eb4:	4607      	mov	r7, r0
 8012eb6:	d102      	bne.n	8012ebe <__cvt+0x66>
 8012eb8:	f019 0f01 	tst.w	r9, #1
 8012ebc:	d022      	beq.n	8012f04 <__cvt+0xac>
 8012ebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012ec2:	eb07 0906 	add.w	r9, r7, r6
 8012ec6:	d110      	bne.n	8012eea <__cvt+0x92>
 8012ec8:	783b      	ldrb	r3, [r7, #0]
 8012eca:	2b30      	cmp	r3, #48	; 0x30
 8012ecc:	d10a      	bne.n	8012ee4 <__cvt+0x8c>
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	4629      	mov	r1, r5
 8012ed6:	f7ed fe0f 	bl	8000af8 <__aeabi_dcmpeq>
 8012eda:	b918      	cbnz	r0, 8012ee4 <__cvt+0x8c>
 8012edc:	f1c6 0601 	rsb	r6, r6, #1
 8012ee0:	f8ca 6000 	str.w	r6, [sl]
 8012ee4:	f8da 3000 	ldr.w	r3, [sl]
 8012ee8:	4499      	add	r9, r3
 8012eea:	2200      	movs	r2, #0
 8012eec:	2300      	movs	r3, #0
 8012eee:	4620      	mov	r0, r4
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	f7ed fe01 	bl	8000af8 <__aeabi_dcmpeq>
 8012ef6:	b108      	cbz	r0, 8012efc <__cvt+0xa4>
 8012ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8012efc:	2230      	movs	r2, #48	; 0x30
 8012efe:	9b03      	ldr	r3, [sp, #12]
 8012f00:	454b      	cmp	r3, r9
 8012f02:	d307      	bcc.n	8012f14 <__cvt+0xbc>
 8012f04:	9b03      	ldr	r3, [sp, #12]
 8012f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f08:	1bdb      	subs	r3, r3, r7
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	6013      	str	r3, [r2, #0]
 8012f0e:	b004      	add	sp, #16
 8012f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f14:	1c59      	adds	r1, r3, #1
 8012f16:	9103      	str	r1, [sp, #12]
 8012f18:	701a      	strb	r2, [r3, #0]
 8012f1a:	e7f0      	b.n	8012efe <__cvt+0xa6>

08012f1c <__exponent>:
 8012f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2900      	cmp	r1, #0
 8012f22:	bfb8      	it	lt
 8012f24:	4249      	neglt	r1, r1
 8012f26:	f803 2b02 	strb.w	r2, [r3], #2
 8012f2a:	bfb4      	ite	lt
 8012f2c:	222d      	movlt	r2, #45	; 0x2d
 8012f2e:	222b      	movge	r2, #43	; 0x2b
 8012f30:	2909      	cmp	r1, #9
 8012f32:	7042      	strb	r2, [r0, #1]
 8012f34:	dd2a      	ble.n	8012f8c <__exponent+0x70>
 8012f36:	f10d 0407 	add.w	r4, sp, #7
 8012f3a:	46a4      	mov	ip, r4
 8012f3c:	270a      	movs	r7, #10
 8012f3e:	46a6      	mov	lr, r4
 8012f40:	460a      	mov	r2, r1
 8012f42:	fb91 f6f7 	sdiv	r6, r1, r7
 8012f46:	fb07 1516 	mls	r5, r7, r6, r1
 8012f4a:	3530      	adds	r5, #48	; 0x30
 8012f4c:	2a63      	cmp	r2, #99	; 0x63
 8012f4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012f52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012f56:	4631      	mov	r1, r6
 8012f58:	dcf1      	bgt.n	8012f3e <__exponent+0x22>
 8012f5a:	3130      	adds	r1, #48	; 0x30
 8012f5c:	f1ae 0502 	sub.w	r5, lr, #2
 8012f60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012f64:	1c44      	adds	r4, r0, #1
 8012f66:	4629      	mov	r1, r5
 8012f68:	4561      	cmp	r1, ip
 8012f6a:	d30a      	bcc.n	8012f82 <__exponent+0x66>
 8012f6c:	f10d 0209 	add.w	r2, sp, #9
 8012f70:	eba2 020e 	sub.w	r2, r2, lr
 8012f74:	4565      	cmp	r5, ip
 8012f76:	bf88      	it	hi
 8012f78:	2200      	movhi	r2, #0
 8012f7a:	4413      	add	r3, r2
 8012f7c:	1a18      	subs	r0, r3, r0
 8012f7e:	b003      	add	sp, #12
 8012f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012f8a:	e7ed      	b.n	8012f68 <__exponent+0x4c>
 8012f8c:	2330      	movs	r3, #48	; 0x30
 8012f8e:	3130      	adds	r1, #48	; 0x30
 8012f90:	7083      	strb	r3, [r0, #2]
 8012f92:	70c1      	strb	r1, [r0, #3]
 8012f94:	1d03      	adds	r3, r0, #4
 8012f96:	e7f1      	b.n	8012f7c <__exponent+0x60>

08012f98 <_printf_float>:
 8012f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f9c:	ed2d 8b02 	vpush	{d8}
 8012fa0:	b08d      	sub	sp, #52	; 0x34
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012fa8:	4616      	mov	r6, r2
 8012faa:	461f      	mov	r7, r3
 8012fac:	4605      	mov	r5, r0
 8012fae:	f002 ff97 	bl	8015ee0 <_localeconv_r>
 8012fb2:	f8d0 a000 	ldr.w	sl, [r0]
 8012fb6:	4650      	mov	r0, sl
 8012fb8:	f7ed f91c 	bl	80001f4 <strlen>
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8012fc0:	6823      	ldr	r3, [r4, #0]
 8012fc2:	9305      	str	r3, [sp, #20]
 8012fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8012fc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012fcc:	3307      	adds	r3, #7
 8012fce:	f023 0307 	bic.w	r3, r3, #7
 8012fd2:	f103 0208 	add.w	r2, r3, #8
 8012fd6:	f8c8 2000 	str.w	r2, [r8]
 8012fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012fe2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012fe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012fea:	9307      	str	r3, [sp, #28]
 8012fec:	f8cd 8018 	str.w	r8, [sp, #24]
 8012ff0:	ee08 0a10 	vmov	s16, r0
 8012ff4:	4b9f      	ldr	r3, [pc, #636]	; (8013274 <_printf_float+0x2dc>)
 8012ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffe:	f7ed fdad 	bl	8000b5c <__aeabi_dcmpun>
 8013002:	bb88      	cbnz	r0, 8013068 <_printf_float+0xd0>
 8013004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013008:	4b9a      	ldr	r3, [pc, #616]	; (8013274 <_printf_float+0x2dc>)
 801300a:	f04f 32ff 	mov.w	r2, #4294967295
 801300e:	f7ed fd87 	bl	8000b20 <__aeabi_dcmple>
 8013012:	bb48      	cbnz	r0, 8013068 <_printf_float+0xd0>
 8013014:	2200      	movs	r2, #0
 8013016:	2300      	movs	r3, #0
 8013018:	4640      	mov	r0, r8
 801301a:	4649      	mov	r1, r9
 801301c:	f7ed fd76 	bl	8000b0c <__aeabi_dcmplt>
 8013020:	b110      	cbz	r0, 8013028 <_printf_float+0x90>
 8013022:	232d      	movs	r3, #45	; 0x2d
 8013024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013028:	4b93      	ldr	r3, [pc, #588]	; (8013278 <_printf_float+0x2e0>)
 801302a:	4894      	ldr	r0, [pc, #592]	; (801327c <_printf_float+0x2e4>)
 801302c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013030:	bf94      	ite	ls
 8013032:	4698      	movls	r8, r3
 8013034:	4680      	movhi	r8, r0
 8013036:	2303      	movs	r3, #3
 8013038:	6123      	str	r3, [r4, #16]
 801303a:	9b05      	ldr	r3, [sp, #20]
 801303c:	f023 0204 	bic.w	r2, r3, #4
 8013040:	6022      	str	r2, [r4, #0]
 8013042:	f04f 0900 	mov.w	r9, #0
 8013046:	9700      	str	r7, [sp, #0]
 8013048:	4633      	mov	r3, r6
 801304a:	aa0b      	add	r2, sp, #44	; 0x2c
 801304c:	4621      	mov	r1, r4
 801304e:	4628      	mov	r0, r5
 8013050:	f000 f9d8 	bl	8013404 <_printf_common>
 8013054:	3001      	adds	r0, #1
 8013056:	f040 8090 	bne.w	801317a <_printf_float+0x1e2>
 801305a:	f04f 30ff 	mov.w	r0, #4294967295
 801305e:	b00d      	add	sp, #52	; 0x34
 8013060:	ecbd 8b02 	vpop	{d8}
 8013064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013068:	4642      	mov	r2, r8
 801306a:	464b      	mov	r3, r9
 801306c:	4640      	mov	r0, r8
 801306e:	4649      	mov	r1, r9
 8013070:	f7ed fd74 	bl	8000b5c <__aeabi_dcmpun>
 8013074:	b140      	cbz	r0, 8013088 <_printf_float+0xf0>
 8013076:	464b      	mov	r3, r9
 8013078:	2b00      	cmp	r3, #0
 801307a:	bfbc      	itt	lt
 801307c:	232d      	movlt	r3, #45	; 0x2d
 801307e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013082:	487f      	ldr	r0, [pc, #508]	; (8013280 <_printf_float+0x2e8>)
 8013084:	4b7f      	ldr	r3, [pc, #508]	; (8013284 <_printf_float+0x2ec>)
 8013086:	e7d1      	b.n	801302c <_printf_float+0x94>
 8013088:	6863      	ldr	r3, [r4, #4]
 801308a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801308e:	9206      	str	r2, [sp, #24]
 8013090:	1c5a      	adds	r2, r3, #1
 8013092:	d13f      	bne.n	8013114 <_printf_float+0x17c>
 8013094:	2306      	movs	r3, #6
 8013096:	6063      	str	r3, [r4, #4]
 8013098:	9b05      	ldr	r3, [sp, #20]
 801309a:	6861      	ldr	r1, [r4, #4]
 801309c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80130a0:	2300      	movs	r3, #0
 80130a2:	9303      	str	r3, [sp, #12]
 80130a4:	ab0a      	add	r3, sp, #40	; 0x28
 80130a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80130aa:	ab09      	add	r3, sp, #36	; 0x24
 80130ac:	ec49 8b10 	vmov	d0, r8, r9
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	6022      	str	r2, [r4, #0]
 80130b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80130b8:	4628      	mov	r0, r5
 80130ba:	f7ff fecd 	bl	8012e58 <__cvt>
 80130be:	9b06      	ldr	r3, [sp, #24]
 80130c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130c2:	2b47      	cmp	r3, #71	; 0x47
 80130c4:	4680      	mov	r8, r0
 80130c6:	d108      	bne.n	80130da <_printf_float+0x142>
 80130c8:	1cc8      	adds	r0, r1, #3
 80130ca:	db02      	blt.n	80130d2 <_printf_float+0x13a>
 80130cc:	6863      	ldr	r3, [r4, #4]
 80130ce:	4299      	cmp	r1, r3
 80130d0:	dd41      	ble.n	8013156 <_printf_float+0x1be>
 80130d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80130d6:	fa5f fb8b 	uxtb.w	fp, fp
 80130da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80130de:	d820      	bhi.n	8013122 <_printf_float+0x18a>
 80130e0:	3901      	subs	r1, #1
 80130e2:	465a      	mov	r2, fp
 80130e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80130e8:	9109      	str	r1, [sp, #36]	; 0x24
 80130ea:	f7ff ff17 	bl	8012f1c <__exponent>
 80130ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130f0:	1813      	adds	r3, r2, r0
 80130f2:	2a01      	cmp	r2, #1
 80130f4:	4681      	mov	r9, r0
 80130f6:	6123      	str	r3, [r4, #16]
 80130f8:	dc02      	bgt.n	8013100 <_printf_float+0x168>
 80130fa:	6822      	ldr	r2, [r4, #0]
 80130fc:	07d2      	lsls	r2, r2, #31
 80130fe:	d501      	bpl.n	8013104 <_printf_float+0x16c>
 8013100:	3301      	adds	r3, #1
 8013102:	6123      	str	r3, [r4, #16]
 8013104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013108:	2b00      	cmp	r3, #0
 801310a:	d09c      	beq.n	8013046 <_printf_float+0xae>
 801310c:	232d      	movs	r3, #45	; 0x2d
 801310e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013112:	e798      	b.n	8013046 <_printf_float+0xae>
 8013114:	9a06      	ldr	r2, [sp, #24]
 8013116:	2a47      	cmp	r2, #71	; 0x47
 8013118:	d1be      	bne.n	8013098 <_printf_float+0x100>
 801311a:	2b00      	cmp	r3, #0
 801311c:	d1bc      	bne.n	8013098 <_printf_float+0x100>
 801311e:	2301      	movs	r3, #1
 8013120:	e7b9      	b.n	8013096 <_printf_float+0xfe>
 8013122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013126:	d118      	bne.n	801315a <_printf_float+0x1c2>
 8013128:	2900      	cmp	r1, #0
 801312a:	6863      	ldr	r3, [r4, #4]
 801312c:	dd0b      	ble.n	8013146 <_printf_float+0x1ae>
 801312e:	6121      	str	r1, [r4, #16]
 8013130:	b913      	cbnz	r3, 8013138 <_printf_float+0x1a0>
 8013132:	6822      	ldr	r2, [r4, #0]
 8013134:	07d0      	lsls	r0, r2, #31
 8013136:	d502      	bpl.n	801313e <_printf_float+0x1a6>
 8013138:	3301      	adds	r3, #1
 801313a:	440b      	add	r3, r1
 801313c:	6123      	str	r3, [r4, #16]
 801313e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013140:	f04f 0900 	mov.w	r9, #0
 8013144:	e7de      	b.n	8013104 <_printf_float+0x16c>
 8013146:	b913      	cbnz	r3, 801314e <_printf_float+0x1b6>
 8013148:	6822      	ldr	r2, [r4, #0]
 801314a:	07d2      	lsls	r2, r2, #31
 801314c:	d501      	bpl.n	8013152 <_printf_float+0x1ba>
 801314e:	3302      	adds	r3, #2
 8013150:	e7f4      	b.n	801313c <_printf_float+0x1a4>
 8013152:	2301      	movs	r3, #1
 8013154:	e7f2      	b.n	801313c <_printf_float+0x1a4>
 8013156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801315a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801315c:	4299      	cmp	r1, r3
 801315e:	db05      	blt.n	801316c <_printf_float+0x1d4>
 8013160:	6823      	ldr	r3, [r4, #0]
 8013162:	6121      	str	r1, [r4, #16]
 8013164:	07d8      	lsls	r0, r3, #31
 8013166:	d5ea      	bpl.n	801313e <_printf_float+0x1a6>
 8013168:	1c4b      	adds	r3, r1, #1
 801316a:	e7e7      	b.n	801313c <_printf_float+0x1a4>
 801316c:	2900      	cmp	r1, #0
 801316e:	bfd4      	ite	le
 8013170:	f1c1 0202 	rsble	r2, r1, #2
 8013174:	2201      	movgt	r2, #1
 8013176:	4413      	add	r3, r2
 8013178:	e7e0      	b.n	801313c <_printf_float+0x1a4>
 801317a:	6823      	ldr	r3, [r4, #0]
 801317c:	055a      	lsls	r2, r3, #21
 801317e:	d407      	bmi.n	8013190 <_printf_float+0x1f8>
 8013180:	6923      	ldr	r3, [r4, #16]
 8013182:	4642      	mov	r2, r8
 8013184:	4631      	mov	r1, r6
 8013186:	4628      	mov	r0, r5
 8013188:	47b8      	blx	r7
 801318a:	3001      	adds	r0, #1
 801318c:	d12c      	bne.n	80131e8 <_printf_float+0x250>
 801318e:	e764      	b.n	801305a <_printf_float+0xc2>
 8013190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013194:	f240 80e0 	bls.w	8013358 <_printf_float+0x3c0>
 8013198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801319c:	2200      	movs	r2, #0
 801319e:	2300      	movs	r3, #0
 80131a0:	f7ed fcaa 	bl	8000af8 <__aeabi_dcmpeq>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d034      	beq.n	8013212 <_printf_float+0x27a>
 80131a8:	4a37      	ldr	r2, [pc, #220]	; (8013288 <_printf_float+0x2f0>)
 80131aa:	2301      	movs	r3, #1
 80131ac:	4631      	mov	r1, r6
 80131ae:	4628      	mov	r0, r5
 80131b0:	47b8      	blx	r7
 80131b2:	3001      	adds	r0, #1
 80131b4:	f43f af51 	beq.w	801305a <_printf_float+0xc2>
 80131b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80131bc:	429a      	cmp	r2, r3
 80131be:	db02      	blt.n	80131c6 <_printf_float+0x22e>
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	07d8      	lsls	r0, r3, #31
 80131c4:	d510      	bpl.n	80131e8 <_printf_float+0x250>
 80131c6:	ee18 3a10 	vmov	r3, s16
 80131ca:	4652      	mov	r2, sl
 80131cc:	4631      	mov	r1, r6
 80131ce:	4628      	mov	r0, r5
 80131d0:	47b8      	blx	r7
 80131d2:	3001      	adds	r0, #1
 80131d4:	f43f af41 	beq.w	801305a <_printf_float+0xc2>
 80131d8:	f04f 0800 	mov.w	r8, #0
 80131dc:	f104 091a 	add.w	r9, r4, #26
 80131e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131e2:	3b01      	subs	r3, #1
 80131e4:	4543      	cmp	r3, r8
 80131e6:	dc09      	bgt.n	80131fc <_printf_float+0x264>
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	079b      	lsls	r3, r3, #30
 80131ec:	f100 8105 	bmi.w	80133fa <_printf_float+0x462>
 80131f0:	68e0      	ldr	r0, [r4, #12]
 80131f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131f4:	4298      	cmp	r0, r3
 80131f6:	bfb8      	it	lt
 80131f8:	4618      	movlt	r0, r3
 80131fa:	e730      	b.n	801305e <_printf_float+0xc6>
 80131fc:	2301      	movs	r3, #1
 80131fe:	464a      	mov	r2, r9
 8013200:	4631      	mov	r1, r6
 8013202:	4628      	mov	r0, r5
 8013204:	47b8      	blx	r7
 8013206:	3001      	adds	r0, #1
 8013208:	f43f af27 	beq.w	801305a <_printf_float+0xc2>
 801320c:	f108 0801 	add.w	r8, r8, #1
 8013210:	e7e6      	b.n	80131e0 <_printf_float+0x248>
 8013212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013214:	2b00      	cmp	r3, #0
 8013216:	dc39      	bgt.n	801328c <_printf_float+0x2f4>
 8013218:	4a1b      	ldr	r2, [pc, #108]	; (8013288 <_printf_float+0x2f0>)
 801321a:	2301      	movs	r3, #1
 801321c:	4631      	mov	r1, r6
 801321e:	4628      	mov	r0, r5
 8013220:	47b8      	blx	r7
 8013222:	3001      	adds	r0, #1
 8013224:	f43f af19 	beq.w	801305a <_printf_float+0xc2>
 8013228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801322c:	4313      	orrs	r3, r2
 801322e:	d102      	bne.n	8013236 <_printf_float+0x29e>
 8013230:	6823      	ldr	r3, [r4, #0]
 8013232:	07d9      	lsls	r1, r3, #31
 8013234:	d5d8      	bpl.n	80131e8 <_printf_float+0x250>
 8013236:	ee18 3a10 	vmov	r3, s16
 801323a:	4652      	mov	r2, sl
 801323c:	4631      	mov	r1, r6
 801323e:	4628      	mov	r0, r5
 8013240:	47b8      	blx	r7
 8013242:	3001      	adds	r0, #1
 8013244:	f43f af09 	beq.w	801305a <_printf_float+0xc2>
 8013248:	f04f 0900 	mov.w	r9, #0
 801324c:	f104 0a1a 	add.w	sl, r4, #26
 8013250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013252:	425b      	negs	r3, r3
 8013254:	454b      	cmp	r3, r9
 8013256:	dc01      	bgt.n	801325c <_printf_float+0x2c4>
 8013258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801325a:	e792      	b.n	8013182 <_printf_float+0x1ea>
 801325c:	2301      	movs	r3, #1
 801325e:	4652      	mov	r2, sl
 8013260:	4631      	mov	r1, r6
 8013262:	4628      	mov	r0, r5
 8013264:	47b8      	blx	r7
 8013266:	3001      	adds	r0, #1
 8013268:	f43f aef7 	beq.w	801305a <_printf_float+0xc2>
 801326c:	f109 0901 	add.w	r9, r9, #1
 8013270:	e7ee      	b.n	8013250 <_printf_float+0x2b8>
 8013272:	bf00      	nop
 8013274:	7fefffff 	.word	0x7fefffff
 8013278:	080255b0 	.word	0x080255b0
 801327c:	080255b4 	.word	0x080255b4
 8013280:	080255bc 	.word	0x080255bc
 8013284:	080255b8 	.word	0x080255b8
 8013288:	080255c0 	.word	0x080255c0
 801328c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801328e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013290:	429a      	cmp	r2, r3
 8013292:	bfa8      	it	ge
 8013294:	461a      	movge	r2, r3
 8013296:	2a00      	cmp	r2, #0
 8013298:	4691      	mov	r9, r2
 801329a:	dc37      	bgt.n	801330c <_printf_float+0x374>
 801329c:	f04f 0b00 	mov.w	fp, #0
 80132a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132a4:	f104 021a 	add.w	r2, r4, #26
 80132a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132aa:	9305      	str	r3, [sp, #20]
 80132ac:	eba3 0309 	sub.w	r3, r3, r9
 80132b0:	455b      	cmp	r3, fp
 80132b2:	dc33      	bgt.n	801331c <_printf_float+0x384>
 80132b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132b8:	429a      	cmp	r2, r3
 80132ba:	db3b      	blt.n	8013334 <_printf_float+0x39c>
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	07da      	lsls	r2, r3, #31
 80132c0:	d438      	bmi.n	8013334 <_printf_float+0x39c>
 80132c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132c4:	9a05      	ldr	r2, [sp, #20]
 80132c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132c8:	1a9a      	subs	r2, r3, r2
 80132ca:	eba3 0901 	sub.w	r9, r3, r1
 80132ce:	4591      	cmp	r9, r2
 80132d0:	bfa8      	it	ge
 80132d2:	4691      	movge	r9, r2
 80132d4:	f1b9 0f00 	cmp.w	r9, #0
 80132d8:	dc35      	bgt.n	8013346 <_printf_float+0x3ae>
 80132da:	f04f 0800 	mov.w	r8, #0
 80132de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132e2:	f104 0a1a 	add.w	sl, r4, #26
 80132e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132ea:	1a9b      	subs	r3, r3, r2
 80132ec:	eba3 0309 	sub.w	r3, r3, r9
 80132f0:	4543      	cmp	r3, r8
 80132f2:	f77f af79 	ble.w	80131e8 <_printf_float+0x250>
 80132f6:	2301      	movs	r3, #1
 80132f8:	4652      	mov	r2, sl
 80132fa:	4631      	mov	r1, r6
 80132fc:	4628      	mov	r0, r5
 80132fe:	47b8      	blx	r7
 8013300:	3001      	adds	r0, #1
 8013302:	f43f aeaa 	beq.w	801305a <_printf_float+0xc2>
 8013306:	f108 0801 	add.w	r8, r8, #1
 801330a:	e7ec      	b.n	80132e6 <_printf_float+0x34e>
 801330c:	4613      	mov	r3, r2
 801330e:	4631      	mov	r1, r6
 8013310:	4642      	mov	r2, r8
 8013312:	4628      	mov	r0, r5
 8013314:	47b8      	blx	r7
 8013316:	3001      	adds	r0, #1
 8013318:	d1c0      	bne.n	801329c <_printf_float+0x304>
 801331a:	e69e      	b.n	801305a <_printf_float+0xc2>
 801331c:	2301      	movs	r3, #1
 801331e:	4631      	mov	r1, r6
 8013320:	4628      	mov	r0, r5
 8013322:	9205      	str	r2, [sp, #20]
 8013324:	47b8      	blx	r7
 8013326:	3001      	adds	r0, #1
 8013328:	f43f ae97 	beq.w	801305a <_printf_float+0xc2>
 801332c:	9a05      	ldr	r2, [sp, #20]
 801332e:	f10b 0b01 	add.w	fp, fp, #1
 8013332:	e7b9      	b.n	80132a8 <_printf_float+0x310>
 8013334:	ee18 3a10 	vmov	r3, s16
 8013338:	4652      	mov	r2, sl
 801333a:	4631      	mov	r1, r6
 801333c:	4628      	mov	r0, r5
 801333e:	47b8      	blx	r7
 8013340:	3001      	adds	r0, #1
 8013342:	d1be      	bne.n	80132c2 <_printf_float+0x32a>
 8013344:	e689      	b.n	801305a <_printf_float+0xc2>
 8013346:	9a05      	ldr	r2, [sp, #20]
 8013348:	464b      	mov	r3, r9
 801334a:	4442      	add	r2, r8
 801334c:	4631      	mov	r1, r6
 801334e:	4628      	mov	r0, r5
 8013350:	47b8      	blx	r7
 8013352:	3001      	adds	r0, #1
 8013354:	d1c1      	bne.n	80132da <_printf_float+0x342>
 8013356:	e680      	b.n	801305a <_printf_float+0xc2>
 8013358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801335a:	2a01      	cmp	r2, #1
 801335c:	dc01      	bgt.n	8013362 <_printf_float+0x3ca>
 801335e:	07db      	lsls	r3, r3, #31
 8013360:	d538      	bpl.n	80133d4 <_printf_float+0x43c>
 8013362:	2301      	movs	r3, #1
 8013364:	4642      	mov	r2, r8
 8013366:	4631      	mov	r1, r6
 8013368:	4628      	mov	r0, r5
 801336a:	47b8      	blx	r7
 801336c:	3001      	adds	r0, #1
 801336e:	f43f ae74 	beq.w	801305a <_printf_float+0xc2>
 8013372:	ee18 3a10 	vmov	r3, s16
 8013376:	4652      	mov	r2, sl
 8013378:	4631      	mov	r1, r6
 801337a:	4628      	mov	r0, r5
 801337c:	47b8      	blx	r7
 801337e:	3001      	adds	r0, #1
 8013380:	f43f ae6b 	beq.w	801305a <_printf_float+0xc2>
 8013384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013388:	2200      	movs	r2, #0
 801338a:	2300      	movs	r3, #0
 801338c:	f7ed fbb4 	bl	8000af8 <__aeabi_dcmpeq>
 8013390:	b9d8      	cbnz	r0, 80133ca <_printf_float+0x432>
 8013392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013394:	f108 0201 	add.w	r2, r8, #1
 8013398:	3b01      	subs	r3, #1
 801339a:	4631      	mov	r1, r6
 801339c:	4628      	mov	r0, r5
 801339e:	47b8      	blx	r7
 80133a0:	3001      	adds	r0, #1
 80133a2:	d10e      	bne.n	80133c2 <_printf_float+0x42a>
 80133a4:	e659      	b.n	801305a <_printf_float+0xc2>
 80133a6:	2301      	movs	r3, #1
 80133a8:	4652      	mov	r2, sl
 80133aa:	4631      	mov	r1, r6
 80133ac:	4628      	mov	r0, r5
 80133ae:	47b8      	blx	r7
 80133b0:	3001      	adds	r0, #1
 80133b2:	f43f ae52 	beq.w	801305a <_printf_float+0xc2>
 80133b6:	f108 0801 	add.w	r8, r8, #1
 80133ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133bc:	3b01      	subs	r3, #1
 80133be:	4543      	cmp	r3, r8
 80133c0:	dcf1      	bgt.n	80133a6 <_printf_float+0x40e>
 80133c2:	464b      	mov	r3, r9
 80133c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80133c8:	e6dc      	b.n	8013184 <_printf_float+0x1ec>
 80133ca:	f04f 0800 	mov.w	r8, #0
 80133ce:	f104 0a1a 	add.w	sl, r4, #26
 80133d2:	e7f2      	b.n	80133ba <_printf_float+0x422>
 80133d4:	2301      	movs	r3, #1
 80133d6:	4642      	mov	r2, r8
 80133d8:	e7df      	b.n	801339a <_printf_float+0x402>
 80133da:	2301      	movs	r3, #1
 80133dc:	464a      	mov	r2, r9
 80133de:	4631      	mov	r1, r6
 80133e0:	4628      	mov	r0, r5
 80133e2:	47b8      	blx	r7
 80133e4:	3001      	adds	r0, #1
 80133e6:	f43f ae38 	beq.w	801305a <_printf_float+0xc2>
 80133ea:	f108 0801 	add.w	r8, r8, #1
 80133ee:	68e3      	ldr	r3, [r4, #12]
 80133f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80133f2:	1a5b      	subs	r3, r3, r1
 80133f4:	4543      	cmp	r3, r8
 80133f6:	dcf0      	bgt.n	80133da <_printf_float+0x442>
 80133f8:	e6fa      	b.n	80131f0 <_printf_float+0x258>
 80133fa:	f04f 0800 	mov.w	r8, #0
 80133fe:	f104 0919 	add.w	r9, r4, #25
 8013402:	e7f4      	b.n	80133ee <_printf_float+0x456>

08013404 <_printf_common>:
 8013404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013408:	4616      	mov	r6, r2
 801340a:	4699      	mov	r9, r3
 801340c:	688a      	ldr	r2, [r1, #8]
 801340e:	690b      	ldr	r3, [r1, #16]
 8013410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013414:	4293      	cmp	r3, r2
 8013416:	bfb8      	it	lt
 8013418:	4613      	movlt	r3, r2
 801341a:	6033      	str	r3, [r6, #0]
 801341c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013420:	4607      	mov	r7, r0
 8013422:	460c      	mov	r4, r1
 8013424:	b10a      	cbz	r2, 801342a <_printf_common+0x26>
 8013426:	3301      	adds	r3, #1
 8013428:	6033      	str	r3, [r6, #0]
 801342a:	6823      	ldr	r3, [r4, #0]
 801342c:	0699      	lsls	r1, r3, #26
 801342e:	bf42      	ittt	mi
 8013430:	6833      	ldrmi	r3, [r6, #0]
 8013432:	3302      	addmi	r3, #2
 8013434:	6033      	strmi	r3, [r6, #0]
 8013436:	6825      	ldr	r5, [r4, #0]
 8013438:	f015 0506 	ands.w	r5, r5, #6
 801343c:	d106      	bne.n	801344c <_printf_common+0x48>
 801343e:	f104 0a19 	add.w	sl, r4, #25
 8013442:	68e3      	ldr	r3, [r4, #12]
 8013444:	6832      	ldr	r2, [r6, #0]
 8013446:	1a9b      	subs	r3, r3, r2
 8013448:	42ab      	cmp	r3, r5
 801344a:	dc26      	bgt.n	801349a <_printf_common+0x96>
 801344c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013450:	1e13      	subs	r3, r2, #0
 8013452:	6822      	ldr	r2, [r4, #0]
 8013454:	bf18      	it	ne
 8013456:	2301      	movne	r3, #1
 8013458:	0692      	lsls	r2, r2, #26
 801345a:	d42b      	bmi.n	80134b4 <_printf_common+0xb0>
 801345c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013460:	4649      	mov	r1, r9
 8013462:	4638      	mov	r0, r7
 8013464:	47c0      	blx	r8
 8013466:	3001      	adds	r0, #1
 8013468:	d01e      	beq.n	80134a8 <_printf_common+0xa4>
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	68e5      	ldr	r5, [r4, #12]
 801346e:	6832      	ldr	r2, [r6, #0]
 8013470:	f003 0306 	and.w	r3, r3, #6
 8013474:	2b04      	cmp	r3, #4
 8013476:	bf08      	it	eq
 8013478:	1aad      	subeq	r5, r5, r2
 801347a:	68a3      	ldr	r3, [r4, #8]
 801347c:	6922      	ldr	r2, [r4, #16]
 801347e:	bf0c      	ite	eq
 8013480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013484:	2500      	movne	r5, #0
 8013486:	4293      	cmp	r3, r2
 8013488:	bfc4      	itt	gt
 801348a:	1a9b      	subgt	r3, r3, r2
 801348c:	18ed      	addgt	r5, r5, r3
 801348e:	2600      	movs	r6, #0
 8013490:	341a      	adds	r4, #26
 8013492:	42b5      	cmp	r5, r6
 8013494:	d11a      	bne.n	80134cc <_printf_common+0xc8>
 8013496:	2000      	movs	r0, #0
 8013498:	e008      	b.n	80134ac <_printf_common+0xa8>
 801349a:	2301      	movs	r3, #1
 801349c:	4652      	mov	r2, sl
 801349e:	4649      	mov	r1, r9
 80134a0:	4638      	mov	r0, r7
 80134a2:	47c0      	blx	r8
 80134a4:	3001      	adds	r0, #1
 80134a6:	d103      	bne.n	80134b0 <_printf_common+0xac>
 80134a8:	f04f 30ff 	mov.w	r0, #4294967295
 80134ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b0:	3501      	adds	r5, #1
 80134b2:	e7c6      	b.n	8013442 <_printf_common+0x3e>
 80134b4:	18e1      	adds	r1, r4, r3
 80134b6:	1c5a      	adds	r2, r3, #1
 80134b8:	2030      	movs	r0, #48	; 0x30
 80134ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134be:	4422      	add	r2, r4
 80134c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80134c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80134c8:	3302      	adds	r3, #2
 80134ca:	e7c7      	b.n	801345c <_printf_common+0x58>
 80134cc:	2301      	movs	r3, #1
 80134ce:	4622      	mov	r2, r4
 80134d0:	4649      	mov	r1, r9
 80134d2:	4638      	mov	r0, r7
 80134d4:	47c0      	blx	r8
 80134d6:	3001      	adds	r0, #1
 80134d8:	d0e6      	beq.n	80134a8 <_printf_common+0xa4>
 80134da:	3601      	adds	r6, #1
 80134dc:	e7d9      	b.n	8013492 <_printf_common+0x8e>
	...

080134e0 <_printf_i>:
 80134e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134e4:	7e0f      	ldrb	r7, [r1, #24]
 80134e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134e8:	2f78      	cmp	r7, #120	; 0x78
 80134ea:	4691      	mov	r9, r2
 80134ec:	4680      	mov	r8, r0
 80134ee:	460c      	mov	r4, r1
 80134f0:	469a      	mov	sl, r3
 80134f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134f6:	d807      	bhi.n	8013508 <_printf_i+0x28>
 80134f8:	2f62      	cmp	r7, #98	; 0x62
 80134fa:	d80a      	bhi.n	8013512 <_printf_i+0x32>
 80134fc:	2f00      	cmp	r7, #0
 80134fe:	f000 80d8 	beq.w	80136b2 <_printf_i+0x1d2>
 8013502:	2f58      	cmp	r7, #88	; 0x58
 8013504:	f000 80a3 	beq.w	801364e <_printf_i+0x16e>
 8013508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801350c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013510:	e03a      	b.n	8013588 <_printf_i+0xa8>
 8013512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013516:	2b15      	cmp	r3, #21
 8013518:	d8f6      	bhi.n	8013508 <_printf_i+0x28>
 801351a:	a101      	add	r1, pc, #4	; (adr r1, 8013520 <_printf_i+0x40>)
 801351c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013520:	08013579 	.word	0x08013579
 8013524:	0801358d 	.word	0x0801358d
 8013528:	08013509 	.word	0x08013509
 801352c:	08013509 	.word	0x08013509
 8013530:	08013509 	.word	0x08013509
 8013534:	08013509 	.word	0x08013509
 8013538:	0801358d 	.word	0x0801358d
 801353c:	08013509 	.word	0x08013509
 8013540:	08013509 	.word	0x08013509
 8013544:	08013509 	.word	0x08013509
 8013548:	08013509 	.word	0x08013509
 801354c:	08013699 	.word	0x08013699
 8013550:	080135bd 	.word	0x080135bd
 8013554:	0801367b 	.word	0x0801367b
 8013558:	08013509 	.word	0x08013509
 801355c:	08013509 	.word	0x08013509
 8013560:	080136bb 	.word	0x080136bb
 8013564:	08013509 	.word	0x08013509
 8013568:	080135bd 	.word	0x080135bd
 801356c:	08013509 	.word	0x08013509
 8013570:	08013509 	.word	0x08013509
 8013574:	08013683 	.word	0x08013683
 8013578:	682b      	ldr	r3, [r5, #0]
 801357a:	1d1a      	adds	r2, r3, #4
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	602a      	str	r2, [r5, #0]
 8013580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013588:	2301      	movs	r3, #1
 801358a:	e0a3      	b.n	80136d4 <_printf_i+0x1f4>
 801358c:	6820      	ldr	r0, [r4, #0]
 801358e:	6829      	ldr	r1, [r5, #0]
 8013590:	0606      	lsls	r6, r0, #24
 8013592:	f101 0304 	add.w	r3, r1, #4
 8013596:	d50a      	bpl.n	80135ae <_printf_i+0xce>
 8013598:	680e      	ldr	r6, [r1, #0]
 801359a:	602b      	str	r3, [r5, #0]
 801359c:	2e00      	cmp	r6, #0
 801359e:	da03      	bge.n	80135a8 <_printf_i+0xc8>
 80135a0:	232d      	movs	r3, #45	; 0x2d
 80135a2:	4276      	negs	r6, r6
 80135a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135a8:	485e      	ldr	r0, [pc, #376]	; (8013724 <_printf_i+0x244>)
 80135aa:	230a      	movs	r3, #10
 80135ac:	e019      	b.n	80135e2 <_printf_i+0x102>
 80135ae:	680e      	ldr	r6, [r1, #0]
 80135b0:	602b      	str	r3, [r5, #0]
 80135b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80135b6:	bf18      	it	ne
 80135b8:	b236      	sxthne	r6, r6
 80135ba:	e7ef      	b.n	801359c <_printf_i+0xbc>
 80135bc:	682b      	ldr	r3, [r5, #0]
 80135be:	6820      	ldr	r0, [r4, #0]
 80135c0:	1d19      	adds	r1, r3, #4
 80135c2:	6029      	str	r1, [r5, #0]
 80135c4:	0601      	lsls	r1, r0, #24
 80135c6:	d501      	bpl.n	80135cc <_printf_i+0xec>
 80135c8:	681e      	ldr	r6, [r3, #0]
 80135ca:	e002      	b.n	80135d2 <_printf_i+0xf2>
 80135cc:	0646      	lsls	r6, r0, #25
 80135ce:	d5fb      	bpl.n	80135c8 <_printf_i+0xe8>
 80135d0:	881e      	ldrh	r6, [r3, #0]
 80135d2:	4854      	ldr	r0, [pc, #336]	; (8013724 <_printf_i+0x244>)
 80135d4:	2f6f      	cmp	r7, #111	; 0x6f
 80135d6:	bf0c      	ite	eq
 80135d8:	2308      	moveq	r3, #8
 80135da:	230a      	movne	r3, #10
 80135dc:	2100      	movs	r1, #0
 80135de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135e2:	6865      	ldr	r5, [r4, #4]
 80135e4:	60a5      	str	r5, [r4, #8]
 80135e6:	2d00      	cmp	r5, #0
 80135e8:	bfa2      	ittt	ge
 80135ea:	6821      	ldrge	r1, [r4, #0]
 80135ec:	f021 0104 	bicge.w	r1, r1, #4
 80135f0:	6021      	strge	r1, [r4, #0]
 80135f2:	b90e      	cbnz	r6, 80135f8 <_printf_i+0x118>
 80135f4:	2d00      	cmp	r5, #0
 80135f6:	d04d      	beq.n	8013694 <_printf_i+0x1b4>
 80135f8:	4615      	mov	r5, r2
 80135fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80135fe:	fb03 6711 	mls	r7, r3, r1, r6
 8013602:	5dc7      	ldrb	r7, [r0, r7]
 8013604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013608:	4637      	mov	r7, r6
 801360a:	42bb      	cmp	r3, r7
 801360c:	460e      	mov	r6, r1
 801360e:	d9f4      	bls.n	80135fa <_printf_i+0x11a>
 8013610:	2b08      	cmp	r3, #8
 8013612:	d10b      	bne.n	801362c <_printf_i+0x14c>
 8013614:	6823      	ldr	r3, [r4, #0]
 8013616:	07de      	lsls	r6, r3, #31
 8013618:	d508      	bpl.n	801362c <_printf_i+0x14c>
 801361a:	6923      	ldr	r3, [r4, #16]
 801361c:	6861      	ldr	r1, [r4, #4]
 801361e:	4299      	cmp	r1, r3
 8013620:	bfde      	ittt	le
 8013622:	2330      	movle	r3, #48	; 0x30
 8013624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013628:	f105 35ff 	addle.w	r5, r5, #4294967295
 801362c:	1b52      	subs	r2, r2, r5
 801362e:	6122      	str	r2, [r4, #16]
 8013630:	f8cd a000 	str.w	sl, [sp]
 8013634:	464b      	mov	r3, r9
 8013636:	aa03      	add	r2, sp, #12
 8013638:	4621      	mov	r1, r4
 801363a:	4640      	mov	r0, r8
 801363c:	f7ff fee2 	bl	8013404 <_printf_common>
 8013640:	3001      	adds	r0, #1
 8013642:	d14c      	bne.n	80136de <_printf_i+0x1fe>
 8013644:	f04f 30ff 	mov.w	r0, #4294967295
 8013648:	b004      	add	sp, #16
 801364a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801364e:	4835      	ldr	r0, [pc, #212]	; (8013724 <_printf_i+0x244>)
 8013650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013654:	6829      	ldr	r1, [r5, #0]
 8013656:	6823      	ldr	r3, [r4, #0]
 8013658:	f851 6b04 	ldr.w	r6, [r1], #4
 801365c:	6029      	str	r1, [r5, #0]
 801365e:	061d      	lsls	r5, r3, #24
 8013660:	d514      	bpl.n	801368c <_printf_i+0x1ac>
 8013662:	07df      	lsls	r7, r3, #31
 8013664:	bf44      	itt	mi
 8013666:	f043 0320 	orrmi.w	r3, r3, #32
 801366a:	6023      	strmi	r3, [r4, #0]
 801366c:	b91e      	cbnz	r6, 8013676 <_printf_i+0x196>
 801366e:	6823      	ldr	r3, [r4, #0]
 8013670:	f023 0320 	bic.w	r3, r3, #32
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	2310      	movs	r3, #16
 8013678:	e7b0      	b.n	80135dc <_printf_i+0xfc>
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	f043 0320 	orr.w	r3, r3, #32
 8013680:	6023      	str	r3, [r4, #0]
 8013682:	2378      	movs	r3, #120	; 0x78
 8013684:	4828      	ldr	r0, [pc, #160]	; (8013728 <_printf_i+0x248>)
 8013686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801368a:	e7e3      	b.n	8013654 <_printf_i+0x174>
 801368c:	0659      	lsls	r1, r3, #25
 801368e:	bf48      	it	mi
 8013690:	b2b6      	uxthmi	r6, r6
 8013692:	e7e6      	b.n	8013662 <_printf_i+0x182>
 8013694:	4615      	mov	r5, r2
 8013696:	e7bb      	b.n	8013610 <_printf_i+0x130>
 8013698:	682b      	ldr	r3, [r5, #0]
 801369a:	6826      	ldr	r6, [r4, #0]
 801369c:	6961      	ldr	r1, [r4, #20]
 801369e:	1d18      	adds	r0, r3, #4
 80136a0:	6028      	str	r0, [r5, #0]
 80136a2:	0635      	lsls	r5, r6, #24
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	d501      	bpl.n	80136ac <_printf_i+0x1cc>
 80136a8:	6019      	str	r1, [r3, #0]
 80136aa:	e002      	b.n	80136b2 <_printf_i+0x1d2>
 80136ac:	0670      	lsls	r0, r6, #25
 80136ae:	d5fb      	bpl.n	80136a8 <_printf_i+0x1c8>
 80136b0:	8019      	strh	r1, [r3, #0]
 80136b2:	2300      	movs	r3, #0
 80136b4:	6123      	str	r3, [r4, #16]
 80136b6:	4615      	mov	r5, r2
 80136b8:	e7ba      	b.n	8013630 <_printf_i+0x150>
 80136ba:	682b      	ldr	r3, [r5, #0]
 80136bc:	1d1a      	adds	r2, r3, #4
 80136be:	602a      	str	r2, [r5, #0]
 80136c0:	681d      	ldr	r5, [r3, #0]
 80136c2:	6862      	ldr	r2, [r4, #4]
 80136c4:	2100      	movs	r1, #0
 80136c6:	4628      	mov	r0, r5
 80136c8:	f7ec fda2 	bl	8000210 <memchr>
 80136cc:	b108      	cbz	r0, 80136d2 <_printf_i+0x1f2>
 80136ce:	1b40      	subs	r0, r0, r5
 80136d0:	6060      	str	r0, [r4, #4]
 80136d2:	6863      	ldr	r3, [r4, #4]
 80136d4:	6123      	str	r3, [r4, #16]
 80136d6:	2300      	movs	r3, #0
 80136d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136dc:	e7a8      	b.n	8013630 <_printf_i+0x150>
 80136de:	6923      	ldr	r3, [r4, #16]
 80136e0:	462a      	mov	r2, r5
 80136e2:	4649      	mov	r1, r9
 80136e4:	4640      	mov	r0, r8
 80136e6:	47d0      	blx	sl
 80136e8:	3001      	adds	r0, #1
 80136ea:	d0ab      	beq.n	8013644 <_printf_i+0x164>
 80136ec:	6823      	ldr	r3, [r4, #0]
 80136ee:	079b      	lsls	r3, r3, #30
 80136f0:	d413      	bmi.n	801371a <_printf_i+0x23a>
 80136f2:	68e0      	ldr	r0, [r4, #12]
 80136f4:	9b03      	ldr	r3, [sp, #12]
 80136f6:	4298      	cmp	r0, r3
 80136f8:	bfb8      	it	lt
 80136fa:	4618      	movlt	r0, r3
 80136fc:	e7a4      	b.n	8013648 <_printf_i+0x168>
 80136fe:	2301      	movs	r3, #1
 8013700:	4632      	mov	r2, r6
 8013702:	4649      	mov	r1, r9
 8013704:	4640      	mov	r0, r8
 8013706:	47d0      	blx	sl
 8013708:	3001      	adds	r0, #1
 801370a:	d09b      	beq.n	8013644 <_printf_i+0x164>
 801370c:	3501      	adds	r5, #1
 801370e:	68e3      	ldr	r3, [r4, #12]
 8013710:	9903      	ldr	r1, [sp, #12]
 8013712:	1a5b      	subs	r3, r3, r1
 8013714:	42ab      	cmp	r3, r5
 8013716:	dcf2      	bgt.n	80136fe <_printf_i+0x21e>
 8013718:	e7eb      	b.n	80136f2 <_printf_i+0x212>
 801371a:	2500      	movs	r5, #0
 801371c:	f104 0619 	add.w	r6, r4, #25
 8013720:	e7f5      	b.n	801370e <_printf_i+0x22e>
 8013722:	bf00      	nop
 8013724:	080255c2 	.word	0x080255c2
 8013728:	080255d3 	.word	0x080255d3

0801372c <_sbrk_r>:
 801372c:	b538      	push	{r3, r4, r5, lr}
 801372e:	4d06      	ldr	r5, [pc, #24]	; (8013748 <_sbrk_r+0x1c>)
 8013730:	2300      	movs	r3, #0
 8013732:	4604      	mov	r4, r0
 8013734:	4608      	mov	r0, r1
 8013736:	602b      	str	r3, [r5, #0]
 8013738:	f7ed ff3a 	bl	80015b0 <_sbrk>
 801373c:	1c43      	adds	r3, r0, #1
 801373e:	d102      	bne.n	8013746 <_sbrk_r+0x1a>
 8013740:	682b      	ldr	r3, [r5, #0]
 8013742:	b103      	cbz	r3, 8013746 <_sbrk_r+0x1a>
 8013744:	6023      	str	r3, [r4, #0]
 8013746:	bd38      	pop	{r3, r4, r5, pc}
 8013748:	2000d0b0 	.word	0x2000d0b0

0801374c <strcpy>:
 801374c:	4603      	mov	r3, r0
 801374e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013752:	f803 2b01 	strb.w	r2, [r3], #1
 8013756:	2a00      	cmp	r2, #0
 8013758:	d1f9      	bne.n	801374e <strcpy+0x2>
 801375a:	4770      	bx	lr

0801375c <sulp>:
 801375c:	b570      	push	{r4, r5, r6, lr}
 801375e:	4604      	mov	r4, r0
 8013760:	460d      	mov	r5, r1
 8013762:	ec45 4b10 	vmov	d0, r4, r5
 8013766:	4616      	mov	r6, r2
 8013768:	f002 ffb6 	bl	80166d8 <__ulp>
 801376c:	ec51 0b10 	vmov	r0, r1, d0
 8013770:	b17e      	cbz	r6, 8013792 <sulp+0x36>
 8013772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013776:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801377a:	2b00      	cmp	r3, #0
 801377c:	dd09      	ble.n	8013792 <sulp+0x36>
 801377e:	051b      	lsls	r3, r3, #20
 8013780:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013784:	2400      	movs	r4, #0
 8013786:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801378a:	4622      	mov	r2, r4
 801378c:	462b      	mov	r3, r5
 801378e:	f7ec ff4b 	bl	8000628 <__aeabi_dmul>
 8013792:	bd70      	pop	{r4, r5, r6, pc}
 8013794:	0000      	movs	r0, r0
	...

08013798 <_strtod_l>:
 8013798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801379c:	ed2d 8b02 	vpush	{d8}
 80137a0:	b09d      	sub	sp, #116	; 0x74
 80137a2:	461f      	mov	r7, r3
 80137a4:	2300      	movs	r3, #0
 80137a6:	9318      	str	r3, [sp, #96]	; 0x60
 80137a8:	4ba2      	ldr	r3, [pc, #648]	; (8013a34 <_strtod_l+0x29c>)
 80137aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	9305      	str	r3, [sp, #20]
 80137b0:	4604      	mov	r4, r0
 80137b2:	4618      	mov	r0, r3
 80137b4:	4688      	mov	r8, r1
 80137b6:	f7ec fd1d 	bl	80001f4 <strlen>
 80137ba:	f04f 0a00 	mov.w	sl, #0
 80137be:	4605      	mov	r5, r0
 80137c0:	f04f 0b00 	mov.w	fp, #0
 80137c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80137c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137ca:	781a      	ldrb	r2, [r3, #0]
 80137cc:	2a2b      	cmp	r2, #43	; 0x2b
 80137ce:	d04e      	beq.n	801386e <_strtod_l+0xd6>
 80137d0:	d83b      	bhi.n	801384a <_strtod_l+0xb2>
 80137d2:	2a0d      	cmp	r2, #13
 80137d4:	d834      	bhi.n	8013840 <_strtod_l+0xa8>
 80137d6:	2a08      	cmp	r2, #8
 80137d8:	d834      	bhi.n	8013844 <_strtod_l+0xac>
 80137da:	2a00      	cmp	r2, #0
 80137dc:	d03e      	beq.n	801385c <_strtod_l+0xc4>
 80137de:	2300      	movs	r3, #0
 80137e0:	930a      	str	r3, [sp, #40]	; 0x28
 80137e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80137e4:	7833      	ldrb	r3, [r6, #0]
 80137e6:	2b30      	cmp	r3, #48	; 0x30
 80137e8:	f040 80b0 	bne.w	801394c <_strtod_l+0x1b4>
 80137ec:	7873      	ldrb	r3, [r6, #1]
 80137ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80137f2:	2b58      	cmp	r3, #88	; 0x58
 80137f4:	d168      	bne.n	80138c8 <_strtod_l+0x130>
 80137f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	ab18      	add	r3, sp, #96	; 0x60
 80137fc:	9702      	str	r7, [sp, #8]
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	4a8d      	ldr	r2, [pc, #564]	; (8013a38 <_strtod_l+0x2a0>)
 8013802:	ab19      	add	r3, sp, #100	; 0x64
 8013804:	a917      	add	r1, sp, #92	; 0x5c
 8013806:	4620      	mov	r0, r4
 8013808:	f002 f862 	bl	80158d0 <__gethex>
 801380c:	f010 0707 	ands.w	r7, r0, #7
 8013810:	4605      	mov	r5, r0
 8013812:	d005      	beq.n	8013820 <_strtod_l+0x88>
 8013814:	2f06      	cmp	r7, #6
 8013816:	d12c      	bne.n	8013872 <_strtod_l+0xda>
 8013818:	3601      	adds	r6, #1
 801381a:	2300      	movs	r3, #0
 801381c:	9617      	str	r6, [sp, #92]	; 0x5c
 801381e:	930a      	str	r3, [sp, #40]	; 0x28
 8013820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013822:	2b00      	cmp	r3, #0
 8013824:	f040 8590 	bne.w	8014348 <_strtod_l+0xbb0>
 8013828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801382a:	b1eb      	cbz	r3, 8013868 <_strtod_l+0xd0>
 801382c:	4652      	mov	r2, sl
 801382e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013832:	ec43 2b10 	vmov	d0, r2, r3
 8013836:	b01d      	add	sp, #116	; 0x74
 8013838:	ecbd 8b02 	vpop	{d8}
 801383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013840:	2a20      	cmp	r2, #32
 8013842:	d1cc      	bne.n	80137de <_strtod_l+0x46>
 8013844:	3301      	adds	r3, #1
 8013846:	9317      	str	r3, [sp, #92]	; 0x5c
 8013848:	e7be      	b.n	80137c8 <_strtod_l+0x30>
 801384a:	2a2d      	cmp	r2, #45	; 0x2d
 801384c:	d1c7      	bne.n	80137de <_strtod_l+0x46>
 801384e:	2201      	movs	r2, #1
 8013850:	920a      	str	r2, [sp, #40]	; 0x28
 8013852:	1c5a      	adds	r2, r3, #1
 8013854:	9217      	str	r2, [sp, #92]	; 0x5c
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1c2      	bne.n	80137e2 <_strtod_l+0x4a>
 801385c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801385e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013862:	2b00      	cmp	r3, #0
 8013864:	f040 856e 	bne.w	8014344 <_strtod_l+0xbac>
 8013868:	4652      	mov	r2, sl
 801386a:	465b      	mov	r3, fp
 801386c:	e7e1      	b.n	8013832 <_strtod_l+0x9a>
 801386e:	2200      	movs	r2, #0
 8013870:	e7ee      	b.n	8013850 <_strtod_l+0xb8>
 8013872:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013874:	b13a      	cbz	r2, 8013886 <_strtod_l+0xee>
 8013876:	2135      	movs	r1, #53	; 0x35
 8013878:	a81a      	add	r0, sp, #104	; 0x68
 801387a:	f003 f838 	bl	80168ee <__copybits>
 801387e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013880:	4620      	mov	r0, r4
 8013882:	f002 fbf7 	bl	8016074 <_Bfree>
 8013886:	3f01      	subs	r7, #1
 8013888:	2f04      	cmp	r7, #4
 801388a:	d806      	bhi.n	801389a <_strtod_l+0x102>
 801388c:	e8df f007 	tbb	[pc, r7]
 8013890:	1714030a 	.word	0x1714030a
 8013894:	0a          	.byte	0x0a
 8013895:	00          	.byte	0x00
 8013896:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801389a:	0728      	lsls	r0, r5, #28
 801389c:	d5c0      	bpl.n	8013820 <_strtod_l+0x88>
 801389e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80138a2:	e7bd      	b.n	8013820 <_strtod_l+0x88>
 80138a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80138a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80138aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80138ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80138b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80138b6:	e7f0      	b.n	801389a <_strtod_l+0x102>
 80138b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013a3c <_strtod_l+0x2a4>
 80138bc:	e7ed      	b.n	801389a <_strtod_l+0x102>
 80138be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80138c2:	f04f 3aff 	mov.w	sl, #4294967295
 80138c6:	e7e8      	b.n	801389a <_strtod_l+0x102>
 80138c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138ca:	1c5a      	adds	r2, r3, #1
 80138cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80138ce:	785b      	ldrb	r3, [r3, #1]
 80138d0:	2b30      	cmp	r3, #48	; 0x30
 80138d2:	d0f9      	beq.n	80138c8 <_strtod_l+0x130>
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d0a3      	beq.n	8013820 <_strtod_l+0x88>
 80138d8:	2301      	movs	r3, #1
 80138da:	f04f 0900 	mov.w	r9, #0
 80138de:	9304      	str	r3, [sp, #16]
 80138e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138e2:	9308      	str	r3, [sp, #32]
 80138e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80138e8:	464f      	mov	r7, r9
 80138ea:	220a      	movs	r2, #10
 80138ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80138ee:	7806      	ldrb	r6, [r0, #0]
 80138f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80138f4:	b2d9      	uxtb	r1, r3
 80138f6:	2909      	cmp	r1, #9
 80138f8:	d92a      	bls.n	8013950 <_strtod_l+0x1b8>
 80138fa:	9905      	ldr	r1, [sp, #20]
 80138fc:	462a      	mov	r2, r5
 80138fe:	f003 f9fc 	bl	8016cfa <strncmp>
 8013902:	b398      	cbz	r0, 801396c <_strtod_l+0x1d4>
 8013904:	2000      	movs	r0, #0
 8013906:	4632      	mov	r2, r6
 8013908:	463d      	mov	r5, r7
 801390a:	9005      	str	r0, [sp, #20]
 801390c:	4603      	mov	r3, r0
 801390e:	2a65      	cmp	r2, #101	; 0x65
 8013910:	d001      	beq.n	8013916 <_strtod_l+0x17e>
 8013912:	2a45      	cmp	r2, #69	; 0x45
 8013914:	d118      	bne.n	8013948 <_strtod_l+0x1b0>
 8013916:	b91d      	cbnz	r5, 8013920 <_strtod_l+0x188>
 8013918:	9a04      	ldr	r2, [sp, #16]
 801391a:	4302      	orrs	r2, r0
 801391c:	d09e      	beq.n	801385c <_strtod_l+0xc4>
 801391e:	2500      	movs	r5, #0
 8013920:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013924:	f108 0201 	add.w	r2, r8, #1
 8013928:	9217      	str	r2, [sp, #92]	; 0x5c
 801392a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801392e:	2a2b      	cmp	r2, #43	; 0x2b
 8013930:	d075      	beq.n	8013a1e <_strtod_l+0x286>
 8013932:	2a2d      	cmp	r2, #45	; 0x2d
 8013934:	d07b      	beq.n	8013a2e <_strtod_l+0x296>
 8013936:	f04f 0c00 	mov.w	ip, #0
 801393a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801393e:	2909      	cmp	r1, #9
 8013940:	f240 8082 	bls.w	8013a48 <_strtod_l+0x2b0>
 8013944:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013948:	2600      	movs	r6, #0
 801394a:	e09d      	b.n	8013a88 <_strtod_l+0x2f0>
 801394c:	2300      	movs	r3, #0
 801394e:	e7c4      	b.n	80138da <_strtod_l+0x142>
 8013950:	2f08      	cmp	r7, #8
 8013952:	bfd8      	it	le
 8013954:	9907      	ldrle	r1, [sp, #28]
 8013956:	f100 0001 	add.w	r0, r0, #1
 801395a:	bfda      	itte	le
 801395c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013960:	9307      	strle	r3, [sp, #28]
 8013962:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013966:	3701      	adds	r7, #1
 8013968:	9017      	str	r0, [sp, #92]	; 0x5c
 801396a:	e7bf      	b.n	80138ec <_strtod_l+0x154>
 801396c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801396e:	195a      	adds	r2, r3, r5
 8013970:	9217      	str	r2, [sp, #92]	; 0x5c
 8013972:	5d5a      	ldrb	r2, [r3, r5]
 8013974:	2f00      	cmp	r7, #0
 8013976:	d037      	beq.n	80139e8 <_strtod_l+0x250>
 8013978:	9005      	str	r0, [sp, #20]
 801397a:	463d      	mov	r5, r7
 801397c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013980:	2b09      	cmp	r3, #9
 8013982:	d912      	bls.n	80139aa <_strtod_l+0x212>
 8013984:	2301      	movs	r3, #1
 8013986:	e7c2      	b.n	801390e <_strtod_l+0x176>
 8013988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801398a:	1c5a      	adds	r2, r3, #1
 801398c:	9217      	str	r2, [sp, #92]	; 0x5c
 801398e:	785a      	ldrb	r2, [r3, #1]
 8013990:	3001      	adds	r0, #1
 8013992:	2a30      	cmp	r2, #48	; 0x30
 8013994:	d0f8      	beq.n	8013988 <_strtod_l+0x1f0>
 8013996:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801399a:	2b08      	cmp	r3, #8
 801399c:	f200 84d9 	bhi.w	8014352 <_strtod_l+0xbba>
 80139a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139a2:	9005      	str	r0, [sp, #20]
 80139a4:	2000      	movs	r0, #0
 80139a6:	9308      	str	r3, [sp, #32]
 80139a8:	4605      	mov	r5, r0
 80139aa:	3a30      	subs	r2, #48	; 0x30
 80139ac:	f100 0301 	add.w	r3, r0, #1
 80139b0:	d014      	beq.n	80139dc <_strtod_l+0x244>
 80139b2:	9905      	ldr	r1, [sp, #20]
 80139b4:	4419      	add	r1, r3
 80139b6:	9105      	str	r1, [sp, #20]
 80139b8:	462b      	mov	r3, r5
 80139ba:	eb00 0e05 	add.w	lr, r0, r5
 80139be:	210a      	movs	r1, #10
 80139c0:	4573      	cmp	r3, lr
 80139c2:	d113      	bne.n	80139ec <_strtod_l+0x254>
 80139c4:	182b      	adds	r3, r5, r0
 80139c6:	2b08      	cmp	r3, #8
 80139c8:	f105 0501 	add.w	r5, r5, #1
 80139cc:	4405      	add	r5, r0
 80139ce:	dc1c      	bgt.n	8013a0a <_strtod_l+0x272>
 80139d0:	9907      	ldr	r1, [sp, #28]
 80139d2:	230a      	movs	r3, #10
 80139d4:	fb03 2301 	mla	r3, r3, r1, r2
 80139d8:	9307      	str	r3, [sp, #28]
 80139da:	2300      	movs	r3, #0
 80139dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80139de:	1c51      	adds	r1, r2, #1
 80139e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80139e2:	7852      	ldrb	r2, [r2, #1]
 80139e4:	4618      	mov	r0, r3
 80139e6:	e7c9      	b.n	801397c <_strtod_l+0x1e4>
 80139e8:	4638      	mov	r0, r7
 80139ea:	e7d2      	b.n	8013992 <_strtod_l+0x1fa>
 80139ec:	2b08      	cmp	r3, #8
 80139ee:	dc04      	bgt.n	80139fa <_strtod_l+0x262>
 80139f0:	9e07      	ldr	r6, [sp, #28]
 80139f2:	434e      	muls	r6, r1
 80139f4:	9607      	str	r6, [sp, #28]
 80139f6:	3301      	adds	r3, #1
 80139f8:	e7e2      	b.n	80139c0 <_strtod_l+0x228>
 80139fa:	f103 0c01 	add.w	ip, r3, #1
 80139fe:	f1bc 0f10 	cmp.w	ip, #16
 8013a02:	bfd8      	it	le
 8013a04:	fb01 f909 	mulle.w	r9, r1, r9
 8013a08:	e7f5      	b.n	80139f6 <_strtod_l+0x25e>
 8013a0a:	2d10      	cmp	r5, #16
 8013a0c:	bfdc      	itt	le
 8013a0e:	230a      	movle	r3, #10
 8013a10:	fb03 2909 	mlale	r9, r3, r9, r2
 8013a14:	e7e1      	b.n	80139da <_strtod_l+0x242>
 8013a16:	2300      	movs	r3, #0
 8013a18:	9305      	str	r3, [sp, #20]
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e77c      	b.n	8013918 <_strtod_l+0x180>
 8013a1e:	f04f 0c00 	mov.w	ip, #0
 8013a22:	f108 0202 	add.w	r2, r8, #2
 8013a26:	9217      	str	r2, [sp, #92]	; 0x5c
 8013a28:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013a2c:	e785      	b.n	801393a <_strtod_l+0x1a2>
 8013a2e:	f04f 0c01 	mov.w	ip, #1
 8013a32:	e7f6      	b.n	8013a22 <_strtod_l+0x28a>
 8013a34:	08025894 	.word	0x08025894
 8013a38:	080255e4 	.word	0x080255e4
 8013a3c:	7ff00000 	.word	0x7ff00000
 8013a40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a42:	1c51      	adds	r1, r2, #1
 8013a44:	9117      	str	r1, [sp, #92]	; 0x5c
 8013a46:	7852      	ldrb	r2, [r2, #1]
 8013a48:	2a30      	cmp	r2, #48	; 0x30
 8013a4a:	d0f9      	beq.n	8013a40 <_strtod_l+0x2a8>
 8013a4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013a50:	2908      	cmp	r1, #8
 8013a52:	f63f af79 	bhi.w	8013948 <_strtod_l+0x1b0>
 8013a56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013a5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a5c:	9206      	str	r2, [sp, #24]
 8013a5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a60:	1c51      	adds	r1, r2, #1
 8013a62:	9117      	str	r1, [sp, #92]	; 0x5c
 8013a64:	7852      	ldrb	r2, [r2, #1]
 8013a66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013a6a:	2e09      	cmp	r6, #9
 8013a6c:	d937      	bls.n	8013ade <_strtod_l+0x346>
 8013a6e:	9e06      	ldr	r6, [sp, #24]
 8013a70:	1b89      	subs	r1, r1, r6
 8013a72:	2908      	cmp	r1, #8
 8013a74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013a78:	dc02      	bgt.n	8013a80 <_strtod_l+0x2e8>
 8013a7a:	4576      	cmp	r6, lr
 8013a7c:	bfa8      	it	ge
 8013a7e:	4676      	movge	r6, lr
 8013a80:	f1bc 0f00 	cmp.w	ip, #0
 8013a84:	d000      	beq.n	8013a88 <_strtod_l+0x2f0>
 8013a86:	4276      	negs	r6, r6
 8013a88:	2d00      	cmp	r5, #0
 8013a8a:	d14d      	bne.n	8013b28 <_strtod_l+0x390>
 8013a8c:	9904      	ldr	r1, [sp, #16]
 8013a8e:	4301      	orrs	r1, r0
 8013a90:	f47f aec6 	bne.w	8013820 <_strtod_l+0x88>
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	f47f aee1 	bne.w	801385c <_strtod_l+0xc4>
 8013a9a:	2a69      	cmp	r2, #105	; 0x69
 8013a9c:	d027      	beq.n	8013aee <_strtod_l+0x356>
 8013a9e:	dc24      	bgt.n	8013aea <_strtod_l+0x352>
 8013aa0:	2a49      	cmp	r2, #73	; 0x49
 8013aa2:	d024      	beq.n	8013aee <_strtod_l+0x356>
 8013aa4:	2a4e      	cmp	r2, #78	; 0x4e
 8013aa6:	f47f aed9 	bne.w	801385c <_strtod_l+0xc4>
 8013aaa:	499f      	ldr	r1, [pc, #636]	; (8013d28 <_strtod_l+0x590>)
 8013aac:	a817      	add	r0, sp, #92	; 0x5c
 8013aae:	f002 f967 	bl	8015d80 <__match>
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	f43f aed2 	beq.w	801385c <_strtod_l+0xc4>
 8013ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	2b28      	cmp	r3, #40	; 0x28
 8013abe:	d12d      	bne.n	8013b1c <_strtod_l+0x384>
 8013ac0:	499a      	ldr	r1, [pc, #616]	; (8013d2c <_strtod_l+0x594>)
 8013ac2:	aa1a      	add	r2, sp, #104	; 0x68
 8013ac4:	a817      	add	r0, sp, #92	; 0x5c
 8013ac6:	f002 f96f 	bl	8015da8 <__hexnan>
 8013aca:	2805      	cmp	r0, #5
 8013acc:	d126      	bne.n	8013b1c <_strtod_l+0x384>
 8013ace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ad0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013ad4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013ad8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013adc:	e6a0      	b.n	8013820 <_strtod_l+0x88>
 8013ade:	210a      	movs	r1, #10
 8013ae0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013ae4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013ae8:	e7b9      	b.n	8013a5e <_strtod_l+0x2c6>
 8013aea:	2a6e      	cmp	r2, #110	; 0x6e
 8013aec:	e7db      	b.n	8013aa6 <_strtod_l+0x30e>
 8013aee:	4990      	ldr	r1, [pc, #576]	; (8013d30 <_strtod_l+0x598>)
 8013af0:	a817      	add	r0, sp, #92	; 0x5c
 8013af2:	f002 f945 	bl	8015d80 <__match>
 8013af6:	2800      	cmp	r0, #0
 8013af8:	f43f aeb0 	beq.w	801385c <_strtod_l+0xc4>
 8013afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013afe:	498d      	ldr	r1, [pc, #564]	; (8013d34 <_strtod_l+0x59c>)
 8013b00:	3b01      	subs	r3, #1
 8013b02:	a817      	add	r0, sp, #92	; 0x5c
 8013b04:	9317      	str	r3, [sp, #92]	; 0x5c
 8013b06:	f002 f93b 	bl	8015d80 <__match>
 8013b0a:	b910      	cbnz	r0, 8013b12 <_strtod_l+0x37a>
 8013b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b0e:	3301      	adds	r3, #1
 8013b10:	9317      	str	r3, [sp, #92]	; 0x5c
 8013b12:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013d44 <_strtod_l+0x5ac>
 8013b16:	f04f 0a00 	mov.w	sl, #0
 8013b1a:	e681      	b.n	8013820 <_strtod_l+0x88>
 8013b1c:	4886      	ldr	r0, [pc, #536]	; (8013d38 <_strtod_l+0x5a0>)
 8013b1e:	f003 f89b 	bl	8016c58 <nan>
 8013b22:	ec5b ab10 	vmov	sl, fp, d0
 8013b26:	e67b      	b.n	8013820 <_strtod_l+0x88>
 8013b28:	9b05      	ldr	r3, [sp, #20]
 8013b2a:	9807      	ldr	r0, [sp, #28]
 8013b2c:	1af3      	subs	r3, r6, r3
 8013b2e:	2f00      	cmp	r7, #0
 8013b30:	bf08      	it	eq
 8013b32:	462f      	moveq	r7, r5
 8013b34:	2d10      	cmp	r5, #16
 8013b36:	9306      	str	r3, [sp, #24]
 8013b38:	46a8      	mov	r8, r5
 8013b3a:	bfa8      	it	ge
 8013b3c:	f04f 0810 	movge.w	r8, #16
 8013b40:	f7ec fcf8 	bl	8000534 <__aeabi_ui2d>
 8013b44:	2d09      	cmp	r5, #9
 8013b46:	4682      	mov	sl, r0
 8013b48:	468b      	mov	fp, r1
 8013b4a:	dd13      	ble.n	8013b74 <_strtod_l+0x3dc>
 8013b4c:	4b7b      	ldr	r3, [pc, #492]	; (8013d3c <_strtod_l+0x5a4>)
 8013b4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013b52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013b56:	f7ec fd67 	bl	8000628 <__aeabi_dmul>
 8013b5a:	4682      	mov	sl, r0
 8013b5c:	4648      	mov	r0, r9
 8013b5e:	468b      	mov	fp, r1
 8013b60:	f7ec fce8 	bl	8000534 <__aeabi_ui2d>
 8013b64:	4602      	mov	r2, r0
 8013b66:	460b      	mov	r3, r1
 8013b68:	4650      	mov	r0, sl
 8013b6a:	4659      	mov	r1, fp
 8013b6c:	f7ec fba6 	bl	80002bc <__adddf3>
 8013b70:	4682      	mov	sl, r0
 8013b72:	468b      	mov	fp, r1
 8013b74:	2d0f      	cmp	r5, #15
 8013b76:	dc38      	bgt.n	8013bea <_strtod_l+0x452>
 8013b78:	9b06      	ldr	r3, [sp, #24]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f43f ae50 	beq.w	8013820 <_strtod_l+0x88>
 8013b80:	dd24      	ble.n	8013bcc <_strtod_l+0x434>
 8013b82:	2b16      	cmp	r3, #22
 8013b84:	dc0b      	bgt.n	8013b9e <_strtod_l+0x406>
 8013b86:	496d      	ldr	r1, [pc, #436]	; (8013d3c <_strtod_l+0x5a4>)
 8013b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b90:	4652      	mov	r2, sl
 8013b92:	465b      	mov	r3, fp
 8013b94:	f7ec fd48 	bl	8000628 <__aeabi_dmul>
 8013b98:	4682      	mov	sl, r0
 8013b9a:	468b      	mov	fp, r1
 8013b9c:	e640      	b.n	8013820 <_strtod_l+0x88>
 8013b9e:	9a06      	ldr	r2, [sp, #24]
 8013ba0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	db20      	blt.n	8013bea <_strtod_l+0x452>
 8013ba8:	4c64      	ldr	r4, [pc, #400]	; (8013d3c <_strtod_l+0x5a4>)
 8013baa:	f1c5 050f 	rsb	r5, r5, #15
 8013bae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013bb2:	4652      	mov	r2, sl
 8013bb4:	465b      	mov	r3, fp
 8013bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bba:	f7ec fd35 	bl	8000628 <__aeabi_dmul>
 8013bbe:	9b06      	ldr	r3, [sp, #24]
 8013bc0:	1b5d      	subs	r5, r3, r5
 8013bc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013bc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013bca:	e7e3      	b.n	8013b94 <_strtod_l+0x3fc>
 8013bcc:	9b06      	ldr	r3, [sp, #24]
 8013bce:	3316      	adds	r3, #22
 8013bd0:	db0b      	blt.n	8013bea <_strtod_l+0x452>
 8013bd2:	9b05      	ldr	r3, [sp, #20]
 8013bd4:	1b9e      	subs	r6, r3, r6
 8013bd6:	4b59      	ldr	r3, [pc, #356]	; (8013d3c <_strtod_l+0x5a4>)
 8013bd8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013bdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013be0:	4650      	mov	r0, sl
 8013be2:	4659      	mov	r1, fp
 8013be4:	f7ec fe4a 	bl	800087c <__aeabi_ddiv>
 8013be8:	e7d6      	b.n	8013b98 <_strtod_l+0x400>
 8013bea:	9b06      	ldr	r3, [sp, #24]
 8013bec:	eba5 0808 	sub.w	r8, r5, r8
 8013bf0:	4498      	add	r8, r3
 8013bf2:	f1b8 0f00 	cmp.w	r8, #0
 8013bf6:	dd74      	ble.n	8013ce2 <_strtod_l+0x54a>
 8013bf8:	f018 030f 	ands.w	r3, r8, #15
 8013bfc:	d00a      	beq.n	8013c14 <_strtod_l+0x47c>
 8013bfe:	494f      	ldr	r1, [pc, #316]	; (8013d3c <_strtod_l+0x5a4>)
 8013c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c04:	4652      	mov	r2, sl
 8013c06:	465b      	mov	r3, fp
 8013c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c0c:	f7ec fd0c 	bl	8000628 <__aeabi_dmul>
 8013c10:	4682      	mov	sl, r0
 8013c12:	468b      	mov	fp, r1
 8013c14:	f038 080f 	bics.w	r8, r8, #15
 8013c18:	d04f      	beq.n	8013cba <_strtod_l+0x522>
 8013c1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013c1e:	dd22      	ble.n	8013c66 <_strtod_l+0x4ce>
 8013c20:	2500      	movs	r5, #0
 8013c22:	462e      	mov	r6, r5
 8013c24:	9507      	str	r5, [sp, #28]
 8013c26:	9505      	str	r5, [sp, #20]
 8013c28:	2322      	movs	r3, #34	; 0x22
 8013c2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013d44 <_strtod_l+0x5ac>
 8013c2e:	6023      	str	r3, [r4, #0]
 8013c30:	f04f 0a00 	mov.w	sl, #0
 8013c34:	9b07      	ldr	r3, [sp, #28]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	f43f adf2 	beq.w	8013820 <_strtod_l+0x88>
 8013c3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f002 fa18 	bl	8016074 <_Bfree>
 8013c44:	9905      	ldr	r1, [sp, #20]
 8013c46:	4620      	mov	r0, r4
 8013c48:	f002 fa14 	bl	8016074 <_Bfree>
 8013c4c:	4631      	mov	r1, r6
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f002 fa10 	bl	8016074 <_Bfree>
 8013c54:	9907      	ldr	r1, [sp, #28]
 8013c56:	4620      	mov	r0, r4
 8013c58:	f002 fa0c 	bl	8016074 <_Bfree>
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f002 fa08 	bl	8016074 <_Bfree>
 8013c64:	e5dc      	b.n	8013820 <_strtod_l+0x88>
 8013c66:	4b36      	ldr	r3, [pc, #216]	; (8013d40 <_strtod_l+0x5a8>)
 8013c68:	9304      	str	r3, [sp, #16]
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013c70:	4650      	mov	r0, sl
 8013c72:	4659      	mov	r1, fp
 8013c74:	4699      	mov	r9, r3
 8013c76:	f1b8 0f01 	cmp.w	r8, #1
 8013c7a:	dc21      	bgt.n	8013cc0 <_strtod_l+0x528>
 8013c7c:	b10b      	cbz	r3, 8013c82 <_strtod_l+0x4ea>
 8013c7e:	4682      	mov	sl, r0
 8013c80:	468b      	mov	fp, r1
 8013c82:	4b2f      	ldr	r3, [pc, #188]	; (8013d40 <_strtod_l+0x5a8>)
 8013c84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013c88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013c8c:	4652      	mov	r2, sl
 8013c8e:	465b      	mov	r3, fp
 8013c90:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013c94:	f7ec fcc8 	bl	8000628 <__aeabi_dmul>
 8013c98:	4b2a      	ldr	r3, [pc, #168]	; (8013d44 <_strtod_l+0x5ac>)
 8013c9a:	460a      	mov	r2, r1
 8013c9c:	400b      	ands	r3, r1
 8013c9e:	492a      	ldr	r1, [pc, #168]	; (8013d48 <_strtod_l+0x5b0>)
 8013ca0:	428b      	cmp	r3, r1
 8013ca2:	4682      	mov	sl, r0
 8013ca4:	d8bc      	bhi.n	8013c20 <_strtod_l+0x488>
 8013ca6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013caa:	428b      	cmp	r3, r1
 8013cac:	bf86      	itte	hi
 8013cae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013d4c <_strtod_l+0x5b4>
 8013cb2:	f04f 3aff 	movhi.w	sl, #4294967295
 8013cb6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013cba:	2300      	movs	r3, #0
 8013cbc:	9304      	str	r3, [sp, #16]
 8013cbe:	e084      	b.n	8013dca <_strtod_l+0x632>
 8013cc0:	f018 0f01 	tst.w	r8, #1
 8013cc4:	d005      	beq.n	8013cd2 <_strtod_l+0x53a>
 8013cc6:	9b04      	ldr	r3, [sp, #16]
 8013cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ccc:	f7ec fcac 	bl	8000628 <__aeabi_dmul>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	9a04      	ldr	r2, [sp, #16]
 8013cd4:	3208      	adds	r2, #8
 8013cd6:	f109 0901 	add.w	r9, r9, #1
 8013cda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013cde:	9204      	str	r2, [sp, #16]
 8013ce0:	e7c9      	b.n	8013c76 <_strtod_l+0x4de>
 8013ce2:	d0ea      	beq.n	8013cba <_strtod_l+0x522>
 8013ce4:	f1c8 0800 	rsb	r8, r8, #0
 8013ce8:	f018 020f 	ands.w	r2, r8, #15
 8013cec:	d00a      	beq.n	8013d04 <_strtod_l+0x56c>
 8013cee:	4b13      	ldr	r3, [pc, #76]	; (8013d3c <_strtod_l+0x5a4>)
 8013cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cf4:	4650      	mov	r0, sl
 8013cf6:	4659      	mov	r1, fp
 8013cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfc:	f7ec fdbe 	bl	800087c <__aeabi_ddiv>
 8013d00:	4682      	mov	sl, r0
 8013d02:	468b      	mov	fp, r1
 8013d04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013d08:	d0d7      	beq.n	8013cba <_strtod_l+0x522>
 8013d0a:	f1b8 0f1f 	cmp.w	r8, #31
 8013d0e:	dd1f      	ble.n	8013d50 <_strtod_l+0x5b8>
 8013d10:	2500      	movs	r5, #0
 8013d12:	462e      	mov	r6, r5
 8013d14:	9507      	str	r5, [sp, #28]
 8013d16:	9505      	str	r5, [sp, #20]
 8013d18:	2322      	movs	r3, #34	; 0x22
 8013d1a:	f04f 0a00 	mov.w	sl, #0
 8013d1e:	f04f 0b00 	mov.w	fp, #0
 8013d22:	6023      	str	r3, [r4, #0]
 8013d24:	e786      	b.n	8013c34 <_strtod_l+0x49c>
 8013d26:	bf00      	nop
 8013d28:	080255bd 	.word	0x080255bd
 8013d2c:	080255f8 	.word	0x080255f8
 8013d30:	080255b5 	.word	0x080255b5
 8013d34:	0802573c 	.word	0x0802573c
 8013d38:	08025a50 	.word	0x08025a50
 8013d3c:	08025930 	.word	0x08025930
 8013d40:	08025908 	.word	0x08025908
 8013d44:	7ff00000 	.word	0x7ff00000
 8013d48:	7ca00000 	.word	0x7ca00000
 8013d4c:	7fefffff 	.word	0x7fefffff
 8013d50:	f018 0310 	ands.w	r3, r8, #16
 8013d54:	bf18      	it	ne
 8013d56:	236a      	movne	r3, #106	; 0x6a
 8013d58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014108 <_strtod_l+0x970>
 8013d5c:	9304      	str	r3, [sp, #16]
 8013d5e:	4650      	mov	r0, sl
 8013d60:	4659      	mov	r1, fp
 8013d62:	2300      	movs	r3, #0
 8013d64:	f018 0f01 	tst.w	r8, #1
 8013d68:	d004      	beq.n	8013d74 <_strtod_l+0x5dc>
 8013d6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013d6e:	f7ec fc5b 	bl	8000628 <__aeabi_dmul>
 8013d72:	2301      	movs	r3, #1
 8013d74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013d78:	f109 0908 	add.w	r9, r9, #8
 8013d7c:	d1f2      	bne.n	8013d64 <_strtod_l+0x5cc>
 8013d7e:	b10b      	cbz	r3, 8013d84 <_strtod_l+0x5ec>
 8013d80:	4682      	mov	sl, r0
 8013d82:	468b      	mov	fp, r1
 8013d84:	9b04      	ldr	r3, [sp, #16]
 8013d86:	b1c3      	cbz	r3, 8013dba <_strtod_l+0x622>
 8013d88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013d8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	4659      	mov	r1, fp
 8013d94:	dd11      	ble.n	8013dba <_strtod_l+0x622>
 8013d96:	2b1f      	cmp	r3, #31
 8013d98:	f340 8124 	ble.w	8013fe4 <_strtod_l+0x84c>
 8013d9c:	2b34      	cmp	r3, #52	; 0x34
 8013d9e:	bfde      	ittt	le
 8013da0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013da4:	f04f 33ff 	movle.w	r3, #4294967295
 8013da8:	fa03 f202 	lslle.w	r2, r3, r2
 8013dac:	f04f 0a00 	mov.w	sl, #0
 8013db0:	bfcc      	ite	gt
 8013db2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013db6:	ea02 0b01 	andle.w	fp, r2, r1
 8013dba:	2200      	movs	r2, #0
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	4650      	mov	r0, sl
 8013dc0:	4659      	mov	r1, fp
 8013dc2:	f7ec fe99 	bl	8000af8 <__aeabi_dcmpeq>
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	d1a2      	bne.n	8013d10 <_strtod_l+0x578>
 8013dca:	9b07      	ldr	r3, [sp, #28]
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	9908      	ldr	r1, [sp, #32]
 8013dd0:	462b      	mov	r3, r5
 8013dd2:	463a      	mov	r2, r7
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f002 f9b5 	bl	8016144 <__s2b>
 8013dda:	9007      	str	r0, [sp, #28]
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	f43f af1f 	beq.w	8013c20 <_strtod_l+0x488>
 8013de2:	9b05      	ldr	r3, [sp, #20]
 8013de4:	1b9e      	subs	r6, r3, r6
 8013de6:	9b06      	ldr	r3, [sp, #24]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	bfb4      	ite	lt
 8013dec:	4633      	movlt	r3, r6
 8013dee:	2300      	movge	r3, #0
 8013df0:	930c      	str	r3, [sp, #48]	; 0x30
 8013df2:	9b06      	ldr	r3, [sp, #24]
 8013df4:	2500      	movs	r5, #0
 8013df6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013dfa:	9312      	str	r3, [sp, #72]	; 0x48
 8013dfc:	462e      	mov	r6, r5
 8013dfe:	9b07      	ldr	r3, [sp, #28]
 8013e00:	4620      	mov	r0, r4
 8013e02:	6859      	ldr	r1, [r3, #4]
 8013e04:	f002 f8f6 	bl	8015ff4 <_Balloc>
 8013e08:	9005      	str	r0, [sp, #20]
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	f43f af0c 	beq.w	8013c28 <_strtod_l+0x490>
 8013e10:	9b07      	ldr	r3, [sp, #28]
 8013e12:	691a      	ldr	r2, [r3, #16]
 8013e14:	3202      	adds	r2, #2
 8013e16:	f103 010c 	add.w	r1, r3, #12
 8013e1a:	0092      	lsls	r2, r2, #2
 8013e1c:	300c      	adds	r0, #12
 8013e1e:	f7fe ff25 	bl	8012c6c <memcpy>
 8013e22:	ec4b ab10 	vmov	d0, sl, fp
 8013e26:	aa1a      	add	r2, sp, #104	; 0x68
 8013e28:	a919      	add	r1, sp, #100	; 0x64
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f002 fcd0 	bl	80167d0 <__d2b>
 8013e30:	ec4b ab18 	vmov	d8, sl, fp
 8013e34:	9018      	str	r0, [sp, #96]	; 0x60
 8013e36:	2800      	cmp	r0, #0
 8013e38:	f43f aef6 	beq.w	8013c28 <_strtod_l+0x490>
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f002 fa1a 	bl	8016278 <__i2b>
 8013e44:	4606      	mov	r6, r0
 8013e46:	2800      	cmp	r0, #0
 8013e48:	f43f aeee 	beq.w	8013c28 <_strtod_l+0x490>
 8013e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e4e:	9904      	ldr	r1, [sp, #16]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	bfab      	itete	ge
 8013e54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013e56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013e58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013e5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013e5e:	bfac      	ite	ge
 8013e60:	eb03 0902 	addge.w	r9, r3, r2
 8013e64:	1ad7      	sublt	r7, r2, r3
 8013e66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013e68:	eba3 0801 	sub.w	r8, r3, r1
 8013e6c:	4490      	add	r8, r2
 8013e6e:	4ba1      	ldr	r3, [pc, #644]	; (80140f4 <_strtod_l+0x95c>)
 8013e70:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e74:	4598      	cmp	r8, r3
 8013e76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013e7a:	f280 80c7 	bge.w	801400c <_strtod_l+0x874>
 8013e7e:	eba3 0308 	sub.w	r3, r3, r8
 8013e82:	2b1f      	cmp	r3, #31
 8013e84:	eba2 0203 	sub.w	r2, r2, r3
 8013e88:	f04f 0101 	mov.w	r1, #1
 8013e8c:	f300 80b1 	bgt.w	8013ff2 <_strtod_l+0x85a>
 8013e90:	fa01 f303 	lsl.w	r3, r1, r3
 8013e94:	930d      	str	r3, [sp, #52]	; 0x34
 8013e96:	2300      	movs	r3, #0
 8013e98:	9308      	str	r3, [sp, #32]
 8013e9a:	eb09 0802 	add.w	r8, r9, r2
 8013e9e:	9b04      	ldr	r3, [sp, #16]
 8013ea0:	45c1      	cmp	r9, r8
 8013ea2:	4417      	add	r7, r2
 8013ea4:	441f      	add	r7, r3
 8013ea6:	464b      	mov	r3, r9
 8013ea8:	bfa8      	it	ge
 8013eaa:	4643      	movge	r3, r8
 8013eac:	42bb      	cmp	r3, r7
 8013eae:	bfa8      	it	ge
 8013eb0:	463b      	movge	r3, r7
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	bfc2      	ittt	gt
 8013eb6:	eba8 0803 	subgt.w	r8, r8, r3
 8013eba:	1aff      	subgt	r7, r7, r3
 8013ebc:	eba9 0903 	subgt.w	r9, r9, r3
 8013ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	dd17      	ble.n	8013ef6 <_strtod_l+0x75e>
 8013ec6:	4631      	mov	r1, r6
 8013ec8:	461a      	mov	r2, r3
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f002 fa94 	bl	80163f8 <__pow5mult>
 8013ed0:	4606      	mov	r6, r0
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f43f aea8 	beq.w	8013c28 <_strtod_l+0x490>
 8013ed8:	4601      	mov	r1, r0
 8013eda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013edc:	4620      	mov	r0, r4
 8013ede:	f002 f9e1 	bl	80162a4 <__multiply>
 8013ee2:	900b      	str	r0, [sp, #44]	; 0x2c
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	f43f ae9f 	beq.w	8013c28 <_strtod_l+0x490>
 8013eea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013eec:	4620      	mov	r0, r4
 8013eee:	f002 f8c1 	bl	8016074 <_Bfree>
 8013ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ef4:	9318      	str	r3, [sp, #96]	; 0x60
 8013ef6:	f1b8 0f00 	cmp.w	r8, #0
 8013efa:	f300 808c 	bgt.w	8014016 <_strtod_l+0x87e>
 8013efe:	9b06      	ldr	r3, [sp, #24]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	dd08      	ble.n	8013f16 <_strtod_l+0x77e>
 8013f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f06:	9905      	ldr	r1, [sp, #20]
 8013f08:	4620      	mov	r0, r4
 8013f0a:	f002 fa75 	bl	80163f8 <__pow5mult>
 8013f0e:	9005      	str	r0, [sp, #20]
 8013f10:	2800      	cmp	r0, #0
 8013f12:	f43f ae89 	beq.w	8013c28 <_strtod_l+0x490>
 8013f16:	2f00      	cmp	r7, #0
 8013f18:	dd08      	ble.n	8013f2c <_strtod_l+0x794>
 8013f1a:	9905      	ldr	r1, [sp, #20]
 8013f1c:	463a      	mov	r2, r7
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f002 fac4 	bl	80164ac <__lshift>
 8013f24:	9005      	str	r0, [sp, #20]
 8013f26:	2800      	cmp	r0, #0
 8013f28:	f43f ae7e 	beq.w	8013c28 <_strtod_l+0x490>
 8013f2c:	f1b9 0f00 	cmp.w	r9, #0
 8013f30:	dd08      	ble.n	8013f44 <_strtod_l+0x7ac>
 8013f32:	4631      	mov	r1, r6
 8013f34:	464a      	mov	r2, r9
 8013f36:	4620      	mov	r0, r4
 8013f38:	f002 fab8 	bl	80164ac <__lshift>
 8013f3c:	4606      	mov	r6, r0
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	f43f ae72 	beq.w	8013c28 <_strtod_l+0x490>
 8013f44:	9a05      	ldr	r2, [sp, #20]
 8013f46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f002 fb3b 	bl	80165c4 <__mdiff>
 8013f4e:	4605      	mov	r5, r0
 8013f50:	2800      	cmp	r0, #0
 8013f52:	f43f ae69 	beq.w	8013c28 <_strtod_l+0x490>
 8013f56:	68c3      	ldr	r3, [r0, #12]
 8013f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	60c3      	str	r3, [r0, #12]
 8013f5e:	4631      	mov	r1, r6
 8013f60:	f002 fb14 	bl	801658c <__mcmp>
 8013f64:	2800      	cmp	r0, #0
 8013f66:	da60      	bge.n	801402a <_strtod_l+0x892>
 8013f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f6a:	ea53 030a 	orrs.w	r3, r3, sl
 8013f6e:	f040 8082 	bne.w	8014076 <_strtod_l+0x8de>
 8013f72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d17d      	bne.n	8014076 <_strtod_l+0x8de>
 8013f7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f7e:	0d1b      	lsrs	r3, r3, #20
 8013f80:	051b      	lsls	r3, r3, #20
 8013f82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f86:	d976      	bls.n	8014076 <_strtod_l+0x8de>
 8013f88:	696b      	ldr	r3, [r5, #20]
 8013f8a:	b913      	cbnz	r3, 8013f92 <_strtod_l+0x7fa>
 8013f8c:	692b      	ldr	r3, [r5, #16]
 8013f8e:	2b01      	cmp	r3, #1
 8013f90:	dd71      	ble.n	8014076 <_strtod_l+0x8de>
 8013f92:	4629      	mov	r1, r5
 8013f94:	2201      	movs	r2, #1
 8013f96:	4620      	mov	r0, r4
 8013f98:	f002 fa88 	bl	80164ac <__lshift>
 8013f9c:	4631      	mov	r1, r6
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	f002 faf4 	bl	801658c <__mcmp>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	dd66      	ble.n	8014076 <_strtod_l+0x8de>
 8013fa8:	9904      	ldr	r1, [sp, #16]
 8013faa:	4a53      	ldr	r2, [pc, #332]	; (80140f8 <_strtod_l+0x960>)
 8013fac:	465b      	mov	r3, fp
 8013fae:	2900      	cmp	r1, #0
 8013fb0:	f000 8081 	beq.w	80140b6 <_strtod_l+0x91e>
 8013fb4:	ea02 010b 	and.w	r1, r2, fp
 8013fb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013fbc:	dc7b      	bgt.n	80140b6 <_strtod_l+0x91e>
 8013fbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013fc2:	f77f aea9 	ble.w	8013d18 <_strtod_l+0x580>
 8013fc6:	4b4d      	ldr	r3, [pc, #308]	; (80140fc <_strtod_l+0x964>)
 8013fc8:	4650      	mov	r0, sl
 8013fca:	4659      	mov	r1, fp
 8013fcc:	2200      	movs	r2, #0
 8013fce:	f7ec fb2b 	bl	8000628 <__aeabi_dmul>
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	4303      	orrs	r3, r0
 8013fd6:	bf08      	it	eq
 8013fd8:	2322      	moveq	r3, #34	; 0x22
 8013fda:	4682      	mov	sl, r0
 8013fdc:	468b      	mov	fp, r1
 8013fde:	bf08      	it	eq
 8013fe0:	6023      	streq	r3, [r4, #0]
 8013fe2:	e62b      	b.n	8013c3c <_strtod_l+0x4a4>
 8013fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8013fec:	ea03 0a0a 	and.w	sl, r3, sl
 8013ff0:	e6e3      	b.n	8013dba <_strtod_l+0x622>
 8013ff2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013ff6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013ffa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013ffe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014002:	fa01 f308 	lsl.w	r3, r1, r8
 8014006:	9308      	str	r3, [sp, #32]
 8014008:	910d      	str	r1, [sp, #52]	; 0x34
 801400a:	e746      	b.n	8013e9a <_strtod_l+0x702>
 801400c:	2300      	movs	r3, #0
 801400e:	9308      	str	r3, [sp, #32]
 8014010:	2301      	movs	r3, #1
 8014012:	930d      	str	r3, [sp, #52]	; 0x34
 8014014:	e741      	b.n	8013e9a <_strtod_l+0x702>
 8014016:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014018:	4642      	mov	r2, r8
 801401a:	4620      	mov	r0, r4
 801401c:	f002 fa46 	bl	80164ac <__lshift>
 8014020:	9018      	str	r0, [sp, #96]	; 0x60
 8014022:	2800      	cmp	r0, #0
 8014024:	f47f af6b 	bne.w	8013efe <_strtod_l+0x766>
 8014028:	e5fe      	b.n	8013c28 <_strtod_l+0x490>
 801402a:	465f      	mov	r7, fp
 801402c:	d16e      	bne.n	801410c <_strtod_l+0x974>
 801402e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014034:	b342      	cbz	r2, 8014088 <_strtod_l+0x8f0>
 8014036:	4a32      	ldr	r2, [pc, #200]	; (8014100 <_strtod_l+0x968>)
 8014038:	4293      	cmp	r3, r2
 801403a:	d128      	bne.n	801408e <_strtod_l+0x8f6>
 801403c:	9b04      	ldr	r3, [sp, #16]
 801403e:	4651      	mov	r1, sl
 8014040:	b1eb      	cbz	r3, 801407e <_strtod_l+0x8e6>
 8014042:	4b2d      	ldr	r3, [pc, #180]	; (80140f8 <_strtod_l+0x960>)
 8014044:	403b      	ands	r3, r7
 8014046:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801404a:	f04f 32ff 	mov.w	r2, #4294967295
 801404e:	d819      	bhi.n	8014084 <_strtod_l+0x8ec>
 8014050:	0d1b      	lsrs	r3, r3, #20
 8014052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014056:	fa02 f303 	lsl.w	r3, r2, r3
 801405a:	4299      	cmp	r1, r3
 801405c:	d117      	bne.n	801408e <_strtod_l+0x8f6>
 801405e:	4b29      	ldr	r3, [pc, #164]	; (8014104 <_strtod_l+0x96c>)
 8014060:	429f      	cmp	r7, r3
 8014062:	d102      	bne.n	801406a <_strtod_l+0x8d2>
 8014064:	3101      	adds	r1, #1
 8014066:	f43f addf 	beq.w	8013c28 <_strtod_l+0x490>
 801406a:	4b23      	ldr	r3, [pc, #140]	; (80140f8 <_strtod_l+0x960>)
 801406c:	403b      	ands	r3, r7
 801406e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014072:	f04f 0a00 	mov.w	sl, #0
 8014076:	9b04      	ldr	r3, [sp, #16]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d1a4      	bne.n	8013fc6 <_strtod_l+0x82e>
 801407c:	e5de      	b.n	8013c3c <_strtod_l+0x4a4>
 801407e:	f04f 33ff 	mov.w	r3, #4294967295
 8014082:	e7ea      	b.n	801405a <_strtod_l+0x8c2>
 8014084:	4613      	mov	r3, r2
 8014086:	e7e8      	b.n	801405a <_strtod_l+0x8c2>
 8014088:	ea53 030a 	orrs.w	r3, r3, sl
 801408c:	d08c      	beq.n	8013fa8 <_strtod_l+0x810>
 801408e:	9b08      	ldr	r3, [sp, #32]
 8014090:	b1db      	cbz	r3, 80140ca <_strtod_l+0x932>
 8014092:	423b      	tst	r3, r7
 8014094:	d0ef      	beq.n	8014076 <_strtod_l+0x8de>
 8014096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014098:	9a04      	ldr	r2, [sp, #16]
 801409a:	4650      	mov	r0, sl
 801409c:	4659      	mov	r1, fp
 801409e:	b1c3      	cbz	r3, 80140d2 <_strtod_l+0x93a>
 80140a0:	f7ff fb5c 	bl	801375c <sulp>
 80140a4:	4602      	mov	r2, r0
 80140a6:	460b      	mov	r3, r1
 80140a8:	ec51 0b18 	vmov	r0, r1, d8
 80140ac:	f7ec f906 	bl	80002bc <__adddf3>
 80140b0:	4682      	mov	sl, r0
 80140b2:	468b      	mov	fp, r1
 80140b4:	e7df      	b.n	8014076 <_strtod_l+0x8de>
 80140b6:	4013      	ands	r3, r2
 80140b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80140bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80140c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80140c4:	f04f 3aff 	mov.w	sl, #4294967295
 80140c8:	e7d5      	b.n	8014076 <_strtod_l+0x8de>
 80140ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140cc:	ea13 0f0a 	tst.w	r3, sl
 80140d0:	e7e0      	b.n	8014094 <_strtod_l+0x8fc>
 80140d2:	f7ff fb43 	bl	801375c <sulp>
 80140d6:	4602      	mov	r2, r0
 80140d8:	460b      	mov	r3, r1
 80140da:	ec51 0b18 	vmov	r0, r1, d8
 80140de:	f7ec f8eb 	bl	80002b8 <__aeabi_dsub>
 80140e2:	2200      	movs	r2, #0
 80140e4:	2300      	movs	r3, #0
 80140e6:	4682      	mov	sl, r0
 80140e8:	468b      	mov	fp, r1
 80140ea:	f7ec fd05 	bl	8000af8 <__aeabi_dcmpeq>
 80140ee:	2800      	cmp	r0, #0
 80140f0:	d0c1      	beq.n	8014076 <_strtod_l+0x8de>
 80140f2:	e611      	b.n	8013d18 <_strtod_l+0x580>
 80140f4:	fffffc02 	.word	0xfffffc02
 80140f8:	7ff00000 	.word	0x7ff00000
 80140fc:	39500000 	.word	0x39500000
 8014100:	000fffff 	.word	0x000fffff
 8014104:	7fefffff 	.word	0x7fefffff
 8014108:	08025610 	.word	0x08025610
 801410c:	4631      	mov	r1, r6
 801410e:	4628      	mov	r0, r5
 8014110:	f002 fbba 	bl	8016888 <__ratio>
 8014114:	ec59 8b10 	vmov	r8, r9, d0
 8014118:	ee10 0a10 	vmov	r0, s0
 801411c:	2200      	movs	r2, #0
 801411e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014122:	4649      	mov	r1, r9
 8014124:	f7ec fcfc 	bl	8000b20 <__aeabi_dcmple>
 8014128:	2800      	cmp	r0, #0
 801412a:	d07a      	beq.n	8014222 <_strtod_l+0xa8a>
 801412c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801412e:	2b00      	cmp	r3, #0
 8014130:	d04a      	beq.n	80141c8 <_strtod_l+0xa30>
 8014132:	4b95      	ldr	r3, [pc, #596]	; (8014388 <_strtod_l+0xbf0>)
 8014134:	2200      	movs	r2, #0
 8014136:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801413a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014388 <_strtod_l+0xbf0>
 801413e:	f04f 0800 	mov.w	r8, #0
 8014142:	4b92      	ldr	r3, [pc, #584]	; (801438c <_strtod_l+0xbf4>)
 8014144:	403b      	ands	r3, r7
 8014146:	930d      	str	r3, [sp, #52]	; 0x34
 8014148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801414a:	4b91      	ldr	r3, [pc, #580]	; (8014390 <_strtod_l+0xbf8>)
 801414c:	429a      	cmp	r2, r3
 801414e:	f040 80b0 	bne.w	80142b2 <_strtod_l+0xb1a>
 8014152:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014156:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801415a:	ec4b ab10 	vmov	d0, sl, fp
 801415e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014162:	f002 fab9 	bl	80166d8 <__ulp>
 8014166:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801416a:	ec53 2b10 	vmov	r2, r3, d0
 801416e:	f7ec fa5b 	bl	8000628 <__aeabi_dmul>
 8014172:	4652      	mov	r2, sl
 8014174:	465b      	mov	r3, fp
 8014176:	f7ec f8a1 	bl	80002bc <__adddf3>
 801417a:	460b      	mov	r3, r1
 801417c:	4983      	ldr	r1, [pc, #524]	; (801438c <_strtod_l+0xbf4>)
 801417e:	4a85      	ldr	r2, [pc, #532]	; (8014394 <_strtod_l+0xbfc>)
 8014180:	4019      	ands	r1, r3
 8014182:	4291      	cmp	r1, r2
 8014184:	4682      	mov	sl, r0
 8014186:	d960      	bls.n	801424a <_strtod_l+0xab2>
 8014188:	ee18 3a90 	vmov	r3, s17
 801418c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014190:	4293      	cmp	r3, r2
 8014192:	d104      	bne.n	801419e <_strtod_l+0xa06>
 8014194:	ee18 3a10 	vmov	r3, s16
 8014198:	3301      	adds	r3, #1
 801419a:	f43f ad45 	beq.w	8013c28 <_strtod_l+0x490>
 801419e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80143a0 <_strtod_l+0xc08>
 80141a2:	f04f 3aff 	mov.w	sl, #4294967295
 80141a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80141a8:	4620      	mov	r0, r4
 80141aa:	f001 ff63 	bl	8016074 <_Bfree>
 80141ae:	9905      	ldr	r1, [sp, #20]
 80141b0:	4620      	mov	r0, r4
 80141b2:	f001 ff5f 	bl	8016074 <_Bfree>
 80141b6:	4631      	mov	r1, r6
 80141b8:	4620      	mov	r0, r4
 80141ba:	f001 ff5b 	bl	8016074 <_Bfree>
 80141be:	4629      	mov	r1, r5
 80141c0:	4620      	mov	r0, r4
 80141c2:	f001 ff57 	bl	8016074 <_Bfree>
 80141c6:	e61a      	b.n	8013dfe <_strtod_l+0x666>
 80141c8:	f1ba 0f00 	cmp.w	sl, #0
 80141cc:	d11b      	bne.n	8014206 <_strtod_l+0xa6e>
 80141ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141d2:	b9f3      	cbnz	r3, 8014212 <_strtod_l+0xa7a>
 80141d4:	4b6c      	ldr	r3, [pc, #432]	; (8014388 <_strtod_l+0xbf0>)
 80141d6:	2200      	movs	r2, #0
 80141d8:	4640      	mov	r0, r8
 80141da:	4649      	mov	r1, r9
 80141dc:	f7ec fc96 	bl	8000b0c <__aeabi_dcmplt>
 80141e0:	b9d0      	cbnz	r0, 8014218 <_strtod_l+0xa80>
 80141e2:	4640      	mov	r0, r8
 80141e4:	4649      	mov	r1, r9
 80141e6:	4b6c      	ldr	r3, [pc, #432]	; (8014398 <_strtod_l+0xc00>)
 80141e8:	2200      	movs	r2, #0
 80141ea:	f7ec fa1d 	bl	8000628 <__aeabi_dmul>
 80141ee:	4680      	mov	r8, r0
 80141f0:	4689      	mov	r9, r1
 80141f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80141f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80141fa:	9315      	str	r3, [sp, #84]	; 0x54
 80141fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014200:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014204:	e79d      	b.n	8014142 <_strtod_l+0x9aa>
 8014206:	f1ba 0f01 	cmp.w	sl, #1
 801420a:	d102      	bne.n	8014212 <_strtod_l+0xa7a>
 801420c:	2f00      	cmp	r7, #0
 801420e:	f43f ad83 	beq.w	8013d18 <_strtod_l+0x580>
 8014212:	4b62      	ldr	r3, [pc, #392]	; (801439c <_strtod_l+0xc04>)
 8014214:	2200      	movs	r2, #0
 8014216:	e78e      	b.n	8014136 <_strtod_l+0x99e>
 8014218:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014398 <_strtod_l+0xc00>
 801421c:	f04f 0800 	mov.w	r8, #0
 8014220:	e7e7      	b.n	80141f2 <_strtod_l+0xa5a>
 8014222:	4b5d      	ldr	r3, [pc, #372]	; (8014398 <_strtod_l+0xc00>)
 8014224:	4640      	mov	r0, r8
 8014226:	4649      	mov	r1, r9
 8014228:	2200      	movs	r2, #0
 801422a:	f7ec f9fd 	bl	8000628 <__aeabi_dmul>
 801422e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014230:	4680      	mov	r8, r0
 8014232:	4689      	mov	r9, r1
 8014234:	b933      	cbnz	r3, 8014244 <_strtod_l+0xaac>
 8014236:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801423a:	900e      	str	r0, [sp, #56]	; 0x38
 801423c:	930f      	str	r3, [sp, #60]	; 0x3c
 801423e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014242:	e7dd      	b.n	8014200 <_strtod_l+0xa68>
 8014244:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014248:	e7f9      	b.n	801423e <_strtod_l+0xaa6>
 801424a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801424e:	9b04      	ldr	r3, [sp, #16]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d1a8      	bne.n	80141a6 <_strtod_l+0xa0e>
 8014254:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801425a:	0d1b      	lsrs	r3, r3, #20
 801425c:	051b      	lsls	r3, r3, #20
 801425e:	429a      	cmp	r2, r3
 8014260:	d1a1      	bne.n	80141a6 <_strtod_l+0xa0e>
 8014262:	4640      	mov	r0, r8
 8014264:	4649      	mov	r1, r9
 8014266:	f7ec fd3f 	bl	8000ce8 <__aeabi_d2lz>
 801426a:	f7ec f9af 	bl	80005cc <__aeabi_l2d>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	4640      	mov	r0, r8
 8014274:	4649      	mov	r1, r9
 8014276:	f7ec f81f 	bl	80002b8 <__aeabi_dsub>
 801427a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801427c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014280:	ea43 030a 	orr.w	r3, r3, sl
 8014284:	4313      	orrs	r3, r2
 8014286:	4680      	mov	r8, r0
 8014288:	4689      	mov	r9, r1
 801428a:	d055      	beq.n	8014338 <_strtod_l+0xba0>
 801428c:	a336      	add	r3, pc, #216	; (adr r3, 8014368 <_strtod_l+0xbd0>)
 801428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014292:	f7ec fc3b 	bl	8000b0c <__aeabi_dcmplt>
 8014296:	2800      	cmp	r0, #0
 8014298:	f47f acd0 	bne.w	8013c3c <_strtod_l+0x4a4>
 801429c:	a334      	add	r3, pc, #208	; (adr r3, 8014370 <_strtod_l+0xbd8>)
 801429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a2:	4640      	mov	r0, r8
 80142a4:	4649      	mov	r1, r9
 80142a6:	f7ec fc4f 	bl	8000b48 <__aeabi_dcmpgt>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	f43f af7b 	beq.w	80141a6 <_strtod_l+0xa0e>
 80142b0:	e4c4      	b.n	8013c3c <_strtod_l+0x4a4>
 80142b2:	9b04      	ldr	r3, [sp, #16]
 80142b4:	b333      	cbz	r3, 8014304 <_strtod_l+0xb6c>
 80142b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80142bc:	d822      	bhi.n	8014304 <_strtod_l+0xb6c>
 80142be:	a32e      	add	r3, pc, #184	; (adr r3, 8014378 <_strtod_l+0xbe0>)
 80142c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c4:	4640      	mov	r0, r8
 80142c6:	4649      	mov	r1, r9
 80142c8:	f7ec fc2a 	bl	8000b20 <__aeabi_dcmple>
 80142cc:	b1a0      	cbz	r0, 80142f8 <_strtod_l+0xb60>
 80142ce:	4649      	mov	r1, r9
 80142d0:	4640      	mov	r0, r8
 80142d2:	f7ec fc81 	bl	8000bd8 <__aeabi_d2uiz>
 80142d6:	2801      	cmp	r0, #1
 80142d8:	bf38      	it	cc
 80142da:	2001      	movcc	r0, #1
 80142dc:	f7ec f92a 	bl	8000534 <__aeabi_ui2d>
 80142e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142e2:	4680      	mov	r8, r0
 80142e4:	4689      	mov	r9, r1
 80142e6:	bb23      	cbnz	r3, 8014332 <_strtod_l+0xb9a>
 80142e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142ec:	9010      	str	r0, [sp, #64]	; 0x40
 80142ee:	9311      	str	r3, [sp, #68]	; 0x44
 80142f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014300:	1a9b      	subs	r3, r3, r2
 8014302:	9309      	str	r3, [sp, #36]	; 0x24
 8014304:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014308:	eeb0 0a48 	vmov.f32	s0, s16
 801430c:	eef0 0a68 	vmov.f32	s1, s17
 8014310:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014314:	f002 f9e0 	bl	80166d8 <__ulp>
 8014318:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801431c:	ec53 2b10 	vmov	r2, r3, d0
 8014320:	f7ec f982 	bl	8000628 <__aeabi_dmul>
 8014324:	ec53 2b18 	vmov	r2, r3, d8
 8014328:	f7eb ffc8 	bl	80002bc <__adddf3>
 801432c:	4682      	mov	sl, r0
 801432e:	468b      	mov	fp, r1
 8014330:	e78d      	b.n	801424e <_strtod_l+0xab6>
 8014332:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014336:	e7db      	b.n	80142f0 <_strtod_l+0xb58>
 8014338:	a311      	add	r3, pc, #68	; (adr r3, 8014380 <_strtod_l+0xbe8>)
 801433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801433e:	f7ec fbe5 	bl	8000b0c <__aeabi_dcmplt>
 8014342:	e7b2      	b.n	80142aa <_strtod_l+0xb12>
 8014344:	2300      	movs	r3, #0
 8014346:	930a      	str	r3, [sp, #40]	; 0x28
 8014348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801434a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	f7ff ba6b 	b.w	8013828 <_strtod_l+0x90>
 8014352:	2a65      	cmp	r2, #101	; 0x65
 8014354:	f43f ab5f 	beq.w	8013a16 <_strtod_l+0x27e>
 8014358:	2a45      	cmp	r2, #69	; 0x45
 801435a:	f43f ab5c 	beq.w	8013a16 <_strtod_l+0x27e>
 801435e:	2301      	movs	r3, #1
 8014360:	f7ff bb94 	b.w	8013a8c <_strtod_l+0x2f4>
 8014364:	f3af 8000 	nop.w
 8014368:	94a03595 	.word	0x94a03595
 801436c:	3fdfffff 	.word	0x3fdfffff
 8014370:	35afe535 	.word	0x35afe535
 8014374:	3fe00000 	.word	0x3fe00000
 8014378:	ffc00000 	.word	0xffc00000
 801437c:	41dfffff 	.word	0x41dfffff
 8014380:	94a03595 	.word	0x94a03595
 8014384:	3fcfffff 	.word	0x3fcfffff
 8014388:	3ff00000 	.word	0x3ff00000
 801438c:	7ff00000 	.word	0x7ff00000
 8014390:	7fe00000 	.word	0x7fe00000
 8014394:	7c9fffff 	.word	0x7c9fffff
 8014398:	3fe00000 	.word	0x3fe00000
 801439c:	bff00000 	.word	0xbff00000
 80143a0:	7fefffff 	.word	0x7fefffff

080143a4 <strtof>:
 80143a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8014458 <strtof+0xb4>
 80143ac:	4b26      	ldr	r3, [pc, #152]	; (8014448 <strtof+0xa4>)
 80143ae:	460a      	mov	r2, r1
 80143b0:	ed2d 8b02 	vpush	{d8}
 80143b4:	4601      	mov	r1, r0
 80143b6:	f8d8 0000 	ldr.w	r0, [r8]
 80143ba:	f7ff f9ed 	bl	8013798 <_strtod_l>
 80143be:	ec55 4b10 	vmov	r4, r5, d0
 80143c2:	ee10 2a10 	vmov	r2, s0
 80143c6:	ee10 0a10 	vmov	r0, s0
 80143ca:	462b      	mov	r3, r5
 80143cc:	4629      	mov	r1, r5
 80143ce:	f7ec fbc5 	bl	8000b5c <__aeabi_dcmpun>
 80143d2:	b190      	cbz	r0, 80143fa <strtof+0x56>
 80143d4:	2d00      	cmp	r5, #0
 80143d6:	481d      	ldr	r0, [pc, #116]	; (801444c <strtof+0xa8>)
 80143d8:	da09      	bge.n	80143ee <strtof+0x4a>
 80143da:	f002 fc45 	bl	8016c68 <nanf>
 80143de:	eeb1 8a40 	vneg.f32	s16, s0
 80143e2:	eeb0 0a48 	vmov.f32	s0, s16
 80143e6:	ecbd 8b02 	vpop	{d8}
 80143ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ee:	ecbd 8b02 	vpop	{d8}
 80143f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143f6:	f002 bc37 	b.w	8016c68 <nanf>
 80143fa:	4620      	mov	r0, r4
 80143fc:	4629      	mov	r1, r5
 80143fe:	f7ec fc0b 	bl	8000c18 <__aeabi_d2f>
 8014402:	ee08 0a10 	vmov	s16, r0
 8014406:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014450 <strtof+0xac>
 801440a:	eeb0 7ac8 	vabs.f32	s14, s16
 801440e:	eeb4 7a67 	vcmp.f32	s14, s15
 8014412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014416:	dde4      	ble.n	80143e2 <strtof+0x3e>
 8014418:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801441c:	4b0d      	ldr	r3, [pc, #52]	; (8014454 <strtof+0xb0>)
 801441e:	f04f 32ff 	mov.w	r2, #4294967295
 8014422:	4620      	mov	r0, r4
 8014424:	4639      	mov	r1, r7
 8014426:	f7ec fb99 	bl	8000b5c <__aeabi_dcmpun>
 801442a:	b940      	cbnz	r0, 801443e <strtof+0x9a>
 801442c:	4b09      	ldr	r3, [pc, #36]	; (8014454 <strtof+0xb0>)
 801442e:	f04f 32ff 	mov.w	r2, #4294967295
 8014432:	4620      	mov	r0, r4
 8014434:	4639      	mov	r1, r7
 8014436:	f7ec fb73 	bl	8000b20 <__aeabi_dcmple>
 801443a:	2800      	cmp	r0, #0
 801443c:	d0d1      	beq.n	80143e2 <strtof+0x3e>
 801443e:	f8d8 3000 	ldr.w	r3, [r8]
 8014442:	2222      	movs	r2, #34	; 0x22
 8014444:	601a      	str	r2, [r3, #0]
 8014446:	e7cc      	b.n	80143e2 <strtof+0x3e>
 8014448:	20000130 	.word	0x20000130
 801444c:	08025a50 	.word	0x08025a50
 8014450:	7f7fffff 	.word	0x7f7fffff
 8014454:	7fefffff 	.word	0x7fefffff
 8014458:	200000c8 	.word	0x200000c8

0801445c <__strtok_r>:
 801445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801445e:	b908      	cbnz	r0, 8014464 <__strtok_r+0x8>
 8014460:	6810      	ldr	r0, [r2, #0]
 8014462:	b188      	cbz	r0, 8014488 <__strtok_r+0x2c>
 8014464:	4604      	mov	r4, r0
 8014466:	4620      	mov	r0, r4
 8014468:	f814 5b01 	ldrb.w	r5, [r4], #1
 801446c:	460f      	mov	r7, r1
 801446e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014472:	b91e      	cbnz	r6, 801447c <__strtok_r+0x20>
 8014474:	b965      	cbnz	r5, 8014490 <__strtok_r+0x34>
 8014476:	6015      	str	r5, [r2, #0]
 8014478:	4628      	mov	r0, r5
 801447a:	e005      	b.n	8014488 <__strtok_r+0x2c>
 801447c:	42b5      	cmp	r5, r6
 801447e:	d1f6      	bne.n	801446e <__strtok_r+0x12>
 8014480:	2b00      	cmp	r3, #0
 8014482:	d1f0      	bne.n	8014466 <__strtok_r+0xa>
 8014484:	6014      	str	r4, [r2, #0]
 8014486:	7003      	strb	r3, [r0, #0]
 8014488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801448a:	461c      	mov	r4, r3
 801448c:	e00c      	b.n	80144a8 <__strtok_r+0x4c>
 801448e:	b915      	cbnz	r5, 8014496 <__strtok_r+0x3a>
 8014490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014494:	460e      	mov	r6, r1
 8014496:	f816 5b01 	ldrb.w	r5, [r6], #1
 801449a:	42ab      	cmp	r3, r5
 801449c:	d1f7      	bne.n	801448e <__strtok_r+0x32>
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d0f3      	beq.n	801448a <__strtok_r+0x2e>
 80144a2:	2300      	movs	r3, #0
 80144a4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80144a8:	6014      	str	r4, [r2, #0]
 80144aa:	e7ed      	b.n	8014488 <__strtok_r+0x2c>

080144ac <strtok_r>:
 80144ac:	2301      	movs	r3, #1
 80144ae:	f7ff bfd5 	b.w	801445c <__strtok_r>
	...

080144b4 <_strtoul_l.constprop.0>:
 80144b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b8:	4f36      	ldr	r7, [pc, #216]	; (8014594 <_strtoul_l.constprop.0+0xe0>)
 80144ba:	4686      	mov	lr, r0
 80144bc:	460d      	mov	r5, r1
 80144be:	4628      	mov	r0, r5
 80144c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144c4:	5de6      	ldrb	r6, [r4, r7]
 80144c6:	f016 0608 	ands.w	r6, r6, #8
 80144ca:	d1f8      	bne.n	80144be <_strtoul_l.constprop.0+0xa>
 80144cc:	2c2d      	cmp	r4, #45	; 0x2d
 80144ce:	d12f      	bne.n	8014530 <_strtoul_l.constprop.0+0x7c>
 80144d0:	782c      	ldrb	r4, [r5, #0]
 80144d2:	2601      	movs	r6, #1
 80144d4:	1c85      	adds	r5, r0, #2
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d057      	beq.n	801458a <_strtoul_l.constprop.0+0xd6>
 80144da:	2b10      	cmp	r3, #16
 80144dc:	d109      	bne.n	80144f2 <_strtoul_l.constprop.0+0x3e>
 80144de:	2c30      	cmp	r4, #48	; 0x30
 80144e0:	d107      	bne.n	80144f2 <_strtoul_l.constprop.0+0x3e>
 80144e2:	7828      	ldrb	r0, [r5, #0]
 80144e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80144e8:	2858      	cmp	r0, #88	; 0x58
 80144ea:	d149      	bne.n	8014580 <_strtoul_l.constprop.0+0xcc>
 80144ec:	786c      	ldrb	r4, [r5, #1]
 80144ee:	2310      	movs	r3, #16
 80144f0:	3502      	adds	r5, #2
 80144f2:	f04f 38ff 	mov.w	r8, #4294967295
 80144f6:	2700      	movs	r7, #0
 80144f8:	fbb8 f8f3 	udiv	r8, r8, r3
 80144fc:	fb03 f908 	mul.w	r9, r3, r8
 8014500:	ea6f 0909 	mvn.w	r9, r9
 8014504:	4638      	mov	r0, r7
 8014506:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801450a:	f1bc 0f09 	cmp.w	ip, #9
 801450e:	d814      	bhi.n	801453a <_strtoul_l.constprop.0+0x86>
 8014510:	4664      	mov	r4, ip
 8014512:	42a3      	cmp	r3, r4
 8014514:	dd22      	ble.n	801455c <_strtoul_l.constprop.0+0xa8>
 8014516:	2f00      	cmp	r7, #0
 8014518:	db1d      	blt.n	8014556 <_strtoul_l.constprop.0+0xa2>
 801451a:	4580      	cmp	r8, r0
 801451c:	d31b      	bcc.n	8014556 <_strtoul_l.constprop.0+0xa2>
 801451e:	d101      	bne.n	8014524 <_strtoul_l.constprop.0+0x70>
 8014520:	45a1      	cmp	r9, r4
 8014522:	db18      	blt.n	8014556 <_strtoul_l.constprop.0+0xa2>
 8014524:	fb00 4003 	mla	r0, r0, r3, r4
 8014528:	2701      	movs	r7, #1
 801452a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801452e:	e7ea      	b.n	8014506 <_strtoul_l.constprop.0+0x52>
 8014530:	2c2b      	cmp	r4, #43	; 0x2b
 8014532:	bf04      	itt	eq
 8014534:	782c      	ldrbeq	r4, [r5, #0]
 8014536:	1c85      	addeq	r5, r0, #2
 8014538:	e7cd      	b.n	80144d6 <_strtoul_l.constprop.0+0x22>
 801453a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801453e:	f1bc 0f19 	cmp.w	ip, #25
 8014542:	d801      	bhi.n	8014548 <_strtoul_l.constprop.0+0x94>
 8014544:	3c37      	subs	r4, #55	; 0x37
 8014546:	e7e4      	b.n	8014512 <_strtoul_l.constprop.0+0x5e>
 8014548:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801454c:	f1bc 0f19 	cmp.w	ip, #25
 8014550:	d804      	bhi.n	801455c <_strtoul_l.constprop.0+0xa8>
 8014552:	3c57      	subs	r4, #87	; 0x57
 8014554:	e7dd      	b.n	8014512 <_strtoul_l.constprop.0+0x5e>
 8014556:	f04f 37ff 	mov.w	r7, #4294967295
 801455a:	e7e6      	b.n	801452a <_strtoul_l.constprop.0+0x76>
 801455c:	2f00      	cmp	r7, #0
 801455e:	da07      	bge.n	8014570 <_strtoul_l.constprop.0+0xbc>
 8014560:	2322      	movs	r3, #34	; 0x22
 8014562:	f8ce 3000 	str.w	r3, [lr]
 8014566:	f04f 30ff 	mov.w	r0, #4294967295
 801456a:	b932      	cbnz	r2, 801457a <_strtoul_l.constprop.0+0xc6>
 801456c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014570:	b106      	cbz	r6, 8014574 <_strtoul_l.constprop.0+0xc0>
 8014572:	4240      	negs	r0, r0
 8014574:	2a00      	cmp	r2, #0
 8014576:	d0f9      	beq.n	801456c <_strtoul_l.constprop.0+0xb8>
 8014578:	b107      	cbz	r7, 801457c <_strtoul_l.constprop.0+0xc8>
 801457a:	1e69      	subs	r1, r5, #1
 801457c:	6011      	str	r1, [r2, #0]
 801457e:	e7f5      	b.n	801456c <_strtoul_l.constprop.0+0xb8>
 8014580:	2430      	movs	r4, #48	; 0x30
 8014582:	2b00      	cmp	r3, #0
 8014584:	d1b5      	bne.n	80144f2 <_strtoul_l.constprop.0+0x3e>
 8014586:	2308      	movs	r3, #8
 8014588:	e7b3      	b.n	80144f2 <_strtoul_l.constprop.0+0x3e>
 801458a:	2c30      	cmp	r4, #48	; 0x30
 801458c:	d0a9      	beq.n	80144e2 <_strtoul_l.constprop.0+0x2e>
 801458e:	230a      	movs	r3, #10
 8014590:	e7af      	b.n	80144f2 <_strtoul_l.constprop.0+0x3e>
 8014592:	bf00      	nop
 8014594:	08025639 	.word	0x08025639

08014598 <strtoul>:
 8014598:	4613      	mov	r3, r2
 801459a:	460a      	mov	r2, r1
 801459c:	4601      	mov	r1, r0
 801459e:	4802      	ldr	r0, [pc, #8]	; (80145a8 <strtoul+0x10>)
 80145a0:	6800      	ldr	r0, [r0, #0]
 80145a2:	f7ff bf87 	b.w	80144b4 <_strtoul_l.constprop.0>
 80145a6:	bf00      	nop
 80145a8:	200000c8 	.word	0x200000c8

080145ac <_vsniprintf_r>:
 80145ac:	b530      	push	{r4, r5, lr}
 80145ae:	4614      	mov	r4, r2
 80145b0:	2c00      	cmp	r4, #0
 80145b2:	b09b      	sub	sp, #108	; 0x6c
 80145b4:	4605      	mov	r5, r0
 80145b6:	461a      	mov	r2, r3
 80145b8:	da05      	bge.n	80145c6 <_vsniprintf_r+0x1a>
 80145ba:	238b      	movs	r3, #139	; 0x8b
 80145bc:	6003      	str	r3, [r0, #0]
 80145be:	f04f 30ff 	mov.w	r0, #4294967295
 80145c2:	b01b      	add	sp, #108	; 0x6c
 80145c4:	bd30      	pop	{r4, r5, pc}
 80145c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80145ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80145ce:	bf14      	ite	ne
 80145d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80145d4:	4623      	moveq	r3, r4
 80145d6:	9302      	str	r3, [sp, #8]
 80145d8:	9305      	str	r3, [sp, #20]
 80145da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145de:	9100      	str	r1, [sp, #0]
 80145e0:	9104      	str	r1, [sp, #16]
 80145e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80145e6:	4669      	mov	r1, sp
 80145e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80145ea:	f002 fa35 	bl	8016a58 <_svfiprintf_r>
 80145ee:	1c43      	adds	r3, r0, #1
 80145f0:	bfbc      	itt	lt
 80145f2:	238b      	movlt	r3, #139	; 0x8b
 80145f4:	602b      	strlt	r3, [r5, #0]
 80145f6:	2c00      	cmp	r4, #0
 80145f8:	d0e3      	beq.n	80145c2 <_vsniprintf_r+0x16>
 80145fa:	9b00      	ldr	r3, [sp, #0]
 80145fc:	2200      	movs	r2, #0
 80145fe:	701a      	strb	r2, [r3, #0]
 8014600:	e7df      	b.n	80145c2 <_vsniprintf_r+0x16>
	...

08014604 <vsniprintf>:
 8014604:	b507      	push	{r0, r1, r2, lr}
 8014606:	9300      	str	r3, [sp, #0]
 8014608:	4613      	mov	r3, r2
 801460a:	460a      	mov	r2, r1
 801460c:	4601      	mov	r1, r0
 801460e:	4803      	ldr	r0, [pc, #12]	; (801461c <vsniprintf+0x18>)
 8014610:	6800      	ldr	r0, [r0, #0]
 8014612:	f7ff ffcb 	bl	80145ac <_vsniprintf_r>
 8014616:	b003      	add	sp, #12
 8014618:	f85d fb04 	ldr.w	pc, [sp], #4
 801461c:	200000c8 	.word	0x200000c8

08014620 <__swbuf_r>:
 8014620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014622:	460e      	mov	r6, r1
 8014624:	4614      	mov	r4, r2
 8014626:	4605      	mov	r5, r0
 8014628:	b118      	cbz	r0, 8014632 <__swbuf_r+0x12>
 801462a:	6983      	ldr	r3, [r0, #24]
 801462c:	b90b      	cbnz	r3, 8014632 <__swbuf_r+0x12>
 801462e:	f001 f84b 	bl	80156c8 <__sinit>
 8014632:	4b21      	ldr	r3, [pc, #132]	; (80146b8 <__swbuf_r+0x98>)
 8014634:	429c      	cmp	r4, r3
 8014636:	d12b      	bne.n	8014690 <__swbuf_r+0x70>
 8014638:	686c      	ldr	r4, [r5, #4]
 801463a:	69a3      	ldr	r3, [r4, #24]
 801463c:	60a3      	str	r3, [r4, #8]
 801463e:	89a3      	ldrh	r3, [r4, #12]
 8014640:	071a      	lsls	r2, r3, #28
 8014642:	d52f      	bpl.n	80146a4 <__swbuf_r+0x84>
 8014644:	6923      	ldr	r3, [r4, #16]
 8014646:	b36b      	cbz	r3, 80146a4 <__swbuf_r+0x84>
 8014648:	6923      	ldr	r3, [r4, #16]
 801464a:	6820      	ldr	r0, [r4, #0]
 801464c:	1ac0      	subs	r0, r0, r3
 801464e:	6963      	ldr	r3, [r4, #20]
 8014650:	b2f6      	uxtb	r6, r6
 8014652:	4283      	cmp	r3, r0
 8014654:	4637      	mov	r7, r6
 8014656:	dc04      	bgt.n	8014662 <__swbuf_r+0x42>
 8014658:	4621      	mov	r1, r4
 801465a:	4628      	mov	r0, r5
 801465c:	f000 ffa0 	bl	80155a0 <_fflush_r>
 8014660:	bb30      	cbnz	r0, 80146b0 <__swbuf_r+0x90>
 8014662:	68a3      	ldr	r3, [r4, #8]
 8014664:	3b01      	subs	r3, #1
 8014666:	60a3      	str	r3, [r4, #8]
 8014668:	6823      	ldr	r3, [r4, #0]
 801466a:	1c5a      	adds	r2, r3, #1
 801466c:	6022      	str	r2, [r4, #0]
 801466e:	701e      	strb	r6, [r3, #0]
 8014670:	6963      	ldr	r3, [r4, #20]
 8014672:	3001      	adds	r0, #1
 8014674:	4283      	cmp	r3, r0
 8014676:	d004      	beq.n	8014682 <__swbuf_r+0x62>
 8014678:	89a3      	ldrh	r3, [r4, #12]
 801467a:	07db      	lsls	r3, r3, #31
 801467c:	d506      	bpl.n	801468c <__swbuf_r+0x6c>
 801467e:	2e0a      	cmp	r6, #10
 8014680:	d104      	bne.n	801468c <__swbuf_r+0x6c>
 8014682:	4621      	mov	r1, r4
 8014684:	4628      	mov	r0, r5
 8014686:	f000 ff8b 	bl	80155a0 <_fflush_r>
 801468a:	b988      	cbnz	r0, 80146b0 <__swbuf_r+0x90>
 801468c:	4638      	mov	r0, r7
 801468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014690:	4b0a      	ldr	r3, [pc, #40]	; (80146bc <__swbuf_r+0x9c>)
 8014692:	429c      	cmp	r4, r3
 8014694:	d101      	bne.n	801469a <__swbuf_r+0x7a>
 8014696:	68ac      	ldr	r4, [r5, #8]
 8014698:	e7cf      	b.n	801463a <__swbuf_r+0x1a>
 801469a:	4b09      	ldr	r3, [pc, #36]	; (80146c0 <__swbuf_r+0xa0>)
 801469c:	429c      	cmp	r4, r3
 801469e:	bf08      	it	eq
 80146a0:	68ec      	ldreq	r4, [r5, #12]
 80146a2:	e7ca      	b.n	801463a <__swbuf_r+0x1a>
 80146a4:	4621      	mov	r1, r4
 80146a6:	4628      	mov	r0, r5
 80146a8:	f000 f80c 	bl	80146c4 <__swsetup_r>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	d0cb      	beq.n	8014648 <__swbuf_r+0x28>
 80146b0:	f04f 37ff 	mov.w	r7, #4294967295
 80146b4:	e7ea      	b.n	801468c <__swbuf_r+0x6c>
 80146b6:	bf00      	nop
 80146b8:	080257ec 	.word	0x080257ec
 80146bc:	0802580c 	.word	0x0802580c
 80146c0:	080257cc 	.word	0x080257cc

080146c4 <__swsetup_r>:
 80146c4:	4b32      	ldr	r3, [pc, #200]	; (8014790 <__swsetup_r+0xcc>)
 80146c6:	b570      	push	{r4, r5, r6, lr}
 80146c8:	681d      	ldr	r5, [r3, #0]
 80146ca:	4606      	mov	r6, r0
 80146cc:	460c      	mov	r4, r1
 80146ce:	b125      	cbz	r5, 80146da <__swsetup_r+0x16>
 80146d0:	69ab      	ldr	r3, [r5, #24]
 80146d2:	b913      	cbnz	r3, 80146da <__swsetup_r+0x16>
 80146d4:	4628      	mov	r0, r5
 80146d6:	f000 fff7 	bl	80156c8 <__sinit>
 80146da:	4b2e      	ldr	r3, [pc, #184]	; (8014794 <__swsetup_r+0xd0>)
 80146dc:	429c      	cmp	r4, r3
 80146de:	d10f      	bne.n	8014700 <__swsetup_r+0x3c>
 80146e0:	686c      	ldr	r4, [r5, #4]
 80146e2:	89a3      	ldrh	r3, [r4, #12]
 80146e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146e8:	0719      	lsls	r1, r3, #28
 80146ea:	d42c      	bmi.n	8014746 <__swsetup_r+0x82>
 80146ec:	06dd      	lsls	r5, r3, #27
 80146ee:	d411      	bmi.n	8014714 <__swsetup_r+0x50>
 80146f0:	2309      	movs	r3, #9
 80146f2:	6033      	str	r3, [r6, #0]
 80146f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80146f8:	81a3      	strh	r3, [r4, #12]
 80146fa:	f04f 30ff 	mov.w	r0, #4294967295
 80146fe:	e03e      	b.n	801477e <__swsetup_r+0xba>
 8014700:	4b25      	ldr	r3, [pc, #148]	; (8014798 <__swsetup_r+0xd4>)
 8014702:	429c      	cmp	r4, r3
 8014704:	d101      	bne.n	801470a <__swsetup_r+0x46>
 8014706:	68ac      	ldr	r4, [r5, #8]
 8014708:	e7eb      	b.n	80146e2 <__swsetup_r+0x1e>
 801470a:	4b24      	ldr	r3, [pc, #144]	; (801479c <__swsetup_r+0xd8>)
 801470c:	429c      	cmp	r4, r3
 801470e:	bf08      	it	eq
 8014710:	68ec      	ldreq	r4, [r5, #12]
 8014712:	e7e6      	b.n	80146e2 <__swsetup_r+0x1e>
 8014714:	0758      	lsls	r0, r3, #29
 8014716:	d512      	bpl.n	801473e <__swsetup_r+0x7a>
 8014718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801471a:	b141      	cbz	r1, 801472e <__swsetup_r+0x6a>
 801471c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014720:	4299      	cmp	r1, r3
 8014722:	d002      	beq.n	801472a <__swsetup_r+0x66>
 8014724:	4630      	mov	r0, r6
 8014726:	f7fe fab7 	bl	8012c98 <_free_r>
 801472a:	2300      	movs	r3, #0
 801472c:	6363      	str	r3, [r4, #52]	; 0x34
 801472e:	89a3      	ldrh	r3, [r4, #12]
 8014730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014734:	81a3      	strh	r3, [r4, #12]
 8014736:	2300      	movs	r3, #0
 8014738:	6063      	str	r3, [r4, #4]
 801473a:	6923      	ldr	r3, [r4, #16]
 801473c:	6023      	str	r3, [r4, #0]
 801473e:	89a3      	ldrh	r3, [r4, #12]
 8014740:	f043 0308 	orr.w	r3, r3, #8
 8014744:	81a3      	strh	r3, [r4, #12]
 8014746:	6923      	ldr	r3, [r4, #16]
 8014748:	b94b      	cbnz	r3, 801475e <__swsetup_r+0x9a>
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014754:	d003      	beq.n	801475e <__swsetup_r+0x9a>
 8014756:	4621      	mov	r1, r4
 8014758:	4630      	mov	r0, r6
 801475a:	f001 fbed 	bl	8015f38 <__smakebuf_r>
 801475e:	89a0      	ldrh	r0, [r4, #12]
 8014760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014764:	f010 0301 	ands.w	r3, r0, #1
 8014768:	d00a      	beq.n	8014780 <__swsetup_r+0xbc>
 801476a:	2300      	movs	r3, #0
 801476c:	60a3      	str	r3, [r4, #8]
 801476e:	6963      	ldr	r3, [r4, #20]
 8014770:	425b      	negs	r3, r3
 8014772:	61a3      	str	r3, [r4, #24]
 8014774:	6923      	ldr	r3, [r4, #16]
 8014776:	b943      	cbnz	r3, 801478a <__swsetup_r+0xc6>
 8014778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801477c:	d1ba      	bne.n	80146f4 <__swsetup_r+0x30>
 801477e:	bd70      	pop	{r4, r5, r6, pc}
 8014780:	0781      	lsls	r1, r0, #30
 8014782:	bf58      	it	pl
 8014784:	6963      	ldrpl	r3, [r4, #20]
 8014786:	60a3      	str	r3, [r4, #8]
 8014788:	e7f4      	b.n	8014774 <__swsetup_r+0xb0>
 801478a:	2000      	movs	r0, #0
 801478c:	e7f7      	b.n	801477e <__swsetup_r+0xba>
 801478e:	bf00      	nop
 8014790:	200000c8 	.word	0x200000c8
 8014794:	080257ec 	.word	0x080257ec
 8014798:	0802580c 	.word	0x0802580c
 801479c:	080257cc 	.word	0x080257cc

080147a0 <quorem>:
 80147a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a4:	6903      	ldr	r3, [r0, #16]
 80147a6:	690c      	ldr	r4, [r1, #16]
 80147a8:	42a3      	cmp	r3, r4
 80147aa:	4607      	mov	r7, r0
 80147ac:	f2c0 8081 	blt.w	80148b2 <quorem+0x112>
 80147b0:	3c01      	subs	r4, #1
 80147b2:	f101 0814 	add.w	r8, r1, #20
 80147b6:	f100 0514 	add.w	r5, r0, #20
 80147ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147be:	9301      	str	r3, [sp, #4]
 80147c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80147c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147c8:	3301      	adds	r3, #1
 80147ca:	429a      	cmp	r2, r3
 80147cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80147d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80147d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80147d8:	d331      	bcc.n	801483e <quorem+0x9e>
 80147da:	f04f 0e00 	mov.w	lr, #0
 80147de:	4640      	mov	r0, r8
 80147e0:	46ac      	mov	ip, r5
 80147e2:	46f2      	mov	sl, lr
 80147e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80147e8:	b293      	uxth	r3, r2
 80147ea:	fb06 e303 	mla	r3, r6, r3, lr
 80147ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	ebaa 0303 	sub.w	r3, sl, r3
 80147f8:	f8dc a000 	ldr.w	sl, [ip]
 80147fc:	0c12      	lsrs	r2, r2, #16
 80147fe:	fa13 f38a 	uxtah	r3, r3, sl
 8014802:	fb06 e202 	mla	r2, r6, r2, lr
 8014806:	9300      	str	r3, [sp, #0]
 8014808:	9b00      	ldr	r3, [sp, #0]
 801480a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801480e:	b292      	uxth	r2, r2
 8014810:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014818:	f8bd 3000 	ldrh.w	r3, [sp]
 801481c:	4581      	cmp	r9, r0
 801481e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014822:	f84c 3b04 	str.w	r3, [ip], #4
 8014826:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801482a:	d2db      	bcs.n	80147e4 <quorem+0x44>
 801482c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014830:	b92b      	cbnz	r3, 801483e <quorem+0x9e>
 8014832:	9b01      	ldr	r3, [sp, #4]
 8014834:	3b04      	subs	r3, #4
 8014836:	429d      	cmp	r5, r3
 8014838:	461a      	mov	r2, r3
 801483a:	d32e      	bcc.n	801489a <quorem+0xfa>
 801483c:	613c      	str	r4, [r7, #16]
 801483e:	4638      	mov	r0, r7
 8014840:	f001 fea4 	bl	801658c <__mcmp>
 8014844:	2800      	cmp	r0, #0
 8014846:	db24      	blt.n	8014892 <quorem+0xf2>
 8014848:	3601      	adds	r6, #1
 801484a:	4628      	mov	r0, r5
 801484c:	f04f 0c00 	mov.w	ip, #0
 8014850:	f858 2b04 	ldr.w	r2, [r8], #4
 8014854:	f8d0 e000 	ldr.w	lr, [r0]
 8014858:	b293      	uxth	r3, r2
 801485a:	ebac 0303 	sub.w	r3, ip, r3
 801485e:	0c12      	lsrs	r2, r2, #16
 8014860:	fa13 f38e 	uxtah	r3, r3, lr
 8014864:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801486c:	b29b      	uxth	r3, r3
 801486e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014872:	45c1      	cmp	r9, r8
 8014874:	f840 3b04 	str.w	r3, [r0], #4
 8014878:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801487c:	d2e8      	bcs.n	8014850 <quorem+0xb0>
 801487e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014886:	b922      	cbnz	r2, 8014892 <quorem+0xf2>
 8014888:	3b04      	subs	r3, #4
 801488a:	429d      	cmp	r5, r3
 801488c:	461a      	mov	r2, r3
 801488e:	d30a      	bcc.n	80148a6 <quorem+0x106>
 8014890:	613c      	str	r4, [r7, #16]
 8014892:	4630      	mov	r0, r6
 8014894:	b003      	add	sp, #12
 8014896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489a:	6812      	ldr	r2, [r2, #0]
 801489c:	3b04      	subs	r3, #4
 801489e:	2a00      	cmp	r2, #0
 80148a0:	d1cc      	bne.n	801483c <quorem+0x9c>
 80148a2:	3c01      	subs	r4, #1
 80148a4:	e7c7      	b.n	8014836 <quorem+0x96>
 80148a6:	6812      	ldr	r2, [r2, #0]
 80148a8:	3b04      	subs	r3, #4
 80148aa:	2a00      	cmp	r2, #0
 80148ac:	d1f0      	bne.n	8014890 <quorem+0xf0>
 80148ae:	3c01      	subs	r4, #1
 80148b0:	e7eb      	b.n	801488a <quorem+0xea>
 80148b2:	2000      	movs	r0, #0
 80148b4:	e7ee      	b.n	8014894 <quorem+0xf4>
	...

080148b8 <_dtoa_r>:
 80148b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148bc:	ed2d 8b04 	vpush	{d8-d9}
 80148c0:	ec57 6b10 	vmov	r6, r7, d0
 80148c4:	b093      	sub	sp, #76	; 0x4c
 80148c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80148c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80148cc:	9106      	str	r1, [sp, #24]
 80148ce:	ee10 aa10 	vmov	sl, s0
 80148d2:	4604      	mov	r4, r0
 80148d4:	9209      	str	r2, [sp, #36]	; 0x24
 80148d6:	930c      	str	r3, [sp, #48]	; 0x30
 80148d8:	46bb      	mov	fp, r7
 80148da:	b975      	cbnz	r5, 80148fa <_dtoa_r+0x42>
 80148dc:	2010      	movs	r0, #16
 80148de:	f7fe f9b5 	bl	8012c4c <malloc>
 80148e2:	4602      	mov	r2, r0
 80148e4:	6260      	str	r0, [r4, #36]	; 0x24
 80148e6:	b920      	cbnz	r0, 80148f2 <_dtoa_r+0x3a>
 80148e8:	4ba7      	ldr	r3, [pc, #668]	; (8014b88 <_dtoa_r+0x2d0>)
 80148ea:	21ea      	movs	r1, #234	; 0xea
 80148ec:	48a7      	ldr	r0, [pc, #668]	; (8014b8c <_dtoa_r+0x2d4>)
 80148ee:	f002 fa37 	bl	8016d60 <__assert_func>
 80148f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80148f6:	6005      	str	r5, [r0, #0]
 80148f8:	60c5      	str	r5, [r0, #12]
 80148fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148fc:	6819      	ldr	r1, [r3, #0]
 80148fe:	b151      	cbz	r1, 8014916 <_dtoa_r+0x5e>
 8014900:	685a      	ldr	r2, [r3, #4]
 8014902:	604a      	str	r2, [r1, #4]
 8014904:	2301      	movs	r3, #1
 8014906:	4093      	lsls	r3, r2
 8014908:	608b      	str	r3, [r1, #8]
 801490a:	4620      	mov	r0, r4
 801490c:	f001 fbb2 	bl	8016074 <_Bfree>
 8014910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014912:	2200      	movs	r2, #0
 8014914:	601a      	str	r2, [r3, #0]
 8014916:	1e3b      	subs	r3, r7, #0
 8014918:	bfaa      	itet	ge
 801491a:	2300      	movge	r3, #0
 801491c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014920:	f8c8 3000 	strge.w	r3, [r8]
 8014924:	4b9a      	ldr	r3, [pc, #616]	; (8014b90 <_dtoa_r+0x2d8>)
 8014926:	bfbc      	itt	lt
 8014928:	2201      	movlt	r2, #1
 801492a:	f8c8 2000 	strlt.w	r2, [r8]
 801492e:	ea33 030b 	bics.w	r3, r3, fp
 8014932:	d11b      	bne.n	801496c <_dtoa_r+0xb4>
 8014934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014936:	f242 730f 	movw	r3, #9999	; 0x270f
 801493a:	6013      	str	r3, [r2, #0]
 801493c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014940:	4333      	orrs	r3, r6
 8014942:	f000 8592 	beq.w	801546a <_dtoa_r+0xbb2>
 8014946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014948:	b963      	cbnz	r3, 8014964 <_dtoa_r+0xac>
 801494a:	4b92      	ldr	r3, [pc, #584]	; (8014b94 <_dtoa_r+0x2dc>)
 801494c:	e022      	b.n	8014994 <_dtoa_r+0xdc>
 801494e:	4b92      	ldr	r3, [pc, #584]	; (8014b98 <_dtoa_r+0x2e0>)
 8014950:	9301      	str	r3, [sp, #4]
 8014952:	3308      	adds	r3, #8
 8014954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014956:	6013      	str	r3, [r2, #0]
 8014958:	9801      	ldr	r0, [sp, #4]
 801495a:	b013      	add	sp, #76	; 0x4c
 801495c:	ecbd 8b04 	vpop	{d8-d9}
 8014960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014964:	4b8b      	ldr	r3, [pc, #556]	; (8014b94 <_dtoa_r+0x2dc>)
 8014966:	9301      	str	r3, [sp, #4]
 8014968:	3303      	adds	r3, #3
 801496a:	e7f3      	b.n	8014954 <_dtoa_r+0x9c>
 801496c:	2200      	movs	r2, #0
 801496e:	2300      	movs	r3, #0
 8014970:	4650      	mov	r0, sl
 8014972:	4659      	mov	r1, fp
 8014974:	f7ec f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8014978:	ec4b ab19 	vmov	d9, sl, fp
 801497c:	4680      	mov	r8, r0
 801497e:	b158      	cbz	r0, 8014998 <_dtoa_r+0xe0>
 8014980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014982:	2301      	movs	r3, #1
 8014984:	6013      	str	r3, [r2, #0]
 8014986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014988:	2b00      	cmp	r3, #0
 801498a:	f000 856b 	beq.w	8015464 <_dtoa_r+0xbac>
 801498e:	4883      	ldr	r0, [pc, #524]	; (8014b9c <_dtoa_r+0x2e4>)
 8014990:	6018      	str	r0, [r3, #0]
 8014992:	1e43      	subs	r3, r0, #1
 8014994:	9301      	str	r3, [sp, #4]
 8014996:	e7df      	b.n	8014958 <_dtoa_r+0xa0>
 8014998:	ec4b ab10 	vmov	d0, sl, fp
 801499c:	aa10      	add	r2, sp, #64	; 0x40
 801499e:	a911      	add	r1, sp, #68	; 0x44
 80149a0:	4620      	mov	r0, r4
 80149a2:	f001 ff15 	bl	80167d0 <__d2b>
 80149a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80149aa:	ee08 0a10 	vmov	s16, r0
 80149ae:	2d00      	cmp	r5, #0
 80149b0:	f000 8084 	beq.w	8014abc <_dtoa_r+0x204>
 80149b4:	ee19 3a90 	vmov	r3, s19
 80149b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80149c0:	4656      	mov	r6, sl
 80149c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80149c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80149ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80149ce:	4b74      	ldr	r3, [pc, #464]	; (8014ba0 <_dtoa_r+0x2e8>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	4630      	mov	r0, r6
 80149d4:	4639      	mov	r1, r7
 80149d6:	f7eb fc6f 	bl	80002b8 <__aeabi_dsub>
 80149da:	a365      	add	r3, pc, #404	; (adr r3, 8014b70 <_dtoa_r+0x2b8>)
 80149dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e0:	f7eb fe22 	bl	8000628 <__aeabi_dmul>
 80149e4:	a364      	add	r3, pc, #400	; (adr r3, 8014b78 <_dtoa_r+0x2c0>)
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	f7eb fc67 	bl	80002bc <__adddf3>
 80149ee:	4606      	mov	r6, r0
 80149f0:	4628      	mov	r0, r5
 80149f2:	460f      	mov	r7, r1
 80149f4:	f7eb fdae 	bl	8000554 <__aeabi_i2d>
 80149f8:	a361      	add	r3, pc, #388	; (adr r3, 8014b80 <_dtoa_r+0x2c8>)
 80149fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fe:	f7eb fe13 	bl	8000628 <__aeabi_dmul>
 8014a02:	4602      	mov	r2, r0
 8014a04:	460b      	mov	r3, r1
 8014a06:	4630      	mov	r0, r6
 8014a08:	4639      	mov	r1, r7
 8014a0a:	f7eb fc57 	bl	80002bc <__adddf3>
 8014a0e:	4606      	mov	r6, r0
 8014a10:	460f      	mov	r7, r1
 8014a12:	f7ec f8b9 	bl	8000b88 <__aeabi_d2iz>
 8014a16:	2200      	movs	r2, #0
 8014a18:	9000      	str	r0, [sp, #0]
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	4630      	mov	r0, r6
 8014a1e:	4639      	mov	r1, r7
 8014a20:	f7ec f874 	bl	8000b0c <__aeabi_dcmplt>
 8014a24:	b150      	cbz	r0, 8014a3c <_dtoa_r+0x184>
 8014a26:	9800      	ldr	r0, [sp, #0]
 8014a28:	f7eb fd94 	bl	8000554 <__aeabi_i2d>
 8014a2c:	4632      	mov	r2, r6
 8014a2e:	463b      	mov	r3, r7
 8014a30:	f7ec f862 	bl	8000af8 <__aeabi_dcmpeq>
 8014a34:	b910      	cbnz	r0, 8014a3c <_dtoa_r+0x184>
 8014a36:	9b00      	ldr	r3, [sp, #0]
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	9b00      	ldr	r3, [sp, #0]
 8014a3e:	2b16      	cmp	r3, #22
 8014a40:	d85a      	bhi.n	8014af8 <_dtoa_r+0x240>
 8014a42:	9a00      	ldr	r2, [sp, #0]
 8014a44:	4b57      	ldr	r3, [pc, #348]	; (8014ba4 <_dtoa_r+0x2ec>)
 8014a46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4e:	ec51 0b19 	vmov	r0, r1, d9
 8014a52:	f7ec f85b 	bl	8000b0c <__aeabi_dcmplt>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d050      	beq.n	8014afc <_dtoa_r+0x244>
 8014a5a:	9b00      	ldr	r3, [sp, #0]
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	9300      	str	r3, [sp, #0]
 8014a60:	2300      	movs	r3, #0
 8014a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a66:	1b5d      	subs	r5, r3, r5
 8014a68:	1e6b      	subs	r3, r5, #1
 8014a6a:	9305      	str	r3, [sp, #20]
 8014a6c:	bf45      	ittet	mi
 8014a6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8014a72:	9304      	strmi	r3, [sp, #16]
 8014a74:	2300      	movpl	r3, #0
 8014a76:	2300      	movmi	r3, #0
 8014a78:	bf4c      	ite	mi
 8014a7a:	9305      	strmi	r3, [sp, #20]
 8014a7c:	9304      	strpl	r3, [sp, #16]
 8014a7e:	9b00      	ldr	r3, [sp, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	db3d      	blt.n	8014b00 <_dtoa_r+0x248>
 8014a84:	9b05      	ldr	r3, [sp, #20]
 8014a86:	9a00      	ldr	r2, [sp, #0]
 8014a88:	920a      	str	r2, [sp, #40]	; 0x28
 8014a8a:	4413      	add	r3, r2
 8014a8c:	9305      	str	r3, [sp, #20]
 8014a8e:	2300      	movs	r3, #0
 8014a90:	9307      	str	r3, [sp, #28]
 8014a92:	9b06      	ldr	r3, [sp, #24]
 8014a94:	2b09      	cmp	r3, #9
 8014a96:	f200 8089 	bhi.w	8014bac <_dtoa_r+0x2f4>
 8014a9a:	2b05      	cmp	r3, #5
 8014a9c:	bfc4      	itt	gt
 8014a9e:	3b04      	subgt	r3, #4
 8014aa0:	9306      	strgt	r3, [sp, #24]
 8014aa2:	9b06      	ldr	r3, [sp, #24]
 8014aa4:	f1a3 0302 	sub.w	r3, r3, #2
 8014aa8:	bfcc      	ite	gt
 8014aaa:	2500      	movgt	r5, #0
 8014aac:	2501      	movle	r5, #1
 8014aae:	2b03      	cmp	r3, #3
 8014ab0:	f200 8087 	bhi.w	8014bc2 <_dtoa_r+0x30a>
 8014ab4:	e8df f003 	tbb	[pc, r3]
 8014ab8:	59383a2d 	.word	0x59383a2d
 8014abc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014ac0:	441d      	add	r5, r3
 8014ac2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014ac6:	2b20      	cmp	r3, #32
 8014ac8:	bfc1      	itttt	gt
 8014aca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014ace:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014ad2:	fa0b f303 	lslgt.w	r3, fp, r3
 8014ad6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014ada:	bfda      	itte	le
 8014adc:	f1c3 0320 	rsble	r3, r3, #32
 8014ae0:	fa06 f003 	lslle.w	r0, r6, r3
 8014ae4:	4318      	orrgt	r0, r3
 8014ae6:	f7eb fd25 	bl	8000534 <__aeabi_ui2d>
 8014aea:	2301      	movs	r3, #1
 8014aec:	4606      	mov	r6, r0
 8014aee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014af2:	3d01      	subs	r5, #1
 8014af4:	930e      	str	r3, [sp, #56]	; 0x38
 8014af6:	e76a      	b.n	80149ce <_dtoa_r+0x116>
 8014af8:	2301      	movs	r3, #1
 8014afa:	e7b2      	b.n	8014a62 <_dtoa_r+0x1aa>
 8014afc:	900b      	str	r0, [sp, #44]	; 0x2c
 8014afe:	e7b1      	b.n	8014a64 <_dtoa_r+0x1ac>
 8014b00:	9b04      	ldr	r3, [sp, #16]
 8014b02:	9a00      	ldr	r2, [sp, #0]
 8014b04:	1a9b      	subs	r3, r3, r2
 8014b06:	9304      	str	r3, [sp, #16]
 8014b08:	4253      	negs	r3, r2
 8014b0a:	9307      	str	r3, [sp, #28]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8014b10:	e7bf      	b.n	8014a92 <_dtoa_r+0x1da>
 8014b12:	2300      	movs	r3, #0
 8014b14:	9308      	str	r3, [sp, #32]
 8014b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	dc55      	bgt.n	8014bc8 <_dtoa_r+0x310>
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b22:	461a      	mov	r2, r3
 8014b24:	9209      	str	r2, [sp, #36]	; 0x24
 8014b26:	e00c      	b.n	8014b42 <_dtoa_r+0x28a>
 8014b28:	2301      	movs	r3, #1
 8014b2a:	e7f3      	b.n	8014b14 <_dtoa_r+0x25c>
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b30:	9308      	str	r3, [sp, #32]
 8014b32:	9b00      	ldr	r3, [sp, #0]
 8014b34:	4413      	add	r3, r2
 8014b36:	9302      	str	r3, [sp, #8]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	9303      	str	r3, [sp, #12]
 8014b3e:	bfb8      	it	lt
 8014b40:	2301      	movlt	r3, #1
 8014b42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014b44:	2200      	movs	r2, #0
 8014b46:	6042      	str	r2, [r0, #4]
 8014b48:	2204      	movs	r2, #4
 8014b4a:	f102 0614 	add.w	r6, r2, #20
 8014b4e:	429e      	cmp	r6, r3
 8014b50:	6841      	ldr	r1, [r0, #4]
 8014b52:	d93d      	bls.n	8014bd0 <_dtoa_r+0x318>
 8014b54:	4620      	mov	r0, r4
 8014b56:	f001 fa4d 	bl	8015ff4 <_Balloc>
 8014b5a:	9001      	str	r0, [sp, #4]
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d13b      	bne.n	8014bd8 <_dtoa_r+0x320>
 8014b60:	4b11      	ldr	r3, [pc, #68]	; (8014ba8 <_dtoa_r+0x2f0>)
 8014b62:	4602      	mov	r2, r0
 8014b64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014b68:	e6c0      	b.n	80148ec <_dtoa_r+0x34>
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e7df      	b.n	8014b2e <_dtoa_r+0x276>
 8014b6e:	bf00      	nop
 8014b70:	636f4361 	.word	0x636f4361
 8014b74:	3fd287a7 	.word	0x3fd287a7
 8014b78:	8b60c8b3 	.word	0x8b60c8b3
 8014b7c:	3fc68a28 	.word	0x3fc68a28
 8014b80:	509f79fb 	.word	0x509f79fb
 8014b84:	3fd34413 	.word	0x3fd34413
 8014b88:	08025746 	.word	0x08025746
 8014b8c:	0802575d 	.word	0x0802575d
 8014b90:	7ff00000 	.word	0x7ff00000
 8014b94:	08025742 	.word	0x08025742
 8014b98:	08025739 	.word	0x08025739
 8014b9c:	080255c1 	.word	0x080255c1
 8014ba0:	3ff80000 	.word	0x3ff80000
 8014ba4:	08025930 	.word	0x08025930
 8014ba8:	080257b8 	.word	0x080257b8
 8014bac:	2501      	movs	r5, #1
 8014bae:	2300      	movs	r3, #0
 8014bb0:	9306      	str	r3, [sp, #24]
 8014bb2:	9508      	str	r5, [sp, #32]
 8014bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	2312      	movs	r3, #18
 8014bc0:	e7b0      	b.n	8014b24 <_dtoa_r+0x26c>
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	9308      	str	r3, [sp, #32]
 8014bc6:	e7f5      	b.n	8014bb4 <_dtoa_r+0x2fc>
 8014bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014bce:	e7b8      	b.n	8014b42 <_dtoa_r+0x28a>
 8014bd0:	3101      	adds	r1, #1
 8014bd2:	6041      	str	r1, [r0, #4]
 8014bd4:	0052      	lsls	r2, r2, #1
 8014bd6:	e7b8      	b.n	8014b4a <_dtoa_r+0x292>
 8014bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bda:	9a01      	ldr	r2, [sp, #4]
 8014bdc:	601a      	str	r2, [r3, #0]
 8014bde:	9b03      	ldr	r3, [sp, #12]
 8014be0:	2b0e      	cmp	r3, #14
 8014be2:	f200 809d 	bhi.w	8014d20 <_dtoa_r+0x468>
 8014be6:	2d00      	cmp	r5, #0
 8014be8:	f000 809a 	beq.w	8014d20 <_dtoa_r+0x468>
 8014bec:	9b00      	ldr	r3, [sp, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	dd32      	ble.n	8014c58 <_dtoa_r+0x3a0>
 8014bf2:	4ab7      	ldr	r2, [pc, #732]	; (8014ed0 <_dtoa_r+0x618>)
 8014bf4:	f003 030f 	and.w	r3, r3, #15
 8014bf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c00:	9b00      	ldr	r3, [sp, #0]
 8014c02:	05d8      	lsls	r0, r3, #23
 8014c04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014c08:	d516      	bpl.n	8014c38 <_dtoa_r+0x380>
 8014c0a:	4bb2      	ldr	r3, [pc, #712]	; (8014ed4 <_dtoa_r+0x61c>)
 8014c0c:	ec51 0b19 	vmov	r0, r1, d9
 8014c10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c14:	f7eb fe32 	bl	800087c <__aeabi_ddiv>
 8014c18:	f007 070f 	and.w	r7, r7, #15
 8014c1c:	4682      	mov	sl, r0
 8014c1e:	468b      	mov	fp, r1
 8014c20:	2503      	movs	r5, #3
 8014c22:	4eac      	ldr	r6, [pc, #688]	; (8014ed4 <_dtoa_r+0x61c>)
 8014c24:	b957      	cbnz	r7, 8014c3c <_dtoa_r+0x384>
 8014c26:	4642      	mov	r2, r8
 8014c28:	464b      	mov	r3, r9
 8014c2a:	4650      	mov	r0, sl
 8014c2c:	4659      	mov	r1, fp
 8014c2e:	f7eb fe25 	bl	800087c <__aeabi_ddiv>
 8014c32:	4682      	mov	sl, r0
 8014c34:	468b      	mov	fp, r1
 8014c36:	e028      	b.n	8014c8a <_dtoa_r+0x3d2>
 8014c38:	2502      	movs	r5, #2
 8014c3a:	e7f2      	b.n	8014c22 <_dtoa_r+0x36a>
 8014c3c:	07f9      	lsls	r1, r7, #31
 8014c3e:	d508      	bpl.n	8014c52 <_dtoa_r+0x39a>
 8014c40:	4640      	mov	r0, r8
 8014c42:	4649      	mov	r1, r9
 8014c44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c48:	f7eb fcee 	bl	8000628 <__aeabi_dmul>
 8014c4c:	3501      	adds	r5, #1
 8014c4e:	4680      	mov	r8, r0
 8014c50:	4689      	mov	r9, r1
 8014c52:	107f      	asrs	r7, r7, #1
 8014c54:	3608      	adds	r6, #8
 8014c56:	e7e5      	b.n	8014c24 <_dtoa_r+0x36c>
 8014c58:	f000 809b 	beq.w	8014d92 <_dtoa_r+0x4da>
 8014c5c:	9b00      	ldr	r3, [sp, #0]
 8014c5e:	4f9d      	ldr	r7, [pc, #628]	; (8014ed4 <_dtoa_r+0x61c>)
 8014c60:	425e      	negs	r6, r3
 8014c62:	4b9b      	ldr	r3, [pc, #620]	; (8014ed0 <_dtoa_r+0x618>)
 8014c64:	f006 020f 	and.w	r2, r6, #15
 8014c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c70:	ec51 0b19 	vmov	r0, r1, d9
 8014c74:	f7eb fcd8 	bl	8000628 <__aeabi_dmul>
 8014c78:	1136      	asrs	r6, r6, #4
 8014c7a:	4682      	mov	sl, r0
 8014c7c:	468b      	mov	fp, r1
 8014c7e:	2300      	movs	r3, #0
 8014c80:	2502      	movs	r5, #2
 8014c82:	2e00      	cmp	r6, #0
 8014c84:	d17a      	bne.n	8014d7c <_dtoa_r+0x4c4>
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d1d3      	bne.n	8014c32 <_dtoa_r+0x37a>
 8014c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	f000 8082 	beq.w	8014d96 <_dtoa_r+0x4de>
 8014c92:	4b91      	ldr	r3, [pc, #580]	; (8014ed8 <_dtoa_r+0x620>)
 8014c94:	2200      	movs	r2, #0
 8014c96:	4650      	mov	r0, sl
 8014c98:	4659      	mov	r1, fp
 8014c9a:	f7eb ff37 	bl	8000b0c <__aeabi_dcmplt>
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	d079      	beq.n	8014d96 <_dtoa_r+0x4de>
 8014ca2:	9b03      	ldr	r3, [sp, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d076      	beq.n	8014d96 <_dtoa_r+0x4de>
 8014ca8:	9b02      	ldr	r3, [sp, #8]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	dd36      	ble.n	8014d1c <_dtoa_r+0x464>
 8014cae:	9b00      	ldr	r3, [sp, #0]
 8014cb0:	4650      	mov	r0, sl
 8014cb2:	4659      	mov	r1, fp
 8014cb4:	1e5f      	subs	r7, r3, #1
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	4b88      	ldr	r3, [pc, #544]	; (8014edc <_dtoa_r+0x624>)
 8014cba:	f7eb fcb5 	bl	8000628 <__aeabi_dmul>
 8014cbe:	9e02      	ldr	r6, [sp, #8]
 8014cc0:	4682      	mov	sl, r0
 8014cc2:	468b      	mov	fp, r1
 8014cc4:	3501      	adds	r5, #1
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	f7eb fc44 	bl	8000554 <__aeabi_i2d>
 8014ccc:	4652      	mov	r2, sl
 8014cce:	465b      	mov	r3, fp
 8014cd0:	f7eb fcaa 	bl	8000628 <__aeabi_dmul>
 8014cd4:	4b82      	ldr	r3, [pc, #520]	; (8014ee0 <_dtoa_r+0x628>)
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	f7eb faf0 	bl	80002bc <__adddf3>
 8014cdc:	46d0      	mov	r8, sl
 8014cde:	46d9      	mov	r9, fp
 8014ce0:	4682      	mov	sl, r0
 8014ce2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014ce6:	2e00      	cmp	r6, #0
 8014ce8:	d158      	bne.n	8014d9c <_dtoa_r+0x4e4>
 8014cea:	4b7e      	ldr	r3, [pc, #504]	; (8014ee4 <_dtoa_r+0x62c>)
 8014cec:	2200      	movs	r2, #0
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	f7eb fae1 	bl	80002b8 <__aeabi_dsub>
 8014cf6:	4652      	mov	r2, sl
 8014cf8:	465b      	mov	r3, fp
 8014cfa:	4680      	mov	r8, r0
 8014cfc:	4689      	mov	r9, r1
 8014cfe:	f7eb ff23 	bl	8000b48 <__aeabi_dcmpgt>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	f040 8295 	bne.w	8015232 <_dtoa_r+0x97a>
 8014d08:	4652      	mov	r2, sl
 8014d0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014d0e:	4640      	mov	r0, r8
 8014d10:	4649      	mov	r1, r9
 8014d12:	f7eb fefb 	bl	8000b0c <__aeabi_dcmplt>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	f040 8289 	bne.w	801522e <_dtoa_r+0x976>
 8014d1c:	ec5b ab19 	vmov	sl, fp, d9
 8014d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	f2c0 8148 	blt.w	8014fb8 <_dtoa_r+0x700>
 8014d28:	9a00      	ldr	r2, [sp, #0]
 8014d2a:	2a0e      	cmp	r2, #14
 8014d2c:	f300 8144 	bgt.w	8014fb8 <_dtoa_r+0x700>
 8014d30:	4b67      	ldr	r3, [pc, #412]	; (8014ed0 <_dtoa_r+0x618>)
 8014d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	f280 80d5 	bge.w	8014eec <_dtoa_r+0x634>
 8014d42:	9b03      	ldr	r3, [sp, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f300 80d1 	bgt.w	8014eec <_dtoa_r+0x634>
 8014d4a:	f040 826f 	bne.w	801522c <_dtoa_r+0x974>
 8014d4e:	4b65      	ldr	r3, [pc, #404]	; (8014ee4 <_dtoa_r+0x62c>)
 8014d50:	2200      	movs	r2, #0
 8014d52:	4640      	mov	r0, r8
 8014d54:	4649      	mov	r1, r9
 8014d56:	f7eb fc67 	bl	8000628 <__aeabi_dmul>
 8014d5a:	4652      	mov	r2, sl
 8014d5c:	465b      	mov	r3, fp
 8014d5e:	f7eb fee9 	bl	8000b34 <__aeabi_dcmpge>
 8014d62:	9e03      	ldr	r6, [sp, #12]
 8014d64:	4637      	mov	r7, r6
 8014d66:	2800      	cmp	r0, #0
 8014d68:	f040 8245 	bne.w	80151f6 <_dtoa_r+0x93e>
 8014d6c:	9d01      	ldr	r5, [sp, #4]
 8014d6e:	2331      	movs	r3, #49	; 0x31
 8014d70:	f805 3b01 	strb.w	r3, [r5], #1
 8014d74:	9b00      	ldr	r3, [sp, #0]
 8014d76:	3301      	adds	r3, #1
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	e240      	b.n	80151fe <_dtoa_r+0x946>
 8014d7c:	07f2      	lsls	r2, r6, #31
 8014d7e:	d505      	bpl.n	8014d8c <_dtoa_r+0x4d4>
 8014d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d84:	f7eb fc50 	bl	8000628 <__aeabi_dmul>
 8014d88:	3501      	adds	r5, #1
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	1076      	asrs	r6, r6, #1
 8014d8e:	3708      	adds	r7, #8
 8014d90:	e777      	b.n	8014c82 <_dtoa_r+0x3ca>
 8014d92:	2502      	movs	r5, #2
 8014d94:	e779      	b.n	8014c8a <_dtoa_r+0x3d2>
 8014d96:	9f00      	ldr	r7, [sp, #0]
 8014d98:	9e03      	ldr	r6, [sp, #12]
 8014d9a:	e794      	b.n	8014cc6 <_dtoa_r+0x40e>
 8014d9c:	9901      	ldr	r1, [sp, #4]
 8014d9e:	4b4c      	ldr	r3, [pc, #304]	; (8014ed0 <_dtoa_r+0x618>)
 8014da0:	4431      	add	r1, r6
 8014da2:	910d      	str	r1, [sp, #52]	; 0x34
 8014da4:	9908      	ldr	r1, [sp, #32]
 8014da6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014daa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014dae:	2900      	cmp	r1, #0
 8014db0:	d043      	beq.n	8014e3a <_dtoa_r+0x582>
 8014db2:	494d      	ldr	r1, [pc, #308]	; (8014ee8 <_dtoa_r+0x630>)
 8014db4:	2000      	movs	r0, #0
 8014db6:	f7eb fd61 	bl	800087c <__aeabi_ddiv>
 8014dba:	4652      	mov	r2, sl
 8014dbc:	465b      	mov	r3, fp
 8014dbe:	f7eb fa7b 	bl	80002b8 <__aeabi_dsub>
 8014dc2:	9d01      	ldr	r5, [sp, #4]
 8014dc4:	4682      	mov	sl, r0
 8014dc6:	468b      	mov	fp, r1
 8014dc8:	4649      	mov	r1, r9
 8014dca:	4640      	mov	r0, r8
 8014dcc:	f7eb fedc 	bl	8000b88 <__aeabi_d2iz>
 8014dd0:	4606      	mov	r6, r0
 8014dd2:	f7eb fbbf 	bl	8000554 <__aeabi_i2d>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	460b      	mov	r3, r1
 8014dda:	4640      	mov	r0, r8
 8014ddc:	4649      	mov	r1, r9
 8014dde:	f7eb fa6b 	bl	80002b8 <__aeabi_dsub>
 8014de2:	3630      	adds	r6, #48	; 0x30
 8014de4:	f805 6b01 	strb.w	r6, [r5], #1
 8014de8:	4652      	mov	r2, sl
 8014dea:	465b      	mov	r3, fp
 8014dec:	4680      	mov	r8, r0
 8014dee:	4689      	mov	r9, r1
 8014df0:	f7eb fe8c 	bl	8000b0c <__aeabi_dcmplt>
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d163      	bne.n	8014ec0 <_dtoa_r+0x608>
 8014df8:	4642      	mov	r2, r8
 8014dfa:	464b      	mov	r3, r9
 8014dfc:	4936      	ldr	r1, [pc, #216]	; (8014ed8 <_dtoa_r+0x620>)
 8014dfe:	2000      	movs	r0, #0
 8014e00:	f7eb fa5a 	bl	80002b8 <__aeabi_dsub>
 8014e04:	4652      	mov	r2, sl
 8014e06:	465b      	mov	r3, fp
 8014e08:	f7eb fe80 	bl	8000b0c <__aeabi_dcmplt>
 8014e0c:	2800      	cmp	r0, #0
 8014e0e:	f040 80b5 	bne.w	8014f7c <_dtoa_r+0x6c4>
 8014e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e14:	429d      	cmp	r5, r3
 8014e16:	d081      	beq.n	8014d1c <_dtoa_r+0x464>
 8014e18:	4b30      	ldr	r3, [pc, #192]	; (8014edc <_dtoa_r+0x624>)
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	4650      	mov	r0, sl
 8014e1e:	4659      	mov	r1, fp
 8014e20:	f7eb fc02 	bl	8000628 <__aeabi_dmul>
 8014e24:	4b2d      	ldr	r3, [pc, #180]	; (8014edc <_dtoa_r+0x624>)
 8014e26:	4682      	mov	sl, r0
 8014e28:	468b      	mov	fp, r1
 8014e2a:	4640      	mov	r0, r8
 8014e2c:	4649      	mov	r1, r9
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f7eb fbfa 	bl	8000628 <__aeabi_dmul>
 8014e34:	4680      	mov	r8, r0
 8014e36:	4689      	mov	r9, r1
 8014e38:	e7c6      	b.n	8014dc8 <_dtoa_r+0x510>
 8014e3a:	4650      	mov	r0, sl
 8014e3c:	4659      	mov	r1, fp
 8014e3e:	f7eb fbf3 	bl	8000628 <__aeabi_dmul>
 8014e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e44:	9d01      	ldr	r5, [sp, #4]
 8014e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e48:	4682      	mov	sl, r0
 8014e4a:	468b      	mov	fp, r1
 8014e4c:	4649      	mov	r1, r9
 8014e4e:	4640      	mov	r0, r8
 8014e50:	f7eb fe9a 	bl	8000b88 <__aeabi_d2iz>
 8014e54:	4606      	mov	r6, r0
 8014e56:	f7eb fb7d 	bl	8000554 <__aeabi_i2d>
 8014e5a:	3630      	adds	r6, #48	; 0x30
 8014e5c:	4602      	mov	r2, r0
 8014e5e:	460b      	mov	r3, r1
 8014e60:	4640      	mov	r0, r8
 8014e62:	4649      	mov	r1, r9
 8014e64:	f7eb fa28 	bl	80002b8 <__aeabi_dsub>
 8014e68:	f805 6b01 	strb.w	r6, [r5], #1
 8014e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e6e:	429d      	cmp	r5, r3
 8014e70:	4680      	mov	r8, r0
 8014e72:	4689      	mov	r9, r1
 8014e74:	f04f 0200 	mov.w	r2, #0
 8014e78:	d124      	bne.n	8014ec4 <_dtoa_r+0x60c>
 8014e7a:	4b1b      	ldr	r3, [pc, #108]	; (8014ee8 <_dtoa_r+0x630>)
 8014e7c:	4650      	mov	r0, sl
 8014e7e:	4659      	mov	r1, fp
 8014e80:	f7eb fa1c 	bl	80002bc <__adddf3>
 8014e84:	4602      	mov	r2, r0
 8014e86:	460b      	mov	r3, r1
 8014e88:	4640      	mov	r0, r8
 8014e8a:	4649      	mov	r1, r9
 8014e8c:	f7eb fe5c 	bl	8000b48 <__aeabi_dcmpgt>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d173      	bne.n	8014f7c <_dtoa_r+0x6c4>
 8014e94:	4652      	mov	r2, sl
 8014e96:	465b      	mov	r3, fp
 8014e98:	4913      	ldr	r1, [pc, #76]	; (8014ee8 <_dtoa_r+0x630>)
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	f7eb fa0c 	bl	80002b8 <__aeabi_dsub>
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	460b      	mov	r3, r1
 8014ea4:	4640      	mov	r0, r8
 8014ea6:	4649      	mov	r1, r9
 8014ea8:	f7eb fe30 	bl	8000b0c <__aeabi_dcmplt>
 8014eac:	2800      	cmp	r0, #0
 8014eae:	f43f af35 	beq.w	8014d1c <_dtoa_r+0x464>
 8014eb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014eb4:	1e6b      	subs	r3, r5, #1
 8014eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014eb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ebc:	2b30      	cmp	r3, #48	; 0x30
 8014ebe:	d0f8      	beq.n	8014eb2 <_dtoa_r+0x5fa>
 8014ec0:	9700      	str	r7, [sp, #0]
 8014ec2:	e049      	b.n	8014f58 <_dtoa_r+0x6a0>
 8014ec4:	4b05      	ldr	r3, [pc, #20]	; (8014edc <_dtoa_r+0x624>)
 8014ec6:	f7eb fbaf 	bl	8000628 <__aeabi_dmul>
 8014eca:	4680      	mov	r8, r0
 8014ecc:	4689      	mov	r9, r1
 8014ece:	e7bd      	b.n	8014e4c <_dtoa_r+0x594>
 8014ed0:	08025930 	.word	0x08025930
 8014ed4:	08025908 	.word	0x08025908
 8014ed8:	3ff00000 	.word	0x3ff00000
 8014edc:	40240000 	.word	0x40240000
 8014ee0:	401c0000 	.word	0x401c0000
 8014ee4:	40140000 	.word	0x40140000
 8014ee8:	3fe00000 	.word	0x3fe00000
 8014eec:	9d01      	ldr	r5, [sp, #4]
 8014eee:	4656      	mov	r6, sl
 8014ef0:	465f      	mov	r7, fp
 8014ef2:	4642      	mov	r2, r8
 8014ef4:	464b      	mov	r3, r9
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	4639      	mov	r1, r7
 8014efa:	f7eb fcbf 	bl	800087c <__aeabi_ddiv>
 8014efe:	f7eb fe43 	bl	8000b88 <__aeabi_d2iz>
 8014f02:	4682      	mov	sl, r0
 8014f04:	f7eb fb26 	bl	8000554 <__aeabi_i2d>
 8014f08:	4642      	mov	r2, r8
 8014f0a:	464b      	mov	r3, r9
 8014f0c:	f7eb fb8c 	bl	8000628 <__aeabi_dmul>
 8014f10:	4602      	mov	r2, r0
 8014f12:	460b      	mov	r3, r1
 8014f14:	4630      	mov	r0, r6
 8014f16:	4639      	mov	r1, r7
 8014f18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014f1c:	f7eb f9cc 	bl	80002b8 <__aeabi_dsub>
 8014f20:	f805 6b01 	strb.w	r6, [r5], #1
 8014f24:	9e01      	ldr	r6, [sp, #4]
 8014f26:	9f03      	ldr	r7, [sp, #12]
 8014f28:	1bae      	subs	r6, r5, r6
 8014f2a:	42b7      	cmp	r7, r6
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	460b      	mov	r3, r1
 8014f30:	d135      	bne.n	8014f9e <_dtoa_r+0x6e6>
 8014f32:	f7eb f9c3 	bl	80002bc <__adddf3>
 8014f36:	4642      	mov	r2, r8
 8014f38:	464b      	mov	r3, r9
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460f      	mov	r7, r1
 8014f3e:	f7eb fe03 	bl	8000b48 <__aeabi_dcmpgt>
 8014f42:	b9d0      	cbnz	r0, 8014f7a <_dtoa_r+0x6c2>
 8014f44:	4642      	mov	r2, r8
 8014f46:	464b      	mov	r3, r9
 8014f48:	4630      	mov	r0, r6
 8014f4a:	4639      	mov	r1, r7
 8014f4c:	f7eb fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 8014f50:	b110      	cbz	r0, 8014f58 <_dtoa_r+0x6a0>
 8014f52:	f01a 0f01 	tst.w	sl, #1
 8014f56:	d110      	bne.n	8014f7a <_dtoa_r+0x6c2>
 8014f58:	4620      	mov	r0, r4
 8014f5a:	ee18 1a10 	vmov	r1, s16
 8014f5e:	f001 f889 	bl	8016074 <_Bfree>
 8014f62:	2300      	movs	r3, #0
 8014f64:	9800      	ldr	r0, [sp, #0]
 8014f66:	702b      	strb	r3, [r5, #0]
 8014f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f6a:	3001      	adds	r0, #1
 8014f6c:	6018      	str	r0, [r3, #0]
 8014f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	f43f acf1 	beq.w	8014958 <_dtoa_r+0xa0>
 8014f76:	601d      	str	r5, [r3, #0]
 8014f78:	e4ee      	b.n	8014958 <_dtoa_r+0xa0>
 8014f7a:	9f00      	ldr	r7, [sp, #0]
 8014f7c:	462b      	mov	r3, r5
 8014f7e:	461d      	mov	r5, r3
 8014f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f84:	2a39      	cmp	r2, #57	; 0x39
 8014f86:	d106      	bne.n	8014f96 <_dtoa_r+0x6de>
 8014f88:	9a01      	ldr	r2, [sp, #4]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d1f7      	bne.n	8014f7e <_dtoa_r+0x6c6>
 8014f8e:	9901      	ldr	r1, [sp, #4]
 8014f90:	2230      	movs	r2, #48	; 0x30
 8014f92:	3701      	adds	r7, #1
 8014f94:	700a      	strb	r2, [r1, #0]
 8014f96:	781a      	ldrb	r2, [r3, #0]
 8014f98:	3201      	adds	r2, #1
 8014f9a:	701a      	strb	r2, [r3, #0]
 8014f9c:	e790      	b.n	8014ec0 <_dtoa_r+0x608>
 8014f9e:	4ba6      	ldr	r3, [pc, #664]	; (8015238 <_dtoa_r+0x980>)
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	f7eb fb41 	bl	8000628 <__aeabi_dmul>
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	2300      	movs	r3, #0
 8014faa:	4606      	mov	r6, r0
 8014fac:	460f      	mov	r7, r1
 8014fae:	f7eb fda3 	bl	8000af8 <__aeabi_dcmpeq>
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d09d      	beq.n	8014ef2 <_dtoa_r+0x63a>
 8014fb6:	e7cf      	b.n	8014f58 <_dtoa_r+0x6a0>
 8014fb8:	9a08      	ldr	r2, [sp, #32]
 8014fba:	2a00      	cmp	r2, #0
 8014fbc:	f000 80d7 	beq.w	801516e <_dtoa_r+0x8b6>
 8014fc0:	9a06      	ldr	r2, [sp, #24]
 8014fc2:	2a01      	cmp	r2, #1
 8014fc4:	f300 80ba 	bgt.w	801513c <_dtoa_r+0x884>
 8014fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fca:	2a00      	cmp	r2, #0
 8014fcc:	f000 80b2 	beq.w	8015134 <_dtoa_r+0x87c>
 8014fd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014fd4:	9e07      	ldr	r6, [sp, #28]
 8014fd6:	9d04      	ldr	r5, [sp, #16]
 8014fd8:	9a04      	ldr	r2, [sp, #16]
 8014fda:	441a      	add	r2, r3
 8014fdc:	9204      	str	r2, [sp, #16]
 8014fde:	9a05      	ldr	r2, [sp, #20]
 8014fe0:	2101      	movs	r1, #1
 8014fe2:	441a      	add	r2, r3
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	9205      	str	r2, [sp, #20]
 8014fe8:	f001 f946 	bl	8016278 <__i2b>
 8014fec:	4607      	mov	r7, r0
 8014fee:	2d00      	cmp	r5, #0
 8014ff0:	dd0c      	ble.n	801500c <_dtoa_r+0x754>
 8014ff2:	9b05      	ldr	r3, [sp, #20]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	dd09      	ble.n	801500c <_dtoa_r+0x754>
 8014ff8:	42ab      	cmp	r3, r5
 8014ffa:	9a04      	ldr	r2, [sp, #16]
 8014ffc:	bfa8      	it	ge
 8014ffe:	462b      	movge	r3, r5
 8015000:	1ad2      	subs	r2, r2, r3
 8015002:	9204      	str	r2, [sp, #16]
 8015004:	9a05      	ldr	r2, [sp, #20]
 8015006:	1aed      	subs	r5, r5, r3
 8015008:	1ad3      	subs	r3, r2, r3
 801500a:	9305      	str	r3, [sp, #20]
 801500c:	9b07      	ldr	r3, [sp, #28]
 801500e:	b31b      	cbz	r3, 8015058 <_dtoa_r+0x7a0>
 8015010:	9b08      	ldr	r3, [sp, #32]
 8015012:	2b00      	cmp	r3, #0
 8015014:	f000 80af 	beq.w	8015176 <_dtoa_r+0x8be>
 8015018:	2e00      	cmp	r6, #0
 801501a:	dd13      	ble.n	8015044 <_dtoa_r+0x78c>
 801501c:	4639      	mov	r1, r7
 801501e:	4632      	mov	r2, r6
 8015020:	4620      	mov	r0, r4
 8015022:	f001 f9e9 	bl	80163f8 <__pow5mult>
 8015026:	ee18 2a10 	vmov	r2, s16
 801502a:	4601      	mov	r1, r0
 801502c:	4607      	mov	r7, r0
 801502e:	4620      	mov	r0, r4
 8015030:	f001 f938 	bl	80162a4 <__multiply>
 8015034:	ee18 1a10 	vmov	r1, s16
 8015038:	4680      	mov	r8, r0
 801503a:	4620      	mov	r0, r4
 801503c:	f001 f81a 	bl	8016074 <_Bfree>
 8015040:	ee08 8a10 	vmov	s16, r8
 8015044:	9b07      	ldr	r3, [sp, #28]
 8015046:	1b9a      	subs	r2, r3, r6
 8015048:	d006      	beq.n	8015058 <_dtoa_r+0x7a0>
 801504a:	ee18 1a10 	vmov	r1, s16
 801504e:	4620      	mov	r0, r4
 8015050:	f001 f9d2 	bl	80163f8 <__pow5mult>
 8015054:	ee08 0a10 	vmov	s16, r0
 8015058:	2101      	movs	r1, #1
 801505a:	4620      	mov	r0, r4
 801505c:	f001 f90c 	bl	8016278 <__i2b>
 8015060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015062:	2b00      	cmp	r3, #0
 8015064:	4606      	mov	r6, r0
 8015066:	f340 8088 	ble.w	801517a <_dtoa_r+0x8c2>
 801506a:	461a      	mov	r2, r3
 801506c:	4601      	mov	r1, r0
 801506e:	4620      	mov	r0, r4
 8015070:	f001 f9c2 	bl	80163f8 <__pow5mult>
 8015074:	9b06      	ldr	r3, [sp, #24]
 8015076:	2b01      	cmp	r3, #1
 8015078:	4606      	mov	r6, r0
 801507a:	f340 8081 	ble.w	8015180 <_dtoa_r+0x8c8>
 801507e:	f04f 0800 	mov.w	r8, #0
 8015082:	6933      	ldr	r3, [r6, #16]
 8015084:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015088:	6918      	ldr	r0, [r3, #16]
 801508a:	f001 f8a5 	bl	80161d8 <__hi0bits>
 801508e:	f1c0 0020 	rsb	r0, r0, #32
 8015092:	9b05      	ldr	r3, [sp, #20]
 8015094:	4418      	add	r0, r3
 8015096:	f010 001f 	ands.w	r0, r0, #31
 801509a:	f000 8092 	beq.w	80151c2 <_dtoa_r+0x90a>
 801509e:	f1c0 0320 	rsb	r3, r0, #32
 80150a2:	2b04      	cmp	r3, #4
 80150a4:	f340 808a 	ble.w	80151bc <_dtoa_r+0x904>
 80150a8:	f1c0 001c 	rsb	r0, r0, #28
 80150ac:	9b04      	ldr	r3, [sp, #16]
 80150ae:	4403      	add	r3, r0
 80150b0:	9304      	str	r3, [sp, #16]
 80150b2:	9b05      	ldr	r3, [sp, #20]
 80150b4:	4403      	add	r3, r0
 80150b6:	4405      	add	r5, r0
 80150b8:	9305      	str	r3, [sp, #20]
 80150ba:	9b04      	ldr	r3, [sp, #16]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	dd07      	ble.n	80150d0 <_dtoa_r+0x818>
 80150c0:	ee18 1a10 	vmov	r1, s16
 80150c4:	461a      	mov	r2, r3
 80150c6:	4620      	mov	r0, r4
 80150c8:	f001 f9f0 	bl	80164ac <__lshift>
 80150cc:	ee08 0a10 	vmov	s16, r0
 80150d0:	9b05      	ldr	r3, [sp, #20]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	dd05      	ble.n	80150e2 <_dtoa_r+0x82a>
 80150d6:	4631      	mov	r1, r6
 80150d8:	461a      	mov	r2, r3
 80150da:	4620      	mov	r0, r4
 80150dc:	f001 f9e6 	bl	80164ac <__lshift>
 80150e0:	4606      	mov	r6, r0
 80150e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d06e      	beq.n	80151c6 <_dtoa_r+0x90e>
 80150e8:	ee18 0a10 	vmov	r0, s16
 80150ec:	4631      	mov	r1, r6
 80150ee:	f001 fa4d 	bl	801658c <__mcmp>
 80150f2:	2800      	cmp	r0, #0
 80150f4:	da67      	bge.n	80151c6 <_dtoa_r+0x90e>
 80150f6:	9b00      	ldr	r3, [sp, #0]
 80150f8:	3b01      	subs	r3, #1
 80150fa:	ee18 1a10 	vmov	r1, s16
 80150fe:	9300      	str	r3, [sp, #0]
 8015100:	220a      	movs	r2, #10
 8015102:	2300      	movs	r3, #0
 8015104:	4620      	mov	r0, r4
 8015106:	f000 ffd7 	bl	80160b8 <__multadd>
 801510a:	9b08      	ldr	r3, [sp, #32]
 801510c:	ee08 0a10 	vmov	s16, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	f000 81b1 	beq.w	8015478 <_dtoa_r+0xbc0>
 8015116:	2300      	movs	r3, #0
 8015118:	4639      	mov	r1, r7
 801511a:	220a      	movs	r2, #10
 801511c:	4620      	mov	r0, r4
 801511e:	f000 ffcb 	bl	80160b8 <__multadd>
 8015122:	9b02      	ldr	r3, [sp, #8]
 8015124:	2b00      	cmp	r3, #0
 8015126:	4607      	mov	r7, r0
 8015128:	f300 808e 	bgt.w	8015248 <_dtoa_r+0x990>
 801512c:	9b06      	ldr	r3, [sp, #24]
 801512e:	2b02      	cmp	r3, #2
 8015130:	dc51      	bgt.n	80151d6 <_dtoa_r+0x91e>
 8015132:	e089      	b.n	8015248 <_dtoa_r+0x990>
 8015134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015136:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801513a:	e74b      	b.n	8014fd4 <_dtoa_r+0x71c>
 801513c:	9b03      	ldr	r3, [sp, #12]
 801513e:	1e5e      	subs	r6, r3, #1
 8015140:	9b07      	ldr	r3, [sp, #28]
 8015142:	42b3      	cmp	r3, r6
 8015144:	bfbf      	itttt	lt
 8015146:	9b07      	ldrlt	r3, [sp, #28]
 8015148:	9607      	strlt	r6, [sp, #28]
 801514a:	1af2      	sublt	r2, r6, r3
 801514c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801514e:	bfb6      	itet	lt
 8015150:	189b      	addlt	r3, r3, r2
 8015152:	1b9e      	subge	r6, r3, r6
 8015154:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015156:	9b03      	ldr	r3, [sp, #12]
 8015158:	bfb8      	it	lt
 801515a:	2600      	movlt	r6, #0
 801515c:	2b00      	cmp	r3, #0
 801515e:	bfb7      	itett	lt
 8015160:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015164:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015168:	1a9d      	sublt	r5, r3, r2
 801516a:	2300      	movlt	r3, #0
 801516c:	e734      	b.n	8014fd8 <_dtoa_r+0x720>
 801516e:	9e07      	ldr	r6, [sp, #28]
 8015170:	9d04      	ldr	r5, [sp, #16]
 8015172:	9f08      	ldr	r7, [sp, #32]
 8015174:	e73b      	b.n	8014fee <_dtoa_r+0x736>
 8015176:	9a07      	ldr	r2, [sp, #28]
 8015178:	e767      	b.n	801504a <_dtoa_r+0x792>
 801517a:	9b06      	ldr	r3, [sp, #24]
 801517c:	2b01      	cmp	r3, #1
 801517e:	dc18      	bgt.n	80151b2 <_dtoa_r+0x8fa>
 8015180:	f1ba 0f00 	cmp.w	sl, #0
 8015184:	d115      	bne.n	80151b2 <_dtoa_r+0x8fa>
 8015186:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801518a:	b993      	cbnz	r3, 80151b2 <_dtoa_r+0x8fa>
 801518c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015190:	0d1b      	lsrs	r3, r3, #20
 8015192:	051b      	lsls	r3, r3, #20
 8015194:	b183      	cbz	r3, 80151b8 <_dtoa_r+0x900>
 8015196:	9b04      	ldr	r3, [sp, #16]
 8015198:	3301      	adds	r3, #1
 801519a:	9304      	str	r3, [sp, #16]
 801519c:	9b05      	ldr	r3, [sp, #20]
 801519e:	3301      	adds	r3, #1
 80151a0:	9305      	str	r3, [sp, #20]
 80151a2:	f04f 0801 	mov.w	r8, #1
 80151a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f47f af6a 	bne.w	8015082 <_dtoa_r+0x7ca>
 80151ae:	2001      	movs	r0, #1
 80151b0:	e76f      	b.n	8015092 <_dtoa_r+0x7da>
 80151b2:	f04f 0800 	mov.w	r8, #0
 80151b6:	e7f6      	b.n	80151a6 <_dtoa_r+0x8ee>
 80151b8:	4698      	mov	r8, r3
 80151ba:	e7f4      	b.n	80151a6 <_dtoa_r+0x8ee>
 80151bc:	f43f af7d 	beq.w	80150ba <_dtoa_r+0x802>
 80151c0:	4618      	mov	r0, r3
 80151c2:	301c      	adds	r0, #28
 80151c4:	e772      	b.n	80150ac <_dtoa_r+0x7f4>
 80151c6:	9b03      	ldr	r3, [sp, #12]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	dc37      	bgt.n	801523c <_dtoa_r+0x984>
 80151cc:	9b06      	ldr	r3, [sp, #24]
 80151ce:	2b02      	cmp	r3, #2
 80151d0:	dd34      	ble.n	801523c <_dtoa_r+0x984>
 80151d2:	9b03      	ldr	r3, [sp, #12]
 80151d4:	9302      	str	r3, [sp, #8]
 80151d6:	9b02      	ldr	r3, [sp, #8]
 80151d8:	b96b      	cbnz	r3, 80151f6 <_dtoa_r+0x93e>
 80151da:	4631      	mov	r1, r6
 80151dc:	2205      	movs	r2, #5
 80151de:	4620      	mov	r0, r4
 80151e0:	f000 ff6a 	bl	80160b8 <__multadd>
 80151e4:	4601      	mov	r1, r0
 80151e6:	4606      	mov	r6, r0
 80151e8:	ee18 0a10 	vmov	r0, s16
 80151ec:	f001 f9ce 	bl	801658c <__mcmp>
 80151f0:	2800      	cmp	r0, #0
 80151f2:	f73f adbb 	bgt.w	8014d6c <_dtoa_r+0x4b4>
 80151f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151f8:	9d01      	ldr	r5, [sp, #4]
 80151fa:	43db      	mvns	r3, r3
 80151fc:	9300      	str	r3, [sp, #0]
 80151fe:	f04f 0800 	mov.w	r8, #0
 8015202:	4631      	mov	r1, r6
 8015204:	4620      	mov	r0, r4
 8015206:	f000 ff35 	bl	8016074 <_Bfree>
 801520a:	2f00      	cmp	r7, #0
 801520c:	f43f aea4 	beq.w	8014f58 <_dtoa_r+0x6a0>
 8015210:	f1b8 0f00 	cmp.w	r8, #0
 8015214:	d005      	beq.n	8015222 <_dtoa_r+0x96a>
 8015216:	45b8      	cmp	r8, r7
 8015218:	d003      	beq.n	8015222 <_dtoa_r+0x96a>
 801521a:	4641      	mov	r1, r8
 801521c:	4620      	mov	r0, r4
 801521e:	f000 ff29 	bl	8016074 <_Bfree>
 8015222:	4639      	mov	r1, r7
 8015224:	4620      	mov	r0, r4
 8015226:	f000 ff25 	bl	8016074 <_Bfree>
 801522a:	e695      	b.n	8014f58 <_dtoa_r+0x6a0>
 801522c:	2600      	movs	r6, #0
 801522e:	4637      	mov	r7, r6
 8015230:	e7e1      	b.n	80151f6 <_dtoa_r+0x93e>
 8015232:	9700      	str	r7, [sp, #0]
 8015234:	4637      	mov	r7, r6
 8015236:	e599      	b.n	8014d6c <_dtoa_r+0x4b4>
 8015238:	40240000 	.word	0x40240000
 801523c:	9b08      	ldr	r3, [sp, #32]
 801523e:	2b00      	cmp	r3, #0
 8015240:	f000 80ca 	beq.w	80153d8 <_dtoa_r+0xb20>
 8015244:	9b03      	ldr	r3, [sp, #12]
 8015246:	9302      	str	r3, [sp, #8]
 8015248:	2d00      	cmp	r5, #0
 801524a:	dd05      	ble.n	8015258 <_dtoa_r+0x9a0>
 801524c:	4639      	mov	r1, r7
 801524e:	462a      	mov	r2, r5
 8015250:	4620      	mov	r0, r4
 8015252:	f001 f92b 	bl	80164ac <__lshift>
 8015256:	4607      	mov	r7, r0
 8015258:	f1b8 0f00 	cmp.w	r8, #0
 801525c:	d05b      	beq.n	8015316 <_dtoa_r+0xa5e>
 801525e:	6879      	ldr	r1, [r7, #4]
 8015260:	4620      	mov	r0, r4
 8015262:	f000 fec7 	bl	8015ff4 <_Balloc>
 8015266:	4605      	mov	r5, r0
 8015268:	b928      	cbnz	r0, 8015276 <_dtoa_r+0x9be>
 801526a:	4b87      	ldr	r3, [pc, #540]	; (8015488 <_dtoa_r+0xbd0>)
 801526c:	4602      	mov	r2, r0
 801526e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015272:	f7ff bb3b 	b.w	80148ec <_dtoa_r+0x34>
 8015276:	693a      	ldr	r2, [r7, #16]
 8015278:	3202      	adds	r2, #2
 801527a:	0092      	lsls	r2, r2, #2
 801527c:	f107 010c 	add.w	r1, r7, #12
 8015280:	300c      	adds	r0, #12
 8015282:	f7fd fcf3 	bl	8012c6c <memcpy>
 8015286:	2201      	movs	r2, #1
 8015288:	4629      	mov	r1, r5
 801528a:	4620      	mov	r0, r4
 801528c:	f001 f90e 	bl	80164ac <__lshift>
 8015290:	9b01      	ldr	r3, [sp, #4]
 8015292:	f103 0901 	add.w	r9, r3, #1
 8015296:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801529a:	4413      	add	r3, r2
 801529c:	9305      	str	r3, [sp, #20]
 801529e:	f00a 0301 	and.w	r3, sl, #1
 80152a2:	46b8      	mov	r8, r7
 80152a4:	9304      	str	r3, [sp, #16]
 80152a6:	4607      	mov	r7, r0
 80152a8:	4631      	mov	r1, r6
 80152aa:	ee18 0a10 	vmov	r0, s16
 80152ae:	f7ff fa77 	bl	80147a0 <quorem>
 80152b2:	4641      	mov	r1, r8
 80152b4:	9002      	str	r0, [sp, #8]
 80152b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80152ba:	ee18 0a10 	vmov	r0, s16
 80152be:	f001 f965 	bl	801658c <__mcmp>
 80152c2:	463a      	mov	r2, r7
 80152c4:	9003      	str	r0, [sp, #12]
 80152c6:	4631      	mov	r1, r6
 80152c8:	4620      	mov	r0, r4
 80152ca:	f001 f97b 	bl	80165c4 <__mdiff>
 80152ce:	68c2      	ldr	r2, [r0, #12]
 80152d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80152d4:	4605      	mov	r5, r0
 80152d6:	bb02      	cbnz	r2, 801531a <_dtoa_r+0xa62>
 80152d8:	4601      	mov	r1, r0
 80152da:	ee18 0a10 	vmov	r0, s16
 80152de:	f001 f955 	bl	801658c <__mcmp>
 80152e2:	4602      	mov	r2, r0
 80152e4:	4629      	mov	r1, r5
 80152e6:	4620      	mov	r0, r4
 80152e8:	9207      	str	r2, [sp, #28]
 80152ea:	f000 fec3 	bl	8016074 <_Bfree>
 80152ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80152f2:	ea43 0102 	orr.w	r1, r3, r2
 80152f6:	9b04      	ldr	r3, [sp, #16]
 80152f8:	430b      	orrs	r3, r1
 80152fa:	464d      	mov	r5, r9
 80152fc:	d10f      	bne.n	801531e <_dtoa_r+0xa66>
 80152fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015302:	d02a      	beq.n	801535a <_dtoa_r+0xaa2>
 8015304:	9b03      	ldr	r3, [sp, #12]
 8015306:	2b00      	cmp	r3, #0
 8015308:	dd02      	ble.n	8015310 <_dtoa_r+0xa58>
 801530a:	9b02      	ldr	r3, [sp, #8]
 801530c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015310:	f88b a000 	strb.w	sl, [fp]
 8015314:	e775      	b.n	8015202 <_dtoa_r+0x94a>
 8015316:	4638      	mov	r0, r7
 8015318:	e7ba      	b.n	8015290 <_dtoa_r+0x9d8>
 801531a:	2201      	movs	r2, #1
 801531c:	e7e2      	b.n	80152e4 <_dtoa_r+0xa2c>
 801531e:	9b03      	ldr	r3, [sp, #12]
 8015320:	2b00      	cmp	r3, #0
 8015322:	db04      	blt.n	801532e <_dtoa_r+0xa76>
 8015324:	9906      	ldr	r1, [sp, #24]
 8015326:	430b      	orrs	r3, r1
 8015328:	9904      	ldr	r1, [sp, #16]
 801532a:	430b      	orrs	r3, r1
 801532c:	d122      	bne.n	8015374 <_dtoa_r+0xabc>
 801532e:	2a00      	cmp	r2, #0
 8015330:	ddee      	ble.n	8015310 <_dtoa_r+0xa58>
 8015332:	ee18 1a10 	vmov	r1, s16
 8015336:	2201      	movs	r2, #1
 8015338:	4620      	mov	r0, r4
 801533a:	f001 f8b7 	bl	80164ac <__lshift>
 801533e:	4631      	mov	r1, r6
 8015340:	ee08 0a10 	vmov	s16, r0
 8015344:	f001 f922 	bl	801658c <__mcmp>
 8015348:	2800      	cmp	r0, #0
 801534a:	dc03      	bgt.n	8015354 <_dtoa_r+0xa9c>
 801534c:	d1e0      	bne.n	8015310 <_dtoa_r+0xa58>
 801534e:	f01a 0f01 	tst.w	sl, #1
 8015352:	d0dd      	beq.n	8015310 <_dtoa_r+0xa58>
 8015354:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015358:	d1d7      	bne.n	801530a <_dtoa_r+0xa52>
 801535a:	2339      	movs	r3, #57	; 0x39
 801535c:	f88b 3000 	strb.w	r3, [fp]
 8015360:	462b      	mov	r3, r5
 8015362:	461d      	mov	r5, r3
 8015364:	3b01      	subs	r3, #1
 8015366:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801536a:	2a39      	cmp	r2, #57	; 0x39
 801536c:	d071      	beq.n	8015452 <_dtoa_r+0xb9a>
 801536e:	3201      	adds	r2, #1
 8015370:	701a      	strb	r2, [r3, #0]
 8015372:	e746      	b.n	8015202 <_dtoa_r+0x94a>
 8015374:	2a00      	cmp	r2, #0
 8015376:	dd07      	ble.n	8015388 <_dtoa_r+0xad0>
 8015378:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801537c:	d0ed      	beq.n	801535a <_dtoa_r+0xaa2>
 801537e:	f10a 0301 	add.w	r3, sl, #1
 8015382:	f88b 3000 	strb.w	r3, [fp]
 8015386:	e73c      	b.n	8015202 <_dtoa_r+0x94a>
 8015388:	9b05      	ldr	r3, [sp, #20]
 801538a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801538e:	4599      	cmp	r9, r3
 8015390:	d047      	beq.n	8015422 <_dtoa_r+0xb6a>
 8015392:	ee18 1a10 	vmov	r1, s16
 8015396:	2300      	movs	r3, #0
 8015398:	220a      	movs	r2, #10
 801539a:	4620      	mov	r0, r4
 801539c:	f000 fe8c 	bl	80160b8 <__multadd>
 80153a0:	45b8      	cmp	r8, r7
 80153a2:	ee08 0a10 	vmov	s16, r0
 80153a6:	f04f 0300 	mov.w	r3, #0
 80153aa:	f04f 020a 	mov.w	r2, #10
 80153ae:	4641      	mov	r1, r8
 80153b0:	4620      	mov	r0, r4
 80153b2:	d106      	bne.n	80153c2 <_dtoa_r+0xb0a>
 80153b4:	f000 fe80 	bl	80160b8 <__multadd>
 80153b8:	4680      	mov	r8, r0
 80153ba:	4607      	mov	r7, r0
 80153bc:	f109 0901 	add.w	r9, r9, #1
 80153c0:	e772      	b.n	80152a8 <_dtoa_r+0x9f0>
 80153c2:	f000 fe79 	bl	80160b8 <__multadd>
 80153c6:	4639      	mov	r1, r7
 80153c8:	4680      	mov	r8, r0
 80153ca:	2300      	movs	r3, #0
 80153cc:	220a      	movs	r2, #10
 80153ce:	4620      	mov	r0, r4
 80153d0:	f000 fe72 	bl	80160b8 <__multadd>
 80153d4:	4607      	mov	r7, r0
 80153d6:	e7f1      	b.n	80153bc <_dtoa_r+0xb04>
 80153d8:	9b03      	ldr	r3, [sp, #12]
 80153da:	9302      	str	r3, [sp, #8]
 80153dc:	9d01      	ldr	r5, [sp, #4]
 80153de:	ee18 0a10 	vmov	r0, s16
 80153e2:	4631      	mov	r1, r6
 80153e4:	f7ff f9dc 	bl	80147a0 <quorem>
 80153e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80153ec:	9b01      	ldr	r3, [sp, #4]
 80153ee:	f805 ab01 	strb.w	sl, [r5], #1
 80153f2:	1aea      	subs	r2, r5, r3
 80153f4:	9b02      	ldr	r3, [sp, #8]
 80153f6:	4293      	cmp	r3, r2
 80153f8:	dd09      	ble.n	801540e <_dtoa_r+0xb56>
 80153fa:	ee18 1a10 	vmov	r1, s16
 80153fe:	2300      	movs	r3, #0
 8015400:	220a      	movs	r2, #10
 8015402:	4620      	mov	r0, r4
 8015404:	f000 fe58 	bl	80160b8 <__multadd>
 8015408:	ee08 0a10 	vmov	s16, r0
 801540c:	e7e7      	b.n	80153de <_dtoa_r+0xb26>
 801540e:	9b02      	ldr	r3, [sp, #8]
 8015410:	2b00      	cmp	r3, #0
 8015412:	bfc8      	it	gt
 8015414:	461d      	movgt	r5, r3
 8015416:	9b01      	ldr	r3, [sp, #4]
 8015418:	bfd8      	it	le
 801541a:	2501      	movle	r5, #1
 801541c:	441d      	add	r5, r3
 801541e:	f04f 0800 	mov.w	r8, #0
 8015422:	ee18 1a10 	vmov	r1, s16
 8015426:	2201      	movs	r2, #1
 8015428:	4620      	mov	r0, r4
 801542a:	f001 f83f 	bl	80164ac <__lshift>
 801542e:	4631      	mov	r1, r6
 8015430:	ee08 0a10 	vmov	s16, r0
 8015434:	f001 f8aa 	bl	801658c <__mcmp>
 8015438:	2800      	cmp	r0, #0
 801543a:	dc91      	bgt.n	8015360 <_dtoa_r+0xaa8>
 801543c:	d102      	bne.n	8015444 <_dtoa_r+0xb8c>
 801543e:	f01a 0f01 	tst.w	sl, #1
 8015442:	d18d      	bne.n	8015360 <_dtoa_r+0xaa8>
 8015444:	462b      	mov	r3, r5
 8015446:	461d      	mov	r5, r3
 8015448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801544c:	2a30      	cmp	r2, #48	; 0x30
 801544e:	d0fa      	beq.n	8015446 <_dtoa_r+0xb8e>
 8015450:	e6d7      	b.n	8015202 <_dtoa_r+0x94a>
 8015452:	9a01      	ldr	r2, [sp, #4]
 8015454:	429a      	cmp	r2, r3
 8015456:	d184      	bne.n	8015362 <_dtoa_r+0xaaa>
 8015458:	9b00      	ldr	r3, [sp, #0]
 801545a:	3301      	adds	r3, #1
 801545c:	9300      	str	r3, [sp, #0]
 801545e:	2331      	movs	r3, #49	; 0x31
 8015460:	7013      	strb	r3, [r2, #0]
 8015462:	e6ce      	b.n	8015202 <_dtoa_r+0x94a>
 8015464:	4b09      	ldr	r3, [pc, #36]	; (801548c <_dtoa_r+0xbd4>)
 8015466:	f7ff ba95 	b.w	8014994 <_dtoa_r+0xdc>
 801546a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801546c:	2b00      	cmp	r3, #0
 801546e:	f47f aa6e 	bne.w	801494e <_dtoa_r+0x96>
 8015472:	4b07      	ldr	r3, [pc, #28]	; (8015490 <_dtoa_r+0xbd8>)
 8015474:	f7ff ba8e 	b.w	8014994 <_dtoa_r+0xdc>
 8015478:	9b02      	ldr	r3, [sp, #8]
 801547a:	2b00      	cmp	r3, #0
 801547c:	dcae      	bgt.n	80153dc <_dtoa_r+0xb24>
 801547e:	9b06      	ldr	r3, [sp, #24]
 8015480:	2b02      	cmp	r3, #2
 8015482:	f73f aea8 	bgt.w	80151d6 <_dtoa_r+0x91e>
 8015486:	e7a9      	b.n	80153dc <_dtoa_r+0xb24>
 8015488:	080257b8 	.word	0x080257b8
 801548c:	080255c0 	.word	0x080255c0
 8015490:	08025739 	.word	0x08025739

08015494 <__sflush_r>:
 8015494:	898a      	ldrh	r2, [r1, #12]
 8015496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549a:	4605      	mov	r5, r0
 801549c:	0710      	lsls	r0, r2, #28
 801549e:	460c      	mov	r4, r1
 80154a0:	d458      	bmi.n	8015554 <__sflush_r+0xc0>
 80154a2:	684b      	ldr	r3, [r1, #4]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	dc05      	bgt.n	80154b4 <__sflush_r+0x20>
 80154a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	dc02      	bgt.n	80154b4 <__sflush_r+0x20>
 80154ae:	2000      	movs	r0, #0
 80154b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154b6:	2e00      	cmp	r6, #0
 80154b8:	d0f9      	beq.n	80154ae <__sflush_r+0x1a>
 80154ba:	2300      	movs	r3, #0
 80154bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80154c0:	682f      	ldr	r7, [r5, #0]
 80154c2:	602b      	str	r3, [r5, #0]
 80154c4:	d032      	beq.n	801552c <__sflush_r+0x98>
 80154c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80154c8:	89a3      	ldrh	r3, [r4, #12]
 80154ca:	075a      	lsls	r2, r3, #29
 80154cc:	d505      	bpl.n	80154da <__sflush_r+0x46>
 80154ce:	6863      	ldr	r3, [r4, #4]
 80154d0:	1ac0      	subs	r0, r0, r3
 80154d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154d4:	b10b      	cbz	r3, 80154da <__sflush_r+0x46>
 80154d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154d8:	1ac0      	subs	r0, r0, r3
 80154da:	2300      	movs	r3, #0
 80154dc:	4602      	mov	r2, r0
 80154de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154e0:	6a21      	ldr	r1, [r4, #32]
 80154e2:	4628      	mov	r0, r5
 80154e4:	47b0      	blx	r6
 80154e6:	1c43      	adds	r3, r0, #1
 80154e8:	89a3      	ldrh	r3, [r4, #12]
 80154ea:	d106      	bne.n	80154fa <__sflush_r+0x66>
 80154ec:	6829      	ldr	r1, [r5, #0]
 80154ee:	291d      	cmp	r1, #29
 80154f0:	d82c      	bhi.n	801554c <__sflush_r+0xb8>
 80154f2:	4a2a      	ldr	r2, [pc, #168]	; (801559c <__sflush_r+0x108>)
 80154f4:	40ca      	lsrs	r2, r1
 80154f6:	07d6      	lsls	r6, r2, #31
 80154f8:	d528      	bpl.n	801554c <__sflush_r+0xb8>
 80154fa:	2200      	movs	r2, #0
 80154fc:	6062      	str	r2, [r4, #4]
 80154fe:	04d9      	lsls	r1, r3, #19
 8015500:	6922      	ldr	r2, [r4, #16]
 8015502:	6022      	str	r2, [r4, #0]
 8015504:	d504      	bpl.n	8015510 <__sflush_r+0x7c>
 8015506:	1c42      	adds	r2, r0, #1
 8015508:	d101      	bne.n	801550e <__sflush_r+0x7a>
 801550a:	682b      	ldr	r3, [r5, #0]
 801550c:	b903      	cbnz	r3, 8015510 <__sflush_r+0x7c>
 801550e:	6560      	str	r0, [r4, #84]	; 0x54
 8015510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015512:	602f      	str	r7, [r5, #0]
 8015514:	2900      	cmp	r1, #0
 8015516:	d0ca      	beq.n	80154ae <__sflush_r+0x1a>
 8015518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801551c:	4299      	cmp	r1, r3
 801551e:	d002      	beq.n	8015526 <__sflush_r+0x92>
 8015520:	4628      	mov	r0, r5
 8015522:	f7fd fbb9 	bl	8012c98 <_free_r>
 8015526:	2000      	movs	r0, #0
 8015528:	6360      	str	r0, [r4, #52]	; 0x34
 801552a:	e7c1      	b.n	80154b0 <__sflush_r+0x1c>
 801552c:	6a21      	ldr	r1, [r4, #32]
 801552e:	2301      	movs	r3, #1
 8015530:	4628      	mov	r0, r5
 8015532:	47b0      	blx	r6
 8015534:	1c41      	adds	r1, r0, #1
 8015536:	d1c7      	bne.n	80154c8 <__sflush_r+0x34>
 8015538:	682b      	ldr	r3, [r5, #0]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d0c4      	beq.n	80154c8 <__sflush_r+0x34>
 801553e:	2b1d      	cmp	r3, #29
 8015540:	d001      	beq.n	8015546 <__sflush_r+0xb2>
 8015542:	2b16      	cmp	r3, #22
 8015544:	d101      	bne.n	801554a <__sflush_r+0xb6>
 8015546:	602f      	str	r7, [r5, #0]
 8015548:	e7b1      	b.n	80154ae <__sflush_r+0x1a>
 801554a:	89a3      	ldrh	r3, [r4, #12]
 801554c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015550:	81a3      	strh	r3, [r4, #12]
 8015552:	e7ad      	b.n	80154b0 <__sflush_r+0x1c>
 8015554:	690f      	ldr	r7, [r1, #16]
 8015556:	2f00      	cmp	r7, #0
 8015558:	d0a9      	beq.n	80154ae <__sflush_r+0x1a>
 801555a:	0793      	lsls	r3, r2, #30
 801555c:	680e      	ldr	r6, [r1, #0]
 801555e:	bf08      	it	eq
 8015560:	694b      	ldreq	r3, [r1, #20]
 8015562:	600f      	str	r7, [r1, #0]
 8015564:	bf18      	it	ne
 8015566:	2300      	movne	r3, #0
 8015568:	eba6 0807 	sub.w	r8, r6, r7
 801556c:	608b      	str	r3, [r1, #8]
 801556e:	f1b8 0f00 	cmp.w	r8, #0
 8015572:	dd9c      	ble.n	80154ae <__sflush_r+0x1a>
 8015574:	6a21      	ldr	r1, [r4, #32]
 8015576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015578:	4643      	mov	r3, r8
 801557a:	463a      	mov	r2, r7
 801557c:	4628      	mov	r0, r5
 801557e:	47b0      	blx	r6
 8015580:	2800      	cmp	r0, #0
 8015582:	dc06      	bgt.n	8015592 <__sflush_r+0xfe>
 8015584:	89a3      	ldrh	r3, [r4, #12]
 8015586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801558a:	81a3      	strh	r3, [r4, #12]
 801558c:	f04f 30ff 	mov.w	r0, #4294967295
 8015590:	e78e      	b.n	80154b0 <__sflush_r+0x1c>
 8015592:	4407      	add	r7, r0
 8015594:	eba8 0800 	sub.w	r8, r8, r0
 8015598:	e7e9      	b.n	801556e <__sflush_r+0xda>
 801559a:	bf00      	nop
 801559c:	20400001 	.word	0x20400001

080155a0 <_fflush_r>:
 80155a0:	b538      	push	{r3, r4, r5, lr}
 80155a2:	690b      	ldr	r3, [r1, #16]
 80155a4:	4605      	mov	r5, r0
 80155a6:	460c      	mov	r4, r1
 80155a8:	b913      	cbnz	r3, 80155b0 <_fflush_r+0x10>
 80155aa:	2500      	movs	r5, #0
 80155ac:	4628      	mov	r0, r5
 80155ae:	bd38      	pop	{r3, r4, r5, pc}
 80155b0:	b118      	cbz	r0, 80155ba <_fflush_r+0x1a>
 80155b2:	6983      	ldr	r3, [r0, #24]
 80155b4:	b90b      	cbnz	r3, 80155ba <_fflush_r+0x1a>
 80155b6:	f000 f887 	bl	80156c8 <__sinit>
 80155ba:	4b14      	ldr	r3, [pc, #80]	; (801560c <_fflush_r+0x6c>)
 80155bc:	429c      	cmp	r4, r3
 80155be:	d11b      	bne.n	80155f8 <_fflush_r+0x58>
 80155c0:	686c      	ldr	r4, [r5, #4]
 80155c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d0ef      	beq.n	80155aa <_fflush_r+0xa>
 80155ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80155cc:	07d0      	lsls	r0, r2, #31
 80155ce:	d404      	bmi.n	80155da <_fflush_r+0x3a>
 80155d0:	0599      	lsls	r1, r3, #22
 80155d2:	d402      	bmi.n	80155da <_fflush_r+0x3a>
 80155d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155d6:	f000 fc88 	bl	8015eea <__retarget_lock_acquire_recursive>
 80155da:	4628      	mov	r0, r5
 80155dc:	4621      	mov	r1, r4
 80155de:	f7ff ff59 	bl	8015494 <__sflush_r>
 80155e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155e4:	07da      	lsls	r2, r3, #31
 80155e6:	4605      	mov	r5, r0
 80155e8:	d4e0      	bmi.n	80155ac <_fflush_r+0xc>
 80155ea:	89a3      	ldrh	r3, [r4, #12]
 80155ec:	059b      	lsls	r3, r3, #22
 80155ee:	d4dd      	bmi.n	80155ac <_fflush_r+0xc>
 80155f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155f2:	f000 fc7b 	bl	8015eec <__retarget_lock_release_recursive>
 80155f6:	e7d9      	b.n	80155ac <_fflush_r+0xc>
 80155f8:	4b05      	ldr	r3, [pc, #20]	; (8015610 <_fflush_r+0x70>)
 80155fa:	429c      	cmp	r4, r3
 80155fc:	d101      	bne.n	8015602 <_fflush_r+0x62>
 80155fe:	68ac      	ldr	r4, [r5, #8]
 8015600:	e7df      	b.n	80155c2 <_fflush_r+0x22>
 8015602:	4b04      	ldr	r3, [pc, #16]	; (8015614 <_fflush_r+0x74>)
 8015604:	429c      	cmp	r4, r3
 8015606:	bf08      	it	eq
 8015608:	68ec      	ldreq	r4, [r5, #12]
 801560a:	e7da      	b.n	80155c2 <_fflush_r+0x22>
 801560c:	080257ec 	.word	0x080257ec
 8015610:	0802580c 	.word	0x0802580c
 8015614:	080257cc 	.word	0x080257cc

08015618 <std>:
 8015618:	2300      	movs	r3, #0
 801561a:	b510      	push	{r4, lr}
 801561c:	4604      	mov	r4, r0
 801561e:	e9c0 3300 	strd	r3, r3, [r0]
 8015622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015626:	6083      	str	r3, [r0, #8]
 8015628:	8181      	strh	r1, [r0, #12]
 801562a:	6643      	str	r3, [r0, #100]	; 0x64
 801562c:	81c2      	strh	r2, [r0, #14]
 801562e:	6183      	str	r3, [r0, #24]
 8015630:	4619      	mov	r1, r3
 8015632:	2208      	movs	r2, #8
 8015634:	305c      	adds	r0, #92	; 0x5c
 8015636:	f7fd fb27 	bl	8012c88 <memset>
 801563a:	4b05      	ldr	r3, [pc, #20]	; (8015650 <std+0x38>)
 801563c:	6263      	str	r3, [r4, #36]	; 0x24
 801563e:	4b05      	ldr	r3, [pc, #20]	; (8015654 <std+0x3c>)
 8015640:	62a3      	str	r3, [r4, #40]	; 0x28
 8015642:	4b05      	ldr	r3, [pc, #20]	; (8015658 <std+0x40>)
 8015644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015646:	4b05      	ldr	r3, [pc, #20]	; (801565c <std+0x44>)
 8015648:	6224      	str	r4, [r4, #32]
 801564a:	6323      	str	r3, [r4, #48]	; 0x30
 801564c:	bd10      	pop	{r4, pc}
 801564e:	bf00      	nop
 8015650:	08016c75 	.word	0x08016c75
 8015654:	08016c97 	.word	0x08016c97
 8015658:	08016ccf 	.word	0x08016ccf
 801565c:	08016cf3 	.word	0x08016cf3

08015660 <_cleanup_r>:
 8015660:	4901      	ldr	r1, [pc, #4]	; (8015668 <_cleanup_r+0x8>)
 8015662:	f000 b8af 	b.w	80157c4 <_fwalk_reent>
 8015666:	bf00      	nop
 8015668:	080155a1 	.word	0x080155a1

0801566c <__sfmoreglue>:
 801566c:	b570      	push	{r4, r5, r6, lr}
 801566e:	2268      	movs	r2, #104	; 0x68
 8015670:	1e4d      	subs	r5, r1, #1
 8015672:	4355      	muls	r5, r2
 8015674:	460e      	mov	r6, r1
 8015676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801567a:	f7fd fb79 	bl	8012d70 <_malloc_r>
 801567e:	4604      	mov	r4, r0
 8015680:	b140      	cbz	r0, 8015694 <__sfmoreglue+0x28>
 8015682:	2100      	movs	r1, #0
 8015684:	e9c0 1600 	strd	r1, r6, [r0]
 8015688:	300c      	adds	r0, #12
 801568a:	60a0      	str	r0, [r4, #8]
 801568c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015690:	f7fd fafa 	bl	8012c88 <memset>
 8015694:	4620      	mov	r0, r4
 8015696:	bd70      	pop	{r4, r5, r6, pc}

08015698 <__sfp_lock_acquire>:
 8015698:	4801      	ldr	r0, [pc, #4]	; (80156a0 <__sfp_lock_acquire+0x8>)
 801569a:	f000 bc26 	b.w	8015eea <__retarget_lock_acquire_recursive>
 801569e:	bf00      	nop
 80156a0:	2000d0ad 	.word	0x2000d0ad

080156a4 <__sfp_lock_release>:
 80156a4:	4801      	ldr	r0, [pc, #4]	; (80156ac <__sfp_lock_release+0x8>)
 80156a6:	f000 bc21 	b.w	8015eec <__retarget_lock_release_recursive>
 80156aa:	bf00      	nop
 80156ac:	2000d0ad 	.word	0x2000d0ad

080156b0 <__sinit_lock_acquire>:
 80156b0:	4801      	ldr	r0, [pc, #4]	; (80156b8 <__sinit_lock_acquire+0x8>)
 80156b2:	f000 bc1a 	b.w	8015eea <__retarget_lock_acquire_recursive>
 80156b6:	bf00      	nop
 80156b8:	2000d0ae 	.word	0x2000d0ae

080156bc <__sinit_lock_release>:
 80156bc:	4801      	ldr	r0, [pc, #4]	; (80156c4 <__sinit_lock_release+0x8>)
 80156be:	f000 bc15 	b.w	8015eec <__retarget_lock_release_recursive>
 80156c2:	bf00      	nop
 80156c4:	2000d0ae 	.word	0x2000d0ae

080156c8 <__sinit>:
 80156c8:	b510      	push	{r4, lr}
 80156ca:	4604      	mov	r4, r0
 80156cc:	f7ff fff0 	bl	80156b0 <__sinit_lock_acquire>
 80156d0:	69a3      	ldr	r3, [r4, #24]
 80156d2:	b11b      	cbz	r3, 80156dc <__sinit+0x14>
 80156d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156d8:	f7ff bff0 	b.w	80156bc <__sinit_lock_release>
 80156dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80156e0:	6523      	str	r3, [r4, #80]	; 0x50
 80156e2:	4b13      	ldr	r3, [pc, #76]	; (8015730 <__sinit+0x68>)
 80156e4:	4a13      	ldr	r2, [pc, #76]	; (8015734 <__sinit+0x6c>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80156ea:	42a3      	cmp	r3, r4
 80156ec:	bf04      	itt	eq
 80156ee:	2301      	moveq	r3, #1
 80156f0:	61a3      	streq	r3, [r4, #24]
 80156f2:	4620      	mov	r0, r4
 80156f4:	f000 f820 	bl	8015738 <__sfp>
 80156f8:	6060      	str	r0, [r4, #4]
 80156fa:	4620      	mov	r0, r4
 80156fc:	f000 f81c 	bl	8015738 <__sfp>
 8015700:	60a0      	str	r0, [r4, #8]
 8015702:	4620      	mov	r0, r4
 8015704:	f000 f818 	bl	8015738 <__sfp>
 8015708:	2200      	movs	r2, #0
 801570a:	60e0      	str	r0, [r4, #12]
 801570c:	2104      	movs	r1, #4
 801570e:	6860      	ldr	r0, [r4, #4]
 8015710:	f7ff ff82 	bl	8015618 <std>
 8015714:	68a0      	ldr	r0, [r4, #8]
 8015716:	2201      	movs	r2, #1
 8015718:	2109      	movs	r1, #9
 801571a:	f7ff ff7d 	bl	8015618 <std>
 801571e:	68e0      	ldr	r0, [r4, #12]
 8015720:	2202      	movs	r2, #2
 8015722:	2112      	movs	r1, #18
 8015724:	f7ff ff78 	bl	8015618 <std>
 8015728:	2301      	movs	r3, #1
 801572a:	61a3      	str	r3, [r4, #24]
 801572c:	e7d2      	b.n	80156d4 <__sinit+0xc>
 801572e:	bf00      	nop
 8015730:	080255ac 	.word	0x080255ac
 8015734:	08015661 	.word	0x08015661

08015738 <__sfp>:
 8015738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801573a:	4607      	mov	r7, r0
 801573c:	f7ff ffac 	bl	8015698 <__sfp_lock_acquire>
 8015740:	4b1e      	ldr	r3, [pc, #120]	; (80157bc <__sfp+0x84>)
 8015742:	681e      	ldr	r6, [r3, #0]
 8015744:	69b3      	ldr	r3, [r6, #24]
 8015746:	b913      	cbnz	r3, 801574e <__sfp+0x16>
 8015748:	4630      	mov	r0, r6
 801574a:	f7ff ffbd 	bl	80156c8 <__sinit>
 801574e:	3648      	adds	r6, #72	; 0x48
 8015750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015754:	3b01      	subs	r3, #1
 8015756:	d503      	bpl.n	8015760 <__sfp+0x28>
 8015758:	6833      	ldr	r3, [r6, #0]
 801575a:	b30b      	cbz	r3, 80157a0 <__sfp+0x68>
 801575c:	6836      	ldr	r6, [r6, #0]
 801575e:	e7f7      	b.n	8015750 <__sfp+0x18>
 8015760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015764:	b9d5      	cbnz	r5, 801579c <__sfp+0x64>
 8015766:	4b16      	ldr	r3, [pc, #88]	; (80157c0 <__sfp+0x88>)
 8015768:	60e3      	str	r3, [r4, #12]
 801576a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801576e:	6665      	str	r5, [r4, #100]	; 0x64
 8015770:	f000 fbba 	bl	8015ee8 <__retarget_lock_init_recursive>
 8015774:	f7ff ff96 	bl	80156a4 <__sfp_lock_release>
 8015778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801577c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015780:	6025      	str	r5, [r4, #0]
 8015782:	61a5      	str	r5, [r4, #24]
 8015784:	2208      	movs	r2, #8
 8015786:	4629      	mov	r1, r5
 8015788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801578c:	f7fd fa7c 	bl	8012c88 <memset>
 8015790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015798:	4620      	mov	r0, r4
 801579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801579c:	3468      	adds	r4, #104	; 0x68
 801579e:	e7d9      	b.n	8015754 <__sfp+0x1c>
 80157a0:	2104      	movs	r1, #4
 80157a2:	4638      	mov	r0, r7
 80157a4:	f7ff ff62 	bl	801566c <__sfmoreglue>
 80157a8:	4604      	mov	r4, r0
 80157aa:	6030      	str	r0, [r6, #0]
 80157ac:	2800      	cmp	r0, #0
 80157ae:	d1d5      	bne.n	801575c <__sfp+0x24>
 80157b0:	f7ff ff78 	bl	80156a4 <__sfp_lock_release>
 80157b4:	230c      	movs	r3, #12
 80157b6:	603b      	str	r3, [r7, #0]
 80157b8:	e7ee      	b.n	8015798 <__sfp+0x60>
 80157ba:	bf00      	nop
 80157bc:	080255ac 	.word	0x080255ac
 80157c0:	ffff0001 	.word	0xffff0001

080157c4 <_fwalk_reent>:
 80157c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157c8:	4606      	mov	r6, r0
 80157ca:	4688      	mov	r8, r1
 80157cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80157d0:	2700      	movs	r7, #0
 80157d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80157d6:	f1b9 0901 	subs.w	r9, r9, #1
 80157da:	d505      	bpl.n	80157e8 <_fwalk_reent+0x24>
 80157dc:	6824      	ldr	r4, [r4, #0]
 80157de:	2c00      	cmp	r4, #0
 80157e0:	d1f7      	bne.n	80157d2 <_fwalk_reent+0xe>
 80157e2:	4638      	mov	r0, r7
 80157e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157e8:	89ab      	ldrh	r3, [r5, #12]
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d907      	bls.n	80157fe <_fwalk_reent+0x3a>
 80157ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80157f2:	3301      	adds	r3, #1
 80157f4:	d003      	beq.n	80157fe <_fwalk_reent+0x3a>
 80157f6:	4629      	mov	r1, r5
 80157f8:	4630      	mov	r0, r6
 80157fa:	47c0      	blx	r8
 80157fc:	4307      	orrs	r7, r0
 80157fe:	3568      	adds	r5, #104	; 0x68
 8015800:	e7e9      	b.n	80157d6 <_fwalk_reent+0x12>

08015802 <rshift>:
 8015802:	6903      	ldr	r3, [r0, #16]
 8015804:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801580c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015810:	f100 0414 	add.w	r4, r0, #20
 8015814:	dd45      	ble.n	80158a2 <rshift+0xa0>
 8015816:	f011 011f 	ands.w	r1, r1, #31
 801581a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801581e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015822:	d10c      	bne.n	801583e <rshift+0x3c>
 8015824:	f100 0710 	add.w	r7, r0, #16
 8015828:	4629      	mov	r1, r5
 801582a:	42b1      	cmp	r1, r6
 801582c:	d334      	bcc.n	8015898 <rshift+0x96>
 801582e:	1a9b      	subs	r3, r3, r2
 8015830:	009b      	lsls	r3, r3, #2
 8015832:	1eea      	subs	r2, r5, #3
 8015834:	4296      	cmp	r6, r2
 8015836:	bf38      	it	cc
 8015838:	2300      	movcc	r3, #0
 801583a:	4423      	add	r3, r4
 801583c:	e015      	b.n	801586a <rshift+0x68>
 801583e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015842:	f1c1 0820 	rsb	r8, r1, #32
 8015846:	40cf      	lsrs	r7, r1
 8015848:	f105 0e04 	add.w	lr, r5, #4
 801584c:	46a1      	mov	r9, r4
 801584e:	4576      	cmp	r6, lr
 8015850:	46f4      	mov	ip, lr
 8015852:	d815      	bhi.n	8015880 <rshift+0x7e>
 8015854:	1a9a      	subs	r2, r3, r2
 8015856:	0092      	lsls	r2, r2, #2
 8015858:	3a04      	subs	r2, #4
 801585a:	3501      	adds	r5, #1
 801585c:	42ae      	cmp	r6, r5
 801585e:	bf38      	it	cc
 8015860:	2200      	movcc	r2, #0
 8015862:	18a3      	adds	r3, r4, r2
 8015864:	50a7      	str	r7, [r4, r2]
 8015866:	b107      	cbz	r7, 801586a <rshift+0x68>
 8015868:	3304      	adds	r3, #4
 801586a:	1b1a      	subs	r2, r3, r4
 801586c:	42a3      	cmp	r3, r4
 801586e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015872:	bf08      	it	eq
 8015874:	2300      	moveq	r3, #0
 8015876:	6102      	str	r2, [r0, #16]
 8015878:	bf08      	it	eq
 801587a:	6143      	streq	r3, [r0, #20]
 801587c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015880:	f8dc c000 	ldr.w	ip, [ip]
 8015884:	fa0c fc08 	lsl.w	ip, ip, r8
 8015888:	ea4c 0707 	orr.w	r7, ip, r7
 801588c:	f849 7b04 	str.w	r7, [r9], #4
 8015890:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015894:	40cf      	lsrs	r7, r1
 8015896:	e7da      	b.n	801584e <rshift+0x4c>
 8015898:	f851 cb04 	ldr.w	ip, [r1], #4
 801589c:	f847 cf04 	str.w	ip, [r7, #4]!
 80158a0:	e7c3      	b.n	801582a <rshift+0x28>
 80158a2:	4623      	mov	r3, r4
 80158a4:	e7e1      	b.n	801586a <rshift+0x68>

080158a6 <__hexdig_fun>:
 80158a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80158aa:	2b09      	cmp	r3, #9
 80158ac:	d802      	bhi.n	80158b4 <__hexdig_fun+0xe>
 80158ae:	3820      	subs	r0, #32
 80158b0:	b2c0      	uxtb	r0, r0
 80158b2:	4770      	bx	lr
 80158b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80158b8:	2b05      	cmp	r3, #5
 80158ba:	d801      	bhi.n	80158c0 <__hexdig_fun+0x1a>
 80158bc:	3847      	subs	r0, #71	; 0x47
 80158be:	e7f7      	b.n	80158b0 <__hexdig_fun+0xa>
 80158c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80158c4:	2b05      	cmp	r3, #5
 80158c6:	d801      	bhi.n	80158cc <__hexdig_fun+0x26>
 80158c8:	3827      	subs	r0, #39	; 0x27
 80158ca:	e7f1      	b.n	80158b0 <__hexdig_fun+0xa>
 80158cc:	2000      	movs	r0, #0
 80158ce:	4770      	bx	lr

080158d0 <__gethex>:
 80158d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d4:	ed2d 8b02 	vpush	{d8}
 80158d8:	b089      	sub	sp, #36	; 0x24
 80158da:	ee08 0a10 	vmov	s16, r0
 80158de:	9304      	str	r3, [sp, #16]
 80158e0:	4bb4      	ldr	r3, [pc, #720]	; (8015bb4 <__gethex+0x2e4>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	9301      	str	r3, [sp, #4]
 80158e6:	4618      	mov	r0, r3
 80158e8:	468b      	mov	fp, r1
 80158ea:	4690      	mov	r8, r2
 80158ec:	f7ea fc82 	bl	80001f4 <strlen>
 80158f0:	9b01      	ldr	r3, [sp, #4]
 80158f2:	f8db 2000 	ldr.w	r2, [fp]
 80158f6:	4403      	add	r3, r0
 80158f8:	4682      	mov	sl, r0
 80158fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80158fe:	9305      	str	r3, [sp, #20]
 8015900:	1c93      	adds	r3, r2, #2
 8015902:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015906:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801590a:	32fe      	adds	r2, #254	; 0xfe
 801590c:	18d1      	adds	r1, r2, r3
 801590e:	461f      	mov	r7, r3
 8015910:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015914:	9100      	str	r1, [sp, #0]
 8015916:	2830      	cmp	r0, #48	; 0x30
 8015918:	d0f8      	beq.n	801590c <__gethex+0x3c>
 801591a:	f7ff ffc4 	bl	80158a6 <__hexdig_fun>
 801591e:	4604      	mov	r4, r0
 8015920:	2800      	cmp	r0, #0
 8015922:	d13a      	bne.n	801599a <__gethex+0xca>
 8015924:	9901      	ldr	r1, [sp, #4]
 8015926:	4652      	mov	r2, sl
 8015928:	4638      	mov	r0, r7
 801592a:	f001 f9e6 	bl	8016cfa <strncmp>
 801592e:	4605      	mov	r5, r0
 8015930:	2800      	cmp	r0, #0
 8015932:	d168      	bne.n	8015a06 <__gethex+0x136>
 8015934:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015938:	eb07 060a 	add.w	r6, r7, sl
 801593c:	f7ff ffb3 	bl	80158a6 <__hexdig_fun>
 8015940:	2800      	cmp	r0, #0
 8015942:	d062      	beq.n	8015a0a <__gethex+0x13a>
 8015944:	4633      	mov	r3, r6
 8015946:	7818      	ldrb	r0, [r3, #0]
 8015948:	2830      	cmp	r0, #48	; 0x30
 801594a:	461f      	mov	r7, r3
 801594c:	f103 0301 	add.w	r3, r3, #1
 8015950:	d0f9      	beq.n	8015946 <__gethex+0x76>
 8015952:	f7ff ffa8 	bl	80158a6 <__hexdig_fun>
 8015956:	2301      	movs	r3, #1
 8015958:	fab0 f480 	clz	r4, r0
 801595c:	0964      	lsrs	r4, r4, #5
 801595e:	4635      	mov	r5, r6
 8015960:	9300      	str	r3, [sp, #0]
 8015962:	463a      	mov	r2, r7
 8015964:	4616      	mov	r6, r2
 8015966:	3201      	adds	r2, #1
 8015968:	7830      	ldrb	r0, [r6, #0]
 801596a:	f7ff ff9c 	bl	80158a6 <__hexdig_fun>
 801596e:	2800      	cmp	r0, #0
 8015970:	d1f8      	bne.n	8015964 <__gethex+0x94>
 8015972:	9901      	ldr	r1, [sp, #4]
 8015974:	4652      	mov	r2, sl
 8015976:	4630      	mov	r0, r6
 8015978:	f001 f9bf 	bl	8016cfa <strncmp>
 801597c:	b980      	cbnz	r0, 80159a0 <__gethex+0xd0>
 801597e:	b94d      	cbnz	r5, 8015994 <__gethex+0xc4>
 8015980:	eb06 050a 	add.w	r5, r6, sl
 8015984:	462a      	mov	r2, r5
 8015986:	4616      	mov	r6, r2
 8015988:	3201      	adds	r2, #1
 801598a:	7830      	ldrb	r0, [r6, #0]
 801598c:	f7ff ff8b 	bl	80158a6 <__hexdig_fun>
 8015990:	2800      	cmp	r0, #0
 8015992:	d1f8      	bne.n	8015986 <__gethex+0xb6>
 8015994:	1bad      	subs	r5, r5, r6
 8015996:	00ad      	lsls	r5, r5, #2
 8015998:	e004      	b.n	80159a4 <__gethex+0xd4>
 801599a:	2400      	movs	r4, #0
 801599c:	4625      	mov	r5, r4
 801599e:	e7e0      	b.n	8015962 <__gethex+0x92>
 80159a0:	2d00      	cmp	r5, #0
 80159a2:	d1f7      	bne.n	8015994 <__gethex+0xc4>
 80159a4:	7833      	ldrb	r3, [r6, #0]
 80159a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80159aa:	2b50      	cmp	r3, #80	; 0x50
 80159ac:	d13b      	bne.n	8015a26 <__gethex+0x156>
 80159ae:	7873      	ldrb	r3, [r6, #1]
 80159b0:	2b2b      	cmp	r3, #43	; 0x2b
 80159b2:	d02c      	beq.n	8015a0e <__gethex+0x13e>
 80159b4:	2b2d      	cmp	r3, #45	; 0x2d
 80159b6:	d02e      	beq.n	8015a16 <__gethex+0x146>
 80159b8:	1c71      	adds	r1, r6, #1
 80159ba:	f04f 0900 	mov.w	r9, #0
 80159be:	7808      	ldrb	r0, [r1, #0]
 80159c0:	f7ff ff71 	bl	80158a6 <__hexdig_fun>
 80159c4:	1e43      	subs	r3, r0, #1
 80159c6:	b2db      	uxtb	r3, r3
 80159c8:	2b18      	cmp	r3, #24
 80159ca:	d82c      	bhi.n	8015a26 <__gethex+0x156>
 80159cc:	f1a0 0210 	sub.w	r2, r0, #16
 80159d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80159d4:	f7ff ff67 	bl	80158a6 <__hexdig_fun>
 80159d8:	1e43      	subs	r3, r0, #1
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b18      	cmp	r3, #24
 80159de:	d91d      	bls.n	8015a1c <__gethex+0x14c>
 80159e0:	f1b9 0f00 	cmp.w	r9, #0
 80159e4:	d000      	beq.n	80159e8 <__gethex+0x118>
 80159e6:	4252      	negs	r2, r2
 80159e8:	4415      	add	r5, r2
 80159ea:	f8cb 1000 	str.w	r1, [fp]
 80159ee:	b1e4      	cbz	r4, 8015a2a <__gethex+0x15a>
 80159f0:	9b00      	ldr	r3, [sp, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	bf14      	ite	ne
 80159f6:	2700      	movne	r7, #0
 80159f8:	2706      	moveq	r7, #6
 80159fa:	4638      	mov	r0, r7
 80159fc:	b009      	add	sp, #36	; 0x24
 80159fe:	ecbd 8b02 	vpop	{d8}
 8015a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a06:	463e      	mov	r6, r7
 8015a08:	4625      	mov	r5, r4
 8015a0a:	2401      	movs	r4, #1
 8015a0c:	e7ca      	b.n	80159a4 <__gethex+0xd4>
 8015a0e:	f04f 0900 	mov.w	r9, #0
 8015a12:	1cb1      	adds	r1, r6, #2
 8015a14:	e7d3      	b.n	80159be <__gethex+0xee>
 8015a16:	f04f 0901 	mov.w	r9, #1
 8015a1a:	e7fa      	b.n	8015a12 <__gethex+0x142>
 8015a1c:	230a      	movs	r3, #10
 8015a1e:	fb03 0202 	mla	r2, r3, r2, r0
 8015a22:	3a10      	subs	r2, #16
 8015a24:	e7d4      	b.n	80159d0 <__gethex+0x100>
 8015a26:	4631      	mov	r1, r6
 8015a28:	e7df      	b.n	80159ea <__gethex+0x11a>
 8015a2a:	1bf3      	subs	r3, r6, r7
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	4621      	mov	r1, r4
 8015a30:	2b07      	cmp	r3, #7
 8015a32:	dc0b      	bgt.n	8015a4c <__gethex+0x17c>
 8015a34:	ee18 0a10 	vmov	r0, s16
 8015a38:	f000 fadc 	bl	8015ff4 <_Balloc>
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	b940      	cbnz	r0, 8015a52 <__gethex+0x182>
 8015a40:	4b5d      	ldr	r3, [pc, #372]	; (8015bb8 <__gethex+0x2e8>)
 8015a42:	4602      	mov	r2, r0
 8015a44:	21de      	movs	r1, #222	; 0xde
 8015a46:	485d      	ldr	r0, [pc, #372]	; (8015bbc <__gethex+0x2ec>)
 8015a48:	f001 f98a 	bl	8016d60 <__assert_func>
 8015a4c:	3101      	adds	r1, #1
 8015a4e:	105b      	asrs	r3, r3, #1
 8015a50:	e7ee      	b.n	8015a30 <__gethex+0x160>
 8015a52:	f100 0914 	add.w	r9, r0, #20
 8015a56:	f04f 0b00 	mov.w	fp, #0
 8015a5a:	f1ca 0301 	rsb	r3, sl, #1
 8015a5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a62:	f8cd b000 	str.w	fp, [sp]
 8015a66:	9306      	str	r3, [sp, #24]
 8015a68:	42b7      	cmp	r7, r6
 8015a6a:	d340      	bcc.n	8015aee <__gethex+0x21e>
 8015a6c:	9802      	ldr	r0, [sp, #8]
 8015a6e:	9b00      	ldr	r3, [sp, #0]
 8015a70:	f840 3b04 	str.w	r3, [r0], #4
 8015a74:	eba0 0009 	sub.w	r0, r0, r9
 8015a78:	1080      	asrs	r0, r0, #2
 8015a7a:	0146      	lsls	r6, r0, #5
 8015a7c:	6120      	str	r0, [r4, #16]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f000 fbaa 	bl	80161d8 <__hi0bits>
 8015a84:	1a30      	subs	r0, r6, r0
 8015a86:	f8d8 6000 	ldr.w	r6, [r8]
 8015a8a:	42b0      	cmp	r0, r6
 8015a8c:	dd63      	ble.n	8015b56 <__gethex+0x286>
 8015a8e:	1b87      	subs	r7, r0, r6
 8015a90:	4639      	mov	r1, r7
 8015a92:	4620      	mov	r0, r4
 8015a94:	f000 ff4e 	bl	8016934 <__any_on>
 8015a98:	4682      	mov	sl, r0
 8015a9a:	b1a8      	cbz	r0, 8015ac8 <__gethex+0x1f8>
 8015a9c:	1e7b      	subs	r3, r7, #1
 8015a9e:	1159      	asrs	r1, r3, #5
 8015aa0:	f003 021f 	and.w	r2, r3, #31
 8015aa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015aa8:	f04f 0a01 	mov.w	sl, #1
 8015aac:	fa0a f202 	lsl.w	r2, sl, r2
 8015ab0:	420a      	tst	r2, r1
 8015ab2:	d009      	beq.n	8015ac8 <__gethex+0x1f8>
 8015ab4:	4553      	cmp	r3, sl
 8015ab6:	dd05      	ble.n	8015ac4 <__gethex+0x1f4>
 8015ab8:	1eb9      	subs	r1, r7, #2
 8015aba:	4620      	mov	r0, r4
 8015abc:	f000 ff3a 	bl	8016934 <__any_on>
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	d145      	bne.n	8015b50 <__gethex+0x280>
 8015ac4:	f04f 0a02 	mov.w	sl, #2
 8015ac8:	4639      	mov	r1, r7
 8015aca:	4620      	mov	r0, r4
 8015acc:	f7ff fe99 	bl	8015802 <rshift>
 8015ad0:	443d      	add	r5, r7
 8015ad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ad6:	42ab      	cmp	r3, r5
 8015ad8:	da4c      	bge.n	8015b74 <__gethex+0x2a4>
 8015ada:	ee18 0a10 	vmov	r0, s16
 8015ade:	4621      	mov	r1, r4
 8015ae0:	f000 fac8 	bl	8016074 <_Bfree>
 8015ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	6013      	str	r3, [r2, #0]
 8015aea:	27a3      	movs	r7, #163	; 0xa3
 8015aec:	e785      	b.n	80159fa <__gethex+0x12a>
 8015aee:	1e73      	subs	r3, r6, #1
 8015af0:	9a05      	ldr	r2, [sp, #20]
 8015af2:	9303      	str	r3, [sp, #12]
 8015af4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015af8:	4293      	cmp	r3, r2
 8015afa:	d019      	beq.n	8015b30 <__gethex+0x260>
 8015afc:	f1bb 0f20 	cmp.w	fp, #32
 8015b00:	d107      	bne.n	8015b12 <__gethex+0x242>
 8015b02:	9b02      	ldr	r3, [sp, #8]
 8015b04:	9a00      	ldr	r2, [sp, #0]
 8015b06:	f843 2b04 	str.w	r2, [r3], #4
 8015b0a:	9302      	str	r3, [sp, #8]
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	9300      	str	r3, [sp, #0]
 8015b10:	469b      	mov	fp, r3
 8015b12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015b16:	f7ff fec6 	bl	80158a6 <__hexdig_fun>
 8015b1a:	9b00      	ldr	r3, [sp, #0]
 8015b1c:	f000 000f 	and.w	r0, r0, #15
 8015b20:	fa00 f00b 	lsl.w	r0, r0, fp
 8015b24:	4303      	orrs	r3, r0
 8015b26:	9300      	str	r3, [sp, #0]
 8015b28:	f10b 0b04 	add.w	fp, fp, #4
 8015b2c:	9b03      	ldr	r3, [sp, #12]
 8015b2e:	e00d      	b.n	8015b4c <__gethex+0x27c>
 8015b30:	9b03      	ldr	r3, [sp, #12]
 8015b32:	9a06      	ldr	r2, [sp, #24]
 8015b34:	4413      	add	r3, r2
 8015b36:	42bb      	cmp	r3, r7
 8015b38:	d3e0      	bcc.n	8015afc <__gethex+0x22c>
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	9901      	ldr	r1, [sp, #4]
 8015b3e:	9307      	str	r3, [sp, #28]
 8015b40:	4652      	mov	r2, sl
 8015b42:	f001 f8da 	bl	8016cfa <strncmp>
 8015b46:	9b07      	ldr	r3, [sp, #28]
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d1d7      	bne.n	8015afc <__gethex+0x22c>
 8015b4c:	461e      	mov	r6, r3
 8015b4e:	e78b      	b.n	8015a68 <__gethex+0x198>
 8015b50:	f04f 0a03 	mov.w	sl, #3
 8015b54:	e7b8      	b.n	8015ac8 <__gethex+0x1f8>
 8015b56:	da0a      	bge.n	8015b6e <__gethex+0x29e>
 8015b58:	1a37      	subs	r7, r6, r0
 8015b5a:	4621      	mov	r1, r4
 8015b5c:	ee18 0a10 	vmov	r0, s16
 8015b60:	463a      	mov	r2, r7
 8015b62:	f000 fca3 	bl	80164ac <__lshift>
 8015b66:	1bed      	subs	r5, r5, r7
 8015b68:	4604      	mov	r4, r0
 8015b6a:	f100 0914 	add.w	r9, r0, #20
 8015b6e:	f04f 0a00 	mov.w	sl, #0
 8015b72:	e7ae      	b.n	8015ad2 <__gethex+0x202>
 8015b74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015b78:	42a8      	cmp	r0, r5
 8015b7a:	dd72      	ble.n	8015c62 <__gethex+0x392>
 8015b7c:	1b45      	subs	r5, r0, r5
 8015b7e:	42ae      	cmp	r6, r5
 8015b80:	dc36      	bgt.n	8015bf0 <__gethex+0x320>
 8015b82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b86:	2b02      	cmp	r3, #2
 8015b88:	d02a      	beq.n	8015be0 <__gethex+0x310>
 8015b8a:	2b03      	cmp	r3, #3
 8015b8c:	d02c      	beq.n	8015be8 <__gethex+0x318>
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d11c      	bne.n	8015bcc <__gethex+0x2fc>
 8015b92:	42ae      	cmp	r6, r5
 8015b94:	d11a      	bne.n	8015bcc <__gethex+0x2fc>
 8015b96:	2e01      	cmp	r6, #1
 8015b98:	d112      	bne.n	8015bc0 <__gethex+0x2f0>
 8015b9a:	9a04      	ldr	r2, [sp, #16]
 8015b9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ba0:	6013      	str	r3, [r2, #0]
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	6123      	str	r3, [r4, #16]
 8015ba6:	f8c9 3000 	str.w	r3, [r9]
 8015baa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bac:	2762      	movs	r7, #98	; 0x62
 8015bae:	601c      	str	r4, [r3, #0]
 8015bb0:	e723      	b.n	80159fa <__gethex+0x12a>
 8015bb2:	bf00      	nop
 8015bb4:	08025894 	.word	0x08025894
 8015bb8:	080257b8 	.word	0x080257b8
 8015bbc:	0802582c 	.word	0x0802582c
 8015bc0:	1e71      	subs	r1, r6, #1
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f000 feb6 	bl	8016934 <__any_on>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d1e6      	bne.n	8015b9a <__gethex+0x2ca>
 8015bcc:	ee18 0a10 	vmov	r0, s16
 8015bd0:	4621      	mov	r1, r4
 8015bd2:	f000 fa4f 	bl	8016074 <_Bfree>
 8015bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015bd8:	2300      	movs	r3, #0
 8015bda:	6013      	str	r3, [r2, #0]
 8015bdc:	2750      	movs	r7, #80	; 0x50
 8015bde:	e70c      	b.n	80159fa <__gethex+0x12a>
 8015be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d1f2      	bne.n	8015bcc <__gethex+0x2fc>
 8015be6:	e7d8      	b.n	8015b9a <__gethex+0x2ca>
 8015be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d1d5      	bne.n	8015b9a <__gethex+0x2ca>
 8015bee:	e7ed      	b.n	8015bcc <__gethex+0x2fc>
 8015bf0:	1e6f      	subs	r7, r5, #1
 8015bf2:	f1ba 0f00 	cmp.w	sl, #0
 8015bf6:	d131      	bne.n	8015c5c <__gethex+0x38c>
 8015bf8:	b127      	cbz	r7, 8015c04 <__gethex+0x334>
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	f000 fe99 	bl	8016934 <__any_on>
 8015c02:	4682      	mov	sl, r0
 8015c04:	117b      	asrs	r3, r7, #5
 8015c06:	2101      	movs	r1, #1
 8015c08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015c0c:	f007 071f 	and.w	r7, r7, #31
 8015c10:	fa01 f707 	lsl.w	r7, r1, r7
 8015c14:	421f      	tst	r7, r3
 8015c16:	4629      	mov	r1, r5
 8015c18:	4620      	mov	r0, r4
 8015c1a:	bf18      	it	ne
 8015c1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015c20:	1b76      	subs	r6, r6, r5
 8015c22:	f7ff fdee 	bl	8015802 <rshift>
 8015c26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c2a:	2702      	movs	r7, #2
 8015c2c:	f1ba 0f00 	cmp.w	sl, #0
 8015c30:	d048      	beq.n	8015cc4 <__gethex+0x3f4>
 8015c32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c36:	2b02      	cmp	r3, #2
 8015c38:	d015      	beq.n	8015c66 <__gethex+0x396>
 8015c3a:	2b03      	cmp	r3, #3
 8015c3c:	d017      	beq.n	8015c6e <__gethex+0x39e>
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d109      	bne.n	8015c56 <__gethex+0x386>
 8015c42:	f01a 0f02 	tst.w	sl, #2
 8015c46:	d006      	beq.n	8015c56 <__gethex+0x386>
 8015c48:	f8d9 0000 	ldr.w	r0, [r9]
 8015c4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015c50:	f01a 0f01 	tst.w	sl, #1
 8015c54:	d10e      	bne.n	8015c74 <__gethex+0x3a4>
 8015c56:	f047 0710 	orr.w	r7, r7, #16
 8015c5a:	e033      	b.n	8015cc4 <__gethex+0x3f4>
 8015c5c:	f04f 0a01 	mov.w	sl, #1
 8015c60:	e7d0      	b.n	8015c04 <__gethex+0x334>
 8015c62:	2701      	movs	r7, #1
 8015c64:	e7e2      	b.n	8015c2c <__gethex+0x35c>
 8015c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c68:	f1c3 0301 	rsb	r3, r3, #1
 8015c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8015c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d0f0      	beq.n	8015c56 <__gethex+0x386>
 8015c74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015c78:	f104 0314 	add.w	r3, r4, #20
 8015c7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015c80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015c84:	f04f 0c00 	mov.w	ip, #0
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015c92:	d01c      	beq.n	8015cce <__gethex+0x3fe>
 8015c94:	3201      	adds	r2, #1
 8015c96:	6002      	str	r2, [r0, #0]
 8015c98:	2f02      	cmp	r7, #2
 8015c9a:	f104 0314 	add.w	r3, r4, #20
 8015c9e:	d13f      	bne.n	8015d20 <__gethex+0x450>
 8015ca0:	f8d8 2000 	ldr.w	r2, [r8]
 8015ca4:	3a01      	subs	r2, #1
 8015ca6:	42b2      	cmp	r2, r6
 8015ca8:	d10a      	bne.n	8015cc0 <__gethex+0x3f0>
 8015caa:	1171      	asrs	r1, r6, #5
 8015cac:	2201      	movs	r2, #1
 8015cae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015cb2:	f006 061f 	and.w	r6, r6, #31
 8015cb6:	fa02 f606 	lsl.w	r6, r2, r6
 8015cba:	421e      	tst	r6, r3
 8015cbc:	bf18      	it	ne
 8015cbe:	4617      	movne	r7, r2
 8015cc0:	f047 0720 	orr.w	r7, r7, #32
 8015cc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cc6:	601c      	str	r4, [r3, #0]
 8015cc8:	9b04      	ldr	r3, [sp, #16]
 8015cca:	601d      	str	r5, [r3, #0]
 8015ccc:	e695      	b.n	80159fa <__gethex+0x12a>
 8015cce:	4299      	cmp	r1, r3
 8015cd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8015cd4:	d8d8      	bhi.n	8015c88 <__gethex+0x3b8>
 8015cd6:	68a3      	ldr	r3, [r4, #8]
 8015cd8:	459b      	cmp	fp, r3
 8015cda:	db19      	blt.n	8015d10 <__gethex+0x440>
 8015cdc:	6861      	ldr	r1, [r4, #4]
 8015cde:	ee18 0a10 	vmov	r0, s16
 8015ce2:	3101      	adds	r1, #1
 8015ce4:	f000 f986 	bl	8015ff4 <_Balloc>
 8015ce8:	4681      	mov	r9, r0
 8015cea:	b918      	cbnz	r0, 8015cf4 <__gethex+0x424>
 8015cec:	4b1a      	ldr	r3, [pc, #104]	; (8015d58 <__gethex+0x488>)
 8015cee:	4602      	mov	r2, r0
 8015cf0:	2184      	movs	r1, #132	; 0x84
 8015cf2:	e6a8      	b.n	8015a46 <__gethex+0x176>
 8015cf4:	6922      	ldr	r2, [r4, #16]
 8015cf6:	3202      	adds	r2, #2
 8015cf8:	f104 010c 	add.w	r1, r4, #12
 8015cfc:	0092      	lsls	r2, r2, #2
 8015cfe:	300c      	adds	r0, #12
 8015d00:	f7fc ffb4 	bl	8012c6c <memcpy>
 8015d04:	4621      	mov	r1, r4
 8015d06:	ee18 0a10 	vmov	r0, s16
 8015d0a:	f000 f9b3 	bl	8016074 <_Bfree>
 8015d0e:	464c      	mov	r4, r9
 8015d10:	6923      	ldr	r3, [r4, #16]
 8015d12:	1c5a      	adds	r2, r3, #1
 8015d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d18:	6122      	str	r2, [r4, #16]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	615a      	str	r2, [r3, #20]
 8015d1e:	e7bb      	b.n	8015c98 <__gethex+0x3c8>
 8015d20:	6922      	ldr	r2, [r4, #16]
 8015d22:	455a      	cmp	r2, fp
 8015d24:	dd0b      	ble.n	8015d3e <__gethex+0x46e>
 8015d26:	2101      	movs	r1, #1
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f7ff fd6a 	bl	8015802 <rshift>
 8015d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d32:	3501      	adds	r5, #1
 8015d34:	42ab      	cmp	r3, r5
 8015d36:	f6ff aed0 	blt.w	8015ada <__gethex+0x20a>
 8015d3a:	2701      	movs	r7, #1
 8015d3c:	e7c0      	b.n	8015cc0 <__gethex+0x3f0>
 8015d3e:	f016 061f 	ands.w	r6, r6, #31
 8015d42:	d0fa      	beq.n	8015d3a <__gethex+0x46a>
 8015d44:	4453      	add	r3, sl
 8015d46:	f1c6 0620 	rsb	r6, r6, #32
 8015d4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015d4e:	f000 fa43 	bl	80161d8 <__hi0bits>
 8015d52:	42b0      	cmp	r0, r6
 8015d54:	dbe7      	blt.n	8015d26 <__gethex+0x456>
 8015d56:	e7f0      	b.n	8015d3a <__gethex+0x46a>
 8015d58:	080257b8 	.word	0x080257b8

08015d5c <L_shift>:
 8015d5c:	f1c2 0208 	rsb	r2, r2, #8
 8015d60:	0092      	lsls	r2, r2, #2
 8015d62:	b570      	push	{r4, r5, r6, lr}
 8015d64:	f1c2 0620 	rsb	r6, r2, #32
 8015d68:	6843      	ldr	r3, [r0, #4]
 8015d6a:	6804      	ldr	r4, [r0, #0]
 8015d6c:	fa03 f506 	lsl.w	r5, r3, r6
 8015d70:	432c      	orrs	r4, r5
 8015d72:	40d3      	lsrs	r3, r2
 8015d74:	6004      	str	r4, [r0, #0]
 8015d76:	f840 3f04 	str.w	r3, [r0, #4]!
 8015d7a:	4288      	cmp	r0, r1
 8015d7c:	d3f4      	bcc.n	8015d68 <L_shift+0xc>
 8015d7e:	bd70      	pop	{r4, r5, r6, pc}

08015d80 <__match>:
 8015d80:	b530      	push	{r4, r5, lr}
 8015d82:	6803      	ldr	r3, [r0, #0]
 8015d84:	3301      	adds	r3, #1
 8015d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d8a:	b914      	cbnz	r4, 8015d92 <__match+0x12>
 8015d8c:	6003      	str	r3, [r0, #0]
 8015d8e:	2001      	movs	r0, #1
 8015d90:	bd30      	pop	{r4, r5, pc}
 8015d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d9a:	2d19      	cmp	r5, #25
 8015d9c:	bf98      	it	ls
 8015d9e:	3220      	addls	r2, #32
 8015da0:	42a2      	cmp	r2, r4
 8015da2:	d0f0      	beq.n	8015d86 <__match+0x6>
 8015da4:	2000      	movs	r0, #0
 8015da6:	e7f3      	b.n	8015d90 <__match+0x10>

08015da8 <__hexnan>:
 8015da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dac:	680b      	ldr	r3, [r1, #0]
 8015dae:	115e      	asrs	r6, r3, #5
 8015db0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015db4:	f013 031f 	ands.w	r3, r3, #31
 8015db8:	b087      	sub	sp, #28
 8015dba:	bf18      	it	ne
 8015dbc:	3604      	addne	r6, #4
 8015dbe:	2500      	movs	r5, #0
 8015dc0:	1f37      	subs	r7, r6, #4
 8015dc2:	4690      	mov	r8, r2
 8015dc4:	6802      	ldr	r2, [r0, #0]
 8015dc6:	9301      	str	r3, [sp, #4]
 8015dc8:	4682      	mov	sl, r0
 8015dca:	f846 5c04 	str.w	r5, [r6, #-4]
 8015dce:	46b9      	mov	r9, r7
 8015dd0:	463c      	mov	r4, r7
 8015dd2:	9502      	str	r5, [sp, #8]
 8015dd4:	46ab      	mov	fp, r5
 8015dd6:	7851      	ldrb	r1, [r2, #1]
 8015dd8:	1c53      	adds	r3, r2, #1
 8015dda:	9303      	str	r3, [sp, #12]
 8015ddc:	b341      	cbz	r1, 8015e30 <__hexnan+0x88>
 8015dde:	4608      	mov	r0, r1
 8015de0:	9205      	str	r2, [sp, #20]
 8015de2:	9104      	str	r1, [sp, #16]
 8015de4:	f7ff fd5f 	bl	80158a6 <__hexdig_fun>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d14f      	bne.n	8015e8c <__hexnan+0xe4>
 8015dec:	9904      	ldr	r1, [sp, #16]
 8015dee:	9a05      	ldr	r2, [sp, #20]
 8015df0:	2920      	cmp	r1, #32
 8015df2:	d818      	bhi.n	8015e26 <__hexnan+0x7e>
 8015df4:	9b02      	ldr	r3, [sp, #8]
 8015df6:	459b      	cmp	fp, r3
 8015df8:	dd13      	ble.n	8015e22 <__hexnan+0x7a>
 8015dfa:	454c      	cmp	r4, r9
 8015dfc:	d206      	bcs.n	8015e0c <__hexnan+0x64>
 8015dfe:	2d07      	cmp	r5, #7
 8015e00:	dc04      	bgt.n	8015e0c <__hexnan+0x64>
 8015e02:	462a      	mov	r2, r5
 8015e04:	4649      	mov	r1, r9
 8015e06:	4620      	mov	r0, r4
 8015e08:	f7ff ffa8 	bl	8015d5c <L_shift>
 8015e0c:	4544      	cmp	r4, r8
 8015e0e:	d950      	bls.n	8015eb2 <__hexnan+0x10a>
 8015e10:	2300      	movs	r3, #0
 8015e12:	f1a4 0904 	sub.w	r9, r4, #4
 8015e16:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e1a:	f8cd b008 	str.w	fp, [sp, #8]
 8015e1e:	464c      	mov	r4, r9
 8015e20:	461d      	mov	r5, r3
 8015e22:	9a03      	ldr	r2, [sp, #12]
 8015e24:	e7d7      	b.n	8015dd6 <__hexnan+0x2e>
 8015e26:	2929      	cmp	r1, #41	; 0x29
 8015e28:	d156      	bne.n	8015ed8 <__hexnan+0x130>
 8015e2a:	3202      	adds	r2, #2
 8015e2c:	f8ca 2000 	str.w	r2, [sl]
 8015e30:	f1bb 0f00 	cmp.w	fp, #0
 8015e34:	d050      	beq.n	8015ed8 <__hexnan+0x130>
 8015e36:	454c      	cmp	r4, r9
 8015e38:	d206      	bcs.n	8015e48 <__hexnan+0xa0>
 8015e3a:	2d07      	cmp	r5, #7
 8015e3c:	dc04      	bgt.n	8015e48 <__hexnan+0xa0>
 8015e3e:	462a      	mov	r2, r5
 8015e40:	4649      	mov	r1, r9
 8015e42:	4620      	mov	r0, r4
 8015e44:	f7ff ff8a 	bl	8015d5c <L_shift>
 8015e48:	4544      	cmp	r4, r8
 8015e4a:	d934      	bls.n	8015eb6 <__hexnan+0x10e>
 8015e4c:	f1a8 0204 	sub.w	r2, r8, #4
 8015e50:	4623      	mov	r3, r4
 8015e52:	f853 1b04 	ldr.w	r1, [r3], #4
 8015e56:	f842 1f04 	str.w	r1, [r2, #4]!
 8015e5a:	429f      	cmp	r7, r3
 8015e5c:	d2f9      	bcs.n	8015e52 <__hexnan+0xaa>
 8015e5e:	1b3b      	subs	r3, r7, r4
 8015e60:	f023 0303 	bic.w	r3, r3, #3
 8015e64:	3304      	adds	r3, #4
 8015e66:	3401      	adds	r4, #1
 8015e68:	3e03      	subs	r6, #3
 8015e6a:	42b4      	cmp	r4, r6
 8015e6c:	bf88      	it	hi
 8015e6e:	2304      	movhi	r3, #4
 8015e70:	4443      	add	r3, r8
 8015e72:	2200      	movs	r2, #0
 8015e74:	f843 2b04 	str.w	r2, [r3], #4
 8015e78:	429f      	cmp	r7, r3
 8015e7a:	d2fb      	bcs.n	8015e74 <__hexnan+0xcc>
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	b91b      	cbnz	r3, 8015e88 <__hexnan+0xe0>
 8015e80:	4547      	cmp	r7, r8
 8015e82:	d127      	bne.n	8015ed4 <__hexnan+0x12c>
 8015e84:	2301      	movs	r3, #1
 8015e86:	603b      	str	r3, [r7, #0]
 8015e88:	2005      	movs	r0, #5
 8015e8a:	e026      	b.n	8015eda <__hexnan+0x132>
 8015e8c:	3501      	adds	r5, #1
 8015e8e:	2d08      	cmp	r5, #8
 8015e90:	f10b 0b01 	add.w	fp, fp, #1
 8015e94:	dd06      	ble.n	8015ea4 <__hexnan+0xfc>
 8015e96:	4544      	cmp	r4, r8
 8015e98:	d9c3      	bls.n	8015e22 <__hexnan+0x7a>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ea0:	2501      	movs	r5, #1
 8015ea2:	3c04      	subs	r4, #4
 8015ea4:	6822      	ldr	r2, [r4, #0]
 8015ea6:	f000 000f 	and.w	r0, r0, #15
 8015eaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015eae:	6022      	str	r2, [r4, #0]
 8015eb0:	e7b7      	b.n	8015e22 <__hexnan+0x7a>
 8015eb2:	2508      	movs	r5, #8
 8015eb4:	e7b5      	b.n	8015e22 <__hexnan+0x7a>
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d0df      	beq.n	8015e7c <__hexnan+0xd4>
 8015ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8015ec0:	f1c3 0320 	rsb	r3, r3, #32
 8015ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8015ec8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015ecc:	401a      	ands	r2, r3
 8015ece:	f846 2c04 	str.w	r2, [r6, #-4]
 8015ed2:	e7d3      	b.n	8015e7c <__hexnan+0xd4>
 8015ed4:	3f04      	subs	r7, #4
 8015ed6:	e7d1      	b.n	8015e7c <__hexnan+0xd4>
 8015ed8:	2004      	movs	r0, #4
 8015eda:	b007      	add	sp, #28
 8015edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ee0 <_localeconv_r>:
 8015ee0:	4800      	ldr	r0, [pc, #0]	; (8015ee4 <_localeconv_r+0x4>)
 8015ee2:	4770      	bx	lr
 8015ee4:	20000220 	.word	0x20000220

08015ee8 <__retarget_lock_init_recursive>:
 8015ee8:	4770      	bx	lr

08015eea <__retarget_lock_acquire_recursive>:
 8015eea:	4770      	bx	lr

08015eec <__retarget_lock_release_recursive>:
 8015eec:	4770      	bx	lr

08015eee <__swhatbuf_r>:
 8015eee:	b570      	push	{r4, r5, r6, lr}
 8015ef0:	460e      	mov	r6, r1
 8015ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ef6:	2900      	cmp	r1, #0
 8015ef8:	b096      	sub	sp, #88	; 0x58
 8015efa:	4614      	mov	r4, r2
 8015efc:	461d      	mov	r5, r3
 8015efe:	da08      	bge.n	8015f12 <__swhatbuf_r+0x24>
 8015f00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015f04:	2200      	movs	r2, #0
 8015f06:	602a      	str	r2, [r5, #0]
 8015f08:	061a      	lsls	r2, r3, #24
 8015f0a:	d410      	bmi.n	8015f2e <__swhatbuf_r+0x40>
 8015f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f10:	e00e      	b.n	8015f30 <__swhatbuf_r+0x42>
 8015f12:	466a      	mov	r2, sp
 8015f14:	f000 ff64 	bl	8016de0 <_fstat_r>
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	dbf1      	blt.n	8015f00 <__swhatbuf_r+0x12>
 8015f1c:	9a01      	ldr	r2, [sp, #4]
 8015f1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f26:	425a      	negs	r2, r3
 8015f28:	415a      	adcs	r2, r3
 8015f2a:	602a      	str	r2, [r5, #0]
 8015f2c:	e7ee      	b.n	8015f0c <__swhatbuf_r+0x1e>
 8015f2e:	2340      	movs	r3, #64	; 0x40
 8015f30:	2000      	movs	r0, #0
 8015f32:	6023      	str	r3, [r4, #0]
 8015f34:	b016      	add	sp, #88	; 0x58
 8015f36:	bd70      	pop	{r4, r5, r6, pc}

08015f38 <__smakebuf_r>:
 8015f38:	898b      	ldrh	r3, [r1, #12]
 8015f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f3c:	079d      	lsls	r5, r3, #30
 8015f3e:	4606      	mov	r6, r0
 8015f40:	460c      	mov	r4, r1
 8015f42:	d507      	bpl.n	8015f54 <__smakebuf_r+0x1c>
 8015f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f48:	6023      	str	r3, [r4, #0]
 8015f4a:	6123      	str	r3, [r4, #16]
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	6163      	str	r3, [r4, #20]
 8015f50:	b002      	add	sp, #8
 8015f52:	bd70      	pop	{r4, r5, r6, pc}
 8015f54:	ab01      	add	r3, sp, #4
 8015f56:	466a      	mov	r2, sp
 8015f58:	f7ff ffc9 	bl	8015eee <__swhatbuf_r>
 8015f5c:	9900      	ldr	r1, [sp, #0]
 8015f5e:	4605      	mov	r5, r0
 8015f60:	4630      	mov	r0, r6
 8015f62:	f7fc ff05 	bl	8012d70 <_malloc_r>
 8015f66:	b948      	cbnz	r0, 8015f7c <__smakebuf_r+0x44>
 8015f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f6c:	059a      	lsls	r2, r3, #22
 8015f6e:	d4ef      	bmi.n	8015f50 <__smakebuf_r+0x18>
 8015f70:	f023 0303 	bic.w	r3, r3, #3
 8015f74:	f043 0302 	orr.w	r3, r3, #2
 8015f78:	81a3      	strh	r3, [r4, #12]
 8015f7a:	e7e3      	b.n	8015f44 <__smakebuf_r+0xc>
 8015f7c:	4b0d      	ldr	r3, [pc, #52]	; (8015fb4 <__smakebuf_r+0x7c>)
 8015f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	6020      	str	r0, [r4, #0]
 8015f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f88:	81a3      	strh	r3, [r4, #12]
 8015f8a:	9b00      	ldr	r3, [sp, #0]
 8015f8c:	6163      	str	r3, [r4, #20]
 8015f8e:	9b01      	ldr	r3, [sp, #4]
 8015f90:	6120      	str	r0, [r4, #16]
 8015f92:	b15b      	cbz	r3, 8015fac <__smakebuf_r+0x74>
 8015f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f000 ff33 	bl	8016e04 <_isatty_r>
 8015f9e:	b128      	cbz	r0, 8015fac <__smakebuf_r+0x74>
 8015fa0:	89a3      	ldrh	r3, [r4, #12]
 8015fa2:	f023 0303 	bic.w	r3, r3, #3
 8015fa6:	f043 0301 	orr.w	r3, r3, #1
 8015faa:	81a3      	strh	r3, [r4, #12]
 8015fac:	89a0      	ldrh	r0, [r4, #12]
 8015fae:	4305      	orrs	r5, r0
 8015fb0:	81a5      	strh	r5, [r4, #12]
 8015fb2:	e7cd      	b.n	8015f50 <__smakebuf_r+0x18>
 8015fb4:	08015661 	.word	0x08015661

08015fb8 <__ascii_mbtowc>:
 8015fb8:	b082      	sub	sp, #8
 8015fba:	b901      	cbnz	r1, 8015fbe <__ascii_mbtowc+0x6>
 8015fbc:	a901      	add	r1, sp, #4
 8015fbe:	b142      	cbz	r2, 8015fd2 <__ascii_mbtowc+0x1a>
 8015fc0:	b14b      	cbz	r3, 8015fd6 <__ascii_mbtowc+0x1e>
 8015fc2:	7813      	ldrb	r3, [r2, #0]
 8015fc4:	600b      	str	r3, [r1, #0]
 8015fc6:	7812      	ldrb	r2, [r2, #0]
 8015fc8:	1e10      	subs	r0, r2, #0
 8015fca:	bf18      	it	ne
 8015fcc:	2001      	movne	r0, #1
 8015fce:	b002      	add	sp, #8
 8015fd0:	4770      	bx	lr
 8015fd2:	4610      	mov	r0, r2
 8015fd4:	e7fb      	b.n	8015fce <__ascii_mbtowc+0x16>
 8015fd6:	f06f 0001 	mvn.w	r0, #1
 8015fda:	e7f8      	b.n	8015fce <__ascii_mbtowc+0x16>

08015fdc <__malloc_lock>:
 8015fdc:	4801      	ldr	r0, [pc, #4]	; (8015fe4 <__malloc_lock+0x8>)
 8015fde:	f7ff bf84 	b.w	8015eea <__retarget_lock_acquire_recursive>
 8015fe2:	bf00      	nop
 8015fe4:	2000d0ac 	.word	0x2000d0ac

08015fe8 <__malloc_unlock>:
 8015fe8:	4801      	ldr	r0, [pc, #4]	; (8015ff0 <__malloc_unlock+0x8>)
 8015fea:	f7ff bf7f 	b.w	8015eec <__retarget_lock_release_recursive>
 8015fee:	bf00      	nop
 8015ff0:	2000d0ac 	.word	0x2000d0ac

08015ff4 <_Balloc>:
 8015ff4:	b570      	push	{r4, r5, r6, lr}
 8015ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	460d      	mov	r5, r1
 8015ffc:	b976      	cbnz	r6, 801601c <_Balloc+0x28>
 8015ffe:	2010      	movs	r0, #16
 8016000:	f7fc fe24 	bl	8012c4c <malloc>
 8016004:	4602      	mov	r2, r0
 8016006:	6260      	str	r0, [r4, #36]	; 0x24
 8016008:	b920      	cbnz	r0, 8016014 <_Balloc+0x20>
 801600a:	4b18      	ldr	r3, [pc, #96]	; (801606c <_Balloc+0x78>)
 801600c:	4818      	ldr	r0, [pc, #96]	; (8016070 <_Balloc+0x7c>)
 801600e:	2166      	movs	r1, #102	; 0x66
 8016010:	f000 fea6 	bl	8016d60 <__assert_func>
 8016014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016018:	6006      	str	r6, [r0, #0]
 801601a:	60c6      	str	r6, [r0, #12]
 801601c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801601e:	68f3      	ldr	r3, [r6, #12]
 8016020:	b183      	cbz	r3, 8016044 <_Balloc+0x50>
 8016022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016024:	68db      	ldr	r3, [r3, #12]
 8016026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801602a:	b9b8      	cbnz	r0, 801605c <_Balloc+0x68>
 801602c:	2101      	movs	r1, #1
 801602e:	fa01 f605 	lsl.w	r6, r1, r5
 8016032:	1d72      	adds	r2, r6, #5
 8016034:	0092      	lsls	r2, r2, #2
 8016036:	4620      	mov	r0, r4
 8016038:	f000 fc9d 	bl	8016976 <_calloc_r>
 801603c:	b160      	cbz	r0, 8016058 <_Balloc+0x64>
 801603e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016042:	e00e      	b.n	8016062 <_Balloc+0x6e>
 8016044:	2221      	movs	r2, #33	; 0x21
 8016046:	2104      	movs	r1, #4
 8016048:	4620      	mov	r0, r4
 801604a:	f000 fc94 	bl	8016976 <_calloc_r>
 801604e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016050:	60f0      	str	r0, [r6, #12]
 8016052:	68db      	ldr	r3, [r3, #12]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d1e4      	bne.n	8016022 <_Balloc+0x2e>
 8016058:	2000      	movs	r0, #0
 801605a:	bd70      	pop	{r4, r5, r6, pc}
 801605c:	6802      	ldr	r2, [r0, #0]
 801605e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016062:	2300      	movs	r3, #0
 8016064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016068:	e7f7      	b.n	801605a <_Balloc+0x66>
 801606a:	bf00      	nop
 801606c:	08025746 	.word	0x08025746
 8016070:	080258a8 	.word	0x080258a8

08016074 <_Bfree>:
 8016074:	b570      	push	{r4, r5, r6, lr}
 8016076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016078:	4605      	mov	r5, r0
 801607a:	460c      	mov	r4, r1
 801607c:	b976      	cbnz	r6, 801609c <_Bfree+0x28>
 801607e:	2010      	movs	r0, #16
 8016080:	f7fc fde4 	bl	8012c4c <malloc>
 8016084:	4602      	mov	r2, r0
 8016086:	6268      	str	r0, [r5, #36]	; 0x24
 8016088:	b920      	cbnz	r0, 8016094 <_Bfree+0x20>
 801608a:	4b09      	ldr	r3, [pc, #36]	; (80160b0 <_Bfree+0x3c>)
 801608c:	4809      	ldr	r0, [pc, #36]	; (80160b4 <_Bfree+0x40>)
 801608e:	218a      	movs	r1, #138	; 0x8a
 8016090:	f000 fe66 	bl	8016d60 <__assert_func>
 8016094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016098:	6006      	str	r6, [r0, #0]
 801609a:	60c6      	str	r6, [r0, #12]
 801609c:	b13c      	cbz	r4, 80160ae <_Bfree+0x3a>
 801609e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80160a0:	6862      	ldr	r2, [r4, #4]
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80160a8:	6021      	str	r1, [r4, #0]
 80160aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80160ae:	bd70      	pop	{r4, r5, r6, pc}
 80160b0:	08025746 	.word	0x08025746
 80160b4:	080258a8 	.word	0x080258a8

080160b8 <__multadd>:
 80160b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160bc:	690d      	ldr	r5, [r1, #16]
 80160be:	4607      	mov	r7, r0
 80160c0:	460c      	mov	r4, r1
 80160c2:	461e      	mov	r6, r3
 80160c4:	f101 0c14 	add.w	ip, r1, #20
 80160c8:	2000      	movs	r0, #0
 80160ca:	f8dc 3000 	ldr.w	r3, [ip]
 80160ce:	b299      	uxth	r1, r3
 80160d0:	fb02 6101 	mla	r1, r2, r1, r6
 80160d4:	0c1e      	lsrs	r6, r3, #16
 80160d6:	0c0b      	lsrs	r3, r1, #16
 80160d8:	fb02 3306 	mla	r3, r2, r6, r3
 80160dc:	b289      	uxth	r1, r1
 80160de:	3001      	adds	r0, #1
 80160e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80160e4:	4285      	cmp	r5, r0
 80160e6:	f84c 1b04 	str.w	r1, [ip], #4
 80160ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80160ee:	dcec      	bgt.n	80160ca <__multadd+0x12>
 80160f0:	b30e      	cbz	r6, 8016136 <__multadd+0x7e>
 80160f2:	68a3      	ldr	r3, [r4, #8]
 80160f4:	42ab      	cmp	r3, r5
 80160f6:	dc19      	bgt.n	801612c <__multadd+0x74>
 80160f8:	6861      	ldr	r1, [r4, #4]
 80160fa:	4638      	mov	r0, r7
 80160fc:	3101      	adds	r1, #1
 80160fe:	f7ff ff79 	bl	8015ff4 <_Balloc>
 8016102:	4680      	mov	r8, r0
 8016104:	b928      	cbnz	r0, 8016112 <__multadd+0x5a>
 8016106:	4602      	mov	r2, r0
 8016108:	4b0c      	ldr	r3, [pc, #48]	; (801613c <__multadd+0x84>)
 801610a:	480d      	ldr	r0, [pc, #52]	; (8016140 <__multadd+0x88>)
 801610c:	21b5      	movs	r1, #181	; 0xb5
 801610e:	f000 fe27 	bl	8016d60 <__assert_func>
 8016112:	6922      	ldr	r2, [r4, #16]
 8016114:	3202      	adds	r2, #2
 8016116:	f104 010c 	add.w	r1, r4, #12
 801611a:	0092      	lsls	r2, r2, #2
 801611c:	300c      	adds	r0, #12
 801611e:	f7fc fda5 	bl	8012c6c <memcpy>
 8016122:	4621      	mov	r1, r4
 8016124:	4638      	mov	r0, r7
 8016126:	f7ff ffa5 	bl	8016074 <_Bfree>
 801612a:	4644      	mov	r4, r8
 801612c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016130:	3501      	adds	r5, #1
 8016132:	615e      	str	r6, [r3, #20]
 8016134:	6125      	str	r5, [r4, #16]
 8016136:	4620      	mov	r0, r4
 8016138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801613c:	080257b8 	.word	0x080257b8
 8016140:	080258a8 	.word	0x080258a8

08016144 <__s2b>:
 8016144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016148:	460c      	mov	r4, r1
 801614a:	4615      	mov	r5, r2
 801614c:	461f      	mov	r7, r3
 801614e:	2209      	movs	r2, #9
 8016150:	3308      	adds	r3, #8
 8016152:	4606      	mov	r6, r0
 8016154:	fb93 f3f2 	sdiv	r3, r3, r2
 8016158:	2100      	movs	r1, #0
 801615a:	2201      	movs	r2, #1
 801615c:	429a      	cmp	r2, r3
 801615e:	db09      	blt.n	8016174 <__s2b+0x30>
 8016160:	4630      	mov	r0, r6
 8016162:	f7ff ff47 	bl	8015ff4 <_Balloc>
 8016166:	b940      	cbnz	r0, 801617a <__s2b+0x36>
 8016168:	4602      	mov	r2, r0
 801616a:	4b19      	ldr	r3, [pc, #100]	; (80161d0 <__s2b+0x8c>)
 801616c:	4819      	ldr	r0, [pc, #100]	; (80161d4 <__s2b+0x90>)
 801616e:	21ce      	movs	r1, #206	; 0xce
 8016170:	f000 fdf6 	bl	8016d60 <__assert_func>
 8016174:	0052      	lsls	r2, r2, #1
 8016176:	3101      	adds	r1, #1
 8016178:	e7f0      	b.n	801615c <__s2b+0x18>
 801617a:	9b08      	ldr	r3, [sp, #32]
 801617c:	6143      	str	r3, [r0, #20]
 801617e:	2d09      	cmp	r5, #9
 8016180:	f04f 0301 	mov.w	r3, #1
 8016184:	6103      	str	r3, [r0, #16]
 8016186:	dd16      	ble.n	80161b6 <__s2b+0x72>
 8016188:	f104 0909 	add.w	r9, r4, #9
 801618c:	46c8      	mov	r8, r9
 801618e:	442c      	add	r4, r5
 8016190:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016194:	4601      	mov	r1, r0
 8016196:	3b30      	subs	r3, #48	; 0x30
 8016198:	220a      	movs	r2, #10
 801619a:	4630      	mov	r0, r6
 801619c:	f7ff ff8c 	bl	80160b8 <__multadd>
 80161a0:	45a0      	cmp	r8, r4
 80161a2:	d1f5      	bne.n	8016190 <__s2b+0x4c>
 80161a4:	f1a5 0408 	sub.w	r4, r5, #8
 80161a8:	444c      	add	r4, r9
 80161aa:	1b2d      	subs	r5, r5, r4
 80161ac:	1963      	adds	r3, r4, r5
 80161ae:	42bb      	cmp	r3, r7
 80161b0:	db04      	blt.n	80161bc <__s2b+0x78>
 80161b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161b6:	340a      	adds	r4, #10
 80161b8:	2509      	movs	r5, #9
 80161ba:	e7f6      	b.n	80161aa <__s2b+0x66>
 80161bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80161c0:	4601      	mov	r1, r0
 80161c2:	3b30      	subs	r3, #48	; 0x30
 80161c4:	220a      	movs	r2, #10
 80161c6:	4630      	mov	r0, r6
 80161c8:	f7ff ff76 	bl	80160b8 <__multadd>
 80161cc:	e7ee      	b.n	80161ac <__s2b+0x68>
 80161ce:	bf00      	nop
 80161d0:	080257b8 	.word	0x080257b8
 80161d4:	080258a8 	.word	0x080258a8

080161d8 <__hi0bits>:
 80161d8:	0c03      	lsrs	r3, r0, #16
 80161da:	041b      	lsls	r3, r3, #16
 80161dc:	b9d3      	cbnz	r3, 8016214 <__hi0bits+0x3c>
 80161de:	0400      	lsls	r0, r0, #16
 80161e0:	2310      	movs	r3, #16
 80161e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80161e6:	bf04      	itt	eq
 80161e8:	0200      	lsleq	r0, r0, #8
 80161ea:	3308      	addeq	r3, #8
 80161ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80161f0:	bf04      	itt	eq
 80161f2:	0100      	lsleq	r0, r0, #4
 80161f4:	3304      	addeq	r3, #4
 80161f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80161fa:	bf04      	itt	eq
 80161fc:	0080      	lsleq	r0, r0, #2
 80161fe:	3302      	addeq	r3, #2
 8016200:	2800      	cmp	r0, #0
 8016202:	db05      	blt.n	8016210 <__hi0bits+0x38>
 8016204:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016208:	f103 0301 	add.w	r3, r3, #1
 801620c:	bf08      	it	eq
 801620e:	2320      	moveq	r3, #32
 8016210:	4618      	mov	r0, r3
 8016212:	4770      	bx	lr
 8016214:	2300      	movs	r3, #0
 8016216:	e7e4      	b.n	80161e2 <__hi0bits+0xa>

08016218 <__lo0bits>:
 8016218:	6803      	ldr	r3, [r0, #0]
 801621a:	f013 0207 	ands.w	r2, r3, #7
 801621e:	4601      	mov	r1, r0
 8016220:	d00b      	beq.n	801623a <__lo0bits+0x22>
 8016222:	07da      	lsls	r2, r3, #31
 8016224:	d423      	bmi.n	801626e <__lo0bits+0x56>
 8016226:	0798      	lsls	r0, r3, #30
 8016228:	bf49      	itett	mi
 801622a:	085b      	lsrmi	r3, r3, #1
 801622c:	089b      	lsrpl	r3, r3, #2
 801622e:	2001      	movmi	r0, #1
 8016230:	600b      	strmi	r3, [r1, #0]
 8016232:	bf5c      	itt	pl
 8016234:	600b      	strpl	r3, [r1, #0]
 8016236:	2002      	movpl	r0, #2
 8016238:	4770      	bx	lr
 801623a:	b298      	uxth	r0, r3
 801623c:	b9a8      	cbnz	r0, 801626a <__lo0bits+0x52>
 801623e:	0c1b      	lsrs	r3, r3, #16
 8016240:	2010      	movs	r0, #16
 8016242:	b2da      	uxtb	r2, r3
 8016244:	b90a      	cbnz	r2, 801624a <__lo0bits+0x32>
 8016246:	3008      	adds	r0, #8
 8016248:	0a1b      	lsrs	r3, r3, #8
 801624a:	071a      	lsls	r2, r3, #28
 801624c:	bf04      	itt	eq
 801624e:	091b      	lsreq	r3, r3, #4
 8016250:	3004      	addeq	r0, #4
 8016252:	079a      	lsls	r2, r3, #30
 8016254:	bf04      	itt	eq
 8016256:	089b      	lsreq	r3, r3, #2
 8016258:	3002      	addeq	r0, #2
 801625a:	07da      	lsls	r2, r3, #31
 801625c:	d403      	bmi.n	8016266 <__lo0bits+0x4e>
 801625e:	085b      	lsrs	r3, r3, #1
 8016260:	f100 0001 	add.w	r0, r0, #1
 8016264:	d005      	beq.n	8016272 <__lo0bits+0x5a>
 8016266:	600b      	str	r3, [r1, #0]
 8016268:	4770      	bx	lr
 801626a:	4610      	mov	r0, r2
 801626c:	e7e9      	b.n	8016242 <__lo0bits+0x2a>
 801626e:	2000      	movs	r0, #0
 8016270:	4770      	bx	lr
 8016272:	2020      	movs	r0, #32
 8016274:	4770      	bx	lr
	...

08016278 <__i2b>:
 8016278:	b510      	push	{r4, lr}
 801627a:	460c      	mov	r4, r1
 801627c:	2101      	movs	r1, #1
 801627e:	f7ff feb9 	bl	8015ff4 <_Balloc>
 8016282:	4602      	mov	r2, r0
 8016284:	b928      	cbnz	r0, 8016292 <__i2b+0x1a>
 8016286:	4b05      	ldr	r3, [pc, #20]	; (801629c <__i2b+0x24>)
 8016288:	4805      	ldr	r0, [pc, #20]	; (80162a0 <__i2b+0x28>)
 801628a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801628e:	f000 fd67 	bl	8016d60 <__assert_func>
 8016292:	2301      	movs	r3, #1
 8016294:	6144      	str	r4, [r0, #20]
 8016296:	6103      	str	r3, [r0, #16]
 8016298:	bd10      	pop	{r4, pc}
 801629a:	bf00      	nop
 801629c:	080257b8 	.word	0x080257b8
 80162a0:	080258a8 	.word	0x080258a8

080162a4 <__multiply>:
 80162a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a8:	4691      	mov	r9, r2
 80162aa:	690a      	ldr	r2, [r1, #16]
 80162ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	bfb8      	it	lt
 80162b4:	460b      	movlt	r3, r1
 80162b6:	460c      	mov	r4, r1
 80162b8:	bfbc      	itt	lt
 80162ba:	464c      	movlt	r4, r9
 80162bc:	4699      	movlt	r9, r3
 80162be:	6927      	ldr	r7, [r4, #16]
 80162c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80162c4:	68a3      	ldr	r3, [r4, #8]
 80162c6:	6861      	ldr	r1, [r4, #4]
 80162c8:	eb07 060a 	add.w	r6, r7, sl
 80162cc:	42b3      	cmp	r3, r6
 80162ce:	b085      	sub	sp, #20
 80162d0:	bfb8      	it	lt
 80162d2:	3101      	addlt	r1, #1
 80162d4:	f7ff fe8e 	bl	8015ff4 <_Balloc>
 80162d8:	b930      	cbnz	r0, 80162e8 <__multiply+0x44>
 80162da:	4602      	mov	r2, r0
 80162dc:	4b44      	ldr	r3, [pc, #272]	; (80163f0 <__multiply+0x14c>)
 80162de:	4845      	ldr	r0, [pc, #276]	; (80163f4 <__multiply+0x150>)
 80162e0:	f240 115d 	movw	r1, #349	; 0x15d
 80162e4:	f000 fd3c 	bl	8016d60 <__assert_func>
 80162e8:	f100 0514 	add.w	r5, r0, #20
 80162ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80162f0:	462b      	mov	r3, r5
 80162f2:	2200      	movs	r2, #0
 80162f4:	4543      	cmp	r3, r8
 80162f6:	d321      	bcc.n	801633c <__multiply+0x98>
 80162f8:	f104 0314 	add.w	r3, r4, #20
 80162fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016300:	f109 0314 	add.w	r3, r9, #20
 8016304:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016308:	9202      	str	r2, [sp, #8]
 801630a:	1b3a      	subs	r2, r7, r4
 801630c:	3a15      	subs	r2, #21
 801630e:	f022 0203 	bic.w	r2, r2, #3
 8016312:	3204      	adds	r2, #4
 8016314:	f104 0115 	add.w	r1, r4, #21
 8016318:	428f      	cmp	r7, r1
 801631a:	bf38      	it	cc
 801631c:	2204      	movcc	r2, #4
 801631e:	9201      	str	r2, [sp, #4]
 8016320:	9a02      	ldr	r2, [sp, #8]
 8016322:	9303      	str	r3, [sp, #12]
 8016324:	429a      	cmp	r2, r3
 8016326:	d80c      	bhi.n	8016342 <__multiply+0x9e>
 8016328:	2e00      	cmp	r6, #0
 801632a:	dd03      	ble.n	8016334 <__multiply+0x90>
 801632c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016330:	2b00      	cmp	r3, #0
 8016332:	d05a      	beq.n	80163ea <__multiply+0x146>
 8016334:	6106      	str	r6, [r0, #16]
 8016336:	b005      	add	sp, #20
 8016338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801633c:	f843 2b04 	str.w	r2, [r3], #4
 8016340:	e7d8      	b.n	80162f4 <__multiply+0x50>
 8016342:	f8b3 a000 	ldrh.w	sl, [r3]
 8016346:	f1ba 0f00 	cmp.w	sl, #0
 801634a:	d024      	beq.n	8016396 <__multiply+0xf2>
 801634c:	f104 0e14 	add.w	lr, r4, #20
 8016350:	46a9      	mov	r9, r5
 8016352:	f04f 0c00 	mov.w	ip, #0
 8016356:	f85e 2b04 	ldr.w	r2, [lr], #4
 801635a:	f8d9 1000 	ldr.w	r1, [r9]
 801635e:	fa1f fb82 	uxth.w	fp, r2
 8016362:	b289      	uxth	r1, r1
 8016364:	fb0a 110b 	mla	r1, sl, fp, r1
 8016368:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801636c:	f8d9 2000 	ldr.w	r2, [r9]
 8016370:	4461      	add	r1, ip
 8016372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016376:	fb0a c20b 	mla	r2, sl, fp, ip
 801637a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801637e:	b289      	uxth	r1, r1
 8016380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016384:	4577      	cmp	r7, lr
 8016386:	f849 1b04 	str.w	r1, [r9], #4
 801638a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801638e:	d8e2      	bhi.n	8016356 <__multiply+0xb2>
 8016390:	9a01      	ldr	r2, [sp, #4]
 8016392:	f845 c002 	str.w	ip, [r5, r2]
 8016396:	9a03      	ldr	r2, [sp, #12]
 8016398:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801639c:	3304      	adds	r3, #4
 801639e:	f1b9 0f00 	cmp.w	r9, #0
 80163a2:	d020      	beq.n	80163e6 <__multiply+0x142>
 80163a4:	6829      	ldr	r1, [r5, #0]
 80163a6:	f104 0c14 	add.w	ip, r4, #20
 80163aa:	46ae      	mov	lr, r5
 80163ac:	f04f 0a00 	mov.w	sl, #0
 80163b0:	f8bc b000 	ldrh.w	fp, [ip]
 80163b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80163b8:	fb09 220b 	mla	r2, r9, fp, r2
 80163bc:	4492      	add	sl, r2
 80163be:	b289      	uxth	r1, r1
 80163c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80163c4:	f84e 1b04 	str.w	r1, [lr], #4
 80163c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80163cc:	f8be 1000 	ldrh.w	r1, [lr]
 80163d0:	0c12      	lsrs	r2, r2, #16
 80163d2:	fb09 1102 	mla	r1, r9, r2, r1
 80163d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80163da:	4567      	cmp	r7, ip
 80163dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80163e0:	d8e6      	bhi.n	80163b0 <__multiply+0x10c>
 80163e2:	9a01      	ldr	r2, [sp, #4]
 80163e4:	50a9      	str	r1, [r5, r2]
 80163e6:	3504      	adds	r5, #4
 80163e8:	e79a      	b.n	8016320 <__multiply+0x7c>
 80163ea:	3e01      	subs	r6, #1
 80163ec:	e79c      	b.n	8016328 <__multiply+0x84>
 80163ee:	bf00      	nop
 80163f0:	080257b8 	.word	0x080257b8
 80163f4:	080258a8 	.word	0x080258a8

080163f8 <__pow5mult>:
 80163f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163fc:	4615      	mov	r5, r2
 80163fe:	f012 0203 	ands.w	r2, r2, #3
 8016402:	4606      	mov	r6, r0
 8016404:	460f      	mov	r7, r1
 8016406:	d007      	beq.n	8016418 <__pow5mult+0x20>
 8016408:	4c25      	ldr	r4, [pc, #148]	; (80164a0 <__pow5mult+0xa8>)
 801640a:	3a01      	subs	r2, #1
 801640c:	2300      	movs	r3, #0
 801640e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016412:	f7ff fe51 	bl	80160b8 <__multadd>
 8016416:	4607      	mov	r7, r0
 8016418:	10ad      	asrs	r5, r5, #2
 801641a:	d03d      	beq.n	8016498 <__pow5mult+0xa0>
 801641c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801641e:	b97c      	cbnz	r4, 8016440 <__pow5mult+0x48>
 8016420:	2010      	movs	r0, #16
 8016422:	f7fc fc13 	bl	8012c4c <malloc>
 8016426:	4602      	mov	r2, r0
 8016428:	6270      	str	r0, [r6, #36]	; 0x24
 801642a:	b928      	cbnz	r0, 8016438 <__pow5mult+0x40>
 801642c:	4b1d      	ldr	r3, [pc, #116]	; (80164a4 <__pow5mult+0xac>)
 801642e:	481e      	ldr	r0, [pc, #120]	; (80164a8 <__pow5mult+0xb0>)
 8016430:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016434:	f000 fc94 	bl	8016d60 <__assert_func>
 8016438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801643c:	6004      	str	r4, [r0, #0]
 801643e:	60c4      	str	r4, [r0, #12]
 8016440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016448:	b94c      	cbnz	r4, 801645e <__pow5mult+0x66>
 801644a:	f240 2171 	movw	r1, #625	; 0x271
 801644e:	4630      	mov	r0, r6
 8016450:	f7ff ff12 	bl	8016278 <__i2b>
 8016454:	2300      	movs	r3, #0
 8016456:	f8c8 0008 	str.w	r0, [r8, #8]
 801645a:	4604      	mov	r4, r0
 801645c:	6003      	str	r3, [r0, #0]
 801645e:	f04f 0900 	mov.w	r9, #0
 8016462:	07eb      	lsls	r3, r5, #31
 8016464:	d50a      	bpl.n	801647c <__pow5mult+0x84>
 8016466:	4639      	mov	r1, r7
 8016468:	4622      	mov	r2, r4
 801646a:	4630      	mov	r0, r6
 801646c:	f7ff ff1a 	bl	80162a4 <__multiply>
 8016470:	4639      	mov	r1, r7
 8016472:	4680      	mov	r8, r0
 8016474:	4630      	mov	r0, r6
 8016476:	f7ff fdfd 	bl	8016074 <_Bfree>
 801647a:	4647      	mov	r7, r8
 801647c:	106d      	asrs	r5, r5, #1
 801647e:	d00b      	beq.n	8016498 <__pow5mult+0xa0>
 8016480:	6820      	ldr	r0, [r4, #0]
 8016482:	b938      	cbnz	r0, 8016494 <__pow5mult+0x9c>
 8016484:	4622      	mov	r2, r4
 8016486:	4621      	mov	r1, r4
 8016488:	4630      	mov	r0, r6
 801648a:	f7ff ff0b 	bl	80162a4 <__multiply>
 801648e:	6020      	str	r0, [r4, #0]
 8016490:	f8c0 9000 	str.w	r9, [r0]
 8016494:	4604      	mov	r4, r0
 8016496:	e7e4      	b.n	8016462 <__pow5mult+0x6a>
 8016498:	4638      	mov	r0, r7
 801649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801649e:	bf00      	nop
 80164a0:	080259f8 	.word	0x080259f8
 80164a4:	08025746 	.word	0x08025746
 80164a8:	080258a8 	.word	0x080258a8

080164ac <__lshift>:
 80164ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b0:	460c      	mov	r4, r1
 80164b2:	6849      	ldr	r1, [r1, #4]
 80164b4:	6923      	ldr	r3, [r4, #16]
 80164b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80164ba:	68a3      	ldr	r3, [r4, #8]
 80164bc:	4607      	mov	r7, r0
 80164be:	4691      	mov	r9, r2
 80164c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80164c4:	f108 0601 	add.w	r6, r8, #1
 80164c8:	42b3      	cmp	r3, r6
 80164ca:	db0b      	blt.n	80164e4 <__lshift+0x38>
 80164cc:	4638      	mov	r0, r7
 80164ce:	f7ff fd91 	bl	8015ff4 <_Balloc>
 80164d2:	4605      	mov	r5, r0
 80164d4:	b948      	cbnz	r0, 80164ea <__lshift+0x3e>
 80164d6:	4602      	mov	r2, r0
 80164d8:	4b2a      	ldr	r3, [pc, #168]	; (8016584 <__lshift+0xd8>)
 80164da:	482b      	ldr	r0, [pc, #172]	; (8016588 <__lshift+0xdc>)
 80164dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80164e0:	f000 fc3e 	bl	8016d60 <__assert_func>
 80164e4:	3101      	adds	r1, #1
 80164e6:	005b      	lsls	r3, r3, #1
 80164e8:	e7ee      	b.n	80164c8 <__lshift+0x1c>
 80164ea:	2300      	movs	r3, #0
 80164ec:	f100 0114 	add.w	r1, r0, #20
 80164f0:	f100 0210 	add.w	r2, r0, #16
 80164f4:	4618      	mov	r0, r3
 80164f6:	4553      	cmp	r3, sl
 80164f8:	db37      	blt.n	801656a <__lshift+0xbe>
 80164fa:	6920      	ldr	r0, [r4, #16]
 80164fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016500:	f104 0314 	add.w	r3, r4, #20
 8016504:	f019 091f 	ands.w	r9, r9, #31
 8016508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801650c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016510:	d02f      	beq.n	8016572 <__lshift+0xc6>
 8016512:	f1c9 0e20 	rsb	lr, r9, #32
 8016516:	468a      	mov	sl, r1
 8016518:	f04f 0c00 	mov.w	ip, #0
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	fa02 f209 	lsl.w	r2, r2, r9
 8016522:	ea42 020c 	orr.w	r2, r2, ip
 8016526:	f84a 2b04 	str.w	r2, [sl], #4
 801652a:	f853 2b04 	ldr.w	r2, [r3], #4
 801652e:	4298      	cmp	r0, r3
 8016530:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016534:	d8f2      	bhi.n	801651c <__lshift+0x70>
 8016536:	1b03      	subs	r3, r0, r4
 8016538:	3b15      	subs	r3, #21
 801653a:	f023 0303 	bic.w	r3, r3, #3
 801653e:	3304      	adds	r3, #4
 8016540:	f104 0215 	add.w	r2, r4, #21
 8016544:	4290      	cmp	r0, r2
 8016546:	bf38      	it	cc
 8016548:	2304      	movcc	r3, #4
 801654a:	f841 c003 	str.w	ip, [r1, r3]
 801654e:	f1bc 0f00 	cmp.w	ip, #0
 8016552:	d001      	beq.n	8016558 <__lshift+0xac>
 8016554:	f108 0602 	add.w	r6, r8, #2
 8016558:	3e01      	subs	r6, #1
 801655a:	4638      	mov	r0, r7
 801655c:	612e      	str	r6, [r5, #16]
 801655e:	4621      	mov	r1, r4
 8016560:	f7ff fd88 	bl	8016074 <_Bfree>
 8016564:	4628      	mov	r0, r5
 8016566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656a:	f842 0f04 	str.w	r0, [r2, #4]!
 801656e:	3301      	adds	r3, #1
 8016570:	e7c1      	b.n	80164f6 <__lshift+0x4a>
 8016572:	3904      	subs	r1, #4
 8016574:	f853 2b04 	ldr.w	r2, [r3], #4
 8016578:	f841 2f04 	str.w	r2, [r1, #4]!
 801657c:	4298      	cmp	r0, r3
 801657e:	d8f9      	bhi.n	8016574 <__lshift+0xc8>
 8016580:	e7ea      	b.n	8016558 <__lshift+0xac>
 8016582:	bf00      	nop
 8016584:	080257b8 	.word	0x080257b8
 8016588:	080258a8 	.word	0x080258a8

0801658c <__mcmp>:
 801658c:	b530      	push	{r4, r5, lr}
 801658e:	6902      	ldr	r2, [r0, #16]
 8016590:	690c      	ldr	r4, [r1, #16]
 8016592:	1b12      	subs	r2, r2, r4
 8016594:	d10e      	bne.n	80165b4 <__mcmp+0x28>
 8016596:	f100 0314 	add.w	r3, r0, #20
 801659a:	3114      	adds	r1, #20
 801659c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80165a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80165a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80165a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80165ac:	42a5      	cmp	r5, r4
 80165ae:	d003      	beq.n	80165b8 <__mcmp+0x2c>
 80165b0:	d305      	bcc.n	80165be <__mcmp+0x32>
 80165b2:	2201      	movs	r2, #1
 80165b4:	4610      	mov	r0, r2
 80165b6:	bd30      	pop	{r4, r5, pc}
 80165b8:	4283      	cmp	r3, r0
 80165ba:	d3f3      	bcc.n	80165a4 <__mcmp+0x18>
 80165bc:	e7fa      	b.n	80165b4 <__mcmp+0x28>
 80165be:	f04f 32ff 	mov.w	r2, #4294967295
 80165c2:	e7f7      	b.n	80165b4 <__mcmp+0x28>

080165c4 <__mdiff>:
 80165c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c8:	460c      	mov	r4, r1
 80165ca:	4606      	mov	r6, r0
 80165cc:	4611      	mov	r1, r2
 80165ce:	4620      	mov	r0, r4
 80165d0:	4690      	mov	r8, r2
 80165d2:	f7ff ffdb 	bl	801658c <__mcmp>
 80165d6:	1e05      	subs	r5, r0, #0
 80165d8:	d110      	bne.n	80165fc <__mdiff+0x38>
 80165da:	4629      	mov	r1, r5
 80165dc:	4630      	mov	r0, r6
 80165de:	f7ff fd09 	bl	8015ff4 <_Balloc>
 80165e2:	b930      	cbnz	r0, 80165f2 <__mdiff+0x2e>
 80165e4:	4b3a      	ldr	r3, [pc, #232]	; (80166d0 <__mdiff+0x10c>)
 80165e6:	4602      	mov	r2, r0
 80165e8:	f240 2132 	movw	r1, #562	; 0x232
 80165ec:	4839      	ldr	r0, [pc, #228]	; (80166d4 <__mdiff+0x110>)
 80165ee:	f000 fbb7 	bl	8016d60 <__assert_func>
 80165f2:	2301      	movs	r3, #1
 80165f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80165f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165fc:	bfa4      	itt	ge
 80165fe:	4643      	movge	r3, r8
 8016600:	46a0      	movge	r8, r4
 8016602:	4630      	mov	r0, r6
 8016604:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016608:	bfa6      	itte	ge
 801660a:	461c      	movge	r4, r3
 801660c:	2500      	movge	r5, #0
 801660e:	2501      	movlt	r5, #1
 8016610:	f7ff fcf0 	bl	8015ff4 <_Balloc>
 8016614:	b920      	cbnz	r0, 8016620 <__mdiff+0x5c>
 8016616:	4b2e      	ldr	r3, [pc, #184]	; (80166d0 <__mdiff+0x10c>)
 8016618:	4602      	mov	r2, r0
 801661a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801661e:	e7e5      	b.n	80165ec <__mdiff+0x28>
 8016620:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016624:	6926      	ldr	r6, [r4, #16]
 8016626:	60c5      	str	r5, [r0, #12]
 8016628:	f104 0914 	add.w	r9, r4, #20
 801662c:	f108 0514 	add.w	r5, r8, #20
 8016630:	f100 0e14 	add.w	lr, r0, #20
 8016634:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016638:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801663c:	f108 0210 	add.w	r2, r8, #16
 8016640:	46f2      	mov	sl, lr
 8016642:	2100      	movs	r1, #0
 8016644:	f859 3b04 	ldr.w	r3, [r9], #4
 8016648:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801664c:	fa1f f883 	uxth.w	r8, r3
 8016650:	fa11 f18b 	uxtah	r1, r1, fp
 8016654:	0c1b      	lsrs	r3, r3, #16
 8016656:	eba1 0808 	sub.w	r8, r1, r8
 801665a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801665e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016662:	fa1f f888 	uxth.w	r8, r8
 8016666:	1419      	asrs	r1, r3, #16
 8016668:	454e      	cmp	r6, r9
 801666a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801666e:	f84a 3b04 	str.w	r3, [sl], #4
 8016672:	d8e7      	bhi.n	8016644 <__mdiff+0x80>
 8016674:	1b33      	subs	r3, r6, r4
 8016676:	3b15      	subs	r3, #21
 8016678:	f023 0303 	bic.w	r3, r3, #3
 801667c:	3304      	adds	r3, #4
 801667e:	3415      	adds	r4, #21
 8016680:	42a6      	cmp	r6, r4
 8016682:	bf38      	it	cc
 8016684:	2304      	movcc	r3, #4
 8016686:	441d      	add	r5, r3
 8016688:	4473      	add	r3, lr
 801668a:	469e      	mov	lr, r3
 801668c:	462e      	mov	r6, r5
 801668e:	4566      	cmp	r6, ip
 8016690:	d30e      	bcc.n	80166b0 <__mdiff+0xec>
 8016692:	f10c 0203 	add.w	r2, ip, #3
 8016696:	1b52      	subs	r2, r2, r5
 8016698:	f022 0203 	bic.w	r2, r2, #3
 801669c:	3d03      	subs	r5, #3
 801669e:	45ac      	cmp	ip, r5
 80166a0:	bf38      	it	cc
 80166a2:	2200      	movcc	r2, #0
 80166a4:	441a      	add	r2, r3
 80166a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80166aa:	b17b      	cbz	r3, 80166cc <__mdiff+0x108>
 80166ac:	6107      	str	r7, [r0, #16]
 80166ae:	e7a3      	b.n	80165f8 <__mdiff+0x34>
 80166b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80166b4:	fa11 f288 	uxtah	r2, r1, r8
 80166b8:	1414      	asrs	r4, r2, #16
 80166ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80166be:	b292      	uxth	r2, r2
 80166c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80166c4:	f84e 2b04 	str.w	r2, [lr], #4
 80166c8:	1421      	asrs	r1, r4, #16
 80166ca:	e7e0      	b.n	801668e <__mdiff+0xca>
 80166cc:	3f01      	subs	r7, #1
 80166ce:	e7ea      	b.n	80166a6 <__mdiff+0xe2>
 80166d0:	080257b8 	.word	0x080257b8
 80166d4:	080258a8 	.word	0x080258a8

080166d8 <__ulp>:
 80166d8:	b082      	sub	sp, #8
 80166da:	ed8d 0b00 	vstr	d0, [sp]
 80166de:	9b01      	ldr	r3, [sp, #4]
 80166e0:	4912      	ldr	r1, [pc, #72]	; (801672c <__ulp+0x54>)
 80166e2:	4019      	ands	r1, r3
 80166e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80166e8:	2900      	cmp	r1, #0
 80166ea:	dd05      	ble.n	80166f8 <__ulp+0x20>
 80166ec:	2200      	movs	r2, #0
 80166ee:	460b      	mov	r3, r1
 80166f0:	ec43 2b10 	vmov	d0, r2, r3
 80166f4:	b002      	add	sp, #8
 80166f6:	4770      	bx	lr
 80166f8:	4249      	negs	r1, r1
 80166fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80166fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016702:	f04f 0200 	mov.w	r2, #0
 8016706:	f04f 0300 	mov.w	r3, #0
 801670a:	da04      	bge.n	8016716 <__ulp+0x3e>
 801670c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016710:	fa41 f300 	asr.w	r3, r1, r0
 8016714:	e7ec      	b.n	80166f0 <__ulp+0x18>
 8016716:	f1a0 0114 	sub.w	r1, r0, #20
 801671a:	291e      	cmp	r1, #30
 801671c:	bfda      	itte	le
 801671e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016722:	fa20 f101 	lsrle.w	r1, r0, r1
 8016726:	2101      	movgt	r1, #1
 8016728:	460a      	mov	r2, r1
 801672a:	e7e1      	b.n	80166f0 <__ulp+0x18>
 801672c:	7ff00000 	.word	0x7ff00000

08016730 <__b2d>:
 8016730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016732:	6905      	ldr	r5, [r0, #16]
 8016734:	f100 0714 	add.w	r7, r0, #20
 8016738:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801673c:	1f2e      	subs	r6, r5, #4
 801673e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016742:	4620      	mov	r0, r4
 8016744:	f7ff fd48 	bl	80161d8 <__hi0bits>
 8016748:	f1c0 0320 	rsb	r3, r0, #32
 801674c:	280a      	cmp	r0, #10
 801674e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80167cc <__b2d+0x9c>
 8016752:	600b      	str	r3, [r1, #0]
 8016754:	dc14      	bgt.n	8016780 <__b2d+0x50>
 8016756:	f1c0 0e0b 	rsb	lr, r0, #11
 801675a:	fa24 f10e 	lsr.w	r1, r4, lr
 801675e:	42b7      	cmp	r7, r6
 8016760:	ea41 030c 	orr.w	r3, r1, ip
 8016764:	bf34      	ite	cc
 8016766:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801676a:	2100      	movcs	r1, #0
 801676c:	3015      	adds	r0, #21
 801676e:	fa04 f000 	lsl.w	r0, r4, r0
 8016772:	fa21 f10e 	lsr.w	r1, r1, lr
 8016776:	ea40 0201 	orr.w	r2, r0, r1
 801677a:	ec43 2b10 	vmov	d0, r2, r3
 801677e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016780:	42b7      	cmp	r7, r6
 8016782:	bf3a      	itte	cc
 8016784:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016788:	f1a5 0608 	subcc.w	r6, r5, #8
 801678c:	2100      	movcs	r1, #0
 801678e:	380b      	subs	r0, #11
 8016790:	d017      	beq.n	80167c2 <__b2d+0x92>
 8016792:	f1c0 0c20 	rsb	ip, r0, #32
 8016796:	fa04 f500 	lsl.w	r5, r4, r0
 801679a:	42be      	cmp	r6, r7
 801679c:	fa21 f40c 	lsr.w	r4, r1, ip
 80167a0:	ea45 0504 	orr.w	r5, r5, r4
 80167a4:	bf8c      	ite	hi
 80167a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80167aa:	2400      	movls	r4, #0
 80167ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80167b0:	fa01 f000 	lsl.w	r0, r1, r0
 80167b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80167b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80167bc:	ea40 0204 	orr.w	r2, r0, r4
 80167c0:	e7db      	b.n	801677a <__b2d+0x4a>
 80167c2:	ea44 030c 	orr.w	r3, r4, ip
 80167c6:	460a      	mov	r2, r1
 80167c8:	e7d7      	b.n	801677a <__b2d+0x4a>
 80167ca:	bf00      	nop
 80167cc:	3ff00000 	.word	0x3ff00000

080167d0 <__d2b>:
 80167d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80167d4:	4689      	mov	r9, r1
 80167d6:	2101      	movs	r1, #1
 80167d8:	ec57 6b10 	vmov	r6, r7, d0
 80167dc:	4690      	mov	r8, r2
 80167de:	f7ff fc09 	bl	8015ff4 <_Balloc>
 80167e2:	4604      	mov	r4, r0
 80167e4:	b930      	cbnz	r0, 80167f4 <__d2b+0x24>
 80167e6:	4602      	mov	r2, r0
 80167e8:	4b25      	ldr	r3, [pc, #148]	; (8016880 <__d2b+0xb0>)
 80167ea:	4826      	ldr	r0, [pc, #152]	; (8016884 <__d2b+0xb4>)
 80167ec:	f240 310a 	movw	r1, #778	; 0x30a
 80167f0:	f000 fab6 	bl	8016d60 <__assert_func>
 80167f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80167f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80167fc:	bb35      	cbnz	r5, 801684c <__d2b+0x7c>
 80167fe:	2e00      	cmp	r6, #0
 8016800:	9301      	str	r3, [sp, #4]
 8016802:	d028      	beq.n	8016856 <__d2b+0x86>
 8016804:	4668      	mov	r0, sp
 8016806:	9600      	str	r6, [sp, #0]
 8016808:	f7ff fd06 	bl	8016218 <__lo0bits>
 801680c:	9900      	ldr	r1, [sp, #0]
 801680e:	b300      	cbz	r0, 8016852 <__d2b+0x82>
 8016810:	9a01      	ldr	r2, [sp, #4]
 8016812:	f1c0 0320 	rsb	r3, r0, #32
 8016816:	fa02 f303 	lsl.w	r3, r2, r3
 801681a:	430b      	orrs	r3, r1
 801681c:	40c2      	lsrs	r2, r0
 801681e:	6163      	str	r3, [r4, #20]
 8016820:	9201      	str	r2, [sp, #4]
 8016822:	9b01      	ldr	r3, [sp, #4]
 8016824:	61a3      	str	r3, [r4, #24]
 8016826:	2b00      	cmp	r3, #0
 8016828:	bf14      	ite	ne
 801682a:	2202      	movne	r2, #2
 801682c:	2201      	moveq	r2, #1
 801682e:	6122      	str	r2, [r4, #16]
 8016830:	b1d5      	cbz	r5, 8016868 <__d2b+0x98>
 8016832:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016836:	4405      	add	r5, r0
 8016838:	f8c9 5000 	str.w	r5, [r9]
 801683c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016840:	f8c8 0000 	str.w	r0, [r8]
 8016844:	4620      	mov	r0, r4
 8016846:	b003      	add	sp, #12
 8016848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801684c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016850:	e7d5      	b.n	80167fe <__d2b+0x2e>
 8016852:	6161      	str	r1, [r4, #20]
 8016854:	e7e5      	b.n	8016822 <__d2b+0x52>
 8016856:	a801      	add	r0, sp, #4
 8016858:	f7ff fcde 	bl	8016218 <__lo0bits>
 801685c:	9b01      	ldr	r3, [sp, #4]
 801685e:	6163      	str	r3, [r4, #20]
 8016860:	2201      	movs	r2, #1
 8016862:	6122      	str	r2, [r4, #16]
 8016864:	3020      	adds	r0, #32
 8016866:	e7e3      	b.n	8016830 <__d2b+0x60>
 8016868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801686c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016870:	f8c9 0000 	str.w	r0, [r9]
 8016874:	6918      	ldr	r0, [r3, #16]
 8016876:	f7ff fcaf 	bl	80161d8 <__hi0bits>
 801687a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801687e:	e7df      	b.n	8016840 <__d2b+0x70>
 8016880:	080257b8 	.word	0x080257b8
 8016884:	080258a8 	.word	0x080258a8

08016888 <__ratio>:
 8016888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801688c:	4688      	mov	r8, r1
 801688e:	4669      	mov	r1, sp
 8016890:	4681      	mov	r9, r0
 8016892:	f7ff ff4d 	bl	8016730 <__b2d>
 8016896:	a901      	add	r1, sp, #4
 8016898:	4640      	mov	r0, r8
 801689a:	ec55 4b10 	vmov	r4, r5, d0
 801689e:	f7ff ff47 	bl	8016730 <__b2d>
 80168a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80168a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80168aa:	eba3 0c02 	sub.w	ip, r3, r2
 80168ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80168b2:	1a9b      	subs	r3, r3, r2
 80168b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80168b8:	ec51 0b10 	vmov	r0, r1, d0
 80168bc:	2b00      	cmp	r3, #0
 80168be:	bfd6      	itet	le
 80168c0:	460a      	movle	r2, r1
 80168c2:	462a      	movgt	r2, r5
 80168c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80168c8:	468b      	mov	fp, r1
 80168ca:	462f      	mov	r7, r5
 80168cc:	bfd4      	ite	le
 80168ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80168d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80168d6:	4620      	mov	r0, r4
 80168d8:	ee10 2a10 	vmov	r2, s0
 80168dc:	465b      	mov	r3, fp
 80168de:	4639      	mov	r1, r7
 80168e0:	f7e9 ffcc 	bl	800087c <__aeabi_ddiv>
 80168e4:	ec41 0b10 	vmov	d0, r0, r1
 80168e8:	b003      	add	sp, #12
 80168ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168ee <__copybits>:
 80168ee:	3901      	subs	r1, #1
 80168f0:	b570      	push	{r4, r5, r6, lr}
 80168f2:	1149      	asrs	r1, r1, #5
 80168f4:	6914      	ldr	r4, [r2, #16]
 80168f6:	3101      	adds	r1, #1
 80168f8:	f102 0314 	add.w	r3, r2, #20
 80168fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016900:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016904:	1f05      	subs	r5, r0, #4
 8016906:	42a3      	cmp	r3, r4
 8016908:	d30c      	bcc.n	8016924 <__copybits+0x36>
 801690a:	1aa3      	subs	r3, r4, r2
 801690c:	3b11      	subs	r3, #17
 801690e:	f023 0303 	bic.w	r3, r3, #3
 8016912:	3211      	adds	r2, #17
 8016914:	42a2      	cmp	r2, r4
 8016916:	bf88      	it	hi
 8016918:	2300      	movhi	r3, #0
 801691a:	4418      	add	r0, r3
 801691c:	2300      	movs	r3, #0
 801691e:	4288      	cmp	r0, r1
 8016920:	d305      	bcc.n	801692e <__copybits+0x40>
 8016922:	bd70      	pop	{r4, r5, r6, pc}
 8016924:	f853 6b04 	ldr.w	r6, [r3], #4
 8016928:	f845 6f04 	str.w	r6, [r5, #4]!
 801692c:	e7eb      	b.n	8016906 <__copybits+0x18>
 801692e:	f840 3b04 	str.w	r3, [r0], #4
 8016932:	e7f4      	b.n	801691e <__copybits+0x30>

08016934 <__any_on>:
 8016934:	f100 0214 	add.w	r2, r0, #20
 8016938:	6900      	ldr	r0, [r0, #16]
 801693a:	114b      	asrs	r3, r1, #5
 801693c:	4298      	cmp	r0, r3
 801693e:	b510      	push	{r4, lr}
 8016940:	db11      	blt.n	8016966 <__any_on+0x32>
 8016942:	dd0a      	ble.n	801695a <__any_on+0x26>
 8016944:	f011 011f 	ands.w	r1, r1, #31
 8016948:	d007      	beq.n	801695a <__any_on+0x26>
 801694a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801694e:	fa24 f001 	lsr.w	r0, r4, r1
 8016952:	fa00 f101 	lsl.w	r1, r0, r1
 8016956:	428c      	cmp	r4, r1
 8016958:	d10b      	bne.n	8016972 <__any_on+0x3e>
 801695a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801695e:	4293      	cmp	r3, r2
 8016960:	d803      	bhi.n	801696a <__any_on+0x36>
 8016962:	2000      	movs	r0, #0
 8016964:	bd10      	pop	{r4, pc}
 8016966:	4603      	mov	r3, r0
 8016968:	e7f7      	b.n	801695a <__any_on+0x26>
 801696a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801696e:	2900      	cmp	r1, #0
 8016970:	d0f5      	beq.n	801695e <__any_on+0x2a>
 8016972:	2001      	movs	r0, #1
 8016974:	e7f6      	b.n	8016964 <__any_on+0x30>

08016976 <_calloc_r>:
 8016976:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016978:	fba1 2402 	umull	r2, r4, r1, r2
 801697c:	b94c      	cbnz	r4, 8016992 <_calloc_r+0x1c>
 801697e:	4611      	mov	r1, r2
 8016980:	9201      	str	r2, [sp, #4]
 8016982:	f7fc f9f5 	bl	8012d70 <_malloc_r>
 8016986:	9a01      	ldr	r2, [sp, #4]
 8016988:	4605      	mov	r5, r0
 801698a:	b930      	cbnz	r0, 801699a <_calloc_r+0x24>
 801698c:	4628      	mov	r0, r5
 801698e:	b003      	add	sp, #12
 8016990:	bd30      	pop	{r4, r5, pc}
 8016992:	220c      	movs	r2, #12
 8016994:	6002      	str	r2, [r0, #0]
 8016996:	2500      	movs	r5, #0
 8016998:	e7f8      	b.n	801698c <_calloc_r+0x16>
 801699a:	4621      	mov	r1, r4
 801699c:	f7fc f974 	bl	8012c88 <memset>
 80169a0:	e7f4      	b.n	801698c <_calloc_r+0x16>

080169a2 <__ssputs_r>:
 80169a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a6:	688e      	ldr	r6, [r1, #8]
 80169a8:	429e      	cmp	r6, r3
 80169aa:	4682      	mov	sl, r0
 80169ac:	460c      	mov	r4, r1
 80169ae:	4690      	mov	r8, r2
 80169b0:	461f      	mov	r7, r3
 80169b2:	d838      	bhi.n	8016a26 <__ssputs_r+0x84>
 80169b4:	898a      	ldrh	r2, [r1, #12]
 80169b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80169ba:	d032      	beq.n	8016a22 <__ssputs_r+0x80>
 80169bc:	6825      	ldr	r5, [r4, #0]
 80169be:	6909      	ldr	r1, [r1, #16]
 80169c0:	eba5 0901 	sub.w	r9, r5, r1
 80169c4:	6965      	ldr	r5, [r4, #20]
 80169c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80169ce:	3301      	adds	r3, #1
 80169d0:	444b      	add	r3, r9
 80169d2:	106d      	asrs	r5, r5, #1
 80169d4:	429d      	cmp	r5, r3
 80169d6:	bf38      	it	cc
 80169d8:	461d      	movcc	r5, r3
 80169da:	0553      	lsls	r3, r2, #21
 80169dc:	d531      	bpl.n	8016a42 <__ssputs_r+0xa0>
 80169de:	4629      	mov	r1, r5
 80169e0:	f7fc f9c6 	bl	8012d70 <_malloc_r>
 80169e4:	4606      	mov	r6, r0
 80169e6:	b950      	cbnz	r0, 80169fe <__ssputs_r+0x5c>
 80169e8:	230c      	movs	r3, #12
 80169ea:	f8ca 3000 	str.w	r3, [sl]
 80169ee:	89a3      	ldrh	r3, [r4, #12]
 80169f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169f4:	81a3      	strh	r3, [r4, #12]
 80169f6:	f04f 30ff 	mov.w	r0, #4294967295
 80169fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169fe:	6921      	ldr	r1, [r4, #16]
 8016a00:	464a      	mov	r2, r9
 8016a02:	f7fc f933 	bl	8012c6c <memcpy>
 8016a06:	89a3      	ldrh	r3, [r4, #12]
 8016a08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a10:	81a3      	strh	r3, [r4, #12]
 8016a12:	6126      	str	r6, [r4, #16]
 8016a14:	6165      	str	r5, [r4, #20]
 8016a16:	444e      	add	r6, r9
 8016a18:	eba5 0509 	sub.w	r5, r5, r9
 8016a1c:	6026      	str	r6, [r4, #0]
 8016a1e:	60a5      	str	r5, [r4, #8]
 8016a20:	463e      	mov	r6, r7
 8016a22:	42be      	cmp	r6, r7
 8016a24:	d900      	bls.n	8016a28 <__ssputs_r+0x86>
 8016a26:	463e      	mov	r6, r7
 8016a28:	6820      	ldr	r0, [r4, #0]
 8016a2a:	4632      	mov	r2, r6
 8016a2c:	4641      	mov	r1, r8
 8016a2e:	f000 fa0b 	bl	8016e48 <memmove>
 8016a32:	68a3      	ldr	r3, [r4, #8]
 8016a34:	1b9b      	subs	r3, r3, r6
 8016a36:	60a3      	str	r3, [r4, #8]
 8016a38:	6823      	ldr	r3, [r4, #0]
 8016a3a:	4433      	add	r3, r6
 8016a3c:	6023      	str	r3, [r4, #0]
 8016a3e:	2000      	movs	r0, #0
 8016a40:	e7db      	b.n	80169fa <__ssputs_r+0x58>
 8016a42:	462a      	mov	r2, r5
 8016a44:	f000 fa1a 	bl	8016e7c <_realloc_r>
 8016a48:	4606      	mov	r6, r0
 8016a4a:	2800      	cmp	r0, #0
 8016a4c:	d1e1      	bne.n	8016a12 <__ssputs_r+0x70>
 8016a4e:	6921      	ldr	r1, [r4, #16]
 8016a50:	4650      	mov	r0, sl
 8016a52:	f7fc f921 	bl	8012c98 <_free_r>
 8016a56:	e7c7      	b.n	80169e8 <__ssputs_r+0x46>

08016a58 <_svfiprintf_r>:
 8016a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a5c:	4698      	mov	r8, r3
 8016a5e:	898b      	ldrh	r3, [r1, #12]
 8016a60:	061b      	lsls	r3, r3, #24
 8016a62:	b09d      	sub	sp, #116	; 0x74
 8016a64:	4607      	mov	r7, r0
 8016a66:	460d      	mov	r5, r1
 8016a68:	4614      	mov	r4, r2
 8016a6a:	d50e      	bpl.n	8016a8a <_svfiprintf_r+0x32>
 8016a6c:	690b      	ldr	r3, [r1, #16]
 8016a6e:	b963      	cbnz	r3, 8016a8a <_svfiprintf_r+0x32>
 8016a70:	2140      	movs	r1, #64	; 0x40
 8016a72:	f7fc f97d 	bl	8012d70 <_malloc_r>
 8016a76:	6028      	str	r0, [r5, #0]
 8016a78:	6128      	str	r0, [r5, #16]
 8016a7a:	b920      	cbnz	r0, 8016a86 <_svfiprintf_r+0x2e>
 8016a7c:	230c      	movs	r3, #12
 8016a7e:	603b      	str	r3, [r7, #0]
 8016a80:	f04f 30ff 	mov.w	r0, #4294967295
 8016a84:	e0d1      	b.n	8016c2a <_svfiprintf_r+0x1d2>
 8016a86:	2340      	movs	r3, #64	; 0x40
 8016a88:	616b      	str	r3, [r5, #20]
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8e:	2320      	movs	r3, #32
 8016a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a98:	2330      	movs	r3, #48	; 0x30
 8016a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016c44 <_svfiprintf_r+0x1ec>
 8016a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016aa2:	f04f 0901 	mov.w	r9, #1
 8016aa6:	4623      	mov	r3, r4
 8016aa8:	469a      	mov	sl, r3
 8016aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016aae:	b10a      	cbz	r2, 8016ab4 <_svfiprintf_r+0x5c>
 8016ab0:	2a25      	cmp	r2, #37	; 0x25
 8016ab2:	d1f9      	bne.n	8016aa8 <_svfiprintf_r+0x50>
 8016ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8016ab8:	d00b      	beq.n	8016ad2 <_svfiprintf_r+0x7a>
 8016aba:	465b      	mov	r3, fp
 8016abc:	4622      	mov	r2, r4
 8016abe:	4629      	mov	r1, r5
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f7ff ff6e 	bl	80169a2 <__ssputs_r>
 8016ac6:	3001      	adds	r0, #1
 8016ac8:	f000 80aa 	beq.w	8016c20 <_svfiprintf_r+0x1c8>
 8016acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ace:	445a      	add	r2, fp
 8016ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8016ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	f000 80a2 	beq.w	8016c20 <_svfiprintf_r+0x1c8>
 8016adc:	2300      	movs	r3, #0
 8016ade:	f04f 32ff 	mov.w	r2, #4294967295
 8016ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ae6:	f10a 0a01 	add.w	sl, sl, #1
 8016aea:	9304      	str	r3, [sp, #16]
 8016aec:	9307      	str	r3, [sp, #28]
 8016aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016af2:	931a      	str	r3, [sp, #104]	; 0x68
 8016af4:	4654      	mov	r4, sl
 8016af6:	2205      	movs	r2, #5
 8016af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016afc:	4851      	ldr	r0, [pc, #324]	; (8016c44 <_svfiprintf_r+0x1ec>)
 8016afe:	f7e9 fb87 	bl	8000210 <memchr>
 8016b02:	9a04      	ldr	r2, [sp, #16]
 8016b04:	b9d8      	cbnz	r0, 8016b3e <_svfiprintf_r+0xe6>
 8016b06:	06d0      	lsls	r0, r2, #27
 8016b08:	bf44      	itt	mi
 8016b0a:	2320      	movmi	r3, #32
 8016b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b10:	0711      	lsls	r1, r2, #28
 8016b12:	bf44      	itt	mi
 8016b14:	232b      	movmi	r3, #43	; 0x2b
 8016b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8016b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8016b20:	d015      	beq.n	8016b4e <_svfiprintf_r+0xf6>
 8016b22:	9a07      	ldr	r2, [sp, #28]
 8016b24:	4654      	mov	r4, sl
 8016b26:	2000      	movs	r0, #0
 8016b28:	f04f 0c0a 	mov.w	ip, #10
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b32:	3b30      	subs	r3, #48	; 0x30
 8016b34:	2b09      	cmp	r3, #9
 8016b36:	d94e      	bls.n	8016bd6 <_svfiprintf_r+0x17e>
 8016b38:	b1b0      	cbz	r0, 8016b68 <_svfiprintf_r+0x110>
 8016b3a:	9207      	str	r2, [sp, #28]
 8016b3c:	e014      	b.n	8016b68 <_svfiprintf_r+0x110>
 8016b3e:	eba0 0308 	sub.w	r3, r0, r8
 8016b42:	fa09 f303 	lsl.w	r3, r9, r3
 8016b46:	4313      	orrs	r3, r2
 8016b48:	9304      	str	r3, [sp, #16]
 8016b4a:	46a2      	mov	sl, r4
 8016b4c:	e7d2      	b.n	8016af4 <_svfiprintf_r+0x9c>
 8016b4e:	9b03      	ldr	r3, [sp, #12]
 8016b50:	1d19      	adds	r1, r3, #4
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	9103      	str	r1, [sp, #12]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	bfbb      	ittet	lt
 8016b5a:	425b      	neglt	r3, r3
 8016b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8016b60:	9307      	strge	r3, [sp, #28]
 8016b62:	9307      	strlt	r3, [sp, #28]
 8016b64:	bfb8      	it	lt
 8016b66:	9204      	strlt	r2, [sp, #16]
 8016b68:	7823      	ldrb	r3, [r4, #0]
 8016b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8016b6c:	d10c      	bne.n	8016b88 <_svfiprintf_r+0x130>
 8016b6e:	7863      	ldrb	r3, [r4, #1]
 8016b70:	2b2a      	cmp	r3, #42	; 0x2a
 8016b72:	d135      	bne.n	8016be0 <_svfiprintf_r+0x188>
 8016b74:	9b03      	ldr	r3, [sp, #12]
 8016b76:	1d1a      	adds	r2, r3, #4
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	9203      	str	r2, [sp, #12]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	bfb8      	it	lt
 8016b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b84:	3402      	adds	r4, #2
 8016b86:	9305      	str	r3, [sp, #20]
 8016b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016c54 <_svfiprintf_r+0x1fc>
 8016b8c:	7821      	ldrb	r1, [r4, #0]
 8016b8e:	2203      	movs	r2, #3
 8016b90:	4650      	mov	r0, sl
 8016b92:	f7e9 fb3d 	bl	8000210 <memchr>
 8016b96:	b140      	cbz	r0, 8016baa <_svfiprintf_r+0x152>
 8016b98:	2340      	movs	r3, #64	; 0x40
 8016b9a:	eba0 000a 	sub.w	r0, r0, sl
 8016b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8016ba2:	9b04      	ldr	r3, [sp, #16]
 8016ba4:	4303      	orrs	r3, r0
 8016ba6:	3401      	adds	r4, #1
 8016ba8:	9304      	str	r3, [sp, #16]
 8016baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bae:	4826      	ldr	r0, [pc, #152]	; (8016c48 <_svfiprintf_r+0x1f0>)
 8016bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016bb4:	2206      	movs	r2, #6
 8016bb6:	f7e9 fb2b 	bl	8000210 <memchr>
 8016bba:	2800      	cmp	r0, #0
 8016bbc:	d038      	beq.n	8016c30 <_svfiprintf_r+0x1d8>
 8016bbe:	4b23      	ldr	r3, [pc, #140]	; (8016c4c <_svfiprintf_r+0x1f4>)
 8016bc0:	bb1b      	cbnz	r3, 8016c0a <_svfiprintf_r+0x1b2>
 8016bc2:	9b03      	ldr	r3, [sp, #12]
 8016bc4:	3307      	adds	r3, #7
 8016bc6:	f023 0307 	bic.w	r3, r3, #7
 8016bca:	3308      	adds	r3, #8
 8016bcc:	9303      	str	r3, [sp, #12]
 8016bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bd0:	4433      	add	r3, r6
 8016bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8016bd4:	e767      	b.n	8016aa6 <_svfiprintf_r+0x4e>
 8016bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bda:	460c      	mov	r4, r1
 8016bdc:	2001      	movs	r0, #1
 8016bde:	e7a5      	b.n	8016b2c <_svfiprintf_r+0xd4>
 8016be0:	2300      	movs	r3, #0
 8016be2:	3401      	adds	r4, #1
 8016be4:	9305      	str	r3, [sp, #20]
 8016be6:	4619      	mov	r1, r3
 8016be8:	f04f 0c0a 	mov.w	ip, #10
 8016bec:	4620      	mov	r0, r4
 8016bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bf2:	3a30      	subs	r2, #48	; 0x30
 8016bf4:	2a09      	cmp	r2, #9
 8016bf6:	d903      	bls.n	8016c00 <_svfiprintf_r+0x1a8>
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d0c5      	beq.n	8016b88 <_svfiprintf_r+0x130>
 8016bfc:	9105      	str	r1, [sp, #20]
 8016bfe:	e7c3      	b.n	8016b88 <_svfiprintf_r+0x130>
 8016c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c04:	4604      	mov	r4, r0
 8016c06:	2301      	movs	r3, #1
 8016c08:	e7f0      	b.n	8016bec <_svfiprintf_r+0x194>
 8016c0a:	ab03      	add	r3, sp, #12
 8016c0c:	9300      	str	r3, [sp, #0]
 8016c0e:	462a      	mov	r2, r5
 8016c10:	4b0f      	ldr	r3, [pc, #60]	; (8016c50 <_svfiprintf_r+0x1f8>)
 8016c12:	a904      	add	r1, sp, #16
 8016c14:	4638      	mov	r0, r7
 8016c16:	f7fc f9bf 	bl	8012f98 <_printf_float>
 8016c1a:	1c42      	adds	r2, r0, #1
 8016c1c:	4606      	mov	r6, r0
 8016c1e:	d1d6      	bne.n	8016bce <_svfiprintf_r+0x176>
 8016c20:	89ab      	ldrh	r3, [r5, #12]
 8016c22:	065b      	lsls	r3, r3, #25
 8016c24:	f53f af2c 	bmi.w	8016a80 <_svfiprintf_r+0x28>
 8016c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c2a:	b01d      	add	sp, #116	; 0x74
 8016c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c30:	ab03      	add	r3, sp, #12
 8016c32:	9300      	str	r3, [sp, #0]
 8016c34:	462a      	mov	r2, r5
 8016c36:	4b06      	ldr	r3, [pc, #24]	; (8016c50 <_svfiprintf_r+0x1f8>)
 8016c38:	a904      	add	r1, sp, #16
 8016c3a:	4638      	mov	r0, r7
 8016c3c:	f7fc fc50 	bl	80134e0 <_printf_i>
 8016c40:	e7eb      	b.n	8016c1a <_svfiprintf_r+0x1c2>
 8016c42:	bf00      	nop
 8016c44:	08025a04 	.word	0x08025a04
 8016c48:	08025a0e 	.word	0x08025a0e
 8016c4c:	08012f99 	.word	0x08012f99
 8016c50:	080169a3 	.word	0x080169a3
 8016c54:	08025a0a 	.word	0x08025a0a

08016c58 <nan>:
 8016c58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016c60 <nan+0x8>
 8016c5c:	4770      	bx	lr
 8016c5e:	bf00      	nop
 8016c60:	00000000 	.word	0x00000000
 8016c64:	7ff80000 	.word	0x7ff80000

08016c68 <nanf>:
 8016c68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c70 <nanf+0x8>
 8016c6c:	4770      	bx	lr
 8016c6e:	bf00      	nop
 8016c70:	7fc00000 	.word	0x7fc00000

08016c74 <__sread>:
 8016c74:	b510      	push	{r4, lr}
 8016c76:	460c      	mov	r4, r1
 8016c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c7c:	f000 fa86 	bl	801718c <_read_r>
 8016c80:	2800      	cmp	r0, #0
 8016c82:	bfab      	itete	ge
 8016c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c86:	89a3      	ldrhlt	r3, [r4, #12]
 8016c88:	181b      	addge	r3, r3, r0
 8016c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c8e:	bfac      	ite	ge
 8016c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c92:	81a3      	strhlt	r3, [r4, #12]
 8016c94:	bd10      	pop	{r4, pc}

08016c96 <__swrite>:
 8016c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9a:	461f      	mov	r7, r3
 8016c9c:	898b      	ldrh	r3, [r1, #12]
 8016c9e:	05db      	lsls	r3, r3, #23
 8016ca0:	4605      	mov	r5, r0
 8016ca2:	460c      	mov	r4, r1
 8016ca4:	4616      	mov	r6, r2
 8016ca6:	d505      	bpl.n	8016cb4 <__swrite+0x1e>
 8016ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cac:	2302      	movs	r3, #2
 8016cae:	2200      	movs	r2, #0
 8016cb0:	f000 f8b8 	bl	8016e24 <_lseek_r>
 8016cb4:	89a3      	ldrh	r3, [r4, #12]
 8016cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016cbe:	81a3      	strh	r3, [r4, #12]
 8016cc0:	4632      	mov	r2, r6
 8016cc2:	463b      	mov	r3, r7
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cca:	f000 b837 	b.w	8016d3c <_write_r>

08016cce <__sseek>:
 8016cce:	b510      	push	{r4, lr}
 8016cd0:	460c      	mov	r4, r1
 8016cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cd6:	f000 f8a5 	bl	8016e24 <_lseek_r>
 8016cda:	1c43      	adds	r3, r0, #1
 8016cdc:	89a3      	ldrh	r3, [r4, #12]
 8016cde:	bf15      	itete	ne
 8016ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016cea:	81a3      	strheq	r3, [r4, #12]
 8016cec:	bf18      	it	ne
 8016cee:	81a3      	strhne	r3, [r4, #12]
 8016cf0:	bd10      	pop	{r4, pc}

08016cf2 <__sclose>:
 8016cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cf6:	f000 b851 	b.w	8016d9c <_close_r>

08016cfa <strncmp>:
 8016cfa:	b510      	push	{r4, lr}
 8016cfc:	b17a      	cbz	r2, 8016d1e <strncmp+0x24>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	3901      	subs	r1, #1
 8016d02:	1884      	adds	r4, r0, r2
 8016d04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016d08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016d0c:	4290      	cmp	r0, r2
 8016d0e:	d101      	bne.n	8016d14 <strncmp+0x1a>
 8016d10:	42a3      	cmp	r3, r4
 8016d12:	d101      	bne.n	8016d18 <strncmp+0x1e>
 8016d14:	1a80      	subs	r0, r0, r2
 8016d16:	bd10      	pop	{r4, pc}
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	d1f3      	bne.n	8016d04 <strncmp+0xa>
 8016d1c:	e7fa      	b.n	8016d14 <strncmp+0x1a>
 8016d1e:	4610      	mov	r0, r2
 8016d20:	e7f9      	b.n	8016d16 <strncmp+0x1c>

08016d22 <__ascii_wctomb>:
 8016d22:	b149      	cbz	r1, 8016d38 <__ascii_wctomb+0x16>
 8016d24:	2aff      	cmp	r2, #255	; 0xff
 8016d26:	bf85      	ittet	hi
 8016d28:	238a      	movhi	r3, #138	; 0x8a
 8016d2a:	6003      	strhi	r3, [r0, #0]
 8016d2c:	700a      	strbls	r2, [r1, #0]
 8016d2e:	f04f 30ff 	movhi.w	r0, #4294967295
 8016d32:	bf98      	it	ls
 8016d34:	2001      	movls	r0, #1
 8016d36:	4770      	bx	lr
 8016d38:	4608      	mov	r0, r1
 8016d3a:	4770      	bx	lr

08016d3c <_write_r>:
 8016d3c:	b538      	push	{r3, r4, r5, lr}
 8016d3e:	4d07      	ldr	r5, [pc, #28]	; (8016d5c <_write_r+0x20>)
 8016d40:	4604      	mov	r4, r0
 8016d42:	4608      	mov	r0, r1
 8016d44:	4611      	mov	r1, r2
 8016d46:	2200      	movs	r2, #0
 8016d48:	602a      	str	r2, [r5, #0]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	f7ea fbdf 	bl	800150e <_write>
 8016d50:	1c43      	adds	r3, r0, #1
 8016d52:	d102      	bne.n	8016d5a <_write_r+0x1e>
 8016d54:	682b      	ldr	r3, [r5, #0]
 8016d56:	b103      	cbz	r3, 8016d5a <_write_r+0x1e>
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}
 8016d5c:	2000d0b0 	.word	0x2000d0b0

08016d60 <__assert_func>:
 8016d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d62:	4614      	mov	r4, r2
 8016d64:	461a      	mov	r2, r3
 8016d66:	4b09      	ldr	r3, [pc, #36]	; (8016d8c <__assert_func+0x2c>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	4605      	mov	r5, r0
 8016d6c:	68d8      	ldr	r0, [r3, #12]
 8016d6e:	b14c      	cbz	r4, 8016d84 <__assert_func+0x24>
 8016d70:	4b07      	ldr	r3, [pc, #28]	; (8016d90 <__assert_func+0x30>)
 8016d72:	9100      	str	r1, [sp, #0]
 8016d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d78:	4906      	ldr	r1, [pc, #24]	; (8016d94 <__assert_func+0x34>)
 8016d7a:	462b      	mov	r3, r5
 8016d7c:	f000 f81e 	bl	8016dbc <fiprintf>
 8016d80:	f000 fa16 	bl	80171b0 <abort>
 8016d84:	4b04      	ldr	r3, [pc, #16]	; (8016d98 <__assert_func+0x38>)
 8016d86:	461c      	mov	r4, r3
 8016d88:	e7f3      	b.n	8016d72 <__assert_func+0x12>
 8016d8a:	bf00      	nop
 8016d8c:	200000c8 	.word	0x200000c8
 8016d90:	08025a15 	.word	0x08025a15
 8016d94:	08025a22 	.word	0x08025a22
 8016d98:	08025a50 	.word	0x08025a50

08016d9c <_close_r>:
 8016d9c:	b538      	push	{r3, r4, r5, lr}
 8016d9e:	4d06      	ldr	r5, [pc, #24]	; (8016db8 <_close_r+0x1c>)
 8016da0:	2300      	movs	r3, #0
 8016da2:	4604      	mov	r4, r0
 8016da4:	4608      	mov	r0, r1
 8016da6:	602b      	str	r3, [r5, #0]
 8016da8:	f7ea fbcd 	bl	8001546 <_close>
 8016dac:	1c43      	adds	r3, r0, #1
 8016dae:	d102      	bne.n	8016db6 <_close_r+0x1a>
 8016db0:	682b      	ldr	r3, [r5, #0]
 8016db2:	b103      	cbz	r3, 8016db6 <_close_r+0x1a>
 8016db4:	6023      	str	r3, [r4, #0]
 8016db6:	bd38      	pop	{r3, r4, r5, pc}
 8016db8:	2000d0b0 	.word	0x2000d0b0

08016dbc <fiprintf>:
 8016dbc:	b40e      	push	{r1, r2, r3}
 8016dbe:	b503      	push	{r0, r1, lr}
 8016dc0:	4601      	mov	r1, r0
 8016dc2:	ab03      	add	r3, sp, #12
 8016dc4:	4805      	ldr	r0, [pc, #20]	; (8016ddc <fiprintf+0x20>)
 8016dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dca:	6800      	ldr	r0, [r0, #0]
 8016dcc:	9301      	str	r3, [sp, #4]
 8016dce:	f000 f8ad 	bl	8016f2c <_vfiprintf_r>
 8016dd2:	b002      	add	sp, #8
 8016dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dd8:	b003      	add	sp, #12
 8016dda:	4770      	bx	lr
 8016ddc:	200000c8 	.word	0x200000c8

08016de0 <_fstat_r>:
 8016de0:	b538      	push	{r3, r4, r5, lr}
 8016de2:	4d07      	ldr	r5, [pc, #28]	; (8016e00 <_fstat_r+0x20>)
 8016de4:	2300      	movs	r3, #0
 8016de6:	4604      	mov	r4, r0
 8016de8:	4608      	mov	r0, r1
 8016dea:	4611      	mov	r1, r2
 8016dec:	602b      	str	r3, [r5, #0]
 8016dee:	f7ea fbb6 	bl	800155e <_fstat>
 8016df2:	1c43      	adds	r3, r0, #1
 8016df4:	d102      	bne.n	8016dfc <_fstat_r+0x1c>
 8016df6:	682b      	ldr	r3, [r5, #0]
 8016df8:	b103      	cbz	r3, 8016dfc <_fstat_r+0x1c>
 8016dfa:	6023      	str	r3, [r4, #0]
 8016dfc:	bd38      	pop	{r3, r4, r5, pc}
 8016dfe:	bf00      	nop
 8016e00:	2000d0b0 	.word	0x2000d0b0

08016e04 <_isatty_r>:
 8016e04:	b538      	push	{r3, r4, r5, lr}
 8016e06:	4d06      	ldr	r5, [pc, #24]	; (8016e20 <_isatty_r+0x1c>)
 8016e08:	2300      	movs	r3, #0
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	4608      	mov	r0, r1
 8016e0e:	602b      	str	r3, [r5, #0]
 8016e10:	f7ea fbb5 	bl	800157e <_isatty>
 8016e14:	1c43      	adds	r3, r0, #1
 8016e16:	d102      	bne.n	8016e1e <_isatty_r+0x1a>
 8016e18:	682b      	ldr	r3, [r5, #0]
 8016e1a:	b103      	cbz	r3, 8016e1e <_isatty_r+0x1a>
 8016e1c:	6023      	str	r3, [r4, #0]
 8016e1e:	bd38      	pop	{r3, r4, r5, pc}
 8016e20:	2000d0b0 	.word	0x2000d0b0

08016e24 <_lseek_r>:
 8016e24:	b538      	push	{r3, r4, r5, lr}
 8016e26:	4d07      	ldr	r5, [pc, #28]	; (8016e44 <_lseek_r+0x20>)
 8016e28:	4604      	mov	r4, r0
 8016e2a:	4608      	mov	r0, r1
 8016e2c:	4611      	mov	r1, r2
 8016e2e:	2200      	movs	r2, #0
 8016e30:	602a      	str	r2, [r5, #0]
 8016e32:	461a      	mov	r2, r3
 8016e34:	f7ea fbae 	bl	8001594 <_lseek>
 8016e38:	1c43      	adds	r3, r0, #1
 8016e3a:	d102      	bne.n	8016e42 <_lseek_r+0x1e>
 8016e3c:	682b      	ldr	r3, [r5, #0]
 8016e3e:	b103      	cbz	r3, 8016e42 <_lseek_r+0x1e>
 8016e40:	6023      	str	r3, [r4, #0]
 8016e42:	bd38      	pop	{r3, r4, r5, pc}
 8016e44:	2000d0b0 	.word	0x2000d0b0

08016e48 <memmove>:
 8016e48:	4288      	cmp	r0, r1
 8016e4a:	b510      	push	{r4, lr}
 8016e4c:	eb01 0402 	add.w	r4, r1, r2
 8016e50:	d902      	bls.n	8016e58 <memmove+0x10>
 8016e52:	4284      	cmp	r4, r0
 8016e54:	4623      	mov	r3, r4
 8016e56:	d807      	bhi.n	8016e68 <memmove+0x20>
 8016e58:	1e43      	subs	r3, r0, #1
 8016e5a:	42a1      	cmp	r1, r4
 8016e5c:	d008      	beq.n	8016e70 <memmove+0x28>
 8016e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e66:	e7f8      	b.n	8016e5a <memmove+0x12>
 8016e68:	4402      	add	r2, r0
 8016e6a:	4601      	mov	r1, r0
 8016e6c:	428a      	cmp	r2, r1
 8016e6e:	d100      	bne.n	8016e72 <memmove+0x2a>
 8016e70:	bd10      	pop	{r4, pc}
 8016e72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e7a:	e7f7      	b.n	8016e6c <memmove+0x24>

08016e7c <_realloc_r>:
 8016e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e80:	4680      	mov	r8, r0
 8016e82:	4614      	mov	r4, r2
 8016e84:	460e      	mov	r6, r1
 8016e86:	b921      	cbnz	r1, 8016e92 <_realloc_r+0x16>
 8016e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e8c:	4611      	mov	r1, r2
 8016e8e:	f7fb bf6f 	b.w	8012d70 <_malloc_r>
 8016e92:	b92a      	cbnz	r2, 8016ea0 <_realloc_r+0x24>
 8016e94:	f7fb ff00 	bl	8012c98 <_free_r>
 8016e98:	4625      	mov	r5, r4
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ea0:	f000 f98d 	bl	80171be <_malloc_usable_size_r>
 8016ea4:	4284      	cmp	r4, r0
 8016ea6:	4607      	mov	r7, r0
 8016ea8:	d802      	bhi.n	8016eb0 <_realloc_r+0x34>
 8016eaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016eae:	d812      	bhi.n	8016ed6 <_realloc_r+0x5a>
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	4640      	mov	r0, r8
 8016eb4:	f7fb ff5c 	bl	8012d70 <_malloc_r>
 8016eb8:	4605      	mov	r5, r0
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	d0ed      	beq.n	8016e9a <_realloc_r+0x1e>
 8016ebe:	42bc      	cmp	r4, r7
 8016ec0:	4622      	mov	r2, r4
 8016ec2:	4631      	mov	r1, r6
 8016ec4:	bf28      	it	cs
 8016ec6:	463a      	movcs	r2, r7
 8016ec8:	f7fb fed0 	bl	8012c6c <memcpy>
 8016ecc:	4631      	mov	r1, r6
 8016ece:	4640      	mov	r0, r8
 8016ed0:	f7fb fee2 	bl	8012c98 <_free_r>
 8016ed4:	e7e1      	b.n	8016e9a <_realloc_r+0x1e>
 8016ed6:	4635      	mov	r5, r6
 8016ed8:	e7df      	b.n	8016e9a <_realloc_r+0x1e>

08016eda <__sfputc_r>:
 8016eda:	6893      	ldr	r3, [r2, #8]
 8016edc:	3b01      	subs	r3, #1
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	b410      	push	{r4}
 8016ee2:	6093      	str	r3, [r2, #8]
 8016ee4:	da08      	bge.n	8016ef8 <__sfputc_r+0x1e>
 8016ee6:	6994      	ldr	r4, [r2, #24]
 8016ee8:	42a3      	cmp	r3, r4
 8016eea:	db01      	blt.n	8016ef0 <__sfputc_r+0x16>
 8016eec:	290a      	cmp	r1, #10
 8016eee:	d103      	bne.n	8016ef8 <__sfputc_r+0x1e>
 8016ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ef4:	f7fd bb94 	b.w	8014620 <__swbuf_r>
 8016ef8:	6813      	ldr	r3, [r2, #0]
 8016efa:	1c58      	adds	r0, r3, #1
 8016efc:	6010      	str	r0, [r2, #0]
 8016efe:	7019      	strb	r1, [r3, #0]
 8016f00:	4608      	mov	r0, r1
 8016f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f06:	4770      	bx	lr

08016f08 <__sfputs_r>:
 8016f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f0a:	4606      	mov	r6, r0
 8016f0c:	460f      	mov	r7, r1
 8016f0e:	4614      	mov	r4, r2
 8016f10:	18d5      	adds	r5, r2, r3
 8016f12:	42ac      	cmp	r4, r5
 8016f14:	d101      	bne.n	8016f1a <__sfputs_r+0x12>
 8016f16:	2000      	movs	r0, #0
 8016f18:	e007      	b.n	8016f2a <__sfputs_r+0x22>
 8016f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f1e:	463a      	mov	r2, r7
 8016f20:	4630      	mov	r0, r6
 8016f22:	f7ff ffda 	bl	8016eda <__sfputc_r>
 8016f26:	1c43      	adds	r3, r0, #1
 8016f28:	d1f3      	bne.n	8016f12 <__sfputs_r+0xa>
 8016f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016f2c <_vfiprintf_r>:
 8016f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	460d      	mov	r5, r1
 8016f32:	b09d      	sub	sp, #116	; 0x74
 8016f34:	4614      	mov	r4, r2
 8016f36:	4698      	mov	r8, r3
 8016f38:	4606      	mov	r6, r0
 8016f3a:	b118      	cbz	r0, 8016f44 <_vfiprintf_r+0x18>
 8016f3c:	6983      	ldr	r3, [r0, #24]
 8016f3e:	b90b      	cbnz	r3, 8016f44 <_vfiprintf_r+0x18>
 8016f40:	f7fe fbc2 	bl	80156c8 <__sinit>
 8016f44:	4b89      	ldr	r3, [pc, #548]	; (801716c <_vfiprintf_r+0x240>)
 8016f46:	429d      	cmp	r5, r3
 8016f48:	d11b      	bne.n	8016f82 <_vfiprintf_r+0x56>
 8016f4a:	6875      	ldr	r5, [r6, #4]
 8016f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f4e:	07d9      	lsls	r1, r3, #31
 8016f50:	d405      	bmi.n	8016f5e <_vfiprintf_r+0x32>
 8016f52:	89ab      	ldrh	r3, [r5, #12]
 8016f54:	059a      	lsls	r2, r3, #22
 8016f56:	d402      	bmi.n	8016f5e <_vfiprintf_r+0x32>
 8016f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f5a:	f7fe ffc6 	bl	8015eea <__retarget_lock_acquire_recursive>
 8016f5e:	89ab      	ldrh	r3, [r5, #12]
 8016f60:	071b      	lsls	r3, r3, #28
 8016f62:	d501      	bpl.n	8016f68 <_vfiprintf_r+0x3c>
 8016f64:	692b      	ldr	r3, [r5, #16]
 8016f66:	b9eb      	cbnz	r3, 8016fa4 <_vfiprintf_r+0x78>
 8016f68:	4629      	mov	r1, r5
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	f7fd fbaa 	bl	80146c4 <__swsetup_r>
 8016f70:	b1c0      	cbz	r0, 8016fa4 <_vfiprintf_r+0x78>
 8016f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f74:	07dc      	lsls	r4, r3, #31
 8016f76:	d50e      	bpl.n	8016f96 <_vfiprintf_r+0x6a>
 8016f78:	f04f 30ff 	mov.w	r0, #4294967295
 8016f7c:	b01d      	add	sp, #116	; 0x74
 8016f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f82:	4b7b      	ldr	r3, [pc, #492]	; (8017170 <_vfiprintf_r+0x244>)
 8016f84:	429d      	cmp	r5, r3
 8016f86:	d101      	bne.n	8016f8c <_vfiprintf_r+0x60>
 8016f88:	68b5      	ldr	r5, [r6, #8]
 8016f8a:	e7df      	b.n	8016f4c <_vfiprintf_r+0x20>
 8016f8c:	4b79      	ldr	r3, [pc, #484]	; (8017174 <_vfiprintf_r+0x248>)
 8016f8e:	429d      	cmp	r5, r3
 8016f90:	bf08      	it	eq
 8016f92:	68f5      	ldreq	r5, [r6, #12]
 8016f94:	e7da      	b.n	8016f4c <_vfiprintf_r+0x20>
 8016f96:	89ab      	ldrh	r3, [r5, #12]
 8016f98:	0598      	lsls	r0, r3, #22
 8016f9a:	d4ed      	bmi.n	8016f78 <_vfiprintf_r+0x4c>
 8016f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f9e:	f7fe ffa5 	bl	8015eec <__retarget_lock_release_recursive>
 8016fa2:	e7e9      	b.n	8016f78 <_vfiprintf_r+0x4c>
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8016fa8:	2320      	movs	r3, #32
 8016faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fb2:	2330      	movs	r3, #48	; 0x30
 8016fb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017178 <_vfiprintf_r+0x24c>
 8016fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016fbc:	f04f 0901 	mov.w	r9, #1
 8016fc0:	4623      	mov	r3, r4
 8016fc2:	469a      	mov	sl, r3
 8016fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fc8:	b10a      	cbz	r2, 8016fce <_vfiprintf_r+0xa2>
 8016fca:	2a25      	cmp	r2, #37	; 0x25
 8016fcc:	d1f9      	bne.n	8016fc2 <_vfiprintf_r+0x96>
 8016fce:	ebba 0b04 	subs.w	fp, sl, r4
 8016fd2:	d00b      	beq.n	8016fec <_vfiprintf_r+0xc0>
 8016fd4:	465b      	mov	r3, fp
 8016fd6:	4622      	mov	r2, r4
 8016fd8:	4629      	mov	r1, r5
 8016fda:	4630      	mov	r0, r6
 8016fdc:	f7ff ff94 	bl	8016f08 <__sfputs_r>
 8016fe0:	3001      	adds	r0, #1
 8016fe2:	f000 80aa 	beq.w	801713a <_vfiprintf_r+0x20e>
 8016fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fe8:	445a      	add	r2, fp
 8016fea:	9209      	str	r2, [sp, #36]	; 0x24
 8016fec:	f89a 3000 	ldrb.w	r3, [sl]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	f000 80a2 	beq.w	801713a <_vfiprintf_r+0x20e>
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8016ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017000:	f10a 0a01 	add.w	sl, sl, #1
 8017004:	9304      	str	r3, [sp, #16]
 8017006:	9307      	str	r3, [sp, #28]
 8017008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801700c:	931a      	str	r3, [sp, #104]	; 0x68
 801700e:	4654      	mov	r4, sl
 8017010:	2205      	movs	r2, #5
 8017012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017016:	4858      	ldr	r0, [pc, #352]	; (8017178 <_vfiprintf_r+0x24c>)
 8017018:	f7e9 f8fa 	bl	8000210 <memchr>
 801701c:	9a04      	ldr	r2, [sp, #16]
 801701e:	b9d8      	cbnz	r0, 8017058 <_vfiprintf_r+0x12c>
 8017020:	06d1      	lsls	r1, r2, #27
 8017022:	bf44      	itt	mi
 8017024:	2320      	movmi	r3, #32
 8017026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801702a:	0713      	lsls	r3, r2, #28
 801702c:	bf44      	itt	mi
 801702e:	232b      	movmi	r3, #43	; 0x2b
 8017030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017034:	f89a 3000 	ldrb.w	r3, [sl]
 8017038:	2b2a      	cmp	r3, #42	; 0x2a
 801703a:	d015      	beq.n	8017068 <_vfiprintf_r+0x13c>
 801703c:	9a07      	ldr	r2, [sp, #28]
 801703e:	4654      	mov	r4, sl
 8017040:	2000      	movs	r0, #0
 8017042:	f04f 0c0a 	mov.w	ip, #10
 8017046:	4621      	mov	r1, r4
 8017048:	f811 3b01 	ldrb.w	r3, [r1], #1
 801704c:	3b30      	subs	r3, #48	; 0x30
 801704e:	2b09      	cmp	r3, #9
 8017050:	d94e      	bls.n	80170f0 <_vfiprintf_r+0x1c4>
 8017052:	b1b0      	cbz	r0, 8017082 <_vfiprintf_r+0x156>
 8017054:	9207      	str	r2, [sp, #28]
 8017056:	e014      	b.n	8017082 <_vfiprintf_r+0x156>
 8017058:	eba0 0308 	sub.w	r3, r0, r8
 801705c:	fa09 f303 	lsl.w	r3, r9, r3
 8017060:	4313      	orrs	r3, r2
 8017062:	9304      	str	r3, [sp, #16]
 8017064:	46a2      	mov	sl, r4
 8017066:	e7d2      	b.n	801700e <_vfiprintf_r+0xe2>
 8017068:	9b03      	ldr	r3, [sp, #12]
 801706a:	1d19      	adds	r1, r3, #4
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	9103      	str	r1, [sp, #12]
 8017070:	2b00      	cmp	r3, #0
 8017072:	bfbb      	ittet	lt
 8017074:	425b      	neglt	r3, r3
 8017076:	f042 0202 	orrlt.w	r2, r2, #2
 801707a:	9307      	strge	r3, [sp, #28]
 801707c:	9307      	strlt	r3, [sp, #28]
 801707e:	bfb8      	it	lt
 8017080:	9204      	strlt	r2, [sp, #16]
 8017082:	7823      	ldrb	r3, [r4, #0]
 8017084:	2b2e      	cmp	r3, #46	; 0x2e
 8017086:	d10c      	bne.n	80170a2 <_vfiprintf_r+0x176>
 8017088:	7863      	ldrb	r3, [r4, #1]
 801708a:	2b2a      	cmp	r3, #42	; 0x2a
 801708c:	d135      	bne.n	80170fa <_vfiprintf_r+0x1ce>
 801708e:	9b03      	ldr	r3, [sp, #12]
 8017090:	1d1a      	adds	r2, r3, #4
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	9203      	str	r2, [sp, #12]
 8017096:	2b00      	cmp	r3, #0
 8017098:	bfb8      	it	lt
 801709a:	f04f 33ff 	movlt.w	r3, #4294967295
 801709e:	3402      	adds	r4, #2
 80170a0:	9305      	str	r3, [sp, #20]
 80170a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017188 <_vfiprintf_r+0x25c>
 80170a6:	7821      	ldrb	r1, [r4, #0]
 80170a8:	2203      	movs	r2, #3
 80170aa:	4650      	mov	r0, sl
 80170ac:	f7e9 f8b0 	bl	8000210 <memchr>
 80170b0:	b140      	cbz	r0, 80170c4 <_vfiprintf_r+0x198>
 80170b2:	2340      	movs	r3, #64	; 0x40
 80170b4:	eba0 000a 	sub.w	r0, r0, sl
 80170b8:	fa03 f000 	lsl.w	r0, r3, r0
 80170bc:	9b04      	ldr	r3, [sp, #16]
 80170be:	4303      	orrs	r3, r0
 80170c0:	3401      	adds	r4, #1
 80170c2:	9304      	str	r3, [sp, #16]
 80170c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170c8:	482c      	ldr	r0, [pc, #176]	; (801717c <_vfiprintf_r+0x250>)
 80170ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170ce:	2206      	movs	r2, #6
 80170d0:	f7e9 f89e 	bl	8000210 <memchr>
 80170d4:	2800      	cmp	r0, #0
 80170d6:	d03f      	beq.n	8017158 <_vfiprintf_r+0x22c>
 80170d8:	4b29      	ldr	r3, [pc, #164]	; (8017180 <_vfiprintf_r+0x254>)
 80170da:	bb1b      	cbnz	r3, 8017124 <_vfiprintf_r+0x1f8>
 80170dc:	9b03      	ldr	r3, [sp, #12]
 80170de:	3307      	adds	r3, #7
 80170e0:	f023 0307 	bic.w	r3, r3, #7
 80170e4:	3308      	adds	r3, #8
 80170e6:	9303      	str	r3, [sp, #12]
 80170e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170ea:	443b      	add	r3, r7
 80170ec:	9309      	str	r3, [sp, #36]	; 0x24
 80170ee:	e767      	b.n	8016fc0 <_vfiprintf_r+0x94>
 80170f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80170f4:	460c      	mov	r4, r1
 80170f6:	2001      	movs	r0, #1
 80170f8:	e7a5      	b.n	8017046 <_vfiprintf_r+0x11a>
 80170fa:	2300      	movs	r3, #0
 80170fc:	3401      	adds	r4, #1
 80170fe:	9305      	str	r3, [sp, #20]
 8017100:	4619      	mov	r1, r3
 8017102:	f04f 0c0a 	mov.w	ip, #10
 8017106:	4620      	mov	r0, r4
 8017108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801710c:	3a30      	subs	r2, #48	; 0x30
 801710e:	2a09      	cmp	r2, #9
 8017110:	d903      	bls.n	801711a <_vfiprintf_r+0x1ee>
 8017112:	2b00      	cmp	r3, #0
 8017114:	d0c5      	beq.n	80170a2 <_vfiprintf_r+0x176>
 8017116:	9105      	str	r1, [sp, #20]
 8017118:	e7c3      	b.n	80170a2 <_vfiprintf_r+0x176>
 801711a:	fb0c 2101 	mla	r1, ip, r1, r2
 801711e:	4604      	mov	r4, r0
 8017120:	2301      	movs	r3, #1
 8017122:	e7f0      	b.n	8017106 <_vfiprintf_r+0x1da>
 8017124:	ab03      	add	r3, sp, #12
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	462a      	mov	r2, r5
 801712a:	4b16      	ldr	r3, [pc, #88]	; (8017184 <_vfiprintf_r+0x258>)
 801712c:	a904      	add	r1, sp, #16
 801712e:	4630      	mov	r0, r6
 8017130:	f7fb ff32 	bl	8012f98 <_printf_float>
 8017134:	4607      	mov	r7, r0
 8017136:	1c78      	adds	r0, r7, #1
 8017138:	d1d6      	bne.n	80170e8 <_vfiprintf_r+0x1bc>
 801713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801713c:	07d9      	lsls	r1, r3, #31
 801713e:	d405      	bmi.n	801714c <_vfiprintf_r+0x220>
 8017140:	89ab      	ldrh	r3, [r5, #12]
 8017142:	059a      	lsls	r2, r3, #22
 8017144:	d402      	bmi.n	801714c <_vfiprintf_r+0x220>
 8017146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017148:	f7fe fed0 	bl	8015eec <__retarget_lock_release_recursive>
 801714c:	89ab      	ldrh	r3, [r5, #12]
 801714e:	065b      	lsls	r3, r3, #25
 8017150:	f53f af12 	bmi.w	8016f78 <_vfiprintf_r+0x4c>
 8017154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017156:	e711      	b.n	8016f7c <_vfiprintf_r+0x50>
 8017158:	ab03      	add	r3, sp, #12
 801715a:	9300      	str	r3, [sp, #0]
 801715c:	462a      	mov	r2, r5
 801715e:	4b09      	ldr	r3, [pc, #36]	; (8017184 <_vfiprintf_r+0x258>)
 8017160:	a904      	add	r1, sp, #16
 8017162:	4630      	mov	r0, r6
 8017164:	f7fc f9bc 	bl	80134e0 <_printf_i>
 8017168:	e7e4      	b.n	8017134 <_vfiprintf_r+0x208>
 801716a:	bf00      	nop
 801716c:	080257ec 	.word	0x080257ec
 8017170:	0802580c 	.word	0x0802580c
 8017174:	080257cc 	.word	0x080257cc
 8017178:	08025a04 	.word	0x08025a04
 801717c:	08025a0e 	.word	0x08025a0e
 8017180:	08012f99 	.word	0x08012f99
 8017184:	08016f09 	.word	0x08016f09
 8017188:	08025a0a 	.word	0x08025a0a

0801718c <_read_r>:
 801718c:	b538      	push	{r3, r4, r5, lr}
 801718e:	4d07      	ldr	r5, [pc, #28]	; (80171ac <_read_r+0x20>)
 8017190:	4604      	mov	r4, r0
 8017192:	4608      	mov	r0, r1
 8017194:	4611      	mov	r1, r2
 8017196:	2200      	movs	r2, #0
 8017198:	602a      	str	r2, [r5, #0]
 801719a:	461a      	mov	r2, r3
 801719c:	f7ea f99a 	bl	80014d4 <_read>
 80171a0:	1c43      	adds	r3, r0, #1
 80171a2:	d102      	bne.n	80171aa <_read_r+0x1e>
 80171a4:	682b      	ldr	r3, [r5, #0]
 80171a6:	b103      	cbz	r3, 80171aa <_read_r+0x1e>
 80171a8:	6023      	str	r3, [r4, #0]
 80171aa:	bd38      	pop	{r3, r4, r5, pc}
 80171ac:	2000d0b0 	.word	0x2000d0b0

080171b0 <abort>:
 80171b0:	b508      	push	{r3, lr}
 80171b2:	2006      	movs	r0, #6
 80171b4:	f000 f834 	bl	8017220 <raise>
 80171b8:	2001      	movs	r0, #1
 80171ba:	f7ea f981 	bl	80014c0 <_exit>

080171be <_malloc_usable_size_r>:
 80171be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171c2:	1f18      	subs	r0, r3, #4
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	bfbc      	itt	lt
 80171c8:	580b      	ldrlt	r3, [r1, r0]
 80171ca:	18c0      	addlt	r0, r0, r3
 80171cc:	4770      	bx	lr

080171ce <_raise_r>:
 80171ce:	291f      	cmp	r1, #31
 80171d0:	b538      	push	{r3, r4, r5, lr}
 80171d2:	4604      	mov	r4, r0
 80171d4:	460d      	mov	r5, r1
 80171d6:	d904      	bls.n	80171e2 <_raise_r+0x14>
 80171d8:	2316      	movs	r3, #22
 80171da:	6003      	str	r3, [r0, #0]
 80171dc:	f04f 30ff 	mov.w	r0, #4294967295
 80171e0:	bd38      	pop	{r3, r4, r5, pc}
 80171e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80171e4:	b112      	cbz	r2, 80171ec <_raise_r+0x1e>
 80171e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80171ea:	b94b      	cbnz	r3, 8017200 <_raise_r+0x32>
 80171ec:	4620      	mov	r0, r4
 80171ee:	f000 f831 	bl	8017254 <_getpid_r>
 80171f2:	462a      	mov	r2, r5
 80171f4:	4601      	mov	r1, r0
 80171f6:	4620      	mov	r0, r4
 80171f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171fc:	f000 b818 	b.w	8017230 <_kill_r>
 8017200:	2b01      	cmp	r3, #1
 8017202:	d00a      	beq.n	801721a <_raise_r+0x4c>
 8017204:	1c59      	adds	r1, r3, #1
 8017206:	d103      	bne.n	8017210 <_raise_r+0x42>
 8017208:	2316      	movs	r3, #22
 801720a:	6003      	str	r3, [r0, #0]
 801720c:	2001      	movs	r0, #1
 801720e:	e7e7      	b.n	80171e0 <_raise_r+0x12>
 8017210:	2400      	movs	r4, #0
 8017212:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017216:	4628      	mov	r0, r5
 8017218:	4798      	blx	r3
 801721a:	2000      	movs	r0, #0
 801721c:	e7e0      	b.n	80171e0 <_raise_r+0x12>
	...

08017220 <raise>:
 8017220:	4b02      	ldr	r3, [pc, #8]	; (801722c <raise+0xc>)
 8017222:	4601      	mov	r1, r0
 8017224:	6818      	ldr	r0, [r3, #0]
 8017226:	f7ff bfd2 	b.w	80171ce <_raise_r>
 801722a:	bf00      	nop
 801722c:	200000c8 	.word	0x200000c8

08017230 <_kill_r>:
 8017230:	b538      	push	{r3, r4, r5, lr}
 8017232:	4d07      	ldr	r5, [pc, #28]	; (8017250 <_kill_r+0x20>)
 8017234:	2300      	movs	r3, #0
 8017236:	4604      	mov	r4, r0
 8017238:	4608      	mov	r0, r1
 801723a:	4611      	mov	r1, r2
 801723c:	602b      	str	r3, [r5, #0]
 801723e:	f7ea f92f 	bl	80014a0 <_kill>
 8017242:	1c43      	adds	r3, r0, #1
 8017244:	d102      	bne.n	801724c <_kill_r+0x1c>
 8017246:	682b      	ldr	r3, [r5, #0]
 8017248:	b103      	cbz	r3, 801724c <_kill_r+0x1c>
 801724a:	6023      	str	r3, [r4, #0]
 801724c:	bd38      	pop	{r3, r4, r5, pc}
 801724e:	bf00      	nop
 8017250:	2000d0b0 	.word	0x2000d0b0

08017254 <_getpid_r>:
 8017254:	f7ea b91c 	b.w	8001490 <_getpid>

08017258 <_init>:
 8017258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725a:	bf00      	nop
 801725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801725e:	bc08      	pop	{r3}
 8017260:	469e      	mov	lr, r3
 8017262:	4770      	bx	lr

08017264 <_fini>:
 8017264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017266:	bf00      	nop
 8017268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726a:	bc08      	pop	{r3}
 801726c:	469e      	mov	lr, r3
 801726e:	4770      	bx	lr

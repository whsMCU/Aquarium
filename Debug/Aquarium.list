
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001573c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ce70  08015900  08015900  00025900  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022770  08022770  00040234  2**0
                  CONTENTS
  4 .ARM          00000008  08022770  08022770  00032770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022778  08022778  00040234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022778  08022778  00032778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802277c  0802277c  0003277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08022780  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad2c  20000240  080229b4  00040240  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000af6c  080229b4  0004af6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e1d3  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000637c  00000000  00000000  0006e437  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db8  00000000  00000000  000747b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ad8  00000000  00000000  00076570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001face  00000000  00000000  00078048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000210dc  00000000  00000000  00097b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dc2f  00000000  00000000  000b8bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008768  00000000  00000000  0015689c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080158c4 	.word	0x080158c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	080158c4 	.word	0x080158c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <apInit>:

void lcdMain(void);
void sensorMain(void);

void apInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 8000fbc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fccb 	bl	800195c <cliOpen>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <apMain>:

void apMain(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000fd0:	f000 f927 	bl	8001222 <millis>
 8000fd4:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8000fd6:	f000 f924 	bl	8001222 <millis>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d302      	bcc.n	8000fec <apMain+0x22>
    {
      pre_time = millis();
 8000fe6:	f000 f91c 	bl	8001222 <millis>
 8000fea:	6078      	str	r0, [r7, #4]

    }

    sensorMain();
 8000fec:	f000 f812 	bl	8001014 <sensorMain>

    if(buttonGetPressed(_DEF_BUTTON1))
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 fbaf 	bl	8001754 <buttonGetPressed>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <apMain+0x3a>
    {
    	ledOn(_DEF_LED1);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f003 f9df 	bl	80043c0 <ledOn>
 8001002:	e002      	b.n	800100a <apMain+0x40>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8001004:	2000      	movs	r0, #0
 8001006:	f003 f9fb 	bl	8004400 <ledOff>
    }
    cliMain();
 800100a:	f000 fd5f 	bl	8001acc <cliMain>
    lcdMain();
 800100e:	f000 f80b 	bl	8001028 <lcdMain>
    if (millis()-pre_time >= 1000)
 8001012:	e7e0      	b.n	8000fd6 <apMain+0xc>

08001014 <sensorMain>:
  }
}

void sensorMain(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 8001018:	f001 fc24 	bl	8002864 <Ds18b20_ManualConvert>
    Sonar_measure();
 800101c:	f004 f9a8 	bl	8005370 <Sonar_measure>
    tds_measure();
 8001020:	f004 fe72 	bl	8005d08 <tds_measure>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <lcdMain>:

void lcdMain(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 800102e:	f002 fb63 	bl	80036f8 <lcdIsInit>
 8001032:	4603      	mov	r3, r0
 8001034:	f083 0301 	eor.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80a2 	bne.w	8001184 <lcdMain+0x15c>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 8001040:	f002 fd92 	bl	8003b68 <lcdDrawAvailable>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 809d 	beq.w	8001186 <lcdMain+0x15e>
  {
      lcdClearBuffer(black);
 800104c:	2000      	movs	r0, #0
 800104e:	f002 fb91 	bl	8003774 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 8001052:	2003      	movs	r0, #3
 8001054:	f003 f8d0 	bl	80041f8 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움]");
 8001058:	4b4c      	ldr	r3, [pc, #304]	; (800118c <lcdMain+0x164>)
 800105a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800105e:	2100      	movs	r1, #0
 8001060:	2000      	movs	r0, #0
 8001062:	f002 ff35 	bl	8003ed0 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8001066:	f002 fd67 	bl	8003b38 <lcdGetFps>
 800106a:	4603      	mov	r3, r0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b48      	ldr	r3, [pc, #288]	; (8001190 <lcdMain+0x168>)
 8001070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001074:	2110      	movs	r1, #16
 8001076:	2000      	movs	r0, #0
 8001078:	f002 ff2a 	bl	8003ed0 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 800107c:	f002 fd68 	bl	8003b50 <lcdGetFpsTime>
 8001080:	4603      	mov	r3, r0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <lcdMain+0x16c>)
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	2120      	movs	r1, #32
 800108c:	2000      	movs	r0, #0
 800108e:	f002 ff1f 	bl	8003ed0 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 8001092:	f000 f8c6 	bl	8001222 <millis>
 8001096:	4603      	mov	r3, r0
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <lcdMain+0x16c>)
 800109c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a0:	2130      	movs	r1, #48	; 0x30
 80010a2:	2000      	movs	r0, #0
 80010a4:	f002 ff14 	bl	8003ed0 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 80010a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	2305      	movs	r3, #5
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2311      	movs	r3, #17
 80010b4:	2234      	movs	r2, #52	; 0x34
 80010b6:	2110      	movs	r1, #16
 80010b8:	2046      	movs	r0, #70	; 0x46
 80010ba:	f002 fc09 	bl	80038d0 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, red);
 80010be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	2305      	movs	r3, #5
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	230f      	movs	r3, #15
 80010ca:	2232      	movs	r2, #50	; 0x32
 80010cc:	2111      	movs	r1, #17
 80010ce:	2047      	movs	r0, #71	; 0x47
 80010d0:	f002 fcff 	bl	8003ad2 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f003 f88f 	bl	80041f8 <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <lcdMain+0x170>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	2115      	movs	r1, #21
 80010e2:	204b      	movs	r0, #75	; 0x4b
 80010e4:	f002 fef4 	bl	8003ed0 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f003 f885 	bl	80041f8 <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3.1f 도" , ds18b20[0].Temperature);
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <lcdMain+0x174>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa40 	bl	8000578 <__aeabi_f2d>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <lcdMain+0x178>)
 8001102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001106:	2140      	movs	r1, #64	; 0x40
 8001108:	2000      	movs	r0, #0
 800110a:	f002 fee1 	bl	8003ed0 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <lcdMain+0x17c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <lcdMain+0x180>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <lcdMain+0x184>)
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	2150      	movs	r1, #80	; 0x50
 8001124:	2000      	movs	r0, #0
 8001126:	f002 fed3 	bl	8003ed0 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4.1f ppm" , tds_tbl[0].filter_tdsValue);
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <lcdMain+0x188>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa22 	bl	8000578 <__aeabi_f2d>
 8001134:	4603      	mov	r3, r0
 8001136:	460c      	mov	r4, r1
 8001138:	e9cd 3400 	strd	r3, r4, [sp]
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <lcdMain+0x18c>)
 800113e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001142:	2160      	movs	r1, #96	; 0x60
 8001144:	2000      	movs	r0, #0
 8001146:	f002 fec3 	bl	8003ed0 <lcdPrintf>

      lcdDrawFillRect( 0, 118, 10, 10, red);
 800114a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	230a      	movs	r3, #10
 8001152:	220a      	movs	r2, #10
 8001154:	2176      	movs	r1, #118	; 0x76
 8001156:	2000      	movs	r0, #0
 8001158:	f002 fe8b 	bl	8003e72 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 800115c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	230a      	movs	r3, #10
 8001164:	220a      	movs	r2, #10
 8001166:	2176      	movs	r1, #118	; 0x76
 8001168:	200a      	movs	r0, #10
 800116a:	f002 fe82 	bl	8003e72 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 800116e:	231f      	movs	r3, #31
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	230a      	movs	r3, #10
 8001174:	220a      	movs	r2, #10
 8001176:	2176      	movs	r1, #118	; 0x76
 8001178:	2014      	movs	r0, #20
 800117a:	f002 fe7a 	bl	8003e72 <lcdDrawFillRect>

      lcdRequestDraw();
 800117e:	f002 fd09 	bl	8003b94 <lcdRequestDraw>
 8001182:	e000      	b.n	8001186 <lcdMain+0x15e>
    return;
 8001184:	bf00      	nop
  }
}
 8001186:	3704      	adds	r7, #4
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	08015900 	.word	0x08015900
 8001190:	0801591c 	.word	0x0801591c
 8001194:	08015924 	.word	0x08015924
 8001198:	0801592c 	.word	0x0801592c
 800119c:	2000a8e8 	.word	0x2000a8e8
 80011a0:	08015934 	.word	0x08015934
 80011a4:	2000a2c4 	.word	0x2000a2c4
 80011a8:	cccccccd 	.word	0xcccccccd
 80011ac:	0801594c 	.word	0x0801594c
 80011b0:	2000ad94 	.word	0x2000ad94
 80011b4:	08015960 	.word	0x08015960

080011b8 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  HAL_Init();
 80011be:	f00a f969 	bl	800b494 <HAL_Init>
  SystemClock_Config();
 80011c2:	f000 f835 	bl	8001230 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <bspInit+0x50>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <bspInit+0x50>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <bspInit+0x50>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <bspInit+0x50>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <bspInit+0x50>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <bspInit+0x50>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <delay>:

void delay(uint32_t ms)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f00a f9af 	bl	800b578 <HAL_Delay>
#endif
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <millis>:

uint32_t millis(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001226:	f00a f99b 	bl	800b560 <HAL_GetTick>
 800122a:	4603      	mov	r3, r0
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f010 ff5f 	bl	8012102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <SystemClock_Config+0xc8>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <SystemClock_Config+0xc8>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <SystemClock_Config+0xc8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <SystemClock_Config+0xcc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <SystemClock_Config+0xcc>)
 800127a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <SystemClock_Config+0xcc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012a0:	2319      	movs	r3, #25
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012a4:	23c0      	movs	r3, #192	; 0xc0
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00b fea7 	bl	800d008 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c0:	f000 f81e 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2103      	movs	r1, #3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00c f901 	bl	800d4e8 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012ec:	f000 f808 	bl	8001300 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001306:	e7fe      	b.n	8001306 <Error_Handler+0x6>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f00a f8c8 	bl	800b538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <ADC_IRQHandler+0x10>)
 80013b2:	f00a f946 	bl	800b642 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000adbc 	.word	0x2000adbc

080013c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <TIM3_IRQHandler+0x10>)
 80013c6:	f00e fb53 	bl	800fa70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000ac88 	.word	0x2000ac88

080013d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <SPI1_IRQHandler+0x10>)
 80013da:	f00e f835 	bl	800f448 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000acdc 	.word	0x2000acdc

080013e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART1_IRQHandler+0x10>)
 80013ee:	f00f fa35 	bl	801085c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000af24 	.word	0x2000af24

080013fc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <SDIO_IRQHandler+0x10>)
 8001402:	f00c fca7 	bl	800dd54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000ac04 	.word	0x2000ac04

08001410 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <DMA2_Stream0_IRQHandler+0x10>)
 8001416:	f00b f8d3 	bl	800c5c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000ae04 	.word	0x2000ae04

08001424 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA2_Stream2_IRQHandler+0x10>)
 800142a:	f00b f8c9 	bl	800c5c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000aec4 	.word	0x2000aec4

08001438 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA2_Stream3_IRQHandler+0x10>)
 800143e:	f00b f8bf 	bl	800c5c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000aba4 	.word	0x2000aba4

0800144c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA2_Stream5_IRQHandler+0x10>)
 8001452:	f00b f8b5 	bl	800c5c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000ad34 	.word	0x2000ad34

08001460 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA2_Stream6_IRQHandler+0x10>)
 8001466:	f00b f8ab 	bl	800c5c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000ab44 	.word	0x2000ab44

08001474 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA2_Stream7_IRQHandler+0x10>)
 800147a:	f00b f8a1 	bl	800c5c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000ae64 	.word	0x2000ae64

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f010 fdde 	bl	8012078 <__errno>
 80014bc:	4602      	mov	r2, r0
 80014be:	230c      	movs	r3, #12
 80014c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	2000025c 	.word	0x2000025c
 80014f0:	2000af70 	.word	0x2000af70

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <SystemInit+0x28>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <SystemInit+0x28>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <SystemInit+0x28>)
 800150a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150e:	609a      	str	r2, [r3, #8]
#endif
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001524:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001526:	e003      	b.n	8001530 <LoopCopyDataInit>

08001528 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800152a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800152c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800152e:	3104      	adds	r1, #4

08001530 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001534:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001538:	d3f6      	bcc.n	8001528 <CopyDataInit>
  ldr  r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800153c:	e002      	b.n	8001544 <LoopFillZerobss>

0800153e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800153e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001540:	f842 3b04 	str.w	r3, [r2], #4

08001544 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001546:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001548:	d3f9      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800154a:	f7ff ffd3 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f010 fd99 	bl	8012084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f010 fd85 	bl	8012060 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800155c:	08022780 	.word	0x08022780
  ldr  r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001564:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8001568:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 800156c:	2000af6c 	.word	0x2000af6c

08001570 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <DMA1_Stream0_IRQHandler>

08001572 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001572:	b480      	push	{r7}
 8001574:	b087      	sub	sp, #28
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	60da      	str	r2, [r3, #12]

  return ret;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80015b4:	2301      	movs	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e026      	b.n	800160c <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	441a      	add	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	440b      	add	r3, r1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d00c      	beq.n	8001600 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6892      	ldr	r2, [r2, #8]
 80015f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80015f4:	fb02 f201 	mul.w	r2, r2, r1
 80015f8:	1a9a      	subs	r2, r3, r2
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	e002      	b.n	8001606 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]
      break;
 8001604:	e006      	b.n	8001614 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3301      	adds	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8d4      	bhi.n	80015be <qbufferRead+0x16>
    }
  }

  return ret;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6892      	ldr	r2, [r2, #8]
 8001638:	fbb3 f1f2 	udiv	r1, r3, r2
 800163c:	fb02 f201 	mul.w	r2, r2, r1
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

  return ret;
 8001644:	68fb      	ldr	r3, [r7, #12]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <DWT_Delay_Init+0x58>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <DWT_Delay_Init+0x58>)
 800165e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001662:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <DWT_Delay_Init+0x58>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <DWT_Delay_Init+0x58>)
 800166a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <DWT_Delay_Init+0x5c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <DWT_Delay_Init+0x5c>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800168e:	bf00      	nop
     __ASM volatile ("NOP");
 8001690:	bf00      	nop
     __ASM volatile ("NOP");
 8001692:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80016a0:	2301      	movs	r3, #1
  }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000edf0 	.word	0xe000edf0
 80016b0:	e0001000 	.word	0xe0001000

080016b4 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  bool ret = true;
 80016ba:	2301      	movs	r3, #1
 80016bc:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <buttonInit+0x90>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <buttonInit+0x90>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <buttonInit+0x90>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	e019      	b.n	800172a <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 80016f6:	4914      	ldr	r1, [pc, #80]	; (8001748 <buttonInit+0x94>)
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3304      	adds	r3, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 800170a:	490f      	ldr	r1, [pc, #60]	; (8001748 <buttonInit+0x94>)
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1d3a      	adds	r2, r7, #4
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f00b f9c2 	bl	800caa8 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	2b00      	cmp	r3, #0
 800172e:	dde2      	ble.n	80016f6 <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001730:	4906      	ldr	r1, [pc, #24]	; (800174c <buttonInit+0x98>)
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <buttonInit+0x9c>)
 8001734:	f000 feea 	bl	800250c <cliAdd>
#endif

  return ret;
 8001738:	7efb      	ldrb	r3, [r7, #27]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	20000004 	.word	0x20000004
 800174c:	08001835 	.word	0x08001835
 8001750:	08015970 	.word	0x08015970

08001754 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4a30      	ldr	r2, [pc, #192]	; (8001830 <buttonGetPressed+0xdc>)
 800176e:	4413      	add	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <buttonGetPressed+0x28>
  {
    return false;
 8001778:	2300      	movs	r3, #0
 800177a:	e054      	b.n	8001826 <buttonGetPressed+0xd2>
  }

  switch(button->State)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	7a9b      	ldrb	r3, [r3, #10]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <buttonGetPressed+0x36>
 8001784:	2b01      	cmp	r3, #1
 8001786:	d018      	beq.n	80017ba <buttonGetPressed+0x66>
 8001788:	e04c      	b.n	8001824 <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f00b fbea 	bl	800cf70 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	7a1b      	ldrb	r3, [r3, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d13a      	bne.n	800181e <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 80017a8:	f7ff fd3b 	bl	8001222 <millis>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	611a      	str	r2, [r3, #16]
  			  button->State = BUTTON_Pressed;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2201      	movs	r2, #1
 80017b6:	729a      	strb	r2, [r3, #10]
  		  }
  		  break;
 80017b8:	e031      	b.n	800181e <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f00b fbd2 	bl	800cf70 <HAL_GPIO_ReadPin>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	7a1b      	ldrb	r3, [r3, #8]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d114      	bne.n	8001802 <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80017d8:	f7ff fd23 	bl	8001222 <millis>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	1ad2      	subs	r2, r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d91a      	bls.n	8001822 <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2201      	movs	r2, #1
 80017f0:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	7a5b      	ldrb	r3, [r3, #9]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8001800:	e00f      	b.n	8001822 <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	729a      	strb	r2, [r3, #10]
			  button->PinState = GPIO_PIN_RESET;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	725a      	strb	r2, [r3, #9]
			  ret = button->PinState;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	7a5b      	ldrb	r3, [r3, #9]
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
		  break;
 800181c:	e001      	b.n	8001822 <buttonGetPressed+0xce>
  		  break;
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <buttonGetPressed+0xd0>
		  break;
 8001822:	bf00      	nop
  }
  return ret;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000004 	.word	0x20000004

08001834 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d128      	bne.n	800189a <cliButton+0x66>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4919      	ldr	r1, [pc, #100]	; (80018b4 <cliButton+0x80>)
 800184e:	2000      	movs	r0, #0
 8001850:	4798      	blx	r3
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001858:	e018      	b.n	800188c <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	e00c      	b.n	800187a <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff75 	bl	8001754 <buttonGetPressed>
 800186a:	4603      	mov	r3, r0
 800186c:	4619      	mov	r1, r3
 800186e:	4812      	ldr	r0, [pc, #72]	; (80018b8 <cliButton+0x84>)
 8001870:	f000 fd3c 	bl	80022ec <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	ddef      	ble.n	8001860 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001880:	480e      	ldr	r0, [pc, #56]	; (80018bc <cliButton+0x88>)
 8001882:	f000 fd33 	bl	80022ec <cliPrintf>

      delay(100);
 8001886:	2064      	movs	r0, #100	; 0x64
 8001888:	f7ff fcc0 	bl	800120c <delay>
    while(cliKeepLoop())
 800188c:	f000 fe28 	bl	80024e0 <cliKeepLoop>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e1      	bne.n	800185a <cliButton+0x26>
    }

    ret = true;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <cliButton+0x78>
  {
    cliPrintf("button show\n");
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <cliButton+0x8c>)
 80018a8:	f000 fd20 	bl	80022ec <cliPrintf>
  }
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	08015978 	.word	0x08015978
 80018b8:	08015980 	.word	0x08015980
 80018bc:	08015984 	.word	0x08015984
 80018c0:	08015988 	.word	0x08015988

080018c4 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <cliInit+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <cliInit+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <cliInit+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <cliInit+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <cliInit+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <cliInit+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <cliInit+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <cliInit+0x74>)
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <cliInit+0x78>)
 80018fe:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <cliInit+0x74>)
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <cliInit+0x7c>)
 8001906:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <cliInit+0x74>)
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <cliInit+0x80>)
 800190e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <cliInit+0x74>)
 8001914:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <cliInit+0x84>)
 8001916:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <cliInit+0x74>)
 800191c:	f000 fb5c 	bl	8001fd8 <cliLineClean>


  cliAdd("help", cliShowList);
 8001920:	490a      	ldr	r1, [pc, #40]	; (800194c <cliInit+0x88>)
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <cliInit+0x8c>)
 8001924:	f000 fdf2 	bl	800250c <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001928:	490a      	ldr	r1, [pc, #40]	; (8001954 <cliInit+0x90>)
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <cliInit+0x94>)
 800192c:	f000 fdee 	bl	800250c <cliAdd>

  return true;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000a4a0 	.word	0x2000a4a0
 800193c:	0800239d 	.word	0x0800239d
 8001940:	080023ed 	.word	0x080023ed
 8001944:	08002445 	.word	0x08002445
 8001948:	0800248d 	.word	0x0800248d
 800194c:	080025a1 	.word	0x080025a1
 8001950:	08015998 	.word	0x08015998
 8001954:	08002611 	.word	0x08002611
 8001958:	080159a0 	.word	0x080159a0

0800195c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <cliOpen+0x38>)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <cliOpen+0x38>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f004 fba7 	bl	80060cc <uartOpen>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <cliOpen+0x38>)
 8001984:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001986:	4b03      	ldr	r3, [pc, #12]	; (8001994 <cliOpen+0x38>)
 8001988:	7a1b      	ldrb	r3, [r3, #8]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000a4a0 	.word	0x2000a4a0

08001998 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80019a0:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <cliShowLog+0xdc>)
 80019a2:	7a5b      	ldrb	r3, [r3, #9]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d061      	beq.n	8001a6c <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7a98      	ldrb	r0, [r3, #10]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80019b2:	461a      	mov	r2, r3
 80019b4:	4930      	ldr	r1, [pc, #192]	; (8001a78 <cliShowLog+0xe0>)
 80019b6:	f004 fd3f 	bl	8006438 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a98      	ldrb	r0, [r3, #10]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80019c4:	461a      	mov	r2, r3
 80019c6:	492d      	ldr	r1, [pc, #180]	; (8001a7c <cliShowLog+0xe4>)
 80019c8:	f004 fd36 	bl	8006438 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7a98      	ldrb	r0, [r3, #10]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80019d6:	461a      	mov	r2, r3
 80019d8:	4929      	ldr	r1, [pc, #164]	; (8001a80 <cliShowLog+0xe8>)
 80019da:	f004 fd2d 	bl	8006438 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7a98      	ldrb	r0, [r3, #10]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80019e8:	461a      	mov	r2, r3
 80019ea:	4926      	ldr	r1, [pc, #152]	; (8001a84 <cliShowLog+0xec>)
 80019ec:	f004 fd24 	bl	8006438 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a98      	ldrb	r0, [r3, #10]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80019fa:	461a      	mov	r2, r3
 80019fc:	4922      	ldr	r1, [pc, #136]	; (8001a88 <cliShowLog+0xf0>)
 80019fe:	f004 fd1b 	bl	8006438 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7a98      	ldrb	r0, [r3, #10]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	491f      	ldr	r1, [pc, #124]	; (8001a8c <cliShowLog+0xf4>)
 8001a10:	f004 fd12 	bl	8006438 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a98      	ldrb	r0, [r3, #10]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a1e:	461a      	mov	r2, r3
 8001a20:	491b      	ldr	r1, [pc, #108]	; (8001a90 <cliShowLog+0xf8>)
 8001a22:	f004 fd09 	bl	8006438 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e012      	b.n	8001a52 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7a98      	ldrb	r0, [r3, #10]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4613      	mov	r3, r2
 8001a34:	015b      	lsls	r3, r3, #5
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4913      	ldr	r1, [pc, #76]	; (8001a94 <cliShowLog+0xfc>)
 8001a48:	f004 fcf6 	bl	8006438 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	dbe5      	blt.n	8001a2c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7a9b      	ldrb	r3, [r3, #10]
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <cliShowLog+0x100>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fce6 	bl	8006438 <uartPrintf>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000a4a0 	.word	0x2000a4a0
 8001a78:	080159a4 	.word	0x080159a4
 8001a7c:	080159b4 	.word	0x080159b4
 8001a80:	080159c4 	.word	0x080159c4
 8001a84:	080159d4 	.word	0x080159d4
 8001a88:	080159e4 	.word	0x080159e4
 8001a8c:	080159f4 	.word	0x080159f4
 8001a90:	08015a04 	.word	0x08015a04
 8001a94:	08015a14 	.word	0x08015a14
 8001a98:	08015a24 	.word	0x08015a24

08001a9c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <cliShowPrompt+0x28>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fcc4 	bl	8006438 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <cliShowPrompt+0x2c>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 fcbe 	bl	8006438 <uartPrintf>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	08015a28 	.word	0x08015a28
 8001ac8:	08015a2c 	.word	0x08015a2c

08001acc <cliMain>:

bool cliMain(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <cliMain+0x40>)
 8001ad2:	7a1b      	ldrb	r3, [r3, #8]
 8001ad4:	f083 0301 	eor.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <cliMain+0x16>
  {
    return false;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e012      	b.n	8001b08 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <cliMain+0x40>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fc02 	bl	80062f0 <uartAvailable>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <cliMain+0x40>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 fc40 	bl	800637c <uartRead>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <cliMain+0x40>)
 8001b02:	f000 f805 	bl	8001b10 <cliUpdate>
  }

  return true;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000a4a0 	.word	0x2000a4a0

08001b10 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001b28:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7c1b      	ldrb	r3, [r3, #16]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8165 	bne.w	8001dfe <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	2b0d      	cmp	r3, #13
 8001b38:	d009      	beq.n	8001b4e <cliUpdate+0x3e>
 8001b3a:	2b0d      	cmp	r3, #13
 8001b3c:	dc02      	bgt.n	8001b44 <cliUpdate+0x34>
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d065      	beq.n	8001c0e <cliUpdate+0xfe>
 8001b42:	e0d4      	b.n	8001cee <cliUpdate+0x1de>
 8001b44:	2b1b      	cmp	r3, #27
 8001b46:	d01c      	beq.n	8001b82 <cliUpdate+0x72>
 8001b48:	2b7f      	cmp	r3, #127	; 0x7f
 8001b4a:	d01e      	beq.n	8001b8a <cliUpdate+0x7a>
 8001b4c:	e0cf      	b.n	8001cee <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fa57 	bl	800200c <cliLineAdd>
          cliRunCmd(p_cli);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fb22 	bl	80021a8 <cliRunCmd>
        }

        line->count = 0;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff8e 	bl	8001a9c <cliShowPrompt>
        break;
 8001b80:	e144      	b.n	8001e0c <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	741a      	strb	r2, [r3, #16]
        break;
 8001b88:	e140      	b.n	8001e0c <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b96:	429a      	cmp	r2, r3
 8001b98:	f080 8133 	bcs.w	8001e02 <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001bac:	2301      	movs	r3, #1
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb0:	e013      	b.n	8001bda <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	441a      	add	r2, r3
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	440b      	add	r3, r1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	69f9      	ldr	r1, [r7, #28]
 8001bce:	5c89      	ldrb	r1, [r1, r2]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bda:	7efb      	ldrb	r3, [r7, #27]
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbe7      	blt.n	8001bb2 <cliUpdate+0xa2>
          }

          line->count--;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	498e      	ldr	r1, [pc, #568]	; (8001e40 <cliUpdate+0x330>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fc16 	bl	8006438 <uartPrintf>
        }
        break;
 8001c0c:	e0f9      	b.n	8001e02 <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d055      	beq.n	8001cc4 <cliUpdate+0x1b4>
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d050      	beq.n	8001cc4 <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10e      	bne.n	8001c50 <cliUpdate+0x140>
          {
            line->count--;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c48:	461a      	mov	r2, r3
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d231      	bcs.n	8001cc4 <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c74:	e013      	b.n	8001c9e <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	441a      	add	r2, r3
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	5c89      	ldrb	r1, [r1, r2]
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9e:	7ebb      	ldrb	r3, [r7, #26]
 8001ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbe7      	blt.n	8001c76 <cliUpdate+0x166>
            }

            line->count--;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 809b 	beq.w	8001e06 <cliUpdate+0x2f6>
        {
          line->cursor--;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4957      	ldr	r1, [pc, #348]	; (8001e44 <cliUpdate+0x334>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fba6 	bl	8006438 <uartPrintf>
        }
        break;
 8001cec:	e08b      	b.n	8001e06 <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	f280 8084 	bge.w	8001e0a <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d124      	bne.n	8001d5c <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	1cf9      	adds	r1, r7, #3
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 fb54 	bl	80063c8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d26:	461a      	mov	r2, r3
 8001d28:	78f9      	ldrb	r1, [r7, #3]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d54:	461a      	mov	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d24e      	bcs.n	8001e0a <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e013      	b.n	8001daa <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d96:	4619      	mov	r1, r3
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	1acb      	subs	r3, r1, r3
 8001d9c:	69f9      	ldr	r1, [r7, #28]
 8001d9e:	5c89      	ldrb	r1, [r1, r2]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3301      	adds	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	7e7b      	ldrb	r3, [r7, #25]
 8001dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbe7      	blt.n	8001d82 <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db8:	461a      	mov	r2, r3
 8001dba:	78f9      	ldrb	r1, [r7, #3]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001de6:	461a      	mov	r2, r3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	4914      	ldr	r1, [pc, #80]	; (8001e48 <cliUpdate+0x338>)
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fb1e 	bl	8006438 <uartPrintf>
          }
        }
        break;
 8001dfc:	e005      	b.n	8001e0a <cliUpdate+0x2fa>
    }
  }
 8001dfe:	bf00      	nop
 8001e00:	e004      	b.n	8001e0c <cliUpdate+0x2fc>
        break;
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <cliUpdate+0x2fc>
        break;
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <cliUpdate+0x2fc>
        break;
 8001e0a:	bf00      	nop

  switch(p_cli->state)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7c1b      	ldrb	r3, [r3, #16]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	f200 80d3 	bhi.w	8001fbe <cliUpdate+0x4ae>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <cliUpdate+0x310>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001e4d 	.word	0x08001e4d
 8001e2c:	08001fb5 	.word	0x08001fb5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	741a      	strb	r2, [r3, #16]
      break;
 8001e36:	e0c2      	b.n	8001fbe <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	741a      	strb	r2, [r3, #16]
      break;
 8001e3e:	e0be      	b.n	8001fbe <cliUpdate+0x4ae>
 8001e40:	08015a34 	.word	0x08015a34
 8001e44:	08015a3c 	.word	0x08015a3c
 8001e48:	08015a44 	.word	0x08015a44

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	2b44      	cmp	r3, #68	; 0x44
 8001e56:	d11a      	bne.n	8001e8e <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d015      	beq.n	8001e8e <cliUpdate+0x37e>
        {
          line->cursor--;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e72:	231b      	movs	r3, #27
 8001e74:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e76:	235b      	movs	r3, #91	; 0x5b
 8001e78:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f107 010c 	add.w	r1, r7, #12
 8001e86:	2203      	movs	r2, #3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f004 fa9d 	bl	80063c8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	2b43      	cmp	r3, #67	; 0x43
 8001e92:	d11d      	bne.n	8001ed0 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d215      	bcs.n	8001ed0 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001eb4:	231b      	movs	r3, #27
 8001eb6:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001eb8:	235b      	movs	r3, #91	; 0x5b
 8001eba:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f107 010c 	add.w	r1, r7, #12
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fa7c 	bl	80063c8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b41      	cmp	r3, #65	; 0x41
 8001ed4:	d10c      	bne.n	8001ef0 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8db 	bl	8002094 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f004 faa4 	bl	8006438 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b42      	cmp	r3, #66	; 0x42
 8001ef4:	d10c      	bne.n	8001f10 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8cb 	bl	8002094 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f004 fa94 	bl	8006438 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	2b31      	cmp	r3, #49	; 0x31
 8001f14:	d10f      	bne.n	8001f36 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7818      	ldrb	r0, [r3, #0]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	461a      	mov	r2, r3
 8001f22:	492b      	ldr	r1, [pc, #172]	; (8001fd0 <cliUpdate+0x4c0>)
 8001f24:	f004 fa88 	bl	8006438 <uartPrintf>
        line->cursor = 0;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	2b34      	cmp	r3, #52	; 0x34
 8001f3a:	d13f      	bne.n	8001fbc <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d210      	bcs.n	8001f6e <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	8afa      	ldrh	r2, [r7, #22]
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <cliUpdate+0x4c4>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fa65 	bl	8006438 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	8afa      	ldrh	r2, [r7, #22]
 8001f98:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <cliUpdate+0x4c0>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fa4c 	bl	8006438 <uartPrintf>
        }
        line->cursor = line->count;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001fb2:	e003      	b.n	8001fbc <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	741a      	strb	r2, [r3, #16]
      break;
 8001fba:	e000      	b.n	8001fbe <cliUpdate+0x4ae>
      break;
 8001fbc:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fcea 	bl	8001998 <cliShowLog>

  return ret;
 8001fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	08015a50 	.word	0x08015a50
 8001fd4:	08015a58 	.word	0x08015a58

08001fd8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223f      	movs	r2, #63	; 0x3f
 8001ff4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800201a:	461a      	mov	r2, r3
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	4413      	add	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	440b      	add	r3, r1
 800202a:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4610      	mov	r0, r2
 8002032:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002036:	2243      	movs	r2, #67	; 0x43
 8002038:	4619      	mov	r1, r3
 800203a:	f010 f857 	bl	80120ec <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002044:	2b03      	cmp	r3, #3
 8002046:	d807      	bhi.n	8002058 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800204e:	3301      	adds	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800205e:	b25a      	sxtb	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800206c:	3301      	adds	r3, #1
 800206e:	425a      	negs	r2, r3
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	bf58      	it	pl
 800207a:	4253      	negpl	r3, r2
 800207c:	b2da      	uxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d076      	beq.n	8002198 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7818      	ldrb	r0, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80020be:	461a      	mov	r2, r3
 80020c0:	4937      	ldr	r1, [pc, #220]	; (80021a0 <cliLineChange+0x10c>)
 80020c2:	f004 f9b9 	bl	8006438 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7818      	ldrb	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020da:	461a      	mov	r2, r3
 80020dc:	4931      	ldr	r1, [pc, #196]	; (80021a4 <cliLineChange+0x110>)
 80020de:	f004 f9ab 	bl	8006438 <uartPrintf>
  }


  if (key_up == true)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d125      	bne.n	8002136 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020fa:	b25a      	sxtb	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002110:	4413      	add	r3, r2
 8002112:	3b01      	subs	r3, #1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800211a:	fb93 f1f2 	sdiv	r1, r3, r2
 800211e:	fb02 f201 	mul.w	r2, r2, r1
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	b25a      	sxtb	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e013      	b.n	800215e <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800213c:	3301      	adds	r3, #1
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002144:	fb93 f1f2 	sdiv	r1, r3, r2
 8002148:	fb02 f201 	mul.w	r2, r2, r1
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	b25a      	sxtb	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800215c:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	4413      	add	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	4403      	add	r3, r0
 8002170:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002174:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002178:	4611      	mov	r1, r2
 800217a:	2243      	movs	r2, #67	; 0x43
 800217c:	4618      	mov	r0, r3
 800217e:	f00f ffb5 	bl	80120ec <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8002196:	e000      	b.n	800219a <cliLineChange+0x106>
    return;
 8002198:	bf00      	nop
}
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	08015a50 	.word	0x08015a50
 80021a4:	08015a60 	.word	0x08015a60

080021a8 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80021b0:	2300      	movs	r3, #0
 80021b2:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f851 	bl	800225c <cliParseArgs>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d046      	beq.n	800224e <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80021c0:	4825      	ldr	r0, [pc, #148]	; (8002258 <cliRunCmd+0xb0>)
 80021c2:	f000 f893 	bl	80022ec <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f8b1 	bl	8002334 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e033      	b.n	8002240 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fd fff4 	bl	80001e0 <strcmp>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11d      	bne.n	800223a <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8002234:	4610      	mov	r0, r2
 8002236:	4798      	blx	r3
        break;
 8002238:	e009      	b.n	800224e <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4293      	cmp	r3, r2
 800224c:	dbc4      	blt.n	80021d8 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800224e:	7afb      	ldrb	r3, [r7, #11]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	08015a68 	.word	0x08015a68

0800225c <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800227a:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8002282:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8002284:	8afb      	ldrh	r3, [r7, #22]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <cliParseArgs+0x8c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f107 0208 	add.w	r2, r7, #8
 8002298:	4619      	mov	r1, r3
 800229a:	6938      	ldr	r0, [r7, #16]
 800229c:	f011 fae6 	bl	801386c <strtok_r>
 80022a0:	61b8      	str	r0, [r7, #24]
 80022a2:	e010      	b.n	80022c6 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80022a4:	8afb      	ldrh	r3, [r7, #22]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	82fa      	strh	r2, [r7, #22]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <cliParseArgs+0x8c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f107 0208 	add.w	r2, r7, #8
 80022bc:	4619      	mov	r1, r3
 80022be:	2000      	movs	r0, #0
 80022c0:	f011 fad4 	bl	801386c <strtok_r>
 80022c4:	61b8      	str	r0, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1eb      	bne.n	80022a4 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8afa      	ldrh	r2, [r7, #22]
 80022d0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80022d4:	8afb      	ldrh	r3, [r7, #22]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <cliParseArgs+0x82>
  {
    ret = true;
 80022da:	2301      	movs	r3, #1
 80022dc:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80022de:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000018 	.word	0x20000018

080022ec <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80022ec:	b40f      	push	{r0, r1, r2, r3}
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <cliPrintf+0x44>)
 80022fc:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f103 0011 	add.w	r0, r3, #17
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230c:	f011 fb6e 	bl	80139ec <vsniprintf>
 8002310:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	7818      	ldrb	r0, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3311      	adds	r3, #17
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4619      	mov	r1, r3
 800231e:	f004 f853 	bl	80063c8 <uartWrite>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800232c:	b004      	add	sp, #16
 800232e:	4770      	bx	lr
 8002330:	2000a4a0 	.word	0x2000a4a0

08002334 <cliToUpper>:

void cliToUpper(char *str)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800233c:	2300      	movs	r3, #0
 800233e:	81fb      	strh	r3, [r7, #14]
 8002340:	e018      	b.n	8002374 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800234c:	7b7b      	ldrb	r3, [r7, #13]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d014      	beq.n	800237c <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8002352:	7b7b      	ldrb	r3, [r7, #13]
 8002354:	2b60      	cmp	r3, #96	; 0x60
 8002356:	d905      	bls.n	8002364 <cliToUpper+0x30>
 8002358:	7b7b      	ldrb	r3, [r7, #13]
 800235a:	2b7a      	cmp	r3, #122	; 0x7a
 800235c:	d802      	bhi.n	8002364 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800235e:	7b7b      	ldrb	r3, [r7, #13]
 8002360:	3b20      	subs	r3, #32
 8002362:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	7b7a      	ldrb	r2, [r7, #13]
 800236c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	3301      	adds	r3, #1
 8002372:	81fb      	strh	r3, [r7, #14]
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d9e3      	bls.n	8002342 <cliToUpper+0xe>
 800237a:	e000      	b.n	800237e <cliToUpper+0x4a>
      break;
 800237c:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d105      	bne.n	8002390 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002384:	89fb      	ldrh	r3, [r7, #14]
 8002386:	3b01      	subs	r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
  }
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <cliArgsGetData+0x4c>)
 80023ac:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d301      	bcc.n	80023c0 <cliArgsGetData+0x24>
  {
    return 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	e00e      	b.n	80023de <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f011 fac8 	bl	8013968 <strtoul>
 80023d8:	4603      	mov	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]

  return ret;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000a4a0 	.word	0x2000a4a0

080023ec <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <cliArgsGetFloat+0x54>)
 80023fe:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	b29a      	uxth	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <cliArgsGetFloat+0x28>
  {
    return 0;
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e00d      	b.n	8002430 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f011 f9a3 	bl	8013770 <strtof>
 800242a:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	ee07 3a90 	vmov	s15, r3
}
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000a4a0 	.word	0x2000a4a0

08002444 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <cliArgsGetStr+0x44>)
 8002454:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	b29a      	uxth	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002460:	429a      	cmp	r2, r3
 8002462:	d301      	bcc.n	8002468 <cliArgsGetStr+0x24>
  {
    return 0;
 8002464:	2300      	movs	r3, #0
 8002466:	e008      	b.n	800247a <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  return ret;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000a4a0 	.word	0x2000a4a0

0800248c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <cliArgsIsStr+0x50>)
 800249e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d301      	bcc.n	80024b2 <cliArgsIsStr+0x26>
  {
    return 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e010      	b.n	80024d4 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	6838      	ldr	r0, [r7, #0]
 80024c4:	f7fd fe8c 	bl	80001e0 <strcmp>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <cliArgsIsStr+0x46>
  {
    ret = true;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000a4a0 	.word	0x2000a4a0

080024e0 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <cliKeepLoop+0x28>)
 80024e8:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fefe 	bl	80062f0 <uartAvailable>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <cliKeepLoop+0x1e>
  {
    return true;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024fe:	2300      	movs	r3, #0
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000a4a0 	.word	0x2000a4a0

0800250c <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <cliAdd+0x90>)
 800251c:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d901      	bls.n	800252c <cliAdd+0x20>
  {
    return false;
 8002528:	2300      	movs	r3, #0
 800252a:	e032      	b.n	8002592 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002532:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002534:	89fa      	ldrh	r2, [r7, #14]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	3304      	adds	r3, #4
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4618      	mov	r0, r3
 800254c:	f010 faf6 	bl	8012b3c <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002550:	89fa      	ldrh	r2, [r7, #14]
 8002552:	6939      	ldr	r1, [r7, #16]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002566:	89fa      	ldrh	r2, [r7, #14]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff feda 	bl	8002334 <cliToUpper>

  p_cli->cmd_count++;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002586:	3301      	adds	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002590:	7dfb      	ldrb	r3, [r7, #23]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000a4a0 	.word	0x2000a4a0

080025a0 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <cliShowList+0x60>)
 80025aa:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80025ac:	4815      	ldr	r0, [pc, #84]	; (8002604 <cliShowList+0x64>)
 80025ae:	f7ff fe9d 	bl	80022ec <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80025b2:	4815      	ldr	r0, [pc, #84]	; (8002608 <cliShowList+0x68>)
 80025b4:	f7ff fe9a 	bl	80022ec <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e012      	b.n	80025e4 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fe8a 	bl	80022ec <cliPrintf>
    cliPrintf("\r\n");
 80025d8:	480a      	ldr	r0, [pc, #40]	; (8002604 <cliShowList+0x64>)
 80025da:	f7ff fe87 	bl	80022ec <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3301      	adds	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	dbe5      	blt.n	80025be <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80025f2:	4806      	ldr	r0, [pc, #24]	; (800260c <cliShowList+0x6c>)
 80025f4:	f7ff fe7a 	bl	80022ec <cliPrintf>
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000a4a0 	.word	0x2000a4a0
 8002604:	08015a68 	.word	0x08015a68
 8002608:	08015a6c 	.word	0x08015a6c
 800260c:	08015a8c 	.word	0x08015a8c

08002610 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002618:	2310      	movs	r3, #16
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002630:	4840      	ldr	r0, [pc, #256]	; (8002734 <cliMemoryDump+0x124>)
 8002632:	f7ff fe5b 	bl	80022ec <cliPrintf>
 8002636:	e07a      	b.n	800272e <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b01      	cmp	r3, #1
 800263c:	dd09      	ble.n	8002652 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3304      	adds	r3, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f011 f98d 	bl	8013968 <strtoul>
 800264e:	4603      	mov	r3, r0
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f011 f984 	bl	8013968 <strtoul>
 8002660:	4603      	mov	r3, r0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002668:	4833      	ldr	r0, [pc, #204]	; (8002738 <cliMemoryDump+0x128>)
 800266a:	f7ff fe3f 	bl	80022ec <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002672:	e058      	b.n	8002726 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d104      	bne.n	8002688 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	482e      	ldr	r0, [pc, #184]	; (800273c <cliMemoryDump+0x12c>)
 8002684:	f7ff fe32 	bl	80022ec <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	482c      	ldr	r0, [pc, #176]	; (8002740 <cliMemoryDump+0x130>)
 8002690:	f7ff fe2c 	bl	80022ec <cliPrintf>

    if ((idx%4) == 3)
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	425a      	negs	r2, r3
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	bf58      	it	pl
 80026a2:	4253      	negpl	r3, r2
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d138      	bne.n	800271a <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80026a8:	4826      	ldr	r0, [pc, #152]	; (8002744 <cliMemoryDump+0x134>)
 80026aa:	f7ff fe1f 	bl	80022ec <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	e02c      	b.n	800270e <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e01d      	b.n	80026fc <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80026c0:	f107 020c 	add.w	r2, r7, #12
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b1f      	cmp	r3, #31
 80026cc:	d910      	bls.n	80026f0 <cliMemoryDump+0xe0>
 80026ce:	f107 020c 	add.w	r2, r7, #12
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b7e      	cmp	r3, #126	; 0x7e
 80026da:	d809      	bhi.n	80026f0 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80026dc:	f107 020c 	add.w	r2, r7, #12
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	4817      	ldr	r0, [pc, #92]	; (8002748 <cliMemoryDump+0x138>)
 80026ea:	f7ff fdff 	bl	80022ec <cliPrintf>
 80026ee:	e002      	b.n	80026f6 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80026f0:	4816      	ldr	r0, [pc, #88]	; (800274c <cliMemoryDump+0x13c>)
 80026f2:	f7ff fdfb 	bl	80022ec <cliPrintf>
        for (i=0;i<4;i++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	ddde      	ble.n	80026c0 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3304      	adds	r3, #4
 8002706:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	3301      	adds	r3, #1
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2b03      	cmp	r3, #3
 8002712:	ddcf      	ble.n	80026b4 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002714:	480e      	ldr	r0, [pc, #56]	; (8002750 <cliMemoryDump+0x140>)
 8002716:	f7ff fde9 	bl	80022ec <cliPrintf>
    }
    addr++;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	3304      	adds	r3, #4
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	3301      	adds	r3, #1
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	429a      	cmp	r2, r3
 800272c:	dba2      	blt.n	8002674 <cliMemoryDump+0x64>
  }
}
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	08015aac 	.word	0x08015aac
 8002738:	08015ac0 	.word	0x08015ac0
 800273c:	08015ac8 	.word	0x08015ac8
 8002740:	08015ad4 	.word	0x08015ad4
 8002744:	08015adc 	.word	0x08015adc
 8002748:	08015ae0 	.word	0x08015ae0
 800274c:	08015ae4 	.word	0x08015ae4
 8002750:	08015ae8 	.word	0x08015ae8

08002754 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 800275a:	2305      	movs	r3, #5
 800275c:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 800275e:	2201      	movs	r2, #1
 8002760:	4939      	ldr	r1, [pc, #228]	; (8002848 <Ds18b20_Init+0xf4>)
 8002762:	483a      	ldr	r0, [pc, #232]	; (800284c <Ds18b20_Init+0xf8>)
 8002764:	f001 ff4b 	bl	80045fe <OneWire_Init>
		TempSensorCount = 0;
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <Ds18b20_Init+0xfc>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 800276e:	e002      	b.n	8002776 <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002770:	2064      	movs	r0, #100	; 0x64
 8002772:	f008 ff01 	bl	800b578 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8002776:	f008 fef3 	bl	800b560 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002780:	429a      	cmp	r2, r3
 8002782:	d9f5      	bls.n	8002770 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8002784:	4831      	ldr	r0, [pc, #196]	; (800284c <Ds18b20_Init+0xf8>)
 8002786:	f002 f827 	bl	80047d8 <OneWire_First>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <Ds18b20_Init+0x100>)
 8002790:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002792:	e019      	b.n	80027c8 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8002794:	2064      	movs	r0, #100	; 0x64
 8002796:	f008 feef 	bl	800b578 <HAL_Delay>
			TempSensorCount++;
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <Ds18b20_Init+0xfc>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <Ds18b20_Init+0xfc>)
 80027a4:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <Ds18b20_Init+0xfc>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <Ds18b20_Init+0x104>)
 80027b0:	4413      	add	r3, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	4825      	ldr	r0, [pc, #148]	; (800284c <Ds18b20_Init+0xf8>)
 80027b6:	f002 f923 	bl	8004a00 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80027ba:	4824      	ldr	r0, [pc, #144]	; (800284c <Ds18b20_Init+0xf8>)
 80027bc:	f002 f81c 	bl	80047f8 <OneWire_Next>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <Ds18b20_Init+0x100>)
 80027c6:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <Ds18b20_Init+0x100>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e1      	bne.n	8002794 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <Ds18b20_Init+0xfc>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	3b01      	subs	r3, #1
 80027dc:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1bc      	bne.n	800275e <Ds18b20_Init+0xa>
 80027e4:	e000      	b.n	80027e8 <Ds18b20_Init+0x94>
			break;
 80027e6:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <Ds18b20_Init+0x9e>
		return false;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e026      	b.n	8002840 <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	71bb      	strb	r3, [r7, #6]
 80027f6:	e019      	b.n	800282c <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80027f8:	2032      	movs	r0, #50	; 0x32
 80027fa:	f008 febd 	bl	800b578 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <Ds18b20_Init+0x104>)
 8002804:	4413      	add	r3, r2
 8002806:	220c      	movs	r2, #12
 8002808:	4619      	mov	r1, r3
 800280a:	4810      	ldr	r0, [pc, #64]	; (800284c <Ds18b20_Init+0xf8>)
 800280c:	f000 f9cc 	bl	8002ba8 <DS18B20_SetResolution>
		HAL_Delay(50);
 8002810:	2032      	movs	r0, #50	; 0x32
 8002812:	f008 feb1 	bl	800b578 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <Ds18b20_Init+0x104>)
 800281c:	4413      	add	r3, r2
 800281e:	4619      	mov	r1, r3
 8002820:	480a      	ldr	r0, [pc, #40]	; (800284c <Ds18b20_Init+0xf8>)
 8002822:	f000 fa5a 	bl	8002cda <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002826:	79bb      	ldrb	r3, [r7, #6]
 8002828:	3301      	adds	r3, #1
 800282a:	71bb      	strb	r3, [r7, #6]
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <Ds18b20_Init+0xfc>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	79ba      	ldrb	r2, [r7, #6]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3e0      	bcc.n	80027f8 <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 8002836:	4909      	ldr	r1, [pc, #36]	; (800285c <Ds18b20_Init+0x108>)
 8002838:	4809      	ldr	r0, [pc, #36]	; (8002860 <Ds18b20_Init+0x10c>)
 800283a:	f7ff fe67 	bl	800250c <cliAdd>
	#endif

	return true;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40020400 	.word	0x40020400
 800284c:	2000a8f8 	.word	0x2000a8f8
 8002850:	20000260 	.word	0x20000260
 8002854:	2000a8e4 	.word	0x2000a8e4
 8002858:	2000a8e8 	.word	0x2000a8e8
 800285c:	08002da9 	.word	0x08002da9
 8002860:	08015af8 	.word	0x08015af8

08002864 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <Ds18b20_ManualConvert+0x104>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <Ds18b20_ManualConvert+0x14>
 8002872:	2b01      	cmp	r3, #1
 8002874:	d013      	beq.n	800289e <Ds18b20_ManualConvert+0x3a>
 8002876:	e072      	b.n	800295e <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002878:	4b3c      	ldr	r3, [pc, #240]	; (800296c <Ds18b20_ManualConvert+0x108>)
 800287a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800287e:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8002880:	483b      	ldr	r0, [pc, #236]	; (8002970 <Ds18b20_ManualConvert+0x10c>)
 8002882:	f000 f87d 	bl	8002980 <DS18B20_StartAll>
	  		  pre_time = millis();
 8002886:	f7fe fccc 	bl	8001222 <millis>
 800288a:	4602      	mov	r2, r0
 800288c:	4b39      	ldr	r3, [pc, #228]	; (8002974 <Ds18b20_ManualConvert+0x110>)
 800288e:	601a      	str	r2, [r3, #0]
	  		  state++;
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <Ds18b20_ManualConvert+0x104>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <Ds18b20_ManualConvert+0x104>)
 800289a:	701a      	strb	r2, [r3, #0]
	  		  break;
 800289c:	e05f      	b.n	800295e <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 800289e:	f7fe fcc0 	bl	8001222 <millis>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b33      	ldr	r3, [pc, #204]	; (8002974 <Ds18b20_ManualConvert+0x110>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	d956      	bls.n	800295c <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 80028ae:	4830      	ldr	r0, [pc, #192]	; (8002970 <Ds18b20_ManualConvert+0x10c>)
 80028b0:	f000 fa6e 	bl	8002d90 <DS18B20_AllDone>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d112      	bne.n	80028e0 <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 80028ba:	f7fe fcb2 	bl	8001222 <millis>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <Ds18b20_ManualConvert+0x110>)
 80028c2:	601a      	str	r2, [r3, #0]
					Ds18b20Timeout-=1;
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <Ds18b20_ManualConvert+0x108>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <Ds18b20_ManualConvert+0x108>)
 80028ce:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <Ds18b20_ManualConvert+0x108>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d141      	bne.n	800295c <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <Ds18b20_ManualConvert+0x104>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
						break;
 80028de:	e03e      	b.n	800295e <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <Ds18b20_ManualConvert+0x108>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d024      	beq.n	8002932 <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	e01b      	b.n	8002926 <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4a21      	ldr	r2, [pc, #132]	; (8002978 <Ds18b20_ManualConvert+0x114>)
 80028f4:	1899      	adds	r1, r3, r2
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3308      	adds	r3, #8
 80028fc:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <Ds18b20_ManualConvert+0x114>)
 80028fe:	4413      	add	r3, r2
 8002900:	79fc      	ldrb	r4, [r7, #7]
 8002902:	461a      	mov	r2, r3
 8002904:	481a      	ldr	r0, [pc, #104]	; (8002970 <Ds18b20_ManualConvert+0x10c>)
 8002906:	f000 f84f 	bl	80029a8 <DS18B20_Read>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <Ds18b20_ManualConvert+0x114>)
 8002910:	0123      	lsls	r3, r4, #4
 8002912:	4413      	add	r3, r2
 8002914:	330c      	adds	r3, #12
 8002916:	460a      	mov	r2, r1
 8002918:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <Ds18b20_ManualConvert+0x104>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	3301      	adds	r3, #1
 8002924:	71fb      	strb	r3, [r7, #7]
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <Ds18b20_ManualConvert+0x118>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3de      	bcc.n	80028ee <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8002930:	e014      	b.n	800295c <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002932:	2300      	movs	r3, #0
 8002934:	71bb      	strb	r3, [r7, #6]
 8002936:	e00c      	b.n	8002952 <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <Ds18b20_ManualConvert+0x114>)
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	330c      	adds	r3, #12
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <Ds18b20_ManualConvert+0x104>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	3301      	adds	r3, #1
 8002950:	71bb      	strb	r3, [r7, #6]
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <Ds18b20_ManualConvert+0x118>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	79ba      	ldrb	r2, [r7, #6]
 8002958:	429a      	cmp	r2, r3
 800295a:	d3ed      	bcc.n	8002938 <Ds18b20_ManualConvert+0xd4>
			  break;
 800295c:	bf00      	nop
	  }
	#endif
	  return true;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bd90      	pop	{r4, r7, pc}
 8002968:	20000264 	.word	0x20000264
 800296c:	20000262 	.word	0x20000262
 8002970:	2000a8f8 	.word	0x2000a8f8
 8002974:	20000268 	.word	0x20000268
 8002978:	2000a8e8 	.word	0x2000a8e8
 800297c:	20000260 	.word	0x20000260

08002980 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f001 fe61 	bl	8004650 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800298e:	21cc      	movs	r1, #204	; 0xcc
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f001 fee3 	bl	800475c <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002996:	2144      	movs	r1, #68	; 0x44
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 fedf 	bl	800475c <OneWire_WriteByte>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b08b      	sub	sp, #44	; 0x2c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 80029be:	68b8      	ldr	r0, [r7, #8]
 80029c0:	f000 f97a 	bl	8002cb8 <DS18B20_Is>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <DS18B20_Read+0x26>
		return false;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e0e1      	b.n	8002b92 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f001 fe9a 	bl	8004708 <OneWire_ReadBit>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 80029da:	2300      	movs	r3, #0
 80029dc:	e0d9      	b.n	8002b92 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f001 fe36 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f001 ffec 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80029ec:	21be      	movs	r1, #190	; 0xbe
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f001 feb4 	bl	800475c <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e00d      	b.n	8002a16 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80029fa:	7ffc      	ldrb	r4, [r7, #31]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f001 feca 	bl	8004796 <OneWire_ReadByte>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0a:	4423      	add	r3, r4
 8002a0c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
 8002a12:	3301      	adds	r3, #1
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d9ee      	bls.n	80029fa <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2108      	movs	r1, #8
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 f808 	bl	8004a38 <OneWire_CRC8>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002a2c:	7f3b      	ldrb	r3, [r7, #28]
 8002a2e:	7fba      	ldrb	r2, [r7, #30]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e0ac      	b.n	8002b92 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002a38:	7d3b      	ldrb	r3, [r7, #20]
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	7d7b      	ldrb	r3, [r7, #21]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f001 fe01 	bl	8004650 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002a4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da05      	bge.n	8002a62 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a58:	425b      	negs	r3, r3
 8002a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002a62:	7e3b      	ldrb	r3, [r7, #24]
 8002a64:	115b      	asrs	r3, r3, #5
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3309      	adds	r3, #9
 8002a70:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a8a:	b25a      	sxtb	r2, r3
 8002a8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002a96:	7f7b      	ldrb	r3, [r7, #29]
 8002a98:	3b09      	subs	r3, #9
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d858      	bhi.n	8002b50 <DS18B20_Read+0x1a8>
 8002a9e:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <DS18B20_Read+0xfc>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002add 	.word	0x08002add
 8002aac:	08002b05 	.word	0x08002b05
 8002ab0:	08002b2d 	.word	0x08002b2d
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ab6:	08db      	lsrs	r3, r3, #3
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ace:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002ada:	e03e      	b.n	8002b5a <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002adc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002af2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002af6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afe:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002b02:	e02a      	b.n	8002b5a <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002b04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002b1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b1e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002b2a:	e016      	b.n	8002b5a <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002b2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002b3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b42:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b9c <DS18B20_Read+0x1f4>
 8002b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4a:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002b4e:	e004      	b.n	8002b5a <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <DS18B20_Read+0x1f8>)
 8002b52:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002b5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002b72:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002b7a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002ba4 <DS18B20_Read+0x1fc>
 8002b7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b86:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	372c      	adds	r7, #44	; 0x2c
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	3d800000 	.word	0x3d800000
 8002ba0:	437f0000 	.word	0x437f0000
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002bb6:	68b8      	ldr	r0, [r7, #8]
 8002bb8:	f000 f87e 	bl	8002cb8 <DS18B20_Is>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <DS18B20_SetResolution+0x1e>
		return 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e074      	b.n	8002cb0 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f001 fd42 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f001 fef8 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002bd4:	21be      	movs	r1, #190	; 0xbe
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f001 fdc0 	bl	800475c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f001 fdda 	bl	8004796 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f001 fdd7 	bl	8004796 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f001 fdd4 	bl	8004796 <OneWire_ReadByte>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f001 fdcf 	bl	8004796 <OneWire_ReadByte>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f001 fdca 	bl	8004796 <OneWire_ReadByte>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d108      	bne.n	8002c1e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c12:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	f023 0320 	bic.w	r3, r3, #32
 8002c1a:	75fb      	strb	r3, [r7, #23]
 8002c1c:	e022      	b.n	8002c64 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	2b0a      	cmp	r3, #10
 8002c22:	d108      	bne.n	8002c36 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	f043 0320 	orr.w	r3, r3, #32
 8002c32:	75fb      	strb	r3, [r7, #23]
 8002c34:	e016      	b.n	8002c64 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b0b      	cmp	r3, #11
 8002c3a:	d108      	bne.n	8002c4e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c42:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	f023 0320 	bic.w	r3, r3, #32
 8002c4a:	75fb      	strb	r3, [r7, #23]
 8002c4c:	e00a      	b.n	8002c64 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d107      	bne.n	8002c64 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f001 fcf3 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f001 fea9 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002c72:	214e      	movs	r1, #78	; 0x4e
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f001 fd71 	bl	800475c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002c7a:	7dbb      	ldrb	r3, [r7, #22]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 fd6c 	bl	800475c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002c84:	7d7b      	ldrb	r3, [r7, #21]
 8002c86:	4619      	mov	r1, r3
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f001 fd67 	bl	800475c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	4619      	mov	r1, r3
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f001 fd62 	bl	800475c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f001 fcd9 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 fe8f 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002ca6:	2148      	movs	r1, #72	; 0x48
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f001 fd57 	bl	800475c <OneWire_WriteByte>

	return 1;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b28      	cmp	r3, #40	; 0x28
 8002cc6:	d101      	bne.n	8002ccc <DS18B20_Is+0x14>
		return 1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <DS18B20_Is+0x16>

	return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002ce4:	6838      	ldr	r0, [r7, #0]
 8002ce6:	f7ff ffe7 	bl	8002cb8 <DS18B20_Is>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e049      	b.n	8002d88 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f001 fcab 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f001 fe61 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002d02:	21be      	movs	r1, #190	; 0xbe
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f001 fd29 	bl	800475c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f001 fd43 	bl	8004796 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f001 fd40 	bl	8004796 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f001 fd3d 	bl	8004796 <OneWire_ReadByte>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 fd38 	bl	8004796 <OneWire_ReadByte>
 8002d26:	4603      	mov	r3, r0
 8002d28:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 fd33 	bl	8004796 <OneWire_ReadByte>
 8002d30:	4603      	mov	r3, r0
 8002d32:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002d34:	237d      	movs	r3, #125	; 0x7d
 8002d36:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002d38:	23c9      	movs	r3, #201	; 0xc9
 8002d3a:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f001 fc87 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f001 fe3d 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002d4a:	214e      	movs	r1, #78	; 0x4e
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f001 fd05 	bl	800475c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f001 fd00 	bl	800475c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 fcfb 	bl	800475c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002d66:	7b7b      	ldrb	r3, [r7, #13]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f001 fcf6 	bl	800475c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f001 fc6d 	bl	8004650 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f001 fe23 	bl	80049c4 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002d7e:	2148      	movs	r1, #72	; 0x48
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f001 fceb 	bl	800475c <OneWire_WriteByte>

	return 1;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f001 fcb5 	bl	8004708 <OneWire_ReadBit>
 8002d9e:	4603      	mov	r3, r0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d11d      	bne.n	8002df8 <cliDS18B20+0x50>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4914      	ldr	r1, [pc, #80]	; (8002e14 <cliDS18B20+0x6c>)
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4798      	blx	r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <cliDS18B20+0x50>
  {

	  while(cliKeepLoop())
 8002dcc:	e00d      	b.n	8002dea <cliDS18B20+0x42>
	  {
		  Ds18b20_ManualConvert();
 8002dce:	f7ff fd49 	bl	8002864 <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <cliDS18B20+0x70>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fbce 	bl	8000578 <__aeabi_f2d>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	460c      	mov	r4, r1
 8002de0:	461a      	mov	r2, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	480d      	ldr	r0, [pc, #52]	; (8002e1c <cliDS18B20+0x74>)
 8002de6:	f7ff fa81 	bl	80022ec <cliPrintf>
	  while(cliKeepLoop())
 8002dea:	f7ff fb79 	bl	80024e0 <cliKeepLoop>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ec      	bne.n	8002dce <cliDS18B20+0x26>
	  }
    ret = true;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <cliDS18B20+0x62>
  {
    cliPrintf("DS18B20 test\n");
 8002e04:	4806      	ldr	r0, [pc, #24]	; (8002e20 <cliDS18B20+0x78>)
 8002e06:	f7ff fa71 	bl	80022ec <cliPrintf>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08015b00 	.word	0x08015b00
 8002e18:	2000a8e8 	.word	0x2000a8e8
 8002e1c:	08015b08 	.word	0x08015b08
 8002e20:	08015b20 	.word	0x08015b20

08002e24 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  bool ret = true;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002e2e:	490d      	ldr	r1, [pc, #52]	; (8002e64 <fatfsInit+0x40>)
 8002e30:	480d      	ldr	r0, [pc, #52]	; (8002e68 <fatfsInit+0x44>)
 8002e32:	f008 fa43 	bl	800b2bc <FATFS_LinkDriver>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4909      	ldr	r1, [pc, #36]	; (8002e64 <fatfsInit+0x40>)
 8002e40:	480a      	ldr	r0, [pc, #40]	; (8002e6c <fatfsInit+0x48>)
 8002e42:	f006 fe33 	bl	8009aac <f_mount>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <fatfsInit+0x2e>
    {
      is_init = true;
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <fatfsInit+0x4c>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8002e52:	4908      	ldr	r1, [pc, #32]	; (8002e74 <fatfsInit+0x50>)
 8002e54:	4808      	ldr	r0, [pc, #32]	; (8002e78 <fatfsInit+0x54>)
 8002e56:	f7ff fb59 	bl	800250c <cliAdd>
#endif

  return ret;
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2000a90c 	.word	0x2000a90c
 8002e68:	08015ff8 	.word	0x08015ff8
 8002e6c:	2000a910 	.word	0x2000a910
 8002e70:	2000026c 	.word	0x2000026c
 8002e74:	08002f2d 	.word	0x08002f2d
 8002e78:	08015b30 	.word	0x08015b30

08002e7c <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0d6      	sub	sp, #344	; 0x158
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f007 fd85 	bl	800a99e <f_opendir>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 8002e9a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d138      	bne.n	8002f14 <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002ea2:	f107 0208 	add.w	r2, r7, #8
 8002ea6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f007 fe1f 	bl	800aaf0 <f_readdir>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002eb8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d124      	bne.n	8002f0a <fatfsDir+0x8e>
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	7d9b      	ldrb	r3, [r3, #22]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01f      	beq.n	8002f0a <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	7a1b      	ldrb	r3, [r3, #8]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <fatfsDir+0x70>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8002ed8:	f107 0308 	add.w	r3, r7, #8
 8002edc:	f103 0216 	add.w	r2, r3, #22
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	480f      	ldr	r0, [pc, #60]	; (8002f24 <fatfsDir+0xa8>)
 8002ee6:	f7ff fa01 	bl	80022ec <cliPrintf>
 8002eea:	e7da      	b.n	8002ea2 <fatfsDir+0x26>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8002eec:	f107 0308 	add.w	r3, r7, #8
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f107 0308 	add.w	r3, r7, #8
 8002ef8:	f103 0216 	add.w	r2, r3, #22
 8002efc:	1d39      	adds	r1, r7, #4
 8002efe:	4603      	mov	r3, r0
 8002f00:	6809      	ldr	r1, [r1, #0]
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <fatfsDir+0xac>)
 8002f04:	f7ff f9f2 	bl	80022ec <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002f08:	e7cb      	b.n	8002ea2 <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 8002f0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f007 fdc8 	bl	800aaa4 <f_closedir>
  }

  return res;
 8002f14:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08015b38 	.word	0x08015b38
 8002f28:	08015b44 	.word	0x08015b44

08002f2c <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d14a      	bne.n	8002fde <cliFatfs+0xb2>
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	498b      	ldr	r1, [pc, #556]	; (800317c <cliFatfs+0x250>)
 8002f50:	2000      	movs	r0, #0
 8002f52:	4798      	blx	r3
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d041      	beq.n	8002fde <cliFatfs+0xb2>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8002f5a:	4b89      	ldr	r3, [pc, #548]	; (8003180 <cliFatfs+0x254>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4888      	ldr	r0, [pc, #544]	; (8003184 <cliFatfs+0x258>)
 8002f62:	f7ff f9c3 	bl	80022ec <cliPrintf>

    if (is_init == true)
 8002f66:	4b86      	ldr	r3, [pc, #536]	; (8003180 <cliFatfs+0x254>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d034      	beq.n	8002fd8 <cliFatfs+0xac>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8002f6e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8002f72:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002f76:	4619      	mov	r1, r3
 8002f78:	4883      	ldr	r0, [pc, #524]	; (8003188 <cliFatfs+0x25c>)
 8002f7a:	f007 fe06 	bl	800ab8a <f_getfree>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 8002f84:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11f      	bne.n	8002fcc <cliFatfs+0xa0>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8002f8c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	3b02      	subs	r3, #2
 8002f94:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002f98:	8952      	ldrh	r2, [r2, #10]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8002fa2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002fa6:	895b      	ldrh	r3, [r3, #10]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002fae:	fb03 f302 	mul.w	r3, r3, r2
 8002fb2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8002fb6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002fba:	0859      	lsrs	r1, r3, #1
 8002fbc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4871      	ldr	r0, [pc, #452]	; (800318c <cliFatfs+0x260>)
 8002fc6:	f7ff f991 	bl	80022ec <cliPrintf>
 8002fca:	e005      	b.n	8002fd8 <cliFatfs+0xac>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8002fcc:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	486f      	ldr	r0, [pc, #444]	; (8003190 <cliFatfs+0x264>)
 8002fd4:	f7ff f98a 	bl	80022ec <cliPrintf>
       }
    }

    ret = true;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d11b      	bne.n	8003020 <cliFatfs+0xf4>
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4969      	ldr	r1, [pc, #420]	; (8003194 <cliFatfs+0x268>)
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4798      	blx	r3
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <cliFatfs+0xf4>
  {
    FRESULT res;

    res = fatfsDir("/");
 8002ffa:	4867      	ldr	r0, [pc, #412]	; (8003198 <cliFatfs+0x26c>)
 8002ffc:	f7ff ff3e 	bl	8002e7c <fatfsDir>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 8003006:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <cliFatfs+0xee>
    {
      cliPrintf(" err : %d\n", res);
 800300e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003012:	4619      	mov	r1, r3
 8003014:	485e      	ldr	r0, [pc, #376]	; (8003190 <cliFatfs+0x264>)
 8003016:	f7ff f969 	bl	80022ec <cliPrintf>
    }

    ret = true;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 8092 	bne.w	8003150 <cliFatfs+0x224>
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	495a      	ldr	r1, [pc, #360]	; (800319c <cliFatfs+0x270>)
 8003034:	2000      	movs	r0, #0
 8003036:	4798      	blx	r3
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8088 	beq.w	8003150 <cliFatfs+0x224>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8003040:	f7fe f8ef 	bl	8001222 <millis>
 8003044:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	220b      	movs	r2, #11
 800304e:	4954      	ldr	r1, [pc, #336]	; (80031a0 <cliFatfs+0x274>)
 8003050:	4618      	mov	r0, r3
 8003052:	f006 fd71 	bl	8009b38 <f_open>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 800305c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003060:	2b00      	cmp	r3, #0
 8003062:	d165      	bne.n	8003130 <cliFatfs+0x204>
    {
      f_printf(&log_file, "test1, ");
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	494e      	ldr	r1, [pc, #312]	; (80031a4 <cliFatfs+0x278>)
 800306a:	4618      	mov	r0, r3
 800306c:	f007 feba 	bl	800ade4 <f_printf>
      f_printf(&log_file, "test2, ");
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	494c      	ldr	r1, [pc, #304]	; (80031a8 <cliFatfs+0x27c>)
 8003076:	4618      	mov	r0, r3
 8003078:	f007 feb4 	bl	800ade4 <f_printf>
      f_printf(&log_file, "test3, ");
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	494a      	ldr	r1, [pc, #296]	; (80031ac <cliFatfs+0x280>)
 8003082:	4618      	mov	r0, r3
 8003084:	f007 feae 	bl	800ade4 <f_printf>
      f_printf(&log_file, ", ");
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	4948      	ldr	r1, [pc, #288]	; (80031b0 <cliFatfs+0x284>)
 800308e:	4618      	mov	r0, r3
 8003090:	f007 fea8 	bl	800ade4 <f_printf>
      f_printf(&log_file, "\n");
 8003094:	f107 0308 	add.w	r3, r7, #8
 8003098:	4946      	ldr	r1, [pc, #280]	; (80031b4 <cliFatfs+0x288>)
 800309a:	4618      	mov	r0, r3
 800309c:	f007 fea2 	bl	800ade4 <f_printf>

      for (int i=0; i<8; i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80030a6:	e00c      	b.n	80030c2 <cliFatfs+0x196>
      {
        f_printf(&log_file, "%d \n", i);
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80030b0:	4941      	ldr	r1, [pc, #260]	; (80031b8 <cliFatfs+0x28c>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	f007 fe96 	bl	800ade4 <f_printf>
      for (int i=0; i<8; i++)
 80030b8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80030bc:	3301      	adds	r3, #1
 80030be:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80030c2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80030c6:	2b07      	cmp	r3, #7
 80030c8:	ddee      	ble.n	80030a8 <cliFatfs+0x17c>
      }

      f_rewind(&log_file);
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f007 fa5b 	bl	800a58c <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 80030d6:	e01c      	b.n	8003112 <cliFatfs+0x1e6>
      {
        len = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 80030de:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80030e2:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80030e6:	f107 0008 	add.w	r0, r7, #8
 80030ea:	2201      	movs	r2, #1
 80030ec:	f006 fef2 	bl	8009ed4 <f_read>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 80030f6:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <cliFatfs+0x1f2>
        {
          break;
        }
        if (len == 0)
 80030fe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <cliFatfs+0x1f6>
        {
          break;
        }

        cliPrintf("%c", data);
 8003106:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 800310a:	4619      	mov	r1, r3
 800310c:	482b      	ldr	r0, [pc, #172]	; (80031bc <cliFatfs+0x290>)
 800310e:	f7ff f8ed 	bl	80022ec <cliPrintf>
      while(cliKeepLoop())
 8003112:	f7ff f9e5 	bl	80024e0 <cliKeepLoop>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1dd      	bne.n	80030d8 <cliFatfs+0x1ac>
 800311c:	e002      	b.n	8003124 <cliFatfs+0x1f8>
          break;
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <cliFatfs+0x1f8>
          break;
 8003122:	bf00      	nop
      }

      f_close(&log_file);
 8003124:	f107 0308 	add.w	r3, r7, #8
 8003128:	4618      	mov	r0, r3
 800312a:	f007 fa05 	bl	800a538 <f_close>
 800312e:	e002      	b.n	8003136 <cliFatfs+0x20a>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 8003130:	4823      	ldr	r0, [pc, #140]	; (80031c0 <cliFatfs+0x294>)
 8003132:	f7ff f8db 	bl	80022ec <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8003136:	f7fe f874 	bl	8001222 <millis>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	4619      	mov	r1, r3
 8003144:	481f      	ldr	r0, [pc, #124]	; (80031c4 <cliFatfs+0x298>)
 8003146:	f7ff f8d1 	bl	80022ec <cliPrintf>

    ret = true;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8003150:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <cliFatfs+0x244>
  {
    cliPrintf("fatfs info\n");
 800315e:	481a      	ldr	r0, [pc, #104]	; (80031c8 <cliFatfs+0x29c>)
 8003160:	f7ff f8c4 	bl	80022ec <cliPrintf>
    cliPrintf("fatfs dir\n");
 8003164:	4819      	ldr	r0, [pc, #100]	; (80031cc <cliFatfs+0x2a0>)
 8003166:	f7ff f8c1 	bl	80022ec <cliPrintf>
    cliPrintf("fatfs test\n");
 800316a:	4819      	ldr	r0, [pc, #100]	; (80031d0 <cliFatfs+0x2a4>)
 800316c:	f7ff f8be 	bl	80022ec <cliPrintf>
  }
}
 8003170:	bf00      	nop
 8003172:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	08015b58 	.word	0x08015b58
 8003180:	2000026c 	.word	0x2000026c
 8003184:	08015b60 	.word	0x08015b60
 8003188:	08015b74 	.word	0x08015b74
 800318c:	08015b78 	.word	0x08015b78
 8003190:	08015bac 	.word	0x08015bac
 8003194:	08015bb8 	.word	0x08015bb8
 8003198:	08015bbc 	.word	0x08015bbc
 800319c:	08015bc0 	.word	0x08015bc0
 80031a0:	08015bc8 	.word	0x08015bc8
 80031a4:	08015bd0 	.word	0x08015bd0
 80031a8:	08015bd8 	.word	0x08015bd8
 80031ac:	08015be0 	.word	0x08015be0
 80031b0:	08015be8 	.word	0x08015be8
 80031b4:	08015bec 	.word	0x08015bec
 80031b8:	08015bf0 	.word	0x08015bf0
 80031bc:	08015bf8 	.word	0x08015bf8
 80031c0:	08015bfc 	.word	0x08015bfc
 80031c4:	08015c0c 	.word	0x08015c0c
 80031c8:	08015c14 	.word	0x08015c14
 80031cc:	08015c20 	.word	0x08015c20
 80031d0:	08015c2c 	.word	0x08015c2c

080031d4 <gpioInit>:
#endif



bool gpioInit(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
  bool ret = true;
 80031da:	2301      	movs	r3, #1
 80031dc:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <gpioInit+0xa0>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a23      	ldr	r2, [pc, #140]	; (8003274 <gpioInit+0xa0>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6313      	str	r3, [r2, #48]	; 0x30
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <gpioInit+0xa0>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <gpioInit+0xa0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <gpioInit+0xa0>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <gpioInit+0xa0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e01e      	b.n	800325a <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	b2d8      	uxtb	r0, r3
 8003220:	4915      	ldr	r1, [pc, #84]	; (8003278 <gpioInit+0xa4>)
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3308      	adds	r3, #8
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	f000 f826 	bl	8003284 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	490e      	ldr	r1, [pc, #56]	; (8003278 <gpioInit+0xa4>)
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	330b      	adds	r3, #11
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4619      	mov	r1, r3
 8003250:	f000 f88a 	bl	8003368 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	dddd      	ble.n	800321c <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <gpioInit+0xa8>)
 8003262:	4807      	ldr	r0, [pc, #28]	; (8003280 <gpioInit+0xac>)
 8003264:	f7ff f952 	bl	800250c <cliAdd>
#endif

  return ret;
 8003268:	7afb      	ldrb	r3, [r7, #11]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	08015f00 	.word	0x08015f00
 800327c:	08003481 	.word	0x08003481
 8003280:	08015c38 	.word	0x08015c38

08003284 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	460a      	mov	r2, r1
 800328e:	71fb      	strb	r3, [r7, #7]
 8003290:	4613      	mov	r3, r2
 8003292:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0308 	add.w	r3, r7, #8
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d901      	bls.n	80032b2 <gpioPinMode+0x2e>
  {
    return false;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e054      	b.n	800335c <gpioPinMode+0xd8>
  }

  switch(mode)
 80032b2:	79bb      	ldrb	r3, [r7, #6]
 80032b4:	2b06      	cmp	r3, #6
 80032b6:	d838      	bhi.n	800332a <gpioPinMode+0xa6>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <gpioPinMode+0x3c>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	080032e7 	.word	0x080032e7
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	08003305 	.word	0x08003305
 80032d4:	0800330f 	.word	0x0800330f
 80032d8:	08003319 	.word	0x08003319
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
      break;
 80032e4:	e021      	b.n	800332a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ea:	2301      	movs	r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
      break;
 80032ee:	e01c      	b.n	800332a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032f4:	2302      	movs	r3, #2
 80032f6:	613b      	str	r3, [r7, #16]
      break;
 80032f8:	e017      	b.n	800332a <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
      break;
 8003302:	e012      	b.n	800332a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	2301      	movs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003308:	2301      	movs	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
      break;
 800330c:	e00d      	b.n	800332a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330e:	2301      	movs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003312:	2302      	movs	r3, #2
 8003314:	613b      	str	r3, [r7, #16]
      break;
 8003316:	e008      	b.n	800332a <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
      break;
 8003328:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 800332a:	79fa      	ldrb	r2, [r7, #7]
 800332c:	490d      	ldr	r1, [pc, #52]	; (8003364 <gpioPinMode+0xe0>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3304      	adds	r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800333e:	79fa      	ldrb	r2, [r7, #7]
 8003340:	4908      	ldr	r1, [pc, #32]	; (8003364 <gpioPinMode+0xe0>)
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f107 0208 	add.w	r2, r7, #8
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f009 fba7 	bl	800caa8 <HAL_GPIO_Init>

  return ret;
 800335a:	7ffb      	ldrb	r3, [r7, #31]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	08015f00 	.word	0x08015f00

08003368 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	460a      	mov	r2, r1
 8003372:	71fb      	strb	r3, [r7, #7]
 8003374:	4613      	mov	r3, r2
 8003376:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d842      	bhi.n	8003404 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 800337e:	79bb      	ldrb	r3, [r7, #6]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01f      	beq.n	80033c4 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003384:	79fa      	ldrb	r2, [r7, #7]
 8003386:	4921      	ldr	r1, [pc, #132]	; (800340c <gpioPinWrite+0xa4>)
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	79fa      	ldrb	r2, [r7, #7]
 8003396:	491d      	ldr	r1, [pc, #116]	; (800340c <gpioPinWrite+0xa4>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3304      	adds	r3, #4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b29c      	uxth	r4, r3
 80033a8:	79fa      	ldrb	r2, [r7, #7]
 80033aa:	4918      	ldr	r1, [pc, #96]	; (800340c <gpioPinWrite+0xa4>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3309      	adds	r3, #9
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4621      	mov	r1, r4
 80033be:	f009 fdef 	bl	800cfa0 <HAL_GPIO_WritePin>
 80033c2:	e020      	b.n	8003406 <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80033c4:	79fa      	ldrb	r2, [r7, #7]
 80033c6:	4911      	ldr	r1, [pc, #68]	; (800340c <gpioPinWrite+0xa4>)
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	79fa      	ldrb	r2, [r7, #7]
 80033d6:	490d      	ldr	r1, [pc, #52]	; (800340c <gpioPinWrite+0xa4>)
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29c      	uxth	r4, r3
 80033e8:	79fa      	ldrb	r2, [r7, #7]
 80033ea:	4908      	ldr	r1, [pc, #32]	; (800340c <gpioPinWrite+0xa4>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	330a      	adds	r3, #10
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4621      	mov	r1, r4
 80033fe:	f009 fdcf 	bl	800cfa0 <HAL_GPIO_WritePin>
 8003402:	e000      	b.n	8003406 <gpioPinWrite+0x9e>
    return;
 8003404:	bf00      	nop
  }
}
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	08015f00 	.word	0x08015f00

08003410 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d901      	bls.n	8003428 <gpioPinRead+0x18>
  {
    return false;
 8003424:	2300      	movs	r3, #0
 8003426:	e024      	b.n	8003472 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003428:	79fa      	ldrb	r2, [r7, #7]
 800342a:	4914      	ldr	r1, [pc, #80]	; (800347c <gpioPinRead+0x6c>)
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	79fa      	ldrb	r2, [r7, #7]
 800343a:	4910      	ldr	r1, [pc, #64]	; (800347c <gpioPinRead+0x6c>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3304      	adds	r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	f009 fd8f 	bl	800cf70 <HAL_GPIO_ReadPin>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	79fa      	ldrb	r2, [r7, #7]
 8003458:	4908      	ldr	r1, [pc, #32]	; (800347c <gpioPinRead+0x6c>)
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3309      	adds	r3, #9
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	4298      	cmp	r0, r3
 800346a:	d101      	bne.n	8003470 <gpioPinRead+0x60>
  {
    ret = true;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	08015f00 	.word	0x08015f00

08003480 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d128      	bne.n	80034e6 <cliGpio+0x66>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4947      	ldr	r1, [pc, #284]	; (80035b8 <cliGpio+0x138>)
 800349a:	2000      	movs	r0, #0
 800349c:	4798      	blx	r3
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 80034a4:	e018      	b.n	80034d8 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	e00c      	b.n	80034c6 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ffad 	bl	8003410 <gpioPinRead>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4619      	mov	r1, r3
 80034ba:	4840      	ldr	r0, [pc, #256]	; (80035bc <cliGpio+0x13c>)
 80034bc:	f7fe ff16 	bl	80022ec <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	3301      	adds	r3, #1
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	ddef      	ble.n	80034ac <cliGpio+0x2c>
      }
      cliPrintf("\n");
 80034cc:	483c      	ldr	r0, [pc, #240]	; (80035c0 <cliGpio+0x140>)
 80034ce:	f7fe ff0d 	bl	80022ec <cliPrintf>
      delay(100);
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	f7fd fe9a 	bl	800120c <delay>
    while(cliKeepLoop())
 80034d8:	f7ff f802 	bl	80024e0 <cliKeepLoop>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e1      	bne.n	80034a6 <cliGpio+0x26>
    }
    ret = true;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d123      	bne.n	8003536 <cliGpio+0xb6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4934      	ldr	r1, [pc, #208]	; (80035c4 <cliGpio+0x144>)
 80034f4:	2000      	movs	r0, #0
 80034f6:	4798      	blx	r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01b      	beq.n	8003536 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2001      	movs	r0, #1
 8003504:	4798      	blx	r3
 8003506:	4603      	mov	r3, r0
 8003508:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 800350a:	e00d      	b.n	8003528 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 800350c:	7bfc      	ldrb	r4, [r7, #15]
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff7d 	bl	8003410 <gpioPinRead>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	4621      	mov	r1, r4
 800351c:	482a      	ldr	r0, [pc, #168]	; (80035c8 <cliGpio+0x148>)
 800351e:	f7fe fee5 	bl	80022ec <cliPrintf>
      delay(100);
 8003522:	2064      	movs	r0, #100	; 0x64
 8003524:	f7fd fe72 	bl	800120c <delay>
    while(cliKeepLoop())
 8003528:	f7fe ffda 	bl	80024e0 <cliKeepLoop>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ec      	bne.n	800350c <cliGpio+0x8c>
    }

    ret = true;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d126      	bne.n	800358c <cliGpio+0x10c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4922      	ldr	r1, [pc, #136]	; (80035cc <cliGpio+0x14c>)
 8003544:	2000      	movs	r0, #0
 8003546:	4798      	blx	r3
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01e      	beq.n	800358c <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2001      	movs	r0, #1
 8003554:	4798      	blx	r3
 8003556:	4603      	mov	r3, r0
 8003558:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2002      	movs	r0, #2
 8003560:	4798      	blx	r3
 8003562:	4603      	mov	r3, r0
 8003564:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8003566:	7b7b      	ldrb	r3, [r7, #13]
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2da      	uxtb	r2, r3
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fef6 	bl	8003368 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	7b7a      	ldrb	r2, [r7, #13]
 8003580:	4619      	mov	r1, r3
 8003582:	4813      	ldr	r0, [pc, #76]	; (80035d0 <cliGpio+0x150>)
 8003584:	f7fe feb2 	bl	80022ec <cliPrintf>
    ret = true;
 8003588:	2301      	movs	r3, #1
 800358a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	f083 0301 	eor.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8003598:	480e      	ldr	r0, [pc, #56]	; (80035d4 <cliGpio+0x154>)
 800359a:	f7fe fea7 	bl	80022ec <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800359e:	210f      	movs	r1, #15
 80035a0:	480d      	ldr	r0, [pc, #52]	; (80035d8 <cliGpio+0x158>)
 80035a2:	f7fe fea3 	bl	80022ec <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 80035a6:	210f      	movs	r1, #15
 80035a8:	480c      	ldr	r0, [pc, #48]	; (80035dc <cliGpio+0x15c>)
 80035aa:	f7fe fe9f 	bl	80022ec <cliPrintf>
  }
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08015c40 	.word	0x08015c40
 80035bc:	08015c48 	.word	0x08015c48
 80035c0:	08015c4c 	.word	0x08015c4c
 80035c4:	08015c50 	.word	0x08015c50
 80035c8:	08015c58 	.word	0x08015c58
 80035cc:	08015c6c 	.word	0x08015c6c
 80035d0:	08015c74 	.word	0x08015c74
 80035d4:	08015c88 	.word	0x08015c88
 80035d8:	08015c94 	.word	0x08015c94
 80035dc:	08015ca8 	.word	0x08015ca8

080035e0 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 80035e4:	f7fd fe1d 	bl	8001222 <millis>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <TransferDoneISR+0x40>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <TransferDoneISR+0x44>)
 80035f2:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80035f4:	f7fd fe15 	bl	8001222 <millis>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <TransferDoneISR+0x40>)
 80035fc:	601a      	str	r2, [r3, #0]

  if (fps_time > 0)
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <TransferDoneISR+0x44>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <TransferDoneISR+0x44>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <TransferDoneISR+0x48>)
 8003614:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <TransferDoneISR+0x4c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000290 	.word	0x20000290
 8003624:	20000294 	.word	0x20000294
 8003628:	20000298 	.word	0x20000298
 800362c:	2000028e 	.word	0x2000028e

08003630 <lcdInit>:


bool lcdInit(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8003636:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <lcdInit+0xa4>)
 8003638:	2264      	movs	r2, #100	; 0x64
 800363a:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 800363c:	f003 fc38 	bl	8006eb0 <st7735Init>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <lcdInit+0xa8>)
 8003646:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8003648:	4824      	ldr	r0, [pc, #144]	; (80036dc <lcdInit+0xac>)
 800364a:	f003 fc3d 	bl	8006ec8 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <lcdInit+0xac>)
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4823      	ldr	r0, [pc, #140]	; (80036e0 <lcdInit+0xb0>)
 8003654:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	e007      	b.n	800366c <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <lcdInit+0xb4>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2100      	movs	r1, #0
 8003662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3301      	adds	r3, #1
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003672:	dbf3      	blt.n	800365c <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8003674:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003678:	2100      	movs	r1, #0
 800367a:	481a      	ldr	r0, [pc, #104]	; (80036e4 <lcdInit+0xb4>)
 800367c:	f00e fd41 	bl	8012102 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <lcdInit+0xb8>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	035b      	lsls	r3, r3, #13
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <lcdInit+0xb4>)
 8003690:	4413      	add	r3, r2
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <lcdInit+0xbc>)
 8003694:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8003696:	2300      	movs	r3, #0
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	22a0      	movs	r2, #160	; 0xa0
 800369e:	2100      	movs	r1, #0
 80036a0:	2000      	movs	r0, #0
 80036a2:	f000 fbe6 	bl	8003e72 <lcdDrawFillRect>
  lcdUpdateDraw();
 80036a6:	f000 faad 	bl	8003c04 <lcdUpdateDraw>

  lcdSetBackLight(100);
 80036aa:	2064      	movs	r0, #100	; 0x64
 80036ac:	f000 f830 	bl	8003710 <lcdSetBackLight>


  if (is_init != true)
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <lcdInit+0xa8>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f083 0301 	eor.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <lcdInit+0x92>
  {
    return false;
 80036be:	2300      	movs	r3, #0
 80036c0:	e004      	b.n	80036cc <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 80036c2:	490b      	ldr	r1, [pc, #44]	; (80036f0 <lcdInit+0xc0>)
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <lcdInit+0xc4>)
 80036c6:	f7fe ff21 	bl	800250c <cliAdd>
#endif

  return true;
 80036ca:	2301      	movs	r3, #1
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2000001c 	.word	0x2000001c
 80036d8:	2000028c 	.word	0x2000028c
 80036dc:	20000270 	.word	0x20000270
 80036e0:	080035e1 	.word	0x080035e1
 80036e4:	200002c0 	.word	0x200002c0
 80036e8:	2000028d 	.word	0x2000028d
 80036ec:	2000029c 	.word	0x2000029c
 80036f0:	08004219 	.word	0x08004219
 80036f4:	08015fc0 	.word	0x08015fc0

080036f8 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return is_init;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <lcdIsInit+0x14>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	2000028c 	.word	0x2000028c

08003710 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2b64      	cmp	r3, #100	; 0x64
 800371e:	bf28      	it	cs
 8003720:	2364      	movcs	r3, #100	; 0x64
 8003722:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <lcdSetBackLight+0x48>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	79fa      	ldrb	r2, [r7, #7]
 800372a:	429a      	cmp	r2, r3
 800372c:	d002      	beq.n	8003734 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <lcdSetBackLight+0x48>)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <lcdSetBackLight+0x48>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 800373c:	2101      	movs	r1, #1
 800373e:	2001      	movs	r0, #1
 8003740:	f7ff fe12 	bl	8003368 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8003744:	e003      	b.n	800374e <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8003746:	2100      	movs	r1, #0
 8003748:	2001      	movs	r0, #1
 800374a:	f7ff fe0d 	bl	8003368 <gpioPinWrite>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000001c 	.word	0x2000001c

0800375c <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <lcdDrawPixel+0x14>)
 800375e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003762:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000029c 	.word	0x2000029c

08003774 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8003774:	b510      	push	{r4, lr}
 8003776:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8003778:	f000 fa70 	bl	8003c5c <lcdGetFrameBuffer>
 800377c:	f500 421f 	add.w	r2, r0, #40704	; 0x9f00
 8003780:	b2a1      	uxth	r1, r4
 8003782:	32fe      	adds	r2, #254	; 0xfe
 8003784:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8003786:	f823 1f02 	strh.w	r1, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800378a:	4293      	cmp	r3, r2
 800378c:	d1fb      	bne.n	8003786 <lcdClearBuffer+0x12>
  }
}
 800378e:	bd10      	pop	{r4, pc}

08003790 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8003790:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003794:	4616      	mov	r6, r2
 8003796:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
 8003798:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 800379c:	0052      	lsls	r2, r2, #1
  int32_t x     = 0;

  while (x < r)
 800379e:	2e00      	cmp	r6, #0
  int32_t ddF_y = -2 * r;
 80037a0:	9200      	str	r2, [sp, #0]
{
 80037a2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  while (x < r)
 80037a6:	f340 8090 	ble.w	80038ca <lcdDrawCircleHelper+0x13a>
 80037aa:	f003 0204 	and.w	r2, r3, #4
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	f003 0202 	and.w	r2, r3, #2
 80037b4:	9202      	str	r2, [sp, #8]
 80037b6:	f003 0208 	and.w	r2, r3, #8
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	f1c6 0401 	rsb	r4, r6, #1
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 80037c2:	fa1f f880 	uxth.w	r8, r0
 80037c6:	fa1f f981 	uxth.w	r9, r1
 80037ca:	9203      	str	r2, [sp, #12]
 80037cc:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 80037ce:	2500      	movs	r5, #0
 80037d0:	e00a      	b.n	80037e8 <lcdDrawCircleHelper+0x58>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 80037d2:	9b02      	ldr	r3, [sp, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d12e      	bne.n	8003836 <lcdDrawCircleHelper+0xa6>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d144      	bne.n	8003868 <lcdDrawCircleHelper+0xd8>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 80037de:	9b04      	ldr	r3, [sp, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d15a      	bne.n	800389a <lcdDrawCircleHelper+0x10a>
  while (x < r)
 80037e4:	42ae      	cmp	r6, r5
 80037e6:	dd70      	ble.n	80038ca <lcdDrawCircleHelper+0x13a>
    if (f >= 0)
 80037e8:	2c00      	cmp	r4, #0
 80037ea:	db04      	blt.n	80037f6 <lcdDrawCircleHelper+0x66>
      ddF_y += 2;
 80037ec:	9b00      	ldr	r3, [sp, #0]
 80037ee:	3302      	adds	r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
      f     += ddF_y;
 80037f2:	441c      	add	r4, r3
      r--;
 80037f4:	3e01      	subs	r6, #1
    x++;
 80037f6:	3501      	adds	r5, #1
    if (cornername & 0x4)
 80037f8:	9b01      	ldr	r3, [sp, #4]
    f     += ddF_x;
 80037fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80037fe:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0e6      	beq.n	80037d2 <lcdDrawCircleHelper+0x42>
 8003804:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003806:	fa1f fb86 	uxth.w	fp, r6
 800380a:	eb08 0003 	add.w	r0, r8, r3
 800380e:	eb09 010b 	add.w	r1, r9, fp
 8003812:	b280      	uxth	r0, r0
 8003814:	b289      	uxth	r1, r1
 8003816:	4652      	mov	r2, sl
 8003818:	9305      	str	r3, [sp, #20]
 800381a:	f7ff ff9f 	bl	800375c <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 800381e:	9b05      	ldr	r3, [sp, #20]
 8003820:	eb08 000b 	add.w	r0, r8, fp
 8003824:	eb09 0103 	add.w	r1, r9, r3
 8003828:	b289      	uxth	r1, r1
 800382a:	b280      	uxth	r0, r0
 800382c:	f7ff ff96 	bl	800375c <lcdDrawPixel>
    if (cornername & 0x2)
 8003830:	9b02      	ldr	r3, [sp, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0d0      	beq.n	80037d8 <lcdDrawCircleHelper+0x48>
 8003836:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 - r, color);
 8003838:	fa1f fb86 	uxth.w	fp, r6
 800383c:	eb08 0003 	add.w	r0, r8, r3
 8003840:	eba9 010b 	sub.w	r1, r9, fp
 8003844:	b280      	uxth	r0, r0
 8003846:	b289      	uxth	r1, r1
 8003848:	4652      	mov	r2, sl
 800384a:	9305      	str	r3, [sp, #20]
 800384c:	f7ff ff86 	bl	800375c <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003850:	9b05      	ldr	r3, [sp, #20]
 8003852:	eb08 000b 	add.w	r0, r8, fp
 8003856:	eba9 0103 	sub.w	r1, r9, r3
 800385a:	b289      	uxth	r1, r1
 800385c:	b280      	uxth	r0, r0
 800385e:	f7ff ff7d 	bl	800375c <lcdDrawPixel>
    if (cornername & 0x8)
 8003862:	9b03      	ldr	r3, [sp, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ba      	beq.n	80037de <lcdDrawCircleHelper+0x4e>
      lcdDrawPixel(x0 - r, y0 + x, color);
 8003868:	b2b3      	uxth	r3, r6
 800386a:	fa1f fb85 	uxth.w	fp, r5
 800386e:	eba8 0003 	sub.w	r0, r8, r3
 8003872:	eb09 010b 	add.w	r1, r9, fp
 8003876:	b280      	uxth	r0, r0
 8003878:	b289      	uxth	r1, r1
 800387a:	4652      	mov	r2, sl
 800387c:	9305      	str	r3, [sp, #20]
 800387e:	f7ff ff6d 	bl	800375c <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003882:	9b05      	ldr	r3, [sp, #20]
 8003884:	eba8 000b 	sub.w	r0, r8, fp
 8003888:	eb03 0109 	add.w	r1, r3, r9
 800388c:	b289      	uxth	r1, r1
 800388e:	b280      	uxth	r0, r0
 8003890:	f7ff ff64 	bl	800375c <lcdDrawPixel>
    if (cornername & 0x1)
 8003894:	9b04      	ldr	r3, [sp, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0a4      	beq.n	80037e4 <lcdDrawCircleHelper+0x54>
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 800389a:	b2b3      	uxth	r3, r6
 800389c:	fa1f fb85 	uxth.w	fp, r5
 80038a0:	eba8 0003 	sub.w	r0, r8, r3
 80038a4:	eba9 010b 	sub.w	r1, r9, fp
 80038a8:	b280      	uxth	r0, r0
 80038aa:	b289      	uxth	r1, r1
 80038ac:	4652      	mov	r2, sl
 80038ae:	9305      	str	r3, [sp, #20]
 80038b0:	f7ff ff54 	bl	800375c <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 80038b4:	9b05      	ldr	r3, [sp, #20]
 80038b6:	eba8 000b 	sub.w	r0, r8, fp
 80038ba:	eba9 0103 	sub.w	r1, r9, r3
 80038be:	b289      	uxth	r1, r1
 80038c0:	b280      	uxth	r0, r0
 80038c2:	f7ff ff4b 	bl	800375c <lcdDrawPixel>
  while (x < r)
 80038c6:	42ae      	cmp	r6, r5
 80038c8:	dc8e      	bgt.n	80037e8 <lcdDrawCircleHelper+0x58>
    }
  }
}
 80038ca:	b006      	add	sp, #24
 80038cc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080038d0 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 80038d0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80038d4:	b08a      	sub	sp, #40	; 0x28
 80038d6:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038da:	9206      	str	r2, [sp, #24]
 80038dc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
{
 80038e0:	9604      	str	r6, [sp, #16]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038e2:	fa1f f984 	uxth.w	r9, r4
{
 80038e6:	4606      	mov	r6, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038e8:	b280      	uxth	r0, r0
{
 80038ea:	469c      	mov	ip, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038ec:	f8bd 8010 	ldrh.w	r8, [sp, #16]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80038f0:	f8cd c01c 	str.w	ip, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038f4:	eb00 0a09 	add.w	sl, r0, r9
 80038f8:	eba5 0b49 	sub.w	fp, r5, r9, lsl #1
 80038fc:	fa0f fa8a 	sxth.w	sl, sl
 8003900:	fa0f fb8b 	sxth.w	fp, fp
 8003904:	9103      	str	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003906:	f8bd e01c 	ldrh.w	lr, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800390a:	9008      	str	r0, [sp, #32]
 800390c:	465a      	mov	r2, fp
 800390e:	4650      	mov	r0, sl
 8003910:	4643      	mov	r3, r8
 8003912:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003916:	f8cd e014 	str.w	lr, [sp, #20]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800391a:	9509      	str	r5, [sp, #36]	; 0x24
 800391c:	f000 fa84 	bl	8003e28 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003920:	9905      	ldr	r1, [sp, #20]
 8003922:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8003926:	3901      	subs	r1, #1
 8003928:	4429      	add	r1, r5
 800392a:	465a      	mov	r2, fp
 800392c:	4650      	mov	r0, sl
 800392e:	4643      	mov	r3, r8
 8003930:	b209      	sxth	r1, r1
 8003932:	f000 fa79 	bl	8003e28 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8003936:	9905      	ldr	r1, [sp, #20]
 8003938:	444d      	add	r5, r9
 800393a:	eba1 0949 	sub.w	r9, r1, r9, lsl #1
 800393e:	b22d      	sxth	r5, r5
 8003940:	fa0f f989 	sxth.w	r9, r9
 8003944:	464a      	mov	r2, r9
 8003946:	4629      	mov	r1, r5
 8003948:	4643      	mov	r3, r8
 800394a:	b230      	sxth	r0, r6
 800394c:	f000 fa47 	bl	8003dde <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003952:	9a08      	ldr	r2, [sp, #32]
 8003954:	1e58      	subs	r0, r3, #1
 8003956:	4629      	mov	r1, r5
 8003958:	4410      	add	r0, r2

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800395a:	4635      	mov	r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 800395c:	464a      	mov	r2, r9
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800395e:	46b1      	mov	r9, r6
 8003960:	9e03      	ldr	r6, [sp, #12]
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003962:	4643      	mov	r3, r8
 8003964:	b200      	sxth	r0, r0
 8003966:	f000 fa3a 	bl	8003dde <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800396a:	eb04 0806 	add.w	r8, r4, r6
 800396e:	4425      	add	r5, r4
 8003970:	9e04      	ldr	r6, [sp, #16]
 8003972:	9600      	str	r6, [sp, #0]
 8003974:	4628      	mov	r0, r5
 8003976:	4641      	mov	r1, r8
 8003978:	4622      	mov	r2, r4
 800397a:	2301      	movs	r3, #1
 800397c:	f7ff ff08 	bl	8003790 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003980:	9a06      	ldr	r2, [sp, #24]
 8003982:	9600      	str	r6, [sp, #0]
 8003984:	444a      	add	r2, r9
 8003986:	eba2 0904 	sub.w	r9, r2, r4
 800398a:	f109 39ff 	add.w	r9, r9, #4294967295
 800398e:	4641      	mov	r1, r8
 8003990:	4648      	mov	r0, r9
 8003992:	4622      	mov	r2, r4
 8003994:	2302      	movs	r3, #2
 8003996:	9604      	str	r6, [sp, #16]
 8003998:	f7ff fefa 	bl	8003790 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800399c:	9e03      	ldr	r6, [sp, #12]
 800399e:	9b07      	ldr	r3, [sp, #28]
 80039a0:	4433      	add	r3, r6
 80039a2:	eba3 0804 	sub.w	r8, r3, r4
 80039a6:	9e04      	ldr	r6, [sp, #16]
 80039a8:	9600      	str	r6, [sp, #0]
 80039aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80039ae:	4648      	mov	r0, r9
 80039b0:	4641      	mov	r1, r8
 80039b2:	4622      	mov	r2, r4
 80039b4:	2304      	movs	r3, #4
 80039b6:	f7ff feeb 	bl	8003790 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 80039ba:	4641      	mov	r1, r8
 80039bc:	4628      	mov	r0, r5
 80039be:	4622      	mov	r2, r4
 80039c0:	2308      	movs	r3, #8
 80039c2:	9612      	str	r6, [sp, #72]	; 0x48
}
 80039c4:	b00a      	add	sp, #40	; 0x28
 80039c6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 80039ca:	f7ff bee1 	b.w	8003790 <lcdDrawCircleHelper>

080039ce <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 80039ce:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80039d2:	4616      	mov	r6, r2
 80039d4:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 80039d6:	f1c6 0a00 	rsb	sl, r6, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 80039da:	2e00      	cmp	r6, #0
{
 80039dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 80039de:	ebaa 0a06 	sub.w	sl, sl, r6
  while (y < r)
 80039e2:	dd73      	ble.n	8003acc <lcdDrawFillCircleHelper+0xfe>
 80039e4:	3201      	adds	r2, #1
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80039e6:	b292      	uxth	r2, r2
 80039e8:	b280      	uxth	r0, r0
 80039ea:	b289      	uxth	r1, r1
 80039ec:	9203      	str	r2, [sp, #12]
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	f1c6 0401 	rsb	r4, r6, #1
 80039fa:	9001      	str	r0, [sp, #4]
 80039fc:	9102      	str	r1, [sp, #8]
 80039fe:	9205      	str	r2, [sp, #20]
 8003a00:	9304      	str	r3, [sp, #16]
  int32_t y     = 0;
 8003a02:	2500      	movs	r5, #0
 8003a04:	e004      	b.n	8003a10 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d137      	bne.n	8003a7c <lcdDrawFillCircleHelper+0xae>
  while (y < r)
 8003a0c:	42ae      	cmp	r6, r5
 8003a0e:	dd5d      	ble.n	8003acc <lcdDrawFillCircleHelper+0xfe>
    if (f >= 0)
 8003a10:	2c00      	cmp	r4, #0
    y++;
 8003a12:	f105 0501 	add.w	r5, r5, #1
    if (f >= 0)
 8003a16:	db03      	blt.n	8003a20 <lcdDrawFillCircleHelper+0x52>
      ddF_y += 2;
 8003a18:	f10a 0a02 	add.w	sl, sl, #2
      f     += ddF_y;
 8003a1c:	4454      	add	r4, sl
      r--;
 8003a1e:	3e01      	subs	r6, #1
    if (cornername & 0x1)
 8003a20:	9b05      	ldr	r3, [sp, #20]
    f     += ddF_x;
 8003a22:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003a26:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ec      	beq.n	8003a06 <lcdDrawFillCircleHelper+0x38>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003a2c:	9901      	ldr	r1, [sp, #4]
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003a34:	fa1f f986 	uxth.w	r9, r6
 8003a38:	eba1 0009 	sub.w	r0, r1, r9
 8003a3c:	9902      	ldr	r1, [sp, #8]
 8003a3e:	fa1f f885 	uxth.w	r8, r5
 8003a42:	fa1f fb8c 	uxth.w	fp, ip
 8003a46:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 8003a4a:	4441      	add	r1, r8
 8003a4c:	b212      	sxth	r2, r2
 8003a4e:	b200      	sxth	r0, r0
 8003a50:	b209      	sxth	r1, r1
 8003a52:	465b      	mov	r3, fp
 8003a54:	f000 f9e8 	bl	8003e28 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003a58:	9a02      	ldr	r2, [sp, #8]
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	eb09 0102 	add.w	r1, r9, r2
 8003a60:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003a64:	9b01      	ldr	r3, [sp, #4]
 8003a66:	eba3 0008 	sub.w	r0, r3, r8
 8003a6a:	b209      	sxth	r1, r1
 8003a6c:	465b      	mov	r3, fp
 8003a6e:	b212      	sxth	r2, r2
 8003a70:	b200      	sxth	r0, r0
 8003a72:	f000 f9d9 	bl	8003e28 <lcdDrawHLine>
    if (cornername & 0x2)
 8003a76:	9b04      	ldr	r3, [sp, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0c7      	beq.n	8003a0c <lcdDrawFillCircleHelper+0x3e>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8003a7c:	9901      	ldr	r1, [sp, #4]
 8003a7e:	9b03      	ldr	r3, [sp, #12]
 8003a80:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003a84:	fa1f f986 	uxth.w	r9, r6
 8003a88:	eba1 0009 	sub.w	r0, r1, r9
 8003a8c:	9902      	ldr	r1, [sp, #8]
 8003a8e:	fa1f f885 	uxth.w	r8, r5
 8003a92:	fa1f fb8c 	uxth.w	fp, ip
 8003a96:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 8003a9a:	eba1 0108 	sub.w	r1, r1, r8
 8003a9e:	b212      	sxth	r2, r2
 8003aa0:	b200      	sxth	r0, r0
 8003aa2:	b209      	sxth	r1, r1
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	f000 f9bf 	bl	8003e28 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003aaa:	9a02      	ldr	r2, [sp, #8]
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	eba2 0109 	sub.w	r1, r2, r9
 8003ab2:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	eba3 0008 	sub.w	r0, r3, r8
 8003abc:	b209      	sxth	r1, r1
 8003abe:	465b      	mov	r3, fp
 8003ac0:	b212      	sxth	r2, r2
 8003ac2:	b200      	sxth	r0, r0
 8003ac4:	f000 f9b0 	bl	8003e28 <lcdDrawHLine>
  while (y < r)
 8003ac8:	42ae      	cmp	r6, r5
 8003aca:	dca1      	bgt.n	8003a10 <lcdDrawFillCircleHelper+0x42>
    }
  }
}
 8003acc:	b006      	add	sp, #24
 8003ace:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003ad2 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003ad2:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8003adc:	4689      	mov	r9, r1
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003ade:	b2a1      	uxth	r1, r4
{
 8003ae0:	461e      	mov	r6, r3
 8003ae2:	4615      	mov	r5, r2
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003ae4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003ae8:	fa1f f28a 	uxth.w	r2, sl
 8003aec:	4449      	add	r1, r9
 8003aee:	9200      	str	r2, [sp, #0]
{
 8003af0:	4680      	mov	r8, r0
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003af2:	b22a      	sxth	r2, r5
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	b209      	sxth	r1, r1
 8003af8:	b200      	sxth	r0, r0
 8003afa:	f000 f9ba 	bl	8003e72 <lcdDrawFillRect>

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003afe:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003b02:	eb09 0106 	add.w	r1, r9, r6
 8003b06:	3d01      	subs	r5, #1
 8003b08:	44a0      	add	r8, r4
 8003b0a:	1b09      	subs	r1, r1, r4
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4622      	mov	r2, r4
 8003b10:	9500      	str	r5, [sp, #0]
 8003b12:	3901      	subs	r1, #1
 8003b14:	f8cd a004 	str.w	sl, [sp, #4]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f7ff ff58 	bl	80039ce <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003b1e:	4640      	mov	r0, r8
 8003b20:	eb09 0104 	add.w	r1, r9, r4
 8003b24:	4622      	mov	r2, r4
 8003b26:	2302      	movs	r3, #2
 8003b28:	950a      	str	r5, [sp, #40]	; 0x28
 8003b2a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
}
 8003b2e:	b003      	add	sp, #12
 8003b30:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003b34:	f7ff bf4b 	b.w	80039ce <lcdDrawFillCircleHelper>

08003b38 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return fps_count;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <lcdGetFps+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000298 	.word	0x20000298

08003b50 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return fps_time;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <lcdGetFpsTime+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000294 	.word	0x20000294

08003b68 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <lcdDrawAvailable+0x28>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	b2db      	uxtb	r3, r3
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	2000028e 	.word	0x2000028e

08003b94 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8003b94:	b598      	push	{r3, r4, r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  if (is_init != true)
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <lcdRequestDraw+0x5c>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <lcdRequestDraw+0x16>
  {
    return false;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e020      	b.n	8003bec <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <lcdRequestDraw+0x60>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <lcdRequestDraw+0x22>
  {
    return false;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e01a      	b.n	8003bec <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <lcdRequestDraw+0x64>)
 8003bb8:	689c      	ldr	r4, [r3, #8]
 8003bba:	237f      	movs	r3, #127	; 0x7f
 8003bbc:	229f      	movs	r2, #159	; 0x9f
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	47a0      	blx	r4

  lcd_request_draw = true;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <lcdRequestDraw+0x60>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <lcdRequestDraw+0x64>)
 8003bcc:	699c      	ldr	r4, [r3, #24]
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <lcdRequestDraw+0x68>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	035b      	lsls	r3, r3, #13
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <lcdRequestDraw+0x6c>)
 8003bde:	4413      	add	r3, r2
 8003be0:	2200      	movs	r2, #0
 8003be2:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003be6:	4618      	mov	r0, r3
 8003be8:	47a0      	blx	r4

  return true;
 8003bea:	2301      	movs	r3, #1
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd98      	pop	{r3, r4, r7, pc}
 8003bf0:	2000028c 	.word	0x2000028c
 8003bf4:	2000028e 	.word	0x2000028e
 8003bf8:	20000270 	.word	0x20000270
 8003bfc:	2000028d 	.word	0x2000028d
 8003c00:	200002c0 	.word	0x200002c0

08003c04 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <lcdUpdateDraw+0x54>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	f083 0301 	eor.w	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d118      	bne.n	8003c4a <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003c18:	f7ff ffbc 	bl	8003b94 <lcdRequestDraw>

  pre_time = millis();
 8003c1c:	f7fd fb01 	bl	8001222 <millis>
 8003c20:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003c22:	e009      	b.n	8003c38 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fd faf1 	bl	800120c <delay>
    if (millis()-pre_time >= 100)
 8003c2a:	f7fd fafa 	bl	8001222 <millis>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b63      	cmp	r3, #99	; 0x63
 8003c36:	d80a      	bhi.n	8003c4e <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003c38:	f7ff ff96 	bl	8003b68 <lcdDrawAvailable>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ed      	bne.n	8003c24 <lcdUpdateDraw+0x20>
 8003c48:	e002      	b.n	8003c50 <lcdUpdateDraw+0x4c>
    return;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <lcdUpdateDraw+0x4c>
    {
      break;
 8003c4e:	bf00      	nop
    }
  }
}
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000028c 	.word	0x2000028c

08003c5c <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <lcdGetFrameBuffer+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000029c 	.word	0x2000029c

08003c74 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	80fb      	strh	r3, [r7, #6]
 8003c86:	4603      	mov	r3, r0
 8003c88:	80bb      	strh	r3, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	807b      	strh	r3, [r7, #2]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003c92:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003ca0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003ca4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cac:	1acb      	subs	r3, r1, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfb8      	it	lt
 8003cb2:	425b      	neglt	r3, r3
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	bfcc      	ite	gt
 8003cb8:	2301      	movgt	r3, #1
 8003cba:	2300      	movle	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8003cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	da01      	bge.n	8003ccc <lcdDrawLine+0x58>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8003ccc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da01      	bge.n	8003cd8 <lcdDrawLine+0x64>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8003cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da01      	bge.n	8003ce4 <lcdDrawLine+0x70>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8003ce4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da01      	bge.n	8003cf0 <lcdDrawLine+0x7c>
 8003cec:	2300      	movs	r3, #0
 8003cee:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003cf0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	833b      	strh	r3, [r7, #24]
 8003cfc:	88bb      	ldrh	r3, [r7, #4]
 8003cfe:	80fb      	strh	r3, [r7, #6]
 8003d00:	8b3b      	ldrh	r3, [r7, #24]
 8003d02:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	82fb      	strh	r3, [r7, #22]
 8003d08:	883b      	ldrh	r3, [r7, #0]
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	8afb      	ldrh	r3, [r7, #22]
 8003d0e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003d10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dd0b      	ble.n	8003d34 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	82bb      	strh	r3, [r7, #20]
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	80fb      	strh	r3, [r7, #6]
 8003d24:	8abb      	ldrh	r3, [r7, #20]
 8003d26:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003d28:	88bb      	ldrh	r3, [r7, #4]
 8003d2a:	827b      	strh	r3, [r7, #18]
 8003d2c:	883b      	ldrh	r3, [r7, #0]
 8003d2e:	80bb      	strh	r3, [r7, #4]
 8003d30:	8a7b      	ldrh	r3, [r7, #18]
 8003d32:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8003d3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003d42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bfb8      	it	lt
 8003d4c:	425b      	neglt	r3, r3
 8003d4e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003d50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d54:	0fda      	lsrs	r2, r3, #31
 8003d56:	4413      	add	r3, r2
 8003d58:	105b      	asrs	r3, r3, #1
 8003d5a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8003d5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	da02      	bge.n	8003d6e <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	83bb      	strh	r3, [r7, #28]
 8003d6c:	e02d      	b.n	8003dca <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8003d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d72:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003d74:	e029      	b.n	8003dca <lcdDrawLine+0x156>
  {
    if (steep)
 8003d76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8003d7e:	88bb      	ldrh	r3, [r7, #4]
 8003d80:	88f9      	ldrh	r1, [r7, #6]
 8003d82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fce9 	bl	800375c <lcdDrawPixel>
 8003d8a:	e005      	b.n	8003d98 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	88b9      	ldrh	r1, [r7, #4]
 8003d90:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fce2 	bl	800375c <lcdDrawPixel>
    }
    err -= dy;
 8003d98:	8bfa      	ldrh	r2, [r7, #30]
 8003d9a:	89fb      	ldrh	r3, [r7, #14]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8003da2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da09      	bge.n	8003dbe <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8003daa:	88ba      	ldrh	r2, [r7, #4]
 8003dac:	8bbb      	ldrh	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8003db4:	8bfa      	ldrh	r2, [r7, #30]
 8003db6:	8a3b      	ldrh	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8003dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	80fb      	strh	r3, [r7, #6]
 8003dca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	ddcf      	ble.n	8003d76 <lcdDrawLine+0x102>
    }
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3724      	adds	r7, #36	; 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd90      	pop	{r4, r7, pc}

08003dde <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003dde:	b590      	push	{r4, r7, lr}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af02      	add	r7, sp, #8
 8003de4:	4604      	mov	r4, r0
 8003de6:	4608      	mov	r0, r1
 8003de8:	4611      	mov	r1, r2
 8003dea:	461a      	mov	r2, r3
 8003dec:	4623      	mov	r3, r4
 8003dee:	80fb      	strh	r3, [r7, #6]
 8003df0:	4603      	mov	r3, r0
 8003df2:	80bb      	strh	r3, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8003dfc:	88ba      	ldrh	r2, [r7, #4]
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	4413      	add	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b21c      	sxth	r4, r3
 8003e0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e0e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e12:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e16:	883b      	ldrh	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	f7ff ff2a 	bl	8003c74 <lcdDrawLine>
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	4604      	mov	r4, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	80fb      	strh	r3, [r7, #6]
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80bb      	strh	r3, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	807b      	strh	r3, [r7, #2]
 8003e42:	4613      	mov	r3, r2
 8003e44:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003e58:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e60:	883b      	ldrh	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4623      	mov	r3, r4
 8003e66:	f7ff ff05 	bl	8003c74 <lcdDrawLine>
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd90      	pop	{r4, r7, pc}

08003e72 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003e72:	b590      	push	{r4, r7, lr}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4604      	mov	r4, r0
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4623      	mov	r3, r4
 8003e82:	80fb      	strh	r3, [r7, #6]
 8003e84:	4603      	mov	r3, r0
 8003e86:	80bb      	strh	r3, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	81fb      	strh	r3, [r7, #14]
 8003e94:	e00e      	b.n	8003eb4 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8003e96:	8c3b      	ldrh	r3, [r7, #32]
 8003e98:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e9c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ea0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003ea4:	f7ff ff9b 	bl	8003dde <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8003ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	81fb      	strh	r3, [r7, #14]
 8003eb4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003eb8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003ebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ec0:	440b      	add	r3, r1
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	dbe7      	blt.n	8003e96 <lcdDrawFillRect+0x24>
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}
	...

08003ed0 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8003ed0:	b408      	push	{r3}
 8003ed2:	b590      	push	{r4, r7, lr}
 8003ed4:	b0d8      	sub	sp, #352	; 0x160
 8003ed6:	af02      	add	r7, sp, #8
 8003ed8:	f107 030c 	add.w	r3, r7, #12
 8003edc:	6018      	str	r0, [r3, #0]
 8003ede:	f107 0308 	add.w	r3, r7, #8
 8003ee2:	6019      	str	r1, [r3, #0]
 8003ee4:	1dbb      	adds	r3, r7, #6
 8003ee6:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8003ee8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003eec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8003efa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003efe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f02:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003f06:	21ff      	movs	r1, #255	; 0xff
 8003f08:	f00f fd70 	bl	80139ec <vsniprintf>
 8003f0c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8003f10:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <lcdPrintf+0x1e0>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <lcdPrintf+0x1e4>)
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d05d      	beq.n	8003fde <lcdPrintf+0x10e>
  {
    for( i=0; i<len; i+=Size_Char )
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f28:	e052      	b.n	8003fd0 <lcdPrintf+0x100>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8003f2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003f32:	4413      	add	r3, r2
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <lcdPrintf+0x1e0>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <lcdPrintf+0x1e4>)
 8003f3e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003f42:	f107 0108 	add.w	r1, r7, #8
 8003f46:	f107 000c 	add.w	r0, r7, #12
 8003f4a:	1dbb      	adds	r3, r7, #6
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4623      	mov	r3, r4
 8003f52:	6809      	ldr	r1, [r1, #0]
 8003f54:	6800      	ldr	r0, [r0, #0]
 8003f56:	f000 f903 	bl	8004160 <disEngFont>

      Size_Char = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <lcdPrintf+0x1e0>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <lcdPrintf+0x1e4>)
 8003f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8003f72:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <lcdPrintf+0x1e0>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <lcdPrintf+0x1e4>)
 8003f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7e:	785b      	ldrb	r3, [r3, #1]
 8003f80:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8003f84:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003f88:	f107 030c 	add.w	r3, r7, #12
 8003f8c:	f107 010c 	add.w	r1, r7, #12
 8003f90:	6809      	ldr	r1, [r1, #0]
 8003f92:	440a      	add	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8003f96:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	2ba0      	cmp	r3, #160	; 0xa0
 8003fa4:	dd0d      	ble.n	8003fc2 <lcdPrintf+0xf2>
      {
        x  = x_Pre;
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003fae:	601a      	str	r2, [r3, #0]
        y += font_height;
 8003fb0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	f107 0108 	add.w	r1, r7, #8
 8003fbc:	6809      	ldr	r1, [r1, #0]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8003fc2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003fc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003fca:	4413      	add	r3, r2
 8003fcc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003fd0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003fd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	dba6      	blt.n	8003f2a <lcdPrintf+0x5a>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8003fdc:	e060      	b.n	80040a0 <lcdPrintf+0x1d0>
    for( i=0; i<len; i+=Size_Char )
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003fe4:	e054      	b.n	8004090 <lcdPrintf+0x1c0>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8003fe6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003fea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003fee:	4413      	add	r3, r2
 8003ff0:	f107 0214 	add.w	r2, r7, #20
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f002 fc68 	bl	80068cc <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8003ffc:	1dbb      	adds	r3, r7, #6
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	f107 0214 	add.w	r2, r7, #20
 8004004:	f107 0108 	add.w	r1, r7, #8
 8004008:	f107 000c 	add.w	r0, r7, #12
 800400c:	6809      	ldr	r1, [r1, #0]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	f000 f852 	bl	80040b8 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	885b      	ldrh	r3, [r3, #2]
 800401a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 800401e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004022:	2b01      	cmp	r3, #1
 8004024:	dd0a      	ble.n	800403c <lcdPrintf+0x16c>
        font_width = 16;
 8004026:	2310      	movs	r3, #16
 8004028:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	f107 020c 	add.w	r2, r7, #12
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	3210      	adds	r2, #16
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e009      	b.n	8004050 <lcdPrintf+0x180>
        font_width = 8;
 800403c:	2308      	movs	r3, #8
 800403e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	f107 020c 	add.w	r2, r7, #12
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	3208      	adds	r2, #8
 800404e:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8004050:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4413      	add	r3, r2
 800405c:	2ba0      	cmp	r3, #160	; 0xa0
 800405e:	dd0b      	ble.n	8004078 <lcdPrintf+0x1a8>
        x  = x_Pre;
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004068:	601a      	str	r2, [r3, #0]
        y += 16;
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	f107 0208 	add.w	r2, r7, #8
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	3210      	adds	r2, #16
 8004076:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	889b      	ldrh	r3, [r3, #4]
 800407e:	2b04      	cmp	r3, #4
 8004080:	d00d      	beq.n	800409e <lcdPrintf+0x1ce>
    for( i=0; i<len; i+=Size_Char )
 8004082:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004086:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800408a:	4413      	add	r3, r2
 800408c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004090:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004094:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004098:	429a      	cmp	r2, r3
 800409a:	dba4      	blt.n	8003fe6 <lcdPrintf+0x116>
}
 800409c:	e000      	b.n	80040a0 <lcdPrintf+0x1d0>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800409e:	bf00      	nop
}
 80040a0:	bf00      	nop
 80040a2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80040a6:	46bd      	mov	sp, r7
 80040a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040ac:	b001      	add	sp, #4
 80040ae:	4770      	bx	lr
 80040b0:	2000001d 	.word	0x2000001d
 80040b4:	20000020 	.word	0x20000020

080040b8 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	885b      	ldrh	r3, [r3, #2]
 80040ca:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 80040cc:	8b3b      	ldrh	r3, [r7, #24]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <disHanFont+0x1e>
  {
    FontSize = 2;
 80040d2:	2302      	movs	r3, #2
 80040d4:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80040d6:	2300      	movs	r3, #0
 80040d8:	83fb      	strh	r3, [r7, #30]
 80040da:	e03a      	b.n	8004152 <disHanFont+0x9a>
  {
    index_x = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80040e0:	2300      	movs	r3, #0
 80040e2:	83bb      	strh	r3, [r7, #28]
 80040e4:	e02e      	b.n	8004144 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 80040e6:	8bfb      	ldrh	r3, [r7, #30]
 80040e8:	8b3a      	ldrh	r2, [r7, #24]
 80040ea:	fb02 f203 	mul.w	r2, r2, r3
 80040ee:	8bbb      	ldrh	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	799b      	ldrb	r3, [r3, #6]
 80040f8:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 80040fa:	2300      	movs	r3, #0
 80040fc:	837b      	strh	r3, [r7, #26]
 80040fe:	e01b      	b.n	8004138 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8004100:	7d7a      	ldrb	r2, [r7, #21]
 8004102:	8b7b      	ldrh	r3, [r7, #26]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00d      	beq.n	800412c <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	b29a      	uxth	r2, r3
 8004114:	8afb      	ldrh	r3, [r7, #22]
 8004116:	4413      	add	r3, r2
 8004118:	b298      	uxth	r0, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	b29a      	uxth	r2, r3
 800411e:	8bfb      	ldrh	r3, [r7, #30]
 8004120:	4413      	add	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	887a      	ldrh	r2, [r7, #2]
 8004126:	4619      	mov	r1, r3
 8004128:	f7ff fb18 	bl	800375c <lcdDrawPixel>
        }
        index_x++;
 800412c:	8afb      	ldrh	r3, [r7, #22]
 800412e:	3301      	adds	r3, #1
 8004130:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8004132:	8b7b      	ldrh	r3, [r7, #26]
 8004134:	3301      	adds	r3, #1
 8004136:	837b      	strh	r3, [r7, #26]
 8004138:	8b7b      	ldrh	r3, [r7, #26]
 800413a:	2b07      	cmp	r3, #7
 800413c:	d9e0      	bls.n	8004100 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 800413e:	8bbb      	ldrh	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	83bb      	strh	r3, [r7, #28]
 8004144:	8bba      	ldrh	r2, [r7, #28]
 8004146:	8b3b      	ldrh	r3, [r7, #24]
 8004148:	429a      	cmp	r2, r3
 800414a:	d3cc      	bcc.n	80040e6 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 800414c:	8bfb      	ldrh	r3, [r7, #30]
 800414e:	3301      	adds	r3, #1
 8004150:	83fb      	strh	r3, [r7, #30]
 8004152:	8bfb      	ldrh	r3, [r7, #30]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d9c1      	bls.n	80040dc <disHanFont+0x24>
      }
    }
  }
}
 8004158:	bf00      	nop
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	e035      	b.n	80041e2 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	3b20      	subs	r3, #32
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	7849      	ldrb	r1, [r1, #1]
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4619      	mov	r1, r3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	440b      	add	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e01a      	b.n	80041d0 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00f      	beq.n	80041ca <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	b298      	uxth	r0, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4413      	add	r3, r2
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7ff fac9 	bl	800375c <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	4293      	cmp	r3, r2
 80041da:	d3de      	bcc.n	800419a <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	3301      	adds	r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	461a      	mov	r2, r3
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d3c3      	bcc.n	8004176 <disEngFont+0x16>
      }
    }
  }
}
 80041ee:	bf00      	nop
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <lcdSetFont+0x1c>)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	7013      	strb	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	2000001d 	.word	0x2000001d

08004218 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d163      	bne.n	80042f4 <cliLcd+0xdc>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	4937      	ldr	r1, [pc, #220]	; (8004310 <cliLcd+0xf8>)
 8004232:	2000      	movs	r0, #0
 8004234:	4798      	blx	r3
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d05b      	beq.n	80042f4 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 800423c:	2003      	movs	r0, #3
 800423e:	f7ff ffdb 	bl	80041f8 <lcdSetFont>

    while(cliKeepLoop())
 8004242:	e04b      	b.n	80042dc <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 8004244:	f7ff fc90 	bl	8003b68 <lcdDrawAvailable>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d046      	beq.n	80042dc <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 800424e:	2000      	movs	r0, #0
 8004250:	f7ff fa90 	bl	8003774 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8004254:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <cliLcd+0xfc>)
 8004256:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800425a:	2100      	movs	r1, #0
 800425c:	2019      	movs	r0, #25
 800425e:	f7ff fe37 	bl	8003ed0 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8004262:	f7ff fc69 	bl	8003b38 <lcdGetFps>
 8004266:	4603      	mov	r3, r0
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <cliLcd+0x100>)
 800426c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004270:	2110      	movs	r1, #16
 8004272:	2000      	movs	r0, #0
 8004274:	f7ff fe2c 	bl	8003ed0 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8004278:	f7ff fc6a 	bl	8003b50 <lcdGetFpsTime>
 800427c:	4603      	mov	r3, r0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <cliLcd+0x104>)
 8004282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004286:	2120      	movs	r1, #32
 8004288:	2000      	movs	r0, #0
 800428a:	f7ff fe21 	bl	8003ed0 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 800428e:	f7fc ffc8 	bl	8001222 <millis>
 8004292:	4603      	mov	r3, r0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <cliLcd+0x104>)
 8004298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800429c:	2130      	movs	r1, #48	; 0x30
 800429e:	2000      	movs	r0, #0
 80042a0:	f7ff fe16 	bl	8003ed0 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 80042a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	230a      	movs	r3, #10
 80042ac:	220a      	movs	r2, #10
 80042ae:	2146      	movs	r1, #70	; 0x46
 80042b0:	2000      	movs	r0, #0
 80042b2:	f7ff fdde 	bl	8003e72 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 80042b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	230a      	movs	r3, #10
 80042be:	220a      	movs	r2, #10
 80042c0:	2146      	movs	r1, #70	; 0x46
 80042c2:	200a      	movs	r0, #10
 80042c4:	f7ff fdd5 	bl	8003e72 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 80042c8:	231f      	movs	r3, #31
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	230a      	movs	r3, #10
 80042ce:	220a      	movs	r2, #10
 80042d0:	2146      	movs	r1, #70	; 0x46
 80042d2:	2014      	movs	r0, #20
 80042d4:	f7ff fdcd 	bl	8003e72 <lcdDrawFillRect>

        lcdRequestDraw();
 80042d8:	f7ff fc5c 	bl	8003b94 <lcdRequestDraw>
    while(cliKeepLoop())
 80042dc:	f7fe f900 	bl	80024e0 <cliKeepLoop>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ae      	bne.n	8004244 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7ff fa44 	bl	8003774 <lcdClearBuffer>
    lcdUpdateDraw();
 80042ec:	f7ff fc8a 	bl	8003c04 <lcdUpdateDraw>

    ret = true;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	f083 0301 	eor.w	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <cliLcd+0xee>
  {
    cliPrintf("lcd test\n");
 8004300:	4807      	ldr	r0, [pc, #28]	; (8004320 <cliLcd+0x108>)
 8004302:	f7fd fff3 	bl	80022ec <cliPrintf>
  }
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	08015fc4 	.word	0x08015fc4
 8004314:	08015fcc 	.word	0x08015fcc
 8004318:	08015fdc 	.word	0x08015fdc
 800431c:	08015fe4 	.word	0x08015fe4
 8004320:	08015fec 	.word	0x08015fec

08004324 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
  bool ret = true;
 800432a:	2301      	movs	r3, #1
 800432c:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800433c:	2300      	movs	r3, #0
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <ledInit+0x8c>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	4a1a      	ldr	r2, [pc, #104]	; (80043b0 <ledInit+0x8c>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6313      	str	r3, [r2, #48]	; 0x30
 800434c:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <ledInit+0x8c>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004358:	2301      	movs	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e016      	b.n	8004398 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800436a:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <ledInit+0x90>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	889b      	ldrh	r3, [r3, #4]
 8004374:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <ledInit+0x90>)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800437e:	1d3a      	adds	r2, r7, #4
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f008 fb90 	bl	800caa8 <HAL_GPIO_Init>

    ledOff(i);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f837 	bl	8004400 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3301      	adds	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	dde5      	ble.n	800436a <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 800439e:	4906      	ldr	r1, [pc, #24]	; (80043b8 <ledInit+0x94>)
 80043a0:	4806      	ldr	r0, [pc, #24]	; (80043bc <ledInit+0x98>)
 80043a2:	f7fe f8b3 	bl	800250c <cliAdd>
#endif

  return ret;
 80043a6:	7efb      	ldrb	r3, [r7, #27]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	20000030 	.word	0x20000030
 80043b8:	08004479 	.word	0x08004479
 80043bc:	08015cc4 	.word	0x08015cc4

080043c0 <ledOn>:

void ledOn(uint8_t ch)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d111      	bne.n	80043f4 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <ledOn+0x3c>)
 80043d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <ledOn+0x3c>)
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	8899      	ldrh	r1, [r3, #4]
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4a05      	ldr	r2, [pc, #20]	; (80043fc <ledOn+0x3c>)
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	799b      	ldrb	r3, [r3, #6]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f008 fdd7 	bl	800cfa0 <HAL_GPIO_WritePin>
 80043f2:	e000      	b.n	80043f6 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 80043f4:	bf00      	nop
}
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000030 	.word	0x20000030

08004400 <ledOff>:

void ledOff(uint8_t ch)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d111      	bne.n	8004434 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <ledOff+0x3c>)
 8004414:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <ledOff+0x3c>)
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	8899      	ldrh	r1, [r3, #4]
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	4a05      	ldr	r2, [pc, #20]	; (800443c <ledOff+0x3c>)
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	79db      	ldrb	r3, [r3, #7]
 800442c:	461a      	mov	r2, r3
 800442e:	f008 fdb7 	bl	800cfa0 <HAL_GPIO_WritePin>
 8004432:	e000      	b.n	8004436 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8004434:	bf00      	nop
}
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000030 	.word	0x20000030

08004440 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10c      	bne.n	800446a <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <ledToggle+0x34>)
 8004454:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	4a06      	ldr	r2, [pc, #24]	; (8004474 <ledToggle+0x34>)
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	889b      	ldrh	r3, [r3, #4]
 8004462:	4619      	mov	r1, r3
 8004464:	f008 fdb5 	bl	800cfd2 <HAL_GPIO_TogglePin>
 8004468:	e000      	b.n	800446c <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 800446a:	bf00      	nop
}
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000030 	.word	0x20000030

08004478 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d133      	bne.n	80044f4 <cliLed+0x7c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	491f      	ldr	r1, [pc, #124]	; (8004510 <cliLed+0x98>)
 8004492:	2000      	movs	r0, #0
 8004494:	4798      	blx	r3
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02b      	beq.n	80044f4 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2001      	movs	r0, #1
 80044a2:	4798      	blx	r3
 80044a4:	4603      	mov	r3, r0
 80044a6:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2002      	movs	r0, #2
 80044ae:	4798      	blx	r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 80044b4:	7dbb      	ldrb	r3, [r7, #22]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <cliLed+0x48>
    {
      led_ch--;
 80044ba:	7dbb      	ldrb	r3, [r7, #22]
 80044bc:	3b01      	subs	r3, #1
 80044be:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 80044c0:	f7fc feaf 	bl	8001222 <millis>
 80044c4:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 80044c6:	e00e      	b.n	80044e6 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 80044c8:	f7fc feab 	bl	8001222 <millis>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d806      	bhi.n	80044e6 <cliLed+0x6e>
      {
        pre_time = millis();
 80044d8:	f7fc fea3 	bl	8001222 <millis>
 80044dc:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 80044de:	7dbb      	ldrb	r3, [r7, #22]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ffad 	bl	8004440 <ledToggle>
    while(cliKeepLoop())
 80044e6:	f7fd fffb 	bl	80024e0 <cliKeepLoop>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1eb      	bne.n	80044c8 <cliLed+0x50>
      }
    }

    ret = true;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8004500:	2101      	movs	r1, #1
 8004502:	4804      	ldr	r0, [pc, #16]	; (8004514 <cliLed+0x9c>)
 8004504:	f7fd fef2 	bl	80022ec <cliPrintf>
  }
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	08015cc8 	.word	0x08015cc8
 8004514:	08015cd0 	.word	0x08015cd0

08004518 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <DWT_Delay_us+0x3c>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004526:	f009 f977 	bl	800d818 <HAL_RCC_GetHCLKFreq>
 800452a:	4602      	mov	r2, r0
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <DWT_Delay_us+0x40>)
 800452e:	fba3 2302 	umull	r2, r3, r3, r2
 8004532:	0c9b      	lsrs	r3, r3, #18
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800453c:	bf00      	nop
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <DWT_Delay_us+0x3c>)
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d3f8      	bcc.n	800453e <DWT_Delay_us+0x26>
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e0001000 	.word	0xe0001000
 8004558:	431bde83 	.word	0x431bde83

0800455c <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	889b      	ldrh	r3, [r3, #4]
 8004568:	041a      	lsls	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	619a      	str	r2, [r3, #24]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	889a      	ldrh	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b088      	sub	sp, #32
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80045aa:	2302      	movs	r3, #2
 80045ac:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	889b      	ldrh	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f107 020c 	add.w	r2, r7, #12
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f008 fa72 	bl	800caa8 <HAL_GPIO_Init>
}
 80045c4:	bf00      	nop
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80045d4:	2311      	movs	r3, #17
 80045d6:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80045dc:	2302      	movs	r3, #2
 80045de:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	889b      	ldrh	r3, [r3, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f107 020c 	add.w	r2, r7, #12
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f008 fa59 	bl	800caa8 <HAL_GPIO_Init>

}
 80045f6:	bf00      	nop
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff ffd7 	bl	80045cc <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ffac 	bl	800457c <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8004624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004628:	f7ff ff76 	bl	8004518 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff ff95 	bl	800455c <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8004632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004636:	f7ff ff6f 	bl	8004518 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff9e 	bl	800457c <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8004640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004644:	f7ff ff68 	bl	8004518 <DWT_Delay_us>
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff7f 	bl	800455c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ffb4 	bl	80045cc <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8004664:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004668:	f7ff ff56 	bl	8004518 <DWT_Delay_us>
	DWT_Delay_us(20);
 800466c:	2014      	movs	r0, #20
 800466e:	f7ff ff53 	bl	8004518 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ff91 	bl	800459a <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8004678:	2046      	movs	r0, #70	; 0x46
 800467a:	f7ff ff4d 	bl	8004518 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	889b      	ldrh	r3, [r3, #4]
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f008 fc71 	bl	800cf70 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8004692:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004696:	f7ff ff3f 	bl	8004518 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
	if (bit)
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d012      	beq.n	80046dc <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ff50 	bl	800455c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff85 	bl	80045cc <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 80046c2:	200a      	movs	r0, #10
 80046c4:	f7ff ff28 	bl	8004518 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff66 	bl	800459a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 80046ce:	2037      	movs	r0, #55	; 0x37
 80046d0:	f7ff ff22 	bl	8004518 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff60 	bl	800459a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 80046da:	e011      	b.n	8004700 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff3d 	bl	800455c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff ff72 	bl	80045cc <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 80046e8:	2041      	movs	r0, #65	; 0x41
 80046ea:	f7ff ff15 	bl	8004518 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff53 	bl	800459a <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 80046f4:	2005      	movs	r0, #5
 80046f6:	f7ff ff0f 	bl	8004518 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ff4d 	bl	800459a <ONEWIRE_INPUT>
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff21 	bl	800455c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ff56 	bl	80045cc <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8004720:	2002      	movs	r0, #2
 8004722:	f7ff fef9 	bl	8004518 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff37 	bl	800459a <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 800472c:	200a      	movs	r0, #10
 800472e:	f7ff fef3 	bl	8004518 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	889b      	ldrh	r3, [r3, #4]
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f008 fc17 	bl	800cf70 <HAL_GPIO_ReadPin>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 800474c:	2032      	movs	r0, #50	; 0x32
 800474e:	f7ff fee3 	bl	8004518 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004768:	2308      	movs	r3, #8
 800476a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 800476c:	e00a      	b.n	8004784 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff93 	bl	80046a4 <OneWire_WriteBit>
		byte >>= 1;
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	1e5a      	subs	r2, r3, #1
 8004788:	73fa      	strb	r2, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ef      	bne.n	800476e <OneWire_WriteByte+0x12>
	}
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800479e:	2308      	movs	r3, #8
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	2300      	movs	r3, #0
 80047a4:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80047a6:	e00d      	b.n	80047c4 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80047a8:	7bbb      	ldrb	r3, [r7, #14]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ffaa 	bl	8004708 <OneWire_ReadBit>
 80047b4:	4603      	mov	r3, r0
 80047b6:	01db      	lsls	r3, r3, #7
 80047b8:	b25a      	sxtb	r2, r3
 80047ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047be:	4313      	orrs	r3, r2
 80047c0:	b25b      	sxtb	r3, r3
 80047c2:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	73fa      	strb	r2, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ec      	bne.n	80047a8 <OneWire_ReadByte+0x12>
	}

	return byte;
 80047ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f816 	bl	8004812 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80047e6:	21f0      	movs	r1, #240	; 0xf0
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f825 	bl	8004838 <OneWire_Search>
 80047ee:	4603      	mov	r3, r0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004800:	21f0      	movs	r1, #240	; 0xf0
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f818 	bl	8004838 <OneWire_Search>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	71da      	strb	r2, [r3, #7]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004850:	2301      	movs	r3, #1
 8004852:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	7a1b      	ldrb	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 809a 	bne.w	8004996 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fef4 	bl	8004650 <OneWire_Reset>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	71da      	strb	r2, [r3, #7]
			return 0;
 8004880:	2300      	movs	r3, #0
 8004882:	e09b      	b.n	80049bc <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff67 	bl	800475c <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ff3a 	bl	8004708 <OneWire_ReadBit>
 8004894:	4603      	mov	r3, r0
 8004896:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff35 	bl	8004708 <OneWire_ReadBit>
 800489e:	4603      	mov	r3, r0
 80048a0:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80048a2:	7a7b      	ldrb	r3, [r7, #9]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <OneWire_Search+0x76>
 80048a8:	7a3b      	ldrb	r3, [r7, #8]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d064      	beq.n	8004978 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80048ae:	7a7a      	ldrb	r2, [r7, #9]
 80048b0:	7a3b      	ldrb	r3, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d002      	beq.n	80048bc <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80048b6:	7a7b      	ldrb	r3, [r7, #9]
 80048b8:	72bb      	strb	r3, [r7, #10]
 80048ba:	e026      	b.n	800490a <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	799b      	ldrb	r3, [r3, #6]
 80048c0:	7bfa      	ldrb	r2, [r7, #15]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20d      	bcs.n	80048e2 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80048c6:	7b7b      	ldrb	r3, [r7, #13]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	7a5a      	ldrb	r2, [r3, #9]
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	4013      	ands	r3, r2
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	72bb      	strb	r3, [r7, #10]
 80048e0:	e008      	b.n	80048f4 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	799b      	ldrb	r3, [r3, #6]
 80048e6:	7bfa      	ldrb	r2, [r7, #15]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80048f4:	7abb      	ldrb	r3, [r7, #10]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d802      	bhi.n	800490a <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	7bba      	ldrb	r2, [r7, #14]
 8004908:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800490a:	7abb      	ldrb	r3, [r7, #10]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10c      	bne.n	800492a <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8004910:	7b7b      	ldrb	r3, [r7, #13]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	7a59      	ldrb	r1, [r3, #9]
 8004918:	7b7b      	ldrb	r3, [r7, #13]
 800491a:	7afa      	ldrb	r2, [r7, #11]
 800491c:	430a      	orrs	r2, r1
 800491e:	b2d1      	uxtb	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4413      	add	r3, r2
 8004924:	460a      	mov	r2, r1
 8004926:	725a      	strb	r2, [r3, #9]
 8004928:	e010      	b.n	800494c <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800492a:	7b7b      	ldrb	r3, [r7, #13]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	7a5b      	ldrb	r3, [r3, #9]
 8004932:	b25a      	sxtb	r2, r3
 8004934:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004938:	43db      	mvns	r3, r3
 800493a:	b25b      	sxtb	r3, r3
 800493c:	4013      	ands	r3, r2
 800493e:	b25a      	sxtb	r2, r3
 8004940:	7b7b      	ldrb	r3, [r7, #13]
 8004942:	b2d1      	uxtb	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	460a      	mov	r2, r1
 800494a:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800494c:	7abb      	ldrb	r3, [r7, #10]
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fea7 	bl	80046a4 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	3301      	adds	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8004962:	7afb      	ldrb	r3, [r7, #11]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8004968:	7b7b      	ldrb	r3, [r7, #13]
 800496a:	3301      	adds	r3, #1
 800496c:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8004972:	7b7b      	ldrb	r3, [r7, #13]
 8004974:	2b07      	cmp	r3, #7
 8004976:	d98a      	bls.n	800488e <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d90b      	bls.n	8004996 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7bba      	ldrb	r2, [r7, #14]
 8004982:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	799b      	ldrb	r3, [r3, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8004992:	2301      	movs	r3, #1
 8004994:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8004996:	7b3b      	ldrb	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <OneWire_Search+0x16c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7a5b      	ldrb	r3, [r3, #9]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80049ba:	7b3b      	ldrb	r3, [r7, #12]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80049ce:	2155      	movs	r1, #85	; 0x55
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fec3 	bl	800475c <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	e00a      	b.n	80049f2 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff feb8 	bl	800475c <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	3301      	adds	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b07      	cmp	r3, #7
 80049f6:	d9f1      	bls.n	80049dc <OneWire_SelectWithPointer+0x18>
	}
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e00a      	b.n	8004a26 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	440b      	add	r3, r1
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	7a52      	ldrb	r2, [r2, #9]
 8004a1e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	3301      	adds	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b07      	cmp	r3, #7
 8004a2a:	d9f1      	bls.n	8004a10 <OneWire_GetFullROM+0x10>
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8004a48:	e022      	b.n	8004a90 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8004a54:	2308      	movs	r3, #8
 8004a56:	737b      	strb	r3, [r7, #13]
 8004a58:	e017      	b.n	8004a8a <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	4053      	eors	r3, r2
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8004a6e:	7b3b      	ldrb	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8004a7e:	7bbb      	ldrb	r3, [r7, #14]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8004a84:	7b7b      	ldrb	r3, [r7, #13]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	737b      	strb	r3, [r7, #13]
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e4      	bne.n	8004a5a <OneWire_CRC8+0x22>
	while (len--) {
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	1e5a      	subs	r2, r3, #1
 8004a94:	70fa      	strb	r2, [r7, #3]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1d7      	bne.n	8004a4a <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
  bool ret = false;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <sdInit+0x80>)
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <sdInit+0x84>)
 8004ab6:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <sdInit+0x80>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <sdInit+0x80>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <sdInit+0x80>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <sdInit+0x80>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <sdInit+0x80>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <sdInit+0x80>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8004adc:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <sdInit+0x88>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <sdInit+0x88>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <sdInit+0x88>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00f      	beq.n	8004b10 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8004af0:	480d      	ldr	r0, [pc, #52]	; (8004b28 <sdInit+0x80>)
 8004af2:	f008 fec5 	bl	800d880 <HAL_SD_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8004afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b00:	4809      	ldr	r0, [pc, #36]	; (8004b28 <sdInit+0x80>)
 8004b02:	f009 fc91 	bl	800e428 <HAL_SD_ConfigWideBusOperation>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <sdInit+0x68>
      {
        ret = true;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <sdInit+0x8c>)
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 8004b16:	4908      	ldr	r1, [pc, #32]	; (8004b38 <sdInit+0x90>)
 8004b18:	4808      	ldr	r0, [pc, #32]	; (8004b3c <sdInit+0x94>)
 8004b1a:	f7fd fcf7 	bl	800250c <cliAdd>
#endif

  return ret;
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	2000ac04 	.word	0x2000ac04
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	2000a2c1 	.word	0x2000a2c1
 8004b34:	2000a2c0 	.word	0x2000a2c0
 8004b38:	08005025 	.word	0x08005025
 8004b3c:	08015cf0 	.word	0x08015cf0

08004b40 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return is_init;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <sdIsInit+0x14>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	2000a2c0 	.word	0x2000a2c0

08004b58 <sdIsDetected>:

bool sdIsDetected(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fe fc57 	bl	8003410 <gpioPinRead>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <sdIsDetected+0x18>
  {
    is_detected = true;
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <sdIsDetected+0x28>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e002      	b.n	8004b76 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <sdIsDetected+0x28>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8004b76:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <sdIsDetected+0x28>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	2000a2c1 	.word	0x2000a2c1

08004b84 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8004b84:	b5b0      	push	{r4, r5, r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <sdGetInfo+0xa4>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d03d      	beq.n	8004c1a <sdGetInfo+0x96>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4821      	ldr	r0, [pc, #132]	; (8004c2c <sdGetInfo+0xa8>)
 8004ba6:	f009 fc13 	bl	800e3d0 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4619      	mov	r1, r3
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f04f 0400 	mov.w	r4, #0
 8004bec:	fb03 f502 	mul.w	r5, r3, r2
 8004bf0:	fb01 f004 	mul.w	r0, r1, r4
 8004bf4:	4428      	add	r0, r5
 8004bf6:	fba1 3403 	umull	r3, r4, r1, r3
 8004bfa:	1902      	adds	r2, r0, r4
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	0d19      	lsrs	r1, r3, #20
 8004c08:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
 8004c0c:	0d22      	lsrs	r2, r4, #20
 8004c0e:	460a      	mov	r2, r1
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	621a      	str	r2, [r3, #32]
    ret = true;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8004c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3730      	adds	r7, #48	; 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bdb0      	pop	{r4, r5, r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2000a2c0 	.word	0x2000a2c0
 8004c2c:	2000ac04 	.word	0x2000ac04

08004c30 <sdIsBusy>:

bool sdIsBusy(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 8004c36:	4808      	ldr	r0, [pc, #32]	; (8004c58 <sdIsBusy+0x28>)
 8004c38:	f009 fc72 	bl	800e520 <HAL_SD_GetCardState>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d102      	bne.n	8004c48 <sdIsBusy+0x18>
  {
    is_busy = false;
 8004c42:	2300      	movs	r3, #0
 8004c44:	71fb      	strb	r3, [r7, #7]
 8004c46:	e001      	b.n	8004c4c <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2000ac04 	.word	0x2000ac04

08004c5c <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8004c64:	f7fc fadd 	bl	8001222 <millis>
 8004c68:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8004c6a:	e009      	b.n	8004c80 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8004c6c:	f7ff ffe0 	bl	8004c30 <sdIsBusy>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f083 0301 	eor.w	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <sdIsReady+0x24>
    {
      return true;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e008      	b.n	8004c92 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8004c80:	f7fc facf 	bl	8001222 <millis>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d8ed      	bhi.n	8004c6c <sdIsReady+0x10>
    }
  }

  return false;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <sdReadBlocks+0x8c>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	481c      	ldr	r0, [pc, #112]	; (8004d2c <sdReadBlocks+0x90>)
 8004cbc:	f008 fe70 	bl	800d9a0 <HAL_SD_ReadBlocks_DMA>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d12a      	bne.n	8004d1c <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8004cc6:	f7fc faac 	bl	8001222 <millis>
 8004cca:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8004ccc:	e007      	b.n	8004cde <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8004cce:	f7fc faa8 	bl	8001222 <millis>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d908      	bls.n	8004cf0 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <sdReadBlocks+0x8c>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f083 0301 	eor.w	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ef      	bne.n	8004cce <sdReadBlocks+0x32>
 8004cee:	e00d      	b.n	8004d0c <sdReadBlocks+0x70>
      {
        break;
 8004cf0:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8004cf2:	e00b      	b.n	8004d0c <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8004cf4:	f7fc fa95 	bl	8001222 <millis>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d803      	bhi.n	8004d0c <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <sdReadBlocks+0x8c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
        break;
 8004d0a:	e004      	b.n	8004d16 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8004d0c:	f7ff ff90 	bl	8004c30 <sdIsBusy>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ee      	bne.n	8004cf4 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <sdReadBlocks+0x8c>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	2000a2c2 	.word	0x2000a2c2
 8004d2c:	2000ac04 	.word	0x2000ac04

08004d30 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <sdWriteBlocks+0x90>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	481d      	ldr	r0, [pc, #116]	; (8004dc4 <sdWriteBlocks+0x94>)
 8004d50:	f008 ff10 	bl	800db74 <HAL_SD_WriteBlocks_DMA>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d12d      	bne.n	8004db6 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 8004d5a:	f7fc fa62 	bl	8001222 <millis>
 8004d5e:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8004d60:	e007      	b.n	8004d72 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8004d62:	f7fc fa5e 	bl	8001222 <millis>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d908      	bls.n	8004d84 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <sdWriteBlocks+0x90>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f083 0301 	eor.w	r3, r3, #1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ef      	bne.n	8004d62 <sdWriteBlocks+0x32>
 8004d82:	e000      	b.n	8004d86 <sdWriteBlocks+0x56>
      {
        break;
 8004d84:	bf00      	nop
      }
    }
    pre_time = millis();
 8004d86:	f7fc fa4c 	bl	8001222 <millis>
 8004d8a:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8004d8c:	e00b      	b.n	8004da6 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 8004d8e:	f7fc fa48 	bl	8001222 <millis>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d803      	bhi.n	8004da6 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <sdWriteBlocks+0x90>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
        break;
 8004da4:	e004      	b.n	8004db0 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8004da6:	f7ff ff43 	bl	8004c30 <sdIsBusy>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ee      	bne.n	8004d8e <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <sdWriteBlocks+0x90>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	2000a2c3 	.word	0x2000a2c3
 8004dc4:	2000ac04 	.word	0x2000ac04

08004dc8 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <HAL_SD_RxCpltCallback+0x1c>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000a2c2 	.word	0x2000a2c2

08004de8 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_SD_TxCpltCallback+0x1c>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000a2c3 	.word	0x2000a2c3

08004e08 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	; 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 031c 	add.w	r3, r7, #28
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a77      	ldr	r2, [pc, #476]	; (8005004 <HAL_SD_MspInit+0x1fc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	f040 80e8 	bne.w	8004ffc <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	4b75      	ldr	r3, [pc, #468]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	4a74      	ldr	r2, [pc, #464]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3c:	4b72      	ldr	r3, [pc, #456]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	4b6e      	ldr	r3, [pc, #440]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	4a6d      	ldr	r2, [pc, #436]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e56:	6453      	str	r3, [r2, #68]	; 0x44
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	4b67      	ldr	r3, [pc, #412]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	4a66      	ldr	r2, [pc, #408]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6313      	str	r3, [r2, #48]	; 0x30
 8004e74:	4b64      	ldr	r3, [pc, #400]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	4b60      	ldr	r3, [pc, #384]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	4a5f      	ldr	r2, [pc, #380]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e8a:	f043 0302 	orr.w	r3, r3, #2
 8004e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e90:	4b5d      	ldr	r3, [pc, #372]	; (8005008 <HAL_SD_MspInit+0x200>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8004e9c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8004ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004eae:	230c      	movs	r3, #12
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb2:	f107 031c 	add.w	r3, r7, #28
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4854      	ldr	r0, [pc, #336]	; (800500c <HAL_SD_MspInit+0x204>)
 8004eba:	f007 fdf5 	bl	800caa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8004ebe:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8004ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed4:	f107 031c 	add.w	r3, r7, #28
 8004ed8:	4619      	mov	r1, r3
 8004eda:	484d      	ldr	r0, [pc, #308]	; (8005010 <HAL_SD_MspInit+0x208>)
 8004edc:	f007 fde4 	bl	800caa8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8004ee0:	4b4c      	ldr	r3, [pc, #304]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004ee2:	4a4d      	ldr	r2, [pc, #308]	; (8005018 <HAL_SD_MspInit+0x210>)
 8004ee4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004ee6:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004ee8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004eec:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eee:	4b49      	ldr	r3, [pc, #292]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ef4:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004efa:	4b46      	ldr	r3, [pc, #280]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f00:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f02:	4b44      	ldr	r3, [pc, #272]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f08:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f0a:	4b42      	ldr	r3, [pc, #264]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f10:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004f12:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f14:	2220      	movs	r2, #32
 8004f16:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f18:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f20:	2204      	movs	r2, #4
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f24:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f26:	2203      	movs	r2, #3
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004f2a:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004f3a:	4836      	ldr	r0, [pc, #216]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f3c:	f007 f9ba 	bl	800c2b4 <HAL_DMA_Init>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8004f46:	f7fc f9db 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a31      	ldr	r2, [pc, #196]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f50:	4a30      	ldr	r2, [pc, #192]	; (8005014 <HAL_SD_MspInit+0x20c>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8004f56:	4b31      	ldr	r3, [pc, #196]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f58:	4a31      	ldr	r2, [pc, #196]	; (8005020 <HAL_SD_MspInit+0x218>)
 8004f5a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004f5c:	4b2f      	ldr	r3, [pc, #188]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f62:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f64:	4b2d      	ldr	r3, [pc, #180]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f66:	2240      	movs	r2, #64	; 0x40
 8004f68:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f70:	4b2a      	ldr	r3, [pc, #168]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f76:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f78:	4b28      	ldr	r3, [pc, #160]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f7e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f80:	4b26      	ldr	r3, [pc, #152]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f86:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f94:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f96:	2204      	movs	r2, #4
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_SD_MspInit+0x214>)
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004fa0:	4b1e      	ldr	r3, [pc, #120]	; (800501c <HAL_SD_MspInit+0x214>)
 8004fa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <HAL_SD_MspInit+0x214>)
 8004faa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004fb0:	481a      	ldr	r0, [pc, #104]	; (800501c <HAL_SD_MspInit+0x214>)
 8004fb2:	f007 f97f 	bl	800c2b4 <HAL_DMA_Init>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8004fbc:	f7fc f9a0 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a16      	ldr	r2, [pc, #88]	; (800501c <HAL_SD_MspInit+0x214>)
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_SD_MspInit+0x214>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2103      	movs	r1, #3
 8004fd0:	2031      	movs	r0, #49	; 0x31
 8004fd2:	f007 f92a 	bl	800c22a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004fd6:	2031      	movs	r0, #49	; 0x31
 8004fd8:	f007 f943 	bl	800c262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2103      	movs	r1, #3
 8004fe0:	203b      	movs	r0, #59	; 0x3b
 8004fe2:	f007 f922 	bl	800c22a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004fe6:	203b      	movs	r0, #59	; 0x3b
 8004fe8:	f007 f93b 	bl	800c262 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004fec:	2200      	movs	r2, #0
 8004fee:	2103      	movs	r1, #3
 8004ff0:	2045      	movs	r0, #69	; 0x45
 8004ff2:	f007 f91a 	bl	800c22a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004ff6:	2045      	movs	r0, #69	; 0x45
 8004ff8:	f007 f933 	bl	800c262 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3730      	adds	r7, #48	; 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40023800 	.word	0x40023800
 800500c:	40020000 	.word	0x40020000
 8005010:	40020400 	.word	0x40020400
 8005014:	2000ab44 	.word	0x2000ab44
 8005018:	400264a0 	.word	0x400264a0
 800501c:	2000aba4 	.word	0x2000aba4
 8005020:	40026458 	.word	0x40026458

08005024 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800502a:	af00      	add	r7, sp, #0
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d179      	bne.n	8005134 <cliSd+0x110>
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	4968      	ldr	r1, [pc, #416]	; (80051e8 <cliSd+0x1c4>)
 8005048:	2000      	movs	r0, #0
 800504a:	4798      	blx	r3
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d070      	beq.n	8005134 <cliSd+0x110>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8005052:	4b66      	ldr	r3, [pc, #408]	; (80051ec <cliSd+0x1c8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4865      	ldr	r0, [pc, #404]	; (80051f0 <cliSd+0x1cc>)
 800505a:	f7fd f947 	bl	80022ec <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 800505e:	4b65      	ldr	r3, [pc, #404]	; (80051f4 <cliSd+0x1d0>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	4619      	mov	r1, r3
 8005064:	4864      	ldr	r0, [pc, #400]	; (80051f8 <cliSd+0x1d4>)
 8005066:	f7fd f941 	bl	80022ec <cliPrintf>

    if (is_init == true)
 800506a:	4b60      	ldr	r3, [pc, #384]	; (80051ec <cliSd+0x1c8>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d05d      	beq.n	800512e <cliSd+0x10a>
    {
      if (sdGetInfo(&sd_info) == true)
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fd84 	bl	8004b84 <sdGetInfo>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d055      	beq.n	800512e <cliSd+0x10a>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8005082:	f107 030c 	add.w	r3, r7, #12
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	485c      	ldr	r0, [pc, #368]	; (80051fc <cliSd+0x1d8>)
 800508c:	f7fd f92e 	bl	80022ec <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8005090:	f107 030c 	add.w	r3, r7, #12
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4619      	mov	r1, r3
 8005098:	4859      	ldr	r0, [pc, #356]	; (8005200 <cliSd+0x1dc>)
 800509a:	f7fd f927 	bl	80022ec <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 800509e:	f107 030c 	add.w	r3, r7, #12
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4619      	mov	r1, r3
 80050a6:	4857      	ldr	r0, [pc, #348]	; (8005204 <cliSd+0x1e0>)
 80050a8:	f7fd f920 	bl	80022ec <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80050ac:	f107 030c 	add.w	r3, r7, #12
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	4619      	mov	r1, r3
 80050b4:	4854      	ldr	r0, [pc, #336]	; (8005208 <cliSd+0x1e4>)
 80050b6:	f7fd f919 	bl	80022ec <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 80050ba:	f107 030c 	add.w	r3, r7, #12
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	4619      	mov	r1, r3
 80050c2:	4852      	ldr	r0, [pc, #328]	; (800520c <cliSd+0x1e8>)
 80050c4:	f7fd f912 	bl	80022ec <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 80050c8:	f107 030c 	add.w	r3, r7, #12
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4619      	mov	r1, r3
 80050d0:	484f      	ldr	r0, [pc, #316]	; (8005210 <cliSd+0x1ec>)
 80050d2:	f7fd f90b 	bl	80022ec <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4619      	mov	r1, r3
 80050de:	484d      	ldr	r0, [pc, #308]	; (8005214 <cliSd+0x1f0>)
 80050e0:	f7fd f904 	bl	80022ec <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80050e4:	f107 030c 	add.w	r3, r7, #12
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	4619      	mov	r1, r3
 80050ec:	484a      	ldr	r0, [pc, #296]	; (8005218 <cliSd+0x1f4>)
 80050ee:	f7fd f8fd 	bl	80022ec <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80050f2:	f107 030c 	add.w	r3, r7, #12
 80050f6:	6a18      	ldr	r0, [r3, #32]
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	0a9c      	lsrs	r4, r3, #10
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	6a1a      	ldr	r2, [r3, #32]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	0a99      	lsrs	r1, r3, #10
 8005110:	4b42      	ldr	r3, [pc, #264]	; (800521c <cliSd+0x1f8>)
 8005112:	fba3 2301 	umull	r2, r3, r3, r1
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	1aca      	subs	r2, r1, r3
 8005122:	4613      	mov	r3, r2
 8005124:	4622      	mov	r2, r4
 8005126:	4601      	mov	r1, r0
 8005128:	483d      	ldr	r0, [pc, #244]	; (8005220 <cliSd+0x1fc>)
 800512a:	f7fd f8df 	bl	80022ec <cliPrintf>
      }
    }
    ret = true;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d13e      	bne.n	80051bc <cliSd+0x198>
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	4937      	ldr	r1, [pc, #220]	; (8005224 <cliSd+0x200>)
 8005146:	2000      	movs	r0, #0
 8005148:	4798      	blx	r3
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d035      	beq.n	80051bc <cliSd+0x198>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2001      	movs	r0, #1
 8005158:	4798      	blx	r3
 800515a:	4603      	mov	r3, r0
 800515c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8005160:	f107 010c 	add.w	r1, r7, #12
 8005164:	2364      	movs	r3, #100	; 0x64
 8005166:	2201      	movs	r2, #1
 8005168:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800516c:	f7ff fd96 	bl	8004c9c <sdReadBlocks>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01c      	beq.n	80051b0 <cliSd+0x18c>
    {
      for (int i=0; i<512/4; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800517c:	e013      	b.n	80051a6 <cliSd+0x182>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 800517e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005182:	0099      	lsls	r1, r3, #2
 8005184:	f107 030c 	add.w	r3, r7, #12
 8005188:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800518c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005190:	460a      	mov	r2, r1
 8005192:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8005196:	4824      	ldr	r0, [pc, #144]	; (8005228 <cliSd+0x204>)
 8005198:	f7fd f8a8 	bl	80022ec <cliPrintf>
      for (int i=0; i<512/4; i++)
 800519c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80051a0:	3301      	adds	r3, #1
 80051a2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80051a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80051aa:	2b7f      	cmp	r3, #127	; 0x7f
 80051ac:	dde7      	ble.n	800517e <cliSd+0x15a>
 80051ae:	e002      	b.n	80051b6 <cliSd+0x192>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 80051b0:	481e      	ldr	r0, [pc, #120]	; (800522c <cliSd+0x208>)
 80051b2:	f7fd f89b 	bl	80022ec <cliPrintf>
    }

    ret = true;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 80051bc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80051c0:	f083 0301 	eor.w	r3, r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <cliSd+0x1ba>
  {
    cliPrintf("sd info\n");
 80051ca:	4819      	ldr	r0, [pc, #100]	; (8005230 <cliSd+0x20c>)
 80051cc:	f7fd f88e 	bl	80022ec <cliPrintf>

    if (is_init == true)
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <cliSd+0x1c8>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <cliSd+0x1ba>
    {
      cliPrintf("sd read block_number\n");
 80051d8:	4816      	ldr	r0, [pc, #88]	; (8005234 <cliSd+0x210>)
 80051da:	f7fd f887 	bl	80022ec <cliPrintf>
    }
  }
}
 80051de:	bf00      	nop
 80051e0:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}
 80051e8:	08015cf4 	.word	0x08015cf4
 80051ec:	2000a2c0 	.word	0x2000a2c0
 80051f0:	08015cfc 	.word	0x08015cfc
 80051f4:	2000a2c1 	.word	0x2000a2c1
 80051f8:	08015d10 	.word	0x08015d10
 80051fc:	08015d24 	.word	0x08015d24
 8005200:	08015d44 	.word	0x08015d44
 8005204:	08015d64 	.word	0x08015d64
 8005208:	08015d84 	.word	0x08015d84
 800520c:	08015da4 	.word	0x08015da4
 8005210:	08015dc4 	.word	0x08015dc4
 8005214:	08015de4 	.word	0x08015de4
 8005218:	08015e04 	.word	0x08015e04
 800521c:	cccccccd 	.word	0xcccccccd
 8005220:	08015e24 	.word	0x08015e24
 8005224:	08015e50 	.word	0x08015e50
 8005228:	08015e58 	.word	0x08015e58
 800522c:	08015e6c 	.word	0x08015e6c
 8005230:	08015e7c 	.word	0x08015e7c
 8005234:	08015e88 	.word	0x08015e88

08005238 <DWT_Delay_us>:
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <DWT_Delay_us+0x3c>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8005246:	f008 fae7 	bl	800d818 <HAL_RCC_GetHCLKFreq>
 800524a:	4602      	mov	r2, r0
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <DWT_Delay_us+0x40>)
 800524e:	fba3 2302 	umull	r2, r3, r3, r2
 8005252:	0c9b      	lsrs	r3, r3, #18
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800525c:	bf00      	nop
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <DWT_Delay_us+0x3c>)
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d3f8      	bcc.n	800525e <DWT_Delay_us+0x26>
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	e0001000 	.word	0xe0001000
 8005278:	431bde83 	.word	0x431bde83

0800527c <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08c      	sub	sp, #48	; 0x30
 8005280:	af00      	add	r7, sp, #0
	bool ret = false;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005288:	f107 031c 	add.w	r3, r7, #28
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	605a      	str	r2, [r3, #4]
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 80052ac:	4b2e      	ldr	r3, [pc, #184]	; (8005368 <sonarInit+0xec>)
 80052ae:	4a2f      	ldr	r2, [pc, #188]	; (800536c <sonarInit+0xf0>)
 80052b0:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 80052b2:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <sonarInit+0xec>)
 80052b4:	225f      	movs	r2, #95	; 0x5f
 80052b6:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <sonarInit+0xec>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 80052be:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <sonarInit+0xec>)
 80052c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052c4:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052c6:	4b28      	ldr	r3, [pc, #160]	; (8005368 <sonarInit+0xec>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <sonarInit+0xec>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80052d2:	4825      	ldr	r0, [pc, #148]	; (8005368 <sonarInit+0xec>)
 80052d4:	f00a fb04 	bl	800f8e0 <HAL_TIM_Base_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <sonarInit+0x66>
	  {
	    Error_Handler();
 80052de:	f7fc f80f 	bl	8001300 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052e6:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80052e8:	f107 031c 	add.w	r3, r7, #28
 80052ec:	4619      	mov	r1, r3
 80052ee:	481e      	ldr	r0, [pc, #120]	; (8005368 <sonarInit+0xec>)
 80052f0:	f00a fd62 	bl	800fdb8 <HAL_TIM_ConfigClockSource>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <sonarInit+0x82>
	  {
	    Error_Handler();
 80052fa:	f7fc f801 	bl	8001300 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80052fe:	481a      	ldr	r0, [pc, #104]	; (8005368 <sonarInit+0xec>)
 8005300:	f00a fb19 	bl	800f936 <HAL_TIM_IC_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <sonarInit+0x92>
	  {
	    Error_Handler();
 800530a:	f7fb fff9 	bl	8001300 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005316:	f107 0314 	add.w	r3, r7, #20
 800531a:	4619      	mov	r1, r3
 800531c:	4812      	ldr	r0, [pc, #72]	; (8005368 <sonarInit+0xec>)
 800531e:	f00b f889 	bl	8010434 <HAL_TIMEx_MasterConfigSynchronization>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <sonarInit+0xb0>
	  {
	    Error_Handler();
 8005328:	f7fb ffea 	bl	8001300 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800532c:	2300      	movs	r3, #0
 800532e:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005330:	2301      	movs	r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	220c      	movs	r2, #12
 8005340:	4619      	mov	r1, r3
 8005342:	4809      	ldr	r0, [pc, #36]	; (8005368 <sonarInit+0xec>)
 8005344:	f00a fc9c 	bl	800fc80 <HAL_TIM_IC_ConfigChannel>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <sonarInit+0xd6>
	  {
	    Error_Handler();
 800534e:	f7fb ffd7 	bl	8001300 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8005352:	210c      	movs	r1, #12
 8005354:	4804      	ldr	r0, [pc, #16]	; (8005368 <sonarInit+0xec>)
 8005356:	f00a fb23 	bl	800f9a0 <HAL_TIM_IC_Start_IT>

	return ret;
 800535a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800535e:	4618      	mov	r0, r3
 8005360:	3730      	adds	r7, #48	; 0x30
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2000ac88 	.word	0x2000ac88
 800536c:	40000400 	.word	0x40000400

08005370 <Sonar_measure>:

bool Sonar_measure(void)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
	bool ret = false;
 8005376:	2300      	movs	r3, #0
 8005378:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 800537a:	4b5d      	ldr	r3, [pc, #372]	; (80054f0 <Sonar_measure+0x180>)
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <Sonar_measure+0x18>
 8005382:	2b01      	cmp	r3, #1
 8005384:	d022      	beq.n	80053cc <Sonar_measure+0x5c>
 8005386:	e0a9      	b.n	80054dc <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8005388:	2103      	movs	r1, #3
 800538a:	2008      	movs	r0, #8
 800538c:	f7fd ff7a 	bl	8003284 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8005390:	2101      	movs	r1, #1
 8005392:	2008      	movs	r0, #8
 8005394:	f7fd ffe8 	bl	8003368 <gpioPinWrite>
			DWT_Delay_us(5);
 8005398:	2005      	movs	r0, #5
 800539a:	f7ff ff4d 	bl	8005238 <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 800539e:	2100      	movs	r1, #0
 80053a0:	2008      	movs	r0, #8
 80053a2:	f7fd ffe1 	bl	8003368 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 80053a6:	2106      	movs	r1, #6
 80053a8:	2008      	movs	r0, #8
 80053aa:	f7fd ff6b 	bl	8003284 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 80053ae:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <Sonar_measure+0x180>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 80053b4:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <Sonar_measure+0x180>)
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	3301      	adds	r3, #1
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <Sonar_measure+0x180>)
 80053be:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 80053c0:	f7fb ff2f 	bl	8001222 <millis>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b4b      	ldr	r3, [pc, #300]	; (80054f4 <Sonar_measure+0x184>)
 80053c8:	601a      	str	r2, [r3, #0]
			break;
 80053ca:	e087      	b.n	80054dc <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 80053cc:	4b48      	ldr	r3, [pc, #288]	; (80054f0 <Sonar_measure+0x180>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f083 0301 	eor.w	r3, r3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d06a      	beq.n	80054b0 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 80053da:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <Sonar_measure+0x180>)
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b44      	ldr	r3, [pc, #272]	; (80054f0 <Sonar_measure+0x180>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d907      	bls.n	80053f6 <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 80053e6:	4b42      	ldr	r3, [pc, #264]	; (80054f0 <Sonar_measure+0x180>)
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <Sonar_measure+0x180>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <Sonar_measure+0x180>)
 80053f2:	60d3      	str	r3, [r2, #12]
 80053f4:	e00e      	b.n	8005414 <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 80053f6:	4b3e      	ldr	r3, [pc, #248]	; (80054f0 <Sonar_measure+0x180>)
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <Sonar_measure+0x180>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d208      	bcs.n	8005414 <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <Sonar_measure+0x180>)
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	4b3a      	ldr	r3, [pc, #232]	; (80054f0 <Sonar_measure+0x180>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005410:	4a37      	ldr	r2, [pc, #220]	; (80054f0 <Sonar_measure+0x180>)
 8005412:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8005414:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <Sonar_measure+0x180>)
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb f887 	bl	8000534 <__aeabi_ui2d>
 8005426:	a330      	add	r3, pc, #192	; (adr r3, 80054e8 <Sonar_measure+0x178>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fb f8fc 	bl	8000628 <__aeabi_dmul>
 8005430:	4603      	mov	r3, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4618      	mov	r0, r3
 8005436:	4621      	mov	r1, r4
 8005438:	f7fb fbce 	bl	8000bd8 <__aeabi_d2uiz>
 800543c:	4602      	mov	r2, r0
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <Sonar_measure+0x180>)
 8005440:	615a      	str	r2, [r3, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8005442:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <Sonar_measure+0x188>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	3301      	adds	r3, #1
 800544a:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 800544c:	79bb      	ldrb	r3, [r7, #6]
 800544e:	2b0b      	cmp	r3, #11
 8005450:	d101      	bne.n	8005456 <Sonar_measure+0xe6>
 8005452:	2300      	movs	r3, #0
 8005454:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <Sonar_measure+0x180>)
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <Sonar_measure+0x188>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	b211      	sxth	r1, r2
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <Sonar_measure+0x18c>)
 8005462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <Sonar_measure+0x188>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a24      	ldr	r2, [pc, #144]	; (80054fc <Sonar_measure+0x18c>)
 800546c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005470:	461a      	mov	r2, r3
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <Sonar_measure+0x190>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4413      	add	r3, r2
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <Sonar_measure+0x190>)
 800547a:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 800547c:	4b20      	ldr	r3, [pc, #128]	; (8005500 <Sonar_measure+0x190>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	79ba      	ldrb	r2, [r7, #6]
 8005482:	491e      	ldr	r1, [pc, #120]	; (80054fc <Sonar_measure+0x18c>)
 8005484:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <Sonar_measure+0x190>)
 800548c:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 800548e:	79bb      	ldrb	r3, [r7, #6]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <Sonar_measure+0x188>)
 8005492:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <Sonar_measure+0x190>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <Sonar_measure+0x194>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <Sonar_measure+0x180>)
 80054a2:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <Sonar_measure+0x180>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	705a      	strb	r2, [r3, #1]
				ret = true;
 80054aa:	2301      	movs	r3, #1
 80054ac:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 80054ae:	e014      	b.n	80054da <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 80054b0:	f7fb feb7 	bl	8001222 <millis>
 80054b4:	4602      	mov	r2, r0
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <Sonar_measure+0x184>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b18      	cmp	r3, #24
 80054be:	d90c      	bls.n	80054da <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <Sonar_measure+0x180>)
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	3301      	adds	r3, #1
 80054c6:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <Sonar_measure+0x180>)
 80054c8:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <Sonar_measure+0x180>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <Sonar_measure+0x180>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	705a      	strb	r2, [r3, #1]
					ret = false;
 80054d6:	2300      	movs	r3, #0
 80054d8:	71fb      	strb	r3, [r7, #7]
			break;
 80054da:	bf00      	nop
	}
	return ret;
 80054dc:	79fb      	ldrb	r3, [r7, #7]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	75f6fd22 	.word	0x75f6fd22
 80054ec:	3f919ce0 	.word	0x3f919ce0
 80054f0:	2000a2c4 	.word	0x2000a2c4
 80054f4:	2000a2e0 	.word	0x2000a2e0
 80054f8:	2000a2e4 	.word	0x2000a2e4
 80054fc:	2000a2e8 	.word	0x2000a2e8
 8005500:	2000a300 	.word	0x2000a300
 8005504:	cccccccd 	.word	0xcccccccd

08005508 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1d      	ldr	r2, [pc, #116]	; (800559c <HAL_TIM_Base_MspInit+0x94>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d133      	bne.n	8005592 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <HAL_TIM_Base_MspInit+0x98>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIM_Base_MspInit+0x98>)
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	6413      	str	r3, [r2, #64]	; 0x40
 800553a:	4b19      	ldr	r3, [pc, #100]	; (80055a0 <HAL_TIM_Base_MspInit+0x98>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_TIM_Base_MspInit+0x98>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <HAL_TIM_Base_MspInit+0x98>)
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	6313      	str	r3, [r2, #48]	; 0x30
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_TIM_Base_MspInit+0x98>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005562:	2302      	movs	r3, #2
 8005564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005566:	2302      	movs	r3, #2
 8005568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556e:	2300      	movs	r3, #0
 8005570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005572:	2302      	movs	r3, #2
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	4619      	mov	r1, r3
 800557c:	4809      	ldr	r0, [pc, #36]	; (80055a4 <HAL_TIM_Base_MspInit+0x9c>)
 800557e:	f007 fa93 	bl	800caa8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005582:	2200      	movs	r2, #0
 8005584:	2101      	movs	r1, #1
 8005586:	201d      	movs	r0, #29
 8005588:	f006 fe4f 	bl	800c22a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800558c:	201d      	movs	r0, #29
 800558e:	f006 fe68 	bl	800c262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005592:	bf00      	nop
 8005594:	3728      	adds	r7, #40	; 0x28
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40000400 	.word	0x40000400
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40020400 	.word	0x40020400

080055a8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7f1b      	ldrb	r3, [r3, #28]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d129      	bne.n	800560c <HAL_TIM_IC_CaptureCallback+0x64>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d124      	bne.n	800560c <HAL_TIM_IC_CaptureCallback+0x64>
 80055c2:	4b16      	ldr	r3, [pc, #88]	; (800561c <HAL_TIM_IC_CaptureCallback+0x74>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d020      	beq.n	800560c <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_TIM_IC_CaptureCallback+0x78>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_TIM_IC_CaptureCallback+0x74>)
 80055e2:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ee:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 80055f0:	e00c      	b.n	800560c <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <HAL_TIM_IC_CaptureCallback+0x74>)
 80055f8:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4a06      	ldr	r2, [pc, #24]	; (8005618 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005604:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_TIM_IC_CaptureCallback+0x74>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40000400 	.word	0x40000400
 800561c:	2000a2c4 	.word	0x2000a2c4
 8005620:	40020400 	.word	0x40020400

08005624 <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
  bool ret = true;
 800562a:	2301      	movs	r3, #1
 800562c:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	e03d      	b.n	80056b0 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8005634:	4923      	ldr	r1, [pc, #140]	; (80056c4 <spiInit+0xa0>)
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8005646:	491f      	ldr	r1, [pc, #124]	; (80056c4 <spiInit+0xa0>)
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3301      	adds	r3, #1
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 800565a:	491a      	ldr	r1, [pc, #104]	; (80056c4 <spiInit+0xa0>)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3302      	adds	r3, #2
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 800566e:	4915      	ldr	r1, [pc, #84]	; (80056c4 <spiInit+0xa0>)
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3304      	adds	r3, #4
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8005682:	4910      	ldr	r1, [pc, #64]	; (80056c4 <spiInit+0xa0>)
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3310      	adds	r3, #16
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8005696:	490b      	ldr	r1, [pc, #44]	; (80056c4 <spiInit+0xa0>)
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	330c      	adds	r3, #12
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3301      	adds	r3, #1
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	ddbe      	ble.n	8005634 <spiInit+0x10>
  }

  return ret;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	2000acc8 	.word	0x2000acc8

080056c8 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a23      	ldr	r2, [pc, #140]	; (8005770 <spiBegin+0xa8>)
 80056e2:	4413      	add	r3, r2
 80056e4:	60bb      	str	r3, [r7, #8]

  switch(ch)
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <spiBegin+0x28>
 80056ec:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 80056ee:	e03a      	b.n	8005766 <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a20      	ldr	r2, [pc, #128]	; (8005774 <spiBegin+0xac>)
 80056f4:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4a1f      	ldr	r2, [pc, #124]	; (8005778 <spiBegin+0xb0>)
 80056fa:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <spiBegin+0xac>)
 80056fe:	4a1f      	ldr	r2, [pc, #124]	; (800577c <spiBegin+0xb4>)
 8005700:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <spiBegin+0xac>)
 8005704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005708:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <spiBegin+0xac>)
 800570c:	2200      	movs	r2, #0
 800570e:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <spiBegin+0xac>)
 8005712:	2200      	movs	r2, #0
 8005714:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005716:	4b17      	ldr	r3, [pc, #92]	; (8005774 <spiBegin+0xac>)
 8005718:	2200      	movs	r2, #0
 800571a:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <spiBegin+0xac>)
 800571e:	2200      	movs	r2, #0
 8005720:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 8005722:	4b14      	ldr	r3, [pc, #80]	; (8005774 <spiBegin+0xac>)
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <spiBegin+0xac>)
 800572c:	2200      	movs	r2, #0
 800572e:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005730:	4b10      	ldr	r3, [pc, #64]	; (8005774 <spiBegin+0xac>)
 8005732:	2200      	movs	r2, #0
 8005734:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <spiBegin+0xac>)
 8005738:	2200      	movs	r2, #0
 800573a:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <spiBegin+0xac>)
 800573e:	2200      	movs	r2, #0
 8005740:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <spiBegin+0xac>)
 8005744:	220a      	movs	r2, #10
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8005748:	480a      	ldr	r0, [pc, #40]	; (8005774 <spiBegin+0xac>)
 800574a:	f009 fc05 	bl	800ef58 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 800574e:	4809      	ldr	r0, [pc, #36]	; (8005774 <spiBegin+0xac>)
 8005750:	f009 fb9e 	bl	800ee90 <HAL_SPI_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <spiBegin+0x9c>
        p_spi->is_open = true;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2201      	movs	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	bf00      	nop
  }

  return ret;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	2000acc8 	.word	0x2000acc8
 8005774:	2000acdc 	.word	0x2000acdc
 8005778:	2000ad34 	.word	0x2000ad34
 800577c:	40013000 	.word	0x40013000

08005780 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	460a      	mov	r2, r1
 800578a:	71fb      	strb	r3, [r7, #7]
 800578c:	4613      	mov	r3, r2
 800578e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005790:	79fa      	ldrb	r2, [r7, #7]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <spiSetDataMode+0xc8>)
 800579c:	4413      	add	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f083 0301 	eor.w	r3, r3, #1
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d147      	bne.n	800583e <spiSetDataMode+0xbe>


  switch( dataMode )
 80057ae:	79bb      	ldrb	r3, [r7, #6]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d845      	bhi.n	8005840 <spiSetDataMode+0xc0>
 80057b4:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <spiSetDataMode+0x3c>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	08005805 	.word	0x08005805
 80057c8:	08005821 	.word	0x08005821
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2200      	movs	r2, #0
 80057d2:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f009 fb55 	bl	800ee90 <HAL_SPI_Init>
      break;
 80057e6:	e02b      	b.n	8005840 <spiSetDataMode+0xc0>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2201      	movs	r2, #1
 80057f6:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f009 fb47 	bl	800ee90 <HAL_SPI_Init>
      break;
 8005802:	e01d      	b.n	8005840 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2202      	movs	r2, #2
 800580a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f009 fb39 	bl	800ee90 <HAL_SPI_Init>
      break;
 800581e:	e00f      	b.n	8005840 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2202      	movs	r2, #2
 8005826:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2201      	movs	r2, #1
 800582e:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4618      	mov	r0, r3
 8005836:	f009 fb2b 	bl	800ee90 <HAL_SPI_Init>
      break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <spiSetDataMode+0xc0>
  if (p_spi->is_open == false) return;
 800583e:	bf00      	nop
  }
}
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	2000acc8 	.word	0x2000acc8

0800584c <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	460a      	mov	r2, r1
 8005856:	71fb      	strb	r3, [r7, #7]
 8005858:	4613      	mov	r3, r2
 800585a:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 800585c:	79fa      	ldrb	r2, [r7, #7]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <spiSetBitWidth+0x5c>)
 8005868:	4413      	add	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f083 0301 	eor.w	r3, r3, #1
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d111      	bne.n	800589e <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8005882:	79bb      	ldrb	r3, [r7, #6]
 8005884:	2b10      	cmp	r3, #16
 8005886:	d104      	bne.n	8005892 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005890:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f009 fafa 	bl	800ee90 <HAL_SPI_Init>
 800589c:	e000      	b.n	80058a0 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 800589e:	bf00      	nop
}
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000acc8 	.word	0x2000acc8

080058ac <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	4603      	mov	r3, r0
 80058b4:	460a      	mov	r2, r1
 80058b6:	71fb      	strb	r3, [r7, #7]
 80058b8:	4613      	mov	r3, r2
 80058ba:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 80058bc:	79fa      	ldrb	r2, [r7, #7]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <spiTransfer8+0x50>)
 80058c8:	4413      	add	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f083 0301 	eor.w	r3, r3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <spiTransfer8+0x32>
 80058da:	2300      	movs	r3, #0
 80058dc:	e00a      	b.n	80058f4 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6898      	ldr	r0, [r3, #8]
 80058e2:	f107 020b 	add.w	r2, r7, #11
 80058e6:	1db9      	adds	r1, r7, #6
 80058e8:	230a      	movs	r3, #10
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2301      	movs	r3, #1
 80058ee:	f009 fb5b 	bl	800efa8 <HAL_SPI_TransmitReceive>

  return ret;
 80058f2:	7afb      	ldrb	r3, [r7, #11]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	2000acc8 	.word	0x2000acc8

08005900 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 800590e:	7bfa      	ldrb	r2, [r7, #15]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <spiDmaTxStart+0x4c>)
 800591a:	4413      	add	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f083 0301 	eor.w	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2200      	movs	r2, #0
 8005930:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	b292      	uxth	r2, r2
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f009 fcd5 	bl	800f2ec <HAL_SPI_Transmit_DMA>
 8005942:	e000      	b.n	8005946 <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8005944:	bf00      	nop
}
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	2000acc8 	.word	0x2000acc8

08005950 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff ffc8 	bl	8005900 <spiDmaTxStart>

  t_time = millis();
 8005970:	f7fb fc57 	bl	8001222 <millis>
 8005974:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <spiDmaTxTransfer+0x30>
 800597c:	2301      	movs	r3, #1
 800597e:	e013      	b.n	80059a8 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f814 	bl	80059b0 <spiDmaTxIsDone>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 800598e:	f7fb fc48 	bl	8001222 <millis>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d2f0      	bcs.n	8005980 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]
      break;
 80059a2:	e000      	b.n	80059a6 <spiDmaTxTransfer+0x56>
      break;
 80059a4:	bf00      	nop
    }
  }

  return ret;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80059ba:	79fa      	ldrb	r2, [r7, #7]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4a09      	ldr	r2, [pc, #36]	; (80059ec <spiDmaTxIsDone+0x3c>)
 80059c6:	4413      	add	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f083 0301 	eor.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <spiDmaTxIsDone+0x2c>
 80059d8:	2301      	movs	r3, #1
 80059da:	e001      	b.n	80059e0 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	785b      	ldrb	r3, [r3, #1]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	2000acc8 	.word	0x2000acc8

080059f0 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	6039      	str	r1, [r7, #0]
 80059fa:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80059fc:	79fa      	ldrb	r2, [r7, #7]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4a0a      	ldr	r2, [pc, #40]	; (8005a30 <spiAttachTxInterrupt+0x40>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f083 0301 	eor.w	r3, r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	e000      	b.n	8005a24 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8005a22:	bf00      	nop
}
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	2000acc8 	.word	0x2000acc8

08005a34 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_SPI_ErrorCallback+0x28>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d102      	bne.n	8005a50 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <HAL_SPI_ErrorCallback+0x28>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	709a      	strb	r2, [r3, #2]
  }
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	2000acc8 	.word	0x2000acc8

08005a60 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <HAL_SPI_TxCpltCallback+0x38>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d10b      	bne.n	8005a8e <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8005a76:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <HAL_SPI_TxCpltCallback+0x38>)
 8005a78:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4798      	blx	r3
    }
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000acc8 	.word	0x2000acc8

08005a9c <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	605a      	str	r2, [r3, #4]
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a40      	ldr	r2, [pc, #256]	; (8005bbc <HAL_SPI_MspInit+0x120>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d179      	bne.n	8005bb2 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	4a3e      	ldr	r2, [pc, #248]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005acc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ace:	4b3c      	ldr	r3, [pc, #240]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4b38      	ldr	r3, [pc, #224]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	4a37      	ldr	r2, [pc, #220]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aea:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	4a30      	ldr	r2, [pc, #192]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6313      	str	r3, [r2, #48]	; 0x30
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <HAL_SPI_MspInit+0x124>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b12:	23a0      	movs	r3, #160	; 0xa0
 8005b14:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b16:	2302      	movs	r3, #2
 8005b18:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b22:	2305      	movs	r3, #5
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4825      	ldr	r0, [pc, #148]	; (8005bc4 <HAL_SPI_MspInit+0x128>)
 8005b2e:	f006 ffbb 	bl	800caa8 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 8005b32:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_SPI_MspInit+0x130>)
 8005b36:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005b38:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b3a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b3e:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b42:	2240      	movs	r2, #64	; 0x40
 8005b44:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b52:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b5a:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b62:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b70:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005b76:	4814      	ldr	r0, [pc, #80]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b78:	f006 fb9c 	bl	800c2b4 <HAL_DMA_Init>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8005b82:	f7fb fbbd 	bl	8001300 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a0f      	ldr	r2, [pc, #60]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b8a:	649a      	str	r2, [r3, #72]	; 0x48
 8005b8c:	4a0e      	ldr	r2, [pc, #56]	; (8005bc8 <HAL_SPI_MspInit+0x12c>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005b92:	2200      	movs	r2, #0
 8005b94:	2100      	movs	r1, #0
 8005b96:	2023      	movs	r0, #35	; 0x23
 8005b98:	f006 fb47 	bl	800c22a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005b9c:	2023      	movs	r0, #35	; 0x23
 8005b9e:	f006 fb60 	bl	800c262 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2105      	movs	r1, #5
 8005ba6:	2044      	movs	r0, #68	; 0x44
 8005ba8:	f006 fb3f 	bl	800c22a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005bac:	2044      	movs	r0, #68	; 0x44
 8005bae:	f006 fb58 	bl	800c262 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40013000 	.word	0x40013000
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	40020000 	.word	0x40020000
 8005bc8:	2000ad34 	.word	0x2000ad34
 8005bcc:	40026488 	.word	0x40026488

08005bd0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <HAL_SPI_MspDeInit+0x40>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d111      	bne.n	8005c06 <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <HAL_SPI_MspDeInit+0x44>)
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <HAL_SPI_MspDeInit+0x44>)
 8005be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bec:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8005bee:	21a0      	movs	r1, #160	; 0xa0
 8005bf0:	4809      	ldr	r0, [pc, #36]	; (8005c18 <HAL_SPI_MspDeInit+0x48>)
 8005bf2:	f007 f8db 	bl	800cdac <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f006 fc08 	bl	800c410 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8005c00:	2023      	movs	r0, #35	; 0x23
 8005c02:	f006 fb3c 	bl	800c27e <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40013000 	.word	0x40013000
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40020000 	.word	0x40020000

08005c1c <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
	bool ret = true;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 8005c26:	4b31      	ldr	r3, [pc, #196]	; (8005cec <tdsInit+0xd0>)
 8005c28:	2203      	movs	r2, #3
 8005c2a:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8005c2c:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <tdsInit+0xd0>)
 8005c2e:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <tdsInit+0xd4>)
 8005c30:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8005c32:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <tdsInit+0xd0>)
 8005c34:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005c38:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <tdsInit+0xd0>)
 8005c3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c40:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8005c4e:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <tdsInit+0xd8>)
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <tdsInit+0xdc>)
 8005c52:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005c54:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <tdsInit+0xd8>)
 8005c56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c5a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <tdsInit+0xd8>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <tdsInit+0xd8>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <tdsInit+0xd8>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c6e:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <tdsInit+0xd8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c76:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <tdsInit+0xd8>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <tdsInit+0xd8>)
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <tdsInit+0xe0>)
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <tdsInit+0xd8>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <tdsInit+0xd8>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005c8e:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <tdsInit+0xd8>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <tdsInit+0xd8>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c9c:	4815      	ldr	r0, [pc, #84]	; (8005cf4 <tdsInit+0xd8>)
 8005c9e:	f005 fc8d 	bl	800b5bc <HAL_ADC_Init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <tdsInit+0x90>
	  {
	    Error_Handler();
 8005ca8:	f7fb fb2a 	bl	8001300 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8005cac:	2301      	movs	r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <tdsInit+0xd8>)
 8005cbe:	f005 fefd 	bl	800babc <HAL_ADC_ConfigChannel>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <tdsInit+0xb0>
	  {
	    Error_Handler();
 8005cc8:	f7fb fb1a 	bl	8001300 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	490c      	ldr	r1, [pc, #48]	; (8005d00 <tdsInit+0xe4>)
 8005cd0:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <tdsInit+0xd8>)
 8005cd2:	f005 fdf7 	bl	800b8c4 <HAL_ADC_Start_DMA>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <tdsInit+0xc4>
	{
		Error_Handler();
 8005cdc:	f7fb fb10 	bl	8001300 <Error_Handler>
	}

	return ret;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]

}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000ad94 	.word	0x2000ad94
 8005cf0:	41c80000 	.word	0x41c80000
 8005cf4:	2000adbc 	.word	0x2000adbc
 8005cf8:	40012000 	.word	0x40012000
 8005cfc:	0f000001 	.word	0x0f000001
 8005d00:	2000ada4 	.word	0x2000ada4
 8005d04:	00000000 	.word	0x00000000

08005d08 <tds_measure>:
bool tds_measure(void)
{
 8005d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
	bool ret = true;
 8005d10:	2301      	movs	r3, #1
 8005d12:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8005d14:	4b8e      	ldr	r3, [pc, #568]	; (8005f50 <tds_measure+0x248>)
 8005d16:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fa fc15 	bl	8000578 <__aeabi_f2d>
 8005d4e:	a378      	add	r3, pc, #480	; (adr r3, 8005f30 <tds_measure+0x228>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fc68 	bl	8000628 <__aeabi_dmul>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	4625      	mov	r5, r4
 8005d5e:	461c      	mov	r4, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa fc07 	bl	8000578 <__aeabi_f2d>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa fc59 	bl	8000628 <__aeabi_dmul>
 8005d76:	4603      	mov	r3, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	4625      	mov	r5, r4
 8005d7c:	461c      	mov	r4, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fbf8 	bl	8000578 <__aeabi_f2d>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fc4a 	bl	8000628 <__aeabi_dmul>
 8005d94:	4603      	mov	r3, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4625      	mov	r5, r4
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fa fbe9 	bl	8000578 <__aeabi_f2d>
 8005da6:	a364      	add	r3, pc, #400	; (adr r3, 8005f38 <tds_measure+0x230>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa fc3c 	bl	8000628 <__aeabi_dmul>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4690      	mov	r8, r2
 8005db6:	4699      	mov	r9, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fa fbdb 	bl	8000578 <__aeabi_f2d>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fc2d 	bl	8000628 <__aeabi_dmul>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fa6f 	bl	80002b8 <__aeabi_dsub>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	4625      	mov	r5, r4
 8005de0:	461c      	mov	r4, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fbc6 	bl	8000578 <__aeabi_f2d>
 8005dec:	a354      	add	r3, pc, #336	; (adr r3, 8005f40 <tds_measure+0x238>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa fc19 	bl	8000628 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7fa fa5d 	bl	80002bc <__adddf3>
 8005e02:	4603      	mov	r3, r0
 8005e04:	460c      	mov	r4, r1
 8005e06:	4625      	mov	r5, r4
 8005e08:	461c      	mov	r4, r3
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fbb2 	bl	8000578 <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f7fa fc04 	bl	8000628 <__aeabi_dmul>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4618      	mov	r0, r3
 8005e26:	4621      	mov	r1, r4
 8005e28:	f7fa fef6 	bl	8000c18 <__aeabi_d2f>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa fb9e 	bl	8000578 <__aeabi_f2d>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa fb97 	bl	8000578 <__aeabi_f2d>
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <tds_measure+0x24c>)
 8005e50:	f7fa fa32 	bl	80002b8 <__aeabi_dsub>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	a33a      	add	r3, pc, #232	; (adr r3, 8005f48 <tds_measure+0x240>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa fbe1 	bl	8000628 <__aeabi_dmul>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <tds_measure+0x250>)
 8005e74:	f7fa fa22 	bl	80002bc <__adddf3>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fcfc 	bl	800087c <__aeabi_ddiv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	4618      	mov	r0, r3
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	f7fa fec4 	bl	8000c18 <__aeabi_d2f>
 8005e90:	4602      	mov	r2, r0
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8005eaa:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <tds_measure+0x254>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	2b0b      	cmp	r3, #11
 8005eb8:	d101      	bne.n	8005ebe <tds_measure+0x1b6>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	edd3 7a08 	vldr	s15, [r3, #32]
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <tds_measure+0x254>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ecc:	ee17 2a90 	vmov	r2, s15
 8005ed0:	b211      	sxth	r1, r2
 8005ed2:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <tds_measure+0x258>)
 8005ed4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 8005ed8:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <tds_measure+0x254>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <tds_measure+0x258>)
 8005ede:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b1f      	ldr	r3, [pc, #124]	; (8005f64 <tds_measure+0x25c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4413      	add	r3, r2
 8005eea:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <tds_measure+0x25c>)
 8005eec:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <tds_measure+0x25c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	79fa      	ldrb	r2, [r7, #7]
 8005ef4:	491a      	ldr	r1, [pc, #104]	; (8005f60 <tds_measure+0x258>)
 8005ef6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <tds_measure+0x25c>)
 8005efe:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <tds_measure+0x254>)
 8005f04:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 8005f06:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <tds_measure+0x25c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <tds_measure+0x260>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8005f20:	79bb      	ldrb	r3, [r7, #6]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f2c:	f3af 8000 	nop.w
 8005f30:	a3d70a3d 	.word	0xa3d70a3d
 8005f34:	4060ad70 	.word	0x4060ad70
 8005f38:	1eb851ec 	.word	0x1eb851ec
 8005f3c:	406ffb85 	.word	0x406ffb85
 8005f40:	b851eb85 	.word	0xb851eb85
 8005f44:	408acb1e 	.word	0x408acb1e
 8005f48:	47ae147b 	.word	0x47ae147b
 8005f4c:	3f947ae1 	.word	0x3f947ae1
 8005f50:	2000ad94 	.word	0x2000ad94
 8005f54:	40390000 	.word	0x40390000
 8005f58:	3ff00000 	.word	0x3ff00000
 8005f5c:	2000a304 	.word	0x2000a304
 8005f60:	2000a308 	.word	0x2000a308
 8005f64:	2000a320 	.word	0x2000a320
 8005f68:	cccccccd 	.word	0xcccccccd

08005f6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a3e      	ldr	r2, [pc, #248]	; (8006084 <HAL_ADC_MspInit+0x118>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d175      	bne.n	800607a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	4b3d      	ldr	r3, [pc, #244]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	4a3c      	ldr	r2, [pc, #240]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9e:	4b3a      	ldr	r3, [pc, #232]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	4a35      	ldr	r2, [pc, #212]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fba:	4b33      	ldr	r3, [pc, #204]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a2e      	ldr	r2, [pc, #184]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b2c      	ldr	r3, [pc, #176]	; (8006088 <HAL_ADC_MspInit+0x11c>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fee:	f107 0314 	add.w	r3, r7, #20
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4825      	ldr	r0, [pc, #148]	; (800608c <HAL_ADC_MspInit+0x120>)
 8005ff6:	f006 fd57 	bl	800caa8 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8005ffa:	4b25      	ldr	r3, [pc, #148]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8005ffc:	4a25      	ldr	r2, [pc, #148]	; (8006094 <HAL_ADC_MspInit+0x128>)
 8005ffe:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006002:	2200      	movs	r2, #0
 8006004:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006008:	2200      	movs	r2, #0
 800600a:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800600c:	4b20      	ldr	r3, [pc, #128]	; (8006090 <HAL_ADC_MspInit+0x124>)
 800600e:	2200      	movs	r2, #0
 8006010:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006012:	4b1f      	ldr	r3, [pc, #124]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006018:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_ADC_MspInit+0x124>)
 800601c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006020:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006022:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006024:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006028:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800602a:	4b19      	ldr	r3, [pc, #100]	; (8006090 <HAL_ADC_MspInit+0x124>)
 800602c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006030:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006032:	4b17      	ldr	r3, [pc, #92]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006034:	2200      	movs	r2, #0
 8006036:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006038:	4b15      	ldr	r3, [pc, #84]	; (8006090 <HAL_ADC_MspInit+0x124>)
 800603a:	2200      	movs	r2, #0
 800603c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800603e:	4814      	ldr	r0, [pc, #80]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006040:	f006 f938 	bl	800c2b4 <HAL_DMA_Init>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 800604a:	f7fb f959 	bl	8001300 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a0f      	ldr	r2, [pc, #60]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
 8006054:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <HAL_ADC_MspInit+0x124>)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	2106      	movs	r1, #6
 800605e:	2012      	movs	r0, #18
 8006060:	f006 f8e3 	bl	800c22a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006064:	2012      	movs	r0, #18
 8006066:	f006 f8fc 	bl	800c262 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 800606a:	2200      	movs	r2, #0
 800606c:	2106      	movs	r1, #6
 800606e:	2038      	movs	r0, #56	; 0x38
 8006070:	f006 f8db 	bl	800c22a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006074:	2038      	movs	r0, #56	; 0x38
 8006076:	f006 f8f4 	bl	800c262 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800607a:	bf00      	nop
 800607c:	3728      	adds	r7, #40	; 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40012000 	.word	0x40012000
 8006088:	40023800 	.word	0x40023800
 800608c:	40020000 	.word	0x40020000
 8006090:	2000ae04 	.word	0x2000ae04
 8006094:	40026410 	.word	0x40026410

08006098 <uartInit>:
#endif



bool uartInit(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800609e:	2300      	movs	r3, #0
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	e007      	b.n	80060b4 <uartInit+0x1c>
  {
    is_open[i] = false;
 80060a4:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <uartInit+0x30>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3301      	adds	r3, #1
 80060b2:	607b      	str	r3, [r7, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	ddf4      	ble.n	80060a4 <uartInit+0xc>
  }


  return true;
 80060ba:	2301      	movs	r3, #1
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	2000a324 	.word	0x2000a324

080060cc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	6039      	str	r1, [r7, #0]
 80060d6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <uartOpen+0x1c>
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d078      	beq.n	80061d8 <uartOpen+0x10c>
 80060e6:	e0ef      	b.n	80062c8 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 80060e8:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <uartOpen+0x208>)
 80060ea:	4a7b      	ldr	r2, [pc, #492]	; (80062d8 <uartOpen+0x20c>)
 80060ec:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 80060ee:	4a79      	ldr	r2, [pc, #484]	; (80062d4 <uartOpen+0x208>)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80060f4:	4b77      	ldr	r3, [pc, #476]	; (80062d4 <uartOpen+0x208>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 80060fa:	4b76      	ldr	r3, [pc, #472]	; (80062d4 <uartOpen+0x208>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8006100:	4b74      	ldr	r3, [pc, #464]	; (80062d4 <uartOpen+0x208>)
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8006106:	4b73      	ldr	r3, [pc, #460]	; (80062d4 <uartOpen+0x208>)
 8006108:	220c      	movs	r2, #12
 800610a:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 800610c:	4b71      	ldr	r3, [pc, #452]	; (80062d4 <uartOpen+0x208>)
 800610e:	2200      	movs	r2, #0
 8006110:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8006112:	4b70      	ldr	r3, [pc, #448]	; (80062d4 <uartOpen+0x208>)
 8006114:	2200      	movs	r2, #0
 8006116:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8006118:	486e      	ldr	r0, [pc, #440]	; (80062d4 <uartOpen+0x208>)
 800611a:	f00a fa5a 	bl	80105d2 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	4a6e      	ldr	r2, [pc, #440]	; (80062dc <uartOpen+0x210>)
 8006124:	4413      	add	r3, r2
 8006126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800612a:	496d      	ldr	r1, [pc, #436]	; (80062e0 <uartOpen+0x214>)
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb fa20 	bl	8001572 <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	4b6b      	ldr	r3, [pc, #428]	; (80062e4 <uartOpen+0x218>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <uartOpen+0x218>)
 800613c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006140:	6313      	str	r3, [r2, #48]	; 0x30
 8006142:	4b68      	ldr	r3, [pc, #416]	; (80062e4 <uartOpen+0x218>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	613b      	str	r3, [r7, #16]
 800614c:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800614e:	2200      	movs	r2, #0
 8006150:	2104      	movs	r1, #4
 8006152:	203a      	movs	r0, #58	; 0x3a
 8006154:	f006 f869 	bl	800c22a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006158:	203a      	movs	r0, #58	; 0x3a
 800615a:	f006 f882 	bl	800c262 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800615e:	2200      	movs	r2, #0
 8006160:	2104      	movs	r1, #4
 8006162:	2046      	movs	r0, #70	; 0x46
 8006164:	f006 f861 	bl	800c22a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006168:	2046      	movs	r0, #70	; 0x46
 800616a:	f006 f87a 	bl	800c262 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 800616e:	4859      	ldr	r0, [pc, #356]	; (80062d4 <uartOpen+0x208>)
 8006170:	f00a f9e2 	bl	8010538 <HAL_UART_Init>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <uartOpen+0xb4>
        {
          ret = false;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 800617e:	e0a3      	b.n	80062c8 <uartOpen+0x1fc>
          ret = true;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	4a58      	ldr	r2, [pc, #352]	; (80062e8 <uartOpen+0x21c>)
 8006188:	2101      	movs	r1, #1
 800618a:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800618c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006190:	4953      	ldr	r1, [pc, #332]	; (80062e0 <uartOpen+0x214>)
 8006192:	4850      	ldr	r0, [pc, #320]	; (80062d4 <uartOpen+0x208>)
 8006194:	f00a fae2 	bl	801075c <HAL_UART_Receive_DMA>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <uartOpen+0xd6>
            ret = false;
 800619e:	2300      	movs	r3, #0
 80061a0:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	4a4d      	ldr	r2, [pc, #308]	; (80062dc <uartOpen+0x210>)
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	4413      	add	r3, r2
 80061aa:	3308      	adds	r3, #8
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	4b4f      	ldr	r3, [pc, #316]	; (80062ec <uartOpen+0x220>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	1a8a      	subs	r2, r1, r2
 80061b8:	4948      	ldr	r1, [pc, #288]	; (80062dc <uartOpen+0x210>)
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	440b      	add	r3, r1
 80061be:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80061c0:	79fa      	ldrb	r2, [r7, #7]
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4945      	ldr	r1, [pc, #276]	; (80062dc <uartOpen+0x210>)
 80061c6:	0112      	lsls	r2, r2, #4
 80061c8:	440a      	add	r2, r1
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	4943      	ldr	r1, [pc, #268]	; (80062dc <uartOpen+0x210>)
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	440b      	add	r3, r1
 80061d2:	3304      	adds	r3, #4
 80061d4:	601a      	str	r2, [r3, #0]
      break;
 80061d6:	e077      	b.n	80062c8 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80061d8:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <uartOpen+0x208>)
 80061da:	4a3f      	ldr	r2, [pc, #252]	; (80062d8 <uartOpen+0x20c>)
 80061dc:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80061de:	4a3d      	ldr	r2, [pc, #244]	; (80062d4 <uartOpen+0x208>)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80061e4:	4b3b      	ldr	r3, [pc, #236]	; (80062d4 <uartOpen+0x208>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 80061ea:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <uartOpen+0x208>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80061f0:	4b38      	ldr	r3, [pc, #224]	; (80062d4 <uartOpen+0x208>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80061f6:	4b37      	ldr	r3, [pc, #220]	; (80062d4 <uartOpen+0x208>)
 80061f8:	220c      	movs	r2, #12
 80061fa:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061fc:	4b35      	ldr	r3, [pc, #212]	; (80062d4 <uartOpen+0x208>)
 80061fe:	2200      	movs	r2, #0
 8006200:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006202:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <uartOpen+0x208>)
 8006204:	2200      	movs	r2, #0
 8006206:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8006208:	4832      	ldr	r0, [pc, #200]	; (80062d4 <uartOpen+0x208>)
 800620a:	f00a f9e2 	bl	80105d2 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4a32      	ldr	r2, [pc, #200]	; (80062dc <uartOpen+0x210>)
 8006214:	4413      	add	r3, r2
 8006216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800621a:	4931      	ldr	r1, [pc, #196]	; (80062e0 <uartOpen+0x214>)
 800621c:	4618      	mov	r0, r3
 800621e:	f7fb f9a8 	bl	8001572 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <uartOpen+0x218>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	4a2e      	ldr	r2, [pc, #184]	; (80062e4 <uartOpen+0x218>)
 800622c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006230:	6313      	str	r3, [r2, #48]	; 0x30
 8006232:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <uartOpen+0x218>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800623e:	2200      	movs	r2, #0
 8006240:	2104      	movs	r1, #4
 8006242:	203a      	movs	r0, #58	; 0x3a
 8006244:	f005 fff1 	bl	800c22a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006248:	203a      	movs	r0, #58	; 0x3a
 800624a:	f006 f80a 	bl	800c262 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800624e:	2200      	movs	r2, #0
 8006250:	2104      	movs	r1, #4
 8006252:	2046      	movs	r0, #70	; 0x46
 8006254:	f005 ffe9 	bl	800c22a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006258:	2046      	movs	r0, #70	; 0x46
 800625a:	f006 f802 	bl	800c262 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 800625e:	481d      	ldr	r0, [pc, #116]	; (80062d4 <uartOpen+0x208>)
 8006260:	f00a f96a 	bl	8010538 <HAL_UART_Init>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <uartOpen+0x1a4>
      {
        ret = false;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 800626e:	e02a      	b.n	80062c6 <uartOpen+0x1fa>
        ret = true;
 8006270:	2301      	movs	r3, #1
 8006272:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	4a1c      	ldr	r2, [pc, #112]	; (80062e8 <uartOpen+0x21c>)
 8006278:	2101      	movs	r1, #1
 800627a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800627c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006280:	4917      	ldr	r1, [pc, #92]	; (80062e0 <uartOpen+0x214>)
 8006282:	4814      	ldr	r0, [pc, #80]	; (80062d4 <uartOpen+0x208>)
 8006284:	f00a fa6a 	bl	801075c <HAL_UART_Receive_DMA>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <uartOpen+0x1c6>
          ret = false;
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	4a11      	ldr	r2, [pc, #68]	; (80062dc <uartOpen+0x210>)
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	4413      	add	r3, r2
 800629a:	3308      	adds	r3, #8
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <uartOpen+0x220>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	1a8a      	subs	r2, r1, r2
 80062a8:	490c      	ldr	r1, [pc, #48]	; (80062dc <uartOpen+0x210>)
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	440b      	add	r3, r1
 80062ae:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80062b0:	79fa      	ldrb	r2, [r7, #7]
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	4909      	ldr	r1, [pc, #36]	; (80062dc <uartOpen+0x210>)
 80062b6:	0112      	lsls	r2, r2, #4
 80062b8:	440a      	add	r2, r1
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	4907      	ldr	r1, [pc, #28]	; (80062dc <uartOpen+0x210>)
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	440b      	add	r3, r1
 80062c2:	3304      	adds	r3, #4
 80062c4:	601a      	str	r2, [r3, #0]
      break;
 80062c6:	bf00      	nop
  }

  return ret;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000af24 	.word	0x2000af24
 80062d8:	40011000 	.word	0x40011000
 80062dc:	2000a328 	.word	0x2000a328
 80062e0:	2000a338 	.word	0x2000a338
 80062e4:	40023800 	.word	0x40023800
 80062e8:	2000a324 	.word	0x2000a324
 80062ec:	2000aec4 	.word	0x2000aec4

080062f0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <uartAvailable+0x1a>
 8006304:	2b01      	cmp	r3, #1
 8006306:	d018      	beq.n	800633a <uartAvailable+0x4a>
 8006308:	e02f      	b.n	800636a <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <uartAvailable+0x84>)
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	4413      	add	r3, r2
 8006312:	3308      	adds	r3, #8
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	4b18      	ldr	r3, [pc, #96]	; (8006378 <uartAvailable+0x88>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	1a8a      	subs	r2, r1, r2
 8006320:	4914      	ldr	r1, [pc, #80]	; (8006374 <uartAvailable+0x84>)
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	440b      	add	r3, r1
 8006326:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <uartAvailable+0x84>)
 800632e:	4413      	add	r3, r2
 8006330:	4618      	mov	r0, r3
 8006332:	f7fb f976 	bl	8001622 <qbufferAvailable>
 8006336:	60f8      	str	r0, [r7, #12]
      break;
 8006338:	e017      	b.n	800636a <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	4a0d      	ldr	r2, [pc, #52]	; (8006374 <uartAvailable+0x84>)
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	4413      	add	r3, r2
 8006342:	3308      	adds	r3, #8
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <uartAvailable+0x88>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	1a8a      	subs	r2, r1, r2
 8006350:	4908      	ldr	r1, [pc, #32]	; (8006374 <uartAvailable+0x84>)
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	440b      	add	r3, r1
 8006356:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	4a05      	ldr	r2, [pc, #20]	; (8006374 <uartAvailable+0x84>)
 800635e:	4413      	add	r3, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7fb f95e 	bl	8001622 <qbufferAvailable>
 8006366:	60f8      	str	r0, [r7, #12]
      break;
 8006368:	bf00      	nop
  }

  return ret;
 800636a:	68fb      	ldr	r3, [r7, #12]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	2000a328 	.word	0x2000a328
 8006378:	2000aec4 	.word	0x2000aec4

0800637c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <uartRead+0x1a>
 8006390:	2b01      	cmp	r3, #1
 8006392:	d008      	beq.n	80063a6 <uartRead+0x2a>
 8006394:	e00f      	b.n	80063b6 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8006396:	f107 030f 	add.w	r3, r7, #15
 800639a:	2201      	movs	r2, #1
 800639c:	4619      	mov	r1, r3
 800639e:	4808      	ldr	r0, [pc, #32]	; (80063c0 <uartRead+0x44>)
 80063a0:	f7fb f902 	bl	80015a8 <qbufferRead>
      break;
 80063a4:	e007      	b.n	80063b6 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80063a6:	f107 030f 	add.w	r3, r7, #15
 80063aa:	2201      	movs	r2, #1
 80063ac:	4619      	mov	r1, r3
 80063ae:	4805      	ldr	r0, [pc, #20]	; (80063c4 <uartRead+0x48>)
 80063b0:	f7fb f8fa 	bl	80015a8 <qbufferRead>
      break;
 80063b4:	bf00      	nop
  }

  return ret;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	2000a328 	.word	0x2000a328
 80063c4:	2000a338 	.word	0x2000a338

080063c8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <uartWrite+0x1e>
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d00f      	beq.n	8006404 <uartWrite+0x3c>
 80063e4:	e020      	b.n	8006428 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	2364      	movs	r3, #100	; 0x64
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	4811      	ldr	r0, [pc, #68]	; (8006434 <uartWrite+0x6c>)
 80063f0:	f00a f91b 	bl	801062a <HAL_UART_Transmit>
 80063f4:	4603      	mov	r3, r0
 80063f6:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d111      	bne.n	8006422 <uartWrite+0x5a>
        {
          ret = length;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	617b      	str	r3, [r7, #20]
        }
      break;
 8006402:	e00e      	b.n	8006422 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	b29a      	uxth	r2, r3
 8006408:	2364      	movs	r3, #100	; 0x64
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4809      	ldr	r0, [pc, #36]	; (8006434 <uartWrite+0x6c>)
 800640e:	f00a f90c 	bl	801062a <HAL_UART_Transmit>
 8006412:	4603      	mov	r3, r0
 8006414:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8006416:	7cfb      	ldrb	r3, [r7, #19]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <uartWrite+0x5e>
      {
        ret = length;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006420:	e001      	b.n	8006426 <uartWrite+0x5e>
      break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <uartWrite+0x60>
      break;
 8006426:	bf00      	nop
  }

  return ret;
 8006428:	697b      	ldr	r3, [r7, #20]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	2000af24 	.word	0x2000af24

08006438 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006438:	b40e      	push	{r1, r2, r3}
 800643a:	b580      	push	{r7, lr}
 800643c:	b0c7      	sub	sp, #284	; 0x11c
 800643e:	af00      	add	r7, sp, #0
 8006440:	4602      	mov	r2, r0
 8006442:	1dfb      	adds	r3, r7, #7
 8006444:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8006446:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8006450:	f107 030c 	add.w	r3, r7, #12
 8006454:	f107 0010 	add.w	r0, r7, #16
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800645e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006462:	f00d fac3 	bl	80139ec <vsniprintf>
 8006466:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800646a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800646e:	f107 0110 	add.w	r1, r7, #16
 8006472:	1dfb      	adds	r3, r7, #7
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ffa6 	bl	80063c8 <uartWrite>
 800647c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8006480:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006484:	4618      	mov	r0, r3
 8006486:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800648a:	46bd      	mov	sp, r7
 800648c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006490:	b003      	add	sp, #12
 8006492:	4770      	bx	lr

08006494 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5b      	ldr	r2, [pc, #364]	; (8006648 <HAL_UART_MspInit+0x18c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	f040 80b0 	bne.w	8006640 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	4b59      	ldr	r3, [pc, #356]	; (800664c <HAL_UART_MspInit+0x190>)
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	4a58      	ldr	r2, [pc, #352]	; (800664c <HAL_UART_MspInit+0x190>)
 80064ea:	f043 0310 	orr.w	r3, r3, #16
 80064ee:	6453      	str	r3, [r2, #68]	; 0x44
 80064f0:	4b56      	ldr	r3, [pc, #344]	; (800664c <HAL_UART_MspInit+0x190>)
 80064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	4b52      	ldr	r3, [pc, #328]	; (800664c <HAL_UART_MspInit+0x190>)
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	4a51      	ldr	r2, [pc, #324]	; (800664c <HAL_UART_MspInit+0x190>)
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	6313      	str	r3, [r2, #48]	; 0x30
 800650c:	4b4f      	ldr	r3, [pc, #316]	; (800664c <HAL_UART_MspInit+0x190>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006518:	2300      	movs	r3, #0
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	4b4b      	ldr	r3, [pc, #300]	; (800664c <HAL_UART_MspInit+0x190>)
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	4a4a      	ldr	r2, [pc, #296]	; (800664c <HAL_UART_MspInit+0x190>)
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	6313      	str	r3, [r2, #48]	; 0x30
 8006528:	4b48      	ldr	r3, [pc, #288]	; (800664c <HAL_UART_MspInit+0x190>)
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006538:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653a:	2302      	movs	r3, #2
 800653c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006542:	2303      	movs	r3, #3
 8006544:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006546:	2307      	movs	r3, #7
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800654a:	f107 0314 	add.w	r3, r7, #20
 800654e:	4619      	mov	r1, r3
 8006550:	483f      	ldr	r0, [pc, #252]	; (8006650 <HAL_UART_MspInit+0x194>)
 8006552:	f006 faa9 	bl	800caa8 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006556:	2340      	movs	r3, #64	; 0x40
 8006558:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800655a:	2302      	movs	r3, #2
 800655c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006562:	2303      	movs	r3, #3
 8006564:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006566:	2307      	movs	r3, #7
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800656a:	f107 0314 	add.w	r3, r7, #20
 800656e:	4619      	mov	r1, r3
 8006570:	4838      	ldr	r0, [pc, #224]	; (8006654 <HAL_UART_MspInit+0x198>)
 8006572:	f006 fa99 	bl	800caa8 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006576:	4b38      	ldr	r3, [pc, #224]	; (8006658 <HAL_UART_MspInit+0x19c>)
 8006578:	4a38      	ldr	r2, [pc, #224]	; (800665c <HAL_UART_MspInit+0x1a0>)
 800657a:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800657c:	4b36      	ldr	r3, [pc, #216]	; (8006658 <HAL_UART_MspInit+0x19c>)
 800657e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006582:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006584:	4b34      	ldr	r3, [pc, #208]	; (8006658 <HAL_UART_MspInit+0x19c>)
 8006586:	2240      	movs	r2, #64	; 0x40
 8006588:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800658a:	4b33      	ldr	r3, [pc, #204]	; (8006658 <HAL_UART_MspInit+0x19c>)
 800658c:	2200      	movs	r2, #0
 800658e:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006590:	4b31      	ldr	r3, [pc, #196]	; (8006658 <HAL_UART_MspInit+0x19c>)
 8006592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006596:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006598:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <HAL_UART_MspInit+0x19c>)
 800659a:	2200      	movs	r2, #0
 800659c:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800659e:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80065a4:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80065aa:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065b0:	4b29      	ldr	r3, [pc, #164]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80065b6:	4828      	ldr	r0, [pc, #160]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065b8:	f005 fe7c 	bl	800c2b4 <HAL_DMA_Init>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80065c2:	f7fa fe9d 	bl	8001300 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a23      	ldr	r2, [pc, #140]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
 80065cc:	4a22      	ldr	r2, [pc, #136]	; (8006658 <HAL_UART_MspInit+0x19c>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 80065d2:	4b23      	ldr	r3, [pc, #140]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065d4:	4a23      	ldr	r2, [pc, #140]	; (8006664 <HAL_UART_MspInit+0x1a8>)
 80065d6:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80065d8:	4b21      	ldr	r3, [pc, #132]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065de:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065ec:	4b1c      	ldr	r3, [pc, #112]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065f2:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065f4:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065fa:	4b19      	ldr	r3, [pc, #100]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006600:	4b17      	ldr	r3, [pc, #92]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 8006602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006606:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 800660a:	2200      	movs	r2, #0
 800660c:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 8006610:	2200      	movs	r2, #0
 8006612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006614:	4812      	ldr	r0, [pc, #72]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 8006616:	f005 fe4d 	bl	800c2b4 <HAL_DMA_Init>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8006620:	f7fa fe6e 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 8006628:	635a      	str	r2, [r3, #52]	; 0x34
 800662a:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <HAL_UART_MspInit+0x1a4>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006630:	2200      	movs	r2, #0
 8006632:	2100      	movs	r1, #0
 8006634:	2025      	movs	r0, #37	; 0x25
 8006636:	f005 fdf8 	bl	800c22a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800663a:	2025      	movs	r0, #37	; 0x25
 800663c:	f005 fe11 	bl	800c262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006640:	bf00      	nop
 8006642:	3728      	adds	r7, #40	; 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40011000 	.word	0x40011000
 800664c:	40023800 	.word	0x40023800
 8006650:	40020000 	.word	0x40020000
 8006654:	40020400 	.word	0x40020400
 8006658:	2000ae64 	.word	0x2000ae64
 800665c:	400264b8 	.word	0x400264b8
 8006660:	2000aec4 	.word	0x2000aec4
 8006664:	40026440 	.word	0x40026440

08006668 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a11      	ldr	r2, [pc, #68]	; (80066bc <HAL_UART_MspDeInit+0x54>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d11b      	bne.n	80066b2 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <HAL_UART_MspDeInit+0x58>)
 800667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667e:	4a10      	ldr	r2, [pc, #64]	; (80066c0 <HAL_UART_MspDeInit+0x58>)
 8006680:	f023 0310 	bic.w	r3, r3, #16
 8006684:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800668a:	480e      	ldr	r0, [pc, #56]	; (80066c4 <HAL_UART_MspDeInit+0x5c>)
 800668c:	f006 fb8e 	bl	800cdac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006690:	2140      	movs	r1, #64	; 0x40
 8006692:	480d      	ldr	r0, [pc, #52]	; (80066c8 <HAL_UART_MspDeInit+0x60>)
 8006694:	f006 fb8a 	bl	800cdac <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	4618      	mov	r0, r3
 800669e:	f005 feb7 	bl	800c410 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	4618      	mov	r0, r3
 80066a8:	f005 feb2 	bl	800c410 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80066ac:	2025      	movs	r0, #37	; 0x25
 80066ae:	f005 fde6 	bl	800c27e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40011000 	.word	0x40011000
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40020000 	.word	0x40020000
 80066c8:	40020400 	.word	0x40020400

080066cc <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80066d6:	4b1d      	ldr	r3, [pc, #116]	; (800674c <SD_CheckStatus+0x80>)
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 80066dc:	f7fe fa30 	bl	8004b40 <sdIsInit>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f083 0301 	eor.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 80066ec:	4b17      	ldr	r3, [pc, #92]	; (800674c <SD_CheckStatus+0x80>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <SD_CheckStatus+0x80>)
 80066fa:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 80066fc:	f7fe fa2c 	bl	8004b58 <sdIsDetected>
 8006700:	4603      	mov	r3, r0
 8006702:	f083 0301 	eor.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <SD_CheckStatus+0x80>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f043 0302 	orr.w	r3, r3, #2
 8006716:	b2da      	uxtb	r2, r3
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <SD_CheckStatus+0x80>)
 800671a:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 800671c:	200a      	movs	r0, #10
 800671e:	f7fe fa9d 	bl	8004c5c <sdIsReady>
 8006722:	4603      	mov	r3, r0
 8006724:	f083 0301 	eor.w	r3, r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <SD_CheckStatus+0x80>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <SD_CheckStatus+0x80>)
 800673c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <SD_CheckStatus+0x80>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b2db      	uxtb	r3, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000038 	.word	0x20000038

08006750 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 800675a:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <SD_initialize+0x40>)
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8006760:	f7fe f9ee 	bl	8004b40 <sdIsInit>
 8006764:	4603      	mov	r3, r0
 8006766:	f083 0301 	eor.w	r3, r3, #1
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <SD_initialize+0x40>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	b2da      	uxtb	r2, r3
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <SD_initialize+0x40>)
 800677e:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <SD_initialize+0x40>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000038 	.word	0x20000038

08006794 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff ff93 	bl	80066cc <SD_CheckStatus>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4603      	mov	r3, r0
 80067be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 80067c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fe fa65 	bl	8004c9c <sdReadBlocks>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <SD_read+0x2c>
  {
    res = RES_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 80067fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fe fa94 	bl	8004d30 <sdWriteBlocks>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <SD_write+0x2c>
  {
    res = RES_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08c      	sub	sp, #48	; 0x30
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	603a      	str	r2, [r7, #0]
 8006826:	71fb      	strb	r3, [r7, #7]
 8006828:	460b      	mov	r3, r1
 800682a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006832:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <SD_ioctl+0xac>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <SD_ioctl+0x28>
 8006840:	2303      	movs	r3, #3
 8006842:	e03c      	b.n	80068be <SD_ioctl+0xa2>

  switch (cmd)
 8006844:	79bb      	ldrb	r3, [r7, #6]
 8006846:	2b03      	cmp	r3, #3
 8006848:	d834      	bhi.n	80068b4 <SD_ioctl+0x98>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <SD_ioctl+0x34>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006861 	.word	0x08006861
 8006854:	08006869 	.word	0x08006869
 8006858:	08006881 	.word	0x08006881
 800685c:	0800689b 	.word	0x0800689b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006866:	e028      	b.n	80068ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe f989 	bl	8004b84 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800687e:	e01c      	b.n	80068ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe f97d 	bl	8004b84 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	b29a      	uxth	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006898:	e00f      	b.n	80068ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe f970 	bl	8004b84 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	0a5a      	lsrs	r2, r3, #9
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80068b2:	e002      	b.n	80068ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80068b4:	2304      	movs	r3, #4
 80068b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80068ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3730      	adds	r7, #48	; 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000038 	.word	0x20000038

080068cc <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	3306      	adds	r3, #6
 80068da:	2220      	movs	r2, #32
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f00b fc0f 	bl	8012102 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <hanFontLoad+0x2e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b0a      	cmp	r3, #10
 80068f8:	d107      	bne.n	800690a <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2204      	movs	r2, #4
 80068fe:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8006906:	2304      	movs	r3, #4
 8006908:	e03b      	b.n	8006982 <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b25b      	sxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	da2b      	bge.n	800696c <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	041a      	lsls	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3301      	adds	r3, #1
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	4313      	orrs	r3, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	3202      	adds	r2, #2
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a16      	ldr	r2, [pc, #88]	; (800698c <hanFontLoad+0xc0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d90e      	bls.n	8006954 <hanFontLoad+0x88>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <hanFontLoad+0xc4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d80a      	bhi.n	8006954 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2201      	movs	r2, #1
 8006942:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2203      	movs	r2, #3
 8006948:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f91f 	bl	8006b90 <hanUniFontLoad>
 8006952:	e009      	b.n	8006968 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2201      	movs	r2, #1
 8006958:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2202      	movs	r2, #2
 800695e:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f816 	bl	8006994 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8006968:	2301      	movs	r3, #1
 800696a:	e00a      	b.n	8006982 <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2202      	movs	r2, #2
 8006970:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2201      	movs	r2, #1
 8006976:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa30 	bl	8006de0 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8006980:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	00eab07f 	.word	0x00eab07f
 8006990:	00ed9fb0 	.word	0x00ed9fb0

08006994 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	b21a      	sxth	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3301      	adds	r3, #1
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	b21b      	sxth	r3, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b21b      	sxth	r3, r3
 80069b2:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 80069b4:	89bb      	ldrh	r3, [r7, #12]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fa3c 	bl	8006e34 <hanCnvCodeWan2Johab>
 80069bc:	4603      	mov	r3, r0
 80069be:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 80069c0:	89bb      	ldrh	r3, [r7, #12]
 80069c2:	0a9b      	lsrs	r3, r3, #10
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	4b63      	ldr	r3, [pc, #396]	; (8006b5c <hanWanFontLoad+0x1c8>)
 80069ce:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 80069d0:	89bb      	ldrh	r3, [r7, #12]
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	b29a      	uxth	r2, r3
 80069dc:	4b60      	ldr	r3, [pc, #384]	; (8006b60 <hanWanFontLoad+0x1cc>)
 80069de:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 80069e0:	89bb      	ldrh	r3, [r7, #12]
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	4b5e      	ldr	r3, [pc, #376]	; (8006b64 <hanWanFontLoad+0x1d0>)
 80069ea:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 80069ec:	4b5b      	ldr	r3, [pc, #364]	; (8006b5c <hanWanFontLoad+0x1c8>)
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	4b5d      	ldr	r3, [pc, #372]	; (8006b68 <hanWanFontLoad+0x1d4>)
 80069f4:	5c9b      	ldrb	r3, [r3, r2]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	4b58      	ldr	r3, [pc, #352]	; (8006b5c <hanWanFontLoad+0x1c8>)
 80069fa:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 80069fc:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <hanWanFontLoad+0x1cc>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	4b5a      	ldr	r3, [pc, #360]	; (8006b6c <hanWanFontLoad+0x1d8>)
 8006a04:	5c9b      	ldrb	r3, [r3, r2]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	4b55      	ldr	r3, [pc, #340]	; (8006b60 <hanWanFontLoad+0x1cc>)
 8006a0a:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8006a0c:	4b55      	ldr	r3, [pc, #340]	; (8006b64 <hanWanFontLoad+0x1d0>)
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b57      	ldr	r3, [pc, #348]	; (8006b70 <hanWanFontLoad+0x1dc>)
 8006a14:	5c9b      	ldrb	r3, [r3, r2]
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	4b52      	ldr	r3, [pc, #328]	; (8006b64 <hanWanFontLoad+0x1d0>)
 8006a1a:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8006a1c:	4b51      	ldr	r3, [pc, #324]	; (8006b64 <hanWanFontLoad+0x1d0>)
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d006      	beq.n	8006a32 <hanWanFontLoad+0x9e>
 8006a24:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <hanWanFontLoad+0x1cc>)
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b52      	ldr	r3, [pc, #328]	; (8006b74 <hanWanFontLoad+0x1e0>)
 8006a2c:	5c9b      	ldrb	r3, [r3, r2]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	e005      	b.n	8006a3e <hanWanFontLoad+0xaa>
 8006a32:	4b4b      	ldr	r3, [pc, #300]	; (8006b60 <hanWanFontLoad+0x1cc>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <hanWanFontLoad+0x1e4>)
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4a4f      	ldr	r2, [pc, #316]	; (8006b7c <hanWanFontLoad+0x1e8>)
 8006a40:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8006a42:	4b46      	ldr	r3, [pc, #280]	; (8006b5c <hanWanFontLoad+0x1c8>)
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <hanWanFontLoad+0xca>
 8006a4a:	4b44      	ldr	r3, [pc, #272]	; (8006b5c <hanWanFontLoad+0x1c8>)
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d005      	beq.n	8006a5e <hanWanFontLoad+0xca>
 8006a52:	4b42      	ldr	r3, [pc, #264]	; (8006b5c <hanWanFontLoad+0x1c8>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d001      	beq.n	8006a5e <hanWanFontLoad+0xca>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <hanWanFontLoad+0xcc>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4a40      	ldr	r2, [pc, #256]	; (8006b64 <hanWanFontLoad+0x1d0>)
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	d001      	beq.n	8006a6e <hanWanFontLoad+0xda>
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	e000      	b.n	8006a70 <hanWanFontLoad+0xdc>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4413      	add	r3, r2
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	4b42      	ldr	r3, [pc, #264]	; (8006b80 <hanWanFontLoad+0x1ec>)
 8006a76:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006a78:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <hanWanFontLoad+0x1cc>)
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4b41      	ldr	r3, [pc, #260]	; (8006b84 <hanWanFontLoad+0x1f0>)
 8006a80:	5c9b      	ldrb	r3, [r3, r2]
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	4b40      	ldr	r3, [pc, #256]	; (8006b88 <hanWanFontLoad+0x1f4>)
 8006a86:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	81fb      	strh	r3, [r7, #14]
 8006a8c:	e035      	b.n	8006afa <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8006a8e:	4b3b      	ldr	r3, [pc, #236]	; (8006b7c <hanWanFontLoad+0x1e8>)
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b2f      	ldr	r3, [pc, #188]	; (8006b5c <hanWanFontLoad+0x1c8>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	89fb      	ldrh	r3, [r7, #14]
 8006aa6:	4939      	ldr	r1, [pc, #228]	; (8006b8c <hanWanFontLoad+0x1f8>)
 8006aa8:	0152      	lsls	r2, r2, #5
 8006aaa:	4413      	add	r3, r2
 8006aac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006ab0:	89fb      	ldrh	r3, [r7, #14]
 8006ab2:	b2d1      	uxtb	r1, r2
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	460a      	mov	r2, r1
 8006aba:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8006abc:	89fb      	ldrh	r3, [r7, #14]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	7999      	ldrb	r1, [r3, #6]
 8006ac4:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <hanWanFontLoad+0x1ec>)
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2316      	movs	r3, #22
 8006acc:	fb03 f302 	mul.w	r3, r3, r2
 8006ad0:	33a0      	adds	r3, #160	; 0xa0
 8006ad2:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <hanWanFontLoad+0x1cc>)
 8006ad4:	8812      	ldrh	r2, [r2, #0]
 8006ad6:	441a      	add	r2, r3
 8006ad8:	89fb      	ldrh	r3, [r7, #14]
 8006ada:	482c      	ldr	r0, [pc, #176]	; (8006b8c <hanWanFontLoad+0x1f8>)
 8006adc:	0152      	lsls	r2, r2, #5
 8006ade:	4413      	add	r3, r2
 8006ae0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	89fb      	ldrh	r3, [r7, #14]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	b2d1      	uxtb	r1, r2
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	460a      	mov	r2, r1
 8006af2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006af4:	89fb      	ldrh	r3, [r7, #14]
 8006af6:	3301      	adds	r3, #1
 8006af8:	81fb      	strh	r3, [r7, #14]
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	2b1f      	cmp	r3, #31
 8006afe:	d9c6      	bls.n	8006a8e <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8006b00:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <hanWanFontLoad+0x1d0>)
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d025      	beq.n	8006b54 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006b08:	2300      	movs	r3, #0
 8006b0a:	81fb      	strh	r3, [r7, #14]
 8006b0c:	e01f      	b.n	8006b4e <hanWanFontLoad+0x1ba>
 8006b0e:	89fb      	ldrh	r3, [r7, #14]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	4413      	add	r3, r2
 8006b14:	7999      	ldrb	r1, [r3, #6]
 8006b16:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <hanWanFontLoad+0x1f4>)
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	33f8      	adds	r3, #248	; 0xf8
 8006b26:	4a0f      	ldr	r2, [pc, #60]	; (8006b64 <hanWanFontLoad+0x1d0>)
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	441a      	add	r2, r3
 8006b2c:	89fb      	ldrh	r3, [r7, #14]
 8006b2e:	4817      	ldr	r0, [pc, #92]	; (8006b8c <hanWanFontLoad+0x1f8>)
 8006b30:	0152      	lsls	r2, r2, #5
 8006b32:	4413      	add	r3, r2
 8006b34:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	b2d1      	uxtb	r1, r2
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	4413      	add	r3, r2
 8006b44:	460a      	mov	r2, r1
 8006b46:	719a      	strb	r2, [r3, #6]
 8006b48:	89fb      	ldrh	r3, [r7, #14]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	81fb      	strh	r3, [r7, #14]
 8006b4e:	89fb      	ldrh	r3, [r7, #14]
 8006b50:	2b1f      	cmp	r3, #31
 8006b52:	d9dc      	bls.n	8006b0e <hanWanFontLoad+0x17a>
  }
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	2000a438 	.word	0x2000a438
 8006b60:	2000a43a 	.word	0x2000a43a
 8006b64:	2000a43c 	.word	0x2000a43c
 8006b68:	0801780c 	.word	0x0801780c
 8006b6c:	0801782c 	.word	0x0801782c
 8006b70:	0801784c 	.word	0x0801784c
 8006b74:	080178e4 	.word	0x080178e4
 8006b78:	080178cc 	.word	0x080178cc
 8006b7c:	2000a43e 	.word	0x2000a43e
 8006b80:	2000a440 	.word	0x2000a440
 8006b84:	080178fc 	.word	0x080178fc
 8006b88:	2000a442 	.word	0x2000a442
 8006b8c:	08019e00 	.word	0x08019e00

08006b90 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	031b      	lsls	r3, r3, #12
 8006ba0:	b21a      	sxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	019b      	lsls	r3, r3, #6
 8006baa:	b21b      	sxth	r3, r3
 8006bac:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8006bb0:	b21b      	sxth	r3, r3
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	b21a      	sxth	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3302      	adds	r3, #2
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b21b      	sxth	r3, r3
 8006bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b21b      	sxth	r3, r3
 8006bc8:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8006bca:	89bb      	ldrh	r3, [r7, #12]
 8006bcc:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8006bd0:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8006bd2:	89ba      	ldrh	r2, [r7, #12]
 8006bd4:	0893      	lsrs	r3, r2, #2
 8006bd6:	4973      	ldr	r1, [pc, #460]	; (8006da4 <hanUniFontLoad+0x214>)
 8006bd8:	fba1 3103 	umull	r3, r1, r1, r3
 8006bdc:	460b      	mov	r3, r1
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	1a5b      	subs	r3, r3, r1
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	4b6f      	ldr	r3, [pc, #444]	; (8006da8 <hanUniFontLoad+0x218>)
 8006bea:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8006bec:	89bb      	ldrh	r3, [r7, #12]
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	4a6c      	ldr	r2, [pc, #432]	; (8006da4 <hanUniFontLoad+0x214>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8006bf8:	89b9      	ldrh	r1, [r7, #12]
 8006bfa:	4b6c      	ldr	r3, [pc, #432]	; (8006dac <hanUniFontLoad+0x21c>)
 8006bfc:	fba3 2301 	umull	r2, r3, r3, r1
 8006c00:	1aca      	subs	r2, r1, r3
 8006c02:	0852      	lsrs	r2, r2, #1
 8006c04:	4413      	add	r3, r2
 8006c06:	091a      	lsrs	r2, r3, #4
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	00da      	lsls	r2, r3, #3
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	1a8b      	subs	r3, r1, r2
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	4b66      	ldr	r3, [pc, #408]	; (8006db0 <hanUniFontLoad+0x220>)
 8006c18:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8006c1a:	89ba      	ldrh	r2, [r7, #12]
 8006c1c:	4b63      	ldr	r3, [pc, #396]	; (8006dac <hanUniFontLoad+0x21c>)
 8006c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	0852      	lsrs	r2, r2, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	091b      	lsrs	r3, r3, #4
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	4b61      	ldr	r3, [pc, #388]	; (8006db4 <hanUniFontLoad+0x224>)
 8006c2e:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8006c30:	4b60      	ldr	r3, [pc, #384]	; (8006db4 <hanUniFontLoad+0x224>)
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b60      	ldr	r3, [pc, #384]	; (8006db8 <hanUniFontLoad+0x228>)
 8006c38:	5c9b      	ldrb	r3, [r3, r2]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	4b5d      	ldr	r3, [pc, #372]	; (8006db4 <hanUniFontLoad+0x224>)
 8006c3e:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8006c40:	4b5b      	ldr	r3, [pc, #364]	; (8006db0 <hanUniFontLoad+0x220>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	4b5d      	ldr	r3, [pc, #372]	; (8006dbc <hanUniFontLoad+0x22c>)
 8006c48:	5c9b      	ldrb	r3, [r3, r2]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	4b58      	ldr	r3, [pc, #352]	; (8006db0 <hanUniFontLoad+0x220>)
 8006c4e:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8006c50:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <hanUniFontLoad+0x218>)
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	4b5a      	ldr	r3, [pc, #360]	; (8006dc0 <hanUniFontLoad+0x230>)
 8006c58:	5c9b      	ldrb	r3, [r3, r2]
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	4b52      	ldr	r3, [pc, #328]	; (8006da8 <hanUniFontLoad+0x218>)
 8006c5e:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8006c60:	4b51      	ldr	r3, [pc, #324]	; (8006da8 <hanUniFontLoad+0x218>)
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <hanUniFontLoad+0xe6>
 8006c68:	4b51      	ldr	r3, [pc, #324]	; (8006db0 <hanUniFontLoad+0x220>)
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b55      	ldr	r3, [pc, #340]	; (8006dc4 <hanUniFontLoad+0x234>)
 8006c70:	5c9b      	ldrb	r3, [r3, r2]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	e005      	b.n	8006c82 <hanUniFontLoad+0xf2>
 8006c76:	4b4e      	ldr	r3, [pc, #312]	; (8006db0 <hanUniFontLoad+0x220>)
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4b52      	ldr	r3, [pc, #328]	; (8006dc8 <hanUniFontLoad+0x238>)
 8006c7e:	5c9b      	ldrb	r3, [r3, r2]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4a52      	ldr	r2, [pc, #328]	; (8006dcc <hanUniFontLoad+0x23c>)
 8006c84:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8006c86:	4b4b      	ldr	r3, [pc, #300]	; (8006db4 <hanUniFontLoad+0x224>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <hanUniFontLoad+0x112>
 8006c8e:	4b49      	ldr	r3, [pc, #292]	; (8006db4 <hanUniFontLoad+0x224>)
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d005      	beq.n	8006ca2 <hanUniFontLoad+0x112>
 8006c96:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <hanUniFontLoad+0x224>)
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d001      	beq.n	8006ca2 <hanUniFontLoad+0x112>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <hanUniFontLoad+0x114>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	4a40      	ldr	r2, [pc, #256]	; (8006da8 <hanUniFontLoad+0x218>)
 8006ca8:	8812      	ldrh	r2, [r2, #0]
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	d001      	beq.n	8006cb2 <hanUniFontLoad+0x122>
 8006cae:	2202      	movs	r2, #2
 8006cb0:	e000      	b.n	8006cb4 <hanUniFontLoad+0x124>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4413      	add	r3, r2
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	4b45      	ldr	r3, [pc, #276]	; (8006dd0 <hanUniFontLoad+0x240>)
 8006cba:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006cbc:	4b3c      	ldr	r3, [pc, #240]	; (8006db0 <hanUniFontLoad+0x220>)
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b44      	ldr	r3, [pc, #272]	; (8006dd4 <hanUniFontLoad+0x244>)
 8006cc4:	5c9b      	ldrb	r3, [r3, r2]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	4b43      	ldr	r3, [pc, #268]	; (8006dd8 <hanUniFontLoad+0x248>)
 8006cca:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	81fb      	strh	r3, [r7, #14]
 8006cd0:	e035      	b.n	8006d3e <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8006cd2:	4b3e      	ldr	r3, [pc, #248]	; (8006dcc <hanUniFontLoad+0x23c>)
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4b34      	ldr	r3, [pc, #208]	; (8006db4 <hanUniFontLoad+0x224>)
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	441a      	add	r2, r3
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	493c      	ldr	r1, [pc, #240]	; (8006ddc <hanUniFontLoad+0x24c>)
 8006cec:	0152      	lsls	r2, r2, #5
 8006cee:	4413      	add	r3, r2
 8006cf0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006cf4:	89fb      	ldrh	r3, [r7, #14]
 8006cf6:	b2d1      	uxtb	r1, r2
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	460a      	mov	r2, r1
 8006cfe:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8006d00:	89fb      	ldrh	r3, [r7, #14]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4413      	add	r3, r2
 8006d06:	7999      	ldrb	r1, [r3, #6]
 8006d08:	4b31      	ldr	r3, [pc, #196]	; (8006dd0 <hanUniFontLoad+0x240>)
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2316      	movs	r3, #22
 8006d10:	fb03 f302 	mul.w	r3, r3, r2
 8006d14:	33a0      	adds	r3, #160	; 0xa0
 8006d16:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <hanUniFontLoad+0x220>)
 8006d18:	8812      	ldrh	r2, [r2, #0]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	89fb      	ldrh	r3, [r7, #14]
 8006d1e:	482f      	ldr	r0, [pc, #188]	; (8006ddc <hanUniFontLoad+0x24c>)
 8006d20:	0152      	lsls	r2, r2, #5
 8006d22:	4413      	add	r3, r2
 8006d24:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	89fb      	ldrh	r3, [r7, #14]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	b2d1      	uxtb	r1, r2
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	4413      	add	r3, r2
 8006d34:	460a      	mov	r2, r1
 8006d36:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	89fb      	ldrh	r3, [r7, #14]
 8006d40:	2b1f      	cmp	r3, #31
 8006d42:	d9c6      	bls.n	8006cd2 <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8006d44:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <hanUniFontLoad+0x218>)
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d025      	beq.n	8006d98 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	81fb      	strh	r3, [r7, #14]
 8006d50:	e01f      	b.n	8006d92 <hanUniFontLoad+0x202>
 8006d52:	89fb      	ldrh	r3, [r7, #14]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	4413      	add	r3, r2
 8006d58:	7999      	ldrb	r1, [r3, #6]
 8006d5a:	4b1f      	ldr	r3, [pc, #124]	; (8006dd8 <hanUniFontLoad+0x248>)
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	33f8      	adds	r3, #248	; 0xf8
 8006d6a:	4a0f      	ldr	r2, [pc, #60]	; (8006da8 <hanUniFontLoad+0x218>)
 8006d6c:	8812      	ldrh	r2, [r2, #0]
 8006d6e:	441a      	add	r2, r3
 8006d70:	89fb      	ldrh	r3, [r7, #14]
 8006d72:	481a      	ldr	r0, [pc, #104]	; (8006ddc <hanUniFontLoad+0x24c>)
 8006d74:	0152      	lsls	r2, r2, #5
 8006d76:	4413      	add	r3, r2
 8006d78:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	89fb      	ldrh	r3, [r7, #14]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	b2d1      	uxtb	r1, r2
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	4413      	add	r3, r2
 8006d88:	460a      	mov	r2, r1
 8006d8a:	719a      	strb	r2, [r3, #6]
 8006d8c:	89fb      	ldrh	r3, [r7, #14]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	81fb      	strh	r3, [r7, #14]
 8006d92:	89fb      	ldrh	r3, [r7, #14]
 8006d94:	2b1f      	cmp	r3, #31
 8006d96:	d9dc      	bls.n	8006d52 <hanUniFontLoad+0x1c2>
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	24924925 	.word	0x24924925
 8006da8:	2000a444 	.word	0x2000a444
 8006dac:	86186187 	.word	0x86186187
 8006db0:	2000a446 	.word	0x2000a446
 8006db4:	2000a448 	.word	0x2000a448
 8006db8:	0801786c 	.word	0x0801786c
 8006dbc:	0801788c 	.word	0x0801788c
 8006dc0:	080178ac 	.word	0x080178ac
 8006dc4:	080178e4 	.word	0x080178e4
 8006dc8:	080178cc 	.word	0x080178cc
 8006dcc:	2000a44a 	.word	0x2000a44a
 8006dd0:	2000a44c 	.word	0x2000a44c
 8006dd4:	080178fc 	.word	0x080178fc
 8006dd8:	2000a44e 	.word	0x2000a44e
 8006ddc:	08019e00 	.word	0x08019e00

08006de0 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8006df0:	7b7b      	ldrb	r3, [r7, #13]
 8006df2:	3b20      	subs	r3, #32
 8006df4:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8006df6:	2300      	movs	r3, #0
 8006df8:	81fb      	strh	r3, [r7, #14]
 8006dfa:	e00f      	b.n	8006e1c <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8006dfc:	7b7a      	ldrb	r2, [r7, #13]
 8006dfe:	89fb      	ldrh	r3, [r7, #14]
 8006e00:	490b      	ldr	r1, [pc, #44]	; (8006e30 <hanEngFontLoad+0x50>)
 8006e02:	0112      	lsls	r2, r2, #4
 8006e04:	4413      	add	r3, r2
 8006e06:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006e0a:	89fb      	ldrh	r3, [r7, #14]
 8006e0c:	b2d1      	uxtb	r1, r2
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	4413      	add	r3, r2
 8006e12:	460a      	mov	r2, r1
 8006e14:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	81fb      	strh	r3, [r7, #14]
 8006e1c:	89fb      	ldrh	r3, [r7, #14]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d9ec      	bls.n	8006dfc <hanEngFontLoad+0x1c>
  }
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	0801600c 	.word	0x0801600c

08006e34 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	3bb0      	subs	r3, #176	; 0xb0
 8006e4e:	225e      	movs	r2, #94	; 0x5e
 8006e50:	fb02 f203 	mul.w	r2, r2, r3
 8006e54:	89bb      	ldrh	r3, [r7, #12]
 8006e56:	3ba1      	subs	r3, #161	; 0xa1
 8006e58:	4413      	add	r3, r2
 8006e5a:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8006e5c:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <hanCnvCodeWan2Johab+0x40>)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e64:	b29b      	uxth	r3, r3
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	08017940 	.word	0x08017940

08006e78 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <TransferDoneISR+0x30>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00d      	beq.n	8006ea2 <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <TransferDoneISR+0x30>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	2002      	movs	r0, #2
 8006e90:	f7fc fa6a 	bl	8003368 <gpioPinWrite>

    if (frameCallBack != NULL)
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <TransferDoneISR+0x34>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8006e9c:	4b03      	ldr	r3, [pc, #12]	; (8006eac <TransferDoneISR+0x34>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4798      	blx	r3
    }
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000a458 	.word	0x2000a458
 8006eac:	2000a454 	.word	0x2000a454

08006eb0 <st7735Init>:


bool st7735Init(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8006eb6:	f000 f835 	bl	8006f24 <st7735Reset>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]

  return ret;
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a0d      	ldr	r2, [pc, #52]	; (8006f08 <st7735InitDriver+0x40>)
 8006ed4:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <st7735InitDriver+0x44>)
 8006eda:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a0c      	ldr	r2, [pc, #48]	; (8006f10 <st7735InitDriver+0x48>)
 8006ee0:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a0b      	ldr	r2, [pc, #44]	; (8006f14 <st7735InitDriver+0x4c>)
 8006ee6:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a0b      	ldr	r2, [pc, #44]	; (8006f18 <st7735InitDriver+0x50>)
 8006eec:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <st7735InitDriver+0x54>)
 8006ef2:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <st7735InitDriver+0x58>)
 8006ef8:	619a      	str	r2, [r3, #24]
  return true;
 8006efa:	2301      	movs	r3, #1
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	08006eb1 	.word	0x08006eb1
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	080071e9 	.word	0x080071e9
 8006f14:	08006f9d 	.word	0x08006f9d
 8006f18:	08006fad 	.word	0x08006fad
 8006f1c:	0800743d 	.word	0x0800743d
 8006f20:	080073f1 	.word	0x080073f1

08006f24 <st7735Reset>:

bool st7735Reset(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8006f2a:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <st7735Reset+0x70>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fbca 	bl	80056c8 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8006f34:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <st7735Reset+0x70>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fc20 	bl	8005780 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8006f40:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <st7735Reset+0x70>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4914      	ldr	r1, [pc, #80]	; (8006f98 <st7735Reset+0x74>)
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fd52 	bl	80059f0 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2001      	movs	r0, #1
 8006f50:	f7fc fa0a 	bl	8003368 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8006f54:	2101      	movs	r1, #1
 8006f56:	2003      	movs	r0, #3
 8006f58:	f7fc fa06 	bl	8003368 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	2002      	movs	r0, #2
 8006f60:	f7fc fa02 	bl	8003368 <gpioPinWrite>
  delay(10);
 8006f64:	200a      	movs	r0, #10
 8006f66:	f7fa f951 	bl	800120c <delay>

  st7735InitRegs();
 8006f6a:	f000 f863 	bl	8007034 <st7735InitRegs>


  st7735SetRotation(1);
 8006f6e:	2001      	movs	r0, #1
 8006f70:	f000 f910 	bl	8007194 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	22a0      	movs	r2, #160	; 0xa0
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f000 f97e 	bl	8007280 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006f84:	2100      	movs	r1, #0
 8006f86:	2001      	movs	r0, #1
 8006f88:	f7fc f9ee 	bl	8003368 <gpioPinWrite>
  return true;
 8006f8c:	2301      	movs	r3, #1
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	2000a450 	.word	0x2000a450
 8006f98:	08006e79 	.word	0x08006e79

08006f9c <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8006fa0:	23a0      	movs	r3, #160	; 0xa0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8006fb0:	2380      	movs	r3, #128	; 0x80
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <writecommand>:

void writecommand(uint8_t c)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	2003      	movs	r0, #3
 8006fca:	f7fc f9cd 	bl	8003368 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006fce:	2100      	movs	r1, #0
 8006fd0:	2002      	movs	r0, #2
 8006fd2:	f7fc f9c9 	bl	8003368 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <writecommand+0x38>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	79fa      	ldrb	r2, [r7, #7]
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fc64 	bl	80058ac <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	2002      	movs	r0, #2
 8006fe8:	f7fc f9be 	bl	8003368 <gpioPinWrite>
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	2000a450 	.word	0x2000a450

08006ff8 <writedata>:

void writedata(uint8_t d)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007002:	2101      	movs	r1, #1
 8007004:	2003      	movs	r0, #3
 8007006:	f7fc f9af 	bl	8003368 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800700a:	2100      	movs	r1, #0
 800700c:	2002      	movs	r0, #2
 800700e:	f7fc f9ab 	bl	8003368 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <writedata+0x38>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	79fa      	ldrb	r2, [r7, #7]
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fc46 	bl	80058ac <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007020:	2101      	movs	r1, #1
 8007022:	2002      	movs	r0, #2
 8007024:	f7fc f9a0 	bl	8003368 <gpioPinWrite>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	2000a450 	.word	0x2000a450

08007034 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8007038:	2001      	movs	r0, #1
 800703a:	f7ff ffbf 	bl	8006fbc <writecommand>
  delay(10);
 800703e:	200a      	movs	r0, #10
 8007040:	f7fa f8e4 	bl	800120c <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8007044:	2011      	movs	r0, #17
 8007046:	f7ff ffb9 	bl	8006fbc <writecommand>
  delay(10);
 800704a:	200a      	movs	r0, #10
 800704c:	f7fa f8de 	bl	800120c <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8007050:	20b1      	movs	r0, #177	; 0xb1
 8007052:	f7ff ffb3 	bl	8006fbc <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8007056:	2001      	movs	r0, #1
 8007058:	f7ff ffce 	bl	8006ff8 <writedata>
  writedata(0x2C);
 800705c:	202c      	movs	r0, #44	; 0x2c
 800705e:	f7ff ffcb 	bl	8006ff8 <writedata>
  writedata(0x2D);
 8007062:	202d      	movs	r0, #45	; 0x2d
 8007064:	f7ff ffc8 	bl	8006ff8 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8007068:	20b2      	movs	r0, #178	; 0xb2
 800706a:	f7ff ffa7 	bl	8006fbc <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800706e:	2001      	movs	r0, #1
 8007070:	f7ff ffc2 	bl	8006ff8 <writedata>
  writedata(0x2C);
 8007074:	202c      	movs	r0, #44	; 0x2c
 8007076:	f7ff ffbf 	bl	8006ff8 <writedata>
  writedata(0x2D);
 800707a:	202d      	movs	r0, #45	; 0x2d
 800707c:	f7ff ffbc 	bl	8006ff8 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8007080:	20b3      	movs	r0, #179	; 0xb3
 8007082:	f7ff ff9b 	bl	8006fbc <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8007086:	2001      	movs	r0, #1
 8007088:	f7ff ffb6 	bl	8006ff8 <writedata>
  writedata(0x2C);
 800708c:	202c      	movs	r0, #44	; 0x2c
 800708e:	f7ff ffb3 	bl	8006ff8 <writedata>
  writedata(0x2D);
 8007092:	202d      	movs	r0, #45	; 0x2d
 8007094:	f7ff ffb0 	bl	8006ff8 <writedata>
  writedata(0x01);              //     Line inversion mode
 8007098:	2001      	movs	r0, #1
 800709a:	f7ff ffad 	bl	8006ff8 <writedata>
  writedata(0x2C);
 800709e:	202c      	movs	r0, #44	; 0x2c
 80070a0:	f7ff ffaa 	bl	8006ff8 <writedata>
  writedata(0x2D);
 80070a4:	202d      	movs	r0, #45	; 0x2d
 80070a6:	f7ff ffa7 	bl	8006ff8 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 80070aa:	20b4      	movs	r0, #180	; 0xb4
 80070ac:	f7ff ff86 	bl	8006fbc <writecommand>
  writedata(0x07);              //     No inversion
 80070b0:	2007      	movs	r0, #7
 80070b2:	f7ff ffa1 	bl	8006ff8 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 80070b6:	20c0      	movs	r0, #192	; 0xc0
 80070b8:	f7ff ff80 	bl	8006fbc <writecommand>
  writedata(0xA2);
 80070bc:	20a2      	movs	r0, #162	; 0xa2
 80070be:	f7ff ff9b 	bl	8006ff8 <writedata>
  writedata(0x02);              //     -4.6V
 80070c2:	2002      	movs	r0, #2
 80070c4:	f7ff ff98 	bl	8006ff8 <writedata>
  writedata(0x84);              //     AUTO mode
 80070c8:	2084      	movs	r0, #132	; 0x84
 80070ca:	f7ff ff95 	bl	8006ff8 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 80070ce:	20c1      	movs	r0, #193	; 0xc1
 80070d0:	f7ff ff74 	bl	8006fbc <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80070d4:	20c5      	movs	r0, #197	; 0xc5
 80070d6:	f7ff ff8f 	bl	8006ff8 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80070da:	20c2      	movs	r0, #194	; 0xc2
 80070dc:	f7ff ff6e 	bl	8006fbc <writecommand>
  writedata(0x0A);              //     Opamp current small
 80070e0:	200a      	movs	r0, #10
 80070e2:	f7ff ff89 	bl	8006ff8 <writedata>
  writedata(0x00);              //     Boost frequency
 80070e6:	2000      	movs	r0, #0
 80070e8:	f7ff ff86 	bl	8006ff8 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 80070ec:	20c3      	movs	r0, #195	; 0xc3
 80070ee:	f7ff ff65 	bl	8006fbc <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80070f2:	208a      	movs	r0, #138	; 0x8a
 80070f4:	f7ff ff80 	bl	8006ff8 <writedata>
  writedata(0x2A);
 80070f8:	202a      	movs	r0, #42	; 0x2a
 80070fa:	f7ff ff7d 	bl	8006ff8 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80070fe:	20c4      	movs	r0, #196	; 0xc4
 8007100:	f7ff ff5c 	bl	8006fbc <writecommand>
  writedata(0x8A);
 8007104:	208a      	movs	r0, #138	; 0x8a
 8007106:	f7ff ff77 	bl	8006ff8 <writedata>
  writedata(0xEE);
 800710a:	20ee      	movs	r0, #238	; 0xee
 800710c:	f7ff ff74 	bl	8006ff8 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8007110:	20c5      	movs	r0, #197	; 0xc5
 8007112:	f7ff ff53 	bl	8006fbc <writecommand>
  writedata(0x0E);
 8007116:	200e      	movs	r0, #14
 8007118:	f7ff ff6e 	bl	8006ff8 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 800711c:	2020      	movs	r0, #32
 800711e:	f7ff ff4d 	bl	8006fbc <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8007122:	2036      	movs	r0, #54	; 0x36
 8007124:	f7ff ff4a 	bl	8006fbc <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8007128:	20c8      	movs	r0, #200	; 0xc8
 800712a:	f7ff ff65 	bl	8006ff8 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 800712e:	203a      	movs	r0, #58	; 0x3a
 8007130:	f7ff ff44 	bl	8006fbc <writecommand>
  writedata(0x05);              //     16-bit color
 8007134:	2005      	movs	r0, #5
 8007136:	f7ff ff5f 	bl	8006ff8 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 800713a:	202a      	movs	r0, #42	; 0x2a
 800713c:	f7ff ff3e 	bl	8006fbc <writecommand>
  writedata(0x00);
 8007140:	2000      	movs	r0, #0
 8007142:	f7ff ff59 	bl	8006ff8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8007146:	2000      	movs	r0, #0
 8007148:	f7ff ff56 	bl	8006ff8 <writedata>
  writedata(0x00);
 800714c:	2000      	movs	r0, #0
 800714e:	f7ff ff53 	bl	8006ff8 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8007152:	209f      	movs	r0, #159	; 0x9f
 8007154:	f7ff ff50 	bl	8006ff8 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8007158:	202b      	movs	r0, #43	; 0x2b
 800715a:	f7ff ff2f 	bl	8006fbc <writecommand>
  writedata(0x00);
 800715e:	2000      	movs	r0, #0
 8007160:	f7ff ff4a 	bl	8006ff8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8007164:	2000      	movs	r0, #0
 8007166:	f7ff ff47 	bl	8006ff8 <writedata>
  writedata(0x00);
 800716a:	2000      	movs	r0, #0
 800716c:	f7ff ff44 	bl	8006ff8 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8007170:	207f      	movs	r0, #127	; 0x7f
 8007172:	f7ff ff41 	bl	8006ff8 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8007176:	2013      	movs	r0, #19
 8007178:	f7ff ff20 	bl	8006fbc <writecommand>
  delay(10);
 800717c:	200a      	movs	r0, #10
 800717e:	f7fa f845 	bl	800120c <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8007182:	2029      	movs	r0, #41	; 0x29
 8007184:	f7ff ff1a 	bl	8006fbc <writecommand>
  delay(10);
 8007188:	200a      	movs	r0, #10
 800718a:	f7fa f83f 	bl	800120c <delay>
}
 800718e:	bf00      	nop
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 800719e:	2036      	movs	r0, #54	; 0x36
 80071a0:	f7ff ff0c 	bl	8006fbc <writecommand>

  switch (mode)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d81a      	bhi.n	80071e0 <st7735SetRotation+0x4c>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <st7735SetRotation+0x1c>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071d1 	.word	0x080071d1
 80071bc:	080071d9 	.word	0x080071d9
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80071c0:	20c0      	movs	r0, #192	; 0xc0
 80071c2:	f7ff ff19 	bl	8006ff8 <writedata>
     break;
 80071c6:	e00b      	b.n	80071e0 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80071c8:	20a0      	movs	r0, #160	; 0xa0
 80071ca:	f7ff ff15 	bl	8006ff8 <writedata>
     break;
 80071ce:	e007      	b.n	80071e0 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7ff ff11 	bl	8006ff8 <writedata>
    break;
 80071d6:	e003      	b.n	80071e0 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80071d8:	2060      	movs	r0, #96	; 0x60
 80071da:	f7ff ff0d 	bl	8006ff8 <writedata>
     break;
 80071de:	bf00      	nop
  }
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 80071f6:	4b21      	ldr	r3, [pc, #132]	; (800727c <st7735SetWindow+0x94>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2108      	movs	r1, #8
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe fb25 	bl	800584c <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8007202:	202a      	movs	r0, #42	; 0x2a
 8007204:	f7ff feda 	bl	8006fbc <writecommand>
  writedata(0x00);
 8007208:	2000      	movs	r0, #0
 800720a:	f7ff fef5 	bl	8006ff8 <writedata>
  writedata(x0+colstart);     // XSTART
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	2300      	movs	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	4413      	add	r3, r2
 8007218:	b2db      	uxtb	r3, r3
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff feec 	bl	8006ff8 <writedata>
  writedata(0x00);
 8007220:	2000      	movs	r0, #0
 8007222:	f7ff fee9 	bl	8006ff8 <writedata>
  writedata(x1+colstart);     // XEND
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	2300      	movs	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	4413      	add	r3, r2
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fee0 	bl	8006ff8 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8007238:	202b      	movs	r0, #43	; 0x2b
 800723a:	f7ff febf 	bl	8006fbc <writecommand>
  writedata(0x00);
 800723e:	2000      	movs	r0, #0
 8007240:	f7ff feda 	bl	8006ff8 <writedata>
  writedata(y0+rowstart);     // YSTART
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	b2da      	uxtb	r2, r3
 8007248:	2300      	movs	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4413      	add	r3, r2
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fed1 	bl	8006ff8 <writedata>
  writedata(0x00);
 8007256:	2000      	movs	r0, #0
 8007258:	f7ff fece 	bl	8006ff8 <writedata>
  writedata(y1+rowstart);     // YEND
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fec5 	bl	8006ff8 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 800726e:	202c      	movs	r0, #44	; 0x2c
 8007270:	f7ff fea4 	bl	8006fbc <writecommand>
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	2000a450 	.word	0x2000a450

08007280 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8007280:	b5b0      	push	{r4, r5, r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	466b      	mov	r3, sp
 8007290:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	1e43      	subs	r3, r0, #1
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	4603      	mov	r3, r0
 800729a:	4619      	mov	r1, r3
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	f04f 0400 	mov.w	r4, #0
 80072a8:	0114      	lsls	r4, r2, #4
 80072aa:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80072ae:	010b      	lsls	r3, r1, #4
 80072b0:	4603      	mov	r3, r0
 80072b2:	4619      	mov	r1, r3
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	f04f 0400 	mov.w	r4, #0
 80072c0:	0114      	lsls	r4, r2, #4
 80072c2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80072c6:	010b      	lsls	r3, r1, #4
 80072c8:	4603      	mov	r3, r0
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	3301      	adds	r3, #1
 80072ce:	3307      	adds	r3, #7
 80072d0:	08db      	lsrs	r3, r3, #3
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	ebad 0d03 	sub.w	sp, sp, r3
 80072d8:	466b      	mov	r3, sp
 80072da:	3301      	adds	r3, #1
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80072e2:	22a0      	movs	r2, #160	; 0xa0
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	da78      	bge.n	80073dc <st7735FillRect+0x15c>
 80072ea:	2280      	movs	r2, #128	; 0x80
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4293      	cmp	r3, r2
 80072f0:	da74      	bge.n	80073dc <st7735FillRect+0x15c>

  if (x < 0) { w += x; x = 0; }
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da05      	bge.n	8007304 <st7735FillRect+0x84>
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	607b      	str	r3, [r7, #4]
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da05      	bge.n	8007316 <st7735FillRect+0x96>
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4413      	add	r3, r2
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4413      	add	r3, r2
 800731c:	22a0      	movs	r2, #160	; 0xa0
 800731e:	4293      	cmp	r3, r2
 8007320:	dd03      	ble.n	800732a <st7735FillRect+0xaa>
 8007322:	22a0      	movs	r2, #160	; 0xa0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	4413      	add	r3, r2
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	4293      	cmp	r3, r2
 8007334:	dd03      	ble.n	800733e <st7735FillRect+0xbe>
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dd4d      	ble.n	80073e0 <st7735FillRect+0x160>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	dd4a      	ble.n	80073e0 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	1e59      	subs	r1, r3, #1
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	4413      	add	r3, r2
 8007358:	3b01      	subs	r3, #1
 800735a:	460a      	mov	r2, r1
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff ff42 	bl	80071e8 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8007364:	4b21      	ldr	r3, [pc, #132]	; (80073ec <st7735FillRect+0x16c>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2110      	movs	r1, #16
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fa6e 	bl	800584c <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007370:	2101      	movs	r1, #1
 8007372:	2003      	movs	r0, #3
 8007374:	f7fb fff8 	bl	8003368 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007378:	2100      	movs	r1, #0
 800737a:	2002      	movs	r0, #2
 800737c:	f7fb fff4 	bl	8003368 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e008      	b.n	8007398 <st7735FillRect+0x118>
  {
    line_buf[i] = color;
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	b299      	uxth	r1, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3301      	adds	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	dbf2      	blt.n	8007386 <st7735FillRect+0x106>
  }
  for (int i=0; i<h; i++)
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e00e      	b.n	80073c4 <st7735FillRect+0x144>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 80073a6:	6939      	ldr	r1, [r7, #16]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	230a      	movs	r3, #10
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7fe facf 	bl	8005950 <spiDmaTxTransfer>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f083 0301 	eor.w	r3, r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d107      	bne.n	80073ce <st7735FillRect+0x14e>
  for (int i=0; i<h; i++)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	3301      	adds	r3, #1
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	dbec      	blt.n	80073a6 <st7735FillRect+0x126>
 80073cc:	e000      	b.n	80073d0 <st7735FillRect+0x150>
    {
      break;
 80073ce:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80073d0:	2101      	movs	r1, #1
 80073d2:	2002      	movs	r0, #2
 80073d4:	f7fb ffc8 	bl	8003368 <gpioPinWrite>
 80073d8:	46ad      	mov	sp, r5
 80073da:	e003      	b.n	80073e4 <st7735FillRect+0x164>
  if ((x >= _width) || (y >= _height)) return;
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <st7735FillRect+0x162>
  if ((w < 1) || (h < 1)) return;
 80073e0:	bf00      	nop
 80073e2:	46ad      	mov	sp, r5
}
 80073e4:	3720      	adds	r7, #32
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	2000a450 	.word	0x2000a450

080073f0 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80073fc:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <st7735SendBuffer+0x44>)
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <st7735SendBuffer+0x48>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2110      	movs	r1, #16
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fa1f 	bl	800584c <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 800740e:	2101      	movs	r1, #1
 8007410:	2003      	movs	r0, #3
 8007412:	f7fb ffa9 	bl	8003368 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007416:	2100      	movs	r1, #0
 8007418:	2002      	movs	r0, #2
 800741a:	f7fb ffa5 	bl	8003368 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 800741e:	2300      	movs	r3, #0
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	2000      	movs	r0, #0
 8007426:	f7fe fa93 	bl	8005950 <spiDmaTxTransfer>
  return true;
 800742a:	2301      	movs	r3, #1
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	2000a458 	.word	0x2000a458
 8007438:	2000a450 	.word	0x2000a450

0800743c <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8007444:	4a04      	ldr	r2, [pc, #16]	; (8007458 <st7735SetCallBack+0x1c>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6013      	str	r3, [r2, #0]

  return true;
 800744a:	2301      	movs	r3, #1
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	2000a454 	.word	0x2000a454

0800745c <hwInit>:




void hwInit(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  bspInit();
 8007460:	f7f9 feaa 	bl	80011b8 <bspInit>

  cliInit();
 8007464:	f7fa fa2e 	bl	80018c4 <cliInit>
  ledInit();
 8007468:	f7fc ff5c 	bl	8004324 <ledInit>
  uartInit();
 800746c:	f7fe fe14 	bl	8006098 <uartInit>
  spiInit();
 8007470:	f7fe f8d8 	bl	8005624 <spiInit>
  DWT_Delay_Init();
 8007474:	f7fa f8ee 	bl	8001654 <DWT_Delay_Init>
  buttonInit();
 8007478:	f7fa f91c 	bl	80016b4 <buttonInit>
  gpioInit();
 800747c:	f7fb feaa 	bl	80031d4 <gpioInit>
  Ds18b20_Init();
 8007480:	f7fb f968 	bl	8002754 <Ds18b20_Init>
  sonarInit();
 8007484:	f7fd fefa 	bl	800527c <sonarInit>

  //LCD_INIT();
  lcdInit();
 8007488:	f7fc f8d2 	bl	8003630 <lcdInit>
  tdsInit();
 800748c:	f7fe fbc6 	bl	8005c1c <tdsInit>

  if (sdInit() == true)
 8007490:	f7fd fb0a 	bl	8004aa8 <sdInit>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <hwInit+0x42>
  {
    fatfsInit();
 800749a:	f7fb fcc3 	bl	8002e24 <fatfsInit>
  }
}
 800749e:	bf00      	nop
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	4a08      	ldr	r2, [pc, #32]	; (80074d4 <disk_status+0x30>)
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	79fa      	ldrb	r2, [r7, #7]
 80074bc:	4905      	ldr	r1, [pc, #20]	; (80074d4 <disk_status+0x30>)
 80074be:	440a      	add	r2, r1
 80074c0:	7b12      	ldrb	r2, [r2, #12]
 80074c2:	4610      	mov	r0, r2
 80074c4:	4798      	blx	r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	2000a488 	.word	0x2000a488

080074d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	4a0d      	ldr	r2, [pc, #52]	; (8007520 <disk_initialize+0x48>)
 80074ea:	5cd3      	ldrb	r3, [r2, r3]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d111      	bne.n	8007514 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <disk_initialize+0x48>)
 80074f4:	2101      	movs	r1, #1
 80074f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <disk_initialize+0x48>)
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	79fa      	ldrb	r2, [r7, #7]
 8007506:	4906      	ldr	r1, [pc, #24]	; (8007520 <disk_initialize+0x48>)
 8007508:	440a      	add	r2, r1
 800750a:	7b12      	ldrb	r2, [r2, #12]
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	2000a488 	.word	0x2000a488

08007524 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <disk_read+0x3c>)
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	689c      	ldr	r4, [r3, #8]
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	4a07      	ldr	r2, [pc, #28]	; (8007560 <disk_read+0x3c>)
 8007544:	4413      	add	r3, r2
 8007546:	7b18      	ldrb	r0, [r3, #12]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	47a0      	blx	r4
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]
  return res;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
}
 8007556:	4618      	mov	r0, r3
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	bd90      	pop	{r4, r7, pc}
 800755e:	bf00      	nop
 8007560:	2000a488 	.word	0x2000a488

08007564 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4a0a      	ldr	r2, [pc, #40]	; (80075a0 <disk_write+0x3c>)
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68dc      	ldr	r4, [r3, #12]
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	4a07      	ldr	r2, [pc, #28]	; (80075a0 <disk_write+0x3c>)
 8007584:	4413      	add	r3, r2
 8007586:	7b18      	ldrb	r0, [r3, #12]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	47a0      	blx	r4
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]
  return res;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	bd90      	pop	{r4, r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000a488 	.word	0x2000a488

080075a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	603a      	str	r2, [r7, #0]
 80075ae:	71fb      	strb	r3, [r7, #7]
 80075b0:	460b      	mov	r3, r1
 80075b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	4a09      	ldr	r2, [pc, #36]	; (80075dc <disk_ioctl+0x38>)
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	79fa      	ldrb	r2, [r7, #7]
 80075c2:	4906      	ldr	r1, [pc, #24]	; (80075dc <disk_ioctl+0x38>)
 80075c4:	440a      	add	r2, r1
 80075c6:	7b10      	ldrb	r0, [r2, #12]
 80075c8:	79b9      	ldrb	r1, [r7, #6]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	4798      	blx	r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	2000a488 	.word	0x2000a488

080075e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return 0;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3301      	adds	r3, #1
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007600:	89fb      	ldrh	r3, [r7, #14]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	b21a      	sxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b21b      	sxth	r3, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	b21b      	sxth	r3, r3
 8007610:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007612:	89fb      	ldrh	r3, [r7, #14]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3303      	adds	r3, #3
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	3202      	adds	r2, #2
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	021b      	lsls	r3, r3, #8
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	3201      	adds	r2, #1
 8007646:	7812      	ldrb	r2, [r2, #0]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7812      	ldrb	r2, [r2, #0]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
	return rv;
 8007658:	68fb      	ldr	r3, [r7, #12]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	887a      	ldrh	r2, [r7, #2]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	887a      	ldrh	r2, [r7, #2]
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	1c53      	adds	r3, r2, #1
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	1c59      	adds	r1, r3, #1
 8007718:	6179      	str	r1, [r7, #20]
 800771a:	7812      	ldrb	r2, [r2, #0]
 800771c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3b01      	subs	r3, #1
 8007722:	607b      	str	r3, [r7, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f1      	bne.n	800770e <mem_cpy+0x1a>
	}
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007736:	b480      	push	{r7}
 8007738:	b087      	sub	sp, #28
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	617a      	str	r2, [r7, #20]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3b01      	subs	r3, #1
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f3      	bne.n	8007746 <mem_set+0x10>
}
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800776a:	b480      	push	{r7}
 800776c:	b089      	sub	sp, #36	; 0x24
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	61fb      	str	r3, [r7, #28]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	61fa      	str	r2, [r7, #28]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	4619      	mov	r1, r3
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	61ba      	str	r2, [r7, #24]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	1acb      	subs	r3, r1, r3
 8007796:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3b01      	subs	r3, #1
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <mem_cmp+0x40>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0eb      	beq.n	8007782 <mem_cmp+0x18>

	return r;
 80077aa:	697b      	ldr	r3, [r7, #20]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3724      	adds	r7, #36	; 0x24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80077c2:	e002      	b.n	80077ca <chk_chr+0x12>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3301      	adds	r3, #1
 80077c8:	607b      	str	r3, [r7, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <chk_chr+0x26>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	4293      	cmp	r3, r2
 80077dc:	d1f2      	bne.n	80077c4 <chk_chr+0xc>
	return *str;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	781b      	ldrb	r3, [r3, #0]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	e029      	b.n	8007858 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007804:	4a27      	ldr	r2, [pc, #156]	; (80078a4 <chk_lock+0xb4>)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	4413      	add	r3, r2
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01d      	beq.n	800784e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007812:	4a24      	ldr	r2, [pc, #144]	; (80078a4 <chk_lock+0xb4>)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4413      	add	r3, r2
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d116      	bne.n	8007852 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007824:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <chk_lock+0xb4>)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	4413      	add	r3, r2
 800782c:	3304      	adds	r3, #4
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007834:	429a      	cmp	r2, r3
 8007836:	d10c      	bne.n	8007852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007838:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <chk_lock+0xb4>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	4413      	add	r3, r2
 8007840:	3308      	adds	r3, #8
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007848:	429a      	cmp	r2, r3
 800784a:	d102      	bne.n	8007852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800784c:	e007      	b.n	800785e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d9d2      	bls.n	8007804 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d109      	bne.n	8007878 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d102      	bne.n	8007870 <chk_lock+0x80>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d101      	bne.n	8007874 <chk_lock+0x84>
 8007870:	2300      	movs	r3, #0
 8007872:	e010      	b.n	8007896 <chk_lock+0xa6>
 8007874:	2312      	movs	r3, #18
 8007876:	e00e      	b.n	8007896 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d108      	bne.n	8007890 <chk_lock+0xa0>
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <chk_lock+0xb4>)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	4413      	add	r3, r2
 8007886:	330c      	adds	r3, #12
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788e:	d101      	bne.n	8007894 <chk_lock+0xa4>
 8007890:	2310      	movs	r3, #16
 8007892:	e000      	b.n	8007896 <chk_lock+0xa6>
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	2000a468 	.word	0x2000a468

080078a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]
 80078b2:	e002      	b.n	80078ba <enq_lock+0x12>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3301      	adds	r3, #1
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d806      	bhi.n	80078ce <enq_lock+0x26>
 80078c0:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <enq_lock+0x40>)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	4413      	add	r3, r2
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f2      	bne.n	80078b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	2000a468 	.word	0x2000a468

080078ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e01f      	b.n	800793c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078fc:	4a41      	ldr	r2, [pc, #260]	; (8007a04 <inc_lock+0x118>)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	4413      	add	r3, r2
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d113      	bne.n	8007936 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800790e:	4a3d      	ldr	r2, [pc, #244]	; (8007a04 <inc_lock+0x118>)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	4413      	add	r3, r2
 8007916:	3304      	adds	r3, #4
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800791e:	429a      	cmp	r2, r3
 8007920:	d109      	bne.n	8007936 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007922:	4a38      	ldr	r2, [pc, #224]	; (8007a04 <inc_lock+0x118>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	4413      	add	r3, r2
 800792a:	3308      	adds	r3, #8
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007932:	429a      	cmp	r2, r3
 8007934:	d006      	beq.n	8007944 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d9dc      	bls.n	80078fc <inc_lock+0x10>
 8007942:	e000      	b.n	8007946 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007944:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d132      	bne.n	80079b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	e002      	b.n	8007958 <inc_lock+0x6c>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d806      	bhi.n	800796c <inc_lock+0x80>
 800795e:	4a29      	ldr	r2, [pc, #164]	; (8007a04 <inc_lock+0x118>)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	4413      	add	r3, r2
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f2      	bne.n	8007952 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d101      	bne.n	8007976 <inc_lock+0x8a>
 8007972:	2300      	movs	r3, #0
 8007974:	e040      	b.n	80079f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4922      	ldr	r1, [pc, #136]	; (8007a04 <inc_lock+0x118>)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	440b      	add	r3, r1
 8007982:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	491e      	ldr	r1, [pc, #120]	; (8007a04 <inc_lock+0x118>)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	440b      	add	r3, r1
 8007990:	3304      	adds	r3, #4
 8007992:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	695a      	ldr	r2, [r3, #20]
 8007998:	491a      	ldr	r1, [pc, #104]	; (8007a04 <inc_lock+0x118>)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	440b      	add	r3, r1
 80079a0:	3308      	adds	r3, #8
 80079a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80079a4:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <inc_lock+0x118>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	4413      	add	r3, r2
 80079ac:	330c      	adds	r3, #12
 80079ae:	2200      	movs	r2, #0
 80079b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <inc_lock+0xe0>
 80079b8:	4a12      	ldr	r2, [pc, #72]	; (8007a04 <inc_lock+0x118>)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	4413      	add	r3, r2
 80079c0:	330c      	adds	r3, #12
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <inc_lock+0xe0>
 80079c8:	2300      	movs	r3, #0
 80079ca:	e015      	b.n	80079f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <inc_lock+0xf8>
 80079d2:	4a0c      	ldr	r2, [pc, #48]	; (8007a04 <inc_lock+0x118>)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4413      	add	r3, r2
 80079da:	330c      	adds	r3, #12
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	e001      	b.n	80079e8 <inc_lock+0xfc>
 80079e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e8:	4906      	ldr	r1, [pc, #24]	; (8007a04 <inc_lock+0x118>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	440b      	add	r3, r1
 80079f0:	330c      	adds	r3, #12
 80079f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3301      	adds	r3, #1
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	2000a468 	.word	0x2000a468

08007a08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d825      	bhi.n	8007a68 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a1c:	4a17      	ldr	r2, [pc, #92]	; (8007a7c <dec_lock+0x74>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	4413      	add	r3, r2
 8007a24:	330c      	adds	r3, #12
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a2a:	89fb      	ldrh	r3, [r7, #14]
 8007a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a30:	d101      	bne.n	8007a36 <dec_lock+0x2e>
 8007a32:	2300      	movs	r3, #0
 8007a34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a36:	89fb      	ldrh	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <dec_lock+0x3a>
 8007a3c:	89fb      	ldrh	r3, [r7, #14]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007a42:	4a0e      	ldr	r2, [pc, #56]	; (8007a7c <dec_lock+0x74>)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	4413      	add	r3, r2
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	89fa      	ldrh	r2, [r7, #14]
 8007a4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a50:	89fb      	ldrh	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <dec_lock+0x5a>
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <dec_lock+0x74>)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	737b      	strb	r3, [r7, #13]
 8007a66:	e001      	b.n	8007a6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a68:	2302      	movs	r3, #2
 8007a6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	2000a468 	.word	0x2000a468

08007a80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e010      	b.n	8007ab0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a8e:	4a0d      	ldr	r2, [pc, #52]	; (8007ac4 <clear_lock+0x44>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4413      	add	r3, r2
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d105      	bne.n	8007aaa <clear_lock+0x2a>
 8007a9e:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <clear_lock+0x44>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	4413      	add	r3, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d9eb      	bls.n	8007a8e <clear_lock+0xe>
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	2000a468 	.word	0x2000a468

08007ac8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d034      	beq.n	8007b46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7858      	ldrb	r0, [r3, #1]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007aec:	2301      	movs	r3, #1
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	f7ff fd38 	bl	8007564 <disk_write>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	73fb      	strb	r3, [r7, #15]
 8007afe:	e022      	b.n	8007b46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	1ad2      	subs	r2, r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d217      	bcs.n	8007b46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	e010      	b.n	8007b40 <sync_window+0x78>
					wsect += fs->fsize;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4413      	add	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7858      	ldrb	r0, [r3, #1]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b32:	2301      	movs	r3, #1
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	f7ff fd15 	bl	8007564 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d8eb      	bhi.n	8007b1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d01b      	beq.n	8007ba0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ffad 	bl	8007ac8 <sync_window>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d113      	bne.n	8007ba0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7858      	ldrb	r0, [r3, #1]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b82:	2301      	movs	r3, #1
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	f7ff fccd 	bl	8007524 <disk_read>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d004      	beq.n	8007b9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ff87 	bl	8007ac8 <sync_window>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d158      	bne.n	8007c76 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d148      	bne.n	8007c5e <sync_fs+0xb2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d144      	bne.n	8007c5e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3334      	adds	r3, #52	; 0x34
 8007bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fda9 	bl	8007736 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3334      	adds	r3, #52	; 0x34
 8007be8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fd38 	bl	8007666 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3334      	adds	r3, #52	; 0x34
 8007bfa:	4921      	ldr	r1, [pc, #132]	; (8007c80 <sync_fs+0xd4>)
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff fd4d 	bl	800769c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3334      	adds	r3, #52	; 0x34
 8007c06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c0a:	491e      	ldr	r1, [pc, #120]	; (8007c84 <sync_fs+0xd8>)
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff fd45 	bl	800769c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3334      	adds	r3, #52	; 0x34
 8007c16:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7ff fd3b 	bl	800769c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3334      	adds	r3, #52	; 0x34
 8007c2a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f7ff fd31 	bl	800769c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7858      	ldrb	r0, [r3, #1]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c52:	2301      	movs	r3, #1
 8007c54:	f7ff fc86 	bl	8007564 <disk_write>
			fs->fsi_flag = 0;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fc9c 	bl	80075a4 <disk_ioctl>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <sync_fs+0xca>
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	41615252 	.word	0x41615252
 8007c84:	61417272 	.word	0x61417272

08007c88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	3b02      	subs	r3, #2
 8007c96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	3b02      	subs	r3, #2
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d301      	bcc.n	8007ca8 <clust2sect+0x20>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e008      	b.n	8007cba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	895b      	ldrh	r3, [r3, #10]
 8007cac:	461a      	mov	r2, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	fb03 f202 	mul.w	r2, r3, r2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4413      	add	r3, r2
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d904      	bls.n	8007ce6 <get_fat+0x20>
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <get_fat+0x26>
		val = 1;	/* Internal error */
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	e08c      	b.n	8007e06 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007cec:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d045      	beq.n	8007d86 <get_fat+0xc0>
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d05d      	beq.n	8007dba <get_fat+0xf4>
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d177      	bne.n	8007df2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	085b      	lsrs	r3, r3, #1
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0a5b      	lsrs	r3, r3, #9
 8007d18:	4413      	add	r3, r2
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6938      	ldr	r0, [r7, #16]
 8007d1e:	f7ff ff17 	bl	8007b50 <move_window>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d167      	bne.n	8007df8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	60fa      	str	r2, [r7, #12]
 8007d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4413      	add	r3, r2
 8007d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d3a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	0a5b      	lsrs	r3, r3, #9
 8007d44:	4413      	add	r3, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	6938      	ldr	r0, [r7, #16]
 8007d4a:	f7ff ff01 	bl	8007b50 <move_window>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d153      	bne.n	8007dfc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	461a      	mov	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <get_fat+0xb6>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	e002      	b.n	8007d82 <get_fat+0xbc>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d82:	617b      	str	r3, [r7, #20]
			break;
 8007d84:	e03f      	b.n	8007e06 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	0a1b      	lsrs	r3, r3, #8
 8007d8e:	4413      	add	r3, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	6938      	ldr	r0, [r7, #16]
 8007d94:	f7ff fedc 	bl	8007b50 <move_window>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d130      	bne.n	8007e00 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007dac:	4413      	add	r3, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fc1e 	bl	80075f0 <ld_word>
 8007db4:	4603      	mov	r3, r0
 8007db6:	617b      	str	r3, [r7, #20]
			break;
 8007db8:	e025      	b.n	8007e06 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	09db      	lsrs	r3, r3, #7
 8007dc2:	4413      	add	r3, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6938      	ldr	r0, [r7, #16]
 8007dc8:	f7ff fec2 	bl	8007b50 <move_window>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d118      	bne.n	8007e04 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007de0:	4413      	add	r3, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff fc1c 	bl	8007620 <ld_dword>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007dee:	617b      	str	r3, [r7, #20]
			break;
 8007df0:	e009      	b.n	8007e06 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007df2:	2301      	movs	r3, #1
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	e006      	b.n	8007e06 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007df8:	bf00      	nop
 8007dfa:	e004      	b.n	8007e06 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dfc:	bf00      	nop
 8007dfe:	e002      	b.n	8007e06 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e04:	bf00      	nop
		}
	}

	return val;
 8007e06:	697b      	ldr	r3, [r7, #20]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b089      	sub	sp, #36	; 0x24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	f240 80d6 	bls.w	8007fd4 <put_fat+0x1c4>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	f080 80d0 	bcs.w	8007fd4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d073      	beq.n	8007f24 <put_fat+0x114>
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	f000 8091 	beq.w	8007f64 <put_fat+0x154>
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	f040 80c6 	bne.w	8007fd4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4413      	add	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	0a5b      	lsrs	r3, r3, #9
 8007e5e:	4413      	add	r3, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff fe74 	bl	8007b50 <move_window>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e6c:	7ffb      	ldrb	r3, [r7, #31]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80a9 	bne.w	8007fc6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	1c59      	adds	r1, r3, #1
 8007e7e:	61b9      	str	r1, [r7, #24]
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	4413      	add	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <put_fat+0x9e>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b25b      	sxtb	r3, r3
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	b25a      	sxtb	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	b25b      	sxtb	r3, r3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	e001      	b.n	8007eb2 <put_fat+0xa2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	0a5b      	lsrs	r3, r3, #9
 8007ec4:	4413      	add	r3, r2
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff fe41 	bl	8007b50 <move_window>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ed2:	7ffb      	ldrb	r3, [r7, #31]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d178      	bne.n	8007fca <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee4:	4413      	add	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <put_fat+0xea>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	091b      	lsrs	r3, r3, #4
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	e00e      	b.n	8007f18 <put_fat+0x108>
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	f023 030f 	bic.w	r3, r3, #15
 8007f04:	b25a      	sxtb	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	b25b      	sxtb	r3, r3
 8007f12:	4313      	orrs	r3, r2
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	70da      	strb	r2, [r3, #3]
			break;
 8007f22:	e057      	b.n	8007fd4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	4413      	add	r3, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff fe0d 	bl	8007b50 <move_window>
 8007f36:	4603      	mov	r3, r0
 8007f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d146      	bne.n	8007fce <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007f4e:	4413      	add	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	b292      	uxth	r2, r2
 8007f54:	4611      	mov	r1, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff fb85 	bl	8007666 <st_word>
			fs->wflag = 1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	70da      	strb	r2, [r3, #3]
			break;
 8007f62:	e037      	b.n	8007fd4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	09db      	lsrs	r3, r3, #7
 8007f6c:	4413      	add	r3, r2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff fded 	bl	8007b50 <move_window>
 8007f76:	4603      	mov	r3, r0
 8007f78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d128      	bne.n	8007fd2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f94:	4413      	add	r3, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fb42 	bl	8007620 <ld_dword>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007fa2:	4323      	orrs	r3, r4
 8007fa4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007fb4:	4413      	add	r3, r2
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff fb6f 	bl	800769c <st_dword>
			fs->wflag = 1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	70da      	strb	r2, [r3, #3]
			break;
 8007fc4:	e006      	b.n	8007fd4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007fd2:	bf00      	nop
		}
	}
	return res;
 8007fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3724      	adds	r7, #36	; 0x24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd90      	pop	{r4, r7, pc}

08007fde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b088      	sub	sp, #32
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d904      	bls.n	8008004 <remove_chain+0x26>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	429a      	cmp	r2, r3
 8008002:	d301      	bcc.n	8008008 <remove_chain+0x2a>
 8008004:	2302      	movs	r3, #2
 8008006:	e04b      	b.n	80080a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	69b8      	ldr	r0, [r7, #24]
 8008016:	f7ff fefb 	bl	8007e10 <put_fat>
 800801a:	4603      	mov	r3, r0
 800801c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <remove_chain+0x4a>
 8008024:	7ffb      	ldrb	r3, [r7, #31]
 8008026:	e03b      	b.n	80080a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7ff fe4b 	bl	8007cc6 <get_fat>
 8008030:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d031      	beq.n	800809c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <remove_chain+0x64>
 800803e:	2302      	movs	r3, #2
 8008040:	e02e      	b.n	80080a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d101      	bne.n	800804e <remove_chain+0x70>
 800804a:	2301      	movs	r3, #1
 800804c:	e028      	b.n	80080a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800804e:	2200      	movs	r2, #0
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	69b8      	ldr	r0, [r7, #24]
 8008054:	f7ff fedc 	bl	8007e10 <put_fat>
 8008058:	4603      	mov	r3, r0
 800805a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800805c:	7ffb      	ldrb	r3, [r7, #31]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <remove_chain+0x88>
 8008062:	7ffb      	ldrb	r3, [r7, #31]
 8008064:	e01c      	b.n	80080a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	695a      	ldr	r2, [r3, #20]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	3b02      	subs	r3, #2
 8008070:	429a      	cmp	r2, r3
 8008072:	d20b      	bcs.n	800808c <remove_chain+0xae>
			fs->free_clst++;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	791b      	ldrb	r3, [r3, #4]
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	429a      	cmp	r2, r3
 8008098:	d3c6      	bcc.n	8008028 <remove_chain+0x4a>
 800809a:	e000      	b.n	800809e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800809c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3720      	adds	r7, #32
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <create_chain+0x2c>
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d31b      	bcc.n	800810c <create_chain+0x64>
 80080d4:	2301      	movs	r3, #1
 80080d6:	61bb      	str	r3, [r7, #24]
 80080d8:	e018      	b.n	800810c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fdf2 	bl	8007cc6 <get_fat>
 80080e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d801      	bhi.n	80080ee <create_chain+0x46>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e070      	b.n	80081d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d101      	bne.n	80080fa <create_chain+0x52>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	e06a      	b.n	80081d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	429a      	cmp	r2, r3
 8008102:	d201      	bcs.n	8008108 <create_chain+0x60>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	e063      	b.n	80081d0 <create_chain+0x128>
		scl = clst;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	3301      	adds	r3, #1
 8008114:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	429a      	cmp	r2, r3
 800811e:	d307      	bcc.n	8008130 <create_chain+0x88>
				ncl = 2;
 8008120:	2302      	movs	r3, #2
 8008122:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008124:	69fa      	ldr	r2, [r7, #28]
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	d901      	bls.n	8008130 <create_chain+0x88>
 800812c:	2300      	movs	r3, #0
 800812e:	e04f      	b.n	80081d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008130:	69f9      	ldr	r1, [r7, #28]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fdc7 	bl	8007cc6 <get_fat>
 8008138:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d003      	beq.n	800814e <create_chain+0xa6>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d101      	bne.n	8008152 <create_chain+0xaa>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	e03e      	b.n	80081d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	429a      	cmp	r2, r3
 8008158:	d1da      	bne.n	8008110 <create_chain+0x68>
 800815a:	2300      	movs	r3, #0
 800815c:	e038      	b.n	80081d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800815e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	69f9      	ldr	r1, [r7, #28]
 8008166:	6938      	ldr	r0, [r7, #16]
 8008168:	f7ff fe52 	bl	8007e10 <put_fat>
 800816c:	4603      	mov	r3, r0
 800816e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <create_chain+0xe2>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d006      	beq.n	800818a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6938      	ldr	r0, [r7, #16]
 8008182:	f7ff fe45 	bl	8007e10 <put_fat>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d116      	bne.n	80081be <create_chain+0x116>
		fs->last_clst = ncl;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	695a      	ldr	r2, [r3, #20]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	3b02      	subs	r3, #2
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d804      	bhi.n	80081ae <create_chain+0x106>
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	791b      	ldrb	r3, [r3, #4]
 80081b2:	f043 0301 	orr.w	r3, r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	711a      	strb	r2, [r3, #4]
 80081bc:	e007      	b.n	80081ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d102      	bne.n	80081ca <create_chain+0x122>
 80081c4:	f04f 33ff 	mov.w	r3, #4294967295
 80081c8:	e000      	b.n	80081cc <create_chain+0x124>
 80081ca:	2301      	movs	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80081ce:	69fb      	ldr	r3, [r7, #28]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3720      	adds	r7, #32
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	3304      	adds	r3, #4
 80081ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	0a5b      	lsrs	r3, r3, #9
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	8952      	ldrh	r2, [r2, #10]
 80081f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1d1a      	adds	r2, r3, #4
 8008202:	613a      	str	r2, [r7, #16]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <clmt_clust+0x3a>
 800820e:	2300      	movs	r3, #0
 8008210:	e010      	b.n	8008234 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d307      	bcc.n	800822a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3304      	adds	r3, #4
 8008226:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008228:	e7e9      	b.n	80081fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800822a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4413      	add	r3, r2
}
 8008234:	4618      	mov	r0, r3
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008256:	d204      	bcs.n	8008262 <dir_sdi+0x22>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f003 031f 	and.w	r3, r3, #31
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008262:	2302      	movs	r3, #2
 8008264:	e063      	b.n	800832e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d106      	bne.n	8008286 <dir_sdi+0x46>
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d902      	bls.n	8008286 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008284:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10c      	bne.n	80082a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	8912      	ldrh	r2, [r2, #8]
 8008294:	4293      	cmp	r3, r2
 8008296:	d301      	bcc.n	800829c <dir_sdi+0x5c>
 8008298:	2302      	movs	r3, #2
 800829a:	e048      	b.n	800832e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	61da      	str	r2, [r3, #28]
 80082a4:	e029      	b.n	80082fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	895b      	ldrh	r3, [r3, #10]
 80082aa:	025b      	lsls	r3, r3, #9
 80082ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082ae:	e019      	b.n	80082e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6979      	ldr	r1, [r7, #20]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff fd06 	bl	8007cc6 <get_fat>
 80082ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d101      	bne.n	80082c8 <dir_sdi+0x88>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e032      	b.n	800832e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d904      	bls.n	80082d8 <dir_sdi+0x98>
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d301      	bcc.n	80082dc <dir_sdi+0x9c>
 80082d8:	2302      	movs	r3, #2
 80082da:	e028      	b.n	800832e <dir_sdi+0xee>
			ofs -= csz;
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d2e1      	bcs.n	80082b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80082ec:	6979      	ldr	r1, [r7, #20]
 80082ee:	6938      	ldr	r0, [r7, #16]
 80082f0:	f7ff fcca 	bl	8007c88 <clust2sect>
 80082f4:	4602      	mov	r2, r0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <dir_sdi+0xcc>
 8008308:	2302      	movs	r3, #2
 800830a:	e010      	b.n	800832e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	69da      	ldr	r2, [r3, #28]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	0a5b      	lsrs	r3, r3, #9
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	441a      	add	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	3320      	adds	r3, #32
 800834c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <dir_next+0x28>
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800835c:	d301      	bcc.n	8008362 <dir_next+0x2c>
 800835e:	2304      	movs	r3, #4
 8008360:	e0aa      	b.n	80084b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008368:	2b00      	cmp	r3, #0
 800836a:	f040 8098 	bne.w	800849e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	8912      	ldrh	r2, [r2, #8]
 8008388:	4293      	cmp	r3, r2
 800838a:	f0c0 8088 	bcc.w	800849e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	61da      	str	r2, [r3, #28]
 8008394:	2304      	movs	r3, #4
 8008396:	e08f      	b.n	80084b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	0a5b      	lsrs	r3, r3, #9
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	8952      	ldrh	r2, [r2, #10]
 80083a0:	3a01      	subs	r2, #1
 80083a2:	4013      	ands	r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d17a      	bne.n	800849e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7ff fc88 	bl	8007cc6 <get_fat>
 80083b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d801      	bhi.n	80083c2 <dir_next+0x8c>
 80083be:	2302      	movs	r3, #2
 80083c0:	e07a      	b.n	80084b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d101      	bne.n	80083ce <dir_next+0x98>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e074      	b.n	80084b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d358      	bcc.n	800848a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	61da      	str	r2, [r3, #28]
 80083e4:	2304      	movs	r3, #4
 80083e6:	e067      	b.n	80084b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f7ff fe59 	bl	80080a8 <create_chain>
 80083f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <dir_next+0xcc>
 80083fe:	2307      	movs	r3, #7
 8008400:	e05a      	b.n	80084b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <dir_next+0xd6>
 8008408:	2302      	movs	r3, #2
 800840a:	e055      	b.n	80084b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008412:	d101      	bne.n	8008418 <dir_next+0xe2>
 8008414:	2301      	movs	r3, #1
 8008416:	e04f      	b.n	80084b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fb55 	bl	8007ac8 <sync_window>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <dir_next+0xf2>
 8008424:	2301      	movs	r3, #1
 8008426:	e047      	b.n	80084b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3334      	adds	r3, #52	; 0x34
 800842c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff f97f 	bl	8007736 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008438:	2300      	movs	r3, #0
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	6979      	ldr	r1, [r7, #20]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff fc22 	bl	8007c88 <clust2sect>
 8008444:	4602      	mov	r2, r0
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	631a      	str	r2, [r3, #48]	; 0x30
 800844a:	e012      	b.n	8008472 <dir_next+0x13c>
						fs->wflag = 1;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff fb38 	bl	8007ac8 <sync_window>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <dir_next+0x12c>
 800845e:	2301      	movs	r3, #1
 8008460:	e02a      	b.n	80084b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	3301      	adds	r3, #1
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	631a      	str	r2, [r3, #48]	; 0x30
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	895b      	ldrh	r3, [r3, #10]
 8008476:	461a      	mov	r2, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	4293      	cmp	r3, r2
 800847c:	d3e6      	bcc.n	800844c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad2      	subs	r2, r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008490:	6979      	ldr	r1, [r7, #20]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f7ff fbf8 	bl	8007c88 <clust2sect>
 8008498:	4602      	mov	r2, r0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	441a      	add	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80084d0:	2100      	movs	r1, #0
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff feb4 	bl	8008240 <dir_sdi>
 80084d8:	4603      	mov	r3, r0
 80084da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12b      	bne.n	800853a <dir_alloc+0x7a>
		n = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	4619      	mov	r1, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fb2f 	bl	8007b50 <move_window>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d11d      	bne.n	8008538 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2be5      	cmp	r3, #229	; 0xe5
 8008504:	d004      	beq.n	8008510 <dir_alloc+0x50>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d107      	bne.n	8008520 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d102      	bne.n	8008524 <dir_alloc+0x64>
 800851e:	e00c      	b.n	800853a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008520:	2300      	movs	r3, #0
 8008522:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008524:	2101      	movs	r1, #1
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff ff05 	bl	8008336 <dir_next>
 800852c:	4603      	mov	r3, r0
 800852e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0d7      	beq.n	80084e6 <dir_alloc+0x26>
 8008536:	e000      	b.n	800853a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008538:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	2b04      	cmp	r3, #4
 800853e:	d101      	bne.n	8008544 <dir_alloc+0x84>
 8008540:	2307      	movs	r3, #7
 8008542:	75fb      	strb	r3, [r7, #23]
	return res;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	331a      	adds	r3, #26
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff f847 	bl	80075f0 <ld_word>
 8008562:	4603      	mov	r3, r0
 8008564:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d109      	bne.n	8008582 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	3314      	adds	r3, #20
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff f83c 	bl	80075f0 <ld_word>
 8008578:	4603      	mov	r3, r0
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008582:	68fb      	ldr	r3, [r7, #12]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	331a      	adds	r3, #26
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	b292      	uxth	r2, r2
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff f85f 	bl	8007666 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d109      	bne.n	80085c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f103 0214 	add.w	r2, r3, #20
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f7ff f851 	bl	8007666 <st_word>
	}
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	331a      	adds	r3, #26
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff f808 	bl	80075f0 <ld_word>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <cmp_lfn+0x1e>
 80085e6:	2300      	movs	r3, #0
 80085e8:	e059      	b.n	800869e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085f2:	1e5a      	subs	r2, r3, #1
 80085f4:	4613      	mov	r3, r2
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008600:	2301      	movs	r3, #1
 8008602:	81fb      	strh	r3, [r7, #14]
 8008604:	2300      	movs	r3, #0
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	e033      	b.n	8008672 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800860a:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <cmp_lfn+0xdc>)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	4413      	add	r3, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	4413      	add	r3, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe ffe9 	bl	80075f0 <ld_word>
 800861e:	4603      	mov	r3, r0
 8008620:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008622:	89fb      	ldrh	r3, [r7, #14]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2bfe      	cmp	r3, #254	; 0xfe
 800862c:	d812      	bhi.n	8008654 <cmp_lfn+0x88>
 800862e:	89bb      	ldrh	r3, [r7, #12]
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fea5 	bl	800b380 <ff_wtoupper>
 8008636:	4603      	mov	r3, r0
 8008638:	461c      	mov	r4, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	617a      	str	r2, [r7, #20]
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	4618      	mov	r0, r3
 800864a:	f002 fe99 	bl	800b380 <ff_wtoupper>
 800864e:	4603      	mov	r3, r0
 8008650:	429c      	cmp	r4, r3
 8008652:	d001      	beq.n	8008658 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008654:	2300      	movs	r3, #0
 8008656:	e022      	b.n	800869e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008658:	89bb      	ldrh	r3, [r7, #12]
 800865a:	81fb      	strh	r3, [r7, #14]
 800865c:	e006      	b.n	800866c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800865e:	89bb      	ldrh	r3, [r7, #12]
 8008660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008664:	4293      	cmp	r3, r2
 8008666:	d001      	beq.n	800866c <cmp_lfn+0xa0>
 8008668:	2300      	movs	r3, #0
 800866a:	e018      	b.n	800869e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	3301      	adds	r3, #1
 8008670:	613b      	str	r3, [r7, #16]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b0c      	cmp	r3, #12
 8008676:	d9c8      	bls.n	800860a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <cmp_lfn+0xd0>
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d008      	beq.n	800869c <cmp_lfn+0xd0>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <cmp_lfn+0xd0>
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800869c:	2301      	movs	r3, #1
}
 800869e:	4618      	mov	r0, r3
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd90      	pop	{r4, r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08022094 	.word	0x08022094

080086ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	331a      	adds	r3, #26
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe ff98 	bl	80075f0 <ld_word>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <pick_lfn+0x1e>
 80086c6:	2300      	movs	r3, #0
 80086c8:	e04d      	b.n	8008766 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d2:	1e5a      	subs	r2, r3, #1
 80086d4:	4613      	mov	r3, r2
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80086e0:	2301      	movs	r3, #1
 80086e2:	81fb      	strh	r3, [r7, #14]
 80086e4:	2300      	movs	r3, #0
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	e028      	b.n	800873c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80086ea:	4a21      	ldr	r2, [pc, #132]	; (8008770 <pick_lfn+0xc4>)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	4413      	add	r3, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ff79 	bl	80075f0 <ld_word>
 80086fe:	4603      	mov	r3, r0
 8008700:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008702:	89fb      	ldrh	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00f      	beq.n	8008728 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2bfe      	cmp	r3, #254	; 0xfe
 800870c:	d901      	bls.n	8008712 <pick_lfn+0x66>
 800870e:	2300      	movs	r3, #0
 8008710:	e029      	b.n	8008766 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008712:	89bb      	ldrh	r3, [r7, #12]
 8008714:	81fb      	strh	r3, [r7, #14]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	617a      	str	r2, [r7, #20]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	89fa      	ldrh	r2, [r7, #14]
 8008724:	801a      	strh	r2, [r3, #0]
 8008726:	e006      	b.n	8008736 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008728:	89bb      	ldrh	r3, [r7, #12]
 800872a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800872e:	4293      	cmp	r3, r2
 8008730:	d001      	beq.n	8008736 <pick_lfn+0x8a>
 8008732:	2300      	movs	r3, #0
 8008734:	e017      	b.n	8008766 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b0c      	cmp	r3, #12
 8008740:	d9d3      	bls.n	80086ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2bfe      	cmp	r3, #254	; 0xfe
 8008752:	d901      	bls.n	8008758 <pick_lfn+0xac>
 8008754:	2300      	movs	r3, #0
 8008756:	e006      	b.n	8008766 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	2200      	movs	r2, #0
 8008762:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008764:	2301      	movs	r3, #1
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	08022094 	.word	0x08022094

08008774 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4611      	mov	r1, r2
 8008780:	461a      	mov	r2, r3
 8008782:	460b      	mov	r3, r1
 8008784:	71fb      	strb	r3, [r7, #7]
 8008786:	4613      	mov	r3, r2
 8008788:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	330d      	adds	r3, #13
 800878e:	79ba      	ldrb	r2, [r7, #6]
 8008790:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	330b      	adds	r3, #11
 8008796:	220f      	movs	r2, #15
 8008798:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	330c      	adds	r3, #12
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	331a      	adds	r3, #26
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe ff5c 	bl	8007666 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	4613      	mov	r3, r2
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	82fb      	strh	r3, [r7, #22]
 80087c2:	2300      	movs	r3, #0
 80087c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80087c6:	8afb      	ldrh	r3, [r7, #22]
 80087c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <put_lfn+0x6c>
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	61fa      	str	r2, [r7, #28]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80087e0:	4a17      	ldr	r2, [pc, #92]	; (8008840 <put_lfn+0xcc>)
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	4413      	add	r3, r2
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	4413      	add	r3, r2
 80087ee:	8afa      	ldrh	r2, [r7, #22]
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe ff37 	bl	8007666 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80087f8:	8afb      	ldrh	r3, [r7, #22]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <put_lfn+0x90>
 80087fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008802:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	3301      	adds	r3, #1
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b0c      	cmp	r3, #12
 800880e:	d9da      	bls.n	80087c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008810:	8afb      	ldrh	r3, [r7, #22]
 8008812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008816:	4293      	cmp	r3, r2
 8008818:	d006      	beq.n	8008828 <put_lfn+0xb4>
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <put_lfn+0xbc>
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	79fa      	ldrb	r2, [r7, #7]
 8008834:	701a      	strb	r2, [r3, #0]
}
 8008836:	bf00      	nop
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	08022094 	.word	0x08022094

08008844 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08c      	sub	sp, #48	; 0x30
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008852:	220b      	movs	r2, #11
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7fe ff4c 	bl	80076f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b05      	cmp	r3, #5
 8008860:	d92b      	bls.n	80088ba <gen_numname+0x76>
		sr = seq;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008866:	e022      	b.n	80088ae <gen_numname+0x6a>
			wc = *lfn++;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	1c9a      	adds	r2, r3, #2
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008872:	2300      	movs	r3, #0
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
 8008876:	e017      	b.n	80088a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	005a      	lsls	r2, r3, #1
 800887c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008888:	085b      	lsrs	r3, r3, #1
 800888a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <gen_numname+0x5e>
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800889c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80088a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	3301      	adds	r3, #1
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d9e4      	bls.n	8008878 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1d8      	bne.n	8008868 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80088ba:	2307      	movs	r3, #7
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	3330      	adds	r3, #48	; 0x30
 80088ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80088ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088d2:	2b39      	cmp	r3, #57	; 0x39
 80088d4:	d904      	bls.n	80088e0 <gen_numname+0x9c>
 80088d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088da:	3307      	adds	r3, #7
 80088dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	1e5a      	subs	r2, r3, #1
 80088e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80088e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80088ea:	4413      	add	r3, r2
 80088ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80088f0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1de      	bne.n	80088be <gen_numname+0x7a>
	ns[i] = '~';
 8008900:	f107 0214 	add.w	r2, r7, #20
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	4413      	add	r3, r2
 8008908:	227e      	movs	r2, #126	; 0x7e
 800890a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800890c:	2300      	movs	r3, #0
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
 8008910:	e002      	b.n	8008918 <gen_numname+0xd4>
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	3301      	adds	r3, #1
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	429a      	cmp	r2, r3
 800891e:	d205      	bcs.n	800892c <gen_numname+0xe8>
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	4413      	add	r3, r2
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b20      	cmp	r3, #32
 800892a:	d1f2      	bne.n	8008912 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	2b07      	cmp	r3, #7
 8008930:	d808      	bhi.n	8008944 <gen_numname+0x100>
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	62ba      	str	r2, [r7, #40]	; 0x28
 8008938:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800893c:	4413      	add	r3, r2
 800893e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008942:	e000      	b.n	8008946 <gen_numname+0x102>
 8008944:	2120      	movs	r1, #32
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	627a      	str	r2, [r7, #36]	; 0x24
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	460a      	mov	r2, r1
 8008952:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	2b07      	cmp	r3, #7
 8008958:	d9e8      	bls.n	800892c <gen_numname+0xe8>
}
 800895a:	bf00      	nop
 800895c:	3730      	adds	r7, #48	; 0x30
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008962:	b480      	push	{r7}
 8008964:	b085      	sub	sp, #20
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800896e:	230b      	movs	r3, #11
 8008970:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	b2da      	uxtb	r2, r3
 8008976:	0852      	lsrs	r2, r2, #1
 8008978:	01db      	lsls	r3, r3, #7
 800897a:	4313      	orrs	r3, r2
 800897c:	b2da      	uxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	1c59      	adds	r1, r3, #1
 8008982:	6079      	str	r1, [r7, #4]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4413      	add	r3, r2
 8008988:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3b01      	subs	r3, #1
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1ed      	bne.n	8008972 <sum_sfn+0x10>
	return sum;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80089ae:	2304      	movs	r3, #4
 80089b0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80089b8:	23ff      	movs	r3, #255	; 0xff
 80089ba:	757b      	strb	r3, [r7, #21]
 80089bc:	23ff      	movs	r3, #255	; 0xff
 80089be:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80089c0:	e081      	b.n	8008ac6 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6938      	ldr	r0, [r7, #16]
 80089ca:	f7ff f8c1 	bl	8007b50 <move_window>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d17c      	bne.n	8008ad2 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80089e0:	7dbb      	ldrb	r3, [r7, #22]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80089e6:	2304      	movs	r3, #4
 80089e8:	75fb      	strb	r3, [r7, #23]
 80089ea:	e077      	b.n	8008adc <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	330b      	adds	r3, #11
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089f8:	73fb      	strb	r3, [r7, #15]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7bfa      	ldrb	r2, [r7, #15]
 80089fe:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008a00:	7dbb      	ldrb	r3, [r7, #22]
 8008a02:	2be5      	cmp	r3, #229	; 0xe5
 8008a04:	d00e      	beq.n	8008a24 <dir_read+0x80>
 8008a06:	7dbb      	ldrb	r3, [r7, #22]
 8008a08:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0a:	d00b      	beq.n	8008a24 <dir_read+0x80>
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	f023 0320 	bic.w	r3, r3, #32
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	bf0c      	ite	eq
 8008a16:	2301      	moveq	r3, #1
 8008a18:	2300      	movne	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d002      	beq.n	8008a2a <dir_read+0x86>
				ord = 0xFF;
 8008a24:	23ff      	movs	r3, #255	; 0xff
 8008a26:	757b      	strb	r3, [r7, #21]
 8008a28:	e044      	b.n	8008ab4 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	2b0f      	cmp	r3, #15
 8008a2e:	d12f      	bne.n	8008a90 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008a30:	7dbb      	ldrb	r3, [r7, #22]
 8008a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00d      	beq.n	8008a56 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	7b5b      	ldrb	r3, [r3, #13]
 8008a40:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8008a42:	7dbb      	ldrb	r3, [r7, #22]
 8008a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a48:	75bb      	strb	r3, [r7, #22]
 8008a4a:	7dbb      	ldrb	r3, [r7, #22]
 8008a4c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	695a      	ldr	r2, [r3, #20]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008a56:	7dba      	ldrb	r2, [r7, #22]
 8008a58:	7d7b      	ldrb	r3, [r7, #21]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d115      	bne.n	8008a8a <dir_read+0xe6>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	330d      	adds	r3, #13
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	7d3a      	ldrb	r2, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d10e      	bne.n	8008a8a <dir_read+0xe6>
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7ff fe18 	bl	80086ac <pick_lfn>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <dir_read+0xe6>
 8008a82:	7d7b      	ldrb	r3, [r7, #21]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	e000      	b.n	8008a8c <dir_read+0xe8>
 8008a8a:	23ff      	movs	r3, #255	; 0xff
 8008a8c:	757b      	strb	r3, [r7, #21]
 8008a8e:	e011      	b.n	8008ab4 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008a90:	7d7b      	ldrb	r3, [r7, #21]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <dir_read+0x106>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff ff61 	bl	8008962 <sum_sfn>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	7d3b      	ldrb	r3, [r7, #20]
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d015      	beq.n	8008ad6 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008ab2:	e010      	b.n	8008ad6 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fc3d 	bl	8008336 <dir_next>
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <dir_read+0x136>
	while (dp->sect) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f47f af79 	bne.w	80089c2 <dir_read+0x1e>
 8008ad0:	e004      	b.n	8008adc <dir_read+0x138>
		if (res != FR_OK) break;
 8008ad2:	bf00      	nop
 8008ad4:	e002      	b.n	8008adc <dir_read+0x138>
					break;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <dir_read+0x138>
		if (res != FR_OK) break;
 8008ada:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <dir_read+0x144>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	61da      	str	r2, [r3, #28]
	return res;
 8008ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff fb9c 	bl	8008240 <dir_sdi>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <dir_find+0x24>
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	e0a9      	b.n	8008c6a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b16:	23ff      	movs	r3, #255	; 0xff
 8008b18:	753b      	strb	r3, [r7, #20]
 8008b1a:	7d3b      	ldrb	r3, [r7, #20]
 8008b1c:	757b      	strb	r3, [r7, #21]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6938      	ldr	r0, [r7, #16]
 8008b2e:	f7ff f80f 	bl	8007b50 <move_window>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 8090 	bne.w	8008c5e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008b46:	7dbb      	ldrb	r3, [r7, #22]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <dir_find+0x60>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e08a      	b.n	8008c68 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	330b      	adds	r3, #11
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b5e:	73fb      	strb	r3, [r7, #15]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7bfa      	ldrb	r2, [r7, #15]
 8008b64:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008b66:	7dbb      	ldrb	r3, [r7, #22]
 8008b68:	2be5      	cmp	r3, #229	; 0xe5
 8008b6a:	d007      	beq.n	8008b7c <dir_find+0x8a>
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d009      	beq.n	8008b8a <dir_find+0x98>
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b0f      	cmp	r3, #15
 8008b7a:	d006      	beq.n	8008b8a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b7c:	23ff      	movs	r3, #255	; 0xff
 8008b7e:	757b      	strb	r3, [r7, #21]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	631a      	str	r2, [r3, #48]	; 0x30
 8008b88:	e05e      	b.n	8008c48 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2b0f      	cmp	r3, #15
 8008b8e:	d136      	bne.n	8008bfe <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d154      	bne.n	8008c48 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008b9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	7b5b      	ldrb	r3, [r3, #13]
 8008bae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008bb0:	7dbb      	ldrb	r3, [r7, #22]
 8008bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb6:	75bb      	strb	r3, [r7, #22]
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
 8008bba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	695a      	ldr	r2, [r3, #20]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008bc4:	7dba      	ldrb	r2, [r7, #22]
 8008bc6:	7d7b      	ldrb	r3, [r7, #21]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d115      	bne.n	8008bf8 <dir_find+0x106>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	330d      	adds	r3, #13
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	7d3a      	ldrb	r2, [r7, #20]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d10e      	bne.n	8008bf8 <dir_find+0x106>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	4619      	mov	r1, r3
 8008be4:	4610      	mov	r0, r2
 8008be6:	f7ff fcf1 	bl	80085cc <cmp_lfn>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <dir_find+0x106>
 8008bf0:	7d7b      	ldrb	r3, [r7, #21]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	e000      	b.n	8008bfa <dir_find+0x108>
 8008bf8:	23ff      	movs	r3, #255	; 0xff
 8008bfa:	757b      	strb	r3, [r7, #21]
 8008bfc:	e024      	b.n	8008c48 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008bfe:	7d7b      	ldrb	r3, [r7, #21]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <dir_find+0x126>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff feaa 	bl	8008962 <sum_sfn>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	461a      	mov	r2, r3
 8008c12:	7d3b      	ldrb	r3, [r7, #20]
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d024      	beq.n	8008c62 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <dir_find+0x14a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a18      	ldr	r0, [r3, #32]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3324      	adds	r3, #36	; 0x24
 8008c2e:	220b      	movs	r2, #11
 8008c30:	4619      	mov	r1, r3
 8008c32:	f7fe fd9a 	bl	800776a <mem_cmp>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d014      	beq.n	8008c66 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008c3c:	23ff      	movs	r3, #255	; 0xff
 8008c3e:	757b      	strb	r3, [r7, #21]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f04f 32ff 	mov.w	r2, #4294967295
 8008c46:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fb73 	bl	8008336 <dir_next>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f43f af65 	beq.w	8008b26 <dir_find+0x34>
 8008c5c:	e004      	b.n	8008c68 <dir_find+0x176>
		if (res != FR_OK) break;
 8008c5e:	bf00      	nop
 8008c60:	e002      	b.n	8008c68 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008c62:	bf00      	nop
 8008c64:	e000      	b.n	8008c68 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008c66:	bf00      	nop

	return res;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08c      	sub	sp, #48	; 0x30
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c88:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <dir_register+0x20>
 8008c90:	2306      	movs	r3, #6
 8008c92:	e0e0      	b.n	8008e56 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008c94:	2300      	movs	r3, #0
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
 8008c98:	e002      	b.n	8008ca0 <dir_register+0x2c>
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	4413      	add	r3, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f4      	bne.n	8008c9a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008cb6:	f107 030c 	add.w	r3, r7, #12
 8008cba:	220c      	movs	r2, #12
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fd19 	bl	80076f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d032      	beq.n	8008d32 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2240      	movs	r2, #64	; 0x40
 8008cd0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cd8:	e016      	b.n	8008d08 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	f107 010c 	add.w	r1, r7, #12
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	f7ff fdab 	bl	8008844 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff feff 	bl	8008af2 <dir_find>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	3301      	adds	r3, #1
 8008d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	2b63      	cmp	r3, #99	; 0x63
 8008d0c:	d9e5      	bls.n	8008cda <dir_register+0x66>
 8008d0e:	e000      	b.n	8008d12 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008d10:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	2b64      	cmp	r3, #100	; 0x64
 8008d16:	d101      	bne.n	8008d1c <dir_register+0xa8>
 8008d18:	2307      	movs	r3, #7
 8008d1a:	e09c      	b.n	8008e56 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d002      	beq.n	8008d2a <dir_register+0xb6>
 8008d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d28:	e095      	b.n	8008e56 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008d2a:	7dfa      	ldrb	r2, [r7, #23]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <dir_register+0xd8>
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	330c      	adds	r3, #12
 8008d40:	4a47      	ldr	r2, [pc, #284]	; (8008e60 <dir_register+0x1ec>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	089b      	lsrs	r3, r3, #2
 8008d48:	3301      	adds	r3, #1
 8008d4a:	e000      	b.n	8008d4e <dir_register+0xda>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008d50:	6a39      	ldr	r1, [r7, #32]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fbb4 	bl	80084c0 <dir_alloc>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d148      	bne.n	8008df8 <dir_register+0x184>
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	623b      	str	r3, [r7, #32]
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d042      	beq.n	8008df8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695a      	ldr	r2, [r3, #20]
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	015b      	lsls	r3, r3, #5
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fa5e 	bl	8008240 <dir_sdi>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d132      	bne.n	8008df8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3324      	adds	r3, #36	; 0x24
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff fde3 	bl	8008962 <sum_sfn>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	4619      	mov	r1, r3
 8008da6:	69f8      	ldr	r0, [r7, #28]
 8008da8:	f7fe fed2 	bl	8007b50 <move_window>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d11d      	bne.n	8008df6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	68d8      	ldr	r0, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a19      	ldr	r1, [r3, #32]
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	7efb      	ldrb	r3, [r7, #27]
 8008dc8:	f7ff fcd4 	bl	8008774 <put_lfn>
				fs->wflag = 1;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff faae 	bl	8008336 <dir_next>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d107      	bne.n	8008df8 <dir_register+0x184>
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	623b      	str	r3, [r7, #32]
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1d5      	bne.n	8008da0 <dir_register+0x12c>
 8008df4:	e000      	b.n	8008df8 <dir_register+0x184>
				if (res != FR_OK) break;
 8008df6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d128      	bne.n	8008e52 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	4619      	mov	r1, r3
 8008e06:	69f8      	ldr	r0, [r7, #28]
 8008e08:	f7fe fea2 	bl	8007b50 <move_window>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d11b      	bne.n	8008e52 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fc87 	bl	8007736 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a18      	ldr	r0, [r3, #32]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3324      	adds	r3, #36	; 0x24
 8008e30:	220b      	movs	r2, #11
 8008e32:	4619      	mov	r1, r3
 8008e34:	f7fe fc5e 	bl	80076f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	330c      	adds	r3, #12
 8008e44:	f002 0218 	and.w	r2, r2, #24
 8008e48:	b2d2      	uxtb	r2, r2
 8008e4a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	; 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	4ec4ec4f 	.word	0x4ec4ec4f

08008e64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80c9 	beq.w	8009016 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d032      	beq.n	8008ef4 <get_fileinfo+0x90>
			i = j = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008e96:	e01b      	b.n	8008ed0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008e98:	89fb      	ldrh	r3, [r7, #14]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f002 fa33 	bl	800b308 <ff_convert>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008ea6:	89fb      	ldrh	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <get_fileinfo+0x4e>
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e01a      	b.n	8008ee8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	2bfe      	cmp	r3, #254	; 0xfe
 8008eb6:	d902      	bls.n	8008ebe <get_fileinfo+0x5a>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	e014      	b.n	8008ee8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	61fa      	str	r2, [r7, #28]
 8008ec4:	89fa      	ldrh	r2, [r7, #14]
 8008ec6:	b2d1      	uxtb	r1, r2
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	4413      	add	r3, r2
 8008ecc:	460a      	mov	r2, r1
 8008ece:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	61b9      	str	r1, [r7, #24]
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	4413      	add	r3, r2
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	81fb      	strh	r3, [r7, #14]
 8008ee2:	89fb      	ldrh	r3, [r7, #14]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1d7      	bne.n	8008e98 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	3316      	adds	r3, #22
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61bb      	str	r3, [r7, #24]
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	4413      	add	r3, r2
 8008f02:	3316      	adds	r3, #22
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008f08:	e04c      	b.n	8008fa4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1a      	ldr	r2, [r3, #32]
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	1c59      	adds	r1, r3, #1
 8008f12:	61f9      	str	r1, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d100      	bne.n	8008f22 <get_fileinfo+0xbe>
 8008f20:	e040      	b.n	8008fa4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	2b05      	cmp	r3, #5
 8008f26:	d101      	bne.n	8008f2c <get_fileinfo+0xc8>
 8008f28:	23e5      	movs	r3, #229	; 0xe5
 8008f2a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	2b09      	cmp	r3, #9
 8008f30:	d10f      	bne.n	8008f52 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8008f32:	89bb      	ldrh	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <get_fileinfo+0xe0>
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3316      	adds	r3, #22
 8008f40:	222e      	movs	r2, #46	; 0x2e
 8008f42:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	61ba      	str	r2, [r7, #24]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	222e      	movs	r2, #46	; 0x2e
 8008f50:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	4413      	add	r3, r2
 8008f58:	3309      	adds	r3, #9
 8008f5a:	7dfa      	ldrb	r2, [r7, #23]
 8008f5c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008f5e:	89bb      	ldrh	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d11c      	bne.n	8008f9e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d913      	bls.n	8008f92 <get_fileinfo+0x12e>
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2b5a      	cmp	r3, #90	; 0x5a
 8008f6e:	d810      	bhi.n	8008f92 <get_fileinfo+0x12e>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	330c      	adds	r3, #12
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d901      	bls.n	8008f84 <get_fileinfo+0x120>
 8008f80:	2310      	movs	r3, #16
 8008f82:	e000      	b.n	8008f86 <get_fileinfo+0x122>
 8008f84:	2308      	movs	r3, #8
 8008f86:	4013      	ands	r3, r2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	3320      	adds	r3, #32
 8008f90:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	4413      	add	r3, r2
 8008f98:	3316      	adds	r3, #22
 8008f9a:	7dfa      	ldrb	r2, [r7, #23]
 8008f9c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b0a      	cmp	r3, #10
 8008fa8:	d9af      	bls.n	8008f0a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008faa:	89bb      	ldrh	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10d      	bne.n	8008fcc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3316      	adds	r3, #22
 8008fb8:	2200      	movs	r2, #0
 8008fba:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <get_fileinfo+0x168>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3309      	adds	r3, #9
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	7ada      	ldrb	r2, [r3, #11]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	331c      	adds	r3, #28
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fb19 	bl	8007620 <ld_dword>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	3316      	adds	r3, #22
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fb10 	bl	8007620 <ld_dword>
 8009000:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	b29a      	uxth	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	80da      	strh	r2, [r3, #6]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	0c1b      	lsrs	r3, r3, #16
 800900e:	b29a      	uxth	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	809a      	strh	r2, [r3, #4]
 8009014:	e000      	b.n	8009018 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009016:	bf00      	nop
}
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	61ba      	str	r2, [r7, #24]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	4413      	add	r3, r2
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800904e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009050:	2b1f      	cmp	r3, #31
 8009052:	d940      	bls.n	80090d6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009056:	2b2f      	cmp	r3, #47	; 0x2f
 8009058:	d006      	beq.n	8009068 <create_name+0x48>
 800905a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800905c:	2b5c      	cmp	r3, #92	; 0x5c
 800905e:	d110      	bne.n	8009082 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009060:	e002      	b.n	8009068 <create_name+0x48>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	3301      	adds	r3, #1
 8009066:	61bb      	str	r3, [r7, #24]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	4413      	add	r3, r2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b2f      	cmp	r3, #47	; 0x2f
 8009072:	d0f6      	beq.n	8009062 <create_name+0x42>
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	4413      	add	r3, r2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b5c      	cmp	r3, #92	; 0x5c
 800907e:	d0f0      	beq.n	8009062 <create_name+0x42>
			break;
 8009080:	e02a      	b.n	80090d8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2bfe      	cmp	r3, #254	; 0xfe
 8009086:	d901      	bls.n	800908c <create_name+0x6c>
 8009088:	2306      	movs	r3, #6
 800908a:	e177      	b.n	800937c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800908c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800908e:	b2db      	uxtb	r3, r3
 8009090:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009094:	2101      	movs	r1, #1
 8009096:	4618      	mov	r0, r3
 8009098:	f002 f936 	bl	800b308 <ff_convert>
 800909c:	4603      	mov	r3, r0
 800909e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80090a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <create_name+0x8a>
 80090a6:	2306      	movs	r3, #6
 80090a8:	e168      	b.n	800937c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80090aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090ac:	2b7f      	cmp	r3, #127	; 0x7f
 80090ae:	d809      	bhi.n	80090c4 <create_name+0xa4>
 80090b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090b2:	4619      	mov	r1, r3
 80090b4:	48b3      	ldr	r0, [pc, #716]	; (8009384 <create_name+0x364>)
 80090b6:	f7fe fb7f 	bl	80077b8 <chk_chr>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <create_name+0xa4>
 80090c0:	2306      	movs	r3, #6
 80090c2:	e15b      	b.n	800937c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	617a      	str	r2, [r7, #20]
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80090d4:	e7b4      	b.n	8009040 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80090d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	441a      	add	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80090e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090e4:	2b1f      	cmp	r3, #31
 80090e6:	d801      	bhi.n	80090ec <create_name+0xcc>
 80090e8:	2304      	movs	r3, #4
 80090ea:	e000      	b.n	80090ee <create_name+0xce>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80090f2:	e011      	b.n	8009118 <create_name+0xf8>
		w = lfn[di - 1];
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090fa:	3b01      	subs	r3, #1
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4413      	add	r3, r2
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009108:	2b20      	cmp	r3, #32
 800910a:	d002      	beq.n	8009112 <create_name+0xf2>
 800910c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800910e:	2b2e      	cmp	r3, #46	; 0x2e
 8009110:	d106      	bne.n	8009120 <create_name+0x100>
		di--;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	3b01      	subs	r3, #1
 8009116:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1ea      	bne.n	80090f4 <create_name+0xd4>
 800911e:	e000      	b.n	8009122 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009120:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	2200      	movs	r2, #0
 800912c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <create_name+0x118>
 8009134:	2306      	movs	r3, #6
 8009136:	e121      	b.n	800937c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3324      	adds	r3, #36	; 0x24
 800913c:	220b      	movs	r2, #11
 800913e:	2120      	movs	r1, #32
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe faf8 	bl	8007736 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009146:	2300      	movs	r3, #0
 8009148:	61bb      	str	r3, [r7, #24]
 800914a:	e002      	b.n	8009152 <create_name+0x132>
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	3301      	adds	r3, #1
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4413      	add	r3, r2
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	2b20      	cmp	r3, #32
 800915e:	d0f5      	beq.n	800914c <create_name+0x12c>
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	2b2e      	cmp	r3, #46	; 0x2e
 800916c:	d0ee      	beq.n	800914c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <create_name+0x168>
 8009174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009178:	f043 0303 	orr.w	r3, r3, #3
 800917c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009180:	e002      	b.n	8009188 <create_name+0x168>
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	3b01      	subs	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d009      	beq.n	80091a2 <create_name+0x182>
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009194:	3b01      	subs	r3, #1
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	2b2e      	cmp	r3, #46	; 0x2e
 80091a0:	d1ef      	bne.n	8009182 <create_name+0x162>

	i = b = 0; ni = 8;
 80091a2:	2300      	movs	r3, #0
 80091a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091a8:	2300      	movs	r3, #0
 80091aa:	623b      	str	r3, [r7, #32]
 80091ac:	2308      	movs	r3, #8
 80091ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	61ba      	str	r2, [r7, #24]
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80091c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8090 	beq.w	80092e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80091c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d006      	beq.n	80091dc <create_name+0x1bc>
 80091ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d0:	2b2e      	cmp	r3, #46	; 0x2e
 80091d2:	d10a      	bne.n	80091ea <create_name+0x1ca>
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d006      	beq.n	80091ea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80091dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e0:	f043 0303 	orr.w	r3, r3, #3
 80091e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091e8:	e07d      	b.n	80092e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80091ea:	6a3a      	ldr	r2, [r7, #32]
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d203      	bcs.n	80091fa <create_name+0x1da>
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d123      	bne.n	8009242 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	2b0b      	cmp	r3, #11
 80091fe:	d106      	bne.n	800920e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009204:	f043 0303 	orr.w	r3, r3, #3
 8009208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800920c:	e06f      	b.n	80092ee <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	429a      	cmp	r2, r3
 8009214:	d005      	beq.n	8009222 <create_name+0x202>
 8009216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800921a:	f043 0303 	orr.w	r3, r3, #3
 800921e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	429a      	cmp	r2, r3
 8009228:	d860      	bhi.n	80092ec <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	2308      	movs	r3, #8
 8009230:	623b      	str	r3, [r7, #32]
 8009232:	230b      	movs	r3, #11
 8009234:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009240:	e051      	b.n	80092e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009244:	2b7f      	cmp	r3, #127	; 0x7f
 8009246:	d914      	bls.n	8009272 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f002 f85b 	bl	800b308 <ff_convert>
 8009252:	4603      	mov	r3, r0
 8009254:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <create_name+0x246>
 800925c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800925e:	3b80      	subs	r3, #128	; 0x80
 8009260:	4a49      	ldr	r2, [pc, #292]	; (8009388 <create_name+0x368>)
 8009262:	5cd3      	ldrb	r3, [r2, r3]
 8009264:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800926a:	f043 0302 	orr.w	r3, r3, #2
 800926e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009274:	2b00      	cmp	r3, #0
 8009276:	d007      	beq.n	8009288 <create_name+0x268>
 8009278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800927a:	4619      	mov	r1, r3
 800927c:	4843      	ldr	r0, [pc, #268]	; (800938c <create_name+0x36c>)
 800927e:	f7fe fa9b 	bl	80077b8 <chk_chr>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d008      	beq.n	800929a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009288:	235f      	movs	r3, #95	; 0x5f
 800928a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800928c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009290:	f043 0303 	orr.w	r3, r3, #3
 8009294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009298:	e01b      	b.n	80092d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800929a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	d909      	bls.n	80092b4 <create_name+0x294>
 80092a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a2:	2b5a      	cmp	r3, #90	; 0x5a
 80092a4:	d806      	bhi.n	80092b4 <create_name+0x294>
					b |= 2;
 80092a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092aa:	f043 0302 	orr.w	r3, r3, #2
 80092ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80092b2:	e00e      	b.n	80092d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80092b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092b6:	2b60      	cmp	r3, #96	; 0x60
 80092b8:	d90b      	bls.n	80092d2 <create_name+0x2b2>
 80092ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092bc:	2b7a      	cmp	r3, #122	; 0x7a
 80092be:	d808      	bhi.n	80092d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80092c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092c4:	f043 0301 	orr.w	r3, r3, #1
 80092c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80092cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ce:	3b20      	subs	r3, #32
 80092d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	623a      	str	r2, [r7, #32]
 80092d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092da:	b2d1      	uxtb	r1, r2
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	460a      	mov	r2, r1
 80092e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80092e6:	e763      	b.n	80091b0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80092e8:	bf00      	nop
 80092ea:	e000      	b.n	80092ee <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80092ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092f4:	2be5      	cmp	r3, #229	; 0xe5
 80092f6:	d103      	bne.n	8009300 <create_name+0x2e0>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2205      	movs	r2, #5
 80092fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2b08      	cmp	r3, #8
 8009304:	d104      	bne.n	8009310 <create_name+0x2f0>
 8009306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009314:	f003 030c 	and.w	r3, r3, #12
 8009318:	2b0c      	cmp	r3, #12
 800931a:	d005      	beq.n	8009328 <create_name+0x308>
 800931c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	2b03      	cmp	r3, #3
 8009326:	d105      	bne.n	8009334 <create_name+0x314>
 8009328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800932c:	f043 0302 	orr.w	r3, r3, #2
 8009330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d117      	bne.n	8009370 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	2b01      	cmp	r3, #1
 800934a:	d105      	bne.n	8009358 <create_name+0x338>
 800934c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009350:	f043 0310 	orr.w	r3, r3, #16
 8009354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009358:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800935c:	f003 030c 	and.w	r3, r3, #12
 8009360:	2b04      	cmp	r3, #4
 8009362:	d105      	bne.n	8009370 <create_name+0x350>
 8009364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009368:	f043 0308 	orr.w	r3, r3, #8
 800936c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009376:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800937a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800937c:	4618      	mov	r0, r3
 800937e:	3728      	adds	r7, #40	; 0x28
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	08015ea0 	.word	0x08015ea0
 8009388:	08022014 	.word	0x08022014
 800938c:	08015eac 	.word	0x08015eac

08009390 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093a4:	e002      	b.n	80093ac <follow_path+0x1c>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	603b      	str	r3, [r7, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b2f      	cmp	r3, #47	; 0x2f
 80093b2:	d0f8      	beq.n	80093a6 <follow_path+0x16>
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b5c      	cmp	r3, #92	; 0x5c
 80093ba:	d0f4      	beq.n	80093a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2200      	movs	r2, #0
 80093c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b1f      	cmp	r3, #31
 80093c8:	d80a      	bhi.n	80093e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2280      	movs	r2, #128	; 0x80
 80093ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80093d2:	2100      	movs	r1, #0
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7fe ff33 	bl	8008240 <dir_sdi>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]
 80093de:	e043      	b.n	8009468 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093e0:	463b      	mov	r3, r7
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fe1b 	bl	8009020 <create_name>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d134      	bne.n	800945e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff fb7c 	bl	8008af2 <dir_find>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009404:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	2b04      	cmp	r3, #4
 8009410:	d127      	bne.n	8009462 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	d122      	bne.n	8009462 <follow_path+0xd2>
 800941c:	2305      	movs	r3, #5
 800941e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009420:	e01f      	b.n	8009462 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d11c      	bne.n	8009466 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	799b      	ldrb	r3, [r3, #6]
 8009430:	f003 0310 	and.w	r3, r3, #16
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009438:	2305      	movs	r3, #5
 800943a:	75fb      	strb	r3, [r7, #23]
 800943c:	e014      	b.n	8009468 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944c:	4413      	add	r3, r2
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff f87c 	bl	800854e <ld_clust>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800945c:	e7c0      	b.n	80093e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800945e:	bf00      	nop
 8009460:	e002      	b.n	8009468 <follow_path+0xd8>
				break;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009466:	bf00      	nop
			}
		}
	}

	return res;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009472:	b480      	push	{r7}
 8009474:	b087      	sub	sp, #28
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800947a:	f04f 33ff 	mov.w	r3, #4294967295
 800947e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d031      	beq.n	80094ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	e002      	b.n	8009496 <get_ldnumber+0x24>
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	3301      	adds	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b1f      	cmp	r3, #31
 800949c:	d903      	bls.n	80094a6 <get_ldnumber+0x34>
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b3a      	cmp	r3, #58	; 0x3a
 80094a4:	d1f4      	bne.n	8009490 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b3a      	cmp	r3, #58	; 0x3a
 80094ac:	d11c      	bne.n	80094e8 <get_ldnumber+0x76>
			tp = *path;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	60fa      	str	r2, [r7, #12]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	3b30      	subs	r3, #48	; 0x30
 80094be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d80e      	bhi.n	80094e4 <get_ldnumber+0x72>
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d10a      	bne.n	80094e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d807      	bhi.n	80094e4 <get_ldnumber+0x72>
					vol = (int)i;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	3301      	adds	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	e002      	b.n	80094ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80094e8:	2300      	movs	r3, #0
 80094ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80094ec:	693b      	ldr	r3, [r7, #16]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	70da      	strb	r2, [r3, #3]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fe fb1a 	bl	8007b50 <move_window>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <check_fs+0x2a>
 8009522:	2304      	movs	r3, #4
 8009524:	e038      	b.n	8009598 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3334      	adds	r3, #52	; 0x34
 800952a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe f85e 	bl	80075f0 <ld_word>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800953c:	429a      	cmp	r2, r3
 800953e:	d001      	beq.n	8009544 <check_fs+0x48>
 8009540:	2303      	movs	r3, #3
 8009542:	e029      	b.n	8009598 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800954a:	2be9      	cmp	r3, #233	; 0xe9
 800954c:	d009      	beq.n	8009562 <check_fs+0x66>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009554:	2beb      	cmp	r3, #235	; 0xeb
 8009556:	d11e      	bne.n	8009596 <check_fs+0x9a>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800955e:	2b90      	cmp	r3, #144	; 0x90
 8009560:	d119      	bne.n	8009596 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3334      	adds	r3, #52	; 0x34
 8009566:	3336      	adds	r3, #54	; 0x36
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe f859 	bl	8007620 <ld_dword>
 800956e:	4603      	mov	r3, r0
 8009570:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009574:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <check_fs+0xa4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d101      	bne.n	800957e <check_fs+0x82>
 800957a:	2300      	movs	r3, #0
 800957c:	e00c      	b.n	8009598 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3334      	adds	r3, #52	; 0x34
 8009582:	3352      	adds	r3, #82	; 0x52
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe f84b 	bl	8007620 <ld_dword>
 800958a:	4602      	mov	r2, r0
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <check_fs+0xa8>)
 800958e:	429a      	cmp	r2, r3
 8009590:	d101      	bne.n	8009596 <check_fs+0x9a>
 8009592:	2300      	movs	r3, #0
 8009594:	e000      	b.n	8009598 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009596:	2302      	movs	r3, #2
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	00544146 	.word	0x00544146
 80095a4:	33544146 	.word	0x33544146

080095a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b096      	sub	sp, #88	; 0x58
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f7ff ff58 	bl	8009472 <get_ldnumber>
 80095c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80095c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	da01      	bge.n	80095ce <find_volume+0x26>
 80095ca:	230b      	movs	r3, #11
 80095cc:	e22e      	b.n	8009a2c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80095ce:	4aa8      	ldr	r2, [pc, #672]	; (8009870 <find_volume+0x2c8>)
 80095d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <find_volume+0x3a>
 80095de:	230c      	movs	r3, #12
 80095e0:	e224      	b.n	8009a2c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	f023 0301 	bic.w	r3, r3, #1
 80095ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01a      	beq.n	800962e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fd ff51 	bl	80074a4 <disk_status>
 8009602:	4603      	mov	r3, r0
 8009604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10c      	bne.n	800962e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d007      	beq.n	800962a <find_volume+0x82>
 800961a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800961e:	f003 0304 	and.w	r3, r3, #4
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009626:	230a      	movs	r3, #10
 8009628:	e200      	b.n	8009a2c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800962a:	2300      	movs	r3, #0
 800962c:	e1fe      	b.n	8009a2c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	4618      	mov	r0, r3
 8009642:	f7fd ff49 	bl	80074d8 <disk_initialize>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800964c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009658:	2303      	movs	r3, #3
 800965a:	e1e7      	b.n	8009a2c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <find_volume+0xca>
 8009662:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800966e:	230a      	movs	r3, #10
 8009670:	e1dc      	b.n	8009a2c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800967a:	f7ff ff3f 	bl	80094fc <check_fs>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009688:	2b02      	cmp	r3, #2
 800968a:	d14b      	bne.n	8009724 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800968c:	2300      	movs	r3, #0
 800968e:	643b      	str	r3, [r7, #64]	; 0x40
 8009690:	e01f      	b.n	80096d2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80096a0:	4413      	add	r3, r2
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	3304      	adds	r3, #4
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <find_volume+0x114>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	3308      	adds	r3, #8
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fd ffb4 	bl	8007620 <ld_dword>
 80096b8:	4602      	mov	r2, r0
 80096ba:	e000      	b.n	80096be <find_volume+0x116>
 80096bc:	2200      	movs	r2, #0
 80096be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80096c6:	440b      	add	r3, r1
 80096c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ce:	3301      	adds	r3, #1
 80096d0:	643b      	str	r3, [r7, #64]	; 0x40
 80096d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d9dc      	bls.n	8009692 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80096d8:	2300      	movs	r3, #0
 80096da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80096dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <find_volume+0x140>
 80096e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e4:	3b01      	subs	r3, #1
 80096e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80096e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80096f0:	4413      	add	r3, r2
 80096f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80096f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80096f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <find_volume+0x162>
 80096fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009702:	f7ff fefb 	bl	80094fc <check_fs>
 8009706:	4603      	mov	r3, r0
 8009708:	e000      	b.n	800970c <find_volume+0x164>
 800970a:	2303      	movs	r3, #3
 800970c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009714:	2b01      	cmp	r3, #1
 8009716:	d905      	bls.n	8009724 <find_volume+0x17c>
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	3301      	adds	r3, #1
 800971c:	643b      	str	r3, [r7, #64]	; 0x40
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	2b03      	cmp	r3, #3
 8009722:	d9e1      	bls.n	80096e8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009728:	2b04      	cmp	r3, #4
 800972a:	d101      	bne.n	8009730 <find_volume+0x188>
 800972c:	2301      	movs	r3, #1
 800972e:	e17d      	b.n	8009a2c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009734:	2b01      	cmp	r3, #1
 8009736:	d901      	bls.n	800973c <find_volume+0x194>
 8009738:	230d      	movs	r3, #13
 800973a:	e177      	b.n	8009a2c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	3334      	adds	r3, #52	; 0x34
 8009740:	330b      	adds	r3, #11
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd ff54 	bl	80075f0 <ld_word>
 8009748:	4603      	mov	r3, r0
 800974a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800974e:	d001      	beq.n	8009754 <find_volume+0x1ac>
 8009750:	230d      	movs	r3, #13
 8009752:	e16b      	b.n	8009a2c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	3334      	adds	r3, #52	; 0x34
 8009758:	3316      	adds	r3, #22
 800975a:	4618      	mov	r0, r3
 800975c:	f7fd ff48 	bl	80075f0 <ld_word>
 8009760:	4603      	mov	r3, r0
 8009762:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <find_volume+0x1d0>
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	3334      	adds	r3, #52	; 0x34
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd ff55 	bl	8007620 <ld_dword>
 8009776:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800977c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d005      	beq.n	800979c <find_volume+0x1f4>
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	789b      	ldrb	r3, [r3, #2]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d001      	beq.n	800979c <find_volume+0x1f4>
 8009798:	230d      	movs	r3, #13
 800979a:	e147      	b.n	8009a2c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	789b      	ldrb	r3, [r3, #2]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a4:	fb02 f303 	mul.w	r3, r2, r3
 80097a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	895b      	ldrh	r3, [r3, #10]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d008      	beq.n	80097d0 <find_volume+0x228>
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	895b      	ldrh	r3, [r3, #10]
 80097c2:	461a      	mov	r2, r3
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	895b      	ldrh	r3, [r3, #10]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <find_volume+0x22c>
 80097d0:	230d      	movs	r3, #13
 80097d2:	e12b      	b.n	8009a2c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	3334      	adds	r3, #52	; 0x34
 80097d8:	3311      	adds	r3, #17
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fd ff08 	bl	80075f0 <ld_word>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	891b      	ldrh	r3, [r3, #8]
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <find_volume+0x252>
 80097f6:	230d      	movs	r3, #13
 80097f8:	e118      	b.n	8009a2c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	3334      	adds	r3, #52	; 0x34
 80097fe:	3313      	adds	r3, #19
 8009800:	4618      	mov	r0, r3
 8009802:	f7fd fef5 	bl	80075f0 <ld_word>
 8009806:	4603      	mov	r3, r0
 8009808:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800980a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <find_volume+0x276>
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	3334      	adds	r3, #52	; 0x34
 8009814:	3320      	adds	r3, #32
 8009816:	4618      	mov	r0, r3
 8009818:	f7fd ff02 	bl	8007620 <ld_dword>
 800981c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	3334      	adds	r3, #52	; 0x34
 8009822:	330e      	adds	r3, #14
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd fee3 	bl	80075f0 <ld_word>
 800982a:	4603      	mov	r3, r0
 800982c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800982e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <find_volume+0x290>
 8009834:	230d      	movs	r3, #13
 8009836:	e0f9      	b.n	8009a2c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009838:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800983a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983c:	4413      	add	r3, r2
 800983e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009840:	8912      	ldrh	r2, [r2, #8]
 8009842:	0912      	lsrs	r2, r2, #4
 8009844:	b292      	uxth	r2, r2
 8009846:	4413      	add	r3, r2
 8009848:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800984a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	429a      	cmp	r2, r3
 8009850:	d201      	bcs.n	8009856 <find_volume+0x2ae>
 8009852:	230d      	movs	r3, #13
 8009854:	e0ea      	b.n	8009a2c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800985e:	8952      	ldrh	r2, [r2, #10]
 8009860:	fbb3 f3f2 	udiv	r3, r3, r2
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	d103      	bne.n	8009874 <find_volume+0x2cc>
 800986c:	230d      	movs	r3, #13
 800986e:	e0dd      	b.n	8009a2c <find_volume+0x484>
 8009870:	2000a45c 	.word	0x2000a45c
		fmt = FS_FAT32;
 8009874:	2303      	movs	r3, #3
 8009876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009880:	4293      	cmp	r3, r2
 8009882:	d802      	bhi.n	800988a <find_volume+0x2e2>
 8009884:	2302      	movs	r3, #2
 8009886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009890:	4293      	cmp	r3, r2
 8009892:	d802      	bhi.n	800989a <find_volume+0x2f2>
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	1c9a      	adds	r2, r3, #2
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098a6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80098a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ac:	441a      	add	r2, r3
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80098b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	441a      	add	r2, r3
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80098bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d11e      	bne.n	8009902 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	3334      	adds	r3, #52	; 0x34
 80098c8:	332a      	adds	r3, #42	; 0x2a
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd fe90 	bl	80075f0 <ld_word>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <find_volume+0x332>
 80098d6:	230d      	movs	r3, #13
 80098d8:	e0a8      	b.n	8009a2c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	891b      	ldrh	r3, [r3, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <find_volume+0x33e>
 80098e2:	230d      	movs	r3, #13
 80098e4:	e0a2      	b.n	8009a2c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	3334      	adds	r3, #52	; 0x34
 80098ea:	332c      	adds	r3, #44	; 0x2c
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fd fe97 	bl	8007620 <ld_dword>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009900:	e01f      	b.n	8009942 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	891b      	ldrh	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <find_volume+0x366>
 800990a:	230d      	movs	r3, #13
 800990c:	e08e      	b.n	8009a2c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009914:	441a      	add	r2, r3
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800991a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800991e:	2b02      	cmp	r3, #2
 8009920:	d103      	bne.n	800992a <find_volume+0x382>
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	e00a      	b.n	8009940 <find_volume+0x398>
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	699a      	ldr	r2, [r3, #24]
 800992e:	4613      	mov	r3, r2
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	4413      	add	r3, r2
 8009934:	085a      	lsrs	r2, r3, #1
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009940:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	69da      	ldr	r2, [r3, #28]
 8009946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009948:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800994c:	0a5b      	lsrs	r3, r3, #9
 800994e:	429a      	cmp	r2, r3
 8009950:	d201      	bcs.n	8009956 <find_volume+0x3ae>
 8009952:	230d      	movs	r3, #13
 8009954:	e06a      	b.n	8009a2c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	615a      	str	r2, [r3, #20]
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	2280      	movs	r2, #128	; 0x80
 800996a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800996c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009970:	2b03      	cmp	r3, #3
 8009972:	d149      	bne.n	8009a08 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	3334      	adds	r3, #52	; 0x34
 8009978:	3330      	adds	r3, #48	; 0x30
 800997a:	4618      	mov	r0, r3
 800997c:	f7fd fe38 	bl	80075f0 <ld_word>
 8009980:	4603      	mov	r3, r0
 8009982:	2b01      	cmp	r3, #1
 8009984:	d140      	bne.n	8009a08 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009988:	3301      	adds	r3, #1
 800998a:	4619      	mov	r1, r3
 800998c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800998e:	f7fe f8df 	bl	8007b50 <move_window>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d137      	bne.n	8009a08 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	2200      	movs	r2, #0
 800999c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	3334      	adds	r3, #52	; 0x34
 80099a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fd fe22 	bl	80075f0 <ld_word>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d127      	bne.n	8009a08 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	3334      	adds	r3, #52	; 0x34
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd fe2f 	bl	8007620 <ld_dword>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b1b      	ldr	r3, [pc, #108]	; (8009a34 <find_volume+0x48c>)
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d11e      	bne.n	8009a08 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	3334      	adds	r3, #52	; 0x34
 80099ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fd fe24 	bl	8007620 <ld_dword>
 80099d8:	4602      	mov	r2, r0
 80099da:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <find_volume+0x490>)
 80099dc:	429a      	cmp	r2, r3
 80099de:	d113      	bne.n	8009a08 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	3334      	adds	r3, #52	; 0x34
 80099e4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fd fe19 	bl	8007620 <ld_dword>
 80099ee:	4602      	mov	r2, r0
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	3334      	adds	r3, #52	; 0x34
 80099f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fd fe0f 	bl	8007620 <ld_dword>
 8009a02:	4602      	mov	r2, r0
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009a0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <find_volume+0x494>)
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <find_volume+0x494>)
 8009a1a:	801a      	strh	r2, [r3, #0]
 8009a1c:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <find_volume+0x494>)
 8009a1e:	881a      	ldrh	r2, [r3, #0]
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a26:	f7fe f82b 	bl	8007a80 <clear_lock>
#endif
	return FR_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3758      	adds	r7, #88	; 0x58
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	41615252 	.word	0x41615252
 8009a38:	61417272 	.word	0x61417272
 8009a3c:	2000a464 	.word	0x2000a464

08009a40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009a4a:	2309      	movs	r3, #9
 8009a4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01c      	beq.n	8009a8e <validate+0x4e>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d018      	beq.n	8009a8e <validate+0x4e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d013      	beq.n	8009a8e <validate+0x4e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	889a      	ldrh	r2, [r3, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	88db      	ldrh	r3, [r3, #6]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d10c      	bne.n	8009a8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fd fd12 	bl	80074a4 <disk_status>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <validate+0x4e>
			res = FR_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <validate+0x5a>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	e000      	b.n	8009a9c <validate+0x5c>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	6013      	str	r3, [r2, #0]
	return res;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009abe:	f107 0310 	add.w	r3, r7, #16
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fcd5 	bl	8009472 <get_ldnumber>
 8009ac8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da01      	bge.n	8009ad4 <f_mount+0x28>
 8009ad0:	230b      	movs	r3, #11
 8009ad2:	e02b      	b.n	8009b2c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009ad4:	4a17      	ldr	r2, [pc, #92]	; (8009b34 <f_mount+0x88>)
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009adc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ae4:	69b8      	ldr	r0, [r7, #24]
 8009ae6:	f7fd ffcb 	bl	8007a80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	490d      	ldr	r1, [pc, #52]	; (8009b34 <f_mount+0x88>)
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <f_mount+0x66>
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d001      	beq.n	8009b16 <f_mount+0x6a>
 8009b12:	2300      	movs	r3, #0
 8009b14:	e00a      	b.n	8009b2c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b16:	f107 010c 	add.w	r1, r7, #12
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	2200      	movs	r2, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff fd41 	bl	80095a8 <find_volume>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3720      	adds	r7, #32
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	2000a45c 	.word	0x2000a45c

08009b38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b09a      	sub	sp, #104	; 0x68
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <f_open+0x18>
 8009b4c:	2309      	movs	r3, #9
 8009b4e:	e1bd      	b.n	8009ecc <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b58:	79fa      	ldrb	r2, [r7, #7]
 8009b5a:	f107 0110 	add.w	r1, r7, #16
 8009b5e:	f107 0308 	add.w	r3, r7, #8
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fd20 	bl	80095a8 <find_volume>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 81a1 	bne.w	8009eba <f_open+0x382>
		dj.obj.fs = fs;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8009b7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b80:	f001 fbab 	bl	800b2da <ff_memalloc>
 8009b84:	65b8      	str	r0, [r7, #88]	; 0x58
 8009b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <f_open+0x58>
 8009b8c:	2311      	movs	r3, #17
 8009b8e:	e19d      	b.n	8009ecc <f_open+0x394>
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b94:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	f107 0314 	add.w	r3, r7, #20
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fbf6 	bl	8009390 <follow_path>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009baa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d11a      	bne.n	8009be8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	da03      	bge.n	8009bc4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8009bbc:	2306      	movs	r3, #6
 8009bbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009bc2:	e011      	b.n	8009be8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bf14      	ite	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	2300      	moveq	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	f107 0314 	add.w	r3, r7, #20
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fd fe07 	bl	80077f0 <chk_lock>
 8009be2:	4603      	mov	r3, r0
 8009be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	f003 031c 	and.w	r3, r3, #28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d07f      	beq.n	8009cf2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8009bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d017      	beq.n	8009c2a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009bfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d10e      	bne.n	8009c20 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c02:	f7fd fe51 	bl	80078a8 <enq_lock>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d006      	beq.n	8009c1a <f_open+0xe2>
 8009c0c:	f107 0314 	add.w	r3, r7, #20
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff f82f 	bl	8008c74 <dir_register>
 8009c16:	4603      	mov	r3, r0
 8009c18:	e000      	b.n	8009c1c <f_open+0xe4>
 8009c1a:	2312      	movs	r3, #18
 8009c1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	f043 0308 	orr.w	r3, r3, #8
 8009c26:	71fb      	strb	r3, [r7, #7]
 8009c28:	e010      	b.n	8009c4c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c2a:	7ebb      	ldrb	r3, [r7, #26]
 8009c2c:	f003 0311 	and.w	r3, r3, #17
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <f_open+0x104>
					res = FR_DENIED;
 8009c34:	2307      	movs	r3, #7
 8009c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009c3a:	e007      	b.n	8009c4c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <f_open+0x114>
 8009c46:	2308      	movs	r3, #8
 8009c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d168      	bne.n	8009d26 <f_open+0x1ee>
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d063      	beq.n	8009d26 <f_open+0x1ee>
				dw = GET_FATTIME();
 8009c5e:	f7fd fcbf 	bl	80075e0 <get_fattime>
 8009c62:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c66:	330e      	adds	r3, #14
 8009c68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fd fd16 	bl	800769c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	3316      	adds	r3, #22
 8009c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fd10 	bl	800769c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	330b      	adds	r3, #11
 8009c80:	2220      	movs	r2, #32
 8009c82:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c88:	4611      	mov	r1, r2
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fc5f 	bl	800854e <ld_clust>
 8009c90:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c96:	2200      	movs	r2, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fc77 	bl	800858c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	331c      	adds	r3, #28
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fd fcf9 	bl	800769c <st_dword>
					fs->wflag = 1;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2201      	movs	r2, #1
 8009cae:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d037      	beq.n	8009d26 <f_open+0x1ee>
						dw = fs->winsect;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8009cbc:	f107 0314 	add.w	r3, r7, #20
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe f98a 	bl	8007fde <remove_chain>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009cd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d126      	bne.n	8009d26 <f_open+0x1ee>
							res = move_window(fs, dw);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fd ff37 	bl	8007b50 <move_window>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cec:	3a01      	subs	r2, #1
 8009cee:	611a      	str	r2, [r3, #16]
 8009cf0:	e019      	b.n	8009d26 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d115      	bne.n	8009d26 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009cfa:	7ebb      	ldrb	r3, [r7, #26]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d003      	beq.n	8009d0c <f_open+0x1d4>
					res = FR_NO_FILE;
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009d0a:	e00c      	b.n	8009d26 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d007      	beq.n	8009d26 <f_open+0x1ee>
 8009d16:	7ebb      	ldrb	r3, [r7, #26]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <f_open+0x1ee>
						res = FR_DENIED;
 8009d20:	2307      	movs	r3, #7
 8009d22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d128      	bne.n	8009d80 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	f003 0308 	and.w	r3, r3, #8
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <f_open+0x208>
				mode |= FA_MODIFIED;
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	f023 0301 	bic.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bf14      	ite	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	2300      	moveq	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd fdc0 	bl	80078ec <inc_lock>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <f_open+0x248>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 8095 	bne.w	8009eb4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fbdc 	bl	800854e <ld_clust>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9e:	331c      	adds	r3, #28
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fd fc3d 	bl	8007620 <ld_dword>
 8009da6:	4602      	mov	r2, r0
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	88da      	ldrh	r2, [r3, #6]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	79fa      	ldrb	r2, [r7, #7]
 8009dc4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3330      	adds	r3, #48	; 0x30
 8009ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fca7 	bl	8007736 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d060      	beq.n	8009eb4 <f_open+0x37c>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d05c      	beq.n	8009eb4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68da      	ldr	r2, [r3, #12]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	895b      	ldrh	r3, [r3, #10]
 8009e06:	025b      	lsls	r3, r3, #9
 8009e08:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e16:	e016      	b.n	8009e46 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fd ff52 	bl	8007cc6 <get_fat>
 8009e22:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d802      	bhi.n	8009e30 <f_open+0x2f8>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e36:	d102      	bne.n	8009e3e <f_open+0x306>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <f_open+0x31e>
 8009e4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d8e0      	bhi.n	8009e18 <f_open+0x2e0>
				}
				fp->clust = clst;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e5a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d127      	bne.n	8009eb4 <f_open+0x37c>
 8009e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d022      	beq.n	8009eb4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fd ff08 	bl	8007c88 <clust2sect>
 8009e78:	64b8      	str	r0, [r7, #72]	; 0x48
 8009e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d103      	bne.n	8009e88 <f_open+0x350>
						res = FR_INT_ERR;
 8009e80:	2302      	movs	r3, #2
 8009e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009e86:	e015      	b.n	8009eb4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e8a:	0a5a      	lsrs	r2, r3, #9
 8009e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e8e:	441a      	add	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	7858      	ldrb	r0, [r3, #1]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6a1a      	ldr	r2, [r3, #32]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f7fd fb3e 	bl	8007524 <disk_read>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <f_open+0x37c>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009eb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009eb6:	f001 fa1c 	bl	800b2f2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009eba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <f_open+0x390>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3768      	adds	r7, #104	; 0x68
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08e      	sub	sp, #56	; 0x38
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f107 0214 	add.w	r2, r7, #20
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff fda3 	bl	8009a40 <validate>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d107      	bne.n	8009f18 <f_read+0x44>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	7d5b      	ldrb	r3, [r3, #21]
 8009f0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <f_read+0x4a>
 8009f18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f1c:	e115      	b.n	800a14a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	7d1b      	ldrb	r3, [r3, #20]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <f_read+0x5a>
 8009f2a:	2307      	movs	r3, #7
 8009f2c:	e10d      	b.n	800a14a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	f240 80fe 	bls.w	800a140 <f_read+0x26c>
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f48:	e0fa      	b.n	800a140 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 80c6 	bne.w	800a0e4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	0a5b      	lsrs	r3, r3, #9
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	8952      	ldrh	r2, [r2, #10]
 8009f62:	3a01      	subs	r2, #1
 8009f64:	4013      	ands	r3, r2
 8009f66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d12f      	bne.n	8009fce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f7c:	e013      	b.n	8009fa6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7fe f923 	bl	80081d8 <clmt_clust>
 8009f92:	6338      	str	r0, [r7, #48]	; 0x30
 8009f94:	e007      	b.n	8009fa6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f7fd fe91 	bl	8007cc6 <get_fat>
 8009fa4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d804      	bhi.n	8009fb6 <f_read+0xe2>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	755a      	strb	r2, [r3, #21]
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e0c9      	b.n	800a14a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbc:	d104      	bne.n	8009fc8 <f_read+0xf4>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	755a      	strb	r2, [r3, #21]
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0c0      	b.n	800a14a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fcc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fd fe56 	bl	8007c88 <clust2sect>
 8009fdc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d104      	bne.n	8009fee <f_read+0x11a>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	755a      	strb	r2, [r3, #21]
 8009fea:	2302      	movs	r3, #2
 8009fec:	e0ad      	b.n	800a14a <f_read+0x276>
			sect += csect;
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	0a5b      	lsrs	r3, r3, #9
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d039      	beq.n	800a076 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	4413      	add	r3, r2
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	8952      	ldrh	r2, [r2, #10]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d905      	bls.n	800a01c <f_read+0x148>
					cc = fs->csize - csect;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	895b      	ldrh	r3, [r3, #10]
 800a014:	461a      	mov	r2, r3
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	7858      	ldrb	r0, [r3, #1]
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a026:	f7fd fa7d 	bl	8007524 <disk_read>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d004      	beq.n	800a03a <f_read+0x166>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	755a      	strb	r2, [r3, #21]
 800a036:	2301      	movs	r3, #1
 800a038:	e087      	b.n	800a14a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	7d1b      	ldrb	r3, [r3, #20]
 800a03e:	b25b      	sxtb	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	da14      	bge.n	800a06e <f_read+0x19a>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a1a      	ldr	r2, [r3, #32]
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a04e:	429a      	cmp	r2, r3
 800a050:	d90d      	bls.n	800a06e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1a      	ldr	r2, [r3, #32]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	025b      	lsls	r3, r3, #9
 800a05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05e:	18d0      	adds	r0, r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3330      	adds	r3, #48	; 0x30
 800a064:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a068:	4619      	mov	r1, r3
 800a06a:	f7fd fb43 	bl	80076f4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	025b      	lsls	r3, r3, #9
 800a072:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a074:	e050      	b.n	800a118 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d02e      	beq.n	800a0de <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	7d1b      	ldrb	r3, [r3, #20]
 800a084:	b25b      	sxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	da18      	bge.n	800a0bc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	7858      	ldrb	r0, [r3, #1]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a1a      	ldr	r2, [r3, #32]
 800a098:	2301      	movs	r3, #1
 800a09a:	f7fd fa63 	bl	8007564 <disk_write>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <f_read+0x1da>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	755a      	strb	r2, [r3, #21]
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e04d      	b.n	800a14a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	7d1b      	ldrb	r3, [r3, #20]
 800a0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	7858      	ldrb	r0, [r3, #1]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	f7fd fa2b 	bl	8007524 <disk_read>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <f_read+0x20a>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	755a      	strb	r2, [r3, #21]
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e035      	b.n	800a14a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	69ba      	ldr	r2, [r7, #24]
 800a0e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a0f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d901      	bls.n	800a0fe <f_read+0x22a>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10c:	4413      	add	r3, r2
 800a10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a110:	4619      	mov	r1, r3
 800a112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a114:	f7fd faee 	bl	80076f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	4413      	add	r3, r2
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	441a      	add	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	619a      	str	r2, [r3, #24]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	441a      	add	r2, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f47f af01 	bne.w	8009f4a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3738      	adds	r7, #56	; 0x38
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b08c      	sub	sp, #48	; 0x30
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
 800a15e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f107 0210 	add.w	r2, r7, #16
 800a170:	4611      	mov	r1, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fc64 	bl	8009a40 <validate>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a182:	2b00      	cmp	r3, #0
 800a184:	d107      	bne.n	800a196 <f_write+0x44>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	7d5b      	ldrb	r3, [r3, #21]
 800a18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <f_write+0x4a>
 800a196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a19a:	e14b      	b.n	800a434 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <f_write+0x5a>
 800a1a8:	2307      	movs	r3, #7
 800a1aa:	e143      	b.n	800a434 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	441a      	add	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	f080 812d 	bcs.w	800a418 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a1c6:	e127      	b.n	800a418 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 80e3 	bne.w	800a39c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	0a5b      	lsrs	r3, r3, #9
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	8952      	ldrh	r2, [r2, #10]
 800a1e0:	3a01      	subs	r2, #1
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d143      	bne.n	800a274 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10c      	bne.n	800a20e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d11a      	bne.n	800a236 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f7fd ff4f 	bl	80080a8 <create_chain>
 800a20a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a20c:	e013      	b.n	800a236 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	4619      	mov	r1, r3
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7fd ffdb 	bl	80081d8 <clmt_clust>
 800a222:	62b8      	str	r0, [r7, #40]	; 0x28
 800a224:	e007      	b.n	800a236 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	4619      	mov	r1, r3
 800a22e:	4610      	mov	r0, r2
 800a230:	f7fd ff3a 	bl	80080a8 <create_chain>
 800a234:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80f2 	beq.w	800a422 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	2b01      	cmp	r3, #1
 800a242:	d104      	bne.n	800a24e <f_write+0xfc>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2202      	movs	r2, #2
 800a248:	755a      	strb	r2, [r3, #21]
 800a24a:	2302      	movs	r3, #2
 800a24c:	e0f2      	b.n	800a434 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a254:	d104      	bne.n	800a260 <f_write+0x10e>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	755a      	strb	r2, [r3, #21]
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0e9      	b.n	800a434 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a264:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <f_write+0x122>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a272:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	7d1b      	ldrb	r3, [r3, #20]
 800a278:	b25b      	sxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da18      	bge.n	800a2b0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	7858      	ldrb	r0, [r3, #1]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a1a      	ldr	r2, [r3, #32]
 800a28c:	2301      	movs	r3, #1
 800a28e:	f7fd f969 	bl	8007564 <disk_write>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d004      	beq.n	800a2a2 <f_write+0x150>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	755a      	strb	r2, [r3, #21]
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e0c8      	b.n	800a434 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	7d1b      	ldrb	r3, [r3, #20]
 800a2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	f7fd fce5 	bl	8007c88 <clust2sect>
 800a2be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d104      	bne.n	800a2d0 <f_write+0x17e>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	755a      	strb	r2, [r3, #21]
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e0b1      	b.n	800a434 <f_write+0x2e2>
			sect += csect;
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	0a5b      	lsrs	r3, r3, #9
 800a2dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d03c      	beq.n	800a35e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	8952      	ldrh	r2, [r2, #10]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d905      	bls.n	800a2fe <f_write+0x1ac>
					cc = fs->csize - csect;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	895b      	ldrh	r3, [r3, #10]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	7858      	ldrb	r0, [r3, #1]
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	69f9      	ldr	r1, [r7, #28]
 800a308:	f7fd f92c 	bl	8007564 <disk_write>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d004      	beq.n	800a31c <f_write+0x1ca>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	755a      	strb	r2, [r3, #21]
 800a318:	2301      	movs	r3, #1
 800a31a:	e08b      	b.n	800a434 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1a      	ldr	r2, [r3, #32]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	6a3a      	ldr	r2, [r7, #32]
 800a326:	429a      	cmp	r2, r3
 800a328:	d915      	bls.n	800a356 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a1a      	ldr	r2, [r3, #32]
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	025b      	lsls	r3, r3, #9
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a342:	4619      	mov	r1, r3
 800a344:	f7fd f9d6 	bl	80076f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	7d1b      	ldrb	r3, [r3, #20]
 800a34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a350:	b2da      	uxtb	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	025b      	lsls	r3, r3, #9
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a35c:	e03f      	b.n	800a3de <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	429a      	cmp	r2, r3
 800a366:	d016      	beq.n	800a396 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a370:	429a      	cmp	r2, r3
 800a372:	d210      	bcs.n	800a396 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	7858      	ldrb	r0, [r3, #1]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a37e:	2301      	movs	r3, #1
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	f7fd f8cf 	bl	8007524 <disk_read>
 800a386:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d004      	beq.n	800a396 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2201      	movs	r2, #1
 800a390:	755a      	strb	r2, [r3, #21]
 800a392:	2301      	movs	r3, #1
 800a394:	e04e      	b.n	800a434 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d901      	bls.n	800a3b6 <f_write+0x264>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c4:	4413      	add	r3, r2
 800a3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c8:	69f9      	ldr	r1, [r7, #28]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fd f992 	bl	80076f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	7d1b      	ldrb	r3, [r3, #20]
 800a3d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	4413      	add	r3, r2
 800a3e4:	61fb      	str	r3, [r7, #28]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	441a      	add	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	619a      	str	r2, [r3, #24]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	bf38      	it	cc
 800a3fe:	461a      	movcc	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	60da      	str	r2, [r3, #12]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	441a      	add	r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f47f aed4 	bne.w	800a1c8 <f_write+0x76>
 800a420:	e000      	b.n	800a424 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a422:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	7d1b      	ldrb	r3, [r3, #20]
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3730      	adds	r7, #48	; 0x30
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f107 0208 	add.w	r2, r7, #8
 800a44a:	4611      	mov	r1, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff faf7 	bl	8009a40 <validate>
 800a452:	4603      	mov	r3, r0
 800a454:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d168      	bne.n	800a52e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7d1b      	ldrb	r3, [r3, #20]
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d062      	beq.n	800a52e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	7d1b      	ldrb	r3, [r3, #20]
 800a46c:	b25b      	sxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	da15      	bge.n	800a49e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	7858      	ldrb	r0, [r3, #1]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1a      	ldr	r2, [r3, #32]
 800a480:	2301      	movs	r3, #1
 800a482:	f7fd f86f 	bl	8007564 <disk_write>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <f_sync+0x54>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e04f      	b.n	800a530 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7d1b      	ldrb	r3, [r3, #20]
 800a494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a49e:	f7fd f89f 	bl	80075e0 <get_fattime>
 800a4a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	f7fd fb4f 	bl	8007b50 <move_window>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d138      	bne.n	800a52e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	330b      	adds	r3, #11
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	330b      	adds	r3, #11
 800a4cc:	f042 0220 	orr.w	r2, r2, #32
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	f7fe f854 	bl	800858c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f103 021c 	add.w	r2, r3, #28
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f7fd f8d3 	bl	800769c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3316      	adds	r3, #22
 800a4fa:	6939      	ldr	r1, [r7, #16]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd f8cd 	bl	800769c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3312      	adds	r3, #18
 800a506:	2100      	movs	r1, #0
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fd f8ac 	bl	8007666 <st_word>
					fs->wflag = 1;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2201      	movs	r2, #1
 800a512:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	4618      	mov	r0, r3
 800a518:	f7fd fb48 	bl	8007bac <sync_fs>
 800a51c:	4603      	mov	r3, r0
 800a51e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	7d1b      	ldrb	r3, [r3, #20]
 800a524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff ff7b 	bl	800a43c <f_sync>
 800a546:	4603      	mov	r3, r0
 800a548:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d118      	bne.n	800a582 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f107 0208 	add.w	r2, r7, #8
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f7ff fa71 	bl	8009a40 <validate>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10c      	bne.n	800a582 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fd fa4b 	bl	8007a08 <dec_lock>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a582:	7bfb      	ldrb	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b090      	sub	sp, #64	; 0x40
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f107 0208 	add.w	r2, r7, #8
 800a59c:	4611      	mov	r1, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fa4e 	bl	8009a40 <validate>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a5aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <f_lseek+0x2e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	7d5b      	ldrb	r3, [r3, #21]
 800a5b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a5ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <f_lseek+0x3c>
 800a5c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5c6:	e1e6      	b.n	800a996 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80d1 	beq.w	800a774 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d8:	d15a      	bne.n	800a690 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	1d1a      	adds	r2, r3, #4
 800a5e4:	627a      	str	r2, [r7, #36]	; 0x24
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d03a      	beq.n	800a670 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	2300      	movs	r3, #0
 800a600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	3302      	adds	r3, #2
 800a606:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	3301      	adds	r3, #1
 800a610:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fb55 	bl	8007cc6 <get_fat>
 800a61c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2b01      	cmp	r3, #1
 800a622:	d804      	bhi.n	800a62e <f_lseek+0xa2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	755a      	strb	r2, [r3, #21]
 800a62a:	2302      	movs	r3, #2
 800a62c:	e1b3      	b.n	800a996 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d104      	bne.n	800a640 <f_lseek+0xb4>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	755a      	strb	r2, [r3, #21]
 800a63c:	2301      	movs	r3, #1
 800a63e:	e1aa      	b.n	800a996 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a646:	429a      	cmp	r2, r3
 800a648:	d0de      	beq.n	800a608 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d809      	bhi.n	800a666 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	627a      	str	r2, [r7, #36]	; 0x24
 800a658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	1d1a      	adds	r2, r3, #4
 800a660:	627a      	str	r2, [r7, #36]	; 0x24
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d3c4      	bcc.n	800a5fa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a676:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d803      	bhi.n	800a688 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	e184      	b.n	800a992 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a688:	2311      	movs	r3, #17
 800a68a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a68e:	e180      	b.n	800a992 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	429a      	cmp	r2, r3
 800a698:	d902      	bls.n	800a6a0 <f_lseek+0x114>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 8172 	beq.w	800a992 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7fd fd8f 	bl	80081d8 <clmt_clust>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f7fd fadd 	bl	8007c88 <clust2sect>
 800a6ce:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d104      	bne.n	800a6e0 <f_lseek+0x154>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	755a      	strb	r2, [r3, #21]
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e15a      	b.n	800a996 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	0a5b      	lsrs	r3, r3, #9
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	8952      	ldrh	r2, [r2, #10]
 800a6ea:	3a01      	subs	r2, #1
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	69ba      	ldr	r2, [r7, #24]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8148 	beq.w	800a992 <f_lseek+0x406>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	429a      	cmp	r2, r3
 800a70a:	f000 8142 	beq.w	800a992 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7d1b      	ldrb	r3, [r3, #20]
 800a712:	b25b      	sxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	da18      	bge.n	800a74a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	7858      	ldrb	r0, [r3, #1]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1a      	ldr	r2, [r3, #32]
 800a726:	2301      	movs	r3, #1
 800a728:	f7fc ff1c 	bl	8007564 <disk_write>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <f_lseek+0x1b0>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	755a      	strb	r2, [r3, #21]
 800a738:	2301      	movs	r3, #1
 800a73a:	e12c      	b.n	800a996 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	7d1b      	ldrb	r3, [r3, #20]
 800a740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a744:	b2da      	uxtb	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	7858      	ldrb	r0, [r3, #1]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a754:	2301      	movs	r3, #1
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	f7fc fee4 	bl	8007524 <disk_read>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d004      	beq.n	800a76c <f_lseek+0x1e0>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	755a      	strb	r2, [r3, #21]
 800a768:	2301      	movs	r3, #1
 800a76a:	e114      	b.n	800a996 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	621a      	str	r2, [r3, #32]
 800a772:	e10e      	b.n	800a992 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d908      	bls.n	800a790 <f_lseek+0x204>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7d1b      	ldrb	r3, [r3, #20]
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	637b      	str	r3, [r7, #52]	; 0x34
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a79e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 80a7 	beq.w	800a8f6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	895b      	ldrh	r3, [r3, #10]
 800a7ac:	025b      	lsls	r3, r3, #9
 800a7ae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01b      	beq.n	800a7ee <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	1e5a      	subs	r2, r3, #1
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	1e59      	subs	r1, r3, #1
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d30f      	bcc.n	800a7ee <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	1e5a      	subs	r2, r3, #1
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	401a      	ands	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7ec:	e022      	b.n	800a834 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d119      	bne.n	800a82e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fd fc52 	bl	80080a8 <create_chain>
 800a804:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d104      	bne.n	800a816 <f_lseek+0x28a>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	755a      	strb	r2, [r3, #21]
 800a812:	2302      	movs	r3, #2
 800a814:	e0bf      	b.n	800a996 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81c:	d104      	bne.n	800a828 <f_lseek+0x29c>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	755a      	strb	r2, [r3, #21]
 800a824:	2301      	movs	r3, #1
 800a826:	e0b6      	b.n	800a996 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a82c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a832:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	2b00      	cmp	r3, #0
 800a838:	d05d      	beq.n	800a8f6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a83a:	e03a      	b.n	800a8b2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699a      	ldr	r2, [r3, #24]
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	441a      	add	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7d1b      	ldrb	r3, [r3, #20]
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a860:	4618      	mov	r0, r3
 800a862:	f7fd fc21 	bl	80080a8 <create_chain>
 800a866:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d108      	bne.n	800a880 <f_lseek+0x2f4>
							ofs = 0; break;
 800a86e:	2300      	movs	r3, #0
 800a870:	603b      	str	r3, [r7, #0]
 800a872:	e022      	b.n	800a8ba <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fd fa24 	bl	8007cc6 <get_fat>
 800a87e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d104      	bne.n	800a892 <f_lseek+0x306>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	755a      	strb	r2, [r3, #21]
 800a88e:	2301      	movs	r3, #1
 800a890:	e081      	b.n	800a996 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	2b01      	cmp	r3, #1
 800a896:	d904      	bls.n	800a8a2 <f_lseek+0x316>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d304      	bcc.n	800a8ac <f_lseek+0x320>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	755a      	strb	r2, [r3, #21]
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e074      	b.n	800a996 <f_lseek+0x40a>
					fp->clust = clst;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d8c0      	bhi.n	800a83c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	699a      	ldr	r2, [r3, #24]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	441a      	add	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d012      	beq.n	800a8f6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fd f9d7 	bl	8007c88 <clust2sect>
 800a8da:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d104      	bne.n	800a8ec <f_lseek+0x360>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	755a      	strb	r2, [r3, #21]
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e054      	b.n	800a996 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	0a5b      	lsrs	r3, r3, #9
 800a8f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f2:	4413      	add	r3, r2
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d90a      	bls.n	800a918 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	7d1b      	ldrb	r3, [r3, #20]
 800a90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a912:	b2da      	uxtb	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a920:	2b00      	cmp	r3, #0
 800a922:	d036      	beq.n	800a992 <f_lseek+0x406>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d031      	beq.n	800a992 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	7d1b      	ldrb	r3, [r3, #20]
 800a932:	b25b      	sxtb	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	da18      	bge.n	800a96a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	7858      	ldrb	r0, [r3, #1]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a1a      	ldr	r2, [r3, #32]
 800a946:	2301      	movs	r3, #1
 800a948:	f7fc fe0c 	bl	8007564 <disk_write>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <f_lseek+0x3d0>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	755a      	strb	r2, [r3, #21]
 800a958:	2301      	movs	r3, #1
 800a95a:	e01c      	b.n	800a996 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	7d1b      	ldrb	r3, [r3, #20]
 800a960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a964:	b2da      	uxtb	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	7858      	ldrb	r0, [r3, #1]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a974:	2301      	movs	r3, #1
 800a976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a978:	f7fc fdd4 	bl	8007524 <disk_read>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d004      	beq.n	800a98c <f_lseek+0x400>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	755a      	strb	r2, [r3, #21]
 800a988:	2301      	movs	r3, #1
 800a98a:	e004      	b.n	800a996 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a990:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a992:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a996:	4618      	mov	r0, r3
 800a998:	3740      	adds	r7, #64	; 0x40
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b086      	sub	sp, #24
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <f_opendir+0x14>
 800a9ae:	2309      	movs	r3, #9
 800a9b0:	e074      	b.n	800aa9c <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a9b6:	f107 0108 	add.w	r1, r7, #8
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fdf2 	bl	80095a8 <find_volume>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d15f      	bne.n	800aa8e <f_opendir+0xf0>
		obj->fs = fs;
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800a9d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a9d8:	f000 fc7f 	bl	800b2da <ff_memalloc>
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <f_opendir+0x4a>
 800a9e4:	2311      	movs	r3, #17
 800a9e6:	e059      	b.n	800aa9c <f_opendir+0xfe>
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7fe fccc 	bl	8009390 <follow_path>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d13d      	bne.n	800aa7e <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa08:	b25b      	sxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	db12      	blt.n	800aa34 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	799b      	ldrb	r3, [r3, #6]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f7fd fd93 	bl	800854e <ld_clust>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	609a      	str	r2, [r3, #8]
 800aa2e:	e001      	b.n	800aa34 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800aa30:	2305      	movs	r3, #5
 800aa32:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d121      	bne.n	800aa7e <f_opendir+0xe0>
				obj->id = fs->id;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	88da      	ldrh	r2, [r3, #6]
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800aa42:	2100      	movs	r1, #0
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7fd fbfb 	bl	8008240 <dir_sdi>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d114      	bne.n	800aa7e <f_opendir+0xe0>
					if (obj->sclust) {
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00d      	beq.n	800aa78 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7fc ff44 	bl	80078ec <inc_lock>
 800aa64:	4602      	mov	r2, r0
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <f_opendir+0xe0>
 800aa72:	2312      	movs	r3, #18
 800aa74:	75fb      	strb	r3, [r7, #23]
 800aa76:	e002      	b.n	800aa7e <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 fc37 	bl	800b2f2 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d101      	bne.n	800aa8e <f_opendir+0xf0>
 800aa8a:	2305      	movs	r3, #5
 800aa8c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <f_opendir+0xfc>
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f107 0208 	add.w	r2, r7, #8
 800aab2:	4611      	mov	r1, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe ffc3 	bl	8009a40 <validate>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d110      	bne.n	800aae6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fc ff99 	bl	8007a08 <dec_lock>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d102      	bne.n	800aae6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f107 020c 	add.w	r2, r7, #12
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe ff9c 	bl	8009a40 <validate>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d136      	bne.n	800ab80 <f_readdir+0x90>
		if (!fno) {
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ab18:	2100      	movs	r1, #0
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7fd fb90 	bl	8008240 <dir_sdi>
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]
 800ab24:	e02c      	b.n	800ab80 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800ab26:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ab2a:	f000 fbd6 	bl	800b2da <ff_memalloc>
 800ab2e:	6138      	str	r0, [r7, #16]
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <f_readdir+0x4a>
 800ab36:	2311      	movs	r3, #17
 800ab38:	e023      	b.n	800ab82 <f_readdir+0x92>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800ab40:	2100      	movs	r1, #0
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7fd ff2e 	bl	80089a4 <dir_read>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d101      	bne.n	800ab56 <f_readdir+0x66>
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10e      	bne.n	800ab7a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fe f980 	bl	8008e64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ab64:	2100      	movs	r1, #0
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fd fbe5 	bl	8008336 <dir_next>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d101      	bne.n	800ab7a <f_readdir+0x8a>
 800ab76:	2300      	movs	r3, #0
 800ab78:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800ab7a:	6938      	ldr	r0, [r7, #16]
 800ab7c:	f000 fbb9 	bl	800b2f2 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b092      	sub	sp, #72	; 0x48
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ab96:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe fd01 	bl	80095a8 <find_volume>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800abac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 8099 	bne.w	800ace8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800abb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	695a      	ldr	r2, [r3, #20]
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	3b02      	subs	r3, #2
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d804      	bhi.n	800abd4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	695a      	ldr	r2, [r3, #20]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	e089      	b.n	800ace8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d128      	bne.n	800ac32 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800abe0:	2302      	movs	r3, #2
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800abe8:	f107 0314 	add.w	r3, r7, #20
 800abec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fd f869 	bl	8007cc6 <get_fat>
 800abf4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d103      	bne.n	800ac06 <f_getfree+0x7c>
 800abfe:	2301      	movs	r3, #1
 800ac00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac04:	e063      	b.n	800acce <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d103      	bne.n	800ac14 <f_getfree+0x8a>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac12:	e05c      	b.n	800acce <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d102      	bne.n	800ac20 <f_getfree+0x96>
 800ac1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ac20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac22:	3301      	adds	r3, #1
 800ac24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3db      	bcc.n	800abe8 <f_getfree+0x5e>
 800ac30:	e04d      	b.n	800acce <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	637b      	str	r3, [r7, #52]	; 0x34
 800ac42:	2300      	movs	r3, #0
 800ac44:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ac46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d113      	bne.n	800ac74 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ac4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac54:	4619      	mov	r1, r3
 800ac56:	f7fc ff7b 	bl	8007b50 <move_window>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ac60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d131      	bne.n	800accc <f_getfree+0x142>
							p = fs->win;
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	3334      	adds	r3, #52	; 0x34
 800ac6c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ac6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac72:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d10f      	bne.n	800ac9c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ac7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac7e:	f7fc fcb7 	bl	80075f0 <ld_word>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d102      	bne.n	800ac8e <f_getfree+0x104>
 800ac88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	3302      	adds	r3, #2
 800ac92:	633b      	str	r3, [r7, #48]	; 0x30
 800ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac96:	3b02      	subs	r3, #2
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9a:	e010      	b.n	800acbe <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ac9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac9e:	f7fc fcbf 	bl	8007620 <ld_dword>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <f_getfree+0x128>
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	3301      	adds	r3, #1
 800acb0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	3304      	adds	r3, #4
 800acb6:	633b      	str	r3, [r7, #48]	; 0x30
 800acb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acba:	3b04      	subs	r3, #4
 800acbc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800acbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc0:	3b01      	subs	r3, #1
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1bd      	bne.n	800ac46 <f_getfree+0xbc>
 800acca:	e000      	b.n	800acce <f_getfree+0x144>
							if (res != FR_OK) break;
 800accc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acd2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acd8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	791a      	ldrb	r2, [r3, #4]
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	f042 0201 	orr.w	r2, r2, #1
 800ace4:	b2d2      	uxtb	r2, r2
 800ace6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ace8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800acec:	4618      	mov	r0, r3
 800acee:	3748      	adds	r7, #72	; 0x48
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	2b0a      	cmp	r3, #10
 800ad04:	d103      	bne.n	800ad0e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ad06:	210d      	movs	r1, #13
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff fff3 	bl	800acf4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	db25      	blt.n	800ad66 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	60fa      	str	r2, [r7, #12]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	4413      	add	r3, r2
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b3c      	cmp	r3, #60	; 0x3c
 800ad2c:	dd12      	ble.n	800ad54 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f103 010c 	add.w	r1, r3, #12
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	f107 0308 	add.w	r3, r7, #8
 800ad3e:	f7ff fa08 	bl	800a152 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d101      	bne.n	800ad4e <putc_bfd+0x5a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e001      	b.n	800ad52 <putc_bfd+0x5e>
 800ad4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad52:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	609a      	str	r2, [r3, #8]
 800ad64:	e000      	b.n	800ad68 <putc_bfd+0x74>
	if (i < 0) return;
 800ad66:	bf00      	nop
}
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	db17      	blt.n	800adae <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f103 010c 	add.w	r1, r3, #12
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f107 030c 	add.w	r3, r7, #12
 800ad92:	f7ff f9de 	bl	800a152 <f_write>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d108      	bne.n	800adae <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	461a      	mov	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d102      	bne.n	800adae <putc_flush+0x40>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	e001      	b.n	800adb2 <putc_flush+0x44>
	return EOF;
 800adae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	605a      	str	r2, [r3, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	609a      	str	r2, [r3, #8]
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800ade4:	b40e      	push	{r1, r2, r3}
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b0a7      	sub	sp, #156	; 0x9c
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800adee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff ffe0 	bl	800adba <putc_init>

	va_start(arp, fmt);
 800adfa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800adfe:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800ae00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ae10:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 81f4 	beq.w	800b202 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800ae1a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae1e:	2b25      	cmp	r3, #37	; 0x25
 800ae20:	d008      	beq.n	800ae34 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ae22:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ae26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff ff61 	bl	800acf4 <putc_bfd>
			continue;
 800ae32:	e1e5      	b.n	800b200 <f_printf+0x41c>
		}
		w = f = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ae40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ae50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae54:	2b30      	cmp	r3, #48	; 0x30
 800ae56:	d10b      	bne.n	800ae70 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ae5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ae6e:	e024      	b.n	800aeba <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ae70:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae74:	2b2d      	cmp	r3, #45	; 0x2d
 800ae76:	d120      	bne.n	800aeba <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ae7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ae8e:	e014      	b.n	800aeba <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ae90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aea2:	4413      	add	r3, r2
 800aea4:	3b30      	subs	r3, #48	; 0x30
 800aea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800aeaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800aeba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aebe:	2b2f      	cmp	r3, #47	; 0x2f
 800aec0:	d903      	bls.n	800aeca <f_printf+0xe6>
 800aec2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aec6:	2b39      	cmp	r3, #57	; 0x39
 800aec8:	d9e2      	bls.n	800ae90 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800aeca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aece:	2b6c      	cmp	r3, #108	; 0x6c
 800aed0:	d003      	beq.n	800aeda <f_printf+0xf6>
 800aed2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aed6:	2b4c      	cmp	r3, #76	; 0x4c
 800aed8:	d10d      	bne.n	800aef6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800aeda:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aede:	f043 0304 	orr.w	r3, r3, #4
 800aee2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800aef6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 8183 	beq.w	800b206 <f_printf+0x422>
		d = c;
 800af00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800af04:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800af08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800af0c:	2b60      	cmp	r3, #96	; 0x60
 800af0e:	d908      	bls.n	800af22 <f_printf+0x13e>
 800af10:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800af14:	2b7a      	cmp	r3, #122	; 0x7a
 800af16:	d804      	bhi.n	800af22 <f_printf+0x13e>
 800af18:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800af1c:	3b20      	subs	r3, #32
 800af1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800af22:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800af26:	3b42      	subs	r3, #66	; 0x42
 800af28:	2b16      	cmp	r3, #22
 800af2a:	f200 8098 	bhi.w	800b05e <f_printf+0x27a>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <f_printf+0x150>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800b03f 	.word	0x0800b03f
 800af38:	0800b027 	.word	0x0800b027
 800af3c:	0800b04f 	.word	0x0800b04f
 800af40:	0800b05f 	.word	0x0800b05f
 800af44:	0800b05f 	.word	0x0800b05f
 800af48:	0800b05f 	.word	0x0800b05f
 800af4c:	0800b05f 	.word	0x0800b05f
 800af50:	0800b05f 	.word	0x0800b05f
 800af54:	0800b05f 	.word	0x0800b05f
 800af58:	0800b05f 	.word	0x0800b05f
 800af5c:	0800b05f 	.word	0x0800b05f
 800af60:	0800b05f 	.word	0x0800b05f
 800af64:	0800b05f 	.word	0x0800b05f
 800af68:	0800b047 	.word	0x0800b047
 800af6c:	0800b05f 	.word	0x0800b05f
 800af70:	0800b05f 	.word	0x0800b05f
 800af74:	0800b05f 	.word	0x0800b05f
 800af78:	0800af91 	.word	0x0800af91
 800af7c:	0800b05f 	.word	0x0800b05f
 800af80:	0800b04f 	.word	0x0800b04f
 800af84:	0800b05f 	.word	0x0800b05f
 800af88:	0800b05f 	.word	0x0800b05f
 800af8c:	0800b057 	.word	0x0800b057
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800af90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af92:	1d1a      	adds	r2, r3, #4
 800af94:	67ba      	str	r2, [r7, #120]	; 0x78
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800afa0:	e004      	b.n	800afac <f_printf+0x1c8>
 800afa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa6:	3301      	adds	r3, #1
 800afa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800afac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800afae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afb2:	4413      	add	r3, r2
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1f3      	bne.n	800afa2 <f_printf+0x1be>
			if (!(f & 2)) {
 800afba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d11a      	bne.n	800affc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800afc6:	e005      	b.n	800afd4 <f_printf+0x1f0>
 800afc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afcc:	2120      	movs	r1, #32
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fe90 	bl	800acf4 <putc_bfd>
 800afd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afde:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d8f0      	bhi.n	800afc8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800afe6:	e009      	b.n	800affc <f_printf+0x218>
 800afe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	67fa      	str	r2, [r7, #124]	; 0x7c
 800afee:	781a      	ldrb	r2, [r3, #0]
 800aff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fe7c 	bl	800acf4 <putc_bfd>
 800affc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1f1      	bne.n	800afe8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b004:	e005      	b.n	800b012 <f_printf+0x22e>
 800b006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b00a:	2120      	movs	r1, #32
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff fe71 	bl	800acf4 <putc_bfd>
 800b012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b01c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b020:	429a      	cmp	r2, r3
 800b022:	d8f0      	bhi.n	800b006 <f_printf+0x222>
			continue;
 800b024:	e0ec      	b.n	800b200 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b028:	1d1a      	adds	r2, r3, #4
 800b02a:	67ba      	str	r2, [r7, #120]	; 0x78
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b034:	4611      	mov	r1, r2
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff fe5c 	bl	800acf4 <putc_bfd>
 800b03c:	e0e0      	b.n	800b200 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b03e:	2302      	movs	r3, #2
 800b040:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b044:	e014      	b.n	800b070 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b046:	2308      	movs	r3, #8
 800b048:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b04c:	e010      	b.n	800b070 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b04e:	230a      	movs	r3, #10
 800b050:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b054:	e00c      	b.n	800b070 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b056:	2310      	movs	r3, #16
 800b058:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b05c:	e008      	b.n	800b070 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b05e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b066:	4611      	mov	r1, r2
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff fe43 	bl	800acf4 <putc_bfd>
 800b06e:	e0c7      	b.n	800b200 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b070:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <f_printf+0x2a2>
 800b07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	67ba      	str	r2, [r7, #120]	; 0x78
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	e00c      	b.n	800b0a0 <f_printf+0x2bc>
 800b086:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b08a:	2b44      	cmp	r3, #68	; 0x44
 800b08c:	d104      	bne.n	800b098 <f_printf+0x2b4>
 800b08e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b090:	1d1a      	adds	r2, r3, #4
 800b092:	67ba      	str	r2, [r7, #120]	; 0x78
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	e003      	b.n	800b0a0 <f_printf+0x2bc>
 800b098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b09a:	1d1a      	adds	r2, r3, #4
 800b09c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b0a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b0a8:	2b44      	cmp	r3, #68	; 0x44
 800b0aa:	d10e      	bne.n	800b0ca <f_printf+0x2e6>
 800b0ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	da0a      	bge.n	800b0ca <f_printf+0x2e6>
			v = 0 - v;
 800b0b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0b8:	425b      	negs	r3, r3
 800b0ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b0be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b0c2:	f043 0308 	orr.w	r3, r3, #8
 800b0c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b0d0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b0d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0dc:	fb02 f201 	mul.w	r2, r2, r1
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b0e6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b0ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b0f6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b0fa:	2b09      	cmp	r3, #9
 800b0fc:	d90b      	bls.n	800b116 <f_printf+0x332>
 800b0fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b102:	2b78      	cmp	r3, #120	; 0x78
 800b104:	d101      	bne.n	800b10a <f_printf+0x326>
 800b106:	2227      	movs	r2, #39	; 0x27
 800b108:	e000      	b.n	800b10c <f_printf+0x328>
 800b10a:	2207      	movs	r2, #7
 800b10c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b110:	4413      	add	r3, r2
 800b112:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b120:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b124:	3230      	adds	r2, #48	; 0x30
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b12c:	440b      	add	r3, r1
 800b12e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <f_printf+0x35e>
 800b13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b13e:	2b1f      	cmp	r3, #31
 800b140:	d9c6      	bls.n	800b0d0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b142:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <f_printf+0x380>
 800b14e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b158:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b15c:	4413      	add	r3, r2
 800b15e:	222d      	movs	r2, #45	; 0x2d
 800b160:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b16c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <f_printf+0x398>
 800b178:	2330      	movs	r3, #48	; 0x30
 800b17a:	e000      	b.n	800b17e <f_printf+0x39a>
 800b17c:	2320      	movs	r3, #32
 800b17e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b182:	e007      	b.n	800b194 <f_printf+0x3b0>
 800b184:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b18c:	4611      	mov	r1, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff fdb0 	bl	800acf4 <putc_bfd>
 800b194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b198:	f003 0302 	and.w	r3, r3, #2
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <f_printf+0x3ce>
 800b1a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d8e8      	bhi.n	800b184 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b1b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1bc:	f107 020c 	add.w	r2, r7, #12
 800b1c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1c4:	4413      	add	r3, r2
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fd90 	bl	800acf4 <putc_bfd>
		} while (i);
 800b1d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1ea      	bne.n	800b1b2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b1dc:	e007      	b.n	800b1ee <f_printf+0x40a>
 800b1de:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b1e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fd83 	bl	800acf4 <putc_bfd>
 800b1ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d8ee      	bhi.n	800b1de <f_printf+0x3fa>
		c = *fmt++;
 800b200:	e5fe      	b.n	800ae00 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b202:	bf00      	nop
 800b204:	e000      	b.n	800b208 <f_printf+0x424>
		if (!c) break;
 800b206:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fdae 	bl	800ad6e <putc_flush>
 800b212:	4603      	mov	r3, r0
}
 800b214:	4618      	mov	r0, r3
 800b216:	379c      	adds	r7, #156	; 0x9c
 800b218:	46bd      	mov	sp, r7
 800b21a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b21e:	b003      	add	sp, #12
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop

0800b224 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	4613      	mov	r3, r2
 800b230:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b232:	2301      	movs	r3, #1
 800b234:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b23a:	4b1f      	ldr	r3, [pc, #124]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b23c:	7b9b      	ldrb	r3, [r3, #14]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b01      	cmp	r3, #1
 800b242:	d831      	bhi.n	800b2a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b244:	4b1c      	ldr	r3, [pc, #112]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b246:	7b9b      	ldrb	r3, [r3, #14]
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b1a      	ldr	r3, [pc, #104]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b24e:	2100      	movs	r1, #0
 800b250:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b252:	4b19      	ldr	r3, [pc, #100]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b254:	7b9b      	ldrb	r3, [r3, #14]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	4a17      	ldr	r2, [pc, #92]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b262:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b264:	7b9b      	ldrb	r3, [r3, #14]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	461a      	mov	r2, r3
 800b26a:	4b13      	ldr	r3, [pc, #76]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b26c:	4413      	add	r3, r2
 800b26e:	79fa      	ldrb	r2, [r7, #7]
 800b270:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800b272:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b274:	7b9b      	ldrb	r3, [r3, #14]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	b2d1      	uxtb	r1, r2
 800b27c:	4a0e      	ldr	r2, [pc, #56]	; (800b2b8 <FATFS_LinkDriverEx+0x94>)
 800b27e:	7391      	strb	r1, [r2, #14]
 800b280:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b282:	7dbb      	ldrb	r3, [r7, #22]
 800b284:	3330      	adds	r3, #48	; 0x30
 800b286:	b2da      	uxtb	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3301      	adds	r3, #1
 800b290:	223a      	movs	r2, #58	; 0x3a
 800b292:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	3302      	adds	r3, #2
 800b298:	222f      	movs	r2, #47	; 0x2f
 800b29a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3303      	adds	r3, #3
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	2000a488 	.word	0x2000a488

0800b2bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff ffaa 	bl	800b224 <FATFS_LinkDriverEx>
 800b2d0:	4603      	mov	r3, r0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f006 fef2 	bl	80120cc <malloc>
 800b2e8:	4603      	mov	r3, r0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b082      	sub	sp, #8
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f006 feee 	bl	80120dc <free>
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b314:	88fb      	ldrh	r3, [r7, #6]
 800b316:	2b7f      	cmp	r3, #127	; 0x7f
 800b318:	d802      	bhi.n	800b320 <ff_convert+0x18>
		c = chr;
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	81fb      	strh	r3, [r7, #14]
 800b31e:	e025      	b.n	800b36c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00b      	beq.n	800b33e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b326:	88fb      	ldrh	r3, [r7, #6]
 800b328:	2bff      	cmp	r3, #255	; 0xff
 800b32a:	d805      	bhi.n	800b338 <ff_convert+0x30>
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	3b80      	subs	r3, #128	; 0x80
 800b330:	4a12      	ldr	r2, [pc, #72]	; (800b37c <ff_convert+0x74>)
 800b332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b336:	e000      	b.n	800b33a <ff_convert+0x32>
 800b338:	2300      	movs	r3, #0
 800b33a:	81fb      	strh	r3, [r7, #14]
 800b33c:	e016      	b.n	800b36c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b33e:	2300      	movs	r3, #0
 800b340:	81fb      	strh	r3, [r7, #14]
 800b342:	e009      	b.n	800b358 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b344:	89fb      	ldrh	r3, [r7, #14]
 800b346:	4a0d      	ldr	r2, [pc, #52]	; (800b37c <ff_convert+0x74>)
 800b348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b34c:	88fa      	ldrh	r2, [r7, #6]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d006      	beq.n	800b360 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b352:	89fb      	ldrh	r3, [r7, #14]
 800b354:	3301      	adds	r3, #1
 800b356:	81fb      	strh	r3, [r7, #14]
 800b358:	89fb      	ldrh	r3, [r7, #14]
 800b35a:	2b7f      	cmp	r3, #127	; 0x7f
 800b35c:	d9f2      	bls.n	800b344 <ff_convert+0x3c>
 800b35e:	e000      	b.n	800b362 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b360:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b362:	89fb      	ldrh	r3, [r7, #14]
 800b364:	3380      	adds	r3, #128	; 0x80
 800b366:	b29b      	uxth	r3, r3
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b36c:	89fb      	ldrh	r3, [r7, #14]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	080220a4 	.word	0x080220a4

0800b380 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b390:	d201      	bcs.n	800b396 <ff_wtoupper+0x16>
 800b392:	4b3e      	ldr	r3, [pc, #248]	; (800b48c <ff_wtoupper+0x10c>)
 800b394:	e000      	b.n	800b398 <ff_wtoupper+0x18>
 800b396:	4b3e      	ldr	r3, [pc, #248]	; (800b490 <ff_wtoupper+0x110>)
 800b398:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	1c9a      	adds	r2, r3, #2
 800b39e:	617a      	str	r2, [r7, #20]
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b3a4:	8a7b      	ldrh	r3, [r7, #18]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d068      	beq.n	800b47c <ff_wtoupper+0xfc>
 800b3aa:	88fa      	ldrh	r2, [r7, #6]
 800b3ac:	8a7b      	ldrh	r3, [r7, #18]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d364      	bcc.n	800b47c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	1c9a      	adds	r2, r3, #2
 800b3b6:	617a      	str	r2, [r7, #20]
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	823b      	strh	r3, [r7, #16]
 800b3bc:	8a3b      	ldrh	r3, [r7, #16]
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	81fb      	strh	r3, [r7, #14]
 800b3c2:	8a3b      	ldrh	r3, [r7, #16]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b3c8:	88fa      	ldrh	r2, [r7, #6]
 800b3ca:	8a79      	ldrh	r1, [r7, #18]
 800b3cc:	8a3b      	ldrh	r3, [r7, #16]
 800b3ce:	440b      	add	r3, r1
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	da49      	bge.n	800b468 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b3d4:	89fb      	ldrh	r3, [r7, #14]
 800b3d6:	2b08      	cmp	r3, #8
 800b3d8:	d84f      	bhi.n	800b47a <ff_wtoupper+0xfa>
 800b3da:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <ff_wtoupper+0x60>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b405 	.word	0x0800b405
 800b3e4:	0800b417 	.word	0x0800b417
 800b3e8:	0800b42d 	.word	0x0800b42d
 800b3ec:	0800b435 	.word	0x0800b435
 800b3f0:	0800b43d 	.word	0x0800b43d
 800b3f4:	0800b445 	.word	0x0800b445
 800b3f8:	0800b44d 	.word	0x0800b44d
 800b3fc:	0800b455 	.word	0x0800b455
 800b400:	0800b45d 	.word	0x0800b45d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b404:	88fa      	ldrh	r2, [r7, #6]
 800b406:	8a7b      	ldrh	r3, [r7, #18]
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	4413      	add	r3, r2
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	80fb      	strh	r3, [r7, #6]
 800b414:	e027      	b.n	800b466 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b416:	88fa      	ldrh	r2, [r7, #6]
 800b418:	8a7b      	ldrh	r3, [r7, #18]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	b29b      	uxth	r3, r3
 800b424:	88fa      	ldrh	r2, [r7, #6]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	80fb      	strh	r3, [r7, #6]
 800b42a:	e01c      	b.n	800b466 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b42c:	88fb      	ldrh	r3, [r7, #6]
 800b42e:	3b10      	subs	r3, #16
 800b430:	80fb      	strh	r3, [r7, #6]
 800b432:	e018      	b.n	800b466 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b434:	88fb      	ldrh	r3, [r7, #6]
 800b436:	3b20      	subs	r3, #32
 800b438:	80fb      	strh	r3, [r7, #6]
 800b43a:	e014      	b.n	800b466 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b43c:	88fb      	ldrh	r3, [r7, #6]
 800b43e:	3b30      	subs	r3, #48	; 0x30
 800b440:	80fb      	strh	r3, [r7, #6]
 800b442:	e010      	b.n	800b466 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b444:	88fb      	ldrh	r3, [r7, #6]
 800b446:	3b1a      	subs	r3, #26
 800b448:	80fb      	strh	r3, [r7, #6]
 800b44a:	e00c      	b.n	800b466 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b44c:	88fb      	ldrh	r3, [r7, #6]
 800b44e:	3308      	adds	r3, #8
 800b450:	80fb      	strh	r3, [r7, #6]
 800b452:	e008      	b.n	800b466 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b454:	88fb      	ldrh	r3, [r7, #6]
 800b456:	3b50      	subs	r3, #80	; 0x50
 800b458:	80fb      	strh	r3, [r7, #6]
 800b45a:	e004      	b.n	800b466 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b45c:	88fb      	ldrh	r3, [r7, #6]
 800b45e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b462:	80fb      	strh	r3, [r7, #6]
 800b464:	bf00      	nop
			}
			break;
 800b466:	e008      	b.n	800b47a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b468:	89fb      	ldrh	r3, [r7, #14]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d195      	bne.n	800b39a <ff_wtoupper+0x1a>
 800b46e:	8a3b      	ldrh	r3, [r7, #16]
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	4413      	add	r3, r2
 800b476:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b478:	e78f      	b.n	800b39a <ff_wtoupper+0x1a>
			break;
 800b47a:	bf00      	nop
	}

	return chr;
 800b47c:	88fb      	ldrh	r3, [r7, #6]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	080221a4 	.word	0x080221a4
 800b490:	08022398 	.word	0x08022398

0800b494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b498:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <HAL_Init+0x40>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a0d      	ldr	r2, [pc, #52]	; (800b4d4 <HAL_Init+0x40>)
 800b49e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b4a4:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <HAL_Init+0x40>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <HAL_Init+0x40>)
 800b4aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b4b0:	4b08      	ldr	r3, [pc, #32]	; (800b4d4 <HAL_Init+0x40>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a07      	ldr	r2, [pc, #28]	; (800b4d4 <HAL_Init+0x40>)
 800b4b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b4bc:	2003      	movs	r0, #3
 800b4be:	f000 fea9 	bl	800c214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	f000 f808 	bl	800b4d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b4c8:	f7f5 ff1e 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	40023c00 	.word	0x40023c00

0800b4d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b4e0:	4b12      	ldr	r3, [pc, #72]	; (800b52c <HAL_InitTick+0x54>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	4b12      	ldr	r3, [pc, #72]	; (800b530 <HAL_InitTick+0x58>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 fecf 	bl	800c29a <HAL_SYSTICK_Config>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e00e      	b.n	800b524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b0f      	cmp	r3, #15
 800b50a:	d80a      	bhi.n	800b522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b50c:	2200      	movs	r2, #0
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	f000 fe89 	bl	800c22a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b518:	4a06      	ldr	r2, [pc, #24]	; (800b534 <HAL_InitTick+0x5c>)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	e000      	b.n	800b524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
}
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20000000 	.word	0x20000000
 800b530:	20000060 	.word	0x20000060
 800b534:	2000005c 	.word	0x2000005c

0800b538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <HAL_IncTick+0x20>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	4b06      	ldr	r3, [pc, #24]	; (800b55c <HAL_IncTick+0x24>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4413      	add	r3, r2
 800b548:	4a04      	ldr	r2, [pc, #16]	; (800b55c <HAL_IncTick+0x24>)
 800b54a:	6013      	str	r3, [r2, #0]
}
 800b54c:	bf00      	nop
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	20000060 	.word	0x20000060
 800b55c:	2000af64 	.word	0x2000af64

0800b560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b560:	b480      	push	{r7}
 800b562:	af00      	add	r7, sp, #0
  return uwTick;
 800b564:	4b03      	ldr	r3, [pc, #12]	; (800b574 <HAL_GetTick+0x14>)
 800b566:	681b      	ldr	r3, [r3, #0]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	2000af64 	.word	0x2000af64

0800b578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b580:	f7ff ffee 	bl	800b560 <HAL_GetTick>
 800b584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d005      	beq.n	800b59e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b592:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <HAL_Delay+0x40>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4413      	add	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b59e:	bf00      	nop
 800b5a0:	f7ff ffde 	bl	800b560 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d8f7      	bhi.n	800b5a0 <HAL_Delay+0x28>
  {
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20000060 	.word	0x20000060

0800b5bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e033      	b.n	800b63a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d109      	bne.n	800b5ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fa fcc6 	bl	8005f6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f003 0310 	and.w	r3, r3, #16
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d118      	bne.n	800b62c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b602:	f023 0302 	bic.w	r3, r3, #2
 800b606:	f043 0202 	orr.w	r2, r3, #2
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fb86 	bl	800bd20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	f023 0303 	bic.w	r3, r3, #3
 800b622:	f043 0201 	orr.w	r2, r3, #1
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	641a      	str	r2, [r3, #64]	; 0x40
 800b62a:	e001      	b.n	800b630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b638:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	2300      	movs	r3, #0
 800b650:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	bf0c      	ite	eq
 800b660:	2301      	moveq	r3, #1
 800b662:	2300      	movne	r3, #0
 800b664:	b2db      	uxtb	r3, r3
 800b666:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b20      	cmp	r3, #32
 800b674:	bf0c      	ite	eq
 800b676:	2301      	moveq	r3, #1
 800b678:	2300      	movne	r3, #0
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d049      	beq.n	800b718 <HAL_ADC_IRQHandler+0xd6>
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d046      	beq.n	800b718 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68e:	f003 0310 	and.w	r3, r3, #16
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d12b      	bne.n	800b708 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d127      	bne.n	800b708 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d006      	beq.n	800b6d4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d119      	bne.n	800b708 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0220 	bic.w	r2, r2, #32
 800b6e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d105      	bne.n	800b708 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b700:	f043 0201 	orr.w	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f9af 	bl	800ba6c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f06f 0212 	mvn.w	r2, #18
 800b716:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 0304 	and.w	r3, r3, #4
 800b722:	2b04      	cmp	r3, #4
 800b724:	bf0c      	ite	eq
 800b726:	2301      	moveq	r3, #1
 800b728:	2300      	movne	r3, #0
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b738:	2b80      	cmp	r3, #128	; 0x80
 800b73a:	bf0c      	ite	eq
 800b73c:	2301      	moveq	r3, #1
 800b73e:	2300      	movne	r3, #0
 800b740:	b2db      	uxtb	r3, r3
 800b742:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d057      	beq.n	800b7fa <HAL_ADC_IRQHandler+0x1b8>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d054      	beq.n	800b7fa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b754:	f003 0310 	and.w	r3, r3, #16
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b760:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d139      	bne.n	800b7ea <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b780:	2b00      	cmp	r3, #0
 800b782:	d006      	beq.n	800b792 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d12b      	bne.n	800b7ea <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d124      	bne.n	800b7ea <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d11d      	bne.n	800b7ea <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d119      	bne.n	800b7ea <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7c4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d105      	bne.n	800b7ea <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e2:	f043 0201 	orr.w	r2, r3, #1
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fc16 	bl	800c01c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f06f 020c 	mvn.w	r2, #12
 800b7f8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b01      	cmp	r3, #1
 800b806:	bf0c      	ite	eq
 800b808:	2301      	moveq	r3, #1
 800b80a:	2300      	movne	r3, #0
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81a:	2b40      	cmp	r3, #64	; 0x40
 800b81c:	bf0c      	ite	eq
 800b81e:	2301      	moveq	r3, #1
 800b820:	2300      	movne	r3, #0
 800b822:	b2db      	uxtb	r3, r3
 800b824:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d017      	beq.n	800b85c <HAL_ADC_IRQHandler+0x21a>
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d014      	beq.n	800b85c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d10d      	bne.n	800b85c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b844:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f921 	bl	800ba94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f06f 0201 	mvn.w	r2, #1
 800b85a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 0320 	and.w	r3, r3, #32
 800b866:	2b20      	cmp	r3, #32
 800b868:	bf0c      	ite	eq
 800b86a:	2301      	moveq	r3, #1
 800b86c:	2300      	movne	r3, #0
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b87c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b880:	bf0c      	ite	eq
 800b882:	2301      	moveq	r3, #1
 800b884:	2300      	movne	r3, #0
 800b886:	b2db      	uxtb	r3, r3
 800b888:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d015      	beq.n	800b8bc <HAL_ADC_IRQHandler+0x27a>
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d012      	beq.n	800b8bc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89a:	f043 0202 	orr.w	r2, r3, #2
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f06f 0220 	mvn.w	r2, #32
 800b8aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f8fb 	bl	800baa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f06f 0220 	mvn.w	r2, #32
 800b8ba:	601a      	str	r2, [r3, #0]
  }
}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d101      	bne.n	800b8e2 <HAL_ADC_Start_DMA+0x1e>
 800b8de:	2302      	movs	r3, #2
 800b8e0:	e0b1      	b.n	800ba46 <HAL_ADC_Start_DMA+0x182>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d018      	beq.n	800b92a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689a      	ldr	r2, [r3, #8]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f042 0201 	orr.w	r2, r2, #1
 800b906:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b908:	4b51      	ldr	r3, [pc, #324]	; (800ba50 <HAL_ADC_Start_DMA+0x18c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a51      	ldr	r2, [pc, #324]	; (800ba54 <HAL_ADC_Start_DMA+0x190>)
 800b90e:	fba2 2303 	umull	r2, r3, r2, r3
 800b912:	0c9a      	lsrs	r2, r3, #18
 800b914:	4613      	mov	r3, r2
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	4413      	add	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b91c:	e002      	b.n	800b924 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3b01      	subs	r3, #1
 800b922:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1f9      	bne.n	800b91e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b01      	cmp	r3, #1
 800b936:	f040 8085 	bne.w	800ba44 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b942:	f023 0301 	bic.w	r3, r3, #1
 800b946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d007      	beq.n	800b96c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b960:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b964:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b978:	d106      	bne.n	800b988 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	f023 0206 	bic.w	r2, r3, #6
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	645a      	str	r2, [r3, #68]	; 0x44
 800b986:	e002      	b.n	800b98e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b996:	4b30      	ldr	r3, [pc, #192]	; (800ba58 <HAL_ADC_Start_DMA+0x194>)
 800b998:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99e:	4a2f      	ldr	r2, [pc, #188]	; (800ba5c <HAL_ADC_Start_DMA+0x198>)
 800b9a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	4a2e      	ldr	r2, [pc, #184]	; (800ba60 <HAL_ADC_Start_DMA+0x19c>)
 800b9a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ae:	4a2d      	ldr	r2, [pc, #180]	; (800ba64 <HAL_ADC_Start_DMA+0x1a0>)
 800b9b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b9ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b9ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689a      	ldr	r2, [r3, #8]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	334c      	adds	r3, #76	; 0x4c
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f000 fd6e 	bl	800c4cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f003 031f 	and.w	r3, r3, #31
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10f      	bne.n	800ba1c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d11c      	bne.n	800ba44 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	689a      	ldr	r2, [r3, #8]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ba18:	609a      	str	r2, [r3, #8]
 800ba1a:	e013      	b.n	800ba44 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a11      	ldr	r2, [pc, #68]	; (800ba68 <HAL_ADC_Start_DMA+0x1a4>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d10e      	bne.n	800ba44 <HAL_ADC_Start_DMA+0x180>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d107      	bne.n	800ba44 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ba42:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000000 	.word	0x20000000
 800ba54:	431bde83 	.word	0x431bde83
 800ba58:	40012300 	.word	0x40012300
 800ba5c:	0800bf19 	.word	0x0800bf19
 800ba60:	0800bfd3 	.word	0x0800bfd3
 800ba64:	0800bfef 	.word	0x0800bfef
 800ba68:	40012000 	.word	0x40012000

0800ba6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d101      	bne.n	800bad8 <HAL_ADC_ConfigChannel+0x1c>
 800bad4:	2302      	movs	r3, #2
 800bad6:	e113      	b.n	800bd00 <HAL_ADC_ConfigChannel+0x244>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b09      	cmp	r3, #9
 800bae6:	d925      	bls.n	800bb34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68d9      	ldr	r1, [r3, #12]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	461a      	mov	r2, r3
 800baf6:	4613      	mov	r3, r2
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4413      	add	r3, r2
 800bafc:	3b1e      	subs	r3, #30
 800bafe:	2207      	movs	r2, #7
 800bb00:	fa02 f303 	lsl.w	r3, r2, r3
 800bb04:	43da      	mvns	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	400a      	ands	r2, r1
 800bb0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68d9      	ldr	r1, [r3, #12]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	689a      	ldr	r2, [r3, #8]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	4618      	mov	r0, r3
 800bb20:	4603      	mov	r3, r0
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4403      	add	r3, r0
 800bb26:	3b1e      	subs	r3, #30
 800bb28:	409a      	lsls	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	60da      	str	r2, [r3, #12]
 800bb32:	e022      	b.n	800bb7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6919      	ldr	r1, [r3, #16]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	461a      	mov	r2, r3
 800bb42:	4613      	mov	r3, r2
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	4413      	add	r3, r2
 800bb48:	2207      	movs	r2, #7
 800bb4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb4e:	43da      	mvns	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	400a      	ands	r2, r1
 800bb56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6919      	ldr	r1, [r3, #16]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	689a      	ldr	r2, [r3, #8]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	4618      	mov	r0, r3
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4403      	add	r3, r0
 800bb70:	409a      	lsls	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	2b06      	cmp	r3, #6
 800bb80:	d824      	bhi.n	800bbcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	3b05      	subs	r3, #5
 800bb94:	221f      	movs	r2, #31
 800bb96:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9a:	43da      	mvns	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	400a      	ands	r2, r1
 800bba2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	3b05      	subs	r3, #5
 800bbbe:	fa00 f203 	lsl.w	r2, r0, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	635a      	str	r2, [r3, #52]	; 0x34
 800bbca:	e04c      	b.n	800bc66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	2b0c      	cmp	r3, #12
 800bbd2:	d824      	bhi.n	800bc1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3b23      	subs	r3, #35	; 0x23
 800bbe6:	221f      	movs	r2, #31
 800bbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbec:	43da      	mvns	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	400a      	ands	r2, r1
 800bbf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	4618      	mov	r0, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	3b23      	subs	r3, #35	; 0x23
 800bc10:	fa00 f203 	lsl.w	r2, r0, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	631a      	str	r2, [r3, #48]	; 0x30
 800bc1c:	e023      	b.n	800bc66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	3b41      	subs	r3, #65	; 0x41
 800bc30:	221f      	movs	r2, #31
 800bc32:	fa02 f303 	lsl.w	r3, r2, r3
 800bc36:	43da      	mvns	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	400a      	ands	r2, r1
 800bc3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	3b41      	subs	r3, #65	; 0x41
 800bc5a:	fa00 f203 	lsl.w	r2, r0, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bc66:	4b29      	ldr	r3, [pc, #164]	; (800bd0c <HAL_ADC_ConfigChannel+0x250>)
 800bc68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a28      	ldr	r2, [pc, #160]	; (800bd10 <HAL_ADC_ConfigChannel+0x254>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d10f      	bne.n	800bc94 <HAL_ADC_ConfigChannel+0x1d8>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b12      	cmp	r3, #18
 800bc7a:	d10b      	bne.n	800bc94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a1d      	ldr	r2, [pc, #116]	; (800bd10 <HAL_ADC_ConfigChannel+0x254>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d12b      	bne.n	800bcf6 <HAL_ADC_ConfigChannel+0x23a>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a1c      	ldr	r2, [pc, #112]	; (800bd14 <HAL_ADC_ConfigChannel+0x258>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <HAL_ADC_ConfigChannel+0x1f4>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b11      	cmp	r3, #17
 800bcae:	d122      	bne.n	800bcf6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a11      	ldr	r2, [pc, #68]	; (800bd14 <HAL_ADC_ConfigChannel+0x258>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d111      	bne.n	800bcf6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bcd2:	4b11      	ldr	r3, [pc, #68]	; (800bd18 <HAL_ADC_ConfigChannel+0x25c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a11      	ldr	r2, [pc, #68]	; (800bd1c <HAL_ADC_ConfigChannel+0x260>)
 800bcd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcdc:	0c9a      	lsrs	r2, r3, #18
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bce8:	e002      	b.n	800bcf0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1f9      	bne.n	800bcea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	40012300 	.word	0x40012300
 800bd10:	40012000 	.word	0x40012000
 800bd14:	10000012 	.word	0x10000012
 800bd18:	20000000 	.word	0x20000000
 800bd1c:	431bde83 	.word	0x431bde83

0800bd20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bd28:	4b79      	ldr	r3, [pc, #484]	; (800bf10 <ADC_Init+0x1f0>)
 800bd2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	431a      	orrs	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6859      	ldr	r1, [r3, #4]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	021a      	lsls	r2, r3, #8
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	430a      	orrs	r2, r1
 800bd68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bd78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6859      	ldr	r1, [r3, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689a      	ldr	r2, [r3, #8]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	430a      	orrs	r2, r1
 800bd8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6899      	ldr	r1, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68da      	ldr	r2, [r3, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	430a      	orrs	r2, r1
 800bdac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb2:	4a58      	ldr	r2, [pc, #352]	; (800bf14 <ADC_Init+0x1f4>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d022      	beq.n	800bdfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689a      	ldr	r2, [r3, #8]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bdc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6899      	ldr	r1, [r3, #8]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bde8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6899      	ldr	r1, [r3, #8]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	e00f      	b.n	800be1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689a      	ldr	r2, [r3, #8]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800be0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800be1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689a      	ldr	r2, [r3, #8]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f022 0202 	bic.w	r2, r2, #2
 800be2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	6899      	ldr	r1, [r3, #8]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7e1b      	ldrb	r3, [r3, #24]
 800be38:	005a      	lsls	r2, r3, #1
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d01b      	beq.n	800be84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800be6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6859      	ldr	r1, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	3b01      	subs	r3, #1
 800be78:	035a      	lsls	r2, r3, #13
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
 800be82:	e007      	b.n	800be94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	3b01      	subs	r3, #1
 800beb0:	051a      	lsls	r2, r3, #20
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	6899      	ldr	r1, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bed6:	025a      	lsls	r2, r3, #9
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	430a      	orrs	r2, r1
 800bede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6899      	ldr	r1, [r3, #8]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	029a      	lsls	r2, r3, #10
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	430a      	orrs	r2, r1
 800bf02:	609a      	str	r2, [r3, #8]
}
 800bf04:	bf00      	nop
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	40012300 	.word	0x40012300
 800bf14:	0f000001 	.word	0x0f000001

0800bf18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d13c      	bne.n	800bfac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d12b      	bne.n	800bfa4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d127      	bne.n	800bfa4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d006      	beq.n	800bf70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d119      	bne.n	800bfa4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f022 0220 	bic.w	r2, r2, #32
 800bf7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	f043 0201 	orr.w	r2, r3, #1
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f7ff fd61 	bl	800ba6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bfaa:	e00e      	b.n	800bfca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	f003 0310 	and.w	r3, r3, #16
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7ff fd75 	bl	800baa8 <HAL_ADC_ErrorCallback>
}
 800bfbe:	e004      	b.n	800bfca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
}
 800bfca:	bf00      	nop
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f7ff fd4d 	bl	800ba80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bfe6:	bf00      	nop
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2240      	movs	r2, #64	; 0x40
 800c000:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c006:	f043 0204 	orr.w	r2, r3, #4
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f7ff fd4a 	bl	800baa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c014:	bf00      	nop
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f003 0307 	and.w	r3, r3, #7
 800c03e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c040:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <__NVIC_SetPriorityGrouping+0x44>)
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c04c:	4013      	ands	r3, r2
 800c04e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c05c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c062:	4a04      	ldr	r2, [pc, #16]	; (800c074 <__NVIC_SetPriorityGrouping+0x44>)
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	60d3      	str	r3, [r2, #12]
}
 800c068:	bf00      	nop
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	e000ed00 	.word	0xe000ed00

0800c078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c078:	b480      	push	{r7}
 800c07a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <__NVIC_GetPriorityGrouping+0x18>)
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	0a1b      	lsrs	r3, r3, #8
 800c082:	f003 0307 	and.w	r3, r3, #7
}
 800c086:	4618      	mov	r0, r3
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	e000ed00 	.word	0xe000ed00

0800c094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	4603      	mov	r3, r0
 800c09c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	db0b      	blt.n	800c0be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	f003 021f 	and.w	r2, r3, #31
 800c0ac:	4907      	ldr	r1, [pc, #28]	; (800c0cc <__NVIC_EnableIRQ+0x38>)
 800c0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	2001      	movs	r0, #1
 800c0b6:	fa00 f202 	lsl.w	r2, r0, r2
 800c0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c0be:	bf00      	nop
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	e000e100 	.word	0xe000e100

0800c0d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	db10      	blt.n	800c104 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0e2:	79fb      	ldrb	r3, [r7, #7]
 800c0e4:	f003 021f 	and.w	r2, r3, #31
 800c0e8:	4909      	ldr	r1, [pc, #36]	; (800c110 <__NVIC_DisableIRQ+0x40>)
 800c0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ee:	095b      	lsrs	r3, r3, #5
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	fa00 f202 	lsl.w	r2, r0, r2
 800c0f6:	3320      	adds	r3, #32
 800c0f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c0fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c100:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	e000e100 	.word	0xe000e100

0800c114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	6039      	str	r1, [r7, #0]
 800c11e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c124:	2b00      	cmp	r3, #0
 800c126:	db0a      	blt.n	800c13e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	490c      	ldr	r1, [pc, #48]	; (800c160 <__NVIC_SetPriority+0x4c>)
 800c12e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c132:	0112      	lsls	r2, r2, #4
 800c134:	b2d2      	uxtb	r2, r2
 800c136:	440b      	add	r3, r1
 800c138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c13c:	e00a      	b.n	800c154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	4908      	ldr	r1, [pc, #32]	; (800c164 <__NVIC_SetPriority+0x50>)
 800c144:	79fb      	ldrb	r3, [r7, #7]
 800c146:	f003 030f 	and.w	r3, r3, #15
 800c14a:	3b04      	subs	r3, #4
 800c14c:	0112      	lsls	r2, r2, #4
 800c14e:	b2d2      	uxtb	r2, r2
 800c150:	440b      	add	r3, r1
 800c152:	761a      	strb	r2, [r3, #24]
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	e000e100 	.word	0xe000e100
 800c164:	e000ed00 	.word	0xe000ed00

0800c168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c168:	b480      	push	{r7}
 800c16a:	b089      	sub	sp, #36	; 0x24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f003 0307 	and.w	r3, r3, #7
 800c17a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	f1c3 0307 	rsb	r3, r3, #7
 800c182:	2b04      	cmp	r3, #4
 800c184:	bf28      	it	cs
 800c186:	2304      	movcs	r3, #4
 800c188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	3304      	adds	r3, #4
 800c18e:	2b06      	cmp	r3, #6
 800c190:	d902      	bls.n	800c198 <NVIC_EncodePriority+0x30>
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	3b03      	subs	r3, #3
 800c196:	e000      	b.n	800c19a <NVIC_EncodePriority+0x32>
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c19c:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a6:	43da      	mvns	r2, r3
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	401a      	ands	r2, r3
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c1b0:	f04f 31ff 	mov.w	r1, #4294967295
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ba:	43d9      	mvns	r1, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c1c0:	4313      	orrs	r3, r2
         );
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3724      	adds	r7, #36	; 0x24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
	...

0800c1d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1e0:	d301      	bcc.n	800c1e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e00f      	b.n	800c206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c1e6:	4a0a      	ldr	r2, [pc, #40]	; (800c210 <SysTick_Config+0x40>)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c1ee:	210f      	movs	r1, #15
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f4:	f7ff ff8e 	bl	800c114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c1f8:	4b05      	ldr	r3, [pc, #20]	; (800c210 <SysTick_Config+0x40>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c1fe:	4b04      	ldr	r3, [pc, #16]	; (800c210 <SysTick_Config+0x40>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	e000e010 	.word	0xe000e010

0800c214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff ff07 	bl	800c030 <__NVIC_SetPriorityGrouping>
}
 800c222:	bf00      	nop
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b086      	sub	sp, #24
 800c22e:	af00      	add	r7, sp, #0
 800c230:	4603      	mov	r3, r0
 800c232:	60b9      	str	r1, [r7, #8]
 800c234:	607a      	str	r2, [r7, #4]
 800c236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c238:	2300      	movs	r3, #0
 800c23a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c23c:	f7ff ff1c 	bl	800c078 <__NVIC_GetPriorityGrouping>
 800c240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	6978      	ldr	r0, [r7, #20]
 800c248:	f7ff ff8e 	bl	800c168 <NVIC_EncodePriority>
 800c24c:	4602      	mov	r2, r0
 800c24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c252:	4611      	mov	r1, r2
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff ff5d 	bl	800c114 <__NVIC_SetPriority>
}
 800c25a:	bf00      	nop
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	4603      	mov	r3, r0
 800c26a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c26c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff ff0f 	bl	800c094 <__NVIC_EnableIRQ>
}
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b082      	sub	sp, #8
 800c282:	af00      	add	r7, sp, #0
 800c284:	4603      	mov	r3, r0
 800c286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff ff1f 	bl	800c0d0 <__NVIC_DisableIRQ>
}
 800c292:	bf00      	nop
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b082      	sub	sp, #8
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff ff94 	bl	800c1d0 <SysTick_Config>
 800c2a8:	4603      	mov	r3, r0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c2c0:	f7ff f94e 	bl	800b560 <HAL_GetTick>
 800c2c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d101      	bne.n	800c2d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e099      	b.n	800c404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f022 0201 	bic.w	r2, r2, #1
 800c2ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2f0:	e00f      	b.n	800c312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c2f2:	f7ff f935 	bl	800b560 <HAL_GetTick>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	d908      	bls.n	800c312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2220      	movs	r2, #32
 800c304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2203      	movs	r2, #3
 800c30a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e078      	b.n	800c404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e8      	bne.n	800c2f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	4b38      	ldr	r3, [pc, #224]	; (800c40c <HAL_DMA_Init+0x158>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685a      	ldr	r2, [r3, #4]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c33e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c34a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a1b      	ldr	r3, [r3, #32]
 800c35c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	4313      	orrs	r3, r2
 800c362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	2b04      	cmp	r3, #4
 800c36a:	d107      	bne.n	800c37c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c374:	4313      	orrs	r3, r2
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	4313      	orrs	r3, r2
 800c37a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f023 0307 	bic.w	r3, r3, #7
 800c392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a2:	2b04      	cmp	r3, #4
 800c3a4:	d117      	bne.n	800c3d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00e      	beq.n	800c3d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fafb 	bl	800c9b4 <DMA_CheckFifoParam>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d008      	beq.n	800c3d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2240      	movs	r2, #64	; 0x40
 800c3c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e016      	b.n	800c404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fab2 	bl	800c948 <DMA_CalcBaseAndBitshift>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3ec:	223f      	movs	r2, #63	; 0x3f
 800c3ee:	409a      	lsls	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	f010803f 	.word	0xf010803f

0800c410 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e050      	b.n	800c4c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d101      	bne.n	800c432 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800c42e:	2302      	movs	r3, #2
 800c430:	e048      	b.n	800c4c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 0201 	bic.w	r2, r2, #1
 800c440:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2200      	movs	r2, #0
 800c450:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2200      	movs	r2, #0
 800c458:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2200      	movs	r2, #0
 800c460:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2200      	movs	r2, #0
 800c468:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2221      	movs	r2, #33	; 0x21
 800c470:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa68 	bl	800c948 <DMA_CalcBaseAndBitshift>
 800c478:	4603      	mov	r3, r0
 800c47a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4a4:	223f      	movs	r2, #63	; 0x3f
 800c4a6:	409a      	lsls	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d101      	bne.n	800c4f2 <HAL_DMA_Start_IT+0x26>
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	e040      	b.n	800c574 <HAL_DMA_Start_IT+0xa8>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b01      	cmp	r3, #1
 800c504:	d12f      	bne.n	800c566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2202      	movs	r2, #2
 800c50a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f9e6 	bl	800c8ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c524:	223f      	movs	r2, #63	; 0x3f
 800c526:	409a      	lsls	r2, r3
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f042 0216 	orr.w	r2, r2, #22
 800c53a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	d007      	beq.n	800c554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 0208 	orr.w	r2, r2, #8
 800c552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0201 	orr.w	r2, r2, #1
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	e005      	b.n	800c572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c56e:	2302      	movs	r3, #2
 800c570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c572:	7dfb      	ldrb	r3, [r7, #23]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d004      	beq.n	800c59a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2280      	movs	r2, #128	; 0x80
 800c594:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e00c      	b.n	800c5b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2205      	movs	r2, #5
 800c59e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f022 0201 	bic.w	r2, r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c5cc:	4b92      	ldr	r3, [pc, #584]	; (800c818 <HAL_DMA_IRQHandler+0x258>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a92      	ldr	r2, [pc, #584]	; (800c81c <HAL_DMA_IRQHandler+0x25c>)
 800c5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d6:	0a9b      	lsrs	r3, r3, #10
 800c5d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ea:	2208      	movs	r2, #8
 800c5ec:	409a      	lsls	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d01a      	beq.n	800c62c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 0304 	and.w	r3, r3, #4
 800c600:	2b00      	cmp	r3, #0
 800c602:	d013      	beq.n	800c62c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f022 0204 	bic.w	r2, r2, #4
 800c612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c618:	2208      	movs	r2, #8
 800c61a:	409a      	lsls	r2, r3
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c624:	f043 0201 	orr.w	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c630:	2201      	movs	r2, #1
 800c632:	409a      	lsls	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4013      	ands	r3, r2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d012      	beq.n	800c662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00b      	beq.n	800c662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c64e:	2201      	movs	r2, #1
 800c650:	409a      	lsls	r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c65a:	f043 0202 	orr.w	r2, r3, #2
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c666:	2204      	movs	r2, #4
 800c668:	409a      	lsls	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4013      	ands	r3, r2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d012      	beq.n	800c698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 0302 	and.w	r3, r3, #2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c684:	2204      	movs	r2, #4
 800c686:	409a      	lsls	r2, r3
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c690:	f043 0204 	orr.w	r2, r3, #4
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c69c:	2210      	movs	r2, #16
 800c69e:	409a      	lsls	r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d043      	beq.n	800c730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0308 	and.w	r3, r3, #8
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d03c      	beq.n	800c730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ba:	2210      	movs	r2, #16
 800c6bc:	409a      	lsls	r2, r3
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d018      	beq.n	800c702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d108      	bne.n	800c6f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d024      	beq.n	800c730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	4798      	blx	r3
 800c6ee:	e01f      	b.n	800c730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01b      	beq.n	800c730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	4798      	blx	r3
 800c700:	e016      	b.n	800c730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d107      	bne.n	800c720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f022 0208 	bic.w	r2, r2, #8
 800c71e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c734:	2220      	movs	r2, #32
 800c736:	409a      	lsls	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4013      	ands	r3, r2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 808e 	beq.w	800c85e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 0310 	and.w	r3, r3, #16
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 8086 	beq.w	800c85e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c756:	2220      	movs	r2, #32
 800c758:	409a      	lsls	r2, r3
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b05      	cmp	r3, #5
 800c768:	d136      	bne.n	800c7d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0216 	bic.w	r2, r2, #22
 800c778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	695a      	ldr	r2, [r3, #20]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d103      	bne.n	800c79a <HAL_DMA_IRQHandler+0x1da>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c796:	2b00      	cmp	r3, #0
 800c798:	d007      	beq.n	800c7aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f022 0208 	bic.w	r2, r2, #8
 800c7a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ae:	223f      	movs	r2, #63	; 0x3f
 800c7b0:	409a      	lsls	r2, r3
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d07d      	beq.n	800c8ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	4798      	blx	r3
        }
        return;
 800c7d6:	e078      	b.n	800c8ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d01c      	beq.n	800c820 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d108      	bne.n	800c806 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d030      	beq.n	800c85e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	4798      	blx	r3
 800c804:	e02b      	b.n	800c85e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d027      	beq.n	800c85e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	4798      	blx	r3
 800c816:	e022      	b.n	800c85e <HAL_DMA_IRQHandler+0x29e>
 800c818:	20000000 	.word	0x20000000
 800c81c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10f      	bne.n	800c84e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f022 0210 	bic.w	r2, r2, #16
 800c83c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c852:	2b00      	cmp	r3, #0
 800c854:	d003      	beq.n	800c85e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c862:	2b00      	cmp	r3, #0
 800c864:	d032      	beq.n	800c8cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d022      	beq.n	800c8b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2205      	movs	r2, #5
 800c876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f022 0201 	bic.w	r2, r2, #1
 800c888:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60bb      	str	r3, [r7, #8]
 800c890:	697a      	ldr	r2, [r7, #20]
 800c892:	429a      	cmp	r2, r3
 800c894:	d307      	bcc.n	800c8a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f2      	bne.n	800c88a <HAL_DMA_IRQHandler+0x2ca>
 800c8a4:	e000      	b.n	800c8a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c8a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d005      	beq.n	800c8cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	4798      	blx	r3
 800c8c8:	e000      	b.n	800c8cc <HAL_DMA_IRQHandler+0x30c>
        return;
 800c8ca:	bf00      	nop
    }
  }
}
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop

0800c8d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c908:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	2b40      	cmp	r3, #64	; 0x40
 800c918:	d108      	bne.n	800c92c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c92a:	e007      	b.n	800c93c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	60da      	str	r2, [r3, #12]
}
 800c93c:	bf00      	nop
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	b2db      	uxtb	r3, r3
 800c956:	3b10      	subs	r3, #16
 800c958:	4a14      	ldr	r2, [pc, #80]	; (800c9ac <DMA_CalcBaseAndBitshift+0x64>)
 800c95a:	fba2 2303 	umull	r2, r3, r2, r3
 800c95e:	091b      	lsrs	r3, r3, #4
 800c960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c962:	4a13      	ldr	r2, [pc, #76]	; (800c9b0 <DMA_CalcBaseAndBitshift+0x68>)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2b03      	cmp	r3, #3
 800c974:	d909      	bls.n	800c98a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c97e:	f023 0303 	bic.w	r3, r3, #3
 800c982:	1d1a      	adds	r2, r3, #4
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	659a      	str	r2, [r3, #88]	; 0x58
 800c988:	e007      	b.n	800c99a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c992:	f023 0303 	bic.w	r3, r3, #3
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	aaaaaaab 	.word	0xaaaaaaab
 800c9b0:	08022454 	.word	0x08022454

0800c9b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d11f      	bne.n	800ca0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d855      	bhi.n	800ca80 <DMA_CheckFifoParam+0xcc>
 800c9d4:	a201      	add	r2, pc, #4	; (adr r2, 800c9dc <DMA_CheckFifoParam+0x28>)
 800c9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9da:	bf00      	nop
 800c9dc:	0800c9ed 	.word	0x0800c9ed
 800c9e0:	0800c9ff 	.word	0x0800c9ff
 800c9e4:	0800c9ed 	.word	0x0800c9ed
 800c9e8:	0800ca81 	.word	0x0800ca81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d045      	beq.n	800ca84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9fc:	e042      	b.n	800ca84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ca06:	d13f      	bne.n	800ca88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca0c:	e03c      	b.n	800ca88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca16:	d121      	bne.n	800ca5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d836      	bhi.n	800ca8c <DMA_CheckFifoParam+0xd8>
 800ca1e:	a201      	add	r2, pc, #4	; (adr r2, 800ca24 <DMA_CheckFifoParam+0x70>)
 800ca20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca24:	0800ca35 	.word	0x0800ca35
 800ca28:	0800ca3b 	.word	0x0800ca3b
 800ca2c:	0800ca35 	.word	0x0800ca35
 800ca30:	0800ca4d 	.word	0x0800ca4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	73fb      	strb	r3, [r7, #15]
      break;
 800ca38:	e02f      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d024      	beq.n	800ca90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca4a:	e021      	b.n	800ca90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ca54:	d11e      	bne.n	800ca94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ca5a:	e01b      	b.n	800ca94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d902      	bls.n	800ca68 <DMA_CheckFifoParam+0xb4>
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d003      	beq.n	800ca6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ca66:	e018      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca6c:	e015      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00e      	beq.n	800ca98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca7e:	e00b      	b.n	800ca98 <DMA_CheckFifoParam+0xe4>
      break;
 800ca80:	bf00      	nop
 800ca82:	e00a      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      break;
 800ca84:	bf00      	nop
 800ca86:	e008      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      break;
 800ca88:	bf00      	nop
 800ca8a:	e006      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      break;
 800ca8c:	bf00      	nop
 800ca8e:	e004      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      break;
 800ca90:	bf00      	nop
 800ca92:	e002      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      break;   
 800ca94:	bf00      	nop
 800ca96:	e000      	b.n	800ca9a <DMA_CheckFifoParam+0xe6>
      break;
 800ca98:	bf00      	nop
    }
  } 
  
  return status; 
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b089      	sub	sp, #36	; 0x24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cab2:	2300      	movs	r3, #0
 800cab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cab6:	2300      	movs	r3, #0
 800cab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800caba:	2300      	movs	r3, #0
 800cabc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	e159      	b.n	800cd78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cac4:	2201      	movs	r2, #1
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	fa02 f303 	lsl.w	r3, r2, r3
 800cacc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4013      	ands	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cad8:	693a      	ldr	r2, [r7, #16]
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	429a      	cmp	r2, r3
 800cade:	f040 8148 	bne.w	800cd72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d00b      	beq.n	800cb02 <HAL_GPIO_Init+0x5a>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d007      	beq.n	800cb02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800caf6:	2b11      	cmp	r3, #17
 800caf8:	d003      	beq.n	800cb02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	2b12      	cmp	r3, #18
 800cb00:	d130      	bne.n	800cb64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	2203      	movs	r2, #3
 800cb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb12:	43db      	mvns	r3, r3
 800cb14:	69ba      	ldr	r2, [r7, #24]
 800cb16:	4013      	ands	r3, r2
 800cb18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	68da      	ldr	r2, [r3, #12]
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	005b      	lsls	r3, r3, #1
 800cb22:	fa02 f303 	lsl.w	r3, r2, r3
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	69ba      	ldr	r2, [r7, #24]
 800cb30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb38:	2201      	movs	r2, #1
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb40:	43db      	mvns	r3, r3
 800cb42:	69ba      	ldr	r2, [r7, #24]
 800cb44:	4013      	ands	r3, r2
 800cb46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	091b      	lsrs	r3, r3, #4
 800cb4e:	f003 0201 	and.w	r2, r3, #1
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	fa02 f303 	lsl.w	r3, r2, r3
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	2203      	movs	r2, #3
 800cb70:	fa02 f303 	lsl.w	r3, r2, r3
 800cb74:	43db      	mvns	r3, r3
 800cb76:	69ba      	ldr	r2, [r7, #24]
 800cb78:	4013      	ands	r3, r2
 800cb7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	fa02 f303 	lsl.w	r3, r2, r3
 800cb88:	69ba      	ldr	r2, [r7, #24]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	69ba      	ldr	r2, [r7, #24]
 800cb92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d003      	beq.n	800cba4 <HAL_GPIO_Init+0xfc>
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	2b12      	cmp	r3, #18
 800cba2:	d123      	bne.n	800cbec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	08da      	lsrs	r2, r3, #3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3208      	adds	r2, #8
 800cbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	f003 0307 	and.w	r3, r3, #7
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	220f      	movs	r2, #15
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	43db      	mvns	r3, r3
 800cbc2:	69ba      	ldr	r2, [r7, #24]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	08da      	lsrs	r2, r3, #3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3208      	adds	r2, #8
 800cbe6:	69b9      	ldr	r1, [r7, #24]
 800cbe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	2203      	movs	r2, #3
 800cbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfc:	43db      	mvns	r3, r3
 800cbfe:	69ba      	ldr	r2, [r7, #24]
 800cc00:	4013      	ands	r3, r2
 800cc02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	f003 0203 	and.w	r2, r3, #3
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	fa02 f303 	lsl.w	r3, r2, r3
 800cc14:	69ba      	ldr	r2, [r7, #24]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	69ba      	ldr	r2, [r7, #24]
 800cc1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 80a2 	beq.w	800cd72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
 800cc32:	4b56      	ldr	r3, [pc, #344]	; (800cd8c <HAL_GPIO_Init+0x2e4>)
 800cc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc36:	4a55      	ldr	r2, [pc, #340]	; (800cd8c <HAL_GPIO_Init+0x2e4>)
 800cc38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc3c:	6453      	str	r3, [r2, #68]	; 0x44
 800cc3e:	4b53      	ldr	r3, [pc, #332]	; (800cd8c <HAL_GPIO_Init+0x2e4>)
 800cc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cc4a:	4a51      	ldr	r2, [pc, #324]	; (800cd90 <HAL_GPIO_Init+0x2e8>)
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	089b      	lsrs	r3, r3, #2
 800cc50:	3302      	adds	r3, #2
 800cc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	f003 0303 	and.w	r3, r3, #3
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	220f      	movs	r2, #15
 800cc62:	fa02 f303 	lsl.w	r3, r2, r3
 800cc66:	43db      	mvns	r3, r3
 800cc68:	69ba      	ldr	r2, [r7, #24]
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a48      	ldr	r2, [pc, #288]	; (800cd94 <HAL_GPIO_Init+0x2ec>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d019      	beq.n	800ccaa <HAL_GPIO_Init+0x202>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a47      	ldr	r2, [pc, #284]	; (800cd98 <HAL_GPIO_Init+0x2f0>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d013      	beq.n	800cca6 <HAL_GPIO_Init+0x1fe>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a46      	ldr	r2, [pc, #280]	; (800cd9c <HAL_GPIO_Init+0x2f4>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d00d      	beq.n	800cca2 <HAL_GPIO_Init+0x1fa>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a45      	ldr	r2, [pc, #276]	; (800cda0 <HAL_GPIO_Init+0x2f8>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d007      	beq.n	800cc9e <HAL_GPIO_Init+0x1f6>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a44      	ldr	r2, [pc, #272]	; (800cda4 <HAL_GPIO_Init+0x2fc>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d101      	bne.n	800cc9a <HAL_GPIO_Init+0x1f2>
 800cc96:	2304      	movs	r3, #4
 800cc98:	e008      	b.n	800ccac <HAL_GPIO_Init+0x204>
 800cc9a:	2307      	movs	r3, #7
 800cc9c:	e006      	b.n	800ccac <HAL_GPIO_Init+0x204>
 800cc9e:	2303      	movs	r3, #3
 800cca0:	e004      	b.n	800ccac <HAL_GPIO_Init+0x204>
 800cca2:	2302      	movs	r3, #2
 800cca4:	e002      	b.n	800ccac <HAL_GPIO_Init+0x204>
 800cca6:	2301      	movs	r3, #1
 800cca8:	e000      	b.n	800ccac <HAL_GPIO_Init+0x204>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	69fa      	ldr	r2, [r7, #28]
 800ccae:	f002 0203 	and.w	r2, r2, #3
 800ccb2:	0092      	lsls	r2, r2, #2
 800ccb4:	4093      	lsls	r3, r2
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ccbc:	4934      	ldr	r1, [pc, #208]	; (800cd90 <HAL_GPIO_Init+0x2e8>)
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	089b      	lsrs	r3, r3, #2
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ccca:	4b37      	ldr	r3, [pc, #220]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	43db      	mvns	r3, r3
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cce6:	69ba      	ldr	r2, [r7, #24]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ccee:	4a2e      	ldr	r2, [pc, #184]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ccf4:	4b2c      	ldr	r3, [pc, #176]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	43db      	mvns	r3, r3
 800ccfe:	69ba      	ldr	r2, [r7, #24]
 800cd00:	4013      	ands	r3, r2
 800cd02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cd18:	4a23      	ldr	r2, [pc, #140]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cd1e:	4b22      	ldr	r3, [pc, #136]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	43db      	mvns	r3, r3
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d003      	beq.n	800cd42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cd42:	4a19      	ldr	r2, [pc, #100]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cd48:	4b17      	ldr	r3, [pc, #92]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	43db      	mvns	r3, r3
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	4013      	ands	r3, r2
 800cd56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cd6c:	4a0e      	ldr	r2, [pc, #56]	; (800cda8 <HAL_GPIO_Init+0x300>)
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	3301      	adds	r3, #1
 800cd76:	61fb      	str	r3, [r7, #28]
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	2b0f      	cmp	r3, #15
 800cd7c:	f67f aea2 	bls.w	800cac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cd80:	bf00      	nop
 800cd82:	3724      	adds	r7, #36	; 0x24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	40023800 	.word	0x40023800
 800cd90:	40013800 	.word	0x40013800
 800cd94:	40020000 	.word	0x40020000
 800cd98:	40020400 	.word	0x40020400
 800cd9c:	40020800 	.word	0x40020800
 800cda0:	40020c00 	.word	0x40020c00
 800cda4:	40021000 	.word	0x40021000
 800cda8:	40013c00 	.word	0x40013c00

0800cdac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	617b      	str	r3, [r7, #20]
 800cdc6:	e0bb      	b.n	800cf40 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cdc8:	2201      	movs	r2, #1
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	f040 80ab 	bne.w	800cf3a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800cde4:	4a5b      	ldr	r2, [pc, #364]	; (800cf54 <HAL_GPIO_DeInit+0x1a8>)
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	089b      	lsrs	r3, r3, #2
 800cdea:	3302      	adds	r3, #2
 800cdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	220f      	movs	r2, #15
 800cdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ce00:	68ba      	ldr	r2, [r7, #8]
 800ce02:	4013      	ands	r3, r2
 800ce04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4a53      	ldr	r2, [pc, #332]	; (800cf58 <HAL_GPIO_DeInit+0x1ac>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d019      	beq.n	800ce42 <HAL_GPIO_DeInit+0x96>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4a52      	ldr	r2, [pc, #328]	; (800cf5c <HAL_GPIO_DeInit+0x1b0>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d013      	beq.n	800ce3e <HAL_GPIO_DeInit+0x92>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a51      	ldr	r2, [pc, #324]	; (800cf60 <HAL_GPIO_DeInit+0x1b4>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d00d      	beq.n	800ce3a <HAL_GPIO_DeInit+0x8e>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a50      	ldr	r2, [pc, #320]	; (800cf64 <HAL_GPIO_DeInit+0x1b8>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d007      	beq.n	800ce36 <HAL_GPIO_DeInit+0x8a>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a4f      	ldr	r2, [pc, #316]	; (800cf68 <HAL_GPIO_DeInit+0x1bc>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d101      	bne.n	800ce32 <HAL_GPIO_DeInit+0x86>
 800ce2e:	2304      	movs	r3, #4
 800ce30:	e008      	b.n	800ce44 <HAL_GPIO_DeInit+0x98>
 800ce32:	2307      	movs	r3, #7
 800ce34:	e006      	b.n	800ce44 <HAL_GPIO_DeInit+0x98>
 800ce36:	2303      	movs	r3, #3
 800ce38:	e004      	b.n	800ce44 <HAL_GPIO_DeInit+0x98>
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	e002      	b.n	800ce44 <HAL_GPIO_DeInit+0x98>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <HAL_GPIO_DeInit+0x98>
 800ce42:	2300      	movs	r3, #0
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	f002 0203 	and.w	r2, r2, #3
 800ce4a:	0092      	lsls	r2, r2, #2
 800ce4c:	4093      	lsls	r3, r2
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d132      	bne.n	800ceba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ce54:	4b45      	ldr	r3, [pc, #276]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	43db      	mvns	r3, r3
 800ce5c:	4943      	ldr	r1, [pc, #268]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ce62:	4b42      	ldr	r3, [pc, #264]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	43db      	mvns	r3, r3
 800ce6a:	4940      	ldr	r1, [pc, #256]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ce70:	4b3e      	ldr	r3, [pc, #248]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	43db      	mvns	r3, r3
 800ce78:	493c      	ldr	r1, [pc, #240]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ce7e:	4b3b      	ldr	r3, [pc, #236]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce80:	68da      	ldr	r2, [r3, #12]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	43db      	mvns	r3, r3
 800ce86:	4939      	ldr	r1, [pc, #228]	; (800cf6c <HAL_GPIO_DeInit+0x1c0>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	f003 0303 	and.w	r3, r3, #3
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	220f      	movs	r2, #15
 800ce96:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ce9c:	4a2d      	ldr	r2, [pc, #180]	; (800cf54 <HAL_GPIO_DeInit+0x1a8>)
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	089b      	lsrs	r3, r3, #2
 800cea2:	3302      	adds	r3, #2
 800cea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	43da      	mvns	r2, r3
 800ceac:	4829      	ldr	r0, [pc, #164]	; (800cf54 <HAL_GPIO_DeInit+0x1a8>)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	089b      	lsrs	r3, r3, #2
 800ceb2:	400a      	ands	r2, r1
 800ceb4:	3302      	adds	r3, #2
 800ceb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	2103      	movs	r1, #3
 800cec4:	fa01 f303 	lsl.w	r3, r1, r3
 800cec8:	43db      	mvns	r3, r3
 800ceca:	401a      	ands	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	08da      	lsrs	r2, r3, #3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3208      	adds	r2, #8
 800ced8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	f003 0307 	and.w	r3, r3, #7
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	220f      	movs	r2, #15
 800cee6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceea:	43db      	mvns	r3, r3
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	08d2      	lsrs	r2, r2, #3
 800cef0:	4019      	ands	r1, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3208      	adds	r2, #8
 800cef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68da      	ldr	r2, [r3, #12]
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	2103      	movs	r1, #3
 800cf04:	fa01 f303 	lsl.w	r3, r1, r3
 800cf08:	43db      	mvns	r3, r3
 800cf0a:	401a      	ands	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685a      	ldr	r2, [r3, #4]
 800cf14:	2101      	movs	r1, #1
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	fa01 f303 	lsl.w	r3, r1, r3
 800cf1c:	43db      	mvns	r3, r3
 800cf1e:	401a      	ands	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	005b      	lsls	r3, r3, #1
 800cf2c:	2103      	movs	r1, #3
 800cf2e:	fa01 f303 	lsl.w	r3, r1, r3
 800cf32:	43db      	mvns	r3, r3
 800cf34:	401a      	ands	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b0f      	cmp	r3, #15
 800cf44:	f67f af40 	bls.w	800cdc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cf48:	bf00      	nop
 800cf4a:	371c      	adds	r7, #28
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	40013800 	.word	0x40013800
 800cf58:	40020000 	.word	0x40020000
 800cf5c:	40020400 	.word	0x40020400
 800cf60:	40020800 	.word	0x40020800
 800cf64:	40020c00 	.word	0x40020c00
 800cf68:	40021000 	.word	0x40021000
 800cf6c:	40013c00 	.word	0x40013c00

0800cf70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	691a      	ldr	r2, [r3, #16]
 800cf80:	887b      	ldrh	r3, [r7, #2]
 800cf82:	4013      	ands	r3, r2
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	73fb      	strb	r3, [r7, #15]
 800cf8c:	e001      	b.n	800cf92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	807b      	strh	r3, [r7, #2]
 800cfac:	4613      	mov	r3, r2
 800cfae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cfb0:	787b      	ldrb	r3, [r7, #1]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cfb6:	887a      	ldrh	r2, [r7, #2]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cfbc:	e003      	b.n	800cfc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cfbe:	887b      	ldrh	r3, [r7, #2]
 800cfc0:	041a      	lsls	r2, r3, #16
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	619a      	str	r2, [r3, #24]
}
 800cfc6:	bf00      	nop
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	695a      	ldr	r2, [r3, #20]
 800cfe2:	887b      	ldrh	r3, [r7, #2]
 800cfe4:	401a      	ands	r2, r3
 800cfe6:	887b      	ldrh	r3, [r7, #2]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d104      	bne.n	800cff6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cfec:	887b      	ldrh	r3, [r7, #2]
 800cfee:	041a      	lsls	r2, r3, #16
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800cff4:	e002      	b.n	800cffc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800cff6:	887a      	ldrh	r2, [r7, #2]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	619a      	str	r2, [r3, #24]
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e25b      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	d075      	beq.n	800d112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d026:	4ba3      	ldr	r3, [pc, #652]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	f003 030c 	and.w	r3, r3, #12
 800d02e:	2b04      	cmp	r3, #4
 800d030:	d00c      	beq.n	800d04c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d032:	4ba0      	ldr	r3, [pc, #640]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d03a:	2b08      	cmp	r3, #8
 800d03c:	d112      	bne.n	800d064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d03e:	4b9d      	ldr	r3, [pc, #628]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d04a:	d10b      	bne.n	800d064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d04c:	4b99      	ldr	r3, [pc, #612]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d05b      	beq.n	800d110 <HAL_RCC_OscConfig+0x108>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d157      	bne.n	800d110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	e236      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d06c:	d106      	bne.n	800d07c <HAL_RCC_OscConfig+0x74>
 800d06e:	4b91      	ldr	r3, [pc, #580]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a90      	ldr	r2, [pc, #576]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	e01d      	b.n	800d0b8 <HAL_RCC_OscConfig+0xb0>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d084:	d10c      	bne.n	800d0a0 <HAL_RCC_OscConfig+0x98>
 800d086:	4b8b      	ldr	r3, [pc, #556]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a8a      	ldr	r2, [pc, #552]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d08c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	4b88      	ldr	r3, [pc, #544]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a87      	ldr	r2, [pc, #540]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	e00b      	b.n	800d0b8 <HAL_RCC_OscConfig+0xb0>
 800d0a0:	4b84      	ldr	r3, [pc, #528]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a83      	ldr	r2, [pc, #524]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d0a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	4b81      	ldr	r3, [pc, #516]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a80      	ldr	r2, [pc, #512]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d0b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d013      	beq.n	800d0e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0c0:	f7fe fa4e 	bl	800b560 <HAL_GetTick>
 800d0c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d0c6:	e008      	b.n	800d0da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0c8:	f7fe fa4a 	bl	800b560 <HAL_GetTick>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	2b64      	cmp	r3, #100	; 0x64
 800d0d4:	d901      	bls.n	800d0da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e1fb      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d0da:	4b76      	ldr	r3, [pc, #472]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0f0      	beq.n	800d0c8 <HAL_RCC_OscConfig+0xc0>
 800d0e6:	e014      	b.n	800d112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0e8:	f7fe fa3a 	bl	800b560 <HAL_GetTick>
 800d0ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d0ee:	e008      	b.n	800d102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0f0:	f7fe fa36 	bl	800b560 <HAL_GetTick>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	2b64      	cmp	r3, #100	; 0x64
 800d0fc:	d901      	bls.n	800d102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d0fe:	2303      	movs	r3, #3
 800d100:	e1e7      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d102:	4b6c      	ldr	r3, [pc, #432]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1f0      	bne.n	800d0f0 <HAL_RCC_OscConfig+0xe8>
 800d10e:	e000      	b.n	800d112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f003 0302 	and.w	r3, r3, #2
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d063      	beq.n	800d1e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d11e:	4b65      	ldr	r3, [pc, #404]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	f003 030c 	and.w	r3, r3, #12
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00b      	beq.n	800d142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d12a:	4b62      	ldr	r3, [pc, #392]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d132:	2b08      	cmp	r3, #8
 800d134:	d11c      	bne.n	800d170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d136:	4b5f      	ldr	r3, [pc, #380]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d116      	bne.n	800d170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d142:	4b5c      	ldr	r3, [pc, #368]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 0302 	and.w	r3, r3, #2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <HAL_RCC_OscConfig+0x152>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d001      	beq.n	800d15a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e1bb      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d15a:	4b56      	ldr	r3, [pc, #344]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	00db      	lsls	r3, r3, #3
 800d168:	4952      	ldr	r1, [pc, #328]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d16e:	e03a      	b.n	800d1e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d020      	beq.n	800d1ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d178:	4b4f      	ldr	r3, [pc, #316]	; (800d2b8 <HAL_RCC_OscConfig+0x2b0>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d17e:	f7fe f9ef 	bl	800b560 <HAL_GetTick>
 800d182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d184:	e008      	b.n	800d198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d186:	f7fe f9eb 	bl	800b560 <HAL_GetTick>
 800d18a:	4602      	mov	r2, r0
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	2b02      	cmp	r3, #2
 800d192:	d901      	bls.n	800d198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d194:	2303      	movs	r3, #3
 800d196:	e19c      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d198:	4b46      	ldr	r3, [pc, #280]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0f0      	beq.n	800d186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1a4:	4b43      	ldr	r3, [pc, #268]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	00db      	lsls	r3, r3, #3
 800d1b2:	4940      	ldr	r1, [pc, #256]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	600b      	str	r3, [r1, #0]
 800d1b8:	e015      	b.n	800d1e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d1ba:	4b3f      	ldr	r3, [pc, #252]	; (800d2b8 <HAL_RCC_OscConfig+0x2b0>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1c0:	f7fe f9ce 	bl	800b560 <HAL_GetTick>
 800d1c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d1c6:	e008      	b.n	800d1da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d1c8:	f7fe f9ca 	bl	800b560 <HAL_GetTick>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d901      	bls.n	800d1da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	e17b      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d1da:	4b36      	ldr	r3, [pc, #216]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1f0      	bne.n	800d1c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 0308 	and.w	r3, r3, #8
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d030      	beq.n	800d254 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d016      	beq.n	800d228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d1fa:	4b30      	ldr	r3, [pc, #192]	; (800d2bc <HAL_RCC_OscConfig+0x2b4>)
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d200:	f7fe f9ae 	bl	800b560 <HAL_GetTick>
 800d204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d206:	e008      	b.n	800d21a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d208:	f7fe f9aa 	bl	800b560 <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b02      	cmp	r3, #2
 800d214:	d901      	bls.n	800d21a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	e15b      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d21a:	4b26      	ldr	r3, [pc, #152]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d21e:	f003 0302 	and.w	r3, r3, #2
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0f0      	beq.n	800d208 <HAL_RCC_OscConfig+0x200>
 800d226:	e015      	b.n	800d254 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d228:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <HAL_RCC_OscConfig+0x2b4>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d22e:	f7fe f997 	bl	800b560 <HAL_GetTick>
 800d232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d234:	e008      	b.n	800d248 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d236:	f7fe f993 	bl	800b560 <HAL_GetTick>
 800d23a:	4602      	mov	r2, r0
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	2b02      	cmp	r3, #2
 800d242:	d901      	bls.n	800d248 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d244:	2303      	movs	r3, #3
 800d246:	e144      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d248:	4b1a      	ldr	r3, [pc, #104]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d24a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1f0      	bne.n	800d236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 0304 	and.w	r3, r3, #4
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 80a0 	beq.w	800d3a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d262:	2300      	movs	r3, #0
 800d264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d266:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10f      	bne.n	800d292 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d272:	2300      	movs	r3, #0
 800d274:	60bb      	str	r3, [r7, #8]
 800d276:	4b0f      	ldr	r3, [pc, #60]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	4a0e      	ldr	r2, [pc, #56]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d27c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d280:	6413      	str	r3, [r2, #64]	; 0x40
 800d282:	4b0c      	ldr	r3, [pc, #48]	; (800d2b4 <HAL_RCC_OscConfig+0x2ac>)
 800d284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d28a:	60bb      	str	r3, [r7, #8]
 800d28c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d28e:	2301      	movs	r3, #1
 800d290:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d292:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d121      	bne.n	800d2e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d29e:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a07      	ldr	r2, [pc, #28]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d2a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d2aa:	f7fe f959 	bl	800b560 <HAL_GetTick>
 800d2ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2b0:	e011      	b.n	800d2d6 <HAL_RCC_OscConfig+0x2ce>
 800d2b2:	bf00      	nop
 800d2b4:	40023800 	.word	0x40023800
 800d2b8:	42470000 	.word	0x42470000
 800d2bc:	42470e80 	.word	0x42470e80
 800d2c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d2c4:	f7fe f94c 	bl	800b560 <HAL_GetTick>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d901      	bls.n	800d2d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	e0fd      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2d6:	4b81      	ldr	r3, [pc, #516]	; (800d4dc <HAL_RCC_OscConfig+0x4d4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d0f0      	beq.n	800d2c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d106      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x2f0>
 800d2ea:	4b7d      	ldr	r3, [pc, #500]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ee:	4a7c      	ldr	r2, [pc, #496]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d2f0:	f043 0301 	orr.w	r3, r3, #1
 800d2f4:	6713      	str	r3, [r2, #112]	; 0x70
 800d2f6:	e01c      	b.n	800d332 <HAL_RCC_OscConfig+0x32a>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	2b05      	cmp	r3, #5
 800d2fe:	d10c      	bne.n	800d31a <HAL_RCC_OscConfig+0x312>
 800d300:	4b77      	ldr	r3, [pc, #476]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d304:	4a76      	ldr	r2, [pc, #472]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d306:	f043 0304 	orr.w	r3, r3, #4
 800d30a:	6713      	str	r3, [r2, #112]	; 0x70
 800d30c:	4b74      	ldr	r3, [pc, #464]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d310:	4a73      	ldr	r2, [pc, #460]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d312:	f043 0301 	orr.w	r3, r3, #1
 800d316:	6713      	str	r3, [r2, #112]	; 0x70
 800d318:	e00b      	b.n	800d332 <HAL_RCC_OscConfig+0x32a>
 800d31a:	4b71      	ldr	r3, [pc, #452]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31e:	4a70      	ldr	r2, [pc, #448]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d320:	f023 0301 	bic.w	r3, r3, #1
 800d324:	6713      	str	r3, [r2, #112]	; 0x70
 800d326:	4b6e      	ldr	r3, [pc, #440]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d32a:	4a6d      	ldr	r2, [pc, #436]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d32c:	f023 0304 	bic.w	r3, r3, #4
 800d330:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d015      	beq.n	800d366 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d33a:	f7fe f911 	bl	800b560 <HAL_GetTick>
 800d33e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d340:	e00a      	b.n	800d358 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d342:	f7fe f90d 	bl	800b560 <HAL_GetTick>
 800d346:	4602      	mov	r2, r0
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d350:	4293      	cmp	r3, r2
 800d352:	d901      	bls.n	800d358 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e0bc      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d358:	4b61      	ldr	r3, [pc, #388]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35c:	f003 0302 	and.w	r3, r3, #2
 800d360:	2b00      	cmp	r3, #0
 800d362:	d0ee      	beq.n	800d342 <HAL_RCC_OscConfig+0x33a>
 800d364:	e014      	b.n	800d390 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d366:	f7fe f8fb 	bl	800b560 <HAL_GetTick>
 800d36a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d36c:	e00a      	b.n	800d384 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d36e:	f7fe f8f7 	bl	800b560 <HAL_GetTick>
 800d372:	4602      	mov	r2, r0
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	f241 3288 	movw	r2, #5000	; 0x1388
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d901      	bls.n	800d384 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e0a6      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d384:	4b56      	ldr	r3, [pc, #344]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d388:	f003 0302 	and.w	r3, r3, #2
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1ee      	bne.n	800d36e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d390:	7dfb      	ldrb	r3, [r7, #23]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d105      	bne.n	800d3a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d396:	4b52      	ldr	r3, [pc, #328]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39a:	4a51      	ldr	r2, [pc, #324]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d39c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 8092 	beq.w	800d4d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d3ac:	4b4c      	ldr	r3, [pc, #304]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f003 030c 	and.w	r3, r3, #12
 800d3b4:	2b08      	cmp	r3, #8
 800d3b6:	d05c      	beq.n	800d472 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d141      	bne.n	800d444 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3c0:	4b48      	ldr	r3, [pc, #288]	; (800d4e4 <HAL_RCC_OscConfig+0x4dc>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3c6:	f7fe f8cb 	bl	800b560 <HAL_GetTick>
 800d3ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3cc:	e008      	b.n	800d3e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d3ce:	f7fe f8c7 	bl	800b560 <HAL_GetTick>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d901      	bls.n	800d3e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e078      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3e0:	4b3f      	ldr	r3, [pc, #252]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1f0      	bne.n	800d3ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a1b      	ldr	r3, [r3, #32]
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fa:	019b      	lsls	r3, r3, #6
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d402:	085b      	lsrs	r3, r3, #1
 800d404:	3b01      	subs	r3, #1
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	431a      	orrs	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40e:	061b      	lsls	r3, r3, #24
 800d410:	4933      	ldr	r1, [pc, #204]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d412:	4313      	orrs	r3, r2
 800d414:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d416:	4b33      	ldr	r3, [pc, #204]	; (800d4e4 <HAL_RCC_OscConfig+0x4dc>)
 800d418:	2201      	movs	r2, #1
 800d41a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d41c:	f7fe f8a0 	bl	800b560 <HAL_GetTick>
 800d420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d422:	e008      	b.n	800d436 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d424:	f7fe f89c 	bl	800b560 <HAL_GetTick>
 800d428:	4602      	mov	r2, r0
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d901      	bls.n	800d436 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d432:	2303      	movs	r3, #3
 800d434:	e04d      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d436:	4b2a      	ldr	r3, [pc, #168]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d0f0      	beq.n	800d424 <HAL_RCC_OscConfig+0x41c>
 800d442:	e045      	b.n	800d4d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d444:	4b27      	ldr	r3, [pc, #156]	; (800d4e4 <HAL_RCC_OscConfig+0x4dc>)
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d44a:	f7fe f889 	bl	800b560 <HAL_GetTick>
 800d44e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d450:	e008      	b.n	800d464 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d452:	f7fe f885 	bl	800b560 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d901      	bls.n	800d464 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e036      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d464:	4b1e      	ldr	r3, [pc, #120]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1f0      	bne.n	800d452 <HAL_RCC_OscConfig+0x44a>
 800d470:	e02e      	b.n	800d4d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d101      	bne.n	800d47e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e029      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d47e:	4b18      	ldr	r3, [pc, #96]	; (800d4e0 <HAL_RCC_OscConfig+0x4d8>)
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d11c      	bne.n	800d4cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d115      	bne.n	800d4cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d10d      	bne.n	800d4cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d106      	bne.n	800d4cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d001      	beq.n	800d4d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e000      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	40007000 	.word	0x40007000
 800d4e0:	40023800 	.word	0x40023800
 800d4e4:	42470060 	.word	0x42470060

0800d4e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e0cc      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d4fc:	4b68      	ldr	r3, [pc, #416]	; (800d6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 030f 	and.w	r3, r3, #15
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	429a      	cmp	r2, r3
 800d508:	d90c      	bls.n	800d524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d50a:	4b65      	ldr	r3, [pc, #404]	; (800d6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	b2d2      	uxtb	r2, r2
 800d510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d512:	4b63      	ldr	r3, [pc, #396]	; (800d6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 030f 	and.w	r3, r3, #15
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d001      	beq.n	800d524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e0b8      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d020      	beq.n	800d572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d005      	beq.n	800d548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d53c:	4b59      	ldr	r3, [pc, #356]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	4a58      	ldr	r2, [pc, #352]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f003 0308 	and.w	r3, r3, #8
 800d550:	2b00      	cmp	r3, #0
 800d552:	d005      	beq.n	800d560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d554:	4b53      	ldr	r3, [pc, #332]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	4a52      	ldr	r2, [pc, #328]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d55a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d55e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d560:	4b50      	ldr	r3, [pc, #320]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	494d      	ldr	r1, [pc, #308]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d044      	beq.n	800d608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d107      	bne.n	800d596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d586:	4b47      	ldr	r3, [pc, #284]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d119      	bne.n	800d5c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e07f      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d003      	beq.n	800d5a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d107      	bne.n	800d5b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5a6:	4b3f      	ldr	r3, [pc, #252]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d109      	bne.n	800d5c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e06f      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5b6:	4b3b      	ldr	r3, [pc, #236]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e067      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d5c6:	4b37      	ldr	r3, [pc, #220]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	f023 0203 	bic.w	r2, r3, #3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	4934      	ldr	r1, [pc, #208]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d5d8:	f7fd ffc2 	bl	800b560 <HAL_GetTick>
 800d5dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5de:	e00a      	b.n	800d5f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5e0:	f7fd ffbe 	bl	800b560 <HAL_GetTick>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d901      	bls.n	800d5f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e04f      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5f6:	4b2b      	ldr	r3, [pc, #172]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f003 020c 	and.w	r2, r3, #12
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	429a      	cmp	r2, r3
 800d606:	d1eb      	bne.n	800d5e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d608:	4b25      	ldr	r3, [pc, #148]	; (800d6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 030f 	and.w	r3, r3, #15
 800d610:	683a      	ldr	r2, [r7, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d20c      	bcs.n	800d630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d616:	4b22      	ldr	r3, [pc, #136]	; (800d6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	b2d2      	uxtb	r2, r2
 800d61c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d61e:	4b20      	ldr	r3, [pc, #128]	; (800d6a0 <HAL_RCC_ClockConfig+0x1b8>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 030f 	and.w	r3, r3, #15
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d001      	beq.n	800d630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	e032      	b.n	800d696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d008      	beq.n	800d64e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d63c:	4b19      	ldr	r3, [pc, #100]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	4916      	ldr	r1, [pc, #88]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d64a:	4313      	orrs	r3, r2
 800d64c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 0308 	and.w	r3, r3, #8
 800d656:	2b00      	cmp	r3, #0
 800d658:	d009      	beq.n	800d66e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d65a:	4b12      	ldr	r3, [pc, #72]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	490e      	ldr	r1, [pc, #56]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d66e:	f000 f821 	bl	800d6b4 <HAL_RCC_GetSysClockFreq>
 800d672:	4601      	mov	r1, r0
 800d674:	4b0b      	ldr	r3, [pc, #44]	; (800d6a4 <HAL_RCC_ClockConfig+0x1bc>)
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	091b      	lsrs	r3, r3, #4
 800d67a:	f003 030f 	and.w	r3, r3, #15
 800d67e:	4a0a      	ldr	r2, [pc, #40]	; (800d6a8 <HAL_RCC_ClockConfig+0x1c0>)
 800d680:	5cd3      	ldrb	r3, [r2, r3]
 800d682:	fa21 f303 	lsr.w	r3, r1, r3
 800d686:	4a09      	ldr	r2, [pc, #36]	; (800d6ac <HAL_RCC_ClockConfig+0x1c4>)
 800d688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d68a:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <HAL_RCC_ClockConfig+0x1c8>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fd ff22 	bl	800b4d8 <HAL_InitTick>

  return HAL_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	40023c00 	.word	0x40023c00
 800d6a4:	40023800 	.word	0x40023800
 800d6a8:	08015ee8 	.word	0x08015ee8
 800d6ac:	20000000 	.word	0x20000000
 800d6b0:	2000005c 	.word	0x2000005c

0800d6b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	607b      	str	r3, [r7, #4]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d6ca:	4b50      	ldr	r3, [pc, #320]	; (800d80c <HAL_RCC_GetSysClockFreq+0x158>)
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	f003 030c 	and.w	r3, r3, #12
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d007      	beq.n	800d6e6 <HAL_RCC_GetSysClockFreq+0x32>
 800d6d6:	2b08      	cmp	r3, #8
 800d6d8:	d008      	beq.n	800d6ec <HAL_RCC_GetSysClockFreq+0x38>
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f040 808d 	bne.w	800d7fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d6e0:	4b4b      	ldr	r3, [pc, #300]	; (800d810 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d6e2:	60bb      	str	r3, [r7, #8]
       break;
 800d6e4:	e08c      	b.n	800d800 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d6e6:	4b4b      	ldr	r3, [pc, #300]	; (800d814 <HAL_RCC_GetSysClockFreq+0x160>)
 800d6e8:	60bb      	str	r3, [r7, #8]
      break;
 800d6ea:	e089      	b.n	800d800 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d6ec:	4b47      	ldr	r3, [pc, #284]	; (800d80c <HAL_RCC_GetSysClockFreq+0x158>)
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d6f6:	4b45      	ldr	r3, [pc, #276]	; (800d80c <HAL_RCC_GetSysClockFreq+0x158>)
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d023      	beq.n	800d74a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d702:	4b42      	ldr	r3, [pc, #264]	; (800d80c <HAL_RCC_GetSysClockFreq+0x158>)
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	099b      	lsrs	r3, r3, #6
 800d708:	f04f 0400 	mov.w	r4, #0
 800d70c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d710:	f04f 0200 	mov.w	r2, #0
 800d714:	ea03 0501 	and.w	r5, r3, r1
 800d718:	ea04 0602 	and.w	r6, r4, r2
 800d71c:	4a3d      	ldr	r2, [pc, #244]	; (800d814 <HAL_RCC_GetSysClockFreq+0x160>)
 800d71e:	fb02 f106 	mul.w	r1, r2, r6
 800d722:	2200      	movs	r2, #0
 800d724:	fb02 f205 	mul.w	r2, r2, r5
 800d728:	440a      	add	r2, r1
 800d72a:	493a      	ldr	r1, [pc, #232]	; (800d814 <HAL_RCC_GetSysClockFreq+0x160>)
 800d72c:	fba5 0101 	umull	r0, r1, r5, r1
 800d730:	1853      	adds	r3, r2, r1
 800d732:	4619      	mov	r1, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f04f 0400 	mov.w	r4, #0
 800d73a:	461a      	mov	r2, r3
 800d73c:	4623      	mov	r3, r4
 800d73e:	f7f3 fabb 	bl	8000cb8 <__aeabi_uldivmod>
 800d742:	4603      	mov	r3, r0
 800d744:	460c      	mov	r4, r1
 800d746:	60fb      	str	r3, [r7, #12]
 800d748:	e049      	b.n	800d7de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d74a:	4b30      	ldr	r3, [pc, #192]	; (800d80c <HAL_RCC_GetSysClockFreq+0x158>)
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	099b      	lsrs	r3, r3, #6
 800d750:	f04f 0400 	mov.w	r4, #0
 800d754:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d758:	f04f 0200 	mov.w	r2, #0
 800d75c:	ea03 0501 	and.w	r5, r3, r1
 800d760:	ea04 0602 	and.w	r6, r4, r2
 800d764:	4629      	mov	r1, r5
 800d766:	4632      	mov	r2, r6
 800d768:	f04f 0300 	mov.w	r3, #0
 800d76c:	f04f 0400 	mov.w	r4, #0
 800d770:	0154      	lsls	r4, r2, #5
 800d772:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d776:	014b      	lsls	r3, r1, #5
 800d778:	4619      	mov	r1, r3
 800d77a:	4622      	mov	r2, r4
 800d77c:	1b49      	subs	r1, r1, r5
 800d77e:	eb62 0206 	sbc.w	r2, r2, r6
 800d782:	f04f 0300 	mov.w	r3, #0
 800d786:	f04f 0400 	mov.w	r4, #0
 800d78a:	0194      	lsls	r4, r2, #6
 800d78c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d790:	018b      	lsls	r3, r1, #6
 800d792:	1a5b      	subs	r3, r3, r1
 800d794:	eb64 0402 	sbc.w	r4, r4, r2
 800d798:	f04f 0100 	mov.w	r1, #0
 800d79c:	f04f 0200 	mov.w	r2, #0
 800d7a0:	00e2      	lsls	r2, r4, #3
 800d7a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d7a6:	00d9      	lsls	r1, r3, #3
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4614      	mov	r4, r2
 800d7ac:	195b      	adds	r3, r3, r5
 800d7ae:	eb44 0406 	adc.w	r4, r4, r6
 800d7b2:	f04f 0100 	mov.w	r1, #0
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	02a2      	lsls	r2, r4, #10
 800d7bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d7c0:	0299      	lsls	r1, r3, #10
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4614      	mov	r4, r2
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f04f 0400 	mov.w	r4, #0
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4623      	mov	r3, r4
 800d7d4:	f7f3 fa70 	bl	8000cb8 <__aeabi_uldivmod>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	460c      	mov	r4, r1
 800d7dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d7de:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <HAL_RCC_GetSysClockFreq+0x158>)
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	0c1b      	lsrs	r3, r3, #16
 800d7e4:	f003 0303 	and.w	r3, r3, #3
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f6:	60bb      	str	r3, [r7, #8]
      break;
 800d7f8:	e002      	b.n	800d800 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d7fa:	4b05      	ldr	r3, [pc, #20]	; (800d810 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d7fc:	60bb      	str	r3, [r7, #8]
      break;
 800d7fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d800:	68bb      	ldr	r3, [r7, #8]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d80a:	bf00      	nop
 800d80c:	40023800 	.word	0x40023800
 800d810:	00f42400 	.word	0x00f42400
 800d814:	017d7840 	.word	0x017d7840

0800d818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d818:	b480      	push	{r7}
 800d81a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d81c:	4b03      	ldr	r3, [pc, #12]	; (800d82c <HAL_RCC_GetHCLKFreq+0x14>)
 800d81e:	681b      	ldr	r3, [r3, #0]
}
 800d820:	4618      	mov	r0, r3
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	20000000 	.word	0x20000000

0800d830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d834:	f7ff fff0 	bl	800d818 <HAL_RCC_GetHCLKFreq>
 800d838:	4601      	mov	r1, r0
 800d83a:	4b05      	ldr	r3, [pc, #20]	; (800d850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	0a9b      	lsrs	r3, r3, #10
 800d840:	f003 0307 	and.w	r3, r3, #7
 800d844:	4a03      	ldr	r2, [pc, #12]	; (800d854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d846:	5cd3      	ldrb	r3, [r2, r3]
 800d848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	40023800 	.word	0x40023800
 800d854:	08015ef8 	.word	0x08015ef8

0800d858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d85c:	f7ff ffdc 	bl	800d818 <HAL_RCC_GetHCLKFreq>
 800d860:	4601      	mov	r1, r0
 800d862:	4b05      	ldr	r3, [pc, #20]	; (800d878 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	0b5b      	lsrs	r3, r3, #13
 800d868:	f003 0307 	and.w	r3, r3, #7
 800d86c:	4a03      	ldr	r2, [pc, #12]	; (800d87c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d86e:	5cd3      	ldrb	r3, [r2, r3]
 800d870:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d874:	4618      	mov	r0, r3
 800d876:	bd80      	pop	{r7, pc}
 800d878:	40023800 	.word	0x40023800
 800d87c:	08015ef8 	.word	0x08015ef8

0800d880 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e022      	b.n	800d8d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d105      	bne.n	800d8aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7f7 faaf 	bl	8004e08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2203      	movs	r2, #3
 800d8ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f814 	bl	800d8e0 <HAL_SD_InitCard>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e00a      	b.n	800d8d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d8e0:	b5b0      	push	{r4, r5, r7, lr}
 800d8e2:	b08e      	sub	sp, #56	; 0x38
 800d8e4:	af04      	add	r7, sp, #16
 800d8e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d8fc:	2376      	movs	r3, #118	; 0x76
 800d8fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681d      	ldr	r5, [r3, #0]
 800d904:	466c      	mov	r4, sp
 800d906:	f107 0314 	add.w	r3, r7, #20
 800d90a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d90e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d912:	f107 0308 	add.w	r3, r7, #8
 800d916:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d918:	4628      	mov	r0, r5
 800d91a:	f003 fe3d 	bl	8011598 <SDIO_Init>
 800d91e:	4603      	mov	r3, r0
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e031      	b.n	800d994 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d930:	4b1a      	ldr	r3, [pc, #104]	; (800d99c <HAL_SD_InitCard+0xbc>)
 800d932:	2200      	movs	r2, #0
 800d934:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f003 fe75 	bl	801162a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d940:	4b16      	ldr	r3, [pc, #88]	; (800d99c <HAL_SD_InitCard+0xbc>)
 800d942:	2201      	movs	r2, #1
 800d944:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 ffe6 	bl	800e918 <SD_PowerON>
 800d94c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d94e:	6a3b      	ldr	r3, [r7, #32]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00b      	beq.n	800d96c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	431a      	orrs	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	e013      	b.n	800d994 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 ff05 	bl	800e77c <SD_InitCard>
 800d972:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00b      	beq.n	800d992 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d986:	6a3b      	ldr	r3, [r7, #32]
 800d988:	431a      	orrs	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e000      	b.n	800d994 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3728      	adds	r7, #40	; 0x28
 800d998:	46bd      	mov	sp, r7
 800d99a:	bdb0      	pop	{r4, r5, r7, pc}
 800d99c:	422580a0 	.word	0x422580a0

0800d9a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08c      	sub	sp, #48	; 0x30
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
 800d9ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d107      	bne.n	800d9c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e0c9      	b.n	800db5c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	f040 80c2 	bne.w	800db5a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d907      	bls.n	800d9fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e0b0      	b.n	800db5c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2203      	movs	r2, #3
 800d9fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2200      	movs	r2, #0
 800da08:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	6812      	ldr	r2, [r2, #0]
 800da14:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800da18:	f043 0302 	orr.w	r3, r3, #2
 800da1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da22:	4a50      	ldr	r2, [pc, #320]	; (800db64 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800da24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2a:	4a4f      	ldr	r2, [pc, #316]	; (800db68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800da2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da32:	2200      	movs	r2, #0
 800da34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	3380      	adds	r3, #128	; 0x80
 800da40:	4619      	mov	r1, r3
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	025b      	lsls	r3, r3, #9
 800da48:	089b      	lsrs	r3, r3, #2
 800da4a:	f7fe fd3f 	bl	800c4cc <HAL_DMA_Start_IT>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d017      	beq.n	800da84 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800da62:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a40      	ldr	r2, [pc, #256]	; (800db6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800da6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	e06b      	b.n	800db5c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800da84:	4b3a      	ldr	r3, [pc, #232]	; (800db70 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800da86:	2201      	movs	r2, #1
 800da88:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d002      	beq.n	800da98 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	025b      	lsls	r3, r3, #9
 800da96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800daa0:	4618      	mov	r0, r3
 800daa2:	f003 fe55 	bl	8011750 <SDMMC_CmdBlockLength>
 800daa6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00f      	beq.n	800dace <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a2e      	ldr	r2, [pc, #184]	; (800db6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800dab4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabc:	431a      	orrs	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e046      	b.n	800db5c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dace:	f04f 33ff 	mov.w	r3, #4294967295
 800dad2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	025b      	lsls	r3, r3, #9
 800dad8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dada:	2390      	movs	r3, #144	; 0x90
 800dadc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dade:	2302      	movs	r3, #2
 800dae0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800dae6:	2301      	movs	r3, #1
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f107 0210 	add.w	r2, r7, #16
 800daf2:	4611      	mov	r1, r2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f003 fdff 	bl	80116f8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d90a      	bls.n	800db16 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2282      	movs	r2, #130	; 0x82
 800db04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db0c:	4618      	mov	r0, r3
 800db0e:	f003 fe63 	bl	80117d8 <SDMMC_CmdReadMultiBlock>
 800db12:	62f8      	str	r0, [r7, #44]	; 0x2c
 800db14:	e009      	b.n	800db2a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2281      	movs	r2, #129	; 0x81
 800db1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db22:	4618      	mov	r0, r3
 800db24:	f003 fe36 	bl	8011794 <SDMMC_CmdReadSingleBlock>
 800db28:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d012      	beq.n	800db56 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a0d      	ldr	r2, [pc, #52]	; (800db6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800db36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3e:	431a      	orrs	r2, r3
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2200      	movs	r2, #0
 800db50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800db52:	2301      	movs	r3, #1
 800db54:	e002      	b.n	800db5c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	e000      	b.n	800db5c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800db5a:	2302      	movs	r3, #2
  }
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3730      	adds	r7, #48	; 0x30
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	0800e58b 	.word	0x0800e58b
 800db68:	0800e5fd 	.word	0x0800e5fd
 800db6c:	004005ff 	.word	0x004005ff
 800db70:	4225858c 	.word	0x4225858c

0800db74 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08c      	sub	sp, #48	; 0x30
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d107      	bne.n	800db9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	e0ce      	b.n	800dd3a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	f040 80c7 	bne.w	800dd38 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dbb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	441a      	add	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d907      	bls.n	800dbce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e0b5      	b.n	800dd3a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2203      	movs	r2, #3
 800dbd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	6812      	ldr	r2, [r2, #0]
 800dbe8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf6:	4a53      	ldr	r2, [pc, #332]	; (800dd44 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800dbf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbfe:	4a52      	ldr	r2, [pc, #328]	; (800dd48 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800dc00:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc06:	2200      	movs	r2, #0
 800dc08:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d002      	beq.n	800dc18 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	025b      	lsls	r3, r3, #9
 800dc16:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc20:	4618      	mov	r0, r3
 800dc22:	f003 fd95 	bl	8011750 <SDMMC_CmdBlockLength>
 800dc26:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00f      	beq.n	800dc4e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a46      	ldr	r2, [pc, #280]	; (800dd4c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dc34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3c:	431a      	orrs	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e075      	b.n	800dd3a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d90a      	bls.n	800dc6a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	22a0      	movs	r2, #160	; 0xa0
 800dc58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc60:	4618      	mov	r0, r3
 800dc62:	f003 fdfd 	bl	8011860 <SDMMC_CmdWriteMultiBlock>
 800dc66:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dc68:	e009      	b.n	800dc7e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2290      	movs	r2, #144	; 0x90
 800dc6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc76:	4618      	mov	r0, r3
 800dc78:	f003 fdd0 	bl	801181c <SDMMC_CmdWriteSingleBlock>
 800dc7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d012      	beq.n	800dcaa <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a30      	ldr	r2, [pc, #192]	; (800dd4c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dc8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	431a      	orrs	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e047      	b.n	800dd3a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800dcaa:	4b29      	ldr	r3, [pc, #164]	; (800dd50 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800dcac:	2201      	movs	r2, #1
 800dcae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dcb4:	68b9      	ldr	r1, [r7, #8]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3380      	adds	r3, #128	; 0x80
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	025b      	lsls	r3, r3, #9
 800dcc2:	089b      	lsrs	r3, r3, #2
 800dcc4:	f7fe fc02 	bl	800c4cc <HAL_DMA_Start_IT>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d01c      	beq.n	800dd08 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	6812      	ldr	r2, [r2, #0]
 800dcd8:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800dcdc:	f023 0302 	bic.w	r3, r3, #2
 800dce0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a19      	ldr	r2, [pc, #100]	; (800dd4c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dce8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e018      	b.n	800dd3a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd08:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	025b      	lsls	r3, r3, #9
 800dd12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dd14:	2390      	movs	r3, #144	; 0x90
 800dd16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800dd20:	2301      	movs	r3, #1
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f107 0210 	add.w	r2, r7, #16
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f003 fce2 	bl	80116f8 <SDIO_ConfigData>

      return HAL_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	e000      	b.n	800dd3a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800dd38:	2302      	movs	r3, #2
  }
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3730      	adds	r7, #48	; 0x30
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	0800e561 	.word	0x0800e561
 800dd48:	0800e5fd 	.word	0x0800e5fd
 800dd4c:	004005ff 	.word	0x004005ff
 800dd50:	4225858c 	.word	0x4225858c

0800dd54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd60:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d008      	beq.n	800dd82 <HAL_SD_IRQHandler+0x2e>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f003 0308 	and.w	r3, r3, #8
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 ffe2 	bl	800ed44 <SD_Read_IT>
 800dd80:	e165      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 808f 	beq.w	800deb0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd9a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	6812      	ldr	r2, [r2, #0]
 800dda6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800ddaa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ddae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 0201 	bic.w	r2, r2, #1
 800ddbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f003 0308 	and.w	r3, r3, #8
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d039      	beq.n	800de3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f003 0302 	and.w	r3, r3, #2
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d104      	bne.n	800ddde <HAL_SD_IRQHandler+0x8a>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d011      	beq.n	800de02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f003 fd5e 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800dde8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d008      	beq.n	800de02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f92f 	bl	800e060 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f240 523a 	movw	r2, #1338	; 0x53a
 800de0a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	2b00      	cmp	r3, #0
 800de22:	d104      	bne.n	800de2e <HAL_SD_IRQHandler+0xda>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f003 0302 	and.w	r3, r3, #2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d003      	beq.n	800de36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7f6 ffca 	bl	8004dc8 <HAL_SD_RxCpltCallback>
 800de34:	e10b      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7f6 ffd6 	bl	8004de8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800de3c:	e107      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 8102 	beq.w	800e04e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f003 0320 	and.w	r3, r3, #32
 800de50:	2b00      	cmp	r3, #0
 800de52:	d011      	beq.n	800de78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4618      	mov	r0, r3
 800de5a:	f003 fd23 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800de5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d008      	beq.n	800de78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	431a      	orrs	r2, r3
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 f8f4 	bl	800e060 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f003 0301 	and.w	r3, r3, #1
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f040 80e5 	bne.w	800e04e <HAL_SD_IRQHandler+0x2fa>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f003 0302 	and.w	r3, r3, #2
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f040 80df 	bne.w	800e04e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f022 0208 	bic.w	r2, r2, #8
 800de9e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7f6 ff9d 	bl	8004de8 <HAL_SD_TxCpltCallback>
}
 800deae:	e0ce      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deba:	2b00      	cmp	r3, #0
 800debc:	d008      	beq.n	800ded0 <HAL_SD_IRQHandler+0x17c>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f003 0308 	and.w	r3, r3, #8
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d003      	beq.n	800ded0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 ff8c 	bl	800ede6 <SD_Write_IT>
 800dece:	e0be      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ded6:	f240 233a 	movw	r3, #570	; 0x23a
 800deda:	4013      	ands	r3, r2
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f000 80b6 	beq.w	800e04e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee8:	f003 0302 	and.w	r3, r3, #2
 800deec:	2b00      	cmp	r3, #0
 800deee:	d005      	beq.n	800defc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def4:	f043 0202 	orr.w	r2, r3, #2
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df02:	f003 0308 	and.w	r3, r3, #8
 800df06:	2b00      	cmp	r3, #0
 800df08:	d005      	beq.n	800df16 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0e:	f043 0208 	orr.w	r2, r3, #8
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df1c:	f003 0320 	and.w	r3, r3, #32
 800df20:	2b00      	cmp	r3, #0
 800df22:	d005      	beq.n	800df30 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	f043 0220 	orr.w	r2, r3, #32
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df36:	f003 0310 	and.w	r3, r3, #16
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d005      	beq.n	800df4a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df42:	f043 0210 	orr.w	r2, r3, #16
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df54:	2b00      	cmp	r3, #0
 800df56:	d005      	beq.n	800df64 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5c:	f043 0208 	orr.w	r2, r3, #8
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f240 723a 	movw	r2, #1850	; 0x73a
 800df6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	6812      	ldr	r2, [r2, #0]
 800df78:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800df7c:	f023 0302 	bic.w	r3, r3, #2
 800df80:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4618      	mov	r0, r3
 800df88:	f003 fc8c 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800df8c:	4602      	mov	r2, r0
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df92:	431a      	orrs	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f003 0308 	and.w	r3, r3, #8
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f855 	bl	800e060 <HAL_SD_ErrorCallback>
}
 800dfb6:	e04a      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d045      	beq.n	800e04e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f003 0310 	and.w	r3, r3, #16
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d104      	bne.n	800dfd6 <HAL_SD_IRQHandler+0x282>
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f003 0320 	and.w	r3, r3, #32
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d011      	beq.n	800dffa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfda:	4a1f      	ldr	r2, [pc, #124]	; (800e058 <HAL_SD_IRQHandler+0x304>)
 800dfdc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fe faca 	bl	800c57c <HAL_DMA_Abort_IT>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d02f      	beq.n	800e04e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 fb54 	bl	800e6a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dff8:	e029      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d104      	bne.n	800e00e <HAL_SD_IRQHandler+0x2ba>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f003 0302 	and.w	r3, r3, #2
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d011      	beq.n	800e032 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e012:	4a12      	ldr	r2, [pc, #72]	; (800e05c <HAL_SD_IRQHandler+0x308>)
 800e014:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fe faae 	bl	800c57c <HAL_DMA_Abort_IT>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d013      	beq.n	800e04e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fb6f 	bl	800e70e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e030:	e00d      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f814 	bl	800e074 <HAL_SD_AbortCallback>
}
 800e04c:	e7ff      	b.n	800e04e <HAL_SD_IRQHandler+0x2fa>
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	0800e6a1 	.word	0x0800e6a1
 800e05c:	0800e70f 	.word	0x0800e70f

0800e060 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e096:	0f9b      	lsrs	r3, r3, #30
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a2:	0e9b      	lsrs	r3, r3, #26
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	f003 030f 	and.w	r3, r3, #15
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0b4:	0e1b      	lsrs	r3, r3, #24
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	f003 0303 	and.w	r3, r3, #3
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c6:	0c1b      	lsrs	r3, r3, #16
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d2:	0a1b      	lsrs	r3, r3, #8
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0de:	b2da      	uxtb	r2, r3
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e8:	0d1b      	lsrs	r3, r3, #20
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0f4:	0c1b      	lsrs	r3, r3, #16
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	f003 030f 	and.w	r3, r3, #15
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e106:	0bdb      	lsrs	r3, r3, #15
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e118:	0b9b      	lsrs	r3, r3, #14
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	b2da      	uxtb	r2, r3
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e12a:	0b5b      	lsrs	r3, r3, #13
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	b2da      	uxtb	r2, r3
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e13c:	0b1b      	lsrs	r3, r3, #12
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	b2da      	uxtb	r2, r3
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	2200      	movs	r2, #0
 800e14e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e154:	2b00      	cmp	r3, #0
 800e156:	d163      	bne.n	800e220 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e15c:	009a      	lsls	r2, r3, #2
 800e15e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e162:	4013      	ands	r3, r2
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e168:	0f92      	lsrs	r2, r2, #30
 800e16a:	431a      	orrs	r2, r3
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e174:	0edb      	lsrs	r3, r3, #27
 800e176:	b2db      	uxtb	r3, r3
 800e178:	f003 0307 	and.w	r3, r3, #7
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e186:	0e1b      	lsrs	r3, r3, #24
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e198:	0d5b      	lsrs	r3, r3, #21
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	f003 0307 	and.w	r3, r3, #7
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1aa:	0c9b      	lsrs	r3, r3, #18
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	f003 0307 	and.w	r3, r3, #7
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1bc:	0bdb      	lsrs	r3, r3, #15
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	f003 0307 	and.w	r3, r3, #7
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	7e1b      	ldrb	r3, [r3, #24]
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	f003 0307 	and.w	r3, r3, #7
 800e1de:	3302      	adds	r3, #2
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e1ea:	fb02 f203 	mul.w	r2, r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	7a1b      	ldrb	r3, [r3, #8]
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	f003 030f 	and.w	r3, r3, #15
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	409a      	lsls	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e20c:	0a52      	lsrs	r2, r2, #9
 800e20e:	fb02 f203 	mul.w	r2, r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e21c:	661a      	str	r2, [r3, #96]	; 0x60
 800e21e:	e031      	b.n	800e284 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e224:	2b01      	cmp	r3, #1
 800e226:	d11d      	bne.n	800e264 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e22c:	041b      	lsls	r3, r3, #16
 800e22e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e236:	0c1b      	lsrs	r3, r3, #16
 800e238:	431a      	orrs	r2, r3
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	3301      	adds	r3, #1
 800e244:	029a      	lsls	r2, r3, #10
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e258:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	661a      	str	r2, [r3, #96]	; 0x60
 800e262:	e00f      	b.n	800e284 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a58      	ldr	r2, [pc, #352]	; (800e3cc <HAL_SD_GetCardCSD+0x344>)
 800e26a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e270:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	e09d      	b.n	800e3c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e288:	0b9b      	lsrs	r3, r3, #14
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	b2da      	uxtb	r2, r3
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e29a:	09db      	lsrs	r3, r3, #7
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2bc:	0fdb      	lsrs	r3, r3, #31
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c8:	0f5b      	lsrs	r3, r3, #29
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	f003 0303 	and.w	r3, r3, #3
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2da:	0e9b      	lsrs	r3, r3, #26
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	b2da      	uxtb	r2, r3
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ec:	0d9b      	lsrs	r3, r3, #22
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	f003 030f 	and.w	r3, r3, #15
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2fe:	0d5b      	lsrs	r3, r3, #21
 800e300:	b2db      	uxtb	r3, r3
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	b2da      	uxtb	r2, r3
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2200      	movs	r2, #0
 800e312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31a:	0c1b      	lsrs	r3, r3, #16
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	b2da      	uxtb	r2, r3
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32e:	0bdb      	lsrs	r3, r3, #15
 800e330:	b2db      	uxtb	r3, r3
 800e332:	f003 0301 	and.w	r3, r3, #1
 800e336:	b2da      	uxtb	r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	0b9b      	lsrs	r3, r3, #14
 800e344:	b2db      	uxtb	r3, r3
 800e346:	f003 0301 	and.w	r3, r3, #1
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e356:	0b5b      	lsrs	r3, r3, #13
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	f003 0301 	and.w	r3, r3, #1
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36a:	0b1b      	lsrs	r3, r3, #12
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e37e:	0a9b      	lsrs	r3, r3, #10
 800e380:	b2db      	uxtb	r3, r3
 800e382:	f003 0303 	and.w	r3, r3, #3
 800e386:	b2da      	uxtb	r2, r3
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e392:	0a1b      	lsrs	r3, r3, #8
 800e394:	b2db      	uxtb	r3, r3
 800e396:	f003 0303 	and.w	r3, r3, #3
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3a6:	085b      	lsrs	r3, r3, #1
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr
 800e3cc:	004005ff 	.word	0x004005ff

0800e3d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e428:	b5b0      	push	{r4, r5, r7, lr}
 800e42a:	b08e      	sub	sp, #56	; 0x38
 800e42c:	af04      	add	r7, sp, #16
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2203      	movs	r2, #3
 800e436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d02e      	beq.n	800e4a0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e448:	d106      	bne.n	800e458 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e44e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	639a      	str	r2, [r3, #56]	; 0x38
 800e456:	e029      	b.n	800e4ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e45e:	d10a      	bne.n	800e476 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fb0f 	bl	800ea84 <SD_WideBus_Enable>
 800e466:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	431a      	orrs	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	639a      	str	r2, [r3, #56]	; 0x38
 800e474:	e01a      	b.n	800e4ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d10a      	bne.n	800e492 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fb4c 	bl	800eb1a <SD_WideBus_Disable>
 800e482:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	431a      	orrs	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	639a      	str	r2, [r3, #56]	; 0x38
 800e490:	e00c      	b.n	800e4ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e496:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	639a      	str	r2, [r3, #56]	; 0x38
 800e49e:	e005      	b.n	800e4ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d009      	beq.n	800e4c8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a18      	ldr	r2, [pc, #96]	; (800e51c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e024      	b.n	800e512 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681d      	ldr	r5, [r3, #0]
 800e4ee:	466c      	mov	r4, sp
 800e4f0:	f107 0318 	add.w	r3, r7, #24
 800e4f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4fc:	f107 030c 	add.w	r3, r7, #12
 800e500:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e502:	4628      	mov	r0, r5
 800e504:	f003 f848 	bl	8011598 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3728      	adds	r7, #40	; 0x28
 800e516:	46bd      	mov	sp, r7
 800e518:	bdb0      	pop	{r4, r5, r7, pc}
 800e51a:	bf00      	nop
 800e51c:	004005ff 	.word	0x004005ff

0800e520 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e52c:	f107 030c 	add.w	r3, r7, #12
 800e530:	4619      	mov	r1, r3
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 fa7e 	bl	800ea34 <SD_SendStatus>
 800e538:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d005      	beq.n	800e54c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	431a      	orrs	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	0a5b      	lsrs	r3, r3, #9
 800e550:	f003 030f 	and.w	r3, r3, #15
 800e554:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e556:	693b      	ldr	r3, [r7, #16]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3718      	adds	r7, #24
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e57c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e57e:	bf00      	nop
 800e580:	3714      	adds	r7, #20
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e596:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59c:	2b82      	cmp	r3, #130	; 0x82
 800e59e:	d111      	bne.n	800e5c4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f003 f97d 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800e5aa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d008      	beq.n	800e5c4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	431a      	orrs	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f7ff fd4e 	bl	800e060 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f022 0208 	bic.w	r2, r2, #8
 800e5d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800e5dc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f7f6 fbeb 	bl	8004dc8 <HAL_SD_RxCpltCallback>
#endif
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
	...

0800e5fc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e608:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7fe f962 	bl	800c8d4 <HAL_DMA_GetError>
 800e610:	4603      	mov	r3, r0
 800e612:	2b02      	cmp	r3, #2
 800e614:	d03e      	beq.n	800e694 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e61c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e624:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d002      	beq.n	800e632 <SD_DMAError+0x36>
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d12d      	bne.n	800e68e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a19      	ldr	r2, [pc, #100]	; (800e69c <SD_DMAError+0xa0>)
 800e638:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e648:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e656:	6978      	ldr	r0, [r7, #20]
 800e658:	f7ff ff62 	bl	800e520 <HAL_SD_GetCardState>
 800e65c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2b06      	cmp	r3, #6
 800e662:	d002      	beq.n	800e66a <SD_DMAError+0x6e>
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2b05      	cmp	r3, #5
 800e668:	d10a      	bne.n	800e680 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	f003 f918 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800e674:	4602      	mov	r2, r0
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e67a:	431a      	orrs	r2, r3
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2200      	movs	r2, #0
 800e68c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e68e:	6978      	ldr	r0, [r7, #20]
 800e690:	f7ff fce6 	bl	800e060 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e694:	bf00      	nop
 800e696:	3718      	adds	r7, #24
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	004005ff 	.word	0x004005ff

0800e6a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f240 523a 	movw	r2, #1338	; 0x53a
 800e6b6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f7ff ff31 	bl	800e520 <HAL_SD_GetCardState>
 800e6be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b06      	cmp	r3, #6
 800e6d2:	d002      	beq.n	800e6da <SD_DMATxAbort+0x3a>
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2b05      	cmp	r3, #5
 800e6d8:	d10a      	bne.n	800e6f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f003 f8e0 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ea:	431a      	orrs	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d103      	bne.n	800e700 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f7ff fcbb 	bl	800e074 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e6fe:	e002      	b.n	800e706 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f7ff fcad 	bl	800e060 <HAL_SD_ErrorCallback>
}
 800e706:	bf00      	nop
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b084      	sub	sp, #16
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f240 523a 	movw	r2, #1338	; 0x53a
 800e724:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f7ff fefa 	bl	800e520 <HAL_SD_GetCardState>
 800e72c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b06      	cmp	r3, #6
 800e740:	d002      	beq.n	800e748 <SD_DMARxAbort+0x3a>
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b05      	cmp	r3, #5
 800e746:	d10a      	bne.n	800e75e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f003 f8a9 	bl	80118a4 <SDMMC_CmdStopTransfer>
 800e752:	4602      	mov	r2, r0
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e758:	431a      	orrs	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e762:	2b00      	cmp	r3, #0
 800e764:	d103      	bne.n	800e76e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff fc84 	bl	800e074 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e76c:	e002      	b.n	800e774 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f7ff fc76 	bl	800e060 <HAL_SD_ErrorCallback>
}
 800e774:	bf00      	nop
 800e776:	3710      	adds	r7, #16
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e77c:	b5b0      	push	{r4, r5, r7, lr}
 800e77e:	b094      	sub	sp, #80	; 0x50
 800e780:	af04      	add	r7, sp, #16
 800e782:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e784:	2301      	movs	r3, #1
 800e786:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f002 ff5b 	bl	8011648 <SDIO_GetPowerState>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d102      	bne.n	800e79e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e798:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e79c:	e0b7      	b.n	800e90e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	d02f      	beq.n	800e806 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f003 f984 	bl	8011ab8 <SDMMC_CmdSendCID>
 800e7b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <SD_InitCard+0x40>
    {
      return errorstate;
 800e7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ba:	e0a8      	b.n	800e90e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f002 ff85 	bl	80116d2 <SDIO_GetResponse>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2104      	movs	r1, #4
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f002 ff7c 	bl	80116d2 <SDIO_GetResponse>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2108      	movs	r1, #8
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f002 ff73 	bl	80116d2 <SDIO_GetResponse>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	210c      	movs	r1, #12
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f002 ff6a 	bl	80116d2 <SDIO_GetResponse>
 800e7fe:	4602      	mov	r2, r0
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d00d      	beq.n	800e82a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f107 020e 	add.w	r2, r7, #14
 800e816:	4611      	mov	r1, r2
 800e818:	4618      	mov	r0, r3
 800e81a:	f003 f98a 	bl	8011b32 <SDMMC_CmdSetRelAdd>
 800e81e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <SD_InitCard+0xae>
    {
      return errorstate;
 800e826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e828:	e071      	b.n	800e90e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e82e:	2b03      	cmp	r3, #3
 800e830:	d036      	beq.n	800e8a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e832:	89fb      	ldrh	r3, [r7, #14]
 800e834:	461a      	mov	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e842:	041b      	lsls	r3, r3, #16
 800e844:	4619      	mov	r1, r3
 800e846:	4610      	mov	r0, r2
 800e848:	f003 f954 	bl	8011af4 <SDMMC_CmdSendCSD>
 800e84c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e856:	e05a      	b.n	800e90e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2100      	movs	r1, #0
 800e85e:	4618      	mov	r0, r3
 800e860:	f002 ff37 	bl	80116d2 <SDIO_GetResponse>
 800e864:	4602      	mov	r2, r0
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2104      	movs	r1, #4
 800e870:	4618      	mov	r0, r3
 800e872:	f002 ff2e 	bl	80116d2 <SDIO_GetResponse>
 800e876:	4602      	mov	r2, r0
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2108      	movs	r1, #8
 800e882:	4618      	mov	r0, r3
 800e884:	f002 ff25 	bl	80116d2 <SDIO_GetResponse>
 800e888:	4602      	mov	r2, r0
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	210c      	movs	r1, #12
 800e894:	4618      	mov	r0, r3
 800e896:	f002 ff1c 	bl	80116d2 <SDIO_GetResponse>
 800e89a:	4602      	mov	r2, r0
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2104      	movs	r1, #4
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f002 ff13 	bl	80116d2 <SDIO_GetResponse>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	0d1a      	lsrs	r2, r3, #20
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e8b4:	f107 0310 	add.w	r3, r7, #16
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fbe4 	bl	800e088 <HAL_SD_GetCardCSD>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8ca:	e020      	b.n	800e90e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6819      	ldr	r1, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8d4:	041b      	lsls	r3, r3, #16
 800e8d6:	f04f 0400 	mov.w	r4, #0
 800e8da:	461a      	mov	r2, r3
 800e8dc:	4623      	mov	r3, r4
 800e8de:	4608      	mov	r0, r1
 800e8e0:	f003 f802 	bl	80118e8 <SDMMC_CmdSelDesel>
 800e8e4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <SD_InitCard+0x174>
  {
    return errorstate;
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ee:	e00e      	b.n	800e90e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681d      	ldr	r5, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	466c      	mov	r4, sp
 800e8f8:	f103 0210 	add.w	r2, r3, #16
 800e8fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e902:	3304      	adds	r3, #4
 800e904:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e906:	4628      	mov	r0, r5
 800e908:	f002 fe46 	bl	8011598 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3740      	adds	r7, #64	; 0x40
 800e912:	46bd      	mov	sp, r7
 800e914:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e918 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e920:	2300      	movs	r3, #0
 800e922:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e924:	2300      	movs	r3, #0
 800e926:	617b      	str	r3, [r7, #20]
 800e928:	2300      	movs	r3, #0
 800e92a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4618      	mov	r0, r3
 800e932:	f002 fffc 	bl	801192e <SDMMC_CmdGoIdleState>
 800e936:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	e072      	b.n	800ea28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4618      	mov	r0, r3
 800e948:	f003 f80f 	bl	801196a <SDMMC_CmdOperCond>
 800e94c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00d      	beq.n	800e970 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4618      	mov	r0, r3
 800e960:	f002 ffe5 	bl	801192e <SDMMC_CmdGoIdleState>
 800e964:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d004      	beq.n	800e976 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	e05b      	b.n	800ea28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d137      	bne.n	800e9ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2100      	movs	r1, #0
 800e984:	4618      	mov	r0, r3
 800e986:	f003 f80f 	bl	80119a8 <SDMMC_CmdAppCommand>
 800e98a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d02d      	beq.n	800e9ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e996:	e047      	b.n	800ea28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2100      	movs	r1, #0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f003 f802 	bl	80119a8 <SDMMC_CmdAppCommand>
 800e9a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d001      	beq.n	800e9b0 <SD_PowerON+0x98>
    {
      return errorstate;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	e03b      	b.n	800ea28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	491e      	ldr	r1, [pc, #120]	; (800ea30 <SD_PowerON+0x118>)
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f003 f818 	bl	80119ec <SDMMC_CmdAppOperCommand>
 800e9bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e9c8:	e02e      	b.n	800ea28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f002 fe7e 	bl	80116d2 <SDIO_GetResponse>
 800e9d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	0fdb      	lsrs	r3, r3, #31
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d101      	bne.n	800e9e4 <SD_PowerON+0xcc>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e000      	b.n	800e9e6 <SD_PowerON+0xce>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	613b      	str	r3, [r7, #16]

    count++;
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d802      	bhi.n	800e9fe <SD_PowerON+0xe6>
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d0cc      	beq.n	800e998 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d902      	bls.n	800ea0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea0c:	e00c      	b.n	800ea28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d003      	beq.n	800ea20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	645a      	str	r2, [r3, #68]	; 0x44
 800ea1e:	e002      	b.n	800ea26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	c1100000 	.word	0xc1100000

0800ea34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d102      	bne.n	800ea4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea48:	e018      	b.n	800ea7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea52:	041b      	lsls	r3, r3, #16
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f003 f88c 	bl	8011b74 <SDMMC_CmdSendStatus>
 800ea5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	e009      	b.n	800ea7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f002 fe2f 	bl	80116d2 <SDIO_GetResponse>
 800ea74:	4602      	mov	r2, r0
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	2300      	movs	r3, #0
 800ea92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2100      	movs	r1, #0
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f002 fe19 	bl	80116d2 <SDIO_GetResponse>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaaa:	d102      	bne.n	800eab2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eaac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eab0:	e02f      	b.n	800eb12 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eab2:	f107 030c 	add.w	r3, r7, #12
 800eab6:	4619      	mov	r1, r3
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f879 	bl	800ebb0 <SD_FindSCR>
 800eabe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	e023      	b.n	800eb12 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d01c      	beq.n	800eb0e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eadc:	041b      	lsls	r3, r3, #16
 800eade:	4619      	mov	r1, r3
 800eae0:	4610      	mov	r0, r2
 800eae2:	f002 ff61 	bl	80119a8 <SDMMC_CmdAppCommand>
 800eae6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	e00f      	b.n	800eb12 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2102      	movs	r1, #2
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f002 ff9a 	bl	8011a32 <SDMMC_CmdBusWidth>
 800eafe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	e003      	b.n	800eb12 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e001      	b.n	800eb12 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b086      	sub	sp, #24
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800eb22:	2300      	movs	r3, #0
 800eb24:	60fb      	str	r3, [r7, #12]
 800eb26:	2300      	movs	r3, #0
 800eb28:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4618      	mov	r0, r3
 800eb32:	f002 fdce 	bl	80116d2 <SDIO_GetResponse>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb40:	d102      	bne.n	800eb48 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb46:	e02f      	b.n	800eba8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb48:	f107 030c 	add.w	r3, r7, #12
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f82e 	bl	800ebb0 <SD_FindSCR>
 800eb54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	e023      	b.n	800eba8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d01c      	beq.n	800eba4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb72:	041b      	lsls	r3, r3, #16
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f002 ff16 	bl	80119a8 <SDMMC_CmdAppCommand>
 800eb7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	e00f      	b.n	800eba8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f002 ff4f 	bl	8011a32 <SDMMC_CmdBusWidth>
 800eb94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	e003      	b.n	800eba8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	e001      	b.n	800eba8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eba4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ebb0:	b590      	push	{r4, r7, lr}
 800ebb2:	b08f      	sub	sp, #60	; 0x3c
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ebba:	f7fc fcd1 	bl	800b560 <HAL_GetTick>
 800ebbe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	60bb      	str	r3, [r7, #8]
 800ebc8:	2300      	movs	r3, #0
 800ebca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2108      	movs	r1, #8
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f002 fdba 	bl	8011750 <SDMMC_CmdBlockLength>
 800ebdc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ebe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe6:	e0a9      	b.n	800ed3c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebf0:	041b      	lsls	r3, r3, #16
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4610      	mov	r0, r2
 800ebf6:	f002 fed7 	bl	80119a8 <SDMMC_CmdAppCommand>
 800ebfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec04:	e09a      	b.n	800ed3c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec06:	f04f 33ff 	mov.w	r3, #4294967295
 800ec0a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec0c:	2308      	movs	r3, #8
 800ec0e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ec10:	2330      	movs	r3, #48	; 0x30
 800ec12:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ec14:	2302      	movs	r3, #2
 800ec16:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f107 0210 	add.w	r2, r7, #16
 800ec28:	4611      	mov	r1, r2
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f002 fd64 	bl	80116f8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f002 ff1e 	bl	8011a76 <SDMMC_CmdSendSCR>
 800ec3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d022      	beq.n	800ec88 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ec42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec44:	e07a      	b.n	800ed3c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00e      	beq.n	800ec72 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6819      	ldr	r1, [r3, #0]
 800ec58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	f107 0208 	add.w	r2, r7, #8
 800ec60:	18d4      	adds	r4, r2, r3
 800ec62:	4608      	mov	r0, r1
 800ec64:	f002 fcc3 	bl	80115ee <SDIO_ReadFIFO>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	6023      	str	r3, [r4, #0]
      index++;
 800ec6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec6e:	3301      	adds	r3, #1
 800ec70:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec72:	f7fc fc75 	bl	800b560 <HAL_GetTick>
 800ec76:	4602      	mov	r2, r0
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec80:	d102      	bne.n	800ec88 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec86:	e059      	b.n	800ed3c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec8e:	f240 432a 	movw	r3, #1066	; 0x42a
 800ec92:	4013      	ands	r3, r2
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d0d6      	beq.n	800ec46 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9e:	f003 0308 	and.w	r3, r3, #8
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2208      	movs	r2, #8
 800ecac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ecae:	2308      	movs	r3, #8
 800ecb0:	e044      	b.n	800ed3c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d005      	beq.n	800eccc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	e037      	b.n	800ed3c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd2:	f003 0320 	and.w	r3, r3, #32
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d005      	beq.n	800ece6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2220      	movs	r2, #32
 800ece0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ece2:	2320      	movs	r3, #32
 800ece4:	e02a      	b.n	800ed3c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f240 523a 	movw	r2, #1338	; 0x53a
 800ecee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	061a      	lsls	r2, r3, #24
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	021b      	lsls	r3, r3, #8
 800ecf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecfc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	0a1b      	lsrs	r3, r3, #8
 800ed02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	0e1b      	lsrs	r3, r3, #24
 800ed0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed10:	601a      	str	r2, [r3, #0]
    scr++;
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	3304      	adds	r3, #4
 800ed16:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	061a      	lsls	r2, r3, #24
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	021b      	lsls	r3, r3, #8
 800ed20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	0a1b      	lsrs	r3, r3, #8
 800ed2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	0e1b      	lsrs	r3, r3, #24
 800ed34:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed38:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	373c      	adds	r7, #60	; 0x3c
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd90      	pop	{r4, r7, pc}

0800ed44 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b086      	sub	sp, #24
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d03f      	beq.n	800edde <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ed5e:	2300      	movs	r3, #0
 800ed60:	617b      	str	r3, [r7, #20]
 800ed62:	e033      	b.n	800edcc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f002 fc40 	bl	80115ee <SDIO_ReadFIFO>
 800ed6e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	0a1b      	lsrs	r3, r3, #8
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3301      	adds	r3, #1
 800ed92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	0c1b      	lsrs	r3, r3, #16
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	3301      	adds	r3, #1
 800eda8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	3b01      	subs	r3, #1
 800edae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	0e1b      	lsrs	r3, r3, #24
 800edb4:	b2da      	uxtb	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3301      	adds	r3, #1
 800edbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	3301      	adds	r3, #1
 800edca:	617b      	str	r3, [r7, #20]
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	2b07      	cmp	r3, #7
 800edd0:	d9c8      	bls.n	800ed64 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800edde:	bf00      	nop
 800ede0:	3718      	adds	r7, #24
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b086      	sub	sp, #24
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d043      	beq.n	800ee88 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ee00:	2300      	movs	r3, #0
 800ee02:	617b      	str	r3, [r7, #20]
 800ee04:	e037      	b.n	800ee76 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	3b01      	subs	r3, #1
 800ee16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	021a      	lsls	r2, r3, #8
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	4313      	orrs	r3, r2
 800ee22:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	3301      	adds	r3, #1
 800ee28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	041a      	lsls	r2, r3, #16
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	3b01      	subs	r3, #1
 800ee46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	061a      	lsls	r2, r3, #24
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3301      	adds	r3, #1
 800ee58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f107 0208 	add.w	r2, r7, #8
 800ee68:	4611      	mov	r1, r2
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f002 fbcc 	bl	8011608 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	3301      	adds	r3, #1
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	2b07      	cmp	r3, #7
 800ee7a:	d9c4      	bls.n	800ee06 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ee88:	bf00      	nop
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d101      	bne.n	800eea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e056      	b.n	800ef50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d106      	bne.n	800eec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7f6 fded 	bl	8005a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2202      	movs	r2, #2
 800eec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eed8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	431a      	orrs	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	431a      	orrs	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	431a      	orrs	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	431a      	orrs	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	699b      	ldr	r3, [r3, #24]
 800eefa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eefe:	431a      	orrs	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	69db      	ldr	r3, [r3, #28]
 800ef04:	431a      	orrs	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6a1b      	ldr	r3, [r3, #32]
 800ef0a:	ea42 0103 	orr.w	r1, r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	699b      	ldr	r3, [r3, #24]
 800ef1e:	0c1b      	lsrs	r3, r3, #16
 800ef20:	f003 0104 	and.w	r1, r3, #4
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	430a      	orrs	r2, r1
 800ef2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	69da      	ldr	r2, [r3, #28]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ef66:	2301      	movs	r3, #1
 800ef68:	e01a      	b.n	800efa0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7f6 fe24 	bl	8005bd0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b08c      	sub	sp, #48	; 0x30
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
 800efb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800efb6:	2301      	movs	r3, #1
 800efb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800efba:	2300      	movs	r3, #0
 800efbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d101      	bne.n	800efce <HAL_SPI_TransmitReceive+0x26>
 800efca:	2302      	movs	r3, #2
 800efcc:	e18a      	b.n	800f2e4 <HAL_SPI_TransmitReceive+0x33c>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2201      	movs	r2, #1
 800efd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efd6:	f7fc fac3 	bl	800b560 <HAL_GetTick>
 800efda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800efe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800efec:	887b      	ldrh	r3, [r7, #2]
 800efee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d00f      	beq.n	800f018 <HAL_SPI_TransmitReceive+0x70>
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800effe:	d107      	bne.n	800f010 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d103      	bne.n	800f010 <HAL_SPI_TransmitReceive+0x68>
 800f008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	d003      	beq.n	800f018 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f010:	2302      	movs	r3, #2
 800f012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f016:	e15b      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d005      	beq.n	800f02a <HAL_SPI_TransmitReceive+0x82>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <HAL_SPI_TransmitReceive+0x82>
 800f024:	887b      	ldrh	r3, [r7, #2]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d103      	bne.n	800f032 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f030:	e14e      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b04      	cmp	r3, #4
 800f03c:	d003      	beq.n	800f046 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2205      	movs	r2, #5
 800f042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2200      	movs	r2, #0
 800f04a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	887a      	ldrh	r2, [r7, #2]
 800f056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	887a      	ldrh	r2, [r7, #2]
 800f05c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	887a      	ldrh	r2, [r7, #2]
 800f068:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	887a      	ldrh	r2, [r7, #2]
 800f06e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2200      	movs	r2, #0
 800f074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f086:	2b40      	cmp	r3, #64	; 0x40
 800f088:	d007      	beq.n	800f09a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f098:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0a2:	d178      	bne.n	800f196 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <HAL_SPI_TransmitReceive+0x10a>
 800f0ac:	8b7b      	ldrh	r3, [r7, #26]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d166      	bne.n	800f180 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b6:	881a      	ldrh	r2, [r3, #0]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c2:	1c9a      	adds	r2, r3, #2
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0d6:	e053      	b.n	800f180 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	f003 0302 	and.w	r3, r3, #2
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d11b      	bne.n	800f11e <HAL_SPI_TransmitReceive+0x176>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d016      	beq.n	800f11e <HAL_SPI_TransmitReceive+0x176>
 800f0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d113      	bne.n	800f11e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0fa:	881a      	ldrh	r2, [r3, #0]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f106:	1c9a      	adds	r2, r3, #2
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f110:	b29b      	uxth	r3, r3
 800f112:	3b01      	subs	r3, #1
 800f114:	b29a      	uxth	r2, r3
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f11a:	2300      	movs	r3, #0
 800f11c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d119      	bne.n	800f160 <HAL_SPI_TransmitReceive+0x1b8>
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f130:	b29b      	uxth	r3, r3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d014      	beq.n	800f160 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68da      	ldr	r2, [r3, #12]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f140:	b292      	uxth	r2, r2
 800f142:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f148:	1c9a      	adds	r2, r3, #2
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f152:	b29b      	uxth	r3, r3
 800f154:	3b01      	subs	r3, #1
 800f156:	b29a      	uxth	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f15c:	2301      	movs	r3, #1
 800f15e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f160:	f7fc f9fe 	bl	800b560 <HAL_GetTick>
 800f164:	4602      	mov	r2, r0
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d807      	bhi.n	800f180 <HAL_SPI_TransmitReceive+0x1d8>
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d003      	beq.n	800f180 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f178:	2303      	movs	r3, #3
 800f17a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f17e:	e0a7      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f184:	b29b      	uxth	r3, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1a6      	bne.n	800f0d8 <HAL_SPI_TransmitReceive+0x130>
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f18e:	b29b      	uxth	r3, r3
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1a1      	bne.n	800f0d8 <HAL_SPI_TransmitReceive+0x130>
 800f194:	e07c      	b.n	800f290 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <HAL_SPI_TransmitReceive+0x1fc>
 800f19e:	8b7b      	ldrh	r3, [r7, #26]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d16b      	bne.n	800f27c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	330c      	adds	r3, #12
 800f1ae:	7812      	ldrb	r2, [r2, #0]
 800f1b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1b6:	1c5a      	adds	r2, r3, #1
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1ca:	e057      	b.n	800f27c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	689b      	ldr	r3, [r3, #8]
 800f1d2:	f003 0302 	and.w	r3, r3, #2
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d11c      	bne.n	800f214 <HAL_SPI_TransmitReceive+0x26c>
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d017      	beq.n	800f214 <HAL_SPI_TransmitReceive+0x26c>
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d114      	bne.n	800f214 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	330c      	adds	r3, #12
 800f1f4:	7812      	ldrb	r2, [r2, #0]
 800f1f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fc:	1c5a      	adds	r2, r3, #1
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f206:	b29b      	uxth	r3, r3
 800f208:	3b01      	subs	r3, #1
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f210:	2300      	movs	r3, #0
 800f212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	f003 0301 	and.w	r3, r3, #1
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d119      	bne.n	800f256 <HAL_SPI_TransmitReceive+0x2ae>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f226:	b29b      	uxth	r3, r3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d014      	beq.n	800f256 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68da      	ldr	r2, [r3, #12]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f236:	b2d2      	uxtb	r2, r2
 800f238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23e:	1c5a      	adds	r2, r3, #1
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f248:	b29b      	uxth	r3, r3
 800f24a:	3b01      	subs	r3, #1
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f252:	2301      	movs	r3, #1
 800f254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f256:	f7fc f983 	bl	800b560 <HAL_GetTick>
 800f25a:	4602      	mov	r2, r0
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f262:	429a      	cmp	r2, r3
 800f264:	d803      	bhi.n	800f26e <HAL_SPI_TransmitReceive+0x2c6>
 800f266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26c:	d102      	bne.n	800f274 <HAL_SPI_TransmitReceive+0x2cc>
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	2b00      	cmp	r3, #0
 800f272:	d103      	bne.n	800f27c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f27a:	e029      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f280:	b29b      	uxth	r3, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1a2      	bne.n	800f1cc <HAL_SPI_TransmitReceive+0x224>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d19d      	bne.n	800f1cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f000 fae1 	bl	800f85c <SPI_EndRxTxTransaction>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d006      	beq.n	800f2ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2220      	movs	r2, #32
 800f2aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f2ac:	e010      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10b      	bne.n	800f2ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	617b      	str	r3, [r7, #20]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	617b      	str	r3, [r7, #20]
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	e000      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f2ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f2e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3730      	adds	r7, #48	; 0x30
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b086      	sub	sp, #24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f304:	2b01      	cmp	r3, #1
 800f306:	d101      	bne.n	800f30c <HAL_SPI_Transmit_DMA+0x20>
 800f308:	2302      	movs	r3, #2
 800f30a:	e093      	b.n	800f434 <HAL_SPI_Transmit_DMA+0x148>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d002      	beq.n	800f326 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800f320:	2302      	movs	r3, #2
 800f322:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f324:	e081      	b.n	800f42a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <HAL_SPI_Transmit_DMA+0x46>
 800f32c:	88fb      	ldrh	r3, [r7, #6]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d102      	bne.n	800f338 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f336:	e078      	b.n	800f42a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2203      	movs	r2, #3
 800f33c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	88fa      	ldrh	r2, [r7, #6]
 800f350:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	88fa      	ldrh	r2, [r7, #6]
 800f356:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2200      	movs	r2, #0
 800f368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2200      	movs	r2, #0
 800f36e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f37e:	d107      	bne.n	800f390 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f38e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f394:	4a29      	ldr	r2, [pc, #164]	; (800f43c <HAL_SPI_Transmit_DMA+0x150>)
 800f396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f39c:	4a28      	ldr	r2, [pc, #160]	; (800f440 <HAL_SPI_Transmit_DMA+0x154>)
 800f39e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3a4:	4a27      	ldr	r2, [pc, #156]	; (800f444 <HAL_SPI_Transmit_DMA+0x158>)
 800f3a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	330c      	adds	r3, #12
 800f3c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f3c8:	f7fd f880 	bl	800c4cc <HAL_DMA_Start_IT>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00c      	beq.n	800f3ec <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3d6:	f043 0210 	orr.w	r2, r3, #16
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800f3ea:	e01e      	b.n	800f42a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f6:	2b40      	cmp	r3, #64	; 0x40
 800f3f8:	d007      	beq.n	800f40a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f408:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	685a      	ldr	r2, [r3, #4]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f042 0220 	orr.w	r2, r2, #32
 800f418:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685a      	ldr	r2, [r3, #4]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f042 0202 	orr.w	r2, r2, #2
 800f428:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f432:	7dfb      	ldrb	r3, [r7, #23]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	0800f705 	.word	0x0800f705
 800f440:	0800f65d 	.word	0x0800f65d
 800f444:	0800f721 	.word	0x0800f721

0800f448 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b088      	sub	sp, #32
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	099b      	lsrs	r3, r3, #6
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10f      	bne.n	800f48c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00a      	beq.n	800f48c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	099b      	lsrs	r3, r3, #6
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d004      	beq.n	800f48c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	4798      	blx	r3
    return;
 800f48a:	e0d8      	b.n	800f63e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	085b      	lsrs	r3, r3, #1
 800f490:	f003 0301 	and.w	r3, r3, #1
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00a      	beq.n	800f4ae <HAL_SPI_IRQHandler+0x66>
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	09db      	lsrs	r3, r3, #7
 800f49c:	f003 0301 	and.w	r3, r3, #1
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d004      	beq.n	800f4ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	4798      	blx	r3
    return;
 800f4ac:	e0c7      	b.n	800f63e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	095b      	lsrs	r3, r3, #5
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10c      	bne.n	800f4d4 <HAL_SPI_IRQHandler+0x8c>
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	099b      	lsrs	r3, r3, #6
 800f4be:	f003 0301 	and.w	r3, r3, #1
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d106      	bne.n	800f4d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	0a1b      	lsrs	r3, r3, #8
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 80b5 	beq.w	800f63e <HAL_SPI_IRQHandler+0x1f6>
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	095b      	lsrs	r3, r3, #5
 800f4d8:	f003 0301 	and.w	r3, r3, #1
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	f000 80ae 	beq.w	800f63e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	099b      	lsrs	r3, r3, #6
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d023      	beq.n	800f536 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d011      	beq.n	800f51e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fe:	f043 0204 	orr.w	r2, r3, #4
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f506:	2300      	movs	r3, #0
 800f508:	617b      	str	r3, [r7, #20]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	617b      	str	r3, [r7, #20]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	617b      	str	r3, [r7, #20]
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	e00b      	b.n	800f536 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f51e:	2300      	movs	r3, #0
 800f520:	613b      	str	r3, [r7, #16]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	613b      	str	r3, [r7, #16]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	613b      	str	r3, [r7, #16]
 800f532:	693b      	ldr	r3, [r7, #16]
        return;
 800f534:	e083      	b.n	800f63e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	095b      	lsrs	r3, r3, #5
 800f53a:	f003 0301 	and.w	r3, r3, #1
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d014      	beq.n	800f56c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f546:	f043 0201 	orr.w	r2, r3, #1
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f54e:	2300      	movs	r3, #0
 800f550:	60fb      	str	r3, [r7, #12]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	60fb      	str	r3, [r7, #12]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	0a1b      	lsrs	r3, r3, #8
 800f570:	f003 0301 	and.w	r3, r3, #1
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00c      	beq.n	800f592 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f57c:	f043 0208 	orr.w	r2, r3, #8
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f584:	2300      	movs	r3, #0
 800f586:	60bb      	str	r3, [r7, #8]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	60bb      	str	r3, [r7, #8]
 800f590:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f596:	2b00      	cmp	r3, #0
 800f598:	d050      	beq.n	800f63c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f5a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	f003 0302 	and.w	r3, r3, #2
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d104      	bne.n	800f5c6 <HAL_SPI_IRQHandler+0x17e>
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d034      	beq.n	800f630 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f022 0203 	bic.w	r2, r2, #3
 800f5d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d011      	beq.n	800f602 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5e2:	4a18      	ldr	r2, [pc, #96]	; (800f644 <HAL_SPI_IRQHandler+0x1fc>)
 800f5e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fc ffc6 	bl	800c57c <HAL_DMA_Abort_IT>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d005      	beq.n	800f602 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f606:	2b00      	cmp	r3, #0
 800f608:	d016      	beq.n	800f638 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f60e:	4a0d      	ldr	r2, [pc, #52]	; (800f644 <HAL_SPI_IRQHandler+0x1fc>)
 800f610:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f616:	4618      	mov	r0, r3
 800f618:	f7fc ffb0 	bl	800c57c <HAL_DMA_Abort_IT>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00a      	beq.n	800f638 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f62e:	e003      	b.n	800f638 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f7f6 f9ff 	bl	8005a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f636:	e000      	b.n	800f63a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f638:	bf00      	nop
    return;
 800f63a:	bf00      	nop
 800f63c:	bf00      	nop
  }
}
 800f63e:	3720      	adds	r7, #32
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	0800f761 	.word	0x0800f761

0800f648 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f650:	bf00      	nop
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f668:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f66a:	f7fb ff79 	bl	800b560 <HAL_GetTick>
 800f66e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f67a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f67e:	d03b      	beq.n	800f6f8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f022 0220 	bic.w	r2, r2, #32
 800f68e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f022 0202 	bic.w	r2, r2, #2
 800f69e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	2164      	movs	r1, #100	; 0x64
 800f6a4:	6978      	ldr	r0, [r7, #20]
 800f6a6:	f000 f8d9 	bl	800f85c <SPI_EndRxTxTransaction>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d005      	beq.n	800f6bc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b4:	f043 0220 	orr.w	r2, r3, #32
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10a      	bne.n	800f6da <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	60fb      	str	r3, [r7, #12]
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	60fb      	str	r3, [r7, #12]
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	60fb      	str	r3, [r7, #12]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d003      	beq.n	800f6f8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f6f0:	6978      	ldr	r0, [r7, #20]
 800f6f2:	f7f6 f99f 	bl	8005a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f6f6:	e002      	b.n	800f6fe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f6f8:	6978      	ldr	r0, [r7, #20]
 800f6fa:	f7f6 f9b1 	bl	8005a60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f6fe:	3718      	adds	r7, #24
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f710:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7ff ff98 	bl	800f648 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f718:	bf00      	nop
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f72c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	685a      	ldr	r2, [r3, #4]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f022 0203 	bic.w	r2, r2, #3
 800f73c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f742:	f043 0210 	orr.w	r2, r3, #16
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7f6 f96e 	bl	8005a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f76c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f7f6 f95a 	bl	8005a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f780:	bf00      	nop
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	603b      	str	r3, [r7, #0]
 800f794:	4613      	mov	r3, r2
 800f796:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f798:	e04c      	b.n	800f834 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a0:	d048      	beq.n	800f834 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f7a2:	f7fb fedd 	bl	800b560 <HAL_GetTick>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	683a      	ldr	r2, [r7, #0]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d902      	bls.n	800f7b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d13d      	bne.n	800f834 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	685a      	ldr	r2, [r3, #4]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f7c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7d0:	d111      	bne.n	800f7f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7da:	d004      	beq.n	800f7e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7e4:	d107      	bne.n	800f7f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7fe:	d10f      	bne.n	800f820 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f81e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2201      	movs	r2, #1
 800f824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f830:	2303      	movs	r3, #3
 800f832:	e00f      	b.n	800f854 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	689a      	ldr	r2, [r3, #8]
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	4013      	ands	r3, r2
 800f83e:	68ba      	ldr	r2, [r7, #8]
 800f840:	429a      	cmp	r2, r3
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	461a      	mov	r2, r3
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d1a3      	bne.n	800f79a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b088      	sub	sp, #32
 800f860:	af02      	add	r7, sp, #8
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f868:	4b1b      	ldr	r3, [pc, #108]	; (800f8d8 <SPI_EndRxTxTransaction+0x7c>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a1b      	ldr	r2, [pc, #108]	; (800f8dc <SPI_EndRxTxTransaction+0x80>)
 800f86e:	fba2 2303 	umull	r2, r3, r2, r3
 800f872:	0d5b      	lsrs	r3, r3, #21
 800f874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f878:	fb02 f303 	mul.w	r3, r2, r3
 800f87c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f886:	d112      	bne.n	800f8ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2200      	movs	r2, #0
 800f890:	2180      	movs	r1, #128	; 0x80
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7ff ff78 	bl	800f788 <SPI_WaitFlagStateUntilTimeout>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d016      	beq.n	800f8cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8a2:	f043 0220 	orr.w	r2, r3, #32
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	e00f      	b.n	800f8ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00a      	beq.n	800f8ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8c4:	2b80      	cmp	r3, #128	; 0x80
 800f8c6:	d0f2      	beq.n	800f8ae <SPI_EndRxTxTransaction+0x52>
 800f8c8:	e000      	b.n	800f8cc <SPI_EndRxTxTransaction+0x70>
        break;
 800f8ca:	bf00      	nop
  }

  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3718      	adds	r7, #24
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	20000000 	.word	0x20000000
 800f8dc:	165e9f81 	.word	0x165e9f81

0800f8e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d101      	bne.n	800f8f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e01d      	b.n	800f92e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d106      	bne.n	800f90c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7f5 fdfe 	bl	8005508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2202      	movs	r2, #2
 800f910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	3304      	adds	r3, #4
 800f91c:	4619      	mov	r1, r3
 800f91e:	4610      	mov	r0, r2
 800f920:	f000 fb2a 	bl	800ff78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2201      	movs	r2, #1
 800f928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b082      	sub	sp, #8
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d101      	bne.n	800f948 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f944:	2301      	movs	r3, #1
 800f946:	e01d      	b.n	800f984 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b00      	cmp	r3, #0
 800f952:	d106      	bne.n	800f962 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f815 	bl	800f98c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2202      	movs	r2, #2
 800f966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	3304      	adds	r3, #4
 800f972:	4619      	mov	r1, r3
 800f974:	4610      	mov	r0, r2
 800f976:	f000 faff 	bl	800ff78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b0c      	cmp	r3, #12
 800f9ae:	d841      	bhi.n	800fa34 <HAL_TIM_IC_Start_IT+0x94>
 800f9b0:	a201      	add	r2, pc, #4	; (adr r2, 800f9b8 <HAL_TIM_IC_Start_IT+0x18>)
 800f9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b6:	bf00      	nop
 800f9b8:	0800f9ed 	.word	0x0800f9ed
 800f9bc:	0800fa35 	.word	0x0800fa35
 800f9c0:	0800fa35 	.word	0x0800fa35
 800f9c4:	0800fa35 	.word	0x0800fa35
 800f9c8:	0800f9ff 	.word	0x0800f9ff
 800f9cc:	0800fa35 	.word	0x0800fa35
 800f9d0:	0800fa35 	.word	0x0800fa35
 800f9d4:	0800fa35 	.word	0x0800fa35
 800f9d8:	0800fa11 	.word	0x0800fa11
 800f9dc:	0800fa35 	.word	0x0800fa35
 800f9e0:	0800fa35 	.word	0x0800fa35
 800f9e4:	0800fa35 	.word	0x0800fa35
 800f9e8:	0800fa23 	.word	0x0800fa23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68da      	ldr	r2, [r3, #12]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f042 0202 	orr.w	r2, r2, #2
 800f9fa:	60da      	str	r2, [r3, #12]
      break;
 800f9fc:	e01b      	b.n	800fa36 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68da      	ldr	r2, [r3, #12]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f042 0204 	orr.w	r2, r2, #4
 800fa0c:	60da      	str	r2, [r3, #12]
      break;
 800fa0e:	e012      	b.n	800fa36 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68da      	ldr	r2, [r3, #12]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f042 0208 	orr.w	r2, r2, #8
 800fa1e:	60da      	str	r2, [r3, #12]
      break;
 800fa20:	e009      	b.n	800fa36 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f042 0210 	orr.w	r2, r2, #16
 800fa30:	60da      	str	r2, [r3, #12]
      break;
 800fa32:	e000      	b.n	800fa36 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800fa34:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 fcd2 	bl	80103e8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	f003 0307 	and.w	r3, r3, #7
 800fa4e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2b06      	cmp	r3, #6
 800fa54:	d007      	beq.n	800fa66 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f042 0201 	orr.w	r2, r2, #1
 800fa64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa66:	2300      	movs	r3, #0
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	691b      	ldr	r3, [r3, #16]
 800fa7e:	f003 0302 	and.w	r3, r3, #2
 800fa82:	2b02      	cmp	r3, #2
 800fa84:	d122      	bne.n	800facc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	f003 0302 	and.w	r3, r3, #2
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d11b      	bne.n	800facc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f06f 0202 	mvn.w	r2, #2
 800fa9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	699b      	ldr	r3, [r3, #24]
 800faaa:	f003 0303 	and.w	r3, r3, #3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d003      	beq.n	800faba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7f5 fd78 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 800fab8:	e005      	b.n	800fac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fa3d 	bl	800ff3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 fa44 	bl	800ff4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2200      	movs	r2, #0
 800faca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	691b      	ldr	r3, [r3, #16]
 800fad2:	f003 0304 	and.w	r3, r3, #4
 800fad6:	2b04      	cmp	r3, #4
 800fad8:	d122      	bne.n	800fb20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	f003 0304 	and.w	r3, r3, #4
 800fae4:	2b04      	cmp	r3, #4
 800fae6:	d11b      	bne.n	800fb20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f06f 0204 	mvn.w	r2, #4
 800faf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2202      	movs	r2, #2
 800faf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	699b      	ldr	r3, [r3, #24]
 800fafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d003      	beq.n	800fb0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7f5 fd4e 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 800fb0c:	e005      	b.n	800fb1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fa13 	bl	800ff3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 fa1a 	bl	800ff4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	f003 0308 	and.w	r3, r3, #8
 800fb2a:	2b08      	cmp	r3, #8
 800fb2c:	d122      	bne.n	800fb74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	f003 0308 	and.w	r3, r3, #8
 800fb38:	2b08      	cmp	r3, #8
 800fb3a:	d11b      	bne.n	800fb74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f06f 0208 	mvn.w	r2, #8
 800fb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2204      	movs	r2, #4
 800fb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	69db      	ldr	r3, [r3, #28]
 800fb52:	f003 0303 	and.w	r3, r3, #3
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7f5 fd24 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 800fb60:	e005      	b.n	800fb6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f9e9 	bl	800ff3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 f9f0 	bl	800ff4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	f003 0310 	and.w	r3, r3, #16
 800fb7e:	2b10      	cmp	r3, #16
 800fb80:	d122      	bne.n	800fbc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b10      	cmp	r3, #16
 800fb8e:	d11b      	bne.n	800fbc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f06f 0210 	mvn.w	r2, #16
 800fb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2208      	movs	r2, #8
 800fb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	69db      	ldr	r3, [r3, #28]
 800fba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f7f5 fcfa 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 800fbb4:	e005      	b.n	800fbc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f9bf 	bl	800ff3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 f9c6 	bl	800ff4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	f003 0301 	and.w	r3, r3, #1
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d10e      	bne.n	800fbf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f003 0301 	and.w	r3, r3, #1
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d107      	bne.n	800fbf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f06f 0201 	mvn.w	r2, #1
 800fbec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f000 f999 	bl	800ff26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbfe:	2b80      	cmp	r3, #128	; 0x80
 800fc00:	d10e      	bne.n	800fc20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc0c:	2b80      	cmp	r3, #128	; 0x80
 800fc0e:	d107      	bne.n	800fc20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fc82 	bl	8010524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc2a:	2b40      	cmp	r3, #64	; 0x40
 800fc2c:	d10e      	bne.n	800fc4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc38:	2b40      	cmp	r3, #64	; 0x40
 800fc3a:	d107      	bne.n	800fc4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f98b 	bl	800ff62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	f003 0320 	and.w	r3, r3, #32
 800fc56:	2b20      	cmp	r3, #32
 800fc58:	d10e      	bne.n	800fc78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	f003 0320 	and.w	r3, r3, #32
 800fc64:	2b20      	cmp	r3, #32
 800fc66:	d107      	bne.n	800fc78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f06f 0220 	mvn.w	r2, #32
 800fc70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fc4c 	bl	8010510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d101      	bne.n	800fc9a <HAL_TIM_IC_ConfigChannel+0x1a>
 800fc96:	2302      	movs	r3, #2
 800fc98:	e08a      	b.n	800fdb0 <HAL_TIM_IC_ConfigChannel+0x130>
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2202      	movs	r2, #2
 800fca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d11b      	bne.n	800fce8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6818      	ldr	r0, [r3, #0]
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	6819      	ldr	r1, [r3, #0]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	f000 f9da 	bl	8010078 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	699a      	ldr	r2, [r3, #24]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f022 020c 	bic.w	r2, r2, #12
 800fcd2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6999      	ldr	r1, [r3, #24]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	689a      	ldr	r2, [r3, #8]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	430a      	orrs	r2, r1
 800fce4:	619a      	str	r2, [r3, #24]
 800fce6:	e05a      	b.n	800fd9e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2b04      	cmp	r3, #4
 800fcec:	d11c      	bne.n	800fd28 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6818      	ldr	r0, [r3, #0]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	6819      	ldr	r1, [r3, #0]
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	685a      	ldr	r2, [r3, #4]
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	f000 fa52 	bl	80101a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	699a      	ldr	r2, [r3, #24]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fd10:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6999      	ldr	r1, [r3, #24]
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	021a      	lsls	r2, r3, #8
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	430a      	orrs	r2, r1
 800fd24:	619a      	str	r2, [r3, #24]
 800fd26:	e03a      	b.n	800fd9e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b08      	cmp	r3, #8
 800fd2c:	d11b      	bne.n	800fd66 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6818      	ldr	r0, [r3, #0]
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	6819      	ldr	r1, [r3, #0]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	f000 fa9f 	bl	8010280 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	69da      	ldr	r2, [r3, #28]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f022 020c 	bic.w	r2, r2, #12
 800fd50:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	69d9      	ldr	r1, [r3, #28]
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	689a      	ldr	r2, [r3, #8]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	430a      	orrs	r2, r1
 800fd62:	61da      	str	r2, [r3, #28]
 800fd64:	e01b      	b.n	800fd9e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6818      	ldr	r0, [r3, #0]
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	6819      	ldr	r1, [r3, #0]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	685a      	ldr	r2, [r3, #4]
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	f000 fabf 	bl	80102f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	69da      	ldr	r2, [r3, #28]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fd88:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	69d9      	ldr	r1, [r3, #28]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	021a      	lsls	r2, r3, #8
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	430a      	orrs	r2, r1
 800fd9c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2201      	movs	r2, #1
 800fda2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d101      	bne.n	800fdd0 <HAL_TIM_ConfigClockSource+0x18>
 800fdcc:	2302      	movs	r3, #2
 800fdce:	e0a6      	b.n	800ff1e <HAL_TIM_ConfigClockSource+0x166>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2202      	movs	r2, #2
 800fddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fdee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fdf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b40      	cmp	r3, #64	; 0x40
 800fe06:	d067      	beq.n	800fed8 <HAL_TIM_ConfigClockSource+0x120>
 800fe08:	2b40      	cmp	r3, #64	; 0x40
 800fe0a:	d80b      	bhi.n	800fe24 <HAL_TIM_ConfigClockSource+0x6c>
 800fe0c:	2b10      	cmp	r3, #16
 800fe0e:	d073      	beq.n	800fef8 <HAL_TIM_ConfigClockSource+0x140>
 800fe10:	2b10      	cmp	r3, #16
 800fe12:	d802      	bhi.n	800fe1a <HAL_TIM_ConfigClockSource+0x62>
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d06f      	beq.n	800fef8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fe18:	e078      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fe1a:	2b20      	cmp	r3, #32
 800fe1c:	d06c      	beq.n	800fef8 <HAL_TIM_ConfigClockSource+0x140>
 800fe1e:	2b30      	cmp	r3, #48	; 0x30
 800fe20:	d06a      	beq.n	800fef8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800fe22:	e073      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fe24:	2b70      	cmp	r3, #112	; 0x70
 800fe26:	d00d      	beq.n	800fe44 <HAL_TIM_ConfigClockSource+0x8c>
 800fe28:	2b70      	cmp	r3, #112	; 0x70
 800fe2a:	d804      	bhi.n	800fe36 <HAL_TIM_ConfigClockSource+0x7e>
 800fe2c:	2b50      	cmp	r3, #80	; 0x50
 800fe2e:	d033      	beq.n	800fe98 <HAL_TIM_ConfigClockSource+0xe0>
 800fe30:	2b60      	cmp	r3, #96	; 0x60
 800fe32:	d041      	beq.n	800feb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800fe34:	e06a      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fe36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe3a:	d066      	beq.n	800ff0a <HAL_TIM_ConfigClockSource+0x152>
 800fe3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe40:	d017      	beq.n	800fe72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800fe42:	e063      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6818      	ldr	r0, [r3, #0]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	6899      	ldr	r1, [r3, #8]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	685a      	ldr	r2, [r3, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	f000 faa8 	bl	80103a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fe66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	609a      	str	r2, [r3, #8]
      break;
 800fe70:	e04c      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6818      	ldr	r0, [r3, #0]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	6899      	ldr	r1, [r3, #8]
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	685a      	ldr	r2, [r3, #4]
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	f000 fa91 	bl	80103a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	689a      	ldr	r2, [r3, #8]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe94:	609a      	str	r2, [r3, #8]
      break;
 800fe96:	e039      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	6859      	ldr	r1, [r3, #4]
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	461a      	mov	r2, r3
 800fea6:	f000 f94f 	bl	8010148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2150      	movs	r1, #80	; 0x50
 800feb0:	4618      	mov	r0, r3
 800feb2:	f000 fa5e 	bl	8010372 <TIM_ITRx_SetConfig>
      break;
 800feb6:	e029      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6818      	ldr	r0, [r3, #0]
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	6859      	ldr	r1, [r3, #4]
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	461a      	mov	r2, r3
 800fec6:	f000 f9ab 	bl	8010220 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2160      	movs	r1, #96	; 0x60
 800fed0:	4618      	mov	r0, r3
 800fed2:	f000 fa4e 	bl	8010372 <TIM_ITRx_SetConfig>
      break;
 800fed6:	e019      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6818      	ldr	r0, [r3, #0]
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	6859      	ldr	r1, [r3, #4]
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	461a      	mov	r2, r3
 800fee6:	f000 f92f 	bl	8010148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2140      	movs	r1, #64	; 0x40
 800fef0:	4618      	mov	r0, r3
 800fef2:	f000 fa3e 	bl	8010372 <TIM_ITRx_SetConfig>
      break;
 800fef6:	e009      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4619      	mov	r1, r3
 800ff02:	4610      	mov	r0, r2
 800ff04:	f000 fa35 	bl	8010372 <TIM_ITRx_SetConfig>
      break;
 800ff08:	e000      	b.n	800ff0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ff0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff26:	b480      	push	{r7}
 800ff28:	b083      	sub	sp, #12
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ff2e:	bf00      	nop
 800ff30:	370c      	adds	r7, #12
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff3a:	b480      	push	{r7}
 800ff3c:	b083      	sub	sp, #12
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ff56:	bf00      	nop
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b083      	sub	sp, #12
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff6a:	bf00      	nop
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
	...

0800ff78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4a34      	ldr	r2, [pc, #208]	; (801005c <TIM_Base_SetConfig+0xe4>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d00f      	beq.n	800ffb0 <TIM_Base_SetConfig+0x38>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff96:	d00b      	beq.n	800ffb0 <TIM_Base_SetConfig+0x38>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	4a31      	ldr	r2, [pc, #196]	; (8010060 <TIM_Base_SetConfig+0xe8>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d007      	beq.n	800ffb0 <TIM_Base_SetConfig+0x38>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4a30      	ldr	r2, [pc, #192]	; (8010064 <TIM_Base_SetConfig+0xec>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d003      	beq.n	800ffb0 <TIM_Base_SetConfig+0x38>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4a2f      	ldr	r2, [pc, #188]	; (8010068 <TIM_Base_SetConfig+0xf0>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d108      	bne.n	800ffc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4a25      	ldr	r2, [pc, #148]	; (801005c <TIM_Base_SetConfig+0xe4>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d01b      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffd0:	d017      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4a22      	ldr	r2, [pc, #136]	; (8010060 <TIM_Base_SetConfig+0xe8>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d013      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4a21      	ldr	r2, [pc, #132]	; (8010064 <TIM_Base_SetConfig+0xec>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d00f      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a20      	ldr	r2, [pc, #128]	; (8010068 <TIM_Base_SetConfig+0xf0>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d00b      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a1f      	ldr	r2, [pc, #124]	; (801006c <TIM_Base_SetConfig+0xf4>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d007      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4a1e      	ldr	r2, [pc, #120]	; (8010070 <TIM_Base_SetConfig+0xf8>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d003      	beq.n	8010002 <TIM_Base_SetConfig+0x8a>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4a1d      	ldr	r2, [pc, #116]	; (8010074 <TIM_Base_SetConfig+0xfc>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d108      	bne.n	8010014 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	68db      	ldr	r3, [r3, #12]
 801000e:	68fa      	ldr	r2, [r7, #12]
 8010010:	4313      	orrs	r3, r2
 8010012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	4313      	orrs	r3, r2
 8010020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	689a      	ldr	r2, [r3, #8]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4a08      	ldr	r2, [pc, #32]	; (801005c <TIM_Base_SetConfig+0xe4>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d103      	bne.n	8010048 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	691a      	ldr	r2, [r3, #16]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2201      	movs	r2, #1
 801004c:	615a      	str	r2, [r3, #20]
}
 801004e:	bf00      	nop
 8010050:	3714      	adds	r7, #20
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	40010000 	.word	0x40010000
 8010060:	40000400 	.word	0x40000400
 8010064:	40000800 	.word	0x40000800
 8010068:	40000c00 	.word	0x40000c00
 801006c:	40014000 	.word	0x40014000
 8010070:	40014400 	.word	0x40014400
 8010074:	40014800 	.word	0x40014800

08010078 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010078:	b480      	push	{r7}
 801007a:	b087      	sub	sp, #28
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
 8010084:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	f023 0201 	bic.w	r2, r3, #1
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	699b      	ldr	r3, [r3, #24]
 8010096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6a1b      	ldr	r3, [r3, #32]
 801009c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	4a24      	ldr	r2, [pc, #144]	; (8010134 <TIM_TI1_SetConfig+0xbc>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d013      	beq.n	80100ce <TIM_TI1_SetConfig+0x56>
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ac:	d00f      	beq.n	80100ce <TIM_TI1_SetConfig+0x56>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	4a21      	ldr	r2, [pc, #132]	; (8010138 <TIM_TI1_SetConfig+0xc0>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d00b      	beq.n	80100ce <TIM_TI1_SetConfig+0x56>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	4a20      	ldr	r2, [pc, #128]	; (801013c <TIM_TI1_SetConfig+0xc4>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d007      	beq.n	80100ce <TIM_TI1_SetConfig+0x56>
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	4a1f      	ldr	r2, [pc, #124]	; (8010140 <TIM_TI1_SetConfig+0xc8>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d003      	beq.n	80100ce <TIM_TI1_SetConfig+0x56>
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	4a1e      	ldr	r2, [pc, #120]	; (8010144 <TIM_TI1_SetConfig+0xcc>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d101      	bne.n	80100d2 <TIM_TI1_SetConfig+0x5a>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <TIM_TI1_SetConfig+0x5c>
 80100d2:	2300      	movs	r3, #0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d008      	beq.n	80100ea <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	f023 0303 	bic.w	r3, r3, #3
 80100de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80100e0:	697a      	ldr	r2, [r7, #20]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	617b      	str	r3, [r7, #20]
 80100e8:	e003      	b.n	80100f2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f043 0301 	orr.w	r3, r3, #1
 80100f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80100f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	011b      	lsls	r3, r3, #4
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	697a      	ldr	r2, [r7, #20]
 8010102:	4313      	orrs	r3, r2
 8010104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	f023 030a 	bic.w	r3, r3, #10
 801010c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	f003 030a 	and.w	r3, r3, #10
 8010114:	693a      	ldr	r2, [r7, #16]
 8010116:	4313      	orrs	r3, r2
 8010118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	693a      	ldr	r2, [r7, #16]
 8010124:	621a      	str	r2, [r3, #32]
}
 8010126:	bf00      	nop
 8010128:	371c      	adds	r7, #28
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop
 8010134:	40010000 	.word	0x40010000
 8010138:	40000400 	.word	0x40000400
 801013c:	40000800 	.word	0x40000800
 8010140:	40000c00 	.word	0x40000c00
 8010144:	40014000 	.word	0x40014000

08010148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010148:	b480      	push	{r7}
 801014a:	b087      	sub	sp, #28
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6a1b      	ldr	r3, [r3, #32]
 8010158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6a1b      	ldr	r3, [r3, #32]
 801015e:	f023 0201 	bic.w	r2, r3, #1
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	699b      	ldr	r3, [r3, #24]
 801016a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	011b      	lsls	r3, r3, #4
 8010178:	693a      	ldr	r2, [r7, #16]
 801017a:	4313      	orrs	r3, r2
 801017c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	f023 030a 	bic.w	r3, r3, #10
 8010184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	4313      	orrs	r3, r2
 801018c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	693a      	ldr	r2, [r7, #16]
 8010192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	621a      	str	r2, [r3, #32]
}
 801019a:	bf00      	nop
 801019c:	371c      	adds	r7, #28
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80101a6:	b480      	push	{r7}
 80101a8:	b087      	sub	sp, #28
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	60f8      	str	r0, [r7, #12]
 80101ae:	60b9      	str	r1, [r7, #8]
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6a1b      	ldr	r3, [r3, #32]
 80101b8:	f023 0210 	bic.w	r2, r3, #16
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	021b      	lsls	r3, r3, #8
 80101d8:	697a      	ldr	r2, [r7, #20]
 80101da:	4313      	orrs	r3, r2
 80101dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80101e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	031b      	lsls	r3, r3, #12
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	697a      	ldr	r2, [r7, #20]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80101f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	011b      	lsls	r3, r3, #4
 80101fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	4313      	orrs	r3, r2
 8010206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	693a      	ldr	r2, [r7, #16]
 8010212:	621a      	str	r2, [r3, #32]
}
 8010214:	bf00      	nop
 8010216:	371c      	adds	r7, #28
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010220:	b480      	push	{r7}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6a1b      	ldr	r3, [r3, #32]
 8010230:	f023 0210 	bic.w	r2, r3, #16
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801024a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	031b      	lsls	r3, r3, #12
 8010250:	697a      	ldr	r2, [r7, #20]
 8010252:	4313      	orrs	r3, r2
 8010254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801025c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	011b      	lsls	r3, r3, #4
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	4313      	orrs	r3, r2
 8010266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	693a      	ldr	r2, [r7, #16]
 8010272:	621a      	str	r2, [r3, #32]
}
 8010274:	bf00      	nop
 8010276:	371c      	adds	r7, #28
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010280:	b480      	push	{r7}
 8010282:	b087      	sub	sp, #28
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
 801028c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6a1b      	ldr	r3, [r3, #32]
 8010292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	69db      	ldr	r3, [r3, #28]
 801029e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f023 0303 	bic.w	r3, r3, #3
 80102ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80102bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	011b      	lsls	r3, r3, #4
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	697a      	ldr	r2, [r7, #20]
 80102c6:	4313      	orrs	r3, r2
 80102c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80102d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	021b      	lsls	r3, r3, #8
 80102d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	4313      	orrs	r3, r2
 80102de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	693a      	ldr	r2, [r7, #16]
 80102ea:	621a      	str	r2, [r3, #32]
}
 80102ec:	bf00      	nop
 80102ee:	371c      	adds	r7, #28
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b087      	sub	sp, #28
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	6a1b      	ldr	r3, [r3, #32]
 801030a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	69db      	ldr	r3, [r3, #28]
 8010316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6a1b      	ldr	r3, [r3, #32]
 801031c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010324:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	021b      	lsls	r3, r3, #8
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	4313      	orrs	r3, r2
 801032e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010336:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	031b      	lsls	r3, r3, #12
 801033c:	b29b      	uxth	r3, r3
 801033e:	697a      	ldr	r2, [r7, #20]
 8010340:	4313      	orrs	r3, r2
 8010342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801034a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	031b      	lsls	r3, r3, #12
 8010350:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010354:	693a      	ldr	r2, [r7, #16]
 8010356:	4313      	orrs	r3, r2
 8010358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	697a      	ldr	r2, [r7, #20]
 801035e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	693a      	ldr	r2, [r7, #16]
 8010364:	621a      	str	r2, [r3, #32]
}
 8010366:	bf00      	nop
 8010368:	371c      	adds	r7, #28
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr

08010372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010372:	b480      	push	{r7}
 8010374:	b085      	sub	sp, #20
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	4313      	orrs	r3, r2
 8010390:	f043 0307 	orr.w	r3, r3, #7
 8010394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	68fa      	ldr	r2, [r7, #12]
 801039a:	609a      	str	r2, [r3, #8]
}
 801039c:	bf00      	nop
 801039e:	3714      	adds	r7, #20
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b087      	sub	sp, #28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
 80103b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	021a      	lsls	r2, r3, #8
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	431a      	orrs	r2, r3
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	697a      	ldr	r2, [r7, #20]
 80103da:	609a      	str	r2, [r3, #8]
}
 80103dc:	bf00      	nop
 80103de:	371c      	adds	r7, #28
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b087      	sub	sp, #28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	f003 031f 	and.w	r3, r3, #31
 80103fa:	2201      	movs	r2, #1
 80103fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6a1a      	ldr	r2, [r3, #32]
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	43db      	mvns	r3, r3
 801040a:	401a      	ands	r2, r3
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6a1a      	ldr	r2, [r3, #32]
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	f003 031f 	and.w	r3, r3, #31
 801041a:	6879      	ldr	r1, [r7, #4]
 801041c:	fa01 f303 	lsl.w	r3, r1, r3
 8010420:	431a      	orrs	r2, r3
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	621a      	str	r2, [r3, #32]
}
 8010426:	bf00      	nop
 8010428:	371c      	adds	r7, #28
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
	...

08010434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010444:	2b01      	cmp	r3, #1
 8010446:	d101      	bne.n	801044c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010448:	2302      	movs	r3, #2
 801044a:	e050      	b.n	80104ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2202      	movs	r2, #2
 8010458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4313      	orrs	r3, r2
 801047c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a1c      	ldr	r2, [pc, #112]	; (80104fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d018      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010498:	d013      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a18      	ldr	r2, [pc, #96]	; (8010500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d00e      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a16      	ldr	r2, [pc, #88]	; (8010504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d009      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a15      	ldr	r2, [pc, #84]	; (8010508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d004      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a13      	ldr	r2, [pc, #76]	; (801050c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d10c      	bne.n	80104dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	40010000 	.word	0x40010000
 8010500:	40000400 	.word	0x40000400
 8010504:	40000800 	.word	0x40000800
 8010508:	40000c00 	.word	0x40000c00
 801050c:	40014000 	.word	0x40014000

08010510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801052c:	bf00      	nop
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010546:	2301      	movs	r3, #1
 8010548:	e03f      	b.n	80105ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d106      	bne.n	8010564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2200      	movs	r2, #0
 801055a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7f5 ffac 	bl	80064bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2224      	movs	r2, #36	; 0x24
 8010568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	68da      	ldr	r2, [r3, #12]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801057a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 fc8f 	bl	8010ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	691a      	ldr	r2, [r3, #16]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	695a      	ldr	r2, [r3, #20]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80105a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68da      	ldr	r2, [r3, #12]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80105b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2220      	movs	r2, #32
 80105bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2220      	movs	r2, #32
 80105c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3708      	adds	r7, #8
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b082      	sub	sp, #8
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d101      	bne.n	80105e4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80105e0:	2301      	movs	r3, #1
 80105e2:	e01e      	b.n	8010622 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2224      	movs	r2, #36	; 0x24
 80105e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	68da      	ldr	r2, [r3, #12]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105fa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7f6 f833 	bl	8006668 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2200      	movs	r2, #0
 8010606:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8010620:	2300      	movs	r3, #0
}
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801062a:	b580      	push	{r7, lr}
 801062c:	b088      	sub	sp, #32
 801062e:	af02      	add	r7, sp, #8
 8010630:	60f8      	str	r0, [r7, #12]
 8010632:	60b9      	str	r1, [r7, #8]
 8010634:	603b      	str	r3, [r7, #0]
 8010636:	4613      	mov	r3, r2
 8010638:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801063a:	2300      	movs	r3, #0
 801063c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b20      	cmp	r3, #32
 8010648:	f040 8083 	bne.w	8010752 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d002      	beq.n	8010658 <HAL_UART_Transmit+0x2e>
 8010652:	88fb      	ldrh	r3, [r7, #6]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d101      	bne.n	801065c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010658:	2301      	movs	r3, #1
 801065a:	e07b      	b.n	8010754 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010662:	2b01      	cmp	r3, #1
 8010664:	d101      	bne.n	801066a <HAL_UART_Transmit+0x40>
 8010666:	2302      	movs	r3, #2
 8010668:	e074      	b.n	8010754 <HAL_UART_Transmit+0x12a>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2201      	movs	r2, #1
 801066e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2200      	movs	r2, #0
 8010676:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2221      	movs	r2, #33	; 0x21
 801067c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010680:	f7fa ff6e 	bl	800b560 <HAL_GetTick>
 8010684:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	88fa      	ldrh	r2, [r7, #6]
 801068a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	88fa      	ldrh	r2, [r7, #6]
 8010690:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2200      	movs	r2, #0
 8010696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801069a:	e042      	b.n	8010722 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	3b01      	subs	r3, #1
 80106a4:	b29a      	uxth	r2, r3
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106b2:	d122      	bne.n	80106fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	9300      	str	r3, [sp, #0]
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2200      	movs	r2, #0
 80106bc:	2180      	movs	r1, #128	; 0x80
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f000 fa6c 	bl	8010b9c <UART_WaitOnFlagUntilTimeout>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d001      	beq.n	80106ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80106ca:	2303      	movs	r3, #3
 80106cc:	e042      	b.n	8010754 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80106e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d103      	bne.n	80106f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	3302      	adds	r3, #2
 80106ee:	60bb      	str	r3, [r7, #8]
 80106f0:	e017      	b.n	8010722 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	3301      	adds	r3, #1
 80106f6:	60bb      	str	r3, [r7, #8]
 80106f8:	e013      	b.n	8010722 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	2200      	movs	r2, #0
 8010702:	2180      	movs	r1, #128	; 0x80
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f000 fa49 	bl	8010b9c <UART_WaitOnFlagUntilTimeout>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010710:	2303      	movs	r3, #3
 8010712:	e01f      	b.n	8010754 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	1c5a      	adds	r2, r3, #1
 8010718:	60ba      	str	r2, [r7, #8]
 801071a:	781a      	ldrb	r2, [r3, #0]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010726:	b29b      	uxth	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1b7      	bne.n	801069c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	2200      	movs	r2, #0
 8010734:	2140      	movs	r1, #64	; 0x40
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f000 fa30 	bl	8010b9c <UART_WaitOnFlagUntilTimeout>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d001      	beq.n	8010746 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8010742:	2303      	movs	r3, #3
 8010744:	e006      	b.n	8010754 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2220      	movs	r2, #32
 801074a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801074e:	2300      	movs	r3, #0
 8010750:	e000      	b.n	8010754 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010752:	2302      	movs	r3, #2
  }
}
 8010754:	4618      	mov	r0, r3
 8010756:	3718      	adds	r7, #24
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	4613      	mov	r3, r2
 8010768:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b20      	cmp	r3, #32
 8010774:	d166      	bne.n	8010844 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <HAL_UART_Receive_DMA+0x26>
 801077c:	88fb      	ldrh	r3, [r7, #6]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d101      	bne.n	8010786 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010782:	2301      	movs	r3, #1
 8010784:	e05f      	b.n	8010846 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801078c:	2b01      	cmp	r3, #1
 801078e:	d101      	bne.n	8010794 <HAL_UART_Receive_DMA+0x38>
 8010790:	2302      	movs	r3, #2
 8010792:	e058      	b.n	8010846 <HAL_UART_Receive_DMA+0xea>
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2201      	movs	r2, #1
 8010798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	88fa      	ldrh	r2, [r7, #6]
 80107a6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2200      	movs	r2, #0
 80107ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2222      	movs	r2, #34	; 0x22
 80107b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ba:	4a25      	ldr	r2, [pc, #148]	; (8010850 <HAL_UART_Receive_DMA+0xf4>)
 80107bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107c2:	4a24      	ldr	r2, [pc, #144]	; (8010854 <HAL_UART_Receive_DMA+0xf8>)
 80107c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ca:	4a23      	ldr	r2, [pc, #140]	; (8010858 <HAL_UART_Receive_DMA+0xfc>)
 80107cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d2:	2200      	movs	r2, #0
 80107d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80107d6:	f107 0308 	add.w	r3, r7, #8
 80107da:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	3304      	adds	r3, #4
 80107e6:	4619      	mov	r1, r3
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	88fb      	ldrh	r3, [r7, #6]
 80107ee:	f7fb fe6d 	bl	800c4cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80107f2:	2300      	movs	r3, #0
 80107f4:	613b      	str	r3, [r7, #16]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	613b      	str	r3, [r7, #16]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	613b      	str	r3, [r7, #16]
 8010806:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2200      	movs	r2, #0
 801080c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68da      	ldr	r2, [r3, #12]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801081e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	695a      	ldr	r2, [r3, #20]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f042 0201 	orr.w	r2, r2, #1
 801082e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	695a      	ldr	r2, [r3, #20]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801083e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010840:	2300      	movs	r3, #0
 8010842:	e000      	b.n	8010846 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010844:	2302      	movs	r3, #2
  }
}
 8010846:	4618      	mov	r0, r3
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	08010a85 	.word	0x08010a85
 8010854:	08010aed 	.word	0x08010aed
 8010858:	08010b09 	.word	0x08010b09

0801085c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b088      	sub	sp, #32
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	695b      	ldr	r3, [r3, #20]
 801087a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801087c:	2300      	movs	r3, #0
 801087e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010880:	2300      	movs	r3, #0
 8010882:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	f003 030f 	and.w	r3, r3, #15
 801088a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d10d      	bne.n	80108ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010892:	69fb      	ldr	r3, [r7, #28]
 8010894:	f003 0320 	and.w	r3, r3, #32
 8010898:	2b00      	cmp	r3, #0
 801089a:	d008      	beq.n	80108ae <HAL_UART_IRQHandler+0x52>
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	f003 0320 	and.w	r3, r3, #32
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d003      	beq.n	80108ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 fa78 	bl	8010d9c <UART_Receive_IT>
      return;
 80108ac:	e0d1      	b.n	8010a52 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 80b0 	beq.w	8010a16 <HAL_UART_IRQHandler+0x1ba>
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	f003 0301 	and.w	r3, r3, #1
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d105      	bne.n	80108cc <HAL_UART_IRQHandler+0x70>
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f000 80a5 	beq.w	8010a16 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	f003 0301 	and.w	r3, r3, #1
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00a      	beq.n	80108ec <HAL_UART_IRQHandler+0x90>
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d005      	beq.n	80108ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108e4:	f043 0201 	orr.w	r2, r3, #1
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00a      	beq.n	801090c <HAL_UART_IRQHandler+0xb0>
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	f003 0301 	and.w	r3, r3, #1
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d005      	beq.n	801090c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010904:	f043 0202 	orr.w	r2, r3, #2
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	f003 0302 	and.w	r3, r3, #2
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00a      	beq.n	801092c <HAL_UART_IRQHandler+0xd0>
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f003 0301 	and.w	r3, r3, #1
 801091c:	2b00      	cmp	r3, #0
 801091e:	d005      	beq.n	801092c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010924:	f043 0204 	orr.w	r2, r3, #4
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	f003 0308 	and.w	r3, r3, #8
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00f      	beq.n	8010956 <HAL_UART_IRQHandler+0xfa>
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	f003 0320 	and.w	r3, r3, #32
 801093c:	2b00      	cmp	r3, #0
 801093e:	d104      	bne.n	801094a <HAL_UART_IRQHandler+0xee>
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f003 0301 	and.w	r3, r3, #1
 8010946:	2b00      	cmp	r3, #0
 8010948:	d005      	beq.n	8010956 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801094e:	f043 0208 	orr.w	r2, r3, #8
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801095a:	2b00      	cmp	r3, #0
 801095c:	d078      	beq.n	8010a50 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801095e:	69fb      	ldr	r3, [r7, #28]
 8010960:	f003 0320 	and.w	r3, r3, #32
 8010964:	2b00      	cmp	r3, #0
 8010966:	d007      	beq.n	8010978 <HAL_UART_IRQHandler+0x11c>
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	f003 0320 	and.w	r3, r3, #32
 801096e:	2b00      	cmp	r3, #0
 8010970:	d002      	beq.n	8010978 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 fa12 	bl	8010d9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	695b      	ldr	r3, [r3, #20]
 801097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010982:	2b40      	cmp	r3, #64	; 0x40
 8010984:	bf0c      	ite	eq
 8010986:	2301      	moveq	r3, #1
 8010988:	2300      	movne	r3, #0
 801098a:	b2db      	uxtb	r3, r3
 801098c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010992:	f003 0308 	and.w	r3, r3, #8
 8010996:	2b00      	cmp	r3, #0
 8010998:	d102      	bne.n	80109a0 <HAL_UART_IRQHandler+0x144>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d031      	beq.n	8010a04 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 f95b 	bl	8010c5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	695b      	ldr	r3, [r3, #20]
 80109ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109b0:	2b40      	cmp	r3, #64	; 0x40
 80109b2:	d123      	bne.n	80109fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	695a      	ldr	r2, [r3, #20]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d013      	beq.n	80109f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d0:	4a21      	ldr	r2, [pc, #132]	; (8010a58 <HAL_UART_IRQHandler+0x1fc>)
 80109d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fb fdcf 	bl	800c57c <HAL_DMA_Abort_IT>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d016      	beq.n	8010a12 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80109ee:	4610      	mov	r0, r2
 80109f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109f2:	e00e      	b.n	8010a12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7f5 fd4d 	bl	8006494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109fa:	e00a      	b.n	8010a12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7f5 fd49 	bl	8006494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a02:	e006      	b.n	8010a12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7f5 fd45 	bl	8006494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010a10:	e01e      	b.n	8010a50 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a12:	bf00      	nop
    return;
 8010a14:	e01c      	b.n	8010a50 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d008      	beq.n	8010a32 <HAL_UART_IRQHandler+0x1d6>
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d003      	beq.n	8010a32 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f948 	bl	8010cc0 <UART_Transmit_IT>
    return;
 8010a30:	e00f      	b.n	8010a52 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00a      	beq.n	8010a52 <HAL_UART_IRQHandler+0x1f6>
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d005      	beq.n	8010a52 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f990 	bl	8010d6c <UART_EndTransmit_IT>
    return;
 8010a4c:	bf00      	nop
 8010a4e:	e000      	b.n	8010a52 <HAL_UART_IRQHandler+0x1f6>
    return;
 8010a50:	bf00      	nop
  }
}
 8010a52:	3720      	adds	r7, #32
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	08010c99 	.word	0x08010c99

08010a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a90:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d11e      	bne.n	8010ade <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	68da      	ldr	r2, [r3, #12]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010ab4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	695a      	ldr	r2, [r3, #20]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f022 0201 	bic.w	r2, r2, #1
 8010ac4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	695a      	ldr	r2, [r3, #20]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ad4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2220      	movs	r2, #32
 8010ada:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f7f5 fce2 	bl	80064a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ae4:	bf00      	nop
 8010ae6:	3710      	adds	r7, #16
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f7ff ffb8 	bl	8010a70 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b00:	bf00      	nop
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010b10:	2300      	movs	r3, #0
 8010b12:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b18:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	695b      	ldr	r3, [r3, #20]
 8010b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b24:	2b80      	cmp	r3, #128	; 0x80
 8010b26:	bf0c      	ite	eq
 8010b28:	2301      	moveq	r3, #1
 8010b2a:	2300      	movne	r3, #0
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	2b21      	cmp	r3, #33	; 0x21
 8010b3a:	d108      	bne.n	8010b4e <UART_DMAError+0x46>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d005      	beq.n	8010b4e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	2200      	movs	r2, #0
 8010b46:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010b48:	68b8      	ldr	r0, [r7, #8]
 8010b4a:	f000 f871 	bl	8010c30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b58:	2b40      	cmp	r3, #64	; 0x40
 8010b5a:	bf0c      	ite	eq
 8010b5c:	2301      	moveq	r3, #1
 8010b5e:	2300      	movne	r3, #0
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b22      	cmp	r3, #34	; 0x22
 8010b6e:	d108      	bne.n	8010b82 <UART_DMAError+0x7a>
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d005      	beq.n	8010b82 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010b7c:	68b8      	ldr	r0, [r7, #8]
 8010b7e:	f000 f86d 	bl	8010c5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b86:	f043 0210 	orr.w	r2, r3, #16
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b8e:	68b8      	ldr	r0, [r7, #8]
 8010b90:	f7f5 fc80 	bl	8006494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b94:	bf00      	nop
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	603b      	str	r3, [r7, #0]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bac:	e02c      	b.n	8010c08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bae:	69bb      	ldr	r3, [r7, #24]
 8010bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb4:	d028      	beq.n	8010c08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d007      	beq.n	8010bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8010bbc:	f7fa fcd0 	bl	800b560 <HAL_GetTick>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	69ba      	ldr	r2, [r7, #24]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d21d      	bcs.n	8010c08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	68da      	ldr	r2, [r3, #12]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	695a      	ldr	r2, [r3, #20]
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f022 0201 	bic.w	r2, r2, #1
 8010bea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2220      	movs	r2, #32
 8010bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2220      	movs	r2, #32
 8010bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010c04:	2303      	movs	r3, #3
 8010c06:	e00f      	b.n	8010c28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	4013      	ands	r3, r2
 8010c12:	68ba      	ldr	r2, [r7, #8]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	bf0c      	ite	eq
 8010c18:	2301      	moveq	r3, #1
 8010c1a:	2300      	movne	r3, #0
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	461a      	mov	r2, r3
 8010c20:	79fb      	ldrb	r3, [r7, #7]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d0c3      	beq.n	8010bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	68da      	ldr	r2, [r3, #12]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010c46:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2220      	movs	r2, #32
 8010c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	68da      	ldr	r2, [r3, #12]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	695a      	ldr	r2, [r3, #20]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f022 0201 	bic.w	r2, r2, #1
 8010c82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2220      	movs	r2, #32
 8010c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010c8c:	bf00      	nop
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	f7f5 fbee 	bl	8006494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cb8:	bf00      	nop
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b085      	sub	sp, #20
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	2b21      	cmp	r3, #33	; 0x21
 8010cd2:	d144      	bne.n	8010d5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cdc:	d11a      	bne.n	8010d14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a1b      	ldr	r3, [r3, #32]
 8010ce2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	881b      	ldrh	r3, [r3, #0]
 8010ce8:	461a      	mov	r2, r3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010cf2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	691b      	ldr	r3, [r3, #16]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d105      	bne.n	8010d08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6a1b      	ldr	r3, [r3, #32]
 8010d00:	1c9a      	adds	r2, r3, #2
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	621a      	str	r2, [r3, #32]
 8010d06:	e00e      	b.n	8010d26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a1b      	ldr	r3, [r3, #32]
 8010d0c:	1c5a      	adds	r2, r3, #1
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	621a      	str	r2, [r3, #32]
 8010d12:	e008      	b.n	8010d26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6a1b      	ldr	r3, [r3, #32]
 8010d18:	1c59      	adds	r1, r3, #1
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	6211      	str	r1, [r2, #32]
 8010d1e:	781a      	ldrb	r2, [r3, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	4619      	mov	r1, r3
 8010d34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d10f      	bne.n	8010d5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	68da      	ldr	r2, [r3, #12]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	68da      	ldr	r2, [r3, #12]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e000      	b.n	8010d60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010d5e:	2302      	movs	r3, #2
  }
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3714      	adds	r7, #20
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68da      	ldr	r2, [r3, #12]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2220      	movs	r2, #32
 8010d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7ff fe65 	bl	8010a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010d92:	2300      	movs	r3, #0
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	2b22      	cmp	r3, #34	; 0x22
 8010dae:	d171      	bne.n	8010e94 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010db8:	d123      	bne.n	8010e02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dbe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	691b      	ldr	r3, [r3, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d10e      	bne.n	8010de6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dde:	1c9a      	adds	r2, r3, #2
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	629a      	str	r2, [r3, #40]	; 0x28
 8010de4:	e029      	b.n	8010e3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8010e00:	e01b      	b.n	8010e3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	691b      	ldr	r3, [r3, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10a      	bne.n	8010e20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	6858      	ldr	r0, [r3, #4]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e14:	1c59      	adds	r1, r3, #1
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	6291      	str	r1, [r2, #40]	; 0x28
 8010e1a:	b2c2      	uxtb	r2, r0
 8010e1c:	701a      	strb	r2, [r3, #0]
 8010e1e:	e00c      	b.n	8010e3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	b2da      	uxtb	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e2c:	1c58      	adds	r0, r3, #1
 8010e2e:	6879      	ldr	r1, [r7, #4]
 8010e30:	6288      	str	r0, [r1, #40]	; 0x28
 8010e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010e36:	b2d2      	uxtb	r2, r2
 8010e38:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	3b01      	subs	r3, #1
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	4619      	mov	r1, r3
 8010e48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d120      	bne.n	8010e90 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	68da      	ldr	r2, [r3, #12]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f022 0220 	bic.w	r2, r2, #32
 8010e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	68da      	ldr	r2, [r3, #12]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	695a      	ldr	r2, [r3, #20]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f022 0201 	bic.w	r2, r2, #1
 8010e7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2220      	movs	r2, #32
 8010e82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f7f5 fb0e 	bl	80064a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	e002      	b.n	8010e96 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010e90:	2300      	movs	r3, #0
 8010e92:	e000      	b.n	8010e96 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010e94:	2302      	movs	r3, #2
  }
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3710      	adds	r7, #16
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
	...

08010ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	b085      	sub	sp, #20
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	68da      	ldr	r2, [r3, #12]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	430a      	orrs	r2, r1
 8010ebe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	689a      	ldr	r2, [r3, #8]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	691b      	ldr	r3, [r3, #16]
 8010ec8:	431a      	orrs	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	695b      	ldr	r3, [r3, #20]
 8010ece:	431a      	orrs	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	69db      	ldr	r3, [r3, #28]
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010ee2:	f023 030c 	bic.w	r3, r3, #12
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	6812      	ldr	r2, [r2, #0]
 8010eea:	68f9      	ldr	r1, [r7, #12]
 8010eec:	430b      	orrs	r3, r1
 8010eee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	699a      	ldr	r2, [r3, #24]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	430a      	orrs	r2, r1
 8010f04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	69db      	ldr	r3, [r3, #28]
 8010f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f0e:	f040 818b 	bne.w	8011228 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4ac1      	ldr	r2, [pc, #772]	; (801121c <UART_SetConfig+0x37c>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d005      	beq.n	8010f28 <UART_SetConfig+0x88>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4abf      	ldr	r2, [pc, #764]	; (8011220 <UART_SetConfig+0x380>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	f040 80bd 	bne.w	80110a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010f28:	f7fc fc96 	bl	800d858 <HAL_RCC_GetPCLK2Freq>
 8010f2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	461d      	mov	r5, r3
 8010f32:	f04f 0600 	mov.w	r6, #0
 8010f36:	46a8      	mov	r8, r5
 8010f38:	46b1      	mov	r9, r6
 8010f3a:	eb18 0308 	adds.w	r3, r8, r8
 8010f3e:	eb49 0409 	adc.w	r4, r9, r9
 8010f42:	4698      	mov	r8, r3
 8010f44:	46a1      	mov	r9, r4
 8010f46:	eb18 0805 	adds.w	r8, r8, r5
 8010f4a:	eb49 0906 	adc.w	r9, r9, r6
 8010f4e:	f04f 0100 	mov.w	r1, #0
 8010f52:	f04f 0200 	mov.w	r2, #0
 8010f56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010f5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010f5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010f62:	4688      	mov	r8, r1
 8010f64:	4691      	mov	r9, r2
 8010f66:	eb18 0005 	adds.w	r0, r8, r5
 8010f6a:	eb49 0106 	adc.w	r1, r9, r6
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	461d      	mov	r5, r3
 8010f74:	f04f 0600 	mov.w	r6, #0
 8010f78:	196b      	adds	r3, r5, r5
 8010f7a:	eb46 0406 	adc.w	r4, r6, r6
 8010f7e:	461a      	mov	r2, r3
 8010f80:	4623      	mov	r3, r4
 8010f82:	f7ef fe99 	bl	8000cb8 <__aeabi_uldivmod>
 8010f86:	4603      	mov	r3, r0
 8010f88:	460c      	mov	r4, r1
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	4ba5      	ldr	r3, [pc, #660]	; (8011224 <UART_SetConfig+0x384>)
 8010f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8010f92:	095b      	lsrs	r3, r3, #5
 8010f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	461d      	mov	r5, r3
 8010f9c:	f04f 0600 	mov.w	r6, #0
 8010fa0:	46a9      	mov	r9, r5
 8010fa2:	46b2      	mov	sl, r6
 8010fa4:	eb19 0309 	adds.w	r3, r9, r9
 8010fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8010fac:	4699      	mov	r9, r3
 8010fae:	46a2      	mov	sl, r4
 8010fb0:	eb19 0905 	adds.w	r9, r9, r5
 8010fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8010fb8:	f04f 0100 	mov.w	r1, #0
 8010fbc:	f04f 0200 	mov.w	r2, #0
 8010fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010fcc:	4689      	mov	r9, r1
 8010fce:	4692      	mov	sl, r2
 8010fd0:	eb19 0005 	adds.w	r0, r9, r5
 8010fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	461d      	mov	r5, r3
 8010fde:	f04f 0600 	mov.w	r6, #0
 8010fe2:	196b      	adds	r3, r5, r5
 8010fe4:	eb46 0406 	adc.w	r4, r6, r6
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4623      	mov	r3, r4
 8010fec:	f7ef fe64 	bl	8000cb8 <__aeabi_uldivmod>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	460c      	mov	r4, r1
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	4b8b      	ldr	r3, [pc, #556]	; (8011224 <UART_SetConfig+0x384>)
 8010ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8010ffc:	095b      	lsrs	r3, r3, #5
 8010ffe:	2164      	movs	r1, #100	; 0x64
 8011000:	fb01 f303 	mul.w	r3, r1, r3
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	3332      	adds	r3, #50	; 0x32
 801100a:	4a86      	ldr	r2, [pc, #536]	; (8011224 <UART_SetConfig+0x384>)
 801100c:	fba2 2303 	umull	r2, r3, r2, r3
 8011010:	095b      	lsrs	r3, r3, #5
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011018:	4498      	add	r8, r3
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	461d      	mov	r5, r3
 801101e:	f04f 0600 	mov.w	r6, #0
 8011022:	46a9      	mov	r9, r5
 8011024:	46b2      	mov	sl, r6
 8011026:	eb19 0309 	adds.w	r3, r9, r9
 801102a:	eb4a 040a 	adc.w	r4, sl, sl
 801102e:	4699      	mov	r9, r3
 8011030:	46a2      	mov	sl, r4
 8011032:	eb19 0905 	adds.w	r9, r9, r5
 8011036:	eb4a 0a06 	adc.w	sl, sl, r6
 801103a:	f04f 0100 	mov.w	r1, #0
 801103e:	f04f 0200 	mov.w	r2, #0
 8011042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801104a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801104e:	4689      	mov	r9, r1
 8011050:	4692      	mov	sl, r2
 8011052:	eb19 0005 	adds.w	r0, r9, r5
 8011056:	eb4a 0106 	adc.w	r1, sl, r6
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	461d      	mov	r5, r3
 8011060:	f04f 0600 	mov.w	r6, #0
 8011064:	196b      	adds	r3, r5, r5
 8011066:	eb46 0406 	adc.w	r4, r6, r6
 801106a:	461a      	mov	r2, r3
 801106c:	4623      	mov	r3, r4
 801106e:	f7ef fe23 	bl	8000cb8 <__aeabi_uldivmod>
 8011072:	4603      	mov	r3, r0
 8011074:	460c      	mov	r4, r1
 8011076:	461a      	mov	r2, r3
 8011078:	4b6a      	ldr	r3, [pc, #424]	; (8011224 <UART_SetConfig+0x384>)
 801107a:	fba3 1302 	umull	r1, r3, r3, r2
 801107e:	095b      	lsrs	r3, r3, #5
 8011080:	2164      	movs	r1, #100	; 0x64
 8011082:	fb01 f303 	mul.w	r3, r1, r3
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	3332      	adds	r3, #50	; 0x32
 801108c:	4a65      	ldr	r2, [pc, #404]	; (8011224 <UART_SetConfig+0x384>)
 801108e:	fba2 2303 	umull	r2, r3, r2, r3
 8011092:	095b      	lsrs	r3, r3, #5
 8011094:	f003 0207 	and.w	r2, r3, #7
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4442      	add	r2, r8
 801109e:	609a      	str	r2, [r3, #8]
 80110a0:	e26f      	b.n	8011582 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80110a2:	f7fc fbc5 	bl	800d830 <HAL_RCC_GetPCLK1Freq>
 80110a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	461d      	mov	r5, r3
 80110ac:	f04f 0600 	mov.w	r6, #0
 80110b0:	46a8      	mov	r8, r5
 80110b2:	46b1      	mov	r9, r6
 80110b4:	eb18 0308 	adds.w	r3, r8, r8
 80110b8:	eb49 0409 	adc.w	r4, r9, r9
 80110bc:	4698      	mov	r8, r3
 80110be:	46a1      	mov	r9, r4
 80110c0:	eb18 0805 	adds.w	r8, r8, r5
 80110c4:	eb49 0906 	adc.w	r9, r9, r6
 80110c8:	f04f 0100 	mov.w	r1, #0
 80110cc:	f04f 0200 	mov.w	r2, #0
 80110d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80110d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80110d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80110dc:	4688      	mov	r8, r1
 80110de:	4691      	mov	r9, r2
 80110e0:	eb18 0005 	adds.w	r0, r8, r5
 80110e4:	eb49 0106 	adc.w	r1, r9, r6
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	461d      	mov	r5, r3
 80110ee:	f04f 0600 	mov.w	r6, #0
 80110f2:	196b      	adds	r3, r5, r5
 80110f4:	eb46 0406 	adc.w	r4, r6, r6
 80110f8:	461a      	mov	r2, r3
 80110fa:	4623      	mov	r3, r4
 80110fc:	f7ef fddc 	bl	8000cb8 <__aeabi_uldivmod>
 8011100:	4603      	mov	r3, r0
 8011102:	460c      	mov	r4, r1
 8011104:	461a      	mov	r2, r3
 8011106:	4b47      	ldr	r3, [pc, #284]	; (8011224 <UART_SetConfig+0x384>)
 8011108:	fba3 2302 	umull	r2, r3, r3, r2
 801110c:	095b      	lsrs	r3, r3, #5
 801110e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	461d      	mov	r5, r3
 8011116:	f04f 0600 	mov.w	r6, #0
 801111a:	46a9      	mov	r9, r5
 801111c:	46b2      	mov	sl, r6
 801111e:	eb19 0309 	adds.w	r3, r9, r9
 8011122:	eb4a 040a 	adc.w	r4, sl, sl
 8011126:	4699      	mov	r9, r3
 8011128:	46a2      	mov	sl, r4
 801112a:	eb19 0905 	adds.w	r9, r9, r5
 801112e:	eb4a 0a06 	adc.w	sl, sl, r6
 8011132:	f04f 0100 	mov.w	r1, #0
 8011136:	f04f 0200 	mov.w	r2, #0
 801113a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801113e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011146:	4689      	mov	r9, r1
 8011148:	4692      	mov	sl, r2
 801114a:	eb19 0005 	adds.w	r0, r9, r5
 801114e:	eb4a 0106 	adc.w	r1, sl, r6
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	461d      	mov	r5, r3
 8011158:	f04f 0600 	mov.w	r6, #0
 801115c:	196b      	adds	r3, r5, r5
 801115e:	eb46 0406 	adc.w	r4, r6, r6
 8011162:	461a      	mov	r2, r3
 8011164:	4623      	mov	r3, r4
 8011166:	f7ef fda7 	bl	8000cb8 <__aeabi_uldivmod>
 801116a:	4603      	mov	r3, r0
 801116c:	460c      	mov	r4, r1
 801116e:	461a      	mov	r2, r3
 8011170:	4b2c      	ldr	r3, [pc, #176]	; (8011224 <UART_SetConfig+0x384>)
 8011172:	fba3 1302 	umull	r1, r3, r3, r2
 8011176:	095b      	lsrs	r3, r3, #5
 8011178:	2164      	movs	r1, #100	; 0x64
 801117a:	fb01 f303 	mul.w	r3, r1, r3
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	00db      	lsls	r3, r3, #3
 8011182:	3332      	adds	r3, #50	; 0x32
 8011184:	4a27      	ldr	r2, [pc, #156]	; (8011224 <UART_SetConfig+0x384>)
 8011186:	fba2 2303 	umull	r2, r3, r2, r3
 801118a:	095b      	lsrs	r3, r3, #5
 801118c:	005b      	lsls	r3, r3, #1
 801118e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011192:	4498      	add	r8, r3
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	461d      	mov	r5, r3
 8011198:	f04f 0600 	mov.w	r6, #0
 801119c:	46a9      	mov	r9, r5
 801119e:	46b2      	mov	sl, r6
 80111a0:	eb19 0309 	adds.w	r3, r9, r9
 80111a4:	eb4a 040a 	adc.w	r4, sl, sl
 80111a8:	4699      	mov	r9, r3
 80111aa:	46a2      	mov	sl, r4
 80111ac:	eb19 0905 	adds.w	r9, r9, r5
 80111b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80111b4:	f04f 0100 	mov.w	r1, #0
 80111b8:	f04f 0200 	mov.w	r2, #0
 80111bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80111c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80111c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80111c8:	4689      	mov	r9, r1
 80111ca:	4692      	mov	sl, r2
 80111cc:	eb19 0005 	adds.w	r0, r9, r5
 80111d0:	eb4a 0106 	adc.w	r1, sl, r6
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	461d      	mov	r5, r3
 80111da:	f04f 0600 	mov.w	r6, #0
 80111de:	196b      	adds	r3, r5, r5
 80111e0:	eb46 0406 	adc.w	r4, r6, r6
 80111e4:	461a      	mov	r2, r3
 80111e6:	4623      	mov	r3, r4
 80111e8:	f7ef fd66 	bl	8000cb8 <__aeabi_uldivmod>
 80111ec:	4603      	mov	r3, r0
 80111ee:	460c      	mov	r4, r1
 80111f0:	461a      	mov	r2, r3
 80111f2:	4b0c      	ldr	r3, [pc, #48]	; (8011224 <UART_SetConfig+0x384>)
 80111f4:	fba3 1302 	umull	r1, r3, r3, r2
 80111f8:	095b      	lsrs	r3, r3, #5
 80111fa:	2164      	movs	r1, #100	; 0x64
 80111fc:	fb01 f303 	mul.w	r3, r1, r3
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	3332      	adds	r3, #50	; 0x32
 8011206:	4a07      	ldr	r2, [pc, #28]	; (8011224 <UART_SetConfig+0x384>)
 8011208:	fba2 2303 	umull	r2, r3, r2, r3
 801120c:	095b      	lsrs	r3, r3, #5
 801120e:	f003 0207 	and.w	r2, r3, #7
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4442      	add	r2, r8
 8011218:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801121a:	e1b2      	b.n	8011582 <UART_SetConfig+0x6e2>
 801121c:	40011000 	.word	0x40011000
 8011220:	40011400 	.word	0x40011400
 8011224:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4ad7      	ldr	r2, [pc, #860]	; (801158c <UART_SetConfig+0x6ec>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d005      	beq.n	801123e <UART_SetConfig+0x39e>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	4ad6      	ldr	r2, [pc, #856]	; (8011590 <UART_SetConfig+0x6f0>)
 8011238:	4293      	cmp	r3, r2
 801123a:	f040 80d1 	bne.w	80113e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801123e:	f7fc fb0b 	bl	800d858 <HAL_RCC_GetPCLK2Freq>
 8011242:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	469a      	mov	sl, r3
 8011248:	f04f 0b00 	mov.w	fp, #0
 801124c:	46d0      	mov	r8, sl
 801124e:	46d9      	mov	r9, fp
 8011250:	eb18 0308 	adds.w	r3, r8, r8
 8011254:	eb49 0409 	adc.w	r4, r9, r9
 8011258:	4698      	mov	r8, r3
 801125a:	46a1      	mov	r9, r4
 801125c:	eb18 080a 	adds.w	r8, r8, sl
 8011260:	eb49 090b 	adc.w	r9, r9, fp
 8011264:	f04f 0100 	mov.w	r1, #0
 8011268:	f04f 0200 	mov.w	r2, #0
 801126c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011270:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011274:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011278:	4688      	mov	r8, r1
 801127a:	4691      	mov	r9, r2
 801127c:	eb1a 0508 	adds.w	r5, sl, r8
 8011280:	eb4b 0609 	adc.w	r6, fp, r9
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	4619      	mov	r1, r3
 801128a:	f04f 0200 	mov.w	r2, #0
 801128e:	f04f 0300 	mov.w	r3, #0
 8011292:	f04f 0400 	mov.w	r4, #0
 8011296:	0094      	lsls	r4, r2, #2
 8011298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801129c:	008b      	lsls	r3, r1, #2
 801129e:	461a      	mov	r2, r3
 80112a0:	4623      	mov	r3, r4
 80112a2:	4628      	mov	r0, r5
 80112a4:	4631      	mov	r1, r6
 80112a6:	f7ef fd07 	bl	8000cb8 <__aeabi_uldivmod>
 80112aa:	4603      	mov	r3, r0
 80112ac:	460c      	mov	r4, r1
 80112ae:	461a      	mov	r2, r3
 80112b0:	4bb8      	ldr	r3, [pc, #736]	; (8011594 <UART_SetConfig+0x6f4>)
 80112b2:	fba3 2302 	umull	r2, r3, r3, r2
 80112b6:	095b      	lsrs	r3, r3, #5
 80112b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	469b      	mov	fp, r3
 80112c0:	f04f 0c00 	mov.w	ip, #0
 80112c4:	46d9      	mov	r9, fp
 80112c6:	46e2      	mov	sl, ip
 80112c8:	eb19 0309 	adds.w	r3, r9, r9
 80112cc:	eb4a 040a 	adc.w	r4, sl, sl
 80112d0:	4699      	mov	r9, r3
 80112d2:	46a2      	mov	sl, r4
 80112d4:	eb19 090b 	adds.w	r9, r9, fp
 80112d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80112dc:	f04f 0100 	mov.w	r1, #0
 80112e0:	f04f 0200 	mov.w	r2, #0
 80112e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80112e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80112ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80112f0:	4689      	mov	r9, r1
 80112f2:	4692      	mov	sl, r2
 80112f4:	eb1b 0509 	adds.w	r5, fp, r9
 80112f8:	eb4c 060a 	adc.w	r6, ip, sl
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	4619      	mov	r1, r3
 8011302:	f04f 0200 	mov.w	r2, #0
 8011306:	f04f 0300 	mov.w	r3, #0
 801130a:	f04f 0400 	mov.w	r4, #0
 801130e:	0094      	lsls	r4, r2, #2
 8011310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011314:	008b      	lsls	r3, r1, #2
 8011316:	461a      	mov	r2, r3
 8011318:	4623      	mov	r3, r4
 801131a:	4628      	mov	r0, r5
 801131c:	4631      	mov	r1, r6
 801131e:	f7ef fccb 	bl	8000cb8 <__aeabi_uldivmod>
 8011322:	4603      	mov	r3, r0
 8011324:	460c      	mov	r4, r1
 8011326:	461a      	mov	r2, r3
 8011328:	4b9a      	ldr	r3, [pc, #616]	; (8011594 <UART_SetConfig+0x6f4>)
 801132a:	fba3 1302 	umull	r1, r3, r3, r2
 801132e:	095b      	lsrs	r3, r3, #5
 8011330:	2164      	movs	r1, #100	; 0x64
 8011332:	fb01 f303 	mul.w	r3, r1, r3
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	011b      	lsls	r3, r3, #4
 801133a:	3332      	adds	r3, #50	; 0x32
 801133c:	4a95      	ldr	r2, [pc, #596]	; (8011594 <UART_SetConfig+0x6f4>)
 801133e:	fba2 2303 	umull	r2, r3, r2, r3
 8011342:	095b      	lsrs	r3, r3, #5
 8011344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011348:	4498      	add	r8, r3
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	469b      	mov	fp, r3
 801134e:	f04f 0c00 	mov.w	ip, #0
 8011352:	46d9      	mov	r9, fp
 8011354:	46e2      	mov	sl, ip
 8011356:	eb19 0309 	adds.w	r3, r9, r9
 801135a:	eb4a 040a 	adc.w	r4, sl, sl
 801135e:	4699      	mov	r9, r3
 8011360:	46a2      	mov	sl, r4
 8011362:	eb19 090b 	adds.w	r9, r9, fp
 8011366:	eb4a 0a0c 	adc.w	sl, sl, ip
 801136a:	f04f 0100 	mov.w	r1, #0
 801136e:	f04f 0200 	mov.w	r2, #0
 8011372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801137a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801137e:	4689      	mov	r9, r1
 8011380:	4692      	mov	sl, r2
 8011382:	eb1b 0509 	adds.w	r5, fp, r9
 8011386:	eb4c 060a 	adc.w	r6, ip, sl
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	4619      	mov	r1, r3
 8011390:	f04f 0200 	mov.w	r2, #0
 8011394:	f04f 0300 	mov.w	r3, #0
 8011398:	f04f 0400 	mov.w	r4, #0
 801139c:	0094      	lsls	r4, r2, #2
 801139e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80113a2:	008b      	lsls	r3, r1, #2
 80113a4:	461a      	mov	r2, r3
 80113a6:	4623      	mov	r3, r4
 80113a8:	4628      	mov	r0, r5
 80113aa:	4631      	mov	r1, r6
 80113ac:	f7ef fc84 	bl	8000cb8 <__aeabi_uldivmod>
 80113b0:	4603      	mov	r3, r0
 80113b2:	460c      	mov	r4, r1
 80113b4:	461a      	mov	r2, r3
 80113b6:	4b77      	ldr	r3, [pc, #476]	; (8011594 <UART_SetConfig+0x6f4>)
 80113b8:	fba3 1302 	umull	r1, r3, r3, r2
 80113bc:	095b      	lsrs	r3, r3, #5
 80113be:	2164      	movs	r1, #100	; 0x64
 80113c0:	fb01 f303 	mul.w	r3, r1, r3
 80113c4:	1ad3      	subs	r3, r2, r3
 80113c6:	011b      	lsls	r3, r3, #4
 80113c8:	3332      	adds	r3, #50	; 0x32
 80113ca:	4a72      	ldr	r2, [pc, #456]	; (8011594 <UART_SetConfig+0x6f4>)
 80113cc:	fba2 2303 	umull	r2, r3, r2, r3
 80113d0:	095b      	lsrs	r3, r3, #5
 80113d2:	f003 020f 	and.w	r2, r3, #15
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4442      	add	r2, r8
 80113dc:	609a      	str	r2, [r3, #8]
 80113de:	e0d0      	b.n	8011582 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80113e0:	f7fc fa26 	bl	800d830 <HAL_RCC_GetPCLK1Freq>
 80113e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	469a      	mov	sl, r3
 80113ea:	f04f 0b00 	mov.w	fp, #0
 80113ee:	46d0      	mov	r8, sl
 80113f0:	46d9      	mov	r9, fp
 80113f2:	eb18 0308 	adds.w	r3, r8, r8
 80113f6:	eb49 0409 	adc.w	r4, r9, r9
 80113fa:	4698      	mov	r8, r3
 80113fc:	46a1      	mov	r9, r4
 80113fe:	eb18 080a 	adds.w	r8, r8, sl
 8011402:	eb49 090b 	adc.w	r9, r9, fp
 8011406:	f04f 0100 	mov.w	r1, #0
 801140a:	f04f 0200 	mov.w	r2, #0
 801140e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011412:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011416:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801141a:	4688      	mov	r8, r1
 801141c:	4691      	mov	r9, r2
 801141e:	eb1a 0508 	adds.w	r5, sl, r8
 8011422:	eb4b 0609 	adc.w	r6, fp, r9
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	4619      	mov	r1, r3
 801142c:	f04f 0200 	mov.w	r2, #0
 8011430:	f04f 0300 	mov.w	r3, #0
 8011434:	f04f 0400 	mov.w	r4, #0
 8011438:	0094      	lsls	r4, r2, #2
 801143a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801143e:	008b      	lsls	r3, r1, #2
 8011440:	461a      	mov	r2, r3
 8011442:	4623      	mov	r3, r4
 8011444:	4628      	mov	r0, r5
 8011446:	4631      	mov	r1, r6
 8011448:	f7ef fc36 	bl	8000cb8 <__aeabi_uldivmod>
 801144c:	4603      	mov	r3, r0
 801144e:	460c      	mov	r4, r1
 8011450:	461a      	mov	r2, r3
 8011452:	4b50      	ldr	r3, [pc, #320]	; (8011594 <UART_SetConfig+0x6f4>)
 8011454:	fba3 2302 	umull	r2, r3, r3, r2
 8011458:	095b      	lsrs	r3, r3, #5
 801145a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	469b      	mov	fp, r3
 8011462:	f04f 0c00 	mov.w	ip, #0
 8011466:	46d9      	mov	r9, fp
 8011468:	46e2      	mov	sl, ip
 801146a:	eb19 0309 	adds.w	r3, r9, r9
 801146e:	eb4a 040a 	adc.w	r4, sl, sl
 8011472:	4699      	mov	r9, r3
 8011474:	46a2      	mov	sl, r4
 8011476:	eb19 090b 	adds.w	r9, r9, fp
 801147a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801147e:	f04f 0100 	mov.w	r1, #0
 8011482:	f04f 0200 	mov.w	r2, #0
 8011486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801148a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801148e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011492:	4689      	mov	r9, r1
 8011494:	4692      	mov	sl, r2
 8011496:	eb1b 0509 	adds.w	r5, fp, r9
 801149a:	eb4c 060a 	adc.w	r6, ip, sl
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	4619      	mov	r1, r3
 80114a4:	f04f 0200 	mov.w	r2, #0
 80114a8:	f04f 0300 	mov.w	r3, #0
 80114ac:	f04f 0400 	mov.w	r4, #0
 80114b0:	0094      	lsls	r4, r2, #2
 80114b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80114b6:	008b      	lsls	r3, r1, #2
 80114b8:	461a      	mov	r2, r3
 80114ba:	4623      	mov	r3, r4
 80114bc:	4628      	mov	r0, r5
 80114be:	4631      	mov	r1, r6
 80114c0:	f7ef fbfa 	bl	8000cb8 <__aeabi_uldivmod>
 80114c4:	4603      	mov	r3, r0
 80114c6:	460c      	mov	r4, r1
 80114c8:	461a      	mov	r2, r3
 80114ca:	4b32      	ldr	r3, [pc, #200]	; (8011594 <UART_SetConfig+0x6f4>)
 80114cc:	fba3 1302 	umull	r1, r3, r3, r2
 80114d0:	095b      	lsrs	r3, r3, #5
 80114d2:	2164      	movs	r1, #100	; 0x64
 80114d4:	fb01 f303 	mul.w	r3, r1, r3
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	011b      	lsls	r3, r3, #4
 80114dc:	3332      	adds	r3, #50	; 0x32
 80114de:	4a2d      	ldr	r2, [pc, #180]	; (8011594 <UART_SetConfig+0x6f4>)
 80114e0:	fba2 2303 	umull	r2, r3, r2, r3
 80114e4:	095b      	lsrs	r3, r3, #5
 80114e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114ea:	4498      	add	r8, r3
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	469b      	mov	fp, r3
 80114f0:	f04f 0c00 	mov.w	ip, #0
 80114f4:	46d9      	mov	r9, fp
 80114f6:	46e2      	mov	sl, ip
 80114f8:	eb19 0309 	adds.w	r3, r9, r9
 80114fc:	eb4a 040a 	adc.w	r4, sl, sl
 8011500:	4699      	mov	r9, r3
 8011502:	46a2      	mov	sl, r4
 8011504:	eb19 090b 	adds.w	r9, r9, fp
 8011508:	eb4a 0a0c 	adc.w	sl, sl, ip
 801150c:	f04f 0100 	mov.w	r1, #0
 8011510:	f04f 0200 	mov.w	r2, #0
 8011514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801151c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011520:	4689      	mov	r9, r1
 8011522:	4692      	mov	sl, r2
 8011524:	eb1b 0509 	adds.w	r5, fp, r9
 8011528:	eb4c 060a 	adc.w	r6, ip, sl
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	4619      	mov	r1, r3
 8011532:	f04f 0200 	mov.w	r2, #0
 8011536:	f04f 0300 	mov.w	r3, #0
 801153a:	f04f 0400 	mov.w	r4, #0
 801153e:	0094      	lsls	r4, r2, #2
 8011540:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011544:	008b      	lsls	r3, r1, #2
 8011546:	461a      	mov	r2, r3
 8011548:	4623      	mov	r3, r4
 801154a:	4628      	mov	r0, r5
 801154c:	4631      	mov	r1, r6
 801154e:	f7ef fbb3 	bl	8000cb8 <__aeabi_uldivmod>
 8011552:	4603      	mov	r3, r0
 8011554:	460c      	mov	r4, r1
 8011556:	461a      	mov	r2, r3
 8011558:	4b0e      	ldr	r3, [pc, #56]	; (8011594 <UART_SetConfig+0x6f4>)
 801155a:	fba3 1302 	umull	r1, r3, r3, r2
 801155e:	095b      	lsrs	r3, r3, #5
 8011560:	2164      	movs	r1, #100	; 0x64
 8011562:	fb01 f303 	mul.w	r3, r1, r3
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	011b      	lsls	r3, r3, #4
 801156a:	3332      	adds	r3, #50	; 0x32
 801156c:	4a09      	ldr	r2, [pc, #36]	; (8011594 <UART_SetConfig+0x6f4>)
 801156e:	fba2 2303 	umull	r2, r3, r2, r3
 8011572:	095b      	lsrs	r3, r3, #5
 8011574:	f003 020f 	and.w	r2, r3, #15
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4442      	add	r2, r8
 801157e:	609a      	str	r2, [r3, #8]
}
 8011580:	e7ff      	b.n	8011582 <UART_SetConfig+0x6e2>
 8011582:	bf00      	nop
 8011584:	3714      	adds	r7, #20
 8011586:	46bd      	mov	sp, r7
 8011588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801158c:	40011000 	.word	0x40011000
 8011590:	40011400 	.word	0x40011400
 8011594:	51eb851f 	.word	0x51eb851f

08011598 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011598:	b084      	sub	sp, #16
 801159a:	b480      	push	{r7}
 801159c:	b085      	sub	sp, #20
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
 80115a2:	f107 001c 	add.w	r0, r7, #28
 80115a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80115aa:	2300      	movs	r3, #0
 80115ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80115ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80115b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80115b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80115b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80115ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80115bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80115be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80115c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80115c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	4313      	orrs	r3, r2
 80115c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80115d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	431a      	orrs	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3714      	adds	r7, #20
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	b004      	add	sp, #16
 80115ec:	4770      	bx	lr

080115ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80115ee:	b480      	push	{r7}
 80115f0:	b083      	sub	sp, #12
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801161c:	2300      	movs	r3, #0
}
 801161e:	4618      	mov	r0, r3
 8011620:	370c      	adds	r7, #12
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr

0801162a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801162a:	b580      	push	{r7, lr}
 801162c:	b082      	sub	sp, #8
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2203      	movs	r2, #3
 8011636:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011638:	2002      	movs	r0, #2
 801163a:	f7f9 ff9d 	bl	800b578 <HAL_Delay>
  
  return HAL_OK;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f003 0303 	and.w	r3, r3, #3
}
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801166e:	2300      	movs	r3, #0
 8011670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011682:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011688:	431a      	orrs	r2, r3
                       Command->CPSM);
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801168e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011690:	68fa      	ldr	r2, [r7, #12]
 8011692:	4313      	orrs	r3, r2
 8011694:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801169e:	f023 030f 	bic.w	r3, r3, #15
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	431a      	orrs	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80116aa:	2300      	movs	r3, #0
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3714      	adds	r7, #20
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	b2db      	uxtb	r3, r3
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80116d2:	b480      	push	{r7}
 80116d4:	b085      	sub	sp, #20
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	3314      	adds	r3, #20
 80116e0:	461a      	mov	r2, r3
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	4413      	add	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
}  
 80116ec:	4618      	mov	r0, r3
 80116ee:	3714      	adds	r7, #20
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b085      	sub	sp, #20
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011702:	2300      	movs	r3, #0
 8011704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	685a      	ldr	r2, [r3, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801171e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011724:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801172a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	4313      	orrs	r3, r2
 8011730:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011736:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	431a      	orrs	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011742:	2300      	movs	r3, #0

}
 8011744:	4618      	mov	r0, r3
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b088      	sub	sp, #32
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801175e:	2310      	movs	r3, #16
 8011760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011762:	2340      	movs	r3, #64	; 0x40
 8011764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011766:	2300      	movs	r3, #0
 8011768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801176a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801176e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011770:	f107 0308 	add.w	r3, r7, #8
 8011774:	4619      	mov	r1, r3
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f7ff ff74 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011780:	2110      	movs	r1, #16
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f000 fa40 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801178a:	69fb      	ldr	r3, [r7, #28]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3720      	adds	r7, #32
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b088      	sub	sp, #32
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80117a2:	2311      	movs	r3, #17
 80117a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80117a6:	2340      	movs	r3, #64	; 0x40
 80117a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80117aa:	2300      	movs	r3, #0
 80117ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80117ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80117b4:	f107 0308 	add.w	r3, r7, #8
 80117b8:	4619      	mov	r1, r3
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7ff ff52 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80117c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80117c4:	2111      	movs	r1, #17
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f000 fa1e 	bl	8011c08 <SDMMC_GetCmdResp1>
 80117cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117ce:	69fb      	ldr	r3, [r7, #28]
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3720      	adds	r7, #32
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b088      	sub	sp, #32
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80117e6:	2312      	movs	r3, #18
 80117e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80117ea:	2340      	movs	r3, #64	; 0x40
 80117ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80117ee:	2300      	movs	r3, #0
 80117f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80117f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80117f8:	f107 0308 	add.w	r3, r7, #8
 80117fc:	4619      	mov	r1, r3
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7ff ff30 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011804:	f241 3288 	movw	r2, #5000	; 0x1388
 8011808:	2112      	movs	r1, #18
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 f9fc 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011812:	69fb      	ldr	r3, [r7, #28]
}
 8011814:	4618      	mov	r0, r3
 8011816:	3720      	adds	r7, #32
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b088      	sub	sp, #32
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801182a:	2318      	movs	r3, #24
 801182c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801182e:	2340      	movs	r3, #64	; 0x40
 8011830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011832:	2300      	movs	r3, #0
 8011834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801183a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801183c:	f107 0308 	add.w	r3, r7, #8
 8011840:	4619      	mov	r1, r3
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f7ff ff0e 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011848:	f241 3288 	movw	r2, #5000	; 0x1388
 801184c:	2118      	movs	r1, #24
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 f9da 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011856:	69fb      	ldr	r3, [r7, #28]
}
 8011858:	4618      	mov	r0, r3
 801185a:	3720      	adds	r7, #32
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801186e:	2319      	movs	r3, #25
 8011870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011872:	2340      	movs	r3, #64	; 0x40
 8011874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011876:	2300      	movs	r3, #0
 8011878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801187a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801187e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011880:	f107 0308 	add.w	r3, r7, #8
 8011884:	4619      	mov	r1, r3
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f7ff feec 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011890:	2119      	movs	r1, #25
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 f9b8 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801189a:	69fb      	ldr	r3, [r7, #28]
}
 801189c:	4618      	mov	r0, r3
 801189e:	3720      	adds	r7, #32
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b088      	sub	sp, #32
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80118ac:	2300      	movs	r3, #0
 80118ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80118b0:	230c      	movs	r3, #12
 80118b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80118b4:	2340      	movs	r3, #64	; 0x40
 80118b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80118b8:	2300      	movs	r3, #0
 80118ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80118bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80118c2:	f107 0308 	add.w	r3, r7, #8
 80118c6:	4619      	mov	r1, r3
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f7ff fecb 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80118ce:	4a05      	ldr	r2, [pc, #20]	; (80118e4 <SDMMC_CmdStopTransfer+0x40>)
 80118d0:	210c      	movs	r1, #12
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 f998 	bl	8011c08 <SDMMC_GetCmdResp1>
 80118d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118da:	69fb      	ldr	r3, [r7, #28]
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3720      	adds	r7, #32
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	05f5e100 	.word	0x05f5e100

080118e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b08a      	sub	sp, #40	; 0x28
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80118f8:	2307      	movs	r3, #7
 80118fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80118fc:	2340      	movs	r3, #64	; 0x40
 80118fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011900:	2300      	movs	r3, #0
 8011902:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011908:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801190a:	f107 0310 	add.w	r3, r7, #16
 801190e:	4619      	mov	r1, r3
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f7ff fea7 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8011916:	f241 3288 	movw	r2, #5000	; 0x1388
 801191a:	2107      	movs	r1, #7
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	f000 f973 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011922:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011926:	4618      	mov	r0, r3
 8011928:	3728      	adds	r7, #40	; 0x28
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}

0801192e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801192e:	b580      	push	{r7, lr}
 8011930:	b088      	sub	sp, #32
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011936:	2300      	movs	r3, #0
 8011938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801193a:	2300      	movs	r3, #0
 801193c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801193e:	2300      	movs	r3, #0
 8011940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011942:	2300      	movs	r3, #0
 8011944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801194a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801194c:	f107 0308 	add.w	r3, r7, #8
 8011950:	4619      	mov	r1, r3
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7ff fe86 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f000 f92d 	bl	8011bb8 <SDMMC_GetCmdError>
 801195e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011960:	69fb      	ldr	r3, [r7, #28]
}
 8011962:	4618      	mov	r0, r3
 8011964:	3720      	adds	r7, #32
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}

0801196a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801196a:	b580      	push	{r7, lr}
 801196c:	b088      	sub	sp, #32
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011972:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011978:	2308      	movs	r3, #8
 801197a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801197c:	2340      	movs	r3, #64	; 0x40
 801197e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011980:	2300      	movs	r3, #0
 8011982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011988:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801198a:	f107 0308 	add.w	r3, r7, #8
 801198e:	4619      	mov	r1, r3
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff fe67 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 fb16 	bl	8011fc8 <SDMMC_GetCmdResp7>
 801199c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801199e:	69fb      	ldr	r3, [r7, #28]
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	3720      	adds	r7, #32
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b088      	sub	sp, #32
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80119b6:	2337      	movs	r3, #55	; 0x37
 80119b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80119ba:	2340      	movs	r3, #64	; 0x40
 80119bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80119be:	2300      	movs	r3, #0
 80119c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80119c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80119c8:	f107 0308 	add.w	r3, r7, #8
 80119cc:	4619      	mov	r1, r3
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7ff fe48 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80119d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80119d8:	2137      	movs	r1, #55	; 0x37
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 f914 	bl	8011c08 <SDMMC_GetCmdResp1>
 80119e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119e2:	69fb      	ldr	r3, [r7, #28]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3720      	adds	r7, #32
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b088      	sub	sp, #32
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80119fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011a02:	2329      	movs	r3, #41	; 0x29
 8011a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011a06:	2340      	movs	r3, #64	; 0x40
 8011a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011a14:	f107 0308 	add.w	r3, r7, #8
 8011a18:	4619      	mov	r1, r3
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7ff fe22 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 fa23 	bl	8011e6c <SDMMC_GetCmdResp3>
 8011a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a28:	69fb      	ldr	r3, [r7, #28]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3720      	adds	r7, #32
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b088      	sub	sp, #32
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
 8011a3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011a40:	2306      	movs	r3, #6
 8011a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011a44:	2340      	movs	r3, #64	; 0x40
 8011a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011a52:	f107 0308 	add.w	r3, r7, #8
 8011a56:	4619      	mov	r1, r3
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7ff fe03 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8011a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a62:	2106      	movs	r1, #6
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 f8cf 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a6c:	69fb      	ldr	r3, [r7, #28]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3720      	adds	r7, #32
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b088      	sub	sp, #32
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011a82:	2333      	movs	r3, #51	; 0x33
 8011a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011a86:	2340      	movs	r3, #64	; 0x40
 8011a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011a94:	f107 0308 	add.w	r3, r7, #8
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7ff fde2 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8011aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011aa4:	2133      	movs	r1, #51	; 0x33
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 f8ae 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011aae:	69fb      	ldr	r3, [r7, #28]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3720      	adds	r7, #32
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011ac4:	2302      	movs	r3, #2
 8011ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011ac8:	23c0      	movs	r3, #192	; 0xc0
 8011aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011acc:	2300      	movs	r3, #0
 8011ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ad6:	f107 0308 	add.w	r3, r7, #8
 8011ada:	4619      	mov	r1, r3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7ff fdc1 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 f97c 	bl	8011de0 <SDMMC_GetCmdResp2>
 8011ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011aea:	69fb      	ldr	r3, [r7, #28]
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3720      	adds	r7, #32
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b088      	sub	sp, #32
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011b02:	2309      	movs	r3, #9
 8011b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011b06:	23c0      	movs	r3, #192	; 0xc0
 8011b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011b14:	f107 0308 	add.w	r3, r7, #8
 8011b18:	4619      	mov	r1, r3
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f7ff fda2 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f000 f95d 	bl	8011de0 <SDMMC_GetCmdResp2>
 8011b26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b28:	69fb      	ldr	r3, [r7, #28]
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3720      	adds	r7, #32
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b088      	sub	sp, #32
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
 8011b3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011b40:	2303      	movs	r3, #3
 8011b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011b44:	2340      	movs	r3, #64	; 0x40
 8011b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011b52:	f107 0308 	add.w	r3, r7, #8
 8011b56:	4619      	mov	r1, r3
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7ff fd83 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011b5e:	683a      	ldr	r2, [r7, #0]
 8011b60:	2103      	movs	r1, #3
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 f9bc 	bl	8011ee0 <SDMMC_GetCmdResp6>
 8011b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b6a:	69fb      	ldr	r3, [r7, #28]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3720      	adds	r7, #32
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b088      	sub	sp, #32
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011b82:	230d      	movs	r3, #13
 8011b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011b86:	2340      	movs	r3, #64	; 0x40
 8011b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011b94:	f107 0308 	add.w	r3, r7, #8
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7ff fd62 	bl	8011664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8011ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ba4:	210d      	movs	r1, #13
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 f82e 	bl	8011c08 <SDMMC_GetCmdResp1>
 8011bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bae:	69fb      	ldr	r3, [r7, #28]
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3720      	adds	r7, #32
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011bb8:	b490      	push	{r4, r7}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bc0:	4b0f      	ldr	r3, [pc, #60]	; (8011c00 <SDMMC_GetCmdError+0x48>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	4a0f      	ldr	r2, [pc, #60]	; (8011c04 <SDMMC_GetCmdError+0x4c>)
 8011bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8011bca:	0a5b      	lsrs	r3, r3, #9
 8011bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011bd4:	4623      	mov	r3, r4
 8011bd6:	1e5c      	subs	r4, r3, #1
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d102      	bne.n	8011be2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011be0:	e009      	b.n	8011bf6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d0f2      	beq.n	8011bd4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	22c5      	movs	r2, #197	; 0xc5
 8011bf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3708      	adds	r7, #8
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bc90      	pop	{r4, r7}
 8011bfe:	4770      	bx	lr
 8011c00:	20000000 	.word	0x20000000
 8011c04:	10624dd3 	.word	0x10624dd3

08011c08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011c08:	b590      	push	{r4, r7, lr}
 8011c0a:	b087      	sub	sp, #28
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	60f8      	str	r0, [r7, #12]
 8011c10:	460b      	mov	r3, r1
 8011c12:	607a      	str	r2, [r7, #4]
 8011c14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011c16:	4b6f      	ldr	r3, [pc, #444]	; (8011dd4 <SDMMC_GetCmdResp1+0x1cc>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4a6f      	ldr	r2, [pc, #444]	; (8011dd8 <SDMMC_GetCmdResp1+0x1d0>)
 8011c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8011c20:	0a5b      	lsrs	r3, r3, #9
 8011c22:	687a      	ldr	r2, [r7, #4]
 8011c24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011c28:	4623      	mov	r3, r4
 8011c2a:	1e5c      	subs	r4, r3, #1
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d102      	bne.n	8011c36 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011c30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c34:	e0c9      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c3a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d0f0      	beq.n	8011c28 <SDMMC_GetCmdResp1+0x20>
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1eb      	bne.n	8011c28 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c54:	f003 0304 	and.w	r3, r3, #4
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d004      	beq.n	8011c66 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2204      	movs	r2, #4
 8011c60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c62:	2304      	movs	r3, #4
 8011c64:	e0b1      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c6a:	f003 0301 	and.w	r3, r3, #1
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d004      	beq.n	8011c7c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2201      	movs	r2, #1
 8011c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	e0a6      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	22c5      	movs	r2, #197	; 0xc5
 8011c80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011c82:	68f8      	ldr	r0, [r7, #12]
 8011c84:	f7ff fd18 	bl	80116b8 <SDIO_GetCommandResponse>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	7afb      	ldrb	r3, [r7, #11]
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d001      	beq.n	8011c96 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c92:	2301      	movs	r3, #1
 8011c94:	e099      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011c96:	2100      	movs	r1, #0
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f7ff fd1a 	bl	80116d2 <SDIO_GetResponse>
 8011c9e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011ca0:	693a      	ldr	r2, [r7, #16]
 8011ca2:	4b4e      	ldr	r3, [pc, #312]	; (8011ddc <SDMMC_GetCmdResp1+0x1d4>)
 8011ca4:	4013      	ands	r3, r2
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d101      	bne.n	8011cae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011caa:	2300      	movs	r3, #0
 8011cac:	e08d      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	da02      	bge.n	8011cba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011cb8:	e087      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011cc4:	2340      	movs	r3, #64	; 0x40
 8011cc6:	e080      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011cd2:	2380      	movs	r3, #128	; 0x80
 8011cd4:	e079      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ce4:	e071      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011cf4:	e069      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d04:	e061      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d14:	e059      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d002      	beq.n	8011d26 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d24:	e051      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011d34:	e049      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d002      	beq.n	8011d46 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011d44:	e041      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d002      	beq.n	8011d56 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8011d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d54:	e039      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d002      	beq.n	8011d66 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011d64:	e031      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011d70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011d74:	e029      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011d80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011d84:	e021      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011d90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011d94:	e019      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011da4:	e011      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d002      	beq.n	8011db6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011db0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011db4:	e009      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	f003 0308 	and.w	r3, r3, #8
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d002      	beq.n	8011dc6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011dc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011dc4:	e001      	b.n	8011dca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	371c      	adds	r7, #28
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd90      	pop	{r4, r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	20000000 	.word	0x20000000
 8011dd8:	10624dd3 	.word	0x10624dd3
 8011ddc:	fdffe008 	.word	0xfdffe008

08011de0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011de0:	b490      	push	{r4, r7}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011de8:	4b1e      	ldr	r3, [pc, #120]	; (8011e64 <SDMMC_GetCmdResp2+0x84>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4a1e      	ldr	r2, [pc, #120]	; (8011e68 <SDMMC_GetCmdResp2+0x88>)
 8011dee:	fba2 2303 	umull	r2, r3, r2, r3
 8011df2:	0a5b      	lsrs	r3, r3, #9
 8011df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011df8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011dfc:	4623      	mov	r3, r4
 8011dfe:	1e5c      	subs	r4, r3, #1
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d102      	bne.n	8011e0a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e08:	e026      	b.n	8011e58 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e0e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d0f0      	beq.n	8011dfc <SDMMC_GetCmdResp2+0x1c>
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1eb      	bne.n	8011dfc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e28:	f003 0304 	and.w	r3, r3, #4
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d004      	beq.n	8011e3a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2204      	movs	r2, #4
 8011e34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011e36:	2304      	movs	r3, #4
 8011e38:	e00e      	b.n	8011e58 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e3e:	f003 0301 	and.w	r3, r3, #1
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2201      	movs	r2, #1
 8011e4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e003      	b.n	8011e58 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	22c5      	movs	r2, #197	; 0xc5
 8011e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011e56:	2300      	movs	r3, #0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bc90      	pop	{r4, r7}
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	20000000 	.word	0x20000000
 8011e68:	10624dd3 	.word	0x10624dd3

08011e6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8011e6c:	b490      	push	{r4, r7}
 8011e6e:	b084      	sub	sp, #16
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011e74:	4b18      	ldr	r3, [pc, #96]	; (8011ed8 <SDMMC_GetCmdResp3+0x6c>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4a18      	ldr	r2, [pc, #96]	; (8011edc <SDMMC_GetCmdResp3+0x70>)
 8011e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e7e:	0a5b      	lsrs	r3, r3, #9
 8011e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011e88:	4623      	mov	r3, r4
 8011e8a:	1e5c      	subs	r4, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d102      	bne.n	8011e96 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e94:	e01b      	b.n	8011ece <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d0f0      	beq.n	8011e88 <SDMMC_GetCmdResp3+0x1c>
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1eb      	bne.n	8011e88 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eb4:	f003 0304 	and.w	r3, r3, #4
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d004      	beq.n	8011ec6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2204      	movs	r2, #4
 8011ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ec2:	2304      	movs	r3, #4
 8011ec4:	e003      	b.n	8011ece <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	22c5      	movs	r2, #197	; 0xc5
 8011eca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011ecc:	2300      	movs	r3, #0
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3710      	adds	r7, #16
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bc90      	pop	{r4, r7}
 8011ed6:	4770      	bx	lr
 8011ed8:	20000000 	.word	0x20000000
 8011edc:	10624dd3 	.word	0x10624dd3

08011ee0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b087      	sub	sp, #28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	607a      	str	r2, [r7, #4]
 8011eec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011eee:	4b34      	ldr	r3, [pc, #208]	; (8011fc0 <SDMMC_GetCmdResp6+0xe0>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4a34      	ldr	r2, [pc, #208]	; (8011fc4 <SDMMC_GetCmdResp6+0xe4>)
 8011ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8011ef8:	0a5b      	lsrs	r3, r3, #9
 8011efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8011efe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011f02:	4623      	mov	r3, r4
 8011f04:	1e5c      	subs	r4, r3, #1
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d102      	bne.n	8011f10 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f0e:	e052      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f14:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d0f0      	beq.n	8011f02 <SDMMC_GetCmdResp6+0x22>
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1eb      	bne.n	8011f02 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f2e:	f003 0304 	and.w	r3, r3, #4
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d004      	beq.n	8011f40 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2204      	movs	r2, #4
 8011f3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011f3c:	2304      	movs	r3, #4
 8011f3e:	e03a      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f44:	f003 0301 	and.w	r3, r3, #1
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d004      	beq.n	8011f56 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f52:	2301      	movs	r3, #1
 8011f54:	e02f      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f7ff fbae 	bl	80116b8 <SDIO_GetCommandResponse>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	461a      	mov	r2, r3
 8011f60:	7afb      	ldrb	r3, [r7, #11]
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d001      	beq.n	8011f6a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e025      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	22c5      	movs	r2, #197	; 0xc5
 8011f6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011f70:	2100      	movs	r1, #0
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f7ff fbad 	bl	80116d2 <SDIO_GetResponse>
 8011f78:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d106      	bne.n	8011f92 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	0c1b      	lsrs	r3, r3, #16
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	e011      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d002      	beq.n	8011fa2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011fa0:	e009      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fb0:	e001      	b.n	8011fb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	371c      	adds	r7, #28
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd90      	pop	{r4, r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	20000000 	.word	0x20000000
 8011fc4:	10624dd3 	.word	0x10624dd3

08011fc8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011fc8:	b490      	push	{r4, r7}
 8011fca:	b084      	sub	sp, #16
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011fd0:	4b21      	ldr	r3, [pc, #132]	; (8012058 <SDMMC_GetCmdResp7+0x90>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4a21      	ldr	r2, [pc, #132]	; (801205c <SDMMC_GetCmdResp7+0x94>)
 8011fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8011fda:	0a5b      	lsrs	r3, r3, #9
 8011fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fe0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011fe4:	4623      	mov	r3, r4
 8011fe6:	1e5c      	subs	r4, r3, #1
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011fec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ff0:	e02c      	b.n	801204c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ff6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d0f0      	beq.n	8011fe4 <SDMMC_GetCmdResp7+0x1c>
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012008:	2b00      	cmp	r3, #0
 801200a:	d1eb      	bne.n	8011fe4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012010:	f003 0304 	and.w	r3, r3, #4
 8012014:	2b00      	cmp	r3, #0
 8012016:	d004      	beq.n	8012022 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2204      	movs	r2, #4
 801201c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801201e:	2304      	movs	r3, #4
 8012020:	e014      	b.n	801204c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012026:	f003 0301 	and.w	r3, r3, #1
 801202a:	2b00      	cmp	r3, #0
 801202c:	d004      	beq.n	8012038 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2201      	movs	r2, #1
 8012032:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012034:	2301      	movs	r3, #1
 8012036:	e009      	b.n	801204c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2240      	movs	r2, #64	; 0x40
 8012048:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801204a:	2300      	movs	r3, #0
  
}
 801204c:	4618      	mov	r0, r3
 801204e:	3710      	adds	r7, #16
 8012050:	46bd      	mov	sp, r7
 8012052:	bc90      	pop	{r4, r7}
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	20000000 	.word	0x20000000
 801205c:	10624dd3 	.word	0x10624dd3

08012060 <main>:




int main(void)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	af00      	add	r7, sp, #0
  hwInit();
 8012064:	f7f5 f9fa 	bl	800745c <hwInit>
  apInit();
 8012068:	f7ee ffa6 	bl	8000fb8 <apInit>

  apMain();
 801206c:	f7ee ffad 	bl	8000fca <apMain>

  return 0;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	bd80      	pop	{r7, pc}
	...

08012078 <__errno>:
 8012078:	4b01      	ldr	r3, [pc, #4]	; (8012080 <__errno+0x8>)
 801207a:	6818      	ldr	r0, [r3, #0]
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop
 8012080:	20000064 	.word	0x20000064

08012084 <__libc_init_array>:
 8012084:	b570      	push	{r4, r5, r6, lr}
 8012086:	4e0d      	ldr	r6, [pc, #52]	; (80120bc <__libc_init_array+0x38>)
 8012088:	4c0d      	ldr	r4, [pc, #52]	; (80120c0 <__libc_init_array+0x3c>)
 801208a:	1ba4      	subs	r4, r4, r6
 801208c:	10a4      	asrs	r4, r4, #2
 801208e:	2500      	movs	r5, #0
 8012090:	42a5      	cmp	r5, r4
 8012092:	d109      	bne.n	80120a8 <__libc_init_array+0x24>
 8012094:	4e0b      	ldr	r6, [pc, #44]	; (80120c4 <__libc_init_array+0x40>)
 8012096:	4c0c      	ldr	r4, [pc, #48]	; (80120c8 <__libc_init_array+0x44>)
 8012098:	f003 fc14 	bl	80158c4 <_init>
 801209c:	1ba4      	subs	r4, r4, r6
 801209e:	10a4      	asrs	r4, r4, #2
 80120a0:	2500      	movs	r5, #0
 80120a2:	42a5      	cmp	r5, r4
 80120a4:	d105      	bne.n	80120b2 <__libc_init_array+0x2e>
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80120ac:	4798      	blx	r3
 80120ae:	3501      	adds	r5, #1
 80120b0:	e7ee      	b.n	8012090 <__libc_init_array+0xc>
 80120b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80120b6:	4798      	blx	r3
 80120b8:	3501      	adds	r5, #1
 80120ba:	e7f2      	b.n	80120a2 <__libc_init_array+0x1e>
 80120bc:	08022778 	.word	0x08022778
 80120c0:	08022778 	.word	0x08022778
 80120c4:	08022778 	.word	0x08022778
 80120c8:	0802277c 	.word	0x0802277c

080120cc <malloc>:
 80120cc:	4b02      	ldr	r3, [pc, #8]	; (80120d8 <malloc+0xc>)
 80120ce:	4601      	mov	r1, r0
 80120d0:	6818      	ldr	r0, [r3, #0]
 80120d2:	f000 b86d 	b.w	80121b0 <_malloc_r>
 80120d6:	bf00      	nop
 80120d8:	20000064 	.word	0x20000064

080120dc <free>:
 80120dc:	4b02      	ldr	r3, [pc, #8]	; (80120e8 <free+0xc>)
 80120de:	4601      	mov	r1, r0
 80120e0:	6818      	ldr	r0, [r3, #0]
 80120e2:	f000 b817 	b.w	8012114 <_free_r>
 80120e6:	bf00      	nop
 80120e8:	20000064 	.word	0x20000064

080120ec <memcpy>:
 80120ec:	b510      	push	{r4, lr}
 80120ee:	1e43      	subs	r3, r0, #1
 80120f0:	440a      	add	r2, r1
 80120f2:	4291      	cmp	r1, r2
 80120f4:	d100      	bne.n	80120f8 <memcpy+0xc>
 80120f6:	bd10      	pop	{r4, pc}
 80120f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012100:	e7f7      	b.n	80120f2 <memcpy+0x6>

08012102 <memset>:
 8012102:	4402      	add	r2, r0
 8012104:	4603      	mov	r3, r0
 8012106:	4293      	cmp	r3, r2
 8012108:	d100      	bne.n	801210c <memset+0xa>
 801210a:	4770      	bx	lr
 801210c:	f803 1b01 	strb.w	r1, [r3], #1
 8012110:	e7f9      	b.n	8012106 <memset+0x4>
	...

08012114 <_free_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4605      	mov	r5, r0
 8012118:	2900      	cmp	r1, #0
 801211a:	d045      	beq.n	80121a8 <_free_r+0x94>
 801211c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012120:	1f0c      	subs	r4, r1, #4
 8012122:	2b00      	cmp	r3, #0
 8012124:	bfb8      	it	lt
 8012126:	18e4      	addlt	r4, r4, r3
 8012128:	f002 fdfe 	bl	8014d28 <__malloc_lock>
 801212c:	4a1f      	ldr	r2, [pc, #124]	; (80121ac <_free_r+0x98>)
 801212e:	6813      	ldr	r3, [r2, #0]
 8012130:	4610      	mov	r0, r2
 8012132:	b933      	cbnz	r3, 8012142 <_free_r+0x2e>
 8012134:	6063      	str	r3, [r4, #4]
 8012136:	6014      	str	r4, [r2, #0]
 8012138:	4628      	mov	r0, r5
 801213a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801213e:	f002 bdf4 	b.w	8014d2a <__malloc_unlock>
 8012142:	42a3      	cmp	r3, r4
 8012144:	d90c      	bls.n	8012160 <_free_r+0x4c>
 8012146:	6821      	ldr	r1, [r4, #0]
 8012148:	1862      	adds	r2, r4, r1
 801214a:	4293      	cmp	r3, r2
 801214c:	bf04      	itt	eq
 801214e:	681a      	ldreq	r2, [r3, #0]
 8012150:	685b      	ldreq	r3, [r3, #4]
 8012152:	6063      	str	r3, [r4, #4]
 8012154:	bf04      	itt	eq
 8012156:	1852      	addeq	r2, r2, r1
 8012158:	6022      	streq	r2, [r4, #0]
 801215a:	6004      	str	r4, [r0, #0]
 801215c:	e7ec      	b.n	8012138 <_free_r+0x24>
 801215e:	4613      	mov	r3, r2
 8012160:	685a      	ldr	r2, [r3, #4]
 8012162:	b10a      	cbz	r2, 8012168 <_free_r+0x54>
 8012164:	42a2      	cmp	r2, r4
 8012166:	d9fa      	bls.n	801215e <_free_r+0x4a>
 8012168:	6819      	ldr	r1, [r3, #0]
 801216a:	1858      	adds	r0, r3, r1
 801216c:	42a0      	cmp	r0, r4
 801216e:	d10b      	bne.n	8012188 <_free_r+0x74>
 8012170:	6820      	ldr	r0, [r4, #0]
 8012172:	4401      	add	r1, r0
 8012174:	1858      	adds	r0, r3, r1
 8012176:	4282      	cmp	r2, r0
 8012178:	6019      	str	r1, [r3, #0]
 801217a:	d1dd      	bne.n	8012138 <_free_r+0x24>
 801217c:	6810      	ldr	r0, [r2, #0]
 801217e:	6852      	ldr	r2, [r2, #4]
 8012180:	605a      	str	r2, [r3, #4]
 8012182:	4401      	add	r1, r0
 8012184:	6019      	str	r1, [r3, #0]
 8012186:	e7d7      	b.n	8012138 <_free_r+0x24>
 8012188:	d902      	bls.n	8012190 <_free_r+0x7c>
 801218a:	230c      	movs	r3, #12
 801218c:	602b      	str	r3, [r5, #0]
 801218e:	e7d3      	b.n	8012138 <_free_r+0x24>
 8012190:	6820      	ldr	r0, [r4, #0]
 8012192:	1821      	adds	r1, r4, r0
 8012194:	428a      	cmp	r2, r1
 8012196:	bf04      	itt	eq
 8012198:	6811      	ldreq	r1, [r2, #0]
 801219a:	6852      	ldreq	r2, [r2, #4]
 801219c:	6062      	str	r2, [r4, #4]
 801219e:	bf04      	itt	eq
 80121a0:	1809      	addeq	r1, r1, r0
 80121a2:	6021      	streq	r1, [r4, #0]
 80121a4:	605c      	str	r4, [r3, #4]
 80121a6:	e7c7      	b.n	8012138 <_free_r+0x24>
 80121a8:	bd38      	pop	{r3, r4, r5, pc}
 80121aa:	bf00      	nop
 80121ac:	2000a498 	.word	0x2000a498

080121b0 <_malloc_r>:
 80121b0:	b570      	push	{r4, r5, r6, lr}
 80121b2:	1ccd      	adds	r5, r1, #3
 80121b4:	f025 0503 	bic.w	r5, r5, #3
 80121b8:	3508      	adds	r5, #8
 80121ba:	2d0c      	cmp	r5, #12
 80121bc:	bf38      	it	cc
 80121be:	250c      	movcc	r5, #12
 80121c0:	2d00      	cmp	r5, #0
 80121c2:	4606      	mov	r6, r0
 80121c4:	db01      	blt.n	80121ca <_malloc_r+0x1a>
 80121c6:	42a9      	cmp	r1, r5
 80121c8:	d903      	bls.n	80121d2 <_malloc_r+0x22>
 80121ca:	230c      	movs	r3, #12
 80121cc:	6033      	str	r3, [r6, #0]
 80121ce:	2000      	movs	r0, #0
 80121d0:	bd70      	pop	{r4, r5, r6, pc}
 80121d2:	f002 fda9 	bl	8014d28 <__malloc_lock>
 80121d6:	4a21      	ldr	r2, [pc, #132]	; (801225c <_malloc_r+0xac>)
 80121d8:	6814      	ldr	r4, [r2, #0]
 80121da:	4621      	mov	r1, r4
 80121dc:	b991      	cbnz	r1, 8012204 <_malloc_r+0x54>
 80121de:	4c20      	ldr	r4, [pc, #128]	; (8012260 <_malloc_r+0xb0>)
 80121e0:	6823      	ldr	r3, [r4, #0]
 80121e2:	b91b      	cbnz	r3, 80121ec <_malloc_r+0x3c>
 80121e4:	4630      	mov	r0, r6
 80121e6:	f000 fc99 	bl	8012b1c <_sbrk_r>
 80121ea:	6020      	str	r0, [r4, #0]
 80121ec:	4629      	mov	r1, r5
 80121ee:	4630      	mov	r0, r6
 80121f0:	f000 fc94 	bl	8012b1c <_sbrk_r>
 80121f4:	1c43      	adds	r3, r0, #1
 80121f6:	d124      	bne.n	8012242 <_malloc_r+0x92>
 80121f8:	230c      	movs	r3, #12
 80121fa:	6033      	str	r3, [r6, #0]
 80121fc:	4630      	mov	r0, r6
 80121fe:	f002 fd94 	bl	8014d2a <__malloc_unlock>
 8012202:	e7e4      	b.n	80121ce <_malloc_r+0x1e>
 8012204:	680b      	ldr	r3, [r1, #0]
 8012206:	1b5b      	subs	r3, r3, r5
 8012208:	d418      	bmi.n	801223c <_malloc_r+0x8c>
 801220a:	2b0b      	cmp	r3, #11
 801220c:	d90f      	bls.n	801222e <_malloc_r+0x7e>
 801220e:	600b      	str	r3, [r1, #0]
 8012210:	50cd      	str	r5, [r1, r3]
 8012212:	18cc      	adds	r4, r1, r3
 8012214:	4630      	mov	r0, r6
 8012216:	f002 fd88 	bl	8014d2a <__malloc_unlock>
 801221a:	f104 000b 	add.w	r0, r4, #11
 801221e:	1d23      	adds	r3, r4, #4
 8012220:	f020 0007 	bic.w	r0, r0, #7
 8012224:	1ac3      	subs	r3, r0, r3
 8012226:	d0d3      	beq.n	80121d0 <_malloc_r+0x20>
 8012228:	425a      	negs	r2, r3
 801222a:	50e2      	str	r2, [r4, r3]
 801222c:	e7d0      	b.n	80121d0 <_malloc_r+0x20>
 801222e:	428c      	cmp	r4, r1
 8012230:	684b      	ldr	r3, [r1, #4]
 8012232:	bf16      	itet	ne
 8012234:	6063      	strne	r3, [r4, #4]
 8012236:	6013      	streq	r3, [r2, #0]
 8012238:	460c      	movne	r4, r1
 801223a:	e7eb      	b.n	8012214 <_malloc_r+0x64>
 801223c:	460c      	mov	r4, r1
 801223e:	6849      	ldr	r1, [r1, #4]
 8012240:	e7cc      	b.n	80121dc <_malloc_r+0x2c>
 8012242:	1cc4      	adds	r4, r0, #3
 8012244:	f024 0403 	bic.w	r4, r4, #3
 8012248:	42a0      	cmp	r0, r4
 801224a:	d005      	beq.n	8012258 <_malloc_r+0xa8>
 801224c:	1a21      	subs	r1, r4, r0
 801224e:	4630      	mov	r0, r6
 8012250:	f000 fc64 	bl	8012b1c <_sbrk_r>
 8012254:	3001      	adds	r0, #1
 8012256:	d0cf      	beq.n	80121f8 <_malloc_r+0x48>
 8012258:	6025      	str	r5, [r4, #0]
 801225a:	e7db      	b.n	8012214 <_malloc_r+0x64>
 801225c:	2000a498 	.word	0x2000a498
 8012260:	2000a49c 	.word	0x2000a49c

08012264 <__cvt>:
 8012264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012268:	ec55 4b10 	vmov	r4, r5, d0
 801226c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801226e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012272:	2d00      	cmp	r5, #0
 8012274:	460e      	mov	r6, r1
 8012276:	4691      	mov	r9, r2
 8012278:	4619      	mov	r1, r3
 801227a:	bfb8      	it	lt
 801227c:	4622      	movlt	r2, r4
 801227e:	462b      	mov	r3, r5
 8012280:	f027 0720 	bic.w	r7, r7, #32
 8012284:	bfbb      	ittet	lt
 8012286:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801228a:	461d      	movlt	r5, r3
 801228c:	2300      	movge	r3, #0
 801228e:	232d      	movlt	r3, #45	; 0x2d
 8012290:	bfb8      	it	lt
 8012292:	4614      	movlt	r4, r2
 8012294:	2f46      	cmp	r7, #70	; 0x46
 8012296:	700b      	strb	r3, [r1, #0]
 8012298:	d004      	beq.n	80122a4 <__cvt+0x40>
 801229a:	2f45      	cmp	r7, #69	; 0x45
 801229c:	d100      	bne.n	80122a0 <__cvt+0x3c>
 801229e:	3601      	adds	r6, #1
 80122a0:	2102      	movs	r1, #2
 80122a2:	e000      	b.n	80122a6 <__cvt+0x42>
 80122a4:	2103      	movs	r1, #3
 80122a6:	ab03      	add	r3, sp, #12
 80122a8:	9301      	str	r3, [sp, #4]
 80122aa:	ab02      	add	r3, sp, #8
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	4632      	mov	r2, r6
 80122b0:	4653      	mov	r3, sl
 80122b2:	ec45 4b10 	vmov	d0, r4, r5
 80122b6:	f001 fc33 	bl	8013b20 <_dtoa_r>
 80122ba:	2f47      	cmp	r7, #71	; 0x47
 80122bc:	4680      	mov	r8, r0
 80122be:	d102      	bne.n	80122c6 <__cvt+0x62>
 80122c0:	f019 0f01 	tst.w	r9, #1
 80122c4:	d026      	beq.n	8012314 <__cvt+0xb0>
 80122c6:	2f46      	cmp	r7, #70	; 0x46
 80122c8:	eb08 0906 	add.w	r9, r8, r6
 80122cc:	d111      	bne.n	80122f2 <__cvt+0x8e>
 80122ce:	f898 3000 	ldrb.w	r3, [r8]
 80122d2:	2b30      	cmp	r3, #48	; 0x30
 80122d4:	d10a      	bne.n	80122ec <__cvt+0x88>
 80122d6:	2200      	movs	r2, #0
 80122d8:	2300      	movs	r3, #0
 80122da:	4620      	mov	r0, r4
 80122dc:	4629      	mov	r1, r5
 80122de:	f7ee fc0b 	bl	8000af8 <__aeabi_dcmpeq>
 80122e2:	b918      	cbnz	r0, 80122ec <__cvt+0x88>
 80122e4:	f1c6 0601 	rsb	r6, r6, #1
 80122e8:	f8ca 6000 	str.w	r6, [sl]
 80122ec:	f8da 3000 	ldr.w	r3, [sl]
 80122f0:	4499      	add	r9, r3
 80122f2:	2200      	movs	r2, #0
 80122f4:	2300      	movs	r3, #0
 80122f6:	4620      	mov	r0, r4
 80122f8:	4629      	mov	r1, r5
 80122fa:	f7ee fbfd 	bl	8000af8 <__aeabi_dcmpeq>
 80122fe:	b938      	cbnz	r0, 8012310 <__cvt+0xac>
 8012300:	2230      	movs	r2, #48	; 0x30
 8012302:	9b03      	ldr	r3, [sp, #12]
 8012304:	454b      	cmp	r3, r9
 8012306:	d205      	bcs.n	8012314 <__cvt+0xb0>
 8012308:	1c59      	adds	r1, r3, #1
 801230a:	9103      	str	r1, [sp, #12]
 801230c:	701a      	strb	r2, [r3, #0]
 801230e:	e7f8      	b.n	8012302 <__cvt+0x9e>
 8012310:	f8cd 900c 	str.w	r9, [sp, #12]
 8012314:	9b03      	ldr	r3, [sp, #12]
 8012316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012318:	eba3 0308 	sub.w	r3, r3, r8
 801231c:	4640      	mov	r0, r8
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	b004      	add	sp, #16
 8012322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012326 <__exponent>:
 8012326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012328:	2900      	cmp	r1, #0
 801232a:	4604      	mov	r4, r0
 801232c:	bfba      	itte	lt
 801232e:	4249      	neglt	r1, r1
 8012330:	232d      	movlt	r3, #45	; 0x2d
 8012332:	232b      	movge	r3, #43	; 0x2b
 8012334:	2909      	cmp	r1, #9
 8012336:	f804 2b02 	strb.w	r2, [r4], #2
 801233a:	7043      	strb	r3, [r0, #1]
 801233c:	dd20      	ble.n	8012380 <__exponent+0x5a>
 801233e:	f10d 0307 	add.w	r3, sp, #7
 8012342:	461f      	mov	r7, r3
 8012344:	260a      	movs	r6, #10
 8012346:	fb91 f5f6 	sdiv	r5, r1, r6
 801234a:	fb06 1115 	mls	r1, r6, r5, r1
 801234e:	3130      	adds	r1, #48	; 0x30
 8012350:	2d09      	cmp	r5, #9
 8012352:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012356:	f103 32ff 	add.w	r2, r3, #4294967295
 801235a:	4629      	mov	r1, r5
 801235c:	dc09      	bgt.n	8012372 <__exponent+0x4c>
 801235e:	3130      	adds	r1, #48	; 0x30
 8012360:	3b02      	subs	r3, #2
 8012362:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012366:	42bb      	cmp	r3, r7
 8012368:	4622      	mov	r2, r4
 801236a:	d304      	bcc.n	8012376 <__exponent+0x50>
 801236c:	1a10      	subs	r0, r2, r0
 801236e:	b003      	add	sp, #12
 8012370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012372:	4613      	mov	r3, r2
 8012374:	e7e7      	b.n	8012346 <__exponent+0x20>
 8012376:	f813 2b01 	ldrb.w	r2, [r3], #1
 801237a:	f804 2b01 	strb.w	r2, [r4], #1
 801237e:	e7f2      	b.n	8012366 <__exponent+0x40>
 8012380:	2330      	movs	r3, #48	; 0x30
 8012382:	4419      	add	r1, r3
 8012384:	7083      	strb	r3, [r0, #2]
 8012386:	1d02      	adds	r2, r0, #4
 8012388:	70c1      	strb	r1, [r0, #3]
 801238a:	e7ef      	b.n	801236c <__exponent+0x46>

0801238c <_printf_float>:
 801238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012390:	b08d      	sub	sp, #52	; 0x34
 8012392:	460c      	mov	r4, r1
 8012394:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012398:	4616      	mov	r6, r2
 801239a:	461f      	mov	r7, r3
 801239c:	4605      	mov	r5, r0
 801239e:	f002 fca3 	bl	8014ce8 <_localeconv_r>
 80123a2:	6803      	ldr	r3, [r0, #0]
 80123a4:	9304      	str	r3, [sp, #16]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7ed ff24 	bl	80001f4 <strlen>
 80123ac:	2300      	movs	r3, #0
 80123ae:	930a      	str	r3, [sp, #40]	; 0x28
 80123b0:	f8d8 3000 	ldr.w	r3, [r8]
 80123b4:	9005      	str	r0, [sp, #20]
 80123b6:	3307      	adds	r3, #7
 80123b8:	f023 0307 	bic.w	r3, r3, #7
 80123bc:	f103 0208 	add.w	r2, r3, #8
 80123c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80123c4:	f8d4 b000 	ldr.w	fp, [r4]
 80123c8:	f8c8 2000 	str.w	r2, [r8]
 80123cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80123dc:	9307      	str	r3, [sp, #28]
 80123de:	f8cd 8018 	str.w	r8, [sp, #24]
 80123e2:	f04f 32ff 	mov.w	r2, #4294967295
 80123e6:	4ba7      	ldr	r3, [pc, #668]	; (8012684 <_printf_float+0x2f8>)
 80123e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123ec:	f7ee fbb6 	bl	8000b5c <__aeabi_dcmpun>
 80123f0:	bb70      	cbnz	r0, 8012450 <_printf_float+0xc4>
 80123f2:	f04f 32ff 	mov.w	r2, #4294967295
 80123f6:	4ba3      	ldr	r3, [pc, #652]	; (8012684 <_printf_float+0x2f8>)
 80123f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123fc:	f7ee fb90 	bl	8000b20 <__aeabi_dcmple>
 8012400:	bb30      	cbnz	r0, 8012450 <_printf_float+0xc4>
 8012402:	2200      	movs	r2, #0
 8012404:	2300      	movs	r3, #0
 8012406:	4640      	mov	r0, r8
 8012408:	4649      	mov	r1, r9
 801240a:	f7ee fb7f 	bl	8000b0c <__aeabi_dcmplt>
 801240e:	b110      	cbz	r0, 8012416 <_printf_float+0x8a>
 8012410:	232d      	movs	r3, #45	; 0x2d
 8012412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012416:	4a9c      	ldr	r2, [pc, #624]	; (8012688 <_printf_float+0x2fc>)
 8012418:	4b9c      	ldr	r3, [pc, #624]	; (801268c <_printf_float+0x300>)
 801241a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801241e:	bf8c      	ite	hi
 8012420:	4690      	movhi	r8, r2
 8012422:	4698      	movls	r8, r3
 8012424:	2303      	movs	r3, #3
 8012426:	f02b 0204 	bic.w	r2, fp, #4
 801242a:	6123      	str	r3, [r4, #16]
 801242c:	6022      	str	r2, [r4, #0]
 801242e:	f04f 0900 	mov.w	r9, #0
 8012432:	9700      	str	r7, [sp, #0]
 8012434:	4633      	mov	r3, r6
 8012436:	aa0b      	add	r2, sp, #44	; 0x2c
 8012438:	4621      	mov	r1, r4
 801243a:	4628      	mov	r0, r5
 801243c:	f000 f9e6 	bl	801280c <_printf_common>
 8012440:	3001      	adds	r0, #1
 8012442:	f040 808d 	bne.w	8012560 <_printf_float+0x1d4>
 8012446:	f04f 30ff 	mov.w	r0, #4294967295
 801244a:	b00d      	add	sp, #52	; 0x34
 801244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012450:	4642      	mov	r2, r8
 8012452:	464b      	mov	r3, r9
 8012454:	4640      	mov	r0, r8
 8012456:	4649      	mov	r1, r9
 8012458:	f7ee fb80 	bl	8000b5c <__aeabi_dcmpun>
 801245c:	b110      	cbz	r0, 8012464 <_printf_float+0xd8>
 801245e:	4a8c      	ldr	r2, [pc, #560]	; (8012690 <_printf_float+0x304>)
 8012460:	4b8c      	ldr	r3, [pc, #560]	; (8012694 <_printf_float+0x308>)
 8012462:	e7da      	b.n	801241a <_printf_float+0x8e>
 8012464:	6861      	ldr	r1, [r4, #4]
 8012466:	1c4b      	adds	r3, r1, #1
 8012468:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801246c:	a80a      	add	r0, sp, #40	; 0x28
 801246e:	d13e      	bne.n	80124ee <_printf_float+0x162>
 8012470:	2306      	movs	r3, #6
 8012472:	6063      	str	r3, [r4, #4]
 8012474:	2300      	movs	r3, #0
 8012476:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801247a:	ab09      	add	r3, sp, #36	; 0x24
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	ec49 8b10 	vmov	d0, r8, r9
 8012482:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012486:	6022      	str	r2, [r4, #0]
 8012488:	f8cd a004 	str.w	sl, [sp, #4]
 801248c:	6861      	ldr	r1, [r4, #4]
 801248e:	4628      	mov	r0, r5
 8012490:	f7ff fee8 	bl	8012264 <__cvt>
 8012494:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012498:	2b47      	cmp	r3, #71	; 0x47
 801249a:	4680      	mov	r8, r0
 801249c:	d109      	bne.n	80124b2 <_printf_float+0x126>
 801249e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124a0:	1cd8      	adds	r0, r3, #3
 80124a2:	db02      	blt.n	80124aa <_printf_float+0x11e>
 80124a4:	6862      	ldr	r2, [r4, #4]
 80124a6:	4293      	cmp	r3, r2
 80124a8:	dd47      	ble.n	801253a <_printf_float+0x1ae>
 80124aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80124ae:	fa5f fa8a 	uxtb.w	sl, sl
 80124b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80124b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124b8:	d824      	bhi.n	8012504 <_printf_float+0x178>
 80124ba:	3901      	subs	r1, #1
 80124bc:	4652      	mov	r2, sl
 80124be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124c2:	9109      	str	r1, [sp, #36]	; 0x24
 80124c4:	f7ff ff2f 	bl	8012326 <__exponent>
 80124c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124ca:	1813      	adds	r3, r2, r0
 80124cc:	2a01      	cmp	r2, #1
 80124ce:	4681      	mov	r9, r0
 80124d0:	6123      	str	r3, [r4, #16]
 80124d2:	dc02      	bgt.n	80124da <_printf_float+0x14e>
 80124d4:	6822      	ldr	r2, [r4, #0]
 80124d6:	07d1      	lsls	r1, r2, #31
 80124d8:	d501      	bpl.n	80124de <_printf_float+0x152>
 80124da:	3301      	adds	r3, #1
 80124dc:	6123      	str	r3, [r4, #16]
 80124de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d0a5      	beq.n	8012432 <_printf_float+0xa6>
 80124e6:	232d      	movs	r3, #45	; 0x2d
 80124e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124ec:	e7a1      	b.n	8012432 <_printf_float+0xa6>
 80124ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80124f2:	f000 8177 	beq.w	80127e4 <_printf_float+0x458>
 80124f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80124fa:	d1bb      	bne.n	8012474 <_printf_float+0xe8>
 80124fc:	2900      	cmp	r1, #0
 80124fe:	d1b9      	bne.n	8012474 <_printf_float+0xe8>
 8012500:	2301      	movs	r3, #1
 8012502:	e7b6      	b.n	8012472 <_printf_float+0xe6>
 8012504:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012508:	d119      	bne.n	801253e <_printf_float+0x1b2>
 801250a:	2900      	cmp	r1, #0
 801250c:	6863      	ldr	r3, [r4, #4]
 801250e:	dd0c      	ble.n	801252a <_printf_float+0x19e>
 8012510:	6121      	str	r1, [r4, #16]
 8012512:	b913      	cbnz	r3, 801251a <_printf_float+0x18e>
 8012514:	6822      	ldr	r2, [r4, #0]
 8012516:	07d2      	lsls	r2, r2, #31
 8012518:	d502      	bpl.n	8012520 <_printf_float+0x194>
 801251a:	3301      	adds	r3, #1
 801251c:	440b      	add	r3, r1
 801251e:	6123      	str	r3, [r4, #16]
 8012520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012522:	65a3      	str	r3, [r4, #88]	; 0x58
 8012524:	f04f 0900 	mov.w	r9, #0
 8012528:	e7d9      	b.n	80124de <_printf_float+0x152>
 801252a:	b913      	cbnz	r3, 8012532 <_printf_float+0x1a6>
 801252c:	6822      	ldr	r2, [r4, #0]
 801252e:	07d0      	lsls	r0, r2, #31
 8012530:	d501      	bpl.n	8012536 <_printf_float+0x1aa>
 8012532:	3302      	adds	r3, #2
 8012534:	e7f3      	b.n	801251e <_printf_float+0x192>
 8012536:	2301      	movs	r3, #1
 8012538:	e7f1      	b.n	801251e <_printf_float+0x192>
 801253a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801253e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012542:	4293      	cmp	r3, r2
 8012544:	db05      	blt.n	8012552 <_printf_float+0x1c6>
 8012546:	6822      	ldr	r2, [r4, #0]
 8012548:	6123      	str	r3, [r4, #16]
 801254a:	07d1      	lsls	r1, r2, #31
 801254c:	d5e8      	bpl.n	8012520 <_printf_float+0x194>
 801254e:	3301      	adds	r3, #1
 8012550:	e7e5      	b.n	801251e <_printf_float+0x192>
 8012552:	2b00      	cmp	r3, #0
 8012554:	bfd4      	ite	le
 8012556:	f1c3 0302 	rsble	r3, r3, #2
 801255a:	2301      	movgt	r3, #1
 801255c:	4413      	add	r3, r2
 801255e:	e7de      	b.n	801251e <_printf_float+0x192>
 8012560:	6823      	ldr	r3, [r4, #0]
 8012562:	055a      	lsls	r2, r3, #21
 8012564:	d407      	bmi.n	8012576 <_printf_float+0x1ea>
 8012566:	6923      	ldr	r3, [r4, #16]
 8012568:	4642      	mov	r2, r8
 801256a:	4631      	mov	r1, r6
 801256c:	4628      	mov	r0, r5
 801256e:	47b8      	blx	r7
 8012570:	3001      	adds	r0, #1
 8012572:	d12b      	bne.n	80125cc <_printf_float+0x240>
 8012574:	e767      	b.n	8012446 <_printf_float+0xba>
 8012576:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801257a:	f240 80dc 	bls.w	8012736 <_printf_float+0x3aa>
 801257e:	2200      	movs	r2, #0
 8012580:	2300      	movs	r3, #0
 8012582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012586:	f7ee fab7 	bl	8000af8 <__aeabi_dcmpeq>
 801258a:	2800      	cmp	r0, #0
 801258c:	d033      	beq.n	80125f6 <_printf_float+0x26a>
 801258e:	2301      	movs	r3, #1
 8012590:	4a41      	ldr	r2, [pc, #260]	; (8012698 <_printf_float+0x30c>)
 8012592:	4631      	mov	r1, r6
 8012594:	4628      	mov	r0, r5
 8012596:	47b8      	blx	r7
 8012598:	3001      	adds	r0, #1
 801259a:	f43f af54 	beq.w	8012446 <_printf_float+0xba>
 801259e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125a2:	429a      	cmp	r2, r3
 80125a4:	db02      	blt.n	80125ac <_printf_float+0x220>
 80125a6:	6823      	ldr	r3, [r4, #0]
 80125a8:	07d8      	lsls	r0, r3, #31
 80125aa:	d50f      	bpl.n	80125cc <_printf_float+0x240>
 80125ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125b0:	4631      	mov	r1, r6
 80125b2:	4628      	mov	r0, r5
 80125b4:	47b8      	blx	r7
 80125b6:	3001      	adds	r0, #1
 80125b8:	f43f af45 	beq.w	8012446 <_printf_float+0xba>
 80125bc:	f04f 0800 	mov.w	r8, #0
 80125c0:	f104 091a 	add.w	r9, r4, #26
 80125c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125c6:	3b01      	subs	r3, #1
 80125c8:	4543      	cmp	r3, r8
 80125ca:	dc09      	bgt.n	80125e0 <_printf_float+0x254>
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	079b      	lsls	r3, r3, #30
 80125d0:	f100 8103 	bmi.w	80127da <_printf_float+0x44e>
 80125d4:	68e0      	ldr	r0, [r4, #12]
 80125d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125d8:	4298      	cmp	r0, r3
 80125da:	bfb8      	it	lt
 80125dc:	4618      	movlt	r0, r3
 80125de:	e734      	b.n	801244a <_printf_float+0xbe>
 80125e0:	2301      	movs	r3, #1
 80125e2:	464a      	mov	r2, r9
 80125e4:	4631      	mov	r1, r6
 80125e6:	4628      	mov	r0, r5
 80125e8:	47b8      	blx	r7
 80125ea:	3001      	adds	r0, #1
 80125ec:	f43f af2b 	beq.w	8012446 <_printf_float+0xba>
 80125f0:	f108 0801 	add.w	r8, r8, #1
 80125f4:	e7e6      	b.n	80125c4 <_printf_float+0x238>
 80125f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	dc2b      	bgt.n	8012654 <_printf_float+0x2c8>
 80125fc:	2301      	movs	r3, #1
 80125fe:	4a26      	ldr	r2, [pc, #152]	; (8012698 <_printf_float+0x30c>)
 8012600:	4631      	mov	r1, r6
 8012602:	4628      	mov	r0, r5
 8012604:	47b8      	blx	r7
 8012606:	3001      	adds	r0, #1
 8012608:	f43f af1d 	beq.w	8012446 <_printf_float+0xba>
 801260c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801260e:	b923      	cbnz	r3, 801261a <_printf_float+0x28e>
 8012610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012612:	b913      	cbnz	r3, 801261a <_printf_float+0x28e>
 8012614:	6823      	ldr	r3, [r4, #0]
 8012616:	07d9      	lsls	r1, r3, #31
 8012618:	d5d8      	bpl.n	80125cc <_printf_float+0x240>
 801261a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801261e:	4631      	mov	r1, r6
 8012620:	4628      	mov	r0, r5
 8012622:	47b8      	blx	r7
 8012624:	3001      	adds	r0, #1
 8012626:	f43f af0e 	beq.w	8012446 <_printf_float+0xba>
 801262a:	f04f 0900 	mov.w	r9, #0
 801262e:	f104 0a1a 	add.w	sl, r4, #26
 8012632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012634:	425b      	negs	r3, r3
 8012636:	454b      	cmp	r3, r9
 8012638:	dc01      	bgt.n	801263e <_printf_float+0x2b2>
 801263a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801263c:	e794      	b.n	8012568 <_printf_float+0x1dc>
 801263e:	2301      	movs	r3, #1
 8012640:	4652      	mov	r2, sl
 8012642:	4631      	mov	r1, r6
 8012644:	4628      	mov	r0, r5
 8012646:	47b8      	blx	r7
 8012648:	3001      	adds	r0, #1
 801264a:	f43f aefc 	beq.w	8012446 <_printf_float+0xba>
 801264e:	f109 0901 	add.w	r9, r9, #1
 8012652:	e7ee      	b.n	8012632 <_printf_float+0x2a6>
 8012654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012658:	429a      	cmp	r2, r3
 801265a:	bfa8      	it	ge
 801265c:	461a      	movge	r2, r3
 801265e:	2a00      	cmp	r2, #0
 8012660:	4691      	mov	r9, r2
 8012662:	dd07      	ble.n	8012674 <_printf_float+0x2e8>
 8012664:	4613      	mov	r3, r2
 8012666:	4631      	mov	r1, r6
 8012668:	4642      	mov	r2, r8
 801266a:	4628      	mov	r0, r5
 801266c:	47b8      	blx	r7
 801266e:	3001      	adds	r0, #1
 8012670:	f43f aee9 	beq.w	8012446 <_printf_float+0xba>
 8012674:	f104 031a 	add.w	r3, r4, #26
 8012678:	f04f 0b00 	mov.w	fp, #0
 801267c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012680:	9306      	str	r3, [sp, #24]
 8012682:	e015      	b.n	80126b0 <_printf_float+0x324>
 8012684:	7fefffff 	.word	0x7fefffff
 8012688:	08022460 	.word	0x08022460
 801268c:	0802245c 	.word	0x0802245c
 8012690:	08022468 	.word	0x08022468
 8012694:	08022464 	.word	0x08022464
 8012698:	0802246c 	.word	0x0802246c
 801269c:	2301      	movs	r3, #1
 801269e:	9a06      	ldr	r2, [sp, #24]
 80126a0:	4631      	mov	r1, r6
 80126a2:	4628      	mov	r0, r5
 80126a4:	47b8      	blx	r7
 80126a6:	3001      	adds	r0, #1
 80126a8:	f43f aecd 	beq.w	8012446 <_printf_float+0xba>
 80126ac:	f10b 0b01 	add.w	fp, fp, #1
 80126b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80126b4:	ebaa 0309 	sub.w	r3, sl, r9
 80126b8:	455b      	cmp	r3, fp
 80126ba:	dcef      	bgt.n	801269c <_printf_float+0x310>
 80126bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126c0:	429a      	cmp	r2, r3
 80126c2:	44d0      	add	r8, sl
 80126c4:	db15      	blt.n	80126f2 <_printf_float+0x366>
 80126c6:	6823      	ldr	r3, [r4, #0]
 80126c8:	07da      	lsls	r2, r3, #31
 80126ca:	d412      	bmi.n	80126f2 <_printf_float+0x366>
 80126cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126d0:	eba3 020a 	sub.w	r2, r3, sl
 80126d4:	eba3 0a01 	sub.w	sl, r3, r1
 80126d8:	4592      	cmp	sl, r2
 80126da:	bfa8      	it	ge
 80126dc:	4692      	movge	sl, r2
 80126de:	f1ba 0f00 	cmp.w	sl, #0
 80126e2:	dc0e      	bgt.n	8012702 <_printf_float+0x376>
 80126e4:	f04f 0800 	mov.w	r8, #0
 80126e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126ec:	f104 091a 	add.w	r9, r4, #26
 80126f0:	e019      	b.n	8012726 <_printf_float+0x39a>
 80126f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126f6:	4631      	mov	r1, r6
 80126f8:	4628      	mov	r0, r5
 80126fa:	47b8      	blx	r7
 80126fc:	3001      	adds	r0, #1
 80126fe:	d1e5      	bne.n	80126cc <_printf_float+0x340>
 8012700:	e6a1      	b.n	8012446 <_printf_float+0xba>
 8012702:	4653      	mov	r3, sl
 8012704:	4642      	mov	r2, r8
 8012706:	4631      	mov	r1, r6
 8012708:	4628      	mov	r0, r5
 801270a:	47b8      	blx	r7
 801270c:	3001      	adds	r0, #1
 801270e:	d1e9      	bne.n	80126e4 <_printf_float+0x358>
 8012710:	e699      	b.n	8012446 <_printf_float+0xba>
 8012712:	2301      	movs	r3, #1
 8012714:	464a      	mov	r2, r9
 8012716:	4631      	mov	r1, r6
 8012718:	4628      	mov	r0, r5
 801271a:	47b8      	blx	r7
 801271c:	3001      	adds	r0, #1
 801271e:	f43f ae92 	beq.w	8012446 <_printf_float+0xba>
 8012722:	f108 0801 	add.w	r8, r8, #1
 8012726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801272a:	1a9b      	subs	r3, r3, r2
 801272c:	eba3 030a 	sub.w	r3, r3, sl
 8012730:	4543      	cmp	r3, r8
 8012732:	dcee      	bgt.n	8012712 <_printf_float+0x386>
 8012734:	e74a      	b.n	80125cc <_printf_float+0x240>
 8012736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012738:	2a01      	cmp	r2, #1
 801273a:	dc01      	bgt.n	8012740 <_printf_float+0x3b4>
 801273c:	07db      	lsls	r3, r3, #31
 801273e:	d53a      	bpl.n	80127b6 <_printf_float+0x42a>
 8012740:	2301      	movs	r3, #1
 8012742:	4642      	mov	r2, r8
 8012744:	4631      	mov	r1, r6
 8012746:	4628      	mov	r0, r5
 8012748:	47b8      	blx	r7
 801274a:	3001      	adds	r0, #1
 801274c:	f43f ae7b 	beq.w	8012446 <_printf_float+0xba>
 8012750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012754:	4631      	mov	r1, r6
 8012756:	4628      	mov	r0, r5
 8012758:	47b8      	blx	r7
 801275a:	3001      	adds	r0, #1
 801275c:	f108 0801 	add.w	r8, r8, #1
 8012760:	f43f ae71 	beq.w	8012446 <_printf_float+0xba>
 8012764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012766:	2200      	movs	r2, #0
 8012768:	f103 3aff 	add.w	sl, r3, #4294967295
 801276c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012770:	2300      	movs	r3, #0
 8012772:	f7ee f9c1 	bl	8000af8 <__aeabi_dcmpeq>
 8012776:	b9c8      	cbnz	r0, 80127ac <_printf_float+0x420>
 8012778:	4653      	mov	r3, sl
 801277a:	4642      	mov	r2, r8
 801277c:	4631      	mov	r1, r6
 801277e:	4628      	mov	r0, r5
 8012780:	47b8      	blx	r7
 8012782:	3001      	adds	r0, #1
 8012784:	d10e      	bne.n	80127a4 <_printf_float+0x418>
 8012786:	e65e      	b.n	8012446 <_printf_float+0xba>
 8012788:	2301      	movs	r3, #1
 801278a:	4652      	mov	r2, sl
 801278c:	4631      	mov	r1, r6
 801278e:	4628      	mov	r0, r5
 8012790:	47b8      	blx	r7
 8012792:	3001      	adds	r0, #1
 8012794:	f43f ae57 	beq.w	8012446 <_printf_float+0xba>
 8012798:	f108 0801 	add.w	r8, r8, #1
 801279c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801279e:	3b01      	subs	r3, #1
 80127a0:	4543      	cmp	r3, r8
 80127a2:	dcf1      	bgt.n	8012788 <_printf_float+0x3fc>
 80127a4:	464b      	mov	r3, r9
 80127a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80127aa:	e6de      	b.n	801256a <_printf_float+0x1de>
 80127ac:	f04f 0800 	mov.w	r8, #0
 80127b0:	f104 0a1a 	add.w	sl, r4, #26
 80127b4:	e7f2      	b.n	801279c <_printf_float+0x410>
 80127b6:	2301      	movs	r3, #1
 80127b8:	e7df      	b.n	801277a <_printf_float+0x3ee>
 80127ba:	2301      	movs	r3, #1
 80127bc:	464a      	mov	r2, r9
 80127be:	4631      	mov	r1, r6
 80127c0:	4628      	mov	r0, r5
 80127c2:	47b8      	blx	r7
 80127c4:	3001      	adds	r0, #1
 80127c6:	f43f ae3e 	beq.w	8012446 <_printf_float+0xba>
 80127ca:	f108 0801 	add.w	r8, r8, #1
 80127ce:	68e3      	ldr	r3, [r4, #12]
 80127d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80127d2:	1a9b      	subs	r3, r3, r2
 80127d4:	4543      	cmp	r3, r8
 80127d6:	dcf0      	bgt.n	80127ba <_printf_float+0x42e>
 80127d8:	e6fc      	b.n	80125d4 <_printf_float+0x248>
 80127da:	f04f 0800 	mov.w	r8, #0
 80127de:	f104 0919 	add.w	r9, r4, #25
 80127e2:	e7f4      	b.n	80127ce <_printf_float+0x442>
 80127e4:	2900      	cmp	r1, #0
 80127e6:	f43f ae8b 	beq.w	8012500 <_printf_float+0x174>
 80127ea:	2300      	movs	r3, #0
 80127ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80127f0:	ab09      	add	r3, sp, #36	; 0x24
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	ec49 8b10 	vmov	d0, r8, r9
 80127f8:	6022      	str	r2, [r4, #0]
 80127fa:	f8cd a004 	str.w	sl, [sp, #4]
 80127fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012802:	4628      	mov	r0, r5
 8012804:	f7ff fd2e 	bl	8012264 <__cvt>
 8012808:	4680      	mov	r8, r0
 801280a:	e648      	b.n	801249e <_printf_float+0x112>

0801280c <_printf_common>:
 801280c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012810:	4691      	mov	r9, r2
 8012812:	461f      	mov	r7, r3
 8012814:	688a      	ldr	r2, [r1, #8]
 8012816:	690b      	ldr	r3, [r1, #16]
 8012818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801281c:	4293      	cmp	r3, r2
 801281e:	bfb8      	it	lt
 8012820:	4613      	movlt	r3, r2
 8012822:	f8c9 3000 	str.w	r3, [r9]
 8012826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801282a:	4606      	mov	r6, r0
 801282c:	460c      	mov	r4, r1
 801282e:	b112      	cbz	r2, 8012836 <_printf_common+0x2a>
 8012830:	3301      	adds	r3, #1
 8012832:	f8c9 3000 	str.w	r3, [r9]
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	0699      	lsls	r1, r3, #26
 801283a:	bf42      	ittt	mi
 801283c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012840:	3302      	addmi	r3, #2
 8012842:	f8c9 3000 	strmi.w	r3, [r9]
 8012846:	6825      	ldr	r5, [r4, #0]
 8012848:	f015 0506 	ands.w	r5, r5, #6
 801284c:	d107      	bne.n	801285e <_printf_common+0x52>
 801284e:	f104 0a19 	add.w	sl, r4, #25
 8012852:	68e3      	ldr	r3, [r4, #12]
 8012854:	f8d9 2000 	ldr.w	r2, [r9]
 8012858:	1a9b      	subs	r3, r3, r2
 801285a:	42ab      	cmp	r3, r5
 801285c:	dc28      	bgt.n	80128b0 <_printf_common+0xa4>
 801285e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012862:	6822      	ldr	r2, [r4, #0]
 8012864:	3300      	adds	r3, #0
 8012866:	bf18      	it	ne
 8012868:	2301      	movne	r3, #1
 801286a:	0692      	lsls	r2, r2, #26
 801286c:	d42d      	bmi.n	80128ca <_printf_common+0xbe>
 801286e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012872:	4639      	mov	r1, r7
 8012874:	4630      	mov	r0, r6
 8012876:	47c0      	blx	r8
 8012878:	3001      	adds	r0, #1
 801287a:	d020      	beq.n	80128be <_printf_common+0xb2>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	68e5      	ldr	r5, [r4, #12]
 8012880:	f8d9 2000 	ldr.w	r2, [r9]
 8012884:	f003 0306 	and.w	r3, r3, #6
 8012888:	2b04      	cmp	r3, #4
 801288a:	bf08      	it	eq
 801288c:	1aad      	subeq	r5, r5, r2
 801288e:	68a3      	ldr	r3, [r4, #8]
 8012890:	6922      	ldr	r2, [r4, #16]
 8012892:	bf0c      	ite	eq
 8012894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012898:	2500      	movne	r5, #0
 801289a:	4293      	cmp	r3, r2
 801289c:	bfc4      	itt	gt
 801289e:	1a9b      	subgt	r3, r3, r2
 80128a0:	18ed      	addgt	r5, r5, r3
 80128a2:	f04f 0900 	mov.w	r9, #0
 80128a6:	341a      	adds	r4, #26
 80128a8:	454d      	cmp	r5, r9
 80128aa:	d11a      	bne.n	80128e2 <_printf_common+0xd6>
 80128ac:	2000      	movs	r0, #0
 80128ae:	e008      	b.n	80128c2 <_printf_common+0xb6>
 80128b0:	2301      	movs	r3, #1
 80128b2:	4652      	mov	r2, sl
 80128b4:	4639      	mov	r1, r7
 80128b6:	4630      	mov	r0, r6
 80128b8:	47c0      	blx	r8
 80128ba:	3001      	adds	r0, #1
 80128bc:	d103      	bne.n	80128c6 <_printf_common+0xba>
 80128be:	f04f 30ff 	mov.w	r0, #4294967295
 80128c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128c6:	3501      	adds	r5, #1
 80128c8:	e7c3      	b.n	8012852 <_printf_common+0x46>
 80128ca:	18e1      	adds	r1, r4, r3
 80128cc:	1c5a      	adds	r2, r3, #1
 80128ce:	2030      	movs	r0, #48	; 0x30
 80128d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128d4:	4422      	add	r2, r4
 80128d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128de:	3302      	adds	r3, #2
 80128e0:	e7c5      	b.n	801286e <_printf_common+0x62>
 80128e2:	2301      	movs	r3, #1
 80128e4:	4622      	mov	r2, r4
 80128e6:	4639      	mov	r1, r7
 80128e8:	4630      	mov	r0, r6
 80128ea:	47c0      	blx	r8
 80128ec:	3001      	adds	r0, #1
 80128ee:	d0e6      	beq.n	80128be <_printf_common+0xb2>
 80128f0:	f109 0901 	add.w	r9, r9, #1
 80128f4:	e7d8      	b.n	80128a8 <_printf_common+0x9c>
	...

080128f8 <_printf_i>:
 80128f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012900:	460c      	mov	r4, r1
 8012902:	7e09      	ldrb	r1, [r1, #24]
 8012904:	b085      	sub	sp, #20
 8012906:	296e      	cmp	r1, #110	; 0x6e
 8012908:	4617      	mov	r7, r2
 801290a:	4606      	mov	r6, r0
 801290c:	4698      	mov	r8, r3
 801290e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012910:	f000 80b3 	beq.w	8012a7a <_printf_i+0x182>
 8012914:	d822      	bhi.n	801295c <_printf_i+0x64>
 8012916:	2963      	cmp	r1, #99	; 0x63
 8012918:	d036      	beq.n	8012988 <_printf_i+0x90>
 801291a:	d80a      	bhi.n	8012932 <_printf_i+0x3a>
 801291c:	2900      	cmp	r1, #0
 801291e:	f000 80b9 	beq.w	8012a94 <_printf_i+0x19c>
 8012922:	2958      	cmp	r1, #88	; 0x58
 8012924:	f000 8083 	beq.w	8012a2e <_printf_i+0x136>
 8012928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801292c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012930:	e032      	b.n	8012998 <_printf_i+0xa0>
 8012932:	2964      	cmp	r1, #100	; 0x64
 8012934:	d001      	beq.n	801293a <_printf_i+0x42>
 8012936:	2969      	cmp	r1, #105	; 0x69
 8012938:	d1f6      	bne.n	8012928 <_printf_i+0x30>
 801293a:	6820      	ldr	r0, [r4, #0]
 801293c:	6813      	ldr	r3, [r2, #0]
 801293e:	0605      	lsls	r5, r0, #24
 8012940:	f103 0104 	add.w	r1, r3, #4
 8012944:	d52a      	bpl.n	801299c <_printf_i+0xa4>
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	6011      	str	r1, [r2, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	da03      	bge.n	8012956 <_printf_i+0x5e>
 801294e:	222d      	movs	r2, #45	; 0x2d
 8012950:	425b      	negs	r3, r3
 8012952:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012956:	486f      	ldr	r0, [pc, #444]	; (8012b14 <_printf_i+0x21c>)
 8012958:	220a      	movs	r2, #10
 801295a:	e039      	b.n	80129d0 <_printf_i+0xd8>
 801295c:	2973      	cmp	r1, #115	; 0x73
 801295e:	f000 809d 	beq.w	8012a9c <_printf_i+0x1a4>
 8012962:	d808      	bhi.n	8012976 <_printf_i+0x7e>
 8012964:	296f      	cmp	r1, #111	; 0x6f
 8012966:	d020      	beq.n	80129aa <_printf_i+0xb2>
 8012968:	2970      	cmp	r1, #112	; 0x70
 801296a:	d1dd      	bne.n	8012928 <_printf_i+0x30>
 801296c:	6823      	ldr	r3, [r4, #0]
 801296e:	f043 0320 	orr.w	r3, r3, #32
 8012972:	6023      	str	r3, [r4, #0]
 8012974:	e003      	b.n	801297e <_printf_i+0x86>
 8012976:	2975      	cmp	r1, #117	; 0x75
 8012978:	d017      	beq.n	80129aa <_printf_i+0xb2>
 801297a:	2978      	cmp	r1, #120	; 0x78
 801297c:	d1d4      	bne.n	8012928 <_printf_i+0x30>
 801297e:	2378      	movs	r3, #120	; 0x78
 8012980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012984:	4864      	ldr	r0, [pc, #400]	; (8012b18 <_printf_i+0x220>)
 8012986:	e055      	b.n	8012a34 <_printf_i+0x13c>
 8012988:	6813      	ldr	r3, [r2, #0]
 801298a:	1d19      	adds	r1, r3, #4
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	6011      	str	r1, [r2, #0]
 8012990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012998:	2301      	movs	r3, #1
 801299a:	e08c      	b.n	8012ab6 <_printf_i+0x1be>
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	6011      	str	r1, [r2, #0]
 80129a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80129a4:	bf18      	it	ne
 80129a6:	b21b      	sxthne	r3, r3
 80129a8:	e7cf      	b.n	801294a <_printf_i+0x52>
 80129aa:	6813      	ldr	r3, [r2, #0]
 80129ac:	6825      	ldr	r5, [r4, #0]
 80129ae:	1d18      	adds	r0, r3, #4
 80129b0:	6010      	str	r0, [r2, #0]
 80129b2:	0628      	lsls	r0, r5, #24
 80129b4:	d501      	bpl.n	80129ba <_printf_i+0xc2>
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	e002      	b.n	80129c0 <_printf_i+0xc8>
 80129ba:	0668      	lsls	r0, r5, #25
 80129bc:	d5fb      	bpl.n	80129b6 <_printf_i+0xbe>
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	4854      	ldr	r0, [pc, #336]	; (8012b14 <_printf_i+0x21c>)
 80129c2:	296f      	cmp	r1, #111	; 0x6f
 80129c4:	bf14      	ite	ne
 80129c6:	220a      	movne	r2, #10
 80129c8:	2208      	moveq	r2, #8
 80129ca:	2100      	movs	r1, #0
 80129cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129d0:	6865      	ldr	r5, [r4, #4]
 80129d2:	60a5      	str	r5, [r4, #8]
 80129d4:	2d00      	cmp	r5, #0
 80129d6:	f2c0 8095 	blt.w	8012b04 <_printf_i+0x20c>
 80129da:	6821      	ldr	r1, [r4, #0]
 80129dc:	f021 0104 	bic.w	r1, r1, #4
 80129e0:	6021      	str	r1, [r4, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d13d      	bne.n	8012a62 <_printf_i+0x16a>
 80129e6:	2d00      	cmp	r5, #0
 80129e8:	f040 808e 	bne.w	8012b08 <_printf_i+0x210>
 80129ec:	4665      	mov	r5, ip
 80129ee:	2a08      	cmp	r2, #8
 80129f0:	d10b      	bne.n	8012a0a <_printf_i+0x112>
 80129f2:	6823      	ldr	r3, [r4, #0]
 80129f4:	07db      	lsls	r3, r3, #31
 80129f6:	d508      	bpl.n	8012a0a <_printf_i+0x112>
 80129f8:	6923      	ldr	r3, [r4, #16]
 80129fa:	6862      	ldr	r2, [r4, #4]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	bfde      	ittt	le
 8012a00:	2330      	movle	r3, #48	; 0x30
 8012a02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a0a:	ebac 0305 	sub.w	r3, ip, r5
 8012a0e:	6123      	str	r3, [r4, #16]
 8012a10:	f8cd 8000 	str.w	r8, [sp]
 8012a14:	463b      	mov	r3, r7
 8012a16:	aa03      	add	r2, sp, #12
 8012a18:	4621      	mov	r1, r4
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	f7ff fef6 	bl	801280c <_printf_common>
 8012a20:	3001      	adds	r0, #1
 8012a22:	d14d      	bne.n	8012ac0 <_printf_i+0x1c8>
 8012a24:	f04f 30ff 	mov.w	r0, #4294967295
 8012a28:	b005      	add	sp, #20
 8012a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a2e:	4839      	ldr	r0, [pc, #228]	; (8012b14 <_printf_i+0x21c>)
 8012a30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012a34:	6813      	ldr	r3, [r2, #0]
 8012a36:	6821      	ldr	r1, [r4, #0]
 8012a38:	1d1d      	adds	r5, r3, #4
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	6015      	str	r5, [r2, #0]
 8012a3e:	060a      	lsls	r2, r1, #24
 8012a40:	d50b      	bpl.n	8012a5a <_printf_i+0x162>
 8012a42:	07ca      	lsls	r2, r1, #31
 8012a44:	bf44      	itt	mi
 8012a46:	f041 0120 	orrmi.w	r1, r1, #32
 8012a4a:	6021      	strmi	r1, [r4, #0]
 8012a4c:	b91b      	cbnz	r3, 8012a56 <_printf_i+0x15e>
 8012a4e:	6822      	ldr	r2, [r4, #0]
 8012a50:	f022 0220 	bic.w	r2, r2, #32
 8012a54:	6022      	str	r2, [r4, #0]
 8012a56:	2210      	movs	r2, #16
 8012a58:	e7b7      	b.n	80129ca <_printf_i+0xd2>
 8012a5a:	064d      	lsls	r5, r1, #25
 8012a5c:	bf48      	it	mi
 8012a5e:	b29b      	uxthmi	r3, r3
 8012a60:	e7ef      	b.n	8012a42 <_printf_i+0x14a>
 8012a62:	4665      	mov	r5, ip
 8012a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a68:	fb02 3311 	mls	r3, r2, r1, r3
 8012a6c:	5cc3      	ldrb	r3, [r0, r3]
 8012a6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a72:	460b      	mov	r3, r1
 8012a74:	2900      	cmp	r1, #0
 8012a76:	d1f5      	bne.n	8012a64 <_printf_i+0x16c>
 8012a78:	e7b9      	b.n	80129ee <_printf_i+0xf6>
 8012a7a:	6813      	ldr	r3, [r2, #0]
 8012a7c:	6825      	ldr	r5, [r4, #0]
 8012a7e:	6961      	ldr	r1, [r4, #20]
 8012a80:	1d18      	adds	r0, r3, #4
 8012a82:	6010      	str	r0, [r2, #0]
 8012a84:	0628      	lsls	r0, r5, #24
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	d501      	bpl.n	8012a8e <_printf_i+0x196>
 8012a8a:	6019      	str	r1, [r3, #0]
 8012a8c:	e002      	b.n	8012a94 <_printf_i+0x19c>
 8012a8e:	066a      	lsls	r2, r5, #25
 8012a90:	d5fb      	bpl.n	8012a8a <_printf_i+0x192>
 8012a92:	8019      	strh	r1, [r3, #0]
 8012a94:	2300      	movs	r3, #0
 8012a96:	6123      	str	r3, [r4, #16]
 8012a98:	4665      	mov	r5, ip
 8012a9a:	e7b9      	b.n	8012a10 <_printf_i+0x118>
 8012a9c:	6813      	ldr	r3, [r2, #0]
 8012a9e:	1d19      	adds	r1, r3, #4
 8012aa0:	6011      	str	r1, [r2, #0]
 8012aa2:	681d      	ldr	r5, [r3, #0]
 8012aa4:	6862      	ldr	r2, [r4, #4]
 8012aa6:	2100      	movs	r1, #0
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	f7ed fbb1 	bl	8000210 <memchr>
 8012aae:	b108      	cbz	r0, 8012ab4 <_printf_i+0x1bc>
 8012ab0:	1b40      	subs	r0, r0, r5
 8012ab2:	6060      	str	r0, [r4, #4]
 8012ab4:	6863      	ldr	r3, [r4, #4]
 8012ab6:	6123      	str	r3, [r4, #16]
 8012ab8:	2300      	movs	r3, #0
 8012aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012abe:	e7a7      	b.n	8012a10 <_printf_i+0x118>
 8012ac0:	6923      	ldr	r3, [r4, #16]
 8012ac2:	462a      	mov	r2, r5
 8012ac4:	4639      	mov	r1, r7
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	47c0      	blx	r8
 8012aca:	3001      	adds	r0, #1
 8012acc:	d0aa      	beq.n	8012a24 <_printf_i+0x12c>
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	079b      	lsls	r3, r3, #30
 8012ad2:	d413      	bmi.n	8012afc <_printf_i+0x204>
 8012ad4:	68e0      	ldr	r0, [r4, #12]
 8012ad6:	9b03      	ldr	r3, [sp, #12]
 8012ad8:	4298      	cmp	r0, r3
 8012ada:	bfb8      	it	lt
 8012adc:	4618      	movlt	r0, r3
 8012ade:	e7a3      	b.n	8012a28 <_printf_i+0x130>
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	464a      	mov	r2, r9
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	47c0      	blx	r8
 8012aea:	3001      	adds	r0, #1
 8012aec:	d09a      	beq.n	8012a24 <_printf_i+0x12c>
 8012aee:	3501      	adds	r5, #1
 8012af0:	68e3      	ldr	r3, [r4, #12]
 8012af2:	9a03      	ldr	r2, [sp, #12]
 8012af4:	1a9b      	subs	r3, r3, r2
 8012af6:	42ab      	cmp	r3, r5
 8012af8:	dcf2      	bgt.n	8012ae0 <_printf_i+0x1e8>
 8012afa:	e7eb      	b.n	8012ad4 <_printf_i+0x1dc>
 8012afc:	2500      	movs	r5, #0
 8012afe:	f104 0919 	add.w	r9, r4, #25
 8012b02:	e7f5      	b.n	8012af0 <_printf_i+0x1f8>
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d1ac      	bne.n	8012a62 <_printf_i+0x16a>
 8012b08:	7803      	ldrb	r3, [r0, #0]
 8012b0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b12:	e76c      	b.n	80129ee <_printf_i+0xf6>
 8012b14:	0802246e 	.word	0x0802246e
 8012b18:	0802247f 	.word	0x0802247f

08012b1c <_sbrk_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4c06      	ldr	r4, [pc, #24]	; (8012b38 <_sbrk_r+0x1c>)
 8012b20:	2300      	movs	r3, #0
 8012b22:	4605      	mov	r5, r0
 8012b24:	4608      	mov	r0, r1
 8012b26:	6023      	str	r3, [r4, #0]
 8012b28:	f7ee fcae 	bl	8001488 <_sbrk>
 8012b2c:	1c43      	adds	r3, r0, #1
 8012b2e:	d102      	bne.n	8012b36 <_sbrk_r+0x1a>
 8012b30:	6823      	ldr	r3, [r4, #0]
 8012b32:	b103      	cbz	r3, 8012b36 <_sbrk_r+0x1a>
 8012b34:	602b      	str	r3, [r5, #0]
 8012b36:	bd38      	pop	{r3, r4, r5, pc}
 8012b38:	2000af68 	.word	0x2000af68

08012b3c <strcpy>:
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b42:	f803 2b01 	strb.w	r2, [r3], #1
 8012b46:	2a00      	cmp	r2, #0
 8012b48:	d1f9      	bne.n	8012b3e <strcpy+0x2>
 8012b4a:	4770      	bx	lr

08012b4c <sulp>:
 8012b4c:	b570      	push	{r4, r5, r6, lr}
 8012b4e:	4604      	mov	r4, r0
 8012b50:	460d      	mov	r5, r1
 8012b52:	ec45 4b10 	vmov	d0, r4, r5
 8012b56:	4616      	mov	r6, r2
 8012b58:	f002 fbb4 	bl	80152c4 <__ulp>
 8012b5c:	ec51 0b10 	vmov	r0, r1, d0
 8012b60:	b17e      	cbz	r6, 8012b82 <sulp+0x36>
 8012b62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012b66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	dd09      	ble.n	8012b82 <sulp+0x36>
 8012b6e:	051b      	lsls	r3, r3, #20
 8012b70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012b74:	2400      	movs	r4, #0
 8012b76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	462b      	mov	r3, r5
 8012b7e:	f7ed fd53 	bl	8000628 <__aeabi_dmul>
 8012b82:	bd70      	pop	{r4, r5, r6, pc}
 8012b84:	0000      	movs	r0, r0
	...

08012b88 <_strtod_l>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	461f      	mov	r7, r3
 8012b8e:	b0a1      	sub	sp, #132	; 0x84
 8012b90:	2300      	movs	r3, #0
 8012b92:	4681      	mov	r9, r0
 8012b94:	4638      	mov	r0, r7
 8012b96:	460e      	mov	r6, r1
 8012b98:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b9a:	931c      	str	r3, [sp, #112]	; 0x70
 8012b9c:	f002 f8a1 	bl	8014ce2 <__localeconv_l>
 8012ba0:	4680      	mov	r8, r0
 8012ba2:	6800      	ldr	r0, [r0, #0]
 8012ba4:	f7ed fb26 	bl	80001f4 <strlen>
 8012ba8:	f04f 0a00 	mov.w	sl, #0
 8012bac:	4604      	mov	r4, r0
 8012bae:	f04f 0b00 	mov.w	fp, #0
 8012bb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8012bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012bb6:	781a      	ldrb	r2, [r3, #0]
 8012bb8:	2a0d      	cmp	r2, #13
 8012bba:	d832      	bhi.n	8012c22 <_strtod_l+0x9a>
 8012bbc:	2a09      	cmp	r2, #9
 8012bbe:	d236      	bcs.n	8012c2e <_strtod_l+0xa6>
 8012bc0:	2a00      	cmp	r2, #0
 8012bc2:	d03e      	beq.n	8012c42 <_strtod_l+0xba>
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8012bc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012bca:	782b      	ldrb	r3, [r5, #0]
 8012bcc:	2b30      	cmp	r3, #48	; 0x30
 8012bce:	f040 80ac 	bne.w	8012d2a <_strtod_l+0x1a2>
 8012bd2:	786b      	ldrb	r3, [r5, #1]
 8012bd4:	2b58      	cmp	r3, #88	; 0x58
 8012bd6:	d001      	beq.n	8012bdc <_strtod_l+0x54>
 8012bd8:	2b78      	cmp	r3, #120	; 0x78
 8012bda:	d167      	bne.n	8012cac <_strtod_l+0x124>
 8012bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bde:	9301      	str	r3, [sp, #4]
 8012be0:	ab1c      	add	r3, sp, #112	; 0x70
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	9702      	str	r7, [sp, #8]
 8012be6:	ab1d      	add	r3, sp, #116	; 0x74
 8012be8:	4a88      	ldr	r2, [pc, #544]	; (8012e0c <_strtod_l+0x284>)
 8012bea:	a91b      	add	r1, sp, #108	; 0x6c
 8012bec:	4648      	mov	r0, r9
 8012bee:	f001 fd9e 	bl	801472e <__gethex>
 8012bf2:	f010 0407 	ands.w	r4, r0, #7
 8012bf6:	4606      	mov	r6, r0
 8012bf8:	d005      	beq.n	8012c06 <_strtod_l+0x7e>
 8012bfa:	2c06      	cmp	r4, #6
 8012bfc:	d12b      	bne.n	8012c56 <_strtod_l+0xce>
 8012bfe:	3501      	adds	r5, #1
 8012c00:	2300      	movs	r3, #0
 8012c02:	951b      	str	r5, [sp, #108]	; 0x6c
 8012c04:	930d      	str	r3, [sp, #52]	; 0x34
 8012c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f040 859a 	bne.w	8013742 <_strtod_l+0xbba>
 8012c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c10:	b1e3      	cbz	r3, 8012c4c <_strtod_l+0xc4>
 8012c12:	4652      	mov	r2, sl
 8012c14:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012c18:	ec43 2b10 	vmov	d0, r2, r3
 8012c1c:	b021      	add	sp, #132	; 0x84
 8012c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c22:	2a2b      	cmp	r2, #43	; 0x2b
 8012c24:	d015      	beq.n	8012c52 <_strtod_l+0xca>
 8012c26:	2a2d      	cmp	r2, #45	; 0x2d
 8012c28:	d004      	beq.n	8012c34 <_strtod_l+0xac>
 8012c2a:	2a20      	cmp	r2, #32
 8012c2c:	d1ca      	bne.n	8012bc4 <_strtod_l+0x3c>
 8012c2e:	3301      	adds	r3, #1
 8012c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8012c32:	e7bf      	b.n	8012bb4 <_strtod_l+0x2c>
 8012c34:	2201      	movs	r2, #1
 8012c36:	920d      	str	r2, [sp, #52]	; 0x34
 8012c38:	1c5a      	adds	r2, r3, #1
 8012c3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c3c:	785b      	ldrb	r3, [r3, #1]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d1c2      	bne.n	8012bc8 <_strtod_l+0x40>
 8012c42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c44:	961b      	str	r6, [sp, #108]	; 0x6c
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	f040 8579 	bne.w	801373e <_strtod_l+0xbb6>
 8012c4c:	4652      	mov	r2, sl
 8012c4e:	465b      	mov	r3, fp
 8012c50:	e7e2      	b.n	8012c18 <_strtod_l+0x90>
 8012c52:	2200      	movs	r2, #0
 8012c54:	e7ef      	b.n	8012c36 <_strtod_l+0xae>
 8012c56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012c58:	b13a      	cbz	r2, 8012c6a <_strtod_l+0xe2>
 8012c5a:	2135      	movs	r1, #53	; 0x35
 8012c5c:	a81e      	add	r0, sp, #120	; 0x78
 8012c5e:	f002 fc29 	bl	80154b4 <__copybits>
 8012c62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012c64:	4648      	mov	r0, r9
 8012c66:	f002 f895 	bl	8014d94 <_Bfree>
 8012c6a:	3c01      	subs	r4, #1
 8012c6c:	2c04      	cmp	r4, #4
 8012c6e:	d806      	bhi.n	8012c7e <_strtod_l+0xf6>
 8012c70:	e8df f004 	tbb	[pc, r4]
 8012c74:	1714030a 	.word	0x1714030a
 8012c78:	0a          	.byte	0x0a
 8012c79:	00          	.byte	0x00
 8012c7a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012c7e:	0730      	lsls	r0, r6, #28
 8012c80:	d5c1      	bpl.n	8012c06 <_strtod_l+0x7e>
 8012c82:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012c86:	e7be      	b.n	8012c06 <_strtod_l+0x7e>
 8012c88:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012c8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012c8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012c92:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012c96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012c9a:	e7f0      	b.n	8012c7e <_strtod_l+0xf6>
 8012c9c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8012e10 <_strtod_l+0x288>
 8012ca0:	e7ed      	b.n	8012c7e <_strtod_l+0xf6>
 8012ca2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012ca6:	f04f 3aff 	mov.w	sl, #4294967295
 8012caa:	e7e8      	b.n	8012c7e <_strtod_l+0xf6>
 8012cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cae:	1c5a      	adds	r2, r3, #1
 8012cb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8012cb2:	785b      	ldrb	r3, [r3, #1]
 8012cb4:	2b30      	cmp	r3, #48	; 0x30
 8012cb6:	d0f9      	beq.n	8012cac <_strtod_l+0x124>
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d0a4      	beq.n	8012c06 <_strtod_l+0x7e>
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	2500      	movs	r5, #0
 8012cc0:	9306      	str	r3, [sp, #24]
 8012cc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cc4:	9308      	str	r3, [sp, #32]
 8012cc6:	9507      	str	r5, [sp, #28]
 8012cc8:	9505      	str	r5, [sp, #20]
 8012cca:	220a      	movs	r2, #10
 8012ccc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012cce:	7807      	ldrb	r7, [r0, #0]
 8012cd0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012cd4:	b2d9      	uxtb	r1, r3
 8012cd6:	2909      	cmp	r1, #9
 8012cd8:	d929      	bls.n	8012d2e <_strtod_l+0x1a6>
 8012cda:	4622      	mov	r2, r4
 8012cdc:	f8d8 1000 	ldr.w	r1, [r8]
 8012ce0:	f002 fd8a 	bl	80157f8 <strncmp>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d031      	beq.n	8012d4c <_strtod_l+0x1c4>
 8012ce8:	2000      	movs	r0, #0
 8012cea:	9c05      	ldr	r4, [sp, #20]
 8012cec:	9004      	str	r0, [sp, #16]
 8012cee:	463b      	mov	r3, r7
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	2b65      	cmp	r3, #101	; 0x65
 8012cf4:	d001      	beq.n	8012cfa <_strtod_l+0x172>
 8012cf6:	2b45      	cmp	r3, #69	; 0x45
 8012cf8:	d114      	bne.n	8012d24 <_strtod_l+0x19c>
 8012cfa:	b924      	cbnz	r4, 8012d06 <_strtod_l+0x17e>
 8012cfc:	b910      	cbnz	r0, 8012d04 <_strtod_l+0x17c>
 8012cfe:	9b06      	ldr	r3, [sp, #24]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d09e      	beq.n	8012c42 <_strtod_l+0xba>
 8012d04:	2400      	movs	r4, #0
 8012d06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012d08:	1c73      	adds	r3, r6, #1
 8012d0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8012d0c:	7873      	ldrb	r3, [r6, #1]
 8012d0e:	2b2b      	cmp	r3, #43	; 0x2b
 8012d10:	d078      	beq.n	8012e04 <_strtod_l+0x27c>
 8012d12:	2b2d      	cmp	r3, #45	; 0x2d
 8012d14:	d070      	beq.n	8012df8 <_strtod_l+0x270>
 8012d16:	f04f 0c00 	mov.w	ip, #0
 8012d1a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012d1e:	2f09      	cmp	r7, #9
 8012d20:	d97c      	bls.n	8012e1c <_strtod_l+0x294>
 8012d22:	961b      	str	r6, [sp, #108]	; 0x6c
 8012d24:	f04f 0e00 	mov.w	lr, #0
 8012d28:	e09a      	b.n	8012e60 <_strtod_l+0x2d8>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	e7c7      	b.n	8012cbe <_strtod_l+0x136>
 8012d2e:	9905      	ldr	r1, [sp, #20]
 8012d30:	2908      	cmp	r1, #8
 8012d32:	bfdd      	ittte	le
 8012d34:	9907      	ldrle	r1, [sp, #28]
 8012d36:	fb02 3301 	mlale	r3, r2, r1, r3
 8012d3a:	9307      	strle	r3, [sp, #28]
 8012d3c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012d40:	9b05      	ldr	r3, [sp, #20]
 8012d42:	3001      	adds	r0, #1
 8012d44:	3301      	adds	r3, #1
 8012d46:	9305      	str	r3, [sp, #20]
 8012d48:	901b      	str	r0, [sp, #108]	; 0x6c
 8012d4a:	e7bf      	b.n	8012ccc <_strtod_l+0x144>
 8012d4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d4e:	191a      	adds	r2, r3, r4
 8012d50:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d52:	9a05      	ldr	r2, [sp, #20]
 8012d54:	5d1b      	ldrb	r3, [r3, r4]
 8012d56:	2a00      	cmp	r2, #0
 8012d58:	d037      	beq.n	8012dca <_strtod_l+0x242>
 8012d5a:	9c05      	ldr	r4, [sp, #20]
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012d62:	2909      	cmp	r1, #9
 8012d64:	d913      	bls.n	8012d8e <_strtod_l+0x206>
 8012d66:	2101      	movs	r1, #1
 8012d68:	9104      	str	r1, [sp, #16]
 8012d6a:	e7c2      	b.n	8012cf2 <_strtod_l+0x16a>
 8012d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d72:	785b      	ldrb	r3, [r3, #1]
 8012d74:	3001      	adds	r0, #1
 8012d76:	2b30      	cmp	r3, #48	; 0x30
 8012d78:	d0f8      	beq.n	8012d6c <_strtod_l+0x1e4>
 8012d7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012d7e:	2a08      	cmp	r2, #8
 8012d80:	f200 84e4 	bhi.w	801374c <_strtod_l+0xbc4>
 8012d84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012d86:	9208      	str	r2, [sp, #32]
 8012d88:	4602      	mov	r2, r0
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012d92:	f100 0101 	add.w	r1, r0, #1
 8012d96:	d012      	beq.n	8012dbe <_strtod_l+0x236>
 8012d98:	440a      	add	r2, r1
 8012d9a:	eb00 0c04 	add.w	ip, r0, r4
 8012d9e:	4621      	mov	r1, r4
 8012da0:	270a      	movs	r7, #10
 8012da2:	458c      	cmp	ip, r1
 8012da4:	d113      	bne.n	8012dce <_strtod_l+0x246>
 8012da6:	1821      	adds	r1, r4, r0
 8012da8:	2908      	cmp	r1, #8
 8012daa:	f104 0401 	add.w	r4, r4, #1
 8012dae:	4404      	add	r4, r0
 8012db0:	dc19      	bgt.n	8012de6 <_strtod_l+0x25e>
 8012db2:	9b07      	ldr	r3, [sp, #28]
 8012db4:	210a      	movs	r1, #10
 8012db6:	fb01 e303 	mla	r3, r1, r3, lr
 8012dba:	9307      	str	r3, [sp, #28]
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dc0:	1c58      	adds	r0, r3, #1
 8012dc2:	901b      	str	r0, [sp, #108]	; 0x6c
 8012dc4:	785b      	ldrb	r3, [r3, #1]
 8012dc6:	4608      	mov	r0, r1
 8012dc8:	e7c9      	b.n	8012d5e <_strtod_l+0x1d6>
 8012dca:	9805      	ldr	r0, [sp, #20]
 8012dcc:	e7d3      	b.n	8012d76 <_strtod_l+0x1ee>
 8012dce:	2908      	cmp	r1, #8
 8012dd0:	f101 0101 	add.w	r1, r1, #1
 8012dd4:	dc03      	bgt.n	8012dde <_strtod_l+0x256>
 8012dd6:	9b07      	ldr	r3, [sp, #28]
 8012dd8:	437b      	muls	r3, r7
 8012dda:	9307      	str	r3, [sp, #28]
 8012ddc:	e7e1      	b.n	8012da2 <_strtod_l+0x21a>
 8012dde:	2910      	cmp	r1, #16
 8012de0:	bfd8      	it	le
 8012de2:	437d      	mulle	r5, r7
 8012de4:	e7dd      	b.n	8012da2 <_strtod_l+0x21a>
 8012de6:	2c10      	cmp	r4, #16
 8012de8:	bfdc      	itt	le
 8012dea:	210a      	movle	r1, #10
 8012dec:	fb01 e505 	mlale	r5, r1, r5, lr
 8012df0:	e7e4      	b.n	8012dbc <_strtod_l+0x234>
 8012df2:	2301      	movs	r3, #1
 8012df4:	9304      	str	r3, [sp, #16]
 8012df6:	e781      	b.n	8012cfc <_strtod_l+0x174>
 8012df8:	f04f 0c01 	mov.w	ip, #1
 8012dfc:	1cb3      	adds	r3, r6, #2
 8012dfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e00:	78b3      	ldrb	r3, [r6, #2]
 8012e02:	e78a      	b.n	8012d1a <_strtod_l+0x192>
 8012e04:	f04f 0c00 	mov.w	ip, #0
 8012e08:	e7f8      	b.n	8012dfc <_strtod_l+0x274>
 8012e0a:	bf00      	nop
 8012e0c:	08022490 	.word	0x08022490
 8012e10:	7ff00000 	.word	0x7ff00000
 8012e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e16:	1c5f      	adds	r7, r3, #1
 8012e18:	971b      	str	r7, [sp, #108]	; 0x6c
 8012e1a:	785b      	ldrb	r3, [r3, #1]
 8012e1c:	2b30      	cmp	r3, #48	; 0x30
 8012e1e:	d0f9      	beq.n	8012e14 <_strtod_l+0x28c>
 8012e20:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012e24:	2f08      	cmp	r7, #8
 8012e26:	f63f af7d 	bhi.w	8012d24 <_strtod_l+0x19c>
 8012e2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012e2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e30:	930a      	str	r3, [sp, #40]	; 0x28
 8012e32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e34:	1c5f      	adds	r7, r3, #1
 8012e36:	971b      	str	r7, [sp, #108]	; 0x6c
 8012e38:	785b      	ldrb	r3, [r3, #1]
 8012e3a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012e3e:	f1b8 0f09 	cmp.w	r8, #9
 8012e42:	d937      	bls.n	8012eb4 <_strtod_l+0x32c>
 8012e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012e46:	1a7f      	subs	r7, r7, r1
 8012e48:	2f08      	cmp	r7, #8
 8012e4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012e4e:	dc37      	bgt.n	8012ec0 <_strtod_l+0x338>
 8012e50:	45be      	cmp	lr, r7
 8012e52:	bfa8      	it	ge
 8012e54:	46be      	movge	lr, r7
 8012e56:	f1bc 0f00 	cmp.w	ip, #0
 8012e5a:	d001      	beq.n	8012e60 <_strtod_l+0x2d8>
 8012e5c:	f1ce 0e00 	rsb	lr, lr, #0
 8012e60:	2c00      	cmp	r4, #0
 8012e62:	d151      	bne.n	8012f08 <_strtod_l+0x380>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f47f aece 	bne.w	8012c06 <_strtod_l+0x7e>
 8012e6a:	9a06      	ldr	r2, [sp, #24]
 8012e6c:	2a00      	cmp	r2, #0
 8012e6e:	f47f aeca 	bne.w	8012c06 <_strtod_l+0x7e>
 8012e72:	9a04      	ldr	r2, [sp, #16]
 8012e74:	2a00      	cmp	r2, #0
 8012e76:	f47f aee4 	bne.w	8012c42 <_strtod_l+0xba>
 8012e7a:	2b4e      	cmp	r3, #78	; 0x4e
 8012e7c:	d027      	beq.n	8012ece <_strtod_l+0x346>
 8012e7e:	dc21      	bgt.n	8012ec4 <_strtod_l+0x33c>
 8012e80:	2b49      	cmp	r3, #73	; 0x49
 8012e82:	f47f aede 	bne.w	8012c42 <_strtod_l+0xba>
 8012e86:	49a0      	ldr	r1, [pc, #640]	; (8013108 <_strtod_l+0x580>)
 8012e88:	a81b      	add	r0, sp, #108	; 0x6c
 8012e8a:	f001 fe83 	bl	8014b94 <__match>
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	f43f aed7 	beq.w	8012c42 <_strtod_l+0xba>
 8012e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e96:	499d      	ldr	r1, [pc, #628]	; (801310c <_strtod_l+0x584>)
 8012e98:	3b01      	subs	r3, #1
 8012e9a:	a81b      	add	r0, sp, #108	; 0x6c
 8012e9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e9e:	f001 fe79 	bl	8014b94 <__match>
 8012ea2:	b910      	cbnz	r0, 8012eaa <_strtod_l+0x322>
 8012ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	931b      	str	r3, [sp, #108]	; 0x6c
 8012eaa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013120 <_strtod_l+0x598>
 8012eae:	f04f 0a00 	mov.w	sl, #0
 8012eb2:	e6a8      	b.n	8012c06 <_strtod_l+0x7e>
 8012eb4:	210a      	movs	r1, #10
 8012eb6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012eba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012ebe:	e7b8      	b.n	8012e32 <_strtod_l+0x2aa>
 8012ec0:	46be      	mov	lr, r7
 8012ec2:	e7c8      	b.n	8012e56 <_strtod_l+0x2ce>
 8012ec4:	2b69      	cmp	r3, #105	; 0x69
 8012ec6:	d0de      	beq.n	8012e86 <_strtod_l+0x2fe>
 8012ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8012eca:	f47f aeba 	bne.w	8012c42 <_strtod_l+0xba>
 8012ece:	4990      	ldr	r1, [pc, #576]	; (8013110 <_strtod_l+0x588>)
 8012ed0:	a81b      	add	r0, sp, #108	; 0x6c
 8012ed2:	f001 fe5f 	bl	8014b94 <__match>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	f43f aeb3 	beq.w	8012c42 <_strtod_l+0xba>
 8012edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2b28      	cmp	r3, #40	; 0x28
 8012ee2:	d10e      	bne.n	8012f02 <_strtod_l+0x37a>
 8012ee4:	aa1e      	add	r2, sp, #120	; 0x78
 8012ee6:	498b      	ldr	r1, [pc, #556]	; (8013114 <_strtod_l+0x58c>)
 8012ee8:	a81b      	add	r0, sp, #108	; 0x6c
 8012eea:	f001 fe67 	bl	8014bbc <__hexnan>
 8012eee:	2805      	cmp	r0, #5
 8012ef0:	d107      	bne.n	8012f02 <_strtod_l+0x37a>
 8012ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ef4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012ef8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012efc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012f00:	e681      	b.n	8012c06 <_strtod_l+0x7e>
 8012f02:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013128 <_strtod_l+0x5a0>
 8012f06:	e7d2      	b.n	8012eae <_strtod_l+0x326>
 8012f08:	ebae 0302 	sub.w	r3, lr, r2
 8012f0c:	9306      	str	r3, [sp, #24]
 8012f0e:	9b05      	ldr	r3, [sp, #20]
 8012f10:	9807      	ldr	r0, [sp, #28]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	bf08      	it	eq
 8012f16:	4623      	moveq	r3, r4
 8012f18:	2c10      	cmp	r4, #16
 8012f1a:	9305      	str	r3, [sp, #20]
 8012f1c:	46a0      	mov	r8, r4
 8012f1e:	bfa8      	it	ge
 8012f20:	f04f 0810 	movge.w	r8, #16
 8012f24:	f7ed fb06 	bl	8000534 <__aeabi_ui2d>
 8012f28:	2c09      	cmp	r4, #9
 8012f2a:	4682      	mov	sl, r0
 8012f2c:	468b      	mov	fp, r1
 8012f2e:	dc13      	bgt.n	8012f58 <_strtod_l+0x3d0>
 8012f30:	9b06      	ldr	r3, [sp, #24]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f43f ae67 	beq.w	8012c06 <_strtod_l+0x7e>
 8012f38:	9b06      	ldr	r3, [sp, #24]
 8012f3a:	dd7a      	ble.n	8013032 <_strtod_l+0x4aa>
 8012f3c:	2b16      	cmp	r3, #22
 8012f3e:	dc61      	bgt.n	8013004 <_strtod_l+0x47c>
 8012f40:	4a75      	ldr	r2, [pc, #468]	; (8013118 <_strtod_l+0x590>)
 8012f42:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012f46:	e9de 0100 	ldrd	r0, r1, [lr]
 8012f4a:	4652      	mov	r2, sl
 8012f4c:	465b      	mov	r3, fp
 8012f4e:	f7ed fb6b 	bl	8000628 <__aeabi_dmul>
 8012f52:	4682      	mov	sl, r0
 8012f54:	468b      	mov	fp, r1
 8012f56:	e656      	b.n	8012c06 <_strtod_l+0x7e>
 8012f58:	4b6f      	ldr	r3, [pc, #444]	; (8013118 <_strtod_l+0x590>)
 8012f5a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012f5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012f62:	f7ed fb61 	bl	8000628 <__aeabi_dmul>
 8012f66:	4606      	mov	r6, r0
 8012f68:	4628      	mov	r0, r5
 8012f6a:	460f      	mov	r7, r1
 8012f6c:	f7ed fae2 	bl	8000534 <__aeabi_ui2d>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4630      	mov	r0, r6
 8012f76:	4639      	mov	r1, r7
 8012f78:	f7ed f9a0 	bl	80002bc <__adddf3>
 8012f7c:	2c0f      	cmp	r4, #15
 8012f7e:	4682      	mov	sl, r0
 8012f80:	468b      	mov	fp, r1
 8012f82:	ddd5      	ble.n	8012f30 <_strtod_l+0x3a8>
 8012f84:	9b06      	ldr	r3, [sp, #24]
 8012f86:	eba4 0808 	sub.w	r8, r4, r8
 8012f8a:	4498      	add	r8, r3
 8012f8c:	f1b8 0f00 	cmp.w	r8, #0
 8012f90:	f340 8096 	ble.w	80130c0 <_strtod_l+0x538>
 8012f94:	f018 030f 	ands.w	r3, r8, #15
 8012f98:	d00a      	beq.n	8012fb0 <_strtod_l+0x428>
 8012f9a:	495f      	ldr	r1, [pc, #380]	; (8013118 <_strtod_l+0x590>)
 8012f9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012fa0:	4652      	mov	r2, sl
 8012fa2:	465b      	mov	r3, fp
 8012fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fa8:	f7ed fb3e 	bl	8000628 <__aeabi_dmul>
 8012fac:	4682      	mov	sl, r0
 8012fae:	468b      	mov	fp, r1
 8012fb0:	f038 080f 	bics.w	r8, r8, #15
 8012fb4:	d073      	beq.n	801309e <_strtod_l+0x516>
 8012fb6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012fba:	dd47      	ble.n	801304c <_strtod_l+0x4c4>
 8012fbc:	2400      	movs	r4, #0
 8012fbe:	46a0      	mov	r8, r4
 8012fc0:	9407      	str	r4, [sp, #28]
 8012fc2:	9405      	str	r4, [sp, #20]
 8012fc4:	2322      	movs	r3, #34	; 0x22
 8012fc6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013120 <_strtod_l+0x598>
 8012fca:	f8c9 3000 	str.w	r3, [r9]
 8012fce:	f04f 0a00 	mov.w	sl, #0
 8012fd2:	9b07      	ldr	r3, [sp, #28]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f43f ae16 	beq.w	8012c06 <_strtod_l+0x7e>
 8012fda:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012fdc:	4648      	mov	r0, r9
 8012fde:	f001 fed9 	bl	8014d94 <_Bfree>
 8012fe2:	9905      	ldr	r1, [sp, #20]
 8012fe4:	4648      	mov	r0, r9
 8012fe6:	f001 fed5 	bl	8014d94 <_Bfree>
 8012fea:	4641      	mov	r1, r8
 8012fec:	4648      	mov	r0, r9
 8012fee:	f001 fed1 	bl	8014d94 <_Bfree>
 8012ff2:	9907      	ldr	r1, [sp, #28]
 8012ff4:	4648      	mov	r0, r9
 8012ff6:	f001 fecd 	bl	8014d94 <_Bfree>
 8012ffa:	4621      	mov	r1, r4
 8012ffc:	4648      	mov	r0, r9
 8012ffe:	f001 fec9 	bl	8014d94 <_Bfree>
 8013002:	e600      	b.n	8012c06 <_strtod_l+0x7e>
 8013004:	9a06      	ldr	r2, [sp, #24]
 8013006:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801300a:	4293      	cmp	r3, r2
 801300c:	dbba      	blt.n	8012f84 <_strtod_l+0x3fc>
 801300e:	4d42      	ldr	r5, [pc, #264]	; (8013118 <_strtod_l+0x590>)
 8013010:	f1c4 040f 	rsb	r4, r4, #15
 8013014:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013018:	4652      	mov	r2, sl
 801301a:	465b      	mov	r3, fp
 801301c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013020:	f7ed fb02 	bl	8000628 <__aeabi_dmul>
 8013024:	9b06      	ldr	r3, [sp, #24]
 8013026:	1b1c      	subs	r4, r3, r4
 8013028:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801302c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013030:	e78d      	b.n	8012f4e <_strtod_l+0x3c6>
 8013032:	f113 0f16 	cmn.w	r3, #22
 8013036:	dba5      	blt.n	8012f84 <_strtod_l+0x3fc>
 8013038:	4a37      	ldr	r2, [pc, #220]	; (8013118 <_strtod_l+0x590>)
 801303a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801303e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013042:	4650      	mov	r0, sl
 8013044:	4659      	mov	r1, fp
 8013046:	f7ed fc19 	bl	800087c <__aeabi_ddiv>
 801304a:	e782      	b.n	8012f52 <_strtod_l+0x3ca>
 801304c:	2300      	movs	r3, #0
 801304e:	4e33      	ldr	r6, [pc, #204]	; (801311c <_strtod_l+0x594>)
 8013050:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013054:	4650      	mov	r0, sl
 8013056:	4659      	mov	r1, fp
 8013058:	461d      	mov	r5, r3
 801305a:	f1b8 0f01 	cmp.w	r8, #1
 801305e:	dc21      	bgt.n	80130a4 <_strtod_l+0x51c>
 8013060:	b10b      	cbz	r3, 8013066 <_strtod_l+0x4de>
 8013062:	4682      	mov	sl, r0
 8013064:	468b      	mov	fp, r1
 8013066:	4b2d      	ldr	r3, [pc, #180]	; (801311c <_strtod_l+0x594>)
 8013068:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801306c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013070:	4652      	mov	r2, sl
 8013072:	465b      	mov	r3, fp
 8013074:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013078:	f7ed fad6 	bl	8000628 <__aeabi_dmul>
 801307c:	4b28      	ldr	r3, [pc, #160]	; (8013120 <_strtod_l+0x598>)
 801307e:	460a      	mov	r2, r1
 8013080:	400b      	ands	r3, r1
 8013082:	4928      	ldr	r1, [pc, #160]	; (8013124 <_strtod_l+0x59c>)
 8013084:	428b      	cmp	r3, r1
 8013086:	4682      	mov	sl, r0
 8013088:	d898      	bhi.n	8012fbc <_strtod_l+0x434>
 801308a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801308e:	428b      	cmp	r3, r1
 8013090:	bf86      	itte	hi
 8013092:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801312c <_strtod_l+0x5a4>
 8013096:	f04f 3aff 	movhi.w	sl, #4294967295
 801309a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801309e:	2300      	movs	r3, #0
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	e077      	b.n	8013194 <_strtod_l+0x60c>
 80130a4:	f018 0f01 	tst.w	r8, #1
 80130a8:	d006      	beq.n	80130b8 <_strtod_l+0x530>
 80130aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80130ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b2:	f7ed fab9 	bl	8000628 <__aeabi_dmul>
 80130b6:	2301      	movs	r3, #1
 80130b8:	3501      	adds	r5, #1
 80130ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80130be:	e7cc      	b.n	801305a <_strtod_l+0x4d2>
 80130c0:	d0ed      	beq.n	801309e <_strtod_l+0x516>
 80130c2:	f1c8 0800 	rsb	r8, r8, #0
 80130c6:	f018 020f 	ands.w	r2, r8, #15
 80130ca:	d00a      	beq.n	80130e2 <_strtod_l+0x55a>
 80130cc:	4b12      	ldr	r3, [pc, #72]	; (8013118 <_strtod_l+0x590>)
 80130ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130d2:	4650      	mov	r0, sl
 80130d4:	4659      	mov	r1, fp
 80130d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130da:	f7ed fbcf 	bl	800087c <__aeabi_ddiv>
 80130de:	4682      	mov	sl, r0
 80130e0:	468b      	mov	fp, r1
 80130e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80130e6:	d0da      	beq.n	801309e <_strtod_l+0x516>
 80130e8:	f1b8 0f1f 	cmp.w	r8, #31
 80130ec:	dd20      	ble.n	8013130 <_strtod_l+0x5a8>
 80130ee:	2400      	movs	r4, #0
 80130f0:	46a0      	mov	r8, r4
 80130f2:	9407      	str	r4, [sp, #28]
 80130f4:	9405      	str	r4, [sp, #20]
 80130f6:	2322      	movs	r3, #34	; 0x22
 80130f8:	f04f 0a00 	mov.w	sl, #0
 80130fc:	f04f 0b00 	mov.w	fp, #0
 8013100:	f8c9 3000 	str.w	r3, [r9]
 8013104:	e765      	b.n	8012fd2 <_strtod_l+0x44a>
 8013106:	bf00      	nop
 8013108:	08022461 	.word	0x08022461
 801310c:	080224e3 	.word	0x080224e3
 8013110:	08022469 	.word	0x08022469
 8013114:	080224a4 	.word	0x080224a4
 8013118:	08022588 	.word	0x08022588
 801311c:	08022560 	.word	0x08022560
 8013120:	7ff00000 	.word	0x7ff00000
 8013124:	7ca00000 	.word	0x7ca00000
 8013128:	fff80000 	.word	0xfff80000
 801312c:	7fefffff 	.word	0x7fefffff
 8013130:	f018 0310 	ands.w	r3, r8, #16
 8013134:	bf18      	it	ne
 8013136:	236a      	movne	r3, #106	; 0x6a
 8013138:	4da0      	ldr	r5, [pc, #640]	; (80133bc <_strtod_l+0x834>)
 801313a:	9304      	str	r3, [sp, #16]
 801313c:	4650      	mov	r0, sl
 801313e:	4659      	mov	r1, fp
 8013140:	2300      	movs	r3, #0
 8013142:	f1b8 0f00 	cmp.w	r8, #0
 8013146:	f300 810a 	bgt.w	801335e <_strtod_l+0x7d6>
 801314a:	b10b      	cbz	r3, 8013150 <_strtod_l+0x5c8>
 801314c:	4682      	mov	sl, r0
 801314e:	468b      	mov	fp, r1
 8013150:	9b04      	ldr	r3, [sp, #16]
 8013152:	b1bb      	cbz	r3, 8013184 <_strtod_l+0x5fc>
 8013154:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013158:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801315c:	2b00      	cmp	r3, #0
 801315e:	4659      	mov	r1, fp
 8013160:	dd10      	ble.n	8013184 <_strtod_l+0x5fc>
 8013162:	2b1f      	cmp	r3, #31
 8013164:	f340 8107 	ble.w	8013376 <_strtod_l+0x7ee>
 8013168:	2b34      	cmp	r3, #52	; 0x34
 801316a:	bfde      	ittt	le
 801316c:	3b20      	suble	r3, #32
 801316e:	f04f 32ff 	movle.w	r2, #4294967295
 8013172:	fa02 f303 	lslle.w	r3, r2, r3
 8013176:	f04f 0a00 	mov.w	sl, #0
 801317a:	bfcc      	ite	gt
 801317c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013180:	ea03 0b01 	andle.w	fp, r3, r1
 8013184:	2200      	movs	r2, #0
 8013186:	2300      	movs	r3, #0
 8013188:	4650      	mov	r0, sl
 801318a:	4659      	mov	r1, fp
 801318c:	f7ed fcb4 	bl	8000af8 <__aeabi_dcmpeq>
 8013190:	2800      	cmp	r0, #0
 8013192:	d1ac      	bne.n	80130ee <_strtod_l+0x566>
 8013194:	9b07      	ldr	r3, [sp, #28]
 8013196:	9300      	str	r3, [sp, #0]
 8013198:	9a05      	ldr	r2, [sp, #20]
 801319a:	9908      	ldr	r1, [sp, #32]
 801319c:	4623      	mov	r3, r4
 801319e:	4648      	mov	r0, r9
 80131a0:	f001 fe4a 	bl	8014e38 <__s2b>
 80131a4:	9007      	str	r0, [sp, #28]
 80131a6:	2800      	cmp	r0, #0
 80131a8:	f43f af08 	beq.w	8012fbc <_strtod_l+0x434>
 80131ac:	9a06      	ldr	r2, [sp, #24]
 80131ae:	9b06      	ldr	r3, [sp, #24]
 80131b0:	2a00      	cmp	r2, #0
 80131b2:	f1c3 0300 	rsb	r3, r3, #0
 80131b6:	bfa8      	it	ge
 80131b8:	2300      	movge	r3, #0
 80131ba:	930e      	str	r3, [sp, #56]	; 0x38
 80131bc:	2400      	movs	r4, #0
 80131be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80131c2:	9316      	str	r3, [sp, #88]	; 0x58
 80131c4:	46a0      	mov	r8, r4
 80131c6:	9b07      	ldr	r3, [sp, #28]
 80131c8:	4648      	mov	r0, r9
 80131ca:	6859      	ldr	r1, [r3, #4]
 80131cc:	f001 fdae 	bl	8014d2c <_Balloc>
 80131d0:	9005      	str	r0, [sp, #20]
 80131d2:	2800      	cmp	r0, #0
 80131d4:	f43f aef6 	beq.w	8012fc4 <_strtod_l+0x43c>
 80131d8:	9b07      	ldr	r3, [sp, #28]
 80131da:	691a      	ldr	r2, [r3, #16]
 80131dc:	3202      	adds	r2, #2
 80131de:	f103 010c 	add.w	r1, r3, #12
 80131e2:	0092      	lsls	r2, r2, #2
 80131e4:	300c      	adds	r0, #12
 80131e6:	f7fe ff81 	bl	80120ec <memcpy>
 80131ea:	aa1e      	add	r2, sp, #120	; 0x78
 80131ec:	a91d      	add	r1, sp, #116	; 0x74
 80131ee:	ec4b ab10 	vmov	d0, sl, fp
 80131f2:	4648      	mov	r0, r9
 80131f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80131f8:	f002 f8da 	bl	80153b0 <__d2b>
 80131fc:	901c      	str	r0, [sp, #112]	; 0x70
 80131fe:	2800      	cmp	r0, #0
 8013200:	f43f aee0 	beq.w	8012fc4 <_strtod_l+0x43c>
 8013204:	2101      	movs	r1, #1
 8013206:	4648      	mov	r0, r9
 8013208:	f001 fea2 	bl	8014f50 <__i2b>
 801320c:	4680      	mov	r8, r0
 801320e:	2800      	cmp	r0, #0
 8013210:	f43f aed8 	beq.w	8012fc4 <_strtod_l+0x43c>
 8013214:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013216:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013218:	2e00      	cmp	r6, #0
 801321a:	bfab      	itete	ge
 801321c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801321e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013220:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013222:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013224:	bfac      	ite	ge
 8013226:	18f7      	addge	r7, r6, r3
 8013228:	1b9d      	sublt	r5, r3, r6
 801322a:	9b04      	ldr	r3, [sp, #16]
 801322c:	1af6      	subs	r6, r6, r3
 801322e:	4416      	add	r6, r2
 8013230:	4b63      	ldr	r3, [pc, #396]	; (80133c0 <_strtod_l+0x838>)
 8013232:	3e01      	subs	r6, #1
 8013234:	429e      	cmp	r6, r3
 8013236:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801323a:	f280 80af 	bge.w	801339c <_strtod_l+0x814>
 801323e:	1b9b      	subs	r3, r3, r6
 8013240:	2b1f      	cmp	r3, #31
 8013242:	eba2 0203 	sub.w	r2, r2, r3
 8013246:	f04f 0101 	mov.w	r1, #1
 801324a:	f300 809b 	bgt.w	8013384 <_strtod_l+0x7fc>
 801324e:	fa01 f303 	lsl.w	r3, r1, r3
 8013252:	930f      	str	r3, [sp, #60]	; 0x3c
 8013254:	2300      	movs	r3, #0
 8013256:	930a      	str	r3, [sp, #40]	; 0x28
 8013258:	18be      	adds	r6, r7, r2
 801325a:	9b04      	ldr	r3, [sp, #16]
 801325c:	42b7      	cmp	r7, r6
 801325e:	4415      	add	r5, r2
 8013260:	441d      	add	r5, r3
 8013262:	463b      	mov	r3, r7
 8013264:	bfa8      	it	ge
 8013266:	4633      	movge	r3, r6
 8013268:	42ab      	cmp	r3, r5
 801326a:	bfa8      	it	ge
 801326c:	462b      	movge	r3, r5
 801326e:	2b00      	cmp	r3, #0
 8013270:	bfc2      	ittt	gt
 8013272:	1af6      	subgt	r6, r6, r3
 8013274:	1aed      	subgt	r5, r5, r3
 8013276:	1aff      	subgt	r7, r7, r3
 8013278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801327a:	b1bb      	cbz	r3, 80132ac <_strtod_l+0x724>
 801327c:	4641      	mov	r1, r8
 801327e:	461a      	mov	r2, r3
 8013280:	4648      	mov	r0, r9
 8013282:	f001 ff05 	bl	8015090 <__pow5mult>
 8013286:	4680      	mov	r8, r0
 8013288:	2800      	cmp	r0, #0
 801328a:	f43f ae9b 	beq.w	8012fc4 <_strtod_l+0x43c>
 801328e:	4601      	mov	r1, r0
 8013290:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013292:	4648      	mov	r0, r9
 8013294:	f001 fe65 	bl	8014f62 <__multiply>
 8013298:	900c      	str	r0, [sp, #48]	; 0x30
 801329a:	2800      	cmp	r0, #0
 801329c:	f43f ae92 	beq.w	8012fc4 <_strtod_l+0x43c>
 80132a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80132a2:	4648      	mov	r0, r9
 80132a4:	f001 fd76 	bl	8014d94 <_Bfree>
 80132a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132aa:	931c      	str	r3, [sp, #112]	; 0x70
 80132ac:	2e00      	cmp	r6, #0
 80132ae:	dc7a      	bgt.n	80133a6 <_strtod_l+0x81e>
 80132b0:	9b06      	ldr	r3, [sp, #24]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	dd08      	ble.n	80132c8 <_strtod_l+0x740>
 80132b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80132b8:	9905      	ldr	r1, [sp, #20]
 80132ba:	4648      	mov	r0, r9
 80132bc:	f001 fee8 	bl	8015090 <__pow5mult>
 80132c0:	9005      	str	r0, [sp, #20]
 80132c2:	2800      	cmp	r0, #0
 80132c4:	f43f ae7e 	beq.w	8012fc4 <_strtod_l+0x43c>
 80132c8:	2d00      	cmp	r5, #0
 80132ca:	dd08      	ble.n	80132de <_strtod_l+0x756>
 80132cc:	462a      	mov	r2, r5
 80132ce:	9905      	ldr	r1, [sp, #20]
 80132d0:	4648      	mov	r0, r9
 80132d2:	f001 ff2b 	bl	801512c <__lshift>
 80132d6:	9005      	str	r0, [sp, #20]
 80132d8:	2800      	cmp	r0, #0
 80132da:	f43f ae73 	beq.w	8012fc4 <_strtod_l+0x43c>
 80132de:	2f00      	cmp	r7, #0
 80132e0:	dd08      	ble.n	80132f4 <_strtod_l+0x76c>
 80132e2:	4641      	mov	r1, r8
 80132e4:	463a      	mov	r2, r7
 80132e6:	4648      	mov	r0, r9
 80132e8:	f001 ff20 	bl	801512c <__lshift>
 80132ec:	4680      	mov	r8, r0
 80132ee:	2800      	cmp	r0, #0
 80132f0:	f43f ae68 	beq.w	8012fc4 <_strtod_l+0x43c>
 80132f4:	9a05      	ldr	r2, [sp, #20]
 80132f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80132f8:	4648      	mov	r0, r9
 80132fa:	f001 ff85 	bl	8015208 <__mdiff>
 80132fe:	4604      	mov	r4, r0
 8013300:	2800      	cmp	r0, #0
 8013302:	f43f ae5f 	beq.w	8012fc4 <_strtod_l+0x43c>
 8013306:	68c3      	ldr	r3, [r0, #12]
 8013308:	930c      	str	r3, [sp, #48]	; 0x30
 801330a:	2300      	movs	r3, #0
 801330c:	60c3      	str	r3, [r0, #12]
 801330e:	4641      	mov	r1, r8
 8013310:	f001 ff60 	bl	80151d4 <__mcmp>
 8013314:	2800      	cmp	r0, #0
 8013316:	da55      	bge.n	80133c4 <_strtod_l+0x83c>
 8013318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801331a:	b9e3      	cbnz	r3, 8013356 <_strtod_l+0x7ce>
 801331c:	f1ba 0f00 	cmp.w	sl, #0
 8013320:	d119      	bne.n	8013356 <_strtod_l+0x7ce>
 8013322:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013326:	b9b3      	cbnz	r3, 8013356 <_strtod_l+0x7ce>
 8013328:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801332c:	0d1b      	lsrs	r3, r3, #20
 801332e:	051b      	lsls	r3, r3, #20
 8013330:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013334:	d90f      	bls.n	8013356 <_strtod_l+0x7ce>
 8013336:	6963      	ldr	r3, [r4, #20]
 8013338:	b913      	cbnz	r3, 8013340 <_strtod_l+0x7b8>
 801333a:	6923      	ldr	r3, [r4, #16]
 801333c:	2b01      	cmp	r3, #1
 801333e:	dd0a      	ble.n	8013356 <_strtod_l+0x7ce>
 8013340:	4621      	mov	r1, r4
 8013342:	2201      	movs	r2, #1
 8013344:	4648      	mov	r0, r9
 8013346:	f001 fef1 	bl	801512c <__lshift>
 801334a:	4641      	mov	r1, r8
 801334c:	4604      	mov	r4, r0
 801334e:	f001 ff41 	bl	80151d4 <__mcmp>
 8013352:	2800      	cmp	r0, #0
 8013354:	dc67      	bgt.n	8013426 <_strtod_l+0x89e>
 8013356:	9b04      	ldr	r3, [sp, #16]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d171      	bne.n	8013440 <_strtod_l+0x8b8>
 801335c:	e63d      	b.n	8012fda <_strtod_l+0x452>
 801335e:	f018 0f01 	tst.w	r8, #1
 8013362:	d004      	beq.n	801336e <_strtod_l+0x7e6>
 8013364:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013368:	f7ed f95e 	bl	8000628 <__aeabi_dmul>
 801336c:	2301      	movs	r3, #1
 801336e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013372:	3508      	adds	r5, #8
 8013374:	e6e5      	b.n	8013142 <_strtod_l+0x5ba>
 8013376:	f04f 32ff 	mov.w	r2, #4294967295
 801337a:	fa02 f303 	lsl.w	r3, r2, r3
 801337e:	ea03 0a0a 	and.w	sl, r3, sl
 8013382:	e6ff      	b.n	8013184 <_strtod_l+0x5fc>
 8013384:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013388:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801338c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013390:	36e2      	adds	r6, #226	; 0xe2
 8013392:	fa01 f306 	lsl.w	r3, r1, r6
 8013396:	930a      	str	r3, [sp, #40]	; 0x28
 8013398:	910f      	str	r1, [sp, #60]	; 0x3c
 801339a:	e75d      	b.n	8013258 <_strtod_l+0x6d0>
 801339c:	2300      	movs	r3, #0
 801339e:	930a      	str	r3, [sp, #40]	; 0x28
 80133a0:	2301      	movs	r3, #1
 80133a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80133a4:	e758      	b.n	8013258 <_strtod_l+0x6d0>
 80133a6:	4632      	mov	r2, r6
 80133a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80133aa:	4648      	mov	r0, r9
 80133ac:	f001 febe 	bl	801512c <__lshift>
 80133b0:	901c      	str	r0, [sp, #112]	; 0x70
 80133b2:	2800      	cmp	r0, #0
 80133b4:	f47f af7c 	bne.w	80132b0 <_strtod_l+0x728>
 80133b8:	e604      	b.n	8012fc4 <_strtod_l+0x43c>
 80133ba:	bf00      	nop
 80133bc:	080224b8 	.word	0x080224b8
 80133c0:	fffffc02 	.word	0xfffffc02
 80133c4:	465d      	mov	r5, fp
 80133c6:	f040 8086 	bne.w	80134d6 <_strtod_l+0x94e>
 80133ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80133d0:	b32a      	cbz	r2, 801341e <_strtod_l+0x896>
 80133d2:	4aaf      	ldr	r2, [pc, #700]	; (8013690 <_strtod_l+0xb08>)
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d153      	bne.n	8013480 <_strtod_l+0x8f8>
 80133d8:	9b04      	ldr	r3, [sp, #16]
 80133da:	4650      	mov	r0, sl
 80133dc:	b1d3      	cbz	r3, 8013414 <_strtod_l+0x88c>
 80133de:	4aad      	ldr	r2, [pc, #692]	; (8013694 <_strtod_l+0xb0c>)
 80133e0:	402a      	ands	r2, r5
 80133e2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80133e6:	f04f 31ff 	mov.w	r1, #4294967295
 80133ea:	d816      	bhi.n	801341a <_strtod_l+0x892>
 80133ec:	0d12      	lsrs	r2, r2, #20
 80133ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80133f2:	fa01 f303 	lsl.w	r3, r1, r3
 80133f6:	4298      	cmp	r0, r3
 80133f8:	d142      	bne.n	8013480 <_strtod_l+0x8f8>
 80133fa:	4ba7      	ldr	r3, [pc, #668]	; (8013698 <_strtod_l+0xb10>)
 80133fc:	429d      	cmp	r5, r3
 80133fe:	d102      	bne.n	8013406 <_strtod_l+0x87e>
 8013400:	3001      	adds	r0, #1
 8013402:	f43f addf 	beq.w	8012fc4 <_strtod_l+0x43c>
 8013406:	4ba3      	ldr	r3, [pc, #652]	; (8013694 <_strtod_l+0xb0c>)
 8013408:	402b      	ands	r3, r5
 801340a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801340e:	f04f 0a00 	mov.w	sl, #0
 8013412:	e7a0      	b.n	8013356 <_strtod_l+0x7ce>
 8013414:	f04f 33ff 	mov.w	r3, #4294967295
 8013418:	e7ed      	b.n	80133f6 <_strtod_l+0x86e>
 801341a:	460b      	mov	r3, r1
 801341c:	e7eb      	b.n	80133f6 <_strtod_l+0x86e>
 801341e:	bb7b      	cbnz	r3, 8013480 <_strtod_l+0x8f8>
 8013420:	f1ba 0f00 	cmp.w	sl, #0
 8013424:	d12c      	bne.n	8013480 <_strtod_l+0x8f8>
 8013426:	9904      	ldr	r1, [sp, #16]
 8013428:	4a9a      	ldr	r2, [pc, #616]	; (8013694 <_strtod_l+0xb0c>)
 801342a:	465b      	mov	r3, fp
 801342c:	b1f1      	cbz	r1, 801346c <_strtod_l+0x8e4>
 801342e:	ea02 010b 	and.w	r1, r2, fp
 8013432:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013436:	dc19      	bgt.n	801346c <_strtod_l+0x8e4>
 8013438:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801343c:	f77f ae5b 	ble.w	80130f6 <_strtod_l+0x56e>
 8013440:	4a96      	ldr	r2, [pc, #600]	; (801369c <_strtod_l+0xb14>)
 8013442:	2300      	movs	r3, #0
 8013444:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013448:	4650      	mov	r0, sl
 801344a:	4659      	mov	r1, fp
 801344c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013450:	f7ed f8ea 	bl	8000628 <__aeabi_dmul>
 8013454:	4682      	mov	sl, r0
 8013456:	468b      	mov	fp, r1
 8013458:	2900      	cmp	r1, #0
 801345a:	f47f adbe 	bne.w	8012fda <_strtod_l+0x452>
 801345e:	2800      	cmp	r0, #0
 8013460:	f47f adbb 	bne.w	8012fda <_strtod_l+0x452>
 8013464:	2322      	movs	r3, #34	; 0x22
 8013466:	f8c9 3000 	str.w	r3, [r9]
 801346a:	e5b6      	b.n	8012fda <_strtod_l+0x452>
 801346c:	4013      	ands	r3, r2
 801346e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013472:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013476:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801347a:	f04f 3aff 	mov.w	sl, #4294967295
 801347e:	e76a      	b.n	8013356 <_strtod_l+0x7ce>
 8013480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013482:	b193      	cbz	r3, 80134aa <_strtod_l+0x922>
 8013484:	422b      	tst	r3, r5
 8013486:	f43f af66 	beq.w	8013356 <_strtod_l+0x7ce>
 801348a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801348c:	9a04      	ldr	r2, [sp, #16]
 801348e:	4650      	mov	r0, sl
 8013490:	4659      	mov	r1, fp
 8013492:	b173      	cbz	r3, 80134b2 <_strtod_l+0x92a>
 8013494:	f7ff fb5a 	bl	8012b4c <sulp>
 8013498:	4602      	mov	r2, r0
 801349a:	460b      	mov	r3, r1
 801349c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134a0:	f7ec ff0c 	bl	80002bc <__adddf3>
 80134a4:	4682      	mov	sl, r0
 80134a6:	468b      	mov	fp, r1
 80134a8:	e755      	b.n	8013356 <_strtod_l+0x7ce>
 80134aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134ac:	ea13 0f0a 	tst.w	r3, sl
 80134b0:	e7e9      	b.n	8013486 <_strtod_l+0x8fe>
 80134b2:	f7ff fb4b 	bl	8012b4c <sulp>
 80134b6:	4602      	mov	r2, r0
 80134b8:	460b      	mov	r3, r1
 80134ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134be:	f7ec fefb 	bl	80002b8 <__aeabi_dsub>
 80134c2:	2200      	movs	r2, #0
 80134c4:	2300      	movs	r3, #0
 80134c6:	4682      	mov	sl, r0
 80134c8:	468b      	mov	fp, r1
 80134ca:	f7ed fb15 	bl	8000af8 <__aeabi_dcmpeq>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	f47f ae11 	bne.w	80130f6 <_strtod_l+0x56e>
 80134d4:	e73f      	b.n	8013356 <_strtod_l+0x7ce>
 80134d6:	4641      	mov	r1, r8
 80134d8:	4620      	mov	r0, r4
 80134da:	f001 ffb8 	bl	801544e <__ratio>
 80134de:	ec57 6b10 	vmov	r6, r7, d0
 80134e2:	2200      	movs	r2, #0
 80134e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80134e8:	ee10 0a10 	vmov	r0, s0
 80134ec:	4639      	mov	r1, r7
 80134ee:	f7ed fb17 	bl	8000b20 <__aeabi_dcmple>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d077      	beq.n	80135e6 <_strtod_l+0xa5e>
 80134f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d04a      	beq.n	8013592 <_strtod_l+0xa0a>
 80134fc:	4b68      	ldr	r3, [pc, #416]	; (80136a0 <_strtod_l+0xb18>)
 80134fe:	2200      	movs	r2, #0
 8013500:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013504:	4f66      	ldr	r7, [pc, #408]	; (80136a0 <_strtod_l+0xb18>)
 8013506:	2600      	movs	r6, #0
 8013508:	4b62      	ldr	r3, [pc, #392]	; (8013694 <_strtod_l+0xb0c>)
 801350a:	402b      	ands	r3, r5
 801350c:	930f      	str	r3, [sp, #60]	; 0x3c
 801350e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013510:	4b64      	ldr	r3, [pc, #400]	; (80136a4 <_strtod_l+0xb1c>)
 8013512:	429a      	cmp	r2, r3
 8013514:	f040 80ce 	bne.w	80136b4 <_strtod_l+0xb2c>
 8013518:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801351c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013520:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013524:	ec4b ab10 	vmov	d0, sl, fp
 8013528:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801352c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013530:	f001 fec8 	bl	80152c4 <__ulp>
 8013534:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013538:	ec53 2b10 	vmov	r2, r3, d0
 801353c:	f7ed f874 	bl	8000628 <__aeabi_dmul>
 8013540:	4652      	mov	r2, sl
 8013542:	465b      	mov	r3, fp
 8013544:	f7ec feba 	bl	80002bc <__adddf3>
 8013548:	460b      	mov	r3, r1
 801354a:	4952      	ldr	r1, [pc, #328]	; (8013694 <_strtod_l+0xb0c>)
 801354c:	4a56      	ldr	r2, [pc, #344]	; (80136a8 <_strtod_l+0xb20>)
 801354e:	4019      	ands	r1, r3
 8013550:	4291      	cmp	r1, r2
 8013552:	4682      	mov	sl, r0
 8013554:	d95b      	bls.n	801360e <_strtod_l+0xa86>
 8013556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013558:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801355c:	4293      	cmp	r3, r2
 801355e:	d103      	bne.n	8013568 <_strtod_l+0x9e0>
 8013560:	9b08      	ldr	r3, [sp, #32]
 8013562:	3301      	adds	r3, #1
 8013564:	f43f ad2e 	beq.w	8012fc4 <_strtod_l+0x43c>
 8013568:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013698 <_strtod_l+0xb10>
 801356c:	f04f 3aff 	mov.w	sl, #4294967295
 8013570:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013572:	4648      	mov	r0, r9
 8013574:	f001 fc0e 	bl	8014d94 <_Bfree>
 8013578:	9905      	ldr	r1, [sp, #20]
 801357a:	4648      	mov	r0, r9
 801357c:	f001 fc0a 	bl	8014d94 <_Bfree>
 8013580:	4641      	mov	r1, r8
 8013582:	4648      	mov	r0, r9
 8013584:	f001 fc06 	bl	8014d94 <_Bfree>
 8013588:	4621      	mov	r1, r4
 801358a:	4648      	mov	r0, r9
 801358c:	f001 fc02 	bl	8014d94 <_Bfree>
 8013590:	e619      	b.n	80131c6 <_strtod_l+0x63e>
 8013592:	f1ba 0f00 	cmp.w	sl, #0
 8013596:	d11a      	bne.n	80135ce <_strtod_l+0xa46>
 8013598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801359c:	b9eb      	cbnz	r3, 80135da <_strtod_l+0xa52>
 801359e:	2200      	movs	r2, #0
 80135a0:	4b3f      	ldr	r3, [pc, #252]	; (80136a0 <_strtod_l+0xb18>)
 80135a2:	4630      	mov	r0, r6
 80135a4:	4639      	mov	r1, r7
 80135a6:	f7ed fab1 	bl	8000b0c <__aeabi_dcmplt>
 80135aa:	b9c8      	cbnz	r0, 80135e0 <_strtod_l+0xa58>
 80135ac:	4630      	mov	r0, r6
 80135ae:	4639      	mov	r1, r7
 80135b0:	2200      	movs	r2, #0
 80135b2:	4b3e      	ldr	r3, [pc, #248]	; (80136ac <_strtod_l+0xb24>)
 80135b4:	f7ed f838 	bl	8000628 <__aeabi_dmul>
 80135b8:	4606      	mov	r6, r0
 80135ba:	460f      	mov	r7, r1
 80135bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80135c0:	9618      	str	r6, [sp, #96]	; 0x60
 80135c2:	9319      	str	r3, [sp, #100]	; 0x64
 80135c4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80135c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80135cc:	e79c      	b.n	8013508 <_strtod_l+0x980>
 80135ce:	f1ba 0f01 	cmp.w	sl, #1
 80135d2:	d102      	bne.n	80135da <_strtod_l+0xa52>
 80135d4:	2d00      	cmp	r5, #0
 80135d6:	f43f ad8e 	beq.w	80130f6 <_strtod_l+0x56e>
 80135da:	2200      	movs	r2, #0
 80135dc:	4b34      	ldr	r3, [pc, #208]	; (80136b0 <_strtod_l+0xb28>)
 80135de:	e78f      	b.n	8013500 <_strtod_l+0x978>
 80135e0:	2600      	movs	r6, #0
 80135e2:	4f32      	ldr	r7, [pc, #200]	; (80136ac <_strtod_l+0xb24>)
 80135e4:	e7ea      	b.n	80135bc <_strtod_l+0xa34>
 80135e6:	4b31      	ldr	r3, [pc, #196]	; (80136ac <_strtod_l+0xb24>)
 80135e8:	4630      	mov	r0, r6
 80135ea:	4639      	mov	r1, r7
 80135ec:	2200      	movs	r2, #0
 80135ee:	f7ed f81b 	bl	8000628 <__aeabi_dmul>
 80135f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135f4:	4606      	mov	r6, r0
 80135f6:	460f      	mov	r7, r1
 80135f8:	b933      	cbnz	r3, 8013608 <_strtod_l+0xa80>
 80135fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135fe:	9010      	str	r0, [sp, #64]	; 0x40
 8013600:	9311      	str	r3, [sp, #68]	; 0x44
 8013602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013606:	e7df      	b.n	80135c8 <_strtod_l+0xa40>
 8013608:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801360c:	e7f9      	b.n	8013602 <_strtod_l+0xa7a>
 801360e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013612:	9b04      	ldr	r3, [sp, #16]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d1ab      	bne.n	8013570 <_strtod_l+0x9e8>
 8013618:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801361c:	0d1b      	lsrs	r3, r3, #20
 801361e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013620:	051b      	lsls	r3, r3, #20
 8013622:	429a      	cmp	r2, r3
 8013624:	465d      	mov	r5, fp
 8013626:	d1a3      	bne.n	8013570 <_strtod_l+0x9e8>
 8013628:	4639      	mov	r1, r7
 801362a:	4630      	mov	r0, r6
 801362c:	f7ed faac 	bl	8000b88 <__aeabi_d2iz>
 8013630:	f7ec ff90 	bl	8000554 <__aeabi_i2d>
 8013634:	460b      	mov	r3, r1
 8013636:	4602      	mov	r2, r0
 8013638:	4639      	mov	r1, r7
 801363a:	4630      	mov	r0, r6
 801363c:	f7ec fe3c 	bl	80002b8 <__aeabi_dsub>
 8013640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013642:	4606      	mov	r6, r0
 8013644:	460f      	mov	r7, r1
 8013646:	b933      	cbnz	r3, 8013656 <_strtod_l+0xace>
 8013648:	f1ba 0f00 	cmp.w	sl, #0
 801364c:	d103      	bne.n	8013656 <_strtod_l+0xace>
 801364e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013652:	2d00      	cmp	r5, #0
 8013654:	d06d      	beq.n	8013732 <_strtod_l+0xbaa>
 8013656:	a30a      	add	r3, pc, #40	; (adr r3, 8013680 <_strtod_l+0xaf8>)
 8013658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365c:	4630      	mov	r0, r6
 801365e:	4639      	mov	r1, r7
 8013660:	f7ed fa54 	bl	8000b0c <__aeabi_dcmplt>
 8013664:	2800      	cmp	r0, #0
 8013666:	f47f acb8 	bne.w	8012fda <_strtod_l+0x452>
 801366a:	a307      	add	r3, pc, #28	; (adr r3, 8013688 <_strtod_l+0xb00>)
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	4630      	mov	r0, r6
 8013672:	4639      	mov	r1, r7
 8013674:	f7ed fa68 	bl	8000b48 <__aeabi_dcmpgt>
 8013678:	2800      	cmp	r0, #0
 801367a:	f43f af79 	beq.w	8013570 <_strtod_l+0x9e8>
 801367e:	e4ac      	b.n	8012fda <_strtod_l+0x452>
 8013680:	94a03595 	.word	0x94a03595
 8013684:	3fdfffff 	.word	0x3fdfffff
 8013688:	35afe535 	.word	0x35afe535
 801368c:	3fe00000 	.word	0x3fe00000
 8013690:	000fffff 	.word	0x000fffff
 8013694:	7ff00000 	.word	0x7ff00000
 8013698:	7fefffff 	.word	0x7fefffff
 801369c:	39500000 	.word	0x39500000
 80136a0:	3ff00000 	.word	0x3ff00000
 80136a4:	7fe00000 	.word	0x7fe00000
 80136a8:	7c9fffff 	.word	0x7c9fffff
 80136ac:	3fe00000 	.word	0x3fe00000
 80136b0:	bff00000 	.word	0xbff00000
 80136b4:	9b04      	ldr	r3, [sp, #16]
 80136b6:	b333      	cbz	r3, 8013706 <_strtod_l+0xb7e>
 80136b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80136be:	d822      	bhi.n	8013706 <_strtod_l+0xb7e>
 80136c0:	a327      	add	r3, pc, #156	; (adr r3, 8013760 <_strtod_l+0xbd8>)
 80136c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c6:	4630      	mov	r0, r6
 80136c8:	4639      	mov	r1, r7
 80136ca:	f7ed fa29 	bl	8000b20 <__aeabi_dcmple>
 80136ce:	b1a0      	cbz	r0, 80136fa <_strtod_l+0xb72>
 80136d0:	4639      	mov	r1, r7
 80136d2:	4630      	mov	r0, r6
 80136d4:	f7ed fa80 	bl	8000bd8 <__aeabi_d2uiz>
 80136d8:	2800      	cmp	r0, #0
 80136da:	bf08      	it	eq
 80136dc:	2001      	moveq	r0, #1
 80136de:	f7ec ff29 	bl	8000534 <__aeabi_ui2d>
 80136e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136e4:	4606      	mov	r6, r0
 80136e6:	460f      	mov	r7, r1
 80136e8:	bb03      	cbnz	r3, 801372c <_strtod_l+0xba4>
 80136ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136ee:	9012      	str	r0, [sp, #72]	; 0x48
 80136f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80136f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80136f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80136fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80136fe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013702:	1a9b      	subs	r3, r3, r2
 8013704:	930b      	str	r3, [sp, #44]	; 0x2c
 8013706:	ed9d 0b08 	vldr	d0, [sp, #32]
 801370a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801370e:	f001 fdd9 	bl	80152c4 <__ulp>
 8013712:	4650      	mov	r0, sl
 8013714:	ec53 2b10 	vmov	r2, r3, d0
 8013718:	4659      	mov	r1, fp
 801371a:	f7ec ff85 	bl	8000628 <__aeabi_dmul>
 801371e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013722:	f7ec fdcb 	bl	80002bc <__adddf3>
 8013726:	4682      	mov	sl, r0
 8013728:	468b      	mov	fp, r1
 801372a:	e772      	b.n	8013612 <_strtod_l+0xa8a>
 801372c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013730:	e7df      	b.n	80136f2 <_strtod_l+0xb6a>
 8013732:	a30d      	add	r3, pc, #52	; (adr r3, 8013768 <_strtod_l+0xbe0>)
 8013734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013738:	f7ed f9e8 	bl	8000b0c <__aeabi_dcmplt>
 801373c:	e79c      	b.n	8013678 <_strtod_l+0xaf0>
 801373e:	2300      	movs	r3, #0
 8013740:	930d      	str	r3, [sp, #52]	; 0x34
 8013742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013746:	6013      	str	r3, [r2, #0]
 8013748:	f7ff ba61 	b.w	8012c0e <_strtod_l+0x86>
 801374c:	2b65      	cmp	r3, #101	; 0x65
 801374e:	f04f 0200 	mov.w	r2, #0
 8013752:	f43f ab4e 	beq.w	8012df2 <_strtod_l+0x26a>
 8013756:	2101      	movs	r1, #1
 8013758:	4614      	mov	r4, r2
 801375a:	9104      	str	r1, [sp, #16]
 801375c:	f7ff bacb 	b.w	8012cf6 <_strtod_l+0x16e>
 8013760:	ffc00000 	.word	0xffc00000
 8013764:	41dfffff 	.word	0x41dfffff
 8013768:	94a03595 	.word	0x94a03595
 801376c:	3fcfffff 	.word	0x3fcfffff

08013770 <strtof>:
 8013770:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8013774:	4e24      	ldr	r6, [pc, #144]	; (8013808 <strtof+0x98>)
 8013776:	4a25      	ldr	r2, [pc, #148]	; (801380c <strtof+0x9c>)
 8013778:	6834      	ldr	r4, [r6, #0]
 801377a:	6a23      	ldr	r3, [r4, #32]
 801377c:	ed2d 8b02 	vpush	{d8}
 8013780:	2b00      	cmp	r3, #0
 8013782:	bf08      	it	eq
 8013784:	4613      	moveq	r3, r2
 8013786:	460a      	mov	r2, r1
 8013788:	4601      	mov	r1, r0
 801378a:	4620      	mov	r0, r4
 801378c:	f7ff f9fc 	bl	8012b88 <_strtod_l>
 8013790:	ec55 4b10 	vmov	r4, r5, d0
 8013794:	ee10 2a10 	vmov	r2, s0
 8013798:	462b      	mov	r3, r5
 801379a:	ee10 0a10 	vmov	r0, s0
 801379e:	4629      	mov	r1, r5
 80137a0:	f7ed f9dc 	bl	8000b5c <__aeabi_dcmpun>
 80137a4:	b130      	cbz	r0, 80137b4 <strtof+0x44>
 80137a6:	ecbd 8b02 	vpop	{d8}
 80137aa:	2000      	movs	r0, #0
 80137ac:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 80137b0:	f002 b81c 	b.w	80157ec <nanf>
 80137b4:	4620      	mov	r0, r4
 80137b6:	4629      	mov	r1, r5
 80137b8:	f7ed fa2e 	bl	8000c18 <__aeabi_d2f>
 80137bc:	ee08 0a10 	vmov	s16, r0
 80137c0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013810 <strtof+0xa0>
 80137c4:	eeb0 7ac8 	vabs.f32	s14, s16
 80137c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80137cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d0:	dd14      	ble.n	80137fc <strtof+0x8c>
 80137d2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 80137d6:	f04f 32ff 	mov.w	r2, #4294967295
 80137da:	4b0e      	ldr	r3, [pc, #56]	; (8013814 <strtof+0xa4>)
 80137dc:	4620      	mov	r0, r4
 80137de:	4649      	mov	r1, r9
 80137e0:	f7ed f9bc 	bl	8000b5c <__aeabi_dcmpun>
 80137e4:	b938      	cbnz	r0, 80137f6 <strtof+0x86>
 80137e6:	f04f 32ff 	mov.w	r2, #4294967295
 80137ea:	4b0a      	ldr	r3, [pc, #40]	; (8013814 <strtof+0xa4>)
 80137ec:	4620      	mov	r0, r4
 80137ee:	4649      	mov	r1, r9
 80137f0:	f7ed f996 	bl	8000b20 <__aeabi_dcmple>
 80137f4:	b110      	cbz	r0, 80137fc <strtof+0x8c>
 80137f6:	6833      	ldr	r3, [r6, #0]
 80137f8:	2222      	movs	r2, #34	; 0x22
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	eeb0 0a48 	vmov.f32	s0, s16
 8013800:	ecbd 8b02 	vpop	{d8}
 8013804:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013808:	20000064 	.word	0x20000064
 801380c:	200000c8 	.word	0x200000c8
 8013810:	7f7fffff 	.word	0x7f7fffff
 8013814:	7fefffff 	.word	0x7fefffff

08013818 <__strtok_r>:
 8013818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801381a:	b918      	cbnz	r0, 8013824 <__strtok_r+0xc>
 801381c:	6810      	ldr	r0, [r2, #0]
 801381e:	b908      	cbnz	r0, 8013824 <__strtok_r+0xc>
 8013820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013822:	4620      	mov	r0, r4
 8013824:	4604      	mov	r4, r0
 8013826:	460f      	mov	r7, r1
 8013828:	f814 5b01 	ldrb.w	r5, [r4], #1
 801382c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013830:	b91e      	cbnz	r6, 801383a <__strtok_r+0x22>
 8013832:	b96d      	cbnz	r5, 8013850 <__strtok_r+0x38>
 8013834:	6015      	str	r5, [r2, #0]
 8013836:	4628      	mov	r0, r5
 8013838:	e7f2      	b.n	8013820 <__strtok_r+0x8>
 801383a:	42b5      	cmp	r5, r6
 801383c:	d1f6      	bne.n	801382c <__strtok_r+0x14>
 801383e:	2b00      	cmp	r3, #0
 8013840:	d1ef      	bne.n	8013822 <__strtok_r+0xa>
 8013842:	6014      	str	r4, [r2, #0]
 8013844:	7003      	strb	r3, [r0, #0]
 8013846:	e7eb      	b.n	8013820 <__strtok_r+0x8>
 8013848:	462b      	mov	r3, r5
 801384a:	e00d      	b.n	8013868 <__strtok_r+0x50>
 801384c:	b926      	cbnz	r6, 8013858 <__strtok_r+0x40>
 801384e:	461c      	mov	r4, r3
 8013850:	4623      	mov	r3, r4
 8013852:	460f      	mov	r7, r1
 8013854:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013858:	f817 6b01 	ldrb.w	r6, [r7], #1
 801385c:	42b5      	cmp	r5, r6
 801385e:	d1f5      	bne.n	801384c <__strtok_r+0x34>
 8013860:	2d00      	cmp	r5, #0
 8013862:	d0f1      	beq.n	8013848 <__strtok_r+0x30>
 8013864:	2100      	movs	r1, #0
 8013866:	7021      	strb	r1, [r4, #0]
 8013868:	6013      	str	r3, [r2, #0]
 801386a:	e7d9      	b.n	8013820 <__strtok_r+0x8>

0801386c <strtok_r>:
 801386c:	2301      	movs	r3, #1
 801386e:	f7ff bfd3 	b.w	8013818 <__strtok_r>

08013872 <_strtoul_l.isra.0>:
 8013872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013876:	4680      	mov	r8, r0
 8013878:	4689      	mov	r9, r1
 801387a:	4692      	mov	sl, r2
 801387c:	461e      	mov	r6, r3
 801387e:	460f      	mov	r7, r1
 8013880:	463d      	mov	r5, r7
 8013882:	9808      	ldr	r0, [sp, #32]
 8013884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013888:	f001 fa28 	bl	8014cdc <__locale_ctype_ptr_l>
 801388c:	4420      	add	r0, r4
 801388e:	7843      	ldrb	r3, [r0, #1]
 8013890:	f013 0308 	ands.w	r3, r3, #8
 8013894:	d130      	bne.n	80138f8 <_strtoul_l.isra.0+0x86>
 8013896:	2c2d      	cmp	r4, #45	; 0x2d
 8013898:	d130      	bne.n	80138fc <_strtoul_l.isra.0+0x8a>
 801389a:	787c      	ldrb	r4, [r7, #1]
 801389c:	1cbd      	adds	r5, r7, #2
 801389e:	2101      	movs	r1, #1
 80138a0:	2e00      	cmp	r6, #0
 80138a2:	d05c      	beq.n	801395e <_strtoul_l.isra.0+0xec>
 80138a4:	2e10      	cmp	r6, #16
 80138a6:	d109      	bne.n	80138bc <_strtoul_l.isra.0+0x4a>
 80138a8:	2c30      	cmp	r4, #48	; 0x30
 80138aa:	d107      	bne.n	80138bc <_strtoul_l.isra.0+0x4a>
 80138ac:	782b      	ldrb	r3, [r5, #0]
 80138ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80138b2:	2b58      	cmp	r3, #88	; 0x58
 80138b4:	d14e      	bne.n	8013954 <_strtoul_l.isra.0+0xe2>
 80138b6:	786c      	ldrb	r4, [r5, #1]
 80138b8:	2610      	movs	r6, #16
 80138ba:	3502      	adds	r5, #2
 80138bc:	f04f 32ff 	mov.w	r2, #4294967295
 80138c0:	2300      	movs	r3, #0
 80138c2:	fbb2 f2f6 	udiv	r2, r2, r6
 80138c6:	fb06 fc02 	mul.w	ip, r6, r2
 80138ca:	ea6f 0c0c 	mvn.w	ip, ip
 80138ce:	4618      	mov	r0, r3
 80138d0:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80138d4:	2f09      	cmp	r7, #9
 80138d6:	d817      	bhi.n	8013908 <_strtoul_l.isra.0+0x96>
 80138d8:	463c      	mov	r4, r7
 80138da:	42a6      	cmp	r6, r4
 80138dc:	dd23      	ble.n	8013926 <_strtoul_l.isra.0+0xb4>
 80138de:	2b00      	cmp	r3, #0
 80138e0:	db1e      	blt.n	8013920 <_strtoul_l.isra.0+0xae>
 80138e2:	4282      	cmp	r2, r0
 80138e4:	d31c      	bcc.n	8013920 <_strtoul_l.isra.0+0xae>
 80138e6:	d101      	bne.n	80138ec <_strtoul_l.isra.0+0x7a>
 80138e8:	45a4      	cmp	ip, r4
 80138ea:	db19      	blt.n	8013920 <_strtoul_l.isra.0+0xae>
 80138ec:	fb00 4006 	mla	r0, r0, r6, r4
 80138f0:	2301      	movs	r3, #1
 80138f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138f6:	e7eb      	b.n	80138d0 <_strtoul_l.isra.0+0x5e>
 80138f8:	462f      	mov	r7, r5
 80138fa:	e7c1      	b.n	8013880 <_strtoul_l.isra.0+0xe>
 80138fc:	2c2b      	cmp	r4, #43	; 0x2b
 80138fe:	bf04      	itt	eq
 8013900:	1cbd      	addeq	r5, r7, #2
 8013902:	787c      	ldrbeq	r4, [r7, #1]
 8013904:	4619      	mov	r1, r3
 8013906:	e7cb      	b.n	80138a0 <_strtoul_l.isra.0+0x2e>
 8013908:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801390c:	2f19      	cmp	r7, #25
 801390e:	d801      	bhi.n	8013914 <_strtoul_l.isra.0+0xa2>
 8013910:	3c37      	subs	r4, #55	; 0x37
 8013912:	e7e2      	b.n	80138da <_strtoul_l.isra.0+0x68>
 8013914:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013918:	2f19      	cmp	r7, #25
 801391a:	d804      	bhi.n	8013926 <_strtoul_l.isra.0+0xb4>
 801391c:	3c57      	subs	r4, #87	; 0x57
 801391e:	e7dc      	b.n	80138da <_strtoul_l.isra.0+0x68>
 8013920:	f04f 33ff 	mov.w	r3, #4294967295
 8013924:	e7e5      	b.n	80138f2 <_strtoul_l.isra.0+0x80>
 8013926:	2b00      	cmp	r3, #0
 8013928:	da09      	bge.n	801393e <_strtoul_l.isra.0+0xcc>
 801392a:	2322      	movs	r3, #34	; 0x22
 801392c:	f8c8 3000 	str.w	r3, [r8]
 8013930:	f04f 30ff 	mov.w	r0, #4294967295
 8013934:	f1ba 0f00 	cmp.w	sl, #0
 8013938:	d107      	bne.n	801394a <_strtoul_l.isra.0+0xd8>
 801393a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801393e:	b101      	cbz	r1, 8013942 <_strtoul_l.isra.0+0xd0>
 8013940:	4240      	negs	r0, r0
 8013942:	f1ba 0f00 	cmp.w	sl, #0
 8013946:	d0f8      	beq.n	801393a <_strtoul_l.isra.0+0xc8>
 8013948:	b10b      	cbz	r3, 801394e <_strtoul_l.isra.0+0xdc>
 801394a:	f105 39ff 	add.w	r9, r5, #4294967295
 801394e:	f8ca 9000 	str.w	r9, [sl]
 8013952:	e7f2      	b.n	801393a <_strtoul_l.isra.0+0xc8>
 8013954:	2430      	movs	r4, #48	; 0x30
 8013956:	2e00      	cmp	r6, #0
 8013958:	d1b0      	bne.n	80138bc <_strtoul_l.isra.0+0x4a>
 801395a:	2608      	movs	r6, #8
 801395c:	e7ae      	b.n	80138bc <_strtoul_l.isra.0+0x4a>
 801395e:	2c30      	cmp	r4, #48	; 0x30
 8013960:	d0a4      	beq.n	80138ac <_strtoul_l.isra.0+0x3a>
 8013962:	260a      	movs	r6, #10
 8013964:	e7aa      	b.n	80138bc <_strtoul_l.isra.0+0x4a>
	...

08013968 <strtoul>:
 8013968:	4b08      	ldr	r3, [pc, #32]	; (801398c <strtoul+0x24>)
 801396a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801396c:	681c      	ldr	r4, [r3, #0]
 801396e:	4d08      	ldr	r5, [pc, #32]	; (8013990 <strtoul+0x28>)
 8013970:	6a23      	ldr	r3, [r4, #32]
 8013972:	2b00      	cmp	r3, #0
 8013974:	bf08      	it	eq
 8013976:	462b      	moveq	r3, r5
 8013978:	9300      	str	r3, [sp, #0]
 801397a:	4613      	mov	r3, r2
 801397c:	460a      	mov	r2, r1
 801397e:	4601      	mov	r1, r0
 8013980:	4620      	mov	r0, r4
 8013982:	f7ff ff76 	bl	8013872 <_strtoul_l.isra.0>
 8013986:	b003      	add	sp, #12
 8013988:	bd30      	pop	{r4, r5, pc}
 801398a:	bf00      	nop
 801398c:	20000064 	.word	0x20000064
 8013990:	200000c8 	.word	0x200000c8

08013994 <_vsniprintf_r>:
 8013994:	b530      	push	{r4, r5, lr}
 8013996:	1e14      	subs	r4, r2, #0
 8013998:	4605      	mov	r5, r0
 801399a:	b09b      	sub	sp, #108	; 0x6c
 801399c:	4618      	mov	r0, r3
 801399e:	da05      	bge.n	80139ac <_vsniprintf_r+0x18>
 80139a0:	238b      	movs	r3, #139	; 0x8b
 80139a2:	602b      	str	r3, [r5, #0]
 80139a4:	f04f 30ff 	mov.w	r0, #4294967295
 80139a8:	b01b      	add	sp, #108	; 0x6c
 80139aa:	bd30      	pop	{r4, r5, pc}
 80139ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80139b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80139b4:	bf14      	ite	ne
 80139b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80139ba:	4623      	moveq	r3, r4
 80139bc:	9302      	str	r3, [sp, #8]
 80139be:	9305      	str	r3, [sp, #20]
 80139c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139c4:	9100      	str	r1, [sp, #0]
 80139c6:	9104      	str	r1, [sp, #16]
 80139c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80139cc:	4602      	mov	r2, r0
 80139ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80139d0:	4669      	mov	r1, sp
 80139d2:	4628      	mov	r0, r5
 80139d4:	f001 fe12 	bl	80155fc <_svfiprintf_r>
 80139d8:	1c43      	adds	r3, r0, #1
 80139da:	bfbc      	itt	lt
 80139dc:	238b      	movlt	r3, #139	; 0x8b
 80139de:	602b      	strlt	r3, [r5, #0]
 80139e0:	2c00      	cmp	r4, #0
 80139e2:	d0e1      	beq.n	80139a8 <_vsniprintf_r+0x14>
 80139e4:	9b00      	ldr	r3, [sp, #0]
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]
 80139ea:	e7dd      	b.n	80139a8 <_vsniprintf_r+0x14>

080139ec <vsniprintf>:
 80139ec:	b507      	push	{r0, r1, r2, lr}
 80139ee:	9300      	str	r3, [sp, #0]
 80139f0:	4613      	mov	r3, r2
 80139f2:	460a      	mov	r2, r1
 80139f4:	4601      	mov	r1, r0
 80139f6:	4803      	ldr	r0, [pc, #12]	; (8013a04 <vsniprintf+0x18>)
 80139f8:	6800      	ldr	r0, [r0, #0]
 80139fa:	f7ff ffcb 	bl	8013994 <_vsniprintf_r>
 80139fe:	b003      	add	sp, #12
 8013a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a04:	20000064 	.word	0x20000064

08013a08 <quorem>:
 8013a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0c:	6903      	ldr	r3, [r0, #16]
 8013a0e:	690c      	ldr	r4, [r1, #16]
 8013a10:	42a3      	cmp	r3, r4
 8013a12:	4680      	mov	r8, r0
 8013a14:	f2c0 8082 	blt.w	8013b1c <quorem+0x114>
 8013a18:	3c01      	subs	r4, #1
 8013a1a:	f101 0714 	add.w	r7, r1, #20
 8013a1e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013a22:	f100 0614 	add.w	r6, r0, #20
 8013a26:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013a2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013a2e:	eb06 030c 	add.w	r3, r6, ip
 8013a32:	3501      	adds	r5, #1
 8013a34:	eb07 090c 	add.w	r9, r7, ip
 8013a38:	9301      	str	r3, [sp, #4]
 8013a3a:	fbb0 f5f5 	udiv	r5, r0, r5
 8013a3e:	b395      	cbz	r5, 8013aa6 <quorem+0x9e>
 8013a40:	f04f 0a00 	mov.w	sl, #0
 8013a44:	4638      	mov	r0, r7
 8013a46:	46b6      	mov	lr, r6
 8013a48:	46d3      	mov	fp, sl
 8013a4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a4e:	b293      	uxth	r3, r2
 8013a50:	fb05 a303 	mla	r3, r5, r3, sl
 8013a54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	ebab 0303 	sub.w	r3, fp, r3
 8013a5e:	0c12      	lsrs	r2, r2, #16
 8013a60:	f8de b000 	ldr.w	fp, [lr]
 8013a64:	fb05 a202 	mla	r2, r5, r2, sl
 8013a68:	fa13 f38b 	uxtah	r3, r3, fp
 8013a6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013a70:	fa1f fb82 	uxth.w	fp, r2
 8013a74:	f8de 2000 	ldr.w	r2, [lr]
 8013a78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a86:	4581      	cmp	r9, r0
 8013a88:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013a8c:	f84e 3b04 	str.w	r3, [lr], #4
 8013a90:	d2db      	bcs.n	8013a4a <quorem+0x42>
 8013a92:	f856 300c 	ldr.w	r3, [r6, ip]
 8013a96:	b933      	cbnz	r3, 8013aa6 <quorem+0x9e>
 8013a98:	9b01      	ldr	r3, [sp, #4]
 8013a9a:	3b04      	subs	r3, #4
 8013a9c:	429e      	cmp	r6, r3
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	d330      	bcc.n	8013b04 <quorem+0xfc>
 8013aa2:	f8c8 4010 	str.w	r4, [r8, #16]
 8013aa6:	4640      	mov	r0, r8
 8013aa8:	f001 fb94 	bl	80151d4 <__mcmp>
 8013aac:	2800      	cmp	r0, #0
 8013aae:	db25      	blt.n	8013afc <quorem+0xf4>
 8013ab0:	3501      	adds	r5, #1
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	f04f 0c00 	mov.w	ip, #0
 8013ab8:	f857 2b04 	ldr.w	r2, [r7], #4
 8013abc:	f8d0 e000 	ldr.w	lr, [r0]
 8013ac0:	b293      	uxth	r3, r2
 8013ac2:	ebac 0303 	sub.w	r3, ip, r3
 8013ac6:	0c12      	lsrs	r2, r2, #16
 8013ac8:	fa13 f38e 	uxtah	r3, r3, lr
 8013acc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ada:	45b9      	cmp	r9, r7
 8013adc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013ae0:	f840 3b04 	str.w	r3, [r0], #4
 8013ae4:	d2e8      	bcs.n	8013ab8 <quorem+0xb0>
 8013ae6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013aea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013aee:	b92a      	cbnz	r2, 8013afc <quorem+0xf4>
 8013af0:	3b04      	subs	r3, #4
 8013af2:	429e      	cmp	r6, r3
 8013af4:	461a      	mov	r2, r3
 8013af6:	d30b      	bcc.n	8013b10 <quorem+0x108>
 8013af8:	f8c8 4010 	str.w	r4, [r8, #16]
 8013afc:	4628      	mov	r0, r5
 8013afe:	b003      	add	sp, #12
 8013b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b04:	6812      	ldr	r2, [r2, #0]
 8013b06:	3b04      	subs	r3, #4
 8013b08:	2a00      	cmp	r2, #0
 8013b0a:	d1ca      	bne.n	8013aa2 <quorem+0x9a>
 8013b0c:	3c01      	subs	r4, #1
 8013b0e:	e7c5      	b.n	8013a9c <quorem+0x94>
 8013b10:	6812      	ldr	r2, [r2, #0]
 8013b12:	3b04      	subs	r3, #4
 8013b14:	2a00      	cmp	r2, #0
 8013b16:	d1ef      	bne.n	8013af8 <quorem+0xf0>
 8013b18:	3c01      	subs	r4, #1
 8013b1a:	e7ea      	b.n	8013af2 <quorem+0xea>
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	e7ee      	b.n	8013afe <quorem+0xf6>

08013b20 <_dtoa_r>:
 8013b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b24:	ec57 6b10 	vmov	r6, r7, d0
 8013b28:	b097      	sub	sp, #92	; 0x5c
 8013b2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b2c:	9106      	str	r1, [sp, #24]
 8013b2e:	4604      	mov	r4, r0
 8013b30:	920b      	str	r2, [sp, #44]	; 0x2c
 8013b32:	9312      	str	r3, [sp, #72]	; 0x48
 8013b34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b38:	e9cd 6700 	strd	r6, r7, [sp]
 8013b3c:	b93d      	cbnz	r5, 8013b4e <_dtoa_r+0x2e>
 8013b3e:	2010      	movs	r0, #16
 8013b40:	f7fe fac4 	bl	80120cc <malloc>
 8013b44:	6260      	str	r0, [r4, #36]	; 0x24
 8013b46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b4a:	6005      	str	r5, [r0, #0]
 8013b4c:	60c5      	str	r5, [r0, #12]
 8013b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b50:	6819      	ldr	r1, [r3, #0]
 8013b52:	b151      	cbz	r1, 8013b6a <_dtoa_r+0x4a>
 8013b54:	685a      	ldr	r2, [r3, #4]
 8013b56:	604a      	str	r2, [r1, #4]
 8013b58:	2301      	movs	r3, #1
 8013b5a:	4093      	lsls	r3, r2
 8013b5c:	608b      	str	r3, [r1, #8]
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f001 f918 	bl	8014d94 <_Bfree>
 8013b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b66:	2200      	movs	r2, #0
 8013b68:	601a      	str	r2, [r3, #0]
 8013b6a:	1e3b      	subs	r3, r7, #0
 8013b6c:	bfbb      	ittet	lt
 8013b6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013b72:	9301      	strlt	r3, [sp, #4]
 8013b74:	2300      	movge	r3, #0
 8013b76:	2201      	movlt	r2, #1
 8013b78:	bfac      	ite	ge
 8013b7a:	f8c8 3000 	strge.w	r3, [r8]
 8013b7e:	f8c8 2000 	strlt.w	r2, [r8]
 8013b82:	4baf      	ldr	r3, [pc, #700]	; (8013e40 <_dtoa_r+0x320>)
 8013b84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b88:	ea33 0308 	bics.w	r3, r3, r8
 8013b8c:	d114      	bne.n	8013bb8 <_dtoa_r+0x98>
 8013b8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8013b94:	6013      	str	r3, [r2, #0]
 8013b96:	9b00      	ldr	r3, [sp, #0]
 8013b98:	b923      	cbnz	r3, 8013ba4 <_dtoa_r+0x84>
 8013b9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	f000 8542 	beq.w	8014628 <_dtoa_r+0xb08>
 8013ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ba6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013e54 <_dtoa_r+0x334>
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f000 8544 	beq.w	8014638 <_dtoa_r+0xb18>
 8013bb0:	f10b 0303 	add.w	r3, fp, #3
 8013bb4:	f000 bd3e 	b.w	8014634 <_dtoa_r+0xb14>
 8013bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	f7ec ff98 	bl	8000af8 <__aeabi_dcmpeq>
 8013bc8:	4681      	mov	r9, r0
 8013bca:	b168      	cbz	r0, 8013be8 <_dtoa_r+0xc8>
 8013bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bce:	2301      	movs	r3, #1
 8013bd0:	6013      	str	r3, [r2, #0]
 8013bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f000 8524 	beq.w	8014622 <_dtoa_r+0xb02>
 8013bda:	4b9a      	ldr	r3, [pc, #616]	; (8013e44 <_dtoa_r+0x324>)
 8013bdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013bde:	f103 3bff 	add.w	fp, r3, #4294967295
 8013be2:	6013      	str	r3, [r2, #0]
 8013be4:	f000 bd28 	b.w	8014638 <_dtoa_r+0xb18>
 8013be8:	aa14      	add	r2, sp, #80	; 0x50
 8013bea:	a915      	add	r1, sp, #84	; 0x54
 8013bec:	ec47 6b10 	vmov	d0, r6, r7
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f001 fbdd 	bl	80153b0 <__d2b>
 8013bf6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013bfa:	9004      	str	r0, [sp, #16]
 8013bfc:	2d00      	cmp	r5, #0
 8013bfe:	d07c      	beq.n	8013cfa <_dtoa_r+0x1da>
 8013c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013c08:	46b2      	mov	sl, r6
 8013c0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013c16:	2200      	movs	r2, #0
 8013c18:	4b8b      	ldr	r3, [pc, #556]	; (8013e48 <_dtoa_r+0x328>)
 8013c1a:	4650      	mov	r0, sl
 8013c1c:	4659      	mov	r1, fp
 8013c1e:	f7ec fb4b 	bl	80002b8 <__aeabi_dsub>
 8013c22:	a381      	add	r3, pc, #516	; (adr r3, 8013e28 <_dtoa_r+0x308>)
 8013c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c28:	f7ec fcfe 	bl	8000628 <__aeabi_dmul>
 8013c2c:	a380      	add	r3, pc, #512	; (adr r3, 8013e30 <_dtoa_r+0x310>)
 8013c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c32:	f7ec fb43 	bl	80002bc <__adddf3>
 8013c36:	4606      	mov	r6, r0
 8013c38:	4628      	mov	r0, r5
 8013c3a:	460f      	mov	r7, r1
 8013c3c:	f7ec fc8a 	bl	8000554 <__aeabi_i2d>
 8013c40:	a37d      	add	r3, pc, #500	; (adr r3, 8013e38 <_dtoa_r+0x318>)
 8013c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c46:	f7ec fcef 	bl	8000628 <__aeabi_dmul>
 8013c4a:	4602      	mov	r2, r0
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	4630      	mov	r0, r6
 8013c50:	4639      	mov	r1, r7
 8013c52:	f7ec fb33 	bl	80002bc <__adddf3>
 8013c56:	4606      	mov	r6, r0
 8013c58:	460f      	mov	r7, r1
 8013c5a:	f7ec ff95 	bl	8000b88 <__aeabi_d2iz>
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4682      	mov	sl, r0
 8013c62:	2300      	movs	r3, #0
 8013c64:	4630      	mov	r0, r6
 8013c66:	4639      	mov	r1, r7
 8013c68:	f7ec ff50 	bl	8000b0c <__aeabi_dcmplt>
 8013c6c:	b148      	cbz	r0, 8013c82 <_dtoa_r+0x162>
 8013c6e:	4650      	mov	r0, sl
 8013c70:	f7ec fc70 	bl	8000554 <__aeabi_i2d>
 8013c74:	4632      	mov	r2, r6
 8013c76:	463b      	mov	r3, r7
 8013c78:	f7ec ff3e 	bl	8000af8 <__aeabi_dcmpeq>
 8013c7c:	b908      	cbnz	r0, 8013c82 <_dtoa_r+0x162>
 8013c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c82:	f1ba 0f16 	cmp.w	sl, #22
 8013c86:	d859      	bhi.n	8013d3c <_dtoa_r+0x21c>
 8013c88:	4970      	ldr	r1, [pc, #448]	; (8013e4c <_dtoa_r+0x32c>)
 8013c8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c96:	f7ec ff57 	bl	8000b48 <__aeabi_dcmpgt>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	d050      	beq.n	8013d40 <_dtoa_r+0x220>
 8013c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013ca8:	1b5d      	subs	r5, r3, r5
 8013caa:	f1b5 0801 	subs.w	r8, r5, #1
 8013cae:	bf49      	itett	mi
 8013cb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8013cb4:	2300      	movpl	r3, #0
 8013cb6:	9305      	strmi	r3, [sp, #20]
 8013cb8:	f04f 0800 	movmi.w	r8, #0
 8013cbc:	bf58      	it	pl
 8013cbe:	9305      	strpl	r3, [sp, #20]
 8013cc0:	f1ba 0f00 	cmp.w	sl, #0
 8013cc4:	db3e      	blt.n	8013d44 <_dtoa_r+0x224>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	44d0      	add	r8, sl
 8013cca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013cce:	9307      	str	r3, [sp, #28]
 8013cd0:	9b06      	ldr	r3, [sp, #24]
 8013cd2:	2b09      	cmp	r3, #9
 8013cd4:	f200 8090 	bhi.w	8013df8 <_dtoa_r+0x2d8>
 8013cd8:	2b05      	cmp	r3, #5
 8013cda:	bfc4      	itt	gt
 8013cdc:	3b04      	subgt	r3, #4
 8013cde:	9306      	strgt	r3, [sp, #24]
 8013ce0:	9b06      	ldr	r3, [sp, #24]
 8013ce2:	f1a3 0302 	sub.w	r3, r3, #2
 8013ce6:	bfcc      	ite	gt
 8013ce8:	2500      	movgt	r5, #0
 8013cea:	2501      	movle	r5, #1
 8013cec:	2b03      	cmp	r3, #3
 8013cee:	f200 808f 	bhi.w	8013e10 <_dtoa_r+0x2f0>
 8013cf2:	e8df f003 	tbb	[pc, r3]
 8013cf6:	7f7d      	.short	0x7f7d
 8013cf8:	7131      	.short	0x7131
 8013cfa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013cfe:	441d      	add	r5, r3
 8013d00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013d04:	2820      	cmp	r0, #32
 8013d06:	dd13      	ble.n	8013d30 <_dtoa_r+0x210>
 8013d08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013d0c:	9b00      	ldr	r3, [sp, #0]
 8013d0e:	fa08 f800 	lsl.w	r8, r8, r0
 8013d12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013d16:	fa23 f000 	lsr.w	r0, r3, r0
 8013d1a:	ea48 0000 	orr.w	r0, r8, r0
 8013d1e:	f7ec fc09 	bl	8000534 <__aeabi_ui2d>
 8013d22:	2301      	movs	r3, #1
 8013d24:	4682      	mov	sl, r0
 8013d26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013d2a:	3d01      	subs	r5, #1
 8013d2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8013d2e:	e772      	b.n	8013c16 <_dtoa_r+0xf6>
 8013d30:	9b00      	ldr	r3, [sp, #0]
 8013d32:	f1c0 0020 	rsb	r0, r0, #32
 8013d36:	fa03 f000 	lsl.w	r0, r3, r0
 8013d3a:	e7f0      	b.n	8013d1e <_dtoa_r+0x1fe>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e7b1      	b.n	8013ca4 <_dtoa_r+0x184>
 8013d40:	900f      	str	r0, [sp, #60]	; 0x3c
 8013d42:	e7b0      	b.n	8013ca6 <_dtoa_r+0x186>
 8013d44:	9b05      	ldr	r3, [sp, #20]
 8013d46:	eba3 030a 	sub.w	r3, r3, sl
 8013d4a:	9305      	str	r3, [sp, #20]
 8013d4c:	f1ca 0300 	rsb	r3, sl, #0
 8013d50:	9307      	str	r3, [sp, #28]
 8013d52:	2300      	movs	r3, #0
 8013d54:	930e      	str	r3, [sp, #56]	; 0x38
 8013d56:	e7bb      	b.n	8013cd0 <_dtoa_r+0x1b0>
 8013d58:	2301      	movs	r3, #1
 8013d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8013d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	dd59      	ble.n	8013e16 <_dtoa_r+0x2f6>
 8013d62:	9302      	str	r3, [sp, #8]
 8013d64:	4699      	mov	r9, r3
 8013d66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d68:	2200      	movs	r2, #0
 8013d6a:	6072      	str	r2, [r6, #4]
 8013d6c:	2204      	movs	r2, #4
 8013d6e:	f102 0014 	add.w	r0, r2, #20
 8013d72:	4298      	cmp	r0, r3
 8013d74:	6871      	ldr	r1, [r6, #4]
 8013d76:	d953      	bls.n	8013e20 <_dtoa_r+0x300>
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f000 ffd7 	bl	8014d2c <_Balloc>
 8013d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d80:	6030      	str	r0, [r6, #0]
 8013d82:	f1b9 0f0e 	cmp.w	r9, #14
 8013d86:	f8d3 b000 	ldr.w	fp, [r3]
 8013d8a:	f200 80e6 	bhi.w	8013f5a <_dtoa_r+0x43a>
 8013d8e:	2d00      	cmp	r5, #0
 8013d90:	f000 80e3 	beq.w	8013f5a <_dtoa_r+0x43a>
 8013d94:	ed9d 7b00 	vldr	d7, [sp]
 8013d98:	f1ba 0f00 	cmp.w	sl, #0
 8013d9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013da0:	dd74      	ble.n	8013e8c <_dtoa_r+0x36c>
 8013da2:	4a2a      	ldr	r2, [pc, #168]	; (8013e4c <_dtoa_r+0x32c>)
 8013da4:	f00a 030f 	and.w	r3, sl, #15
 8013da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013dac:	ed93 7b00 	vldr	d7, [r3]
 8013db0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013db4:	06f0      	lsls	r0, r6, #27
 8013db6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013dba:	d565      	bpl.n	8013e88 <_dtoa_r+0x368>
 8013dbc:	4b24      	ldr	r3, [pc, #144]	; (8013e50 <_dtoa_r+0x330>)
 8013dbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013dc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013dc6:	f7ec fd59 	bl	800087c <__aeabi_ddiv>
 8013dca:	e9cd 0100 	strd	r0, r1, [sp]
 8013dce:	f006 060f 	and.w	r6, r6, #15
 8013dd2:	2503      	movs	r5, #3
 8013dd4:	4f1e      	ldr	r7, [pc, #120]	; (8013e50 <_dtoa_r+0x330>)
 8013dd6:	e04c      	b.n	8013e72 <_dtoa_r+0x352>
 8013dd8:	2301      	movs	r3, #1
 8013dda:	930a      	str	r3, [sp, #40]	; 0x28
 8013ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dde:	4453      	add	r3, sl
 8013de0:	f103 0901 	add.w	r9, r3, #1
 8013de4:	9302      	str	r3, [sp, #8]
 8013de6:	464b      	mov	r3, r9
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	bfb8      	it	lt
 8013dec:	2301      	movlt	r3, #1
 8013dee:	e7ba      	b.n	8013d66 <_dtoa_r+0x246>
 8013df0:	2300      	movs	r3, #0
 8013df2:	e7b2      	b.n	8013d5a <_dtoa_r+0x23a>
 8013df4:	2300      	movs	r3, #0
 8013df6:	e7f0      	b.n	8013dda <_dtoa_r+0x2ba>
 8013df8:	2501      	movs	r5, #1
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	9306      	str	r3, [sp, #24]
 8013dfe:	950a      	str	r5, [sp, #40]	; 0x28
 8013e00:	f04f 33ff 	mov.w	r3, #4294967295
 8013e04:	9302      	str	r3, [sp, #8]
 8013e06:	4699      	mov	r9, r3
 8013e08:	2200      	movs	r2, #0
 8013e0a:	2312      	movs	r3, #18
 8013e0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e0e:	e7aa      	b.n	8013d66 <_dtoa_r+0x246>
 8013e10:	2301      	movs	r3, #1
 8013e12:	930a      	str	r3, [sp, #40]	; 0x28
 8013e14:	e7f4      	b.n	8013e00 <_dtoa_r+0x2e0>
 8013e16:	2301      	movs	r3, #1
 8013e18:	9302      	str	r3, [sp, #8]
 8013e1a:	4699      	mov	r9, r3
 8013e1c:	461a      	mov	r2, r3
 8013e1e:	e7f5      	b.n	8013e0c <_dtoa_r+0x2ec>
 8013e20:	3101      	adds	r1, #1
 8013e22:	6071      	str	r1, [r6, #4]
 8013e24:	0052      	lsls	r2, r2, #1
 8013e26:	e7a2      	b.n	8013d6e <_dtoa_r+0x24e>
 8013e28:	636f4361 	.word	0x636f4361
 8013e2c:	3fd287a7 	.word	0x3fd287a7
 8013e30:	8b60c8b3 	.word	0x8b60c8b3
 8013e34:	3fc68a28 	.word	0x3fc68a28
 8013e38:	509f79fb 	.word	0x509f79fb
 8013e3c:	3fd34413 	.word	0x3fd34413
 8013e40:	7ff00000 	.word	0x7ff00000
 8013e44:	0802246d 	.word	0x0802246d
 8013e48:	3ff80000 	.word	0x3ff80000
 8013e4c:	08022588 	.word	0x08022588
 8013e50:	08022560 	.word	0x08022560
 8013e54:	080224e9 	.word	0x080224e9
 8013e58:	07f1      	lsls	r1, r6, #31
 8013e5a:	d508      	bpl.n	8013e6e <_dtoa_r+0x34e>
 8013e5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e64:	f7ec fbe0 	bl	8000628 <__aeabi_dmul>
 8013e68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e6c:	3501      	adds	r5, #1
 8013e6e:	1076      	asrs	r6, r6, #1
 8013e70:	3708      	adds	r7, #8
 8013e72:	2e00      	cmp	r6, #0
 8013e74:	d1f0      	bne.n	8013e58 <_dtoa_r+0x338>
 8013e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e7e:	f7ec fcfd 	bl	800087c <__aeabi_ddiv>
 8013e82:	e9cd 0100 	strd	r0, r1, [sp]
 8013e86:	e01a      	b.n	8013ebe <_dtoa_r+0x39e>
 8013e88:	2502      	movs	r5, #2
 8013e8a:	e7a3      	b.n	8013dd4 <_dtoa_r+0x2b4>
 8013e8c:	f000 80a0 	beq.w	8013fd0 <_dtoa_r+0x4b0>
 8013e90:	f1ca 0600 	rsb	r6, sl, #0
 8013e94:	4b9f      	ldr	r3, [pc, #636]	; (8014114 <_dtoa_r+0x5f4>)
 8013e96:	4fa0      	ldr	r7, [pc, #640]	; (8014118 <_dtoa_r+0x5f8>)
 8013e98:	f006 020f 	and.w	r2, r6, #15
 8013e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ea8:	f7ec fbbe 	bl	8000628 <__aeabi_dmul>
 8013eac:	e9cd 0100 	strd	r0, r1, [sp]
 8013eb0:	1136      	asrs	r6, r6, #4
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	2502      	movs	r5, #2
 8013eb6:	2e00      	cmp	r6, #0
 8013eb8:	d17f      	bne.n	8013fba <_dtoa_r+0x49a>
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d1e1      	bne.n	8013e82 <_dtoa_r+0x362>
 8013ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f000 8087 	beq.w	8013fd4 <_dtoa_r+0x4b4>
 8013ec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	4b93      	ldr	r3, [pc, #588]	; (801411c <_dtoa_r+0x5fc>)
 8013ece:	4630      	mov	r0, r6
 8013ed0:	4639      	mov	r1, r7
 8013ed2:	f7ec fe1b 	bl	8000b0c <__aeabi_dcmplt>
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	d07c      	beq.n	8013fd4 <_dtoa_r+0x4b4>
 8013eda:	f1b9 0f00 	cmp.w	r9, #0
 8013ede:	d079      	beq.n	8013fd4 <_dtoa_r+0x4b4>
 8013ee0:	9b02      	ldr	r3, [sp, #8]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	dd35      	ble.n	8013f52 <_dtoa_r+0x432>
 8013ee6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013eea:	9308      	str	r3, [sp, #32]
 8013eec:	4639      	mov	r1, r7
 8013eee:	2200      	movs	r2, #0
 8013ef0:	4b8b      	ldr	r3, [pc, #556]	; (8014120 <_dtoa_r+0x600>)
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7ec fb98 	bl	8000628 <__aeabi_dmul>
 8013ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8013efc:	9f02      	ldr	r7, [sp, #8]
 8013efe:	3501      	adds	r5, #1
 8013f00:	4628      	mov	r0, r5
 8013f02:	f7ec fb27 	bl	8000554 <__aeabi_i2d>
 8013f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f0a:	f7ec fb8d 	bl	8000628 <__aeabi_dmul>
 8013f0e:	2200      	movs	r2, #0
 8013f10:	4b84      	ldr	r3, [pc, #528]	; (8014124 <_dtoa_r+0x604>)
 8013f12:	f7ec f9d3 	bl	80002bc <__adddf3>
 8013f16:	4605      	mov	r5, r0
 8013f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013f1c:	2f00      	cmp	r7, #0
 8013f1e:	d15d      	bne.n	8013fdc <_dtoa_r+0x4bc>
 8013f20:	2200      	movs	r2, #0
 8013f22:	4b81      	ldr	r3, [pc, #516]	; (8014128 <_dtoa_r+0x608>)
 8013f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f28:	f7ec f9c6 	bl	80002b8 <__aeabi_dsub>
 8013f2c:	462a      	mov	r2, r5
 8013f2e:	4633      	mov	r3, r6
 8013f30:	e9cd 0100 	strd	r0, r1, [sp]
 8013f34:	f7ec fe08 	bl	8000b48 <__aeabi_dcmpgt>
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	f040 8288 	bne.w	801444e <_dtoa_r+0x92e>
 8013f3e:	462a      	mov	r2, r5
 8013f40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f48:	f7ec fde0 	bl	8000b0c <__aeabi_dcmplt>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	f040 827c 	bne.w	801444a <_dtoa_r+0x92a>
 8013f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f56:	e9cd 2300 	strd	r2, r3, [sp]
 8013f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	f2c0 8150 	blt.w	8014202 <_dtoa_r+0x6e2>
 8013f62:	f1ba 0f0e 	cmp.w	sl, #14
 8013f66:	f300 814c 	bgt.w	8014202 <_dtoa_r+0x6e2>
 8013f6a:	4b6a      	ldr	r3, [pc, #424]	; (8014114 <_dtoa_r+0x5f4>)
 8013f6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013f70:	ed93 7b00 	vldr	d7, [r3]
 8013f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f7c:	f280 80d8 	bge.w	8014130 <_dtoa_r+0x610>
 8013f80:	f1b9 0f00 	cmp.w	r9, #0
 8013f84:	f300 80d4 	bgt.w	8014130 <_dtoa_r+0x610>
 8013f88:	f040 825e 	bne.w	8014448 <_dtoa_r+0x928>
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	4b66      	ldr	r3, [pc, #408]	; (8014128 <_dtoa_r+0x608>)
 8013f90:	ec51 0b17 	vmov	r0, r1, d7
 8013f94:	f7ec fb48 	bl	8000628 <__aeabi_dmul>
 8013f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f9c:	f7ec fdca 	bl	8000b34 <__aeabi_dcmpge>
 8013fa0:	464f      	mov	r7, r9
 8013fa2:	464e      	mov	r6, r9
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	f040 8234 	bne.w	8014412 <_dtoa_r+0x8f2>
 8013faa:	2331      	movs	r3, #49	; 0x31
 8013fac:	f10b 0501 	add.w	r5, fp, #1
 8013fb0:	f88b 3000 	strb.w	r3, [fp]
 8013fb4:	f10a 0a01 	add.w	sl, sl, #1
 8013fb8:	e22f      	b.n	801441a <_dtoa_r+0x8fa>
 8013fba:	07f2      	lsls	r2, r6, #31
 8013fbc:	d505      	bpl.n	8013fca <_dtoa_r+0x4aa>
 8013fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013fc2:	f7ec fb31 	bl	8000628 <__aeabi_dmul>
 8013fc6:	3501      	adds	r5, #1
 8013fc8:	2301      	movs	r3, #1
 8013fca:	1076      	asrs	r6, r6, #1
 8013fcc:	3708      	adds	r7, #8
 8013fce:	e772      	b.n	8013eb6 <_dtoa_r+0x396>
 8013fd0:	2502      	movs	r5, #2
 8013fd2:	e774      	b.n	8013ebe <_dtoa_r+0x39e>
 8013fd4:	f8cd a020 	str.w	sl, [sp, #32]
 8013fd8:	464f      	mov	r7, r9
 8013fda:	e791      	b.n	8013f00 <_dtoa_r+0x3e0>
 8013fdc:	4b4d      	ldr	r3, [pc, #308]	; (8014114 <_dtoa_r+0x5f4>)
 8013fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013fe2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d047      	beq.n	801407c <_dtoa_r+0x55c>
 8013fec:	4602      	mov	r2, r0
 8013fee:	460b      	mov	r3, r1
 8013ff0:	2000      	movs	r0, #0
 8013ff2:	494e      	ldr	r1, [pc, #312]	; (801412c <_dtoa_r+0x60c>)
 8013ff4:	f7ec fc42 	bl	800087c <__aeabi_ddiv>
 8013ff8:	462a      	mov	r2, r5
 8013ffa:	4633      	mov	r3, r6
 8013ffc:	f7ec f95c 	bl	80002b8 <__aeabi_dsub>
 8014000:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014004:	465d      	mov	r5, fp
 8014006:	e9dd 0100 	ldrd	r0, r1, [sp]
 801400a:	f7ec fdbd 	bl	8000b88 <__aeabi_d2iz>
 801400e:	4606      	mov	r6, r0
 8014010:	f7ec faa0 	bl	8000554 <__aeabi_i2d>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	e9dd 0100 	ldrd	r0, r1, [sp]
 801401c:	f7ec f94c 	bl	80002b8 <__aeabi_dsub>
 8014020:	3630      	adds	r6, #48	; 0x30
 8014022:	f805 6b01 	strb.w	r6, [r5], #1
 8014026:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801402a:	e9cd 0100 	strd	r0, r1, [sp]
 801402e:	f7ec fd6d 	bl	8000b0c <__aeabi_dcmplt>
 8014032:	2800      	cmp	r0, #0
 8014034:	d163      	bne.n	80140fe <_dtoa_r+0x5de>
 8014036:	e9dd 2300 	ldrd	r2, r3, [sp]
 801403a:	2000      	movs	r0, #0
 801403c:	4937      	ldr	r1, [pc, #220]	; (801411c <_dtoa_r+0x5fc>)
 801403e:	f7ec f93b 	bl	80002b8 <__aeabi_dsub>
 8014042:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014046:	f7ec fd61 	bl	8000b0c <__aeabi_dcmplt>
 801404a:	2800      	cmp	r0, #0
 801404c:	f040 80b7 	bne.w	80141be <_dtoa_r+0x69e>
 8014050:	eba5 030b 	sub.w	r3, r5, fp
 8014054:	429f      	cmp	r7, r3
 8014056:	f77f af7c 	ble.w	8013f52 <_dtoa_r+0x432>
 801405a:	2200      	movs	r2, #0
 801405c:	4b30      	ldr	r3, [pc, #192]	; (8014120 <_dtoa_r+0x600>)
 801405e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014062:	f7ec fae1 	bl	8000628 <__aeabi_dmul>
 8014066:	2200      	movs	r2, #0
 8014068:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801406c:	4b2c      	ldr	r3, [pc, #176]	; (8014120 <_dtoa_r+0x600>)
 801406e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014072:	f7ec fad9 	bl	8000628 <__aeabi_dmul>
 8014076:	e9cd 0100 	strd	r0, r1, [sp]
 801407a:	e7c4      	b.n	8014006 <_dtoa_r+0x4e6>
 801407c:	462a      	mov	r2, r5
 801407e:	4633      	mov	r3, r6
 8014080:	f7ec fad2 	bl	8000628 <__aeabi_dmul>
 8014084:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014088:	eb0b 0507 	add.w	r5, fp, r7
 801408c:	465e      	mov	r6, fp
 801408e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014092:	f7ec fd79 	bl	8000b88 <__aeabi_d2iz>
 8014096:	4607      	mov	r7, r0
 8014098:	f7ec fa5c 	bl	8000554 <__aeabi_i2d>
 801409c:	3730      	adds	r7, #48	; 0x30
 801409e:	4602      	mov	r2, r0
 80140a0:	460b      	mov	r3, r1
 80140a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140a6:	f7ec f907 	bl	80002b8 <__aeabi_dsub>
 80140aa:	f806 7b01 	strb.w	r7, [r6], #1
 80140ae:	42ae      	cmp	r6, r5
 80140b0:	e9cd 0100 	strd	r0, r1, [sp]
 80140b4:	f04f 0200 	mov.w	r2, #0
 80140b8:	d126      	bne.n	8014108 <_dtoa_r+0x5e8>
 80140ba:	4b1c      	ldr	r3, [pc, #112]	; (801412c <_dtoa_r+0x60c>)
 80140bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80140c0:	f7ec f8fc 	bl	80002bc <__adddf3>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140cc:	f7ec fd3c 	bl	8000b48 <__aeabi_dcmpgt>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	d174      	bne.n	80141be <_dtoa_r+0x69e>
 80140d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80140d8:	2000      	movs	r0, #0
 80140da:	4914      	ldr	r1, [pc, #80]	; (801412c <_dtoa_r+0x60c>)
 80140dc:	f7ec f8ec 	bl	80002b8 <__aeabi_dsub>
 80140e0:	4602      	mov	r2, r0
 80140e2:	460b      	mov	r3, r1
 80140e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140e8:	f7ec fd10 	bl	8000b0c <__aeabi_dcmplt>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	f43f af30 	beq.w	8013f52 <_dtoa_r+0x432>
 80140f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80140f6:	2b30      	cmp	r3, #48	; 0x30
 80140f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80140fc:	d002      	beq.n	8014104 <_dtoa_r+0x5e4>
 80140fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014102:	e04a      	b.n	801419a <_dtoa_r+0x67a>
 8014104:	4615      	mov	r5, r2
 8014106:	e7f4      	b.n	80140f2 <_dtoa_r+0x5d2>
 8014108:	4b05      	ldr	r3, [pc, #20]	; (8014120 <_dtoa_r+0x600>)
 801410a:	f7ec fa8d 	bl	8000628 <__aeabi_dmul>
 801410e:	e9cd 0100 	strd	r0, r1, [sp]
 8014112:	e7bc      	b.n	801408e <_dtoa_r+0x56e>
 8014114:	08022588 	.word	0x08022588
 8014118:	08022560 	.word	0x08022560
 801411c:	3ff00000 	.word	0x3ff00000
 8014120:	40240000 	.word	0x40240000
 8014124:	401c0000 	.word	0x401c0000
 8014128:	40140000 	.word	0x40140000
 801412c:	3fe00000 	.word	0x3fe00000
 8014130:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014134:	465d      	mov	r5, fp
 8014136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801413a:	4630      	mov	r0, r6
 801413c:	4639      	mov	r1, r7
 801413e:	f7ec fb9d 	bl	800087c <__aeabi_ddiv>
 8014142:	f7ec fd21 	bl	8000b88 <__aeabi_d2iz>
 8014146:	4680      	mov	r8, r0
 8014148:	f7ec fa04 	bl	8000554 <__aeabi_i2d>
 801414c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014150:	f7ec fa6a 	bl	8000628 <__aeabi_dmul>
 8014154:	4602      	mov	r2, r0
 8014156:	460b      	mov	r3, r1
 8014158:	4630      	mov	r0, r6
 801415a:	4639      	mov	r1, r7
 801415c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014160:	f7ec f8aa 	bl	80002b8 <__aeabi_dsub>
 8014164:	f805 6b01 	strb.w	r6, [r5], #1
 8014168:	eba5 060b 	sub.w	r6, r5, fp
 801416c:	45b1      	cmp	r9, r6
 801416e:	4602      	mov	r2, r0
 8014170:	460b      	mov	r3, r1
 8014172:	d139      	bne.n	80141e8 <_dtoa_r+0x6c8>
 8014174:	f7ec f8a2 	bl	80002bc <__adddf3>
 8014178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801417c:	4606      	mov	r6, r0
 801417e:	460f      	mov	r7, r1
 8014180:	f7ec fce2 	bl	8000b48 <__aeabi_dcmpgt>
 8014184:	b9c8      	cbnz	r0, 80141ba <_dtoa_r+0x69a>
 8014186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801418a:	4630      	mov	r0, r6
 801418c:	4639      	mov	r1, r7
 801418e:	f7ec fcb3 	bl	8000af8 <__aeabi_dcmpeq>
 8014192:	b110      	cbz	r0, 801419a <_dtoa_r+0x67a>
 8014194:	f018 0f01 	tst.w	r8, #1
 8014198:	d10f      	bne.n	80141ba <_dtoa_r+0x69a>
 801419a:	9904      	ldr	r1, [sp, #16]
 801419c:	4620      	mov	r0, r4
 801419e:	f000 fdf9 	bl	8014d94 <_Bfree>
 80141a2:	2300      	movs	r3, #0
 80141a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141a6:	702b      	strb	r3, [r5, #0]
 80141a8:	f10a 0301 	add.w	r3, sl, #1
 80141ac:	6013      	str	r3, [r2, #0]
 80141ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	f000 8241 	beq.w	8014638 <_dtoa_r+0xb18>
 80141b6:	601d      	str	r5, [r3, #0]
 80141b8:	e23e      	b.n	8014638 <_dtoa_r+0xb18>
 80141ba:	f8cd a020 	str.w	sl, [sp, #32]
 80141be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80141c2:	2a39      	cmp	r2, #57	; 0x39
 80141c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80141c8:	d108      	bne.n	80141dc <_dtoa_r+0x6bc>
 80141ca:	459b      	cmp	fp, r3
 80141cc:	d10a      	bne.n	80141e4 <_dtoa_r+0x6c4>
 80141ce:	9b08      	ldr	r3, [sp, #32]
 80141d0:	3301      	adds	r3, #1
 80141d2:	9308      	str	r3, [sp, #32]
 80141d4:	2330      	movs	r3, #48	; 0x30
 80141d6:	f88b 3000 	strb.w	r3, [fp]
 80141da:	465b      	mov	r3, fp
 80141dc:	781a      	ldrb	r2, [r3, #0]
 80141de:	3201      	adds	r2, #1
 80141e0:	701a      	strb	r2, [r3, #0]
 80141e2:	e78c      	b.n	80140fe <_dtoa_r+0x5de>
 80141e4:	461d      	mov	r5, r3
 80141e6:	e7ea      	b.n	80141be <_dtoa_r+0x69e>
 80141e8:	2200      	movs	r2, #0
 80141ea:	4b9b      	ldr	r3, [pc, #620]	; (8014458 <_dtoa_r+0x938>)
 80141ec:	f7ec fa1c 	bl	8000628 <__aeabi_dmul>
 80141f0:	2200      	movs	r2, #0
 80141f2:	2300      	movs	r3, #0
 80141f4:	4606      	mov	r6, r0
 80141f6:	460f      	mov	r7, r1
 80141f8:	f7ec fc7e 	bl	8000af8 <__aeabi_dcmpeq>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d09a      	beq.n	8014136 <_dtoa_r+0x616>
 8014200:	e7cb      	b.n	801419a <_dtoa_r+0x67a>
 8014202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014204:	2a00      	cmp	r2, #0
 8014206:	f000 808b 	beq.w	8014320 <_dtoa_r+0x800>
 801420a:	9a06      	ldr	r2, [sp, #24]
 801420c:	2a01      	cmp	r2, #1
 801420e:	dc6e      	bgt.n	80142ee <_dtoa_r+0x7ce>
 8014210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014212:	2a00      	cmp	r2, #0
 8014214:	d067      	beq.n	80142e6 <_dtoa_r+0x7c6>
 8014216:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801421a:	9f07      	ldr	r7, [sp, #28]
 801421c:	9d05      	ldr	r5, [sp, #20]
 801421e:	9a05      	ldr	r2, [sp, #20]
 8014220:	2101      	movs	r1, #1
 8014222:	441a      	add	r2, r3
 8014224:	4620      	mov	r0, r4
 8014226:	9205      	str	r2, [sp, #20]
 8014228:	4498      	add	r8, r3
 801422a:	f000 fe91 	bl	8014f50 <__i2b>
 801422e:	4606      	mov	r6, r0
 8014230:	2d00      	cmp	r5, #0
 8014232:	dd0c      	ble.n	801424e <_dtoa_r+0x72e>
 8014234:	f1b8 0f00 	cmp.w	r8, #0
 8014238:	dd09      	ble.n	801424e <_dtoa_r+0x72e>
 801423a:	4545      	cmp	r5, r8
 801423c:	9a05      	ldr	r2, [sp, #20]
 801423e:	462b      	mov	r3, r5
 8014240:	bfa8      	it	ge
 8014242:	4643      	movge	r3, r8
 8014244:	1ad2      	subs	r2, r2, r3
 8014246:	9205      	str	r2, [sp, #20]
 8014248:	1aed      	subs	r5, r5, r3
 801424a:	eba8 0803 	sub.w	r8, r8, r3
 801424e:	9b07      	ldr	r3, [sp, #28]
 8014250:	b1eb      	cbz	r3, 801428e <_dtoa_r+0x76e>
 8014252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014254:	2b00      	cmp	r3, #0
 8014256:	d067      	beq.n	8014328 <_dtoa_r+0x808>
 8014258:	b18f      	cbz	r7, 801427e <_dtoa_r+0x75e>
 801425a:	4631      	mov	r1, r6
 801425c:	463a      	mov	r2, r7
 801425e:	4620      	mov	r0, r4
 8014260:	f000 ff16 	bl	8015090 <__pow5mult>
 8014264:	9a04      	ldr	r2, [sp, #16]
 8014266:	4601      	mov	r1, r0
 8014268:	4606      	mov	r6, r0
 801426a:	4620      	mov	r0, r4
 801426c:	f000 fe79 	bl	8014f62 <__multiply>
 8014270:	9904      	ldr	r1, [sp, #16]
 8014272:	9008      	str	r0, [sp, #32]
 8014274:	4620      	mov	r0, r4
 8014276:	f000 fd8d 	bl	8014d94 <_Bfree>
 801427a:	9b08      	ldr	r3, [sp, #32]
 801427c:	9304      	str	r3, [sp, #16]
 801427e:	9b07      	ldr	r3, [sp, #28]
 8014280:	1bda      	subs	r2, r3, r7
 8014282:	d004      	beq.n	801428e <_dtoa_r+0x76e>
 8014284:	9904      	ldr	r1, [sp, #16]
 8014286:	4620      	mov	r0, r4
 8014288:	f000 ff02 	bl	8015090 <__pow5mult>
 801428c:	9004      	str	r0, [sp, #16]
 801428e:	2101      	movs	r1, #1
 8014290:	4620      	mov	r0, r4
 8014292:	f000 fe5d 	bl	8014f50 <__i2b>
 8014296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014298:	4607      	mov	r7, r0
 801429a:	2b00      	cmp	r3, #0
 801429c:	f000 81d0 	beq.w	8014640 <_dtoa_r+0xb20>
 80142a0:	461a      	mov	r2, r3
 80142a2:	4601      	mov	r1, r0
 80142a4:	4620      	mov	r0, r4
 80142a6:	f000 fef3 	bl	8015090 <__pow5mult>
 80142aa:	9b06      	ldr	r3, [sp, #24]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	4607      	mov	r7, r0
 80142b0:	dc40      	bgt.n	8014334 <_dtoa_r+0x814>
 80142b2:	9b00      	ldr	r3, [sp, #0]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d139      	bne.n	801432c <_dtoa_r+0x80c>
 80142b8:	9b01      	ldr	r3, [sp, #4]
 80142ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d136      	bne.n	8014330 <_dtoa_r+0x810>
 80142c2:	9b01      	ldr	r3, [sp, #4]
 80142c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80142c8:	0d1b      	lsrs	r3, r3, #20
 80142ca:	051b      	lsls	r3, r3, #20
 80142cc:	b12b      	cbz	r3, 80142da <_dtoa_r+0x7ba>
 80142ce:	9b05      	ldr	r3, [sp, #20]
 80142d0:	3301      	adds	r3, #1
 80142d2:	9305      	str	r3, [sp, #20]
 80142d4:	f108 0801 	add.w	r8, r8, #1
 80142d8:	2301      	movs	r3, #1
 80142da:	9307      	str	r3, [sp, #28]
 80142dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d12a      	bne.n	8014338 <_dtoa_r+0x818>
 80142e2:	2001      	movs	r0, #1
 80142e4:	e030      	b.n	8014348 <_dtoa_r+0x828>
 80142e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80142ec:	e795      	b.n	801421a <_dtoa_r+0x6fa>
 80142ee:	9b07      	ldr	r3, [sp, #28]
 80142f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80142f4:	42bb      	cmp	r3, r7
 80142f6:	bfbf      	itttt	lt
 80142f8:	9b07      	ldrlt	r3, [sp, #28]
 80142fa:	9707      	strlt	r7, [sp, #28]
 80142fc:	1afa      	sublt	r2, r7, r3
 80142fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014300:	bfbb      	ittet	lt
 8014302:	189b      	addlt	r3, r3, r2
 8014304:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014306:	1bdf      	subge	r7, r3, r7
 8014308:	2700      	movlt	r7, #0
 801430a:	f1b9 0f00 	cmp.w	r9, #0
 801430e:	bfb5      	itete	lt
 8014310:	9b05      	ldrlt	r3, [sp, #20]
 8014312:	9d05      	ldrge	r5, [sp, #20]
 8014314:	eba3 0509 	sublt.w	r5, r3, r9
 8014318:	464b      	movge	r3, r9
 801431a:	bfb8      	it	lt
 801431c:	2300      	movlt	r3, #0
 801431e:	e77e      	b.n	801421e <_dtoa_r+0x6fe>
 8014320:	9f07      	ldr	r7, [sp, #28]
 8014322:	9d05      	ldr	r5, [sp, #20]
 8014324:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014326:	e783      	b.n	8014230 <_dtoa_r+0x710>
 8014328:	9a07      	ldr	r2, [sp, #28]
 801432a:	e7ab      	b.n	8014284 <_dtoa_r+0x764>
 801432c:	2300      	movs	r3, #0
 801432e:	e7d4      	b.n	80142da <_dtoa_r+0x7ba>
 8014330:	9b00      	ldr	r3, [sp, #0]
 8014332:	e7d2      	b.n	80142da <_dtoa_r+0x7ba>
 8014334:	2300      	movs	r3, #0
 8014336:	9307      	str	r3, [sp, #28]
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801433e:	6918      	ldr	r0, [r3, #16]
 8014340:	f000 fdb8 	bl	8014eb4 <__hi0bits>
 8014344:	f1c0 0020 	rsb	r0, r0, #32
 8014348:	4440      	add	r0, r8
 801434a:	f010 001f 	ands.w	r0, r0, #31
 801434e:	d047      	beq.n	80143e0 <_dtoa_r+0x8c0>
 8014350:	f1c0 0320 	rsb	r3, r0, #32
 8014354:	2b04      	cmp	r3, #4
 8014356:	dd3b      	ble.n	80143d0 <_dtoa_r+0x8b0>
 8014358:	9b05      	ldr	r3, [sp, #20]
 801435a:	f1c0 001c 	rsb	r0, r0, #28
 801435e:	4403      	add	r3, r0
 8014360:	9305      	str	r3, [sp, #20]
 8014362:	4405      	add	r5, r0
 8014364:	4480      	add	r8, r0
 8014366:	9b05      	ldr	r3, [sp, #20]
 8014368:	2b00      	cmp	r3, #0
 801436a:	dd05      	ble.n	8014378 <_dtoa_r+0x858>
 801436c:	461a      	mov	r2, r3
 801436e:	9904      	ldr	r1, [sp, #16]
 8014370:	4620      	mov	r0, r4
 8014372:	f000 fedb 	bl	801512c <__lshift>
 8014376:	9004      	str	r0, [sp, #16]
 8014378:	f1b8 0f00 	cmp.w	r8, #0
 801437c:	dd05      	ble.n	801438a <_dtoa_r+0x86a>
 801437e:	4639      	mov	r1, r7
 8014380:	4642      	mov	r2, r8
 8014382:	4620      	mov	r0, r4
 8014384:	f000 fed2 	bl	801512c <__lshift>
 8014388:	4607      	mov	r7, r0
 801438a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801438c:	b353      	cbz	r3, 80143e4 <_dtoa_r+0x8c4>
 801438e:	4639      	mov	r1, r7
 8014390:	9804      	ldr	r0, [sp, #16]
 8014392:	f000 ff1f 	bl	80151d4 <__mcmp>
 8014396:	2800      	cmp	r0, #0
 8014398:	da24      	bge.n	80143e4 <_dtoa_r+0x8c4>
 801439a:	2300      	movs	r3, #0
 801439c:	220a      	movs	r2, #10
 801439e:	9904      	ldr	r1, [sp, #16]
 80143a0:	4620      	mov	r0, r4
 80143a2:	f000 fd0e 	bl	8014dc2 <__multadd>
 80143a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143a8:	9004      	str	r0, [sp, #16]
 80143aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	f000 814d 	beq.w	801464e <_dtoa_r+0xb2e>
 80143b4:	2300      	movs	r3, #0
 80143b6:	4631      	mov	r1, r6
 80143b8:	220a      	movs	r2, #10
 80143ba:	4620      	mov	r0, r4
 80143bc:	f000 fd01 	bl	8014dc2 <__multadd>
 80143c0:	9b02      	ldr	r3, [sp, #8]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	4606      	mov	r6, r0
 80143c6:	dc4f      	bgt.n	8014468 <_dtoa_r+0x948>
 80143c8:	9b06      	ldr	r3, [sp, #24]
 80143ca:	2b02      	cmp	r3, #2
 80143cc:	dd4c      	ble.n	8014468 <_dtoa_r+0x948>
 80143ce:	e011      	b.n	80143f4 <_dtoa_r+0x8d4>
 80143d0:	d0c9      	beq.n	8014366 <_dtoa_r+0x846>
 80143d2:	9a05      	ldr	r2, [sp, #20]
 80143d4:	331c      	adds	r3, #28
 80143d6:	441a      	add	r2, r3
 80143d8:	9205      	str	r2, [sp, #20]
 80143da:	441d      	add	r5, r3
 80143dc:	4498      	add	r8, r3
 80143de:	e7c2      	b.n	8014366 <_dtoa_r+0x846>
 80143e0:	4603      	mov	r3, r0
 80143e2:	e7f6      	b.n	80143d2 <_dtoa_r+0x8b2>
 80143e4:	f1b9 0f00 	cmp.w	r9, #0
 80143e8:	dc38      	bgt.n	801445c <_dtoa_r+0x93c>
 80143ea:	9b06      	ldr	r3, [sp, #24]
 80143ec:	2b02      	cmp	r3, #2
 80143ee:	dd35      	ble.n	801445c <_dtoa_r+0x93c>
 80143f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80143f4:	9b02      	ldr	r3, [sp, #8]
 80143f6:	b963      	cbnz	r3, 8014412 <_dtoa_r+0x8f2>
 80143f8:	4639      	mov	r1, r7
 80143fa:	2205      	movs	r2, #5
 80143fc:	4620      	mov	r0, r4
 80143fe:	f000 fce0 	bl	8014dc2 <__multadd>
 8014402:	4601      	mov	r1, r0
 8014404:	4607      	mov	r7, r0
 8014406:	9804      	ldr	r0, [sp, #16]
 8014408:	f000 fee4 	bl	80151d4 <__mcmp>
 801440c:	2800      	cmp	r0, #0
 801440e:	f73f adcc 	bgt.w	8013faa <_dtoa_r+0x48a>
 8014412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014414:	465d      	mov	r5, fp
 8014416:	ea6f 0a03 	mvn.w	sl, r3
 801441a:	f04f 0900 	mov.w	r9, #0
 801441e:	4639      	mov	r1, r7
 8014420:	4620      	mov	r0, r4
 8014422:	f000 fcb7 	bl	8014d94 <_Bfree>
 8014426:	2e00      	cmp	r6, #0
 8014428:	f43f aeb7 	beq.w	801419a <_dtoa_r+0x67a>
 801442c:	f1b9 0f00 	cmp.w	r9, #0
 8014430:	d005      	beq.n	801443e <_dtoa_r+0x91e>
 8014432:	45b1      	cmp	r9, r6
 8014434:	d003      	beq.n	801443e <_dtoa_r+0x91e>
 8014436:	4649      	mov	r1, r9
 8014438:	4620      	mov	r0, r4
 801443a:	f000 fcab 	bl	8014d94 <_Bfree>
 801443e:	4631      	mov	r1, r6
 8014440:	4620      	mov	r0, r4
 8014442:	f000 fca7 	bl	8014d94 <_Bfree>
 8014446:	e6a8      	b.n	801419a <_dtoa_r+0x67a>
 8014448:	2700      	movs	r7, #0
 801444a:	463e      	mov	r6, r7
 801444c:	e7e1      	b.n	8014412 <_dtoa_r+0x8f2>
 801444e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014452:	463e      	mov	r6, r7
 8014454:	e5a9      	b.n	8013faa <_dtoa_r+0x48a>
 8014456:	bf00      	nop
 8014458:	40240000 	.word	0x40240000
 801445c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801445e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014462:	2b00      	cmp	r3, #0
 8014464:	f000 80fa 	beq.w	801465c <_dtoa_r+0xb3c>
 8014468:	2d00      	cmp	r5, #0
 801446a:	dd05      	ble.n	8014478 <_dtoa_r+0x958>
 801446c:	4631      	mov	r1, r6
 801446e:	462a      	mov	r2, r5
 8014470:	4620      	mov	r0, r4
 8014472:	f000 fe5b 	bl	801512c <__lshift>
 8014476:	4606      	mov	r6, r0
 8014478:	9b07      	ldr	r3, [sp, #28]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d04c      	beq.n	8014518 <_dtoa_r+0x9f8>
 801447e:	6871      	ldr	r1, [r6, #4]
 8014480:	4620      	mov	r0, r4
 8014482:	f000 fc53 	bl	8014d2c <_Balloc>
 8014486:	6932      	ldr	r2, [r6, #16]
 8014488:	3202      	adds	r2, #2
 801448a:	4605      	mov	r5, r0
 801448c:	0092      	lsls	r2, r2, #2
 801448e:	f106 010c 	add.w	r1, r6, #12
 8014492:	300c      	adds	r0, #12
 8014494:	f7fd fe2a 	bl	80120ec <memcpy>
 8014498:	2201      	movs	r2, #1
 801449a:	4629      	mov	r1, r5
 801449c:	4620      	mov	r0, r4
 801449e:	f000 fe45 	bl	801512c <__lshift>
 80144a2:	9b00      	ldr	r3, [sp, #0]
 80144a4:	f8cd b014 	str.w	fp, [sp, #20]
 80144a8:	f003 0301 	and.w	r3, r3, #1
 80144ac:	46b1      	mov	r9, r6
 80144ae:	9307      	str	r3, [sp, #28]
 80144b0:	4606      	mov	r6, r0
 80144b2:	4639      	mov	r1, r7
 80144b4:	9804      	ldr	r0, [sp, #16]
 80144b6:	f7ff faa7 	bl	8013a08 <quorem>
 80144ba:	4649      	mov	r1, r9
 80144bc:	4605      	mov	r5, r0
 80144be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80144c2:	9804      	ldr	r0, [sp, #16]
 80144c4:	f000 fe86 	bl	80151d4 <__mcmp>
 80144c8:	4632      	mov	r2, r6
 80144ca:	9000      	str	r0, [sp, #0]
 80144cc:	4639      	mov	r1, r7
 80144ce:	4620      	mov	r0, r4
 80144d0:	f000 fe9a 	bl	8015208 <__mdiff>
 80144d4:	68c3      	ldr	r3, [r0, #12]
 80144d6:	4602      	mov	r2, r0
 80144d8:	bb03      	cbnz	r3, 801451c <_dtoa_r+0x9fc>
 80144da:	4601      	mov	r1, r0
 80144dc:	9008      	str	r0, [sp, #32]
 80144de:	9804      	ldr	r0, [sp, #16]
 80144e0:	f000 fe78 	bl	80151d4 <__mcmp>
 80144e4:	9a08      	ldr	r2, [sp, #32]
 80144e6:	4603      	mov	r3, r0
 80144e8:	4611      	mov	r1, r2
 80144ea:	4620      	mov	r0, r4
 80144ec:	9308      	str	r3, [sp, #32]
 80144ee:	f000 fc51 	bl	8014d94 <_Bfree>
 80144f2:	9b08      	ldr	r3, [sp, #32]
 80144f4:	b9a3      	cbnz	r3, 8014520 <_dtoa_r+0xa00>
 80144f6:	9a06      	ldr	r2, [sp, #24]
 80144f8:	b992      	cbnz	r2, 8014520 <_dtoa_r+0xa00>
 80144fa:	9a07      	ldr	r2, [sp, #28]
 80144fc:	b982      	cbnz	r2, 8014520 <_dtoa_r+0xa00>
 80144fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014502:	d029      	beq.n	8014558 <_dtoa_r+0xa38>
 8014504:	9b00      	ldr	r3, [sp, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	dd01      	ble.n	801450e <_dtoa_r+0x9ee>
 801450a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801450e:	9b05      	ldr	r3, [sp, #20]
 8014510:	1c5d      	adds	r5, r3, #1
 8014512:	f883 8000 	strb.w	r8, [r3]
 8014516:	e782      	b.n	801441e <_dtoa_r+0x8fe>
 8014518:	4630      	mov	r0, r6
 801451a:	e7c2      	b.n	80144a2 <_dtoa_r+0x982>
 801451c:	2301      	movs	r3, #1
 801451e:	e7e3      	b.n	80144e8 <_dtoa_r+0x9c8>
 8014520:	9a00      	ldr	r2, [sp, #0]
 8014522:	2a00      	cmp	r2, #0
 8014524:	db04      	blt.n	8014530 <_dtoa_r+0xa10>
 8014526:	d125      	bne.n	8014574 <_dtoa_r+0xa54>
 8014528:	9a06      	ldr	r2, [sp, #24]
 801452a:	bb1a      	cbnz	r2, 8014574 <_dtoa_r+0xa54>
 801452c:	9a07      	ldr	r2, [sp, #28]
 801452e:	bb0a      	cbnz	r2, 8014574 <_dtoa_r+0xa54>
 8014530:	2b00      	cmp	r3, #0
 8014532:	ddec      	ble.n	801450e <_dtoa_r+0x9ee>
 8014534:	2201      	movs	r2, #1
 8014536:	9904      	ldr	r1, [sp, #16]
 8014538:	4620      	mov	r0, r4
 801453a:	f000 fdf7 	bl	801512c <__lshift>
 801453e:	4639      	mov	r1, r7
 8014540:	9004      	str	r0, [sp, #16]
 8014542:	f000 fe47 	bl	80151d4 <__mcmp>
 8014546:	2800      	cmp	r0, #0
 8014548:	dc03      	bgt.n	8014552 <_dtoa_r+0xa32>
 801454a:	d1e0      	bne.n	801450e <_dtoa_r+0x9ee>
 801454c:	f018 0f01 	tst.w	r8, #1
 8014550:	d0dd      	beq.n	801450e <_dtoa_r+0x9ee>
 8014552:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014556:	d1d8      	bne.n	801450a <_dtoa_r+0x9ea>
 8014558:	9b05      	ldr	r3, [sp, #20]
 801455a:	9a05      	ldr	r2, [sp, #20]
 801455c:	1c5d      	adds	r5, r3, #1
 801455e:	2339      	movs	r3, #57	; 0x39
 8014560:	7013      	strb	r3, [r2, #0]
 8014562:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014566:	2b39      	cmp	r3, #57	; 0x39
 8014568:	f105 32ff 	add.w	r2, r5, #4294967295
 801456c:	d04f      	beq.n	801460e <_dtoa_r+0xaee>
 801456e:	3301      	adds	r3, #1
 8014570:	7013      	strb	r3, [r2, #0]
 8014572:	e754      	b.n	801441e <_dtoa_r+0x8fe>
 8014574:	9a05      	ldr	r2, [sp, #20]
 8014576:	2b00      	cmp	r3, #0
 8014578:	f102 0501 	add.w	r5, r2, #1
 801457c:	dd06      	ble.n	801458c <_dtoa_r+0xa6c>
 801457e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014582:	d0e9      	beq.n	8014558 <_dtoa_r+0xa38>
 8014584:	f108 0801 	add.w	r8, r8, #1
 8014588:	9b05      	ldr	r3, [sp, #20]
 801458a:	e7c2      	b.n	8014512 <_dtoa_r+0x9f2>
 801458c:	9a02      	ldr	r2, [sp, #8]
 801458e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014592:	eba5 030b 	sub.w	r3, r5, fp
 8014596:	4293      	cmp	r3, r2
 8014598:	d021      	beq.n	80145de <_dtoa_r+0xabe>
 801459a:	2300      	movs	r3, #0
 801459c:	220a      	movs	r2, #10
 801459e:	9904      	ldr	r1, [sp, #16]
 80145a0:	4620      	mov	r0, r4
 80145a2:	f000 fc0e 	bl	8014dc2 <__multadd>
 80145a6:	45b1      	cmp	r9, r6
 80145a8:	9004      	str	r0, [sp, #16]
 80145aa:	f04f 0300 	mov.w	r3, #0
 80145ae:	f04f 020a 	mov.w	r2, #10
 80145b2:	4649      	mov	r1, r9
 80145b4:	4620      	mov	r0, r4
 80145b6:	d105      	bne.n	80145c4 <_dtoa_r+0xaa4>
 80145b8:	f000 fc03 	bl	8014dc2 <__multadd>
 80145bc:	4681      	mov	r9, r0
 80145be:	4606      	mov	r6, r0
 80145c0:	9505      	str	r5, [sp, #20]
 80145c2:	e776      	b.n	80144b2 <_dtoa_r+0x992>
 80145c4:	f000 fbfd 	bl	8014dc2 <__multadd>
 80145c8:	4631      	mov	r1, r6
 80145ca:	4681      	mov	r9, r0
 80145cc:	2300      	movs	r3, #0
 80145ce:	220a      	movs	r2, #10
 80145d0:	4620      	mov	r0, r4
 80145d2:	f000 fbf6 	bl	8014dc2 <__multadd>
 80145d6:	4606      	mov	r6, r0
 80145d8:	e7f2      	b.n	80145c0 <_dtoa_r+0xaa0>
 80145da:	f04f 0900 	mov.w	r9, #0
 80145de:	2201      	movs	r2, #1
 80145e0:	9904      	ldr	r1, [sp, #16]
 80145e2:	4620      	mov	r0, r4
 80145e4:	f000 fda2 	bl	801512c <__lshift>
 80145e8:	4639      	mov	r1, r7
 80145ea:	9004      	str	r0, [sp, #16]
 80145ec:	f000 fdf2 	bl	80151d4 <__mcmp>
 80145f0:	2800      	cmp	r0, #0
 80145f2:	dcb6      	bgt.n	8014562 <_dtoa_r+0xa42>
 80145f4:	d102      	bne.n	80145fc <_dtoa_r+0xadc>
 80145f6:	f018 0f01 	tst.w	r8, #1
 80145fa:	d1b2      	bne.n	8014562 <_dtoa_r+0xa42>
 80145fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014600:	2b30      	cmp	r3, #48	; 0x30
 8014602:	f105 32ff 	add.w	r2, r5, #4294967295
 8014606:	f47f af0a 	bne.w	801441e <_dtoa_r+0x8fe>
 801460a:	4615      	mov	r5, r2
 801460c:	e7f6      	b.n	80145fc <_dtoa_r+0xadc>
 801460e:	4593      	cmp	fp, r2
 8014610:	d105      	bne.n	801461e <_dtoa_r+0xafe>
 8014612:	2331      	movs	r3, #49	; 0x31
 8014614:	f10a 0a01 	add.w	sl, sl, #1
 8014618:	f88b 3000 	strb.w	r3, [fp]
 801461c:	e6ff      	b.n	801441e <_dtoa_r+0x8fe>
 801461e:	4615      	mov	r5, r2
 8014620:	e79f      	b.n	8014562 <_dtoa_r+0xa42>
 8014622:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014688 <_dtoa_r+0xb68>
 8014626:	e007      	b.n	8014638 <_dtoa_r+0xb18>
 8014628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801462a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801468c <_dtoa_r+0xb6c>
 801462e:	b11b      	cbz	r3, 8014638 <_dtoa_r+0xb18>
 8014630:	f10b 0308 	add.w	r3, fp, #8
 8014634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014636:	6013      	str	r3, [r2, #0]
 8014638:	4658      	mov	r0, fp
 801463a:	b017      	add	sp, #92	; 0x5c
 801463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014640:	9b06      	ldr	r3, [sp, #24]
 8014642:	2b01      	cmp	r3, #1
 8014644:	f77f ae35 	ble.w	80142b2 <_dtoa_r+0x792>
 8014648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801464a:	9307      	str	r3, [sp, #28]
 801464c:	e649      	b.n	80142e2 <_dtoa_r+0x7c2>
 801464e:	9b02      	ldr	r3, [sp, #8]
 8014650:	2b00      	cmp	r3, #0
 8014652:	dc03      	bgt.n	801465c <_dtoa_r+0xb3c>
 8014654:	9b06      	ldr	r3, [sp, #24]
 8014656:	2b02      	cmp	r3, #2
 8014658:	f73f aecc 	bgt.w	80143f4 <_dtoa_r+0x8d4>
 801465c:	465d      	mov	r5, fp
 801465e:	4639      	mov	r1, r7
 8014660:	9804      	ldr	r0, [sp, #16]
 8014662:	f7ff f9d1 	bl	8013a08 <quorem>
 8014666:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801466a:	f805 8b01 	strb.w	r8, [r5], #1
 801466e:	9a02      	ldr	r2, [sp, #8]
 8014670:	eba5 030b 	sub.w	r3, r5, fp
 8014674:	429a      	cmp	r2, r3
 8014676:	ddb0      	ble.n	80145da <_dtoa_r+0xaba>
 8014678:	2300      	movs	r3, #0
 801467a:	220a      	movs	r2, #10
 801467c:	9904      	ldr	r1, [sp, #16]
 801467e:	4620      	mov	r0, r4
 8014680:	f000 fb9f 	bl	8014dc2 <__multadd>
 8014684:	9004      	str	r0, [sp, #16]
 8014686:	e7ea      	b.n	801465e <_dtoa_r+0xb3e>
 8014688:	0802246c 	.word	0x0802246c
 801468c:	080224e0 	.word	0x080224e0

08014690 <rshift>:
 8014690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014692:	6906      	ldr	r6, [r0, #16]
 8014694:	114b      	asrs	r3, r1, #5
 8014696:	429e      	cmp	r6, r3
 8014698:	f100 0414 	add.w	r4, r0, #20
 801469c:	dd30      	ble.n	8014700 <rshift+0x70>
 801469e:	f011 011f 	ands.w	r1, r1, #31
 80146a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80146a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80146aa:	d108      	bne.n	80146be <rshift+0x2e>
 80146ac:	4621      	mov	r1, r4
 80146ae:	42b2      	cmp	r2, r6
 80146b0:	460b      	mov	r3, r1
 80146b2:	d211      	bcs.n	80146d8 <rshift+0x48>
 80146b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80146b8:	f841 3b04 	str.w	r3, [r1], #4
 80146bc:	e7f7      	b.n	80146ae <rshift+0x1e>
 80146be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80146c2:	f1c1 0c20 	rsb	ip, r1, #32
 80146c6:	40cd      	lsrs	r5, r1
 80146c8:	3204      	adds	r2, #4
 80146ca:	4623      	mov	r3, r4
 80146cc:	42b2      	cmp	r2, r6
 80146ce:	4617      	mov	r7, r2
 80146d0:	d30c      	bcc.n	80146ec <rshift+0x5c>
 80146d2:	601d      	str	r5, [r3, #0]
 80146d4:	b105      	cbz	r5, 80146d8 <rshift+0x48>
 80146d6:	3304      	adds	r3, #4
 80146d8:	1b1a      	subs	r2, r3, r4
 80146da:	42a3      	cmp	r3, r4
 80146dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80146e0:	bf08      	it	eq
 80146e2:	2300      	moveq	r3, #0
 80146e4:	6102      	str	r2, [r0, #16]
 80146e6:	bf08      	it	eq
 80146e8:	6143      	streq	r3, [r0, #20]
 80146ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146ec:	683f      	ldr	r7, [r7, #0]
 80146ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80146f2:	433d      	orrs	r5, r7
 80146f4:	f843 5b04 	str.w	r5, [r3], #4
 80146f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80146fc:	40cd      	lsrs	r5, r1
 80146fe:	e7e5      	b.n	80146cc <rshift+0x3c>
 8014700:	4623      	mov	r3, r4
 8014702:	e7e9      	b.n	80146d8 <rshift+0x48>

08014704 <__hexdig_fun>:
 8014704:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014708:	2b09      	cmp	r3, #9
 801470a:	d802      	bhi.n	8014712 <__hexdig_fun+0xe>
 801470c:	3820      	subs	r0, #32
 801470e:	b2c0      	uxtb	r0, r0
 8014710:	4770      	bx	lr
 8014712:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014716:	2b05      	cmp	r3, #5
 8014718:	d801      	bhi.n	801471e <__hexdig_fun+0x1a>
 801471a:	3847      	subs	r0, #71	; 0x47
 801471c:	e7f7      	b.n	801470e <__hexdig_fun+0xa>
 801471e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014722:	2b05      	cmp	r3, #5
 8014724:	d801      	bhi.n	801472a <__hexdig_fun+0x26>
 8014726:	3827      	subs	r0, #39	; 0x27
 8014728:	e7f1      	b.n	801470e <__hexdig_fun+0xa>
 801472a:	2000      	movs	r0, #0
 801472c:	4770      	bx	lr

0801472e <__gethex>:
 801472e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014732:	b08b      	sub	sp, #44	; 0x2c
 8014734:	468a      	mov	sl, r1
 8014736:	9002      	str	r0, [sp, #8]
 8014738:	9816      	ldr	r0, [sp, #88]	; 0x58
 801473a:	9306      	str	r3, [sp, #24]
 801473c:	4690      	mov	r8, r2
 801473e:	f000 fad0 	bl	8014ce2 <__localeconv_l>
 8014742:	6803      	ldr	r3, [r0, #0]
 8014744:	9303      	str	r3, [sp, #12]
 8014746:	4618      	mov	r0, r3
 8014748:	f7eb fd54 	bl	80001f4 <strlen>
 801474c:	9b03      	ldr	r3, [sp, #12]
 801474e:	9001      	str	r0, [sp, #4]
 8014750:	4403      	add	r3, r0
 8014752:	f04f 0b00 	mov.w	fp, #0
 8014756:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801475a:	9307      	str	r3, [sp, #28]
 801475c:	f8da 3000 	ldr.w	r3, [sl]
 8014760:	3302      	adds	r3, #2
 8014762:	461f      	mov	r7, r3
 8014764:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014768:	2830      	cmp	r0, #48	; 0x30
 801476a:	d06c      	beq.n	8014846 <__gethex+0x118>
 801476c:	f7ff ffca 	bl	8014704 <__hexdig_fun>
 8014770:	4604      	mov	r4, r0
 8014772:	2800      	cmp	r0, #0
 8014774:	d16a      	bne.n	801484c <__gethex+0x11e>
 8014776:	9a01      	ldr	r2, [sp, #4]
 8014778:	9903      	ldr	r1, [sp, #12]
 801477a:	4638      	mov	r0, r7
 801477c:	f001 f83c 	bl	80157f8 <strncmp>
 8014780:	2800      	cmp	r0, #0
 8014782:	d166      	bne.n	8014852 <__gethex+0x124>
 8014784:	9b01      	ldr	r3, [sp, #4]
 8014786:	5cf8      	ldrb	r0, [r7, r3]
 8014788:	18fe      	adds	r6, r7, r3
 801478a:	f7ff ffbb 	bl	8014704 <__hexdig_fun>
 801478e:	2800      	cmp	r0, #0
 8014790:	d062      	beq.n	8014858 <__gethex+0x12a>
 8014792:	4633      	mov	r3, r6
 8014794:	7818      	ldrb	r0, [r3, #0]
 8014796:	2830      	cmp	r0, #48	; 0x30
 8014798:	461f      	mov	r7, r3
 801479a:	f103 0301 	add.w	r3, r3, #1
 801479e:	d0f9      	beq.n	8014794 <__gethex+0x66>
 80147a0:	f7ff ffb0 	bl	8014704 <__hexdig_fun>
 80147a4:	fab0 f580 	clz	r5, r0
 80147a8:	096d      	lsrs	r5, r5, #5
 80147aa:	4634      	mov	r4, r6
 80147ac:	f04f 0b01 	mov.w	fp, #1
 80147b0:	463a      	mov	r2, r7
 80147b2:	4616      	mov	r6, r2
 80147b4:	3201      	adds	r2, #1
 80147b6:	7830      	ldrb	r0, [r6, #0]
 80147b8:	f7ff ffa4 	bl	8014704 <__hexdig_fun>
 80147bc:	2800      	cmp	r0, #0
 80147be:	d1f8      	bne.n	80147b2 <__gethex+0x84>
 80147c0:	9a01      	ldr	r2, [sp, #4]
 80147c2:	9903      	ldr	r1, [sp, #12]
 80147c4:	4630      	mov	r0, r6
 80147c6:	f001 f817 	bl	80157f8 <strncmp>
 80147ca:	b950      	cbnz	r0, 80147e2 <__gethex+0xb4>
 80147cc:	b954      	cbnz	r4, 80147e4 <__gethex+0xb6>
 80147ce:	9b01      	ldr	r3, [sp, #4]
 80147d0:	18f4      	adds	r4, r6, r3
 80147d2:	4622      	mov	r2, r4
 80147d4:	4616      	mov	r6, r2
 80147d6:	3201      	adds	r2, #1
 80147d8:	7830      	ldrb	r0, [r6, #0]
 80147da:	f7ff ff93 	bl	8014704 <__hexdig_fun>
 80147de:	2800      	cmp	r0, #0
 80147e0:	d1f8      	bne.n	80147d4 <__gethex+0xa6>
 80147e2:	b10c      	cbz	r4, 80147e8 <__gethex+0xba>
 80147e4:	1ba4      	subs	r4, r4, r6
 80147e6:	00a4      	lsls	r4, r4, #2
 80147e8:	7833      	ldrb	r3, [r6, #0]
 80147ea:	2b50      	cmp	r3, #80	; 0x50
 80147ec:	d001      	beq.n	80147f2 <__gethex+0xc4>
 80147ee:	2b70      	cmp	r3, #112	; 0x70
 80147f0:	d140      	bne.n	8014874 <__gethex+0x146>
 80147f2:	7873      	ldrb	r3, [r6, #1]
 80147f4:	2b2b      	cmp	r3, #43	; 0x2b
 80147f6:	d031      	beq.n	801485c <__gethex+0x12e>
 80147f8:	2b2d      	cmp	r3, #45	; 0x2d
 80147fa:	d033      	beq.n	8014864 <__gethex+0x136>
 80147fc:	1c71      	adds	r1, r6, #1
 80147fe:	f04f 0900 	mov.w	r9, #0
 8014802:	7808      	ldrb	r0, [r1, #0]
 8014804:	f7ff ff7e 	bl	8014704 <__hexdig_fun>
 8014808:	1e43      	subs	r3, r0, #1
 801480a:	b2db      	uxtb	r3, r3
 801480c:	2b18      	cmp	r3, #24
 801480e:	d831      	bhi.n	8014874 <__gethex+0x146>
 8014810:	f1a0 0210 	sub.w	r2, r0, #16
 8014814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014818:	f7ff ff74 	bl	8014704 <__hexdig_fun>
 801481c:	1e43      	subs	r3, r0, #1
 801481e:	b2db      	uxtb	r3, r3
 8014820:	2b18      	cmp	r3, #24
 8014822:	d922      	bls.n	801486a <__gethex+0x13c>
 8014824:	f1b9 0f00 	cmp.w	r9, #0
 8014828:	d000      	beq.n	801482c <__gethex+0xfe>
 801482a:	4252      	negs	r2, r2
 801482c:	4414      	add	r4, r2
 801482e:	f8ca 1000 	str.w	r1, [sl]
 8014832:	b30d      	cbz	r5, 8014878 <__gethex+0x14a>
 8014834:	f1bb 0f00 	cmp.w	fp, #0
 8014838:	bf0c      	ite	eq
 801483a:	2706      	moveq	r7, #6
 801483c:	2700      	movne	r7, #0
 801483e:	4638      	mov	r0, r7
 8014840:	b00b      	add	sp, #44	; 0x2c
 8014842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014846:	f10b 0b01 	add.w	fp, fp, #1
 801484a:	e78a      	b.n	8014762 <__gethex+0x34>
 801484c:	2500      	movs	r5, #0
 801484e:	462c      	mov	r4, r5
 8014850:	e7ae      	b.n	80147b0 <__gethex+0x82>
 8014852:	463e      	mov	r6, r7
 8014854:	2501      	movs	r5, #1
 8014856:	e7c7      	b.n	80147e8 <__gethex+0xba>
 8014858:	4604      	mov	r4, r0
 801485a:	e7fb      	b.n	8014854 <__gethex+0x126>
 801485c:	f04f 0900 	mov.w	r9, #0
 8014860:	1cb1      	adds	r1, r6, #2
 8014862:	e7ce      	b.n	8014802 <__gethex+0xd4>
 8014864:	f04f 0901 	mov.w	r9, #1
 8014868:	e7fa      	b.n	8014860 <__gethex+0x132>
 801486a:	230a      	movs	r3, #10
 801486c:	fb03 0202 	mla	r2, r3, r2, r0
 8014870:	3a10      	subs	r2, #16
 8014872:	e7cf      	b.n	8014814 <__gethex+0xe6>
 8014874:	4631      	mov	r1, r6
 8014876:	e7da      	b.n	801482e <__gethex+0x100>
 8014878:	1bf3      	subs	r3, r6, r7
 801487a:	3b01      	subs	r3, #1
 801487c:	4629      	mov	r1, r5
 801487e:	2b07      	cmp	r3, #7
 8014880:	dc49      	bgt.n	8014916 <__gethex+0x1e8>
 8014882:	9802      	ldr	r0, [sp, #8]
 8014884:	f000 fa52 	bl	8014d2c <_Balloc>
 8014888:	9b01      	ldr	r3, [sp, #4]
 801488a:	f100 0914 	add.w	r9, r0, #20
 801488e:	f04f 0b00 	mov.w	fp, #0
 8014892:	f1c3 0301 	rsb	r3, r3, #1
 8014896:	4605      	mov	r5, r0
 8014898:	f8cd 9010 	str.w	r9, [sp, #16]
 801489c:	46da      	mov	sl, fp
 801489e:	9308      	str	r3, [sp, #32]
 80148a0:	42b7      	cmp	r7, r6
 80148a2:	d33b      	bcc.n	801491c <__gethex+0x1ee>
 80148a4:	9804      	ldr	r0, [sp, #16]
 80148a6:	f840 ab04 	str.w	sl, [r0], #4
 80148aa:	eba0 0009 	sub.w	r0, r0, r9
 80148ae:	1080      	asrs	r0, r0, #2
 80148b0:	6128      	str	r0, [r5, #16]
 80148b2:	0147      	lsls	r7, r0, #5
 80148b4:	4650      	mov	r0, sl
 80148b6:	f000 fafd 	bl	8014eb4 <__hi0bits>
 80148ba:	f8d8 6000 	ldr.w	r6, [r8]
 80148be:	1a3f      	subs	r7, r7, r0
 80148c0:	42b7      	cmp	r7, r6
 80148c2:	dd64      	ble.n	801498e <__gethex+0x260>
 80148c4:	1bbf      	subs	r7, r7, r6
 80148c6:	4639      	mov	r1, r7
 80148c8:	4628      	mov	r0, r5
 80148ca:	f000 fe0d 	bl	80154e8 <__any_on>
 80148ce:	4682      	mov	sl, r0
 80148d0:	b178      	cbz	r0, 80148f2 <__gethex+0x1c4>
 80148d2:	1e7b      	subs	r3, r7, #1
 80148d4:	1159      	asrs	r1, r3, #5
 80148d6:	f003 021f 	and.w	r2, r3, #31
 80148da:	f04f 0a01 	mov.w	sl, #1
 80148de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80148e2:	fa0a f202 	lsl.w	r2, sl, r2
 80148e6:	420a      	tst	r2, r1
 80148e8:	d003      	beq.n	80148f2 <__gethex+0x1c4>
 80148ea:	4553      	cmp	r3, sl
 80148ec:	dc46      	bgt.n	801497c <__gethex+0x24e>
 80148ee:	f04f 0a02 	mov.w	sl, #2
 80148f2:	4639      	mov	r1, r7
 80148f4:	4628      	mov	r0, r5
 80148f6:	f7ff fecb 	bl	8014690 <rshift>
 80148fa:	443c      	add	r4, r7
 80148fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014900:	42a3      	cmp	r3, r4
 8014902:	da52      	bge.n	80149aa <__gethex+0x27c>
 8014904:	4629      	mov	r1, r5
 8014906:	9802      	ldr	r0, [sp, #8]
 8014908:	f000 fa44 	bl	8014d94 <_Bfree>
 801490c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801490e:	2300      	movs	r3, #0
 8014910:	6013      	str	r3, [r2, #0]
 8014912:	27a3      	movs	r7, #163	; 0xa3
 8014914:	e793      	b.n	801483e <__gethex+0x110>
 8014916:	3101      	adds	r1, #1
 8014918:	105b      	asrs	r3, r3, #1
 801491a:	e7b0      	b.n	801487e <__gethex+0x150>
 801491c:	1e73      	subs	r3, r6, #1
 801491e:	9305      	str	r3, [sp, #20]
 8014920:	9a07      	ldr	r2, [sp, #28]
 8014922:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014926:	4293      	cmp	r3, r2
 8014928:	d018      	beq.n	801495c <__gethex+0x22e>
 801492a:	f1bb 0f20 	cmp.w	fp, #32
 801492e:	d107      	bne.n	8014940 <__gethex+0x212>
 8014930:	9b04      	ldr	r3, [sp, #16]
 8014932:	f8c3 a000 	str.w	sl, [r3]
 8014936:	3304      	adds	r3, #4
 8014938:	f04f 0a00 	mov.w	sl, #0
 801493c:	9304      	str	r3, [sp, #16]
 801493e:	46d3      	mov	fp, sl
 8014940:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014944:	f7ff fede 	bl	8014704 <__hexdig_fun>
 8014948:	f000 000f 	and.w	r0, r0, #15
 801494c:	fa00 f00b 	lsl.w	r0, r0, fp
 8014950:	ea4a 0a00 	orr.w	sl, sl, r0
 8014954:	f10b 0b04 	add.w	fp, fp, #4
 8014958:	9b05      	ldr	r3, [sp, #20]
 801495a:	e00d      	b.n	8014978 <__gethex+0x24a>
 801495c:	9b05      	ldr	r3, [sp, #20]
 801495e:	9a08      	ldr	r2, [sp, #32]
 8014960:	4413      	add	r3, r2
 8014962:	42bb      	cmp	r3, r7
 8014964:	d3e1      	bcc.n	801492a <__gethex+0x1fc>
 8014966:	4618      	mov	r0, r3
 8014968:	9a01      	ldr	r2, [sp, #4]
 801496a:	9903      	ldr	r1, [sp, #12]
 801496c:	9309      	str	r3, [sp, #36]	; 0x24
 801496e:	f000 ff43 	bl	80157f8 <strncmp>
 8014972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014974:	2800      	cmp	r0, #0
 8014976:	d1d8      	bne.n	801492a <__gethex+0x1fc>
 8014978:	461e      	mov	r6, r3
 801497a:	e791      	b.n	80148a0 <__gethex+0x172>
 801497c:	1eb9      	subs	r1, r7, #2
 801497e:	4628      	mov	r0, r5
 8014980:	f000 fdb2 	bl	80154e8 <__any_on>
 8014984:	2800      	cmp	r0, #0
 8014986:	d0b2      	beq.n	80148ee <__gethex+0x1c0>
 8014988:	f04f 0a03 	mov.w	sl, #3
 801498c:	e7b1      	b.n	80148f2 <__gethex+0x1c4>
 801498e:	da09      	bge.n	80149a4 <__gethex+0x276>
 8014990:	1bf7      	subs	r7, r6, r7
 8014992:	4629      	mov	r1, r5
 8014994:	463a      	mov	r2, r7
 8014996:	9802      	ldr	r0, [sp, #8]
 8014998:	f000 fbc8 	bl	801512c <__lshift>
 801499c:	1be4      	subs	r4, r4, r7
 801499e:	4605      	mov	r5, r0
 80149a0:	f100 0914 	add.w	r9, r0, #20
 80149a4:	f04f 0a00 	mov.w	sl, #0
 80149a8:	e7a8      	b.n	80148fc <__gethex+0x1ce>
 80149aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80149ae:	42a0      	cmp	r0, r4
 80149b0:	dd6a      	ble.n	8014a88 <__gethex+0x35a>
 80149b2:	1b04      	subs	r4, r0, r4
 80149b4:	42a6      	cmp	r6, r4
 80149b6:	dc2e      	bgt.n	8014a16 <__gethex+0x2e8>
 80149b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d022      	beq.n	8014a06 <__gethex+0x2d8>
 80149c0:	2b03      	cmp	r3, #3
 80149c2:	d024      	beq.n	8014a0e <__gethex+0x2e0>
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d115      	bne.n	80149f4 <__gethex+0x2c6>
 80149c8:	42a6      	cmp	r6, r4
 80149ca:	d113      	bne.n	80149f4 <__gethex+0x2c6>
 80149cc:	2e01      	cmp	r6, #1
 80149ce:	dc0b      	bgt.n	80149e8 <__gethex+0x2ba>
 80149d0:	9a06      	ldr	r2, [sp, #24]
 80149d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80149d6:	6013      	str	r3, [r2, #0]
 80149d8:	2301      	movs	r3, #1
 80149da:	612b      	str	r3, [r5, #16]
 80149dc:	f8c9 3000 	str.w	r3, [r9]
 80149e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149e2:	2762      	movs	r7, #98	; 0x62
 80149e4:	601d      	str	r5, [r3, #0]
 80149e6:	e72a      	b.n	801483e <__gethex+0x110>
 80149e8:	1e71      	subs	r1, r6, #1
 80149ea:	4628      	mov	r0, r5
 80149ec:	f000 fd7c 	bl	80154e8 <__any_on>
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d1ed      	bne.n	80149d0 <__gethex+0x2a2>
 80149f4:	4629      	mov	r1, r5
 80149f6:	9802      	ldr	r0, [sp, #8]
 80149f8:	f000 f9cc 	bl	8014d94 <_Bfree>
 80149fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149fe:	2300      	movs	r3, #0
 8014a00:	6013      	str	r3, [r2, #0]
 8014a02:	2750      	movs	r7, #80	; 0x50
 8014a04:	e71b      	b.n	801483e <__gethex+0x110>
 8014a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d0e1      	beq.n	80149d0 <__gethex+0x2a2>
 8014a0c:	e7f2      	b.n	80149f4 <__gethex+0x2c6>
 8014a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d1dd      	bne.n	80149d0 <__gethex+0x2a2>
 8014a14:	e7ee      	b.n	80149f4 <__gethex+0x2c6>
 8014a16:	1e67      	subs	r7, r4, #1
 8014a18:	f1ba 0f00 	cmp.w	sl, #0
 8014a1c:	d131      	bne.n	8014a82 <__gethex+0x354>
 8014a1e:	b127      	cbz	r7, 8014a2a <__gethex+0x2fc>
 8014a20:	4639      	mov	r1, r7
 8014a22:	4628      	mov	r0, r5
 8014a24:	f000 fd60 	bl	80154e8 <__any_on>
 8014a28:	4682      	mov	sl, r0
 8014a2a:	117a      	asrs	r2, r7, #5
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	f007 071f 	and.w	r7, r7, #31
 8014a32:	fa03 f707 	lsl.w	r7, r3, r7
 8014a36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014a3a:	4621      	mov	r1, r4
 8014a3c:	421f      	tst	r7, r3
 8014a3e:	4628      	mov	r0, r5
 8014a40:	bf18      	it	ne
 8014a42:	f04a 0a02 	orrne.w	sl, sl, #2
 8014a46:	1b36      	subs	r6, r6, r4
 8014a48:	f7ff fe22 	bl	8014690 <rshift>
 8014a4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014a50:	2702      	movs	r7, #2
 8014a52:	f1ba 0f00 	cmp.w	sl, #0
 8014a56:	d048      	beq.n	8014aea <__gethex+0x3bc>
 8014a58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014a5c:	2b02      	cmp	r3, #2
 8014a5e:	d015      	beq.n	8014a8c <__gethex+0x35e>
 8014a60:	2b03      	cmp	r3, #3
 8014a62:	d017      	beq.n	8014a94 <__gethex+0x366>
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d109      	bne.n	8014a7c <__gethex+0x34e>
 8014a68:	f01a 0f02 	tst.w	sl, #2
 8014a6c:	d006      	beq.n	8014a7c <__gethex+0x34e>
 8014a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8014a72:	ea4a 0a03 	orr.w	sl, sl, r3
 8014a76:	f01a 0f01 	tst.w	sl, #1
 8014a7a:	d10e      	bne.n	8014a9a <__gethex+0x36c>
 8014a7c:	f047 0710 	orr.w	r7, r7, #16
 8014a80:	e033      	b.n	8014aea <__gethex+0x3bc>
 8014a82:	f04f 0a01 	mov.w	sl, #1
 8014a86:	e7d0      	b.n	8014a2a <__gethex+0x2fc>
 8014a88:	2701      	movs	r7, #1
 8014a8a:	e7e2      	b.n	8014a52 <__gethex+0x324>
 8014a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a8e:	f1c3 0301 	rsb	r3, r3, #1
 8014a92:	9315      	str	r3, [sp, #84]	; 0x54
 8014a94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d0f0      	beq.n	8014a7c <__gethex+0x34e>
 8014a9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014a9e:	f105 0314 	add.w	r3, r5, #20
 8014aa2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8014aa6:	eb03 010a 	add.w	r1, r3, sl
 8014aaa:	f04f 0c00 	mov.w	ip, #0
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ab4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014ab8:	d01c      	beq.n	8014af4 <__gethex+0x3c6>
 8014aba:	3201      	adds	r2, #1
 8014abc:	6002      	str	r2, [r0, #0]
 8014abe:	2f02      	cmp	r7, #2
 8014ac0:	f105 0314 	add.w	r3, r5, #20
 8014ac4:	d138      	bne.n	8014b38 <__gethex+0x40a>
 8014ac6:	f8d8 2000 	ldr.w	r2, [r8]
 8014aca:	3a01      	subs	r2, #1
 8014acc:	42b2      	cmp	r2, r6
 8014ace:	d10a      	bne.n	8014ae6 <__gethex+0x3b8>
 8014ad0:	1171      	asrs	r1, r6, #5
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	f006 061f 	and.w	r6, r6, #31
 8014ad8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014adc:	fa02 f606 	lsl.w	r6, r2, r6
 8014ae0:	421e      	tst	r6, r3
 8014ae2:	bf18      	it	ne
 8014ae4:	4617      	movne	r7, r2
 8014ae6:	f047 0720 	orr.w	r7, r7, #32
 8014aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014aec:	601d      	str	r5, [r3, #0]
 8014aee:	9b06      	ldr	r3, [sp, #24]
 8014af0:	601c      	str	r4, [r3, #0]
 8014af2:	e6a4      	b.n	801483e <__gethex+0x110>
 8014af4:	4299      	cmp	r1, r3
 8014af6:	f843 cc04 	str.w	ip, [r3, #-4]
 8014afa:	d8d8      	bhi.n	8014aae <__gethex+0x380>
 8014afc:	68ab      	ldr	r3, [r5, #8]
 8014afe:	4599      	cmp	r9, r3
 8014b00:	db12      	blt.n	8014b28 <__gethex+0x3fa>
 8014b02:	6869      	ldr	r1, [r5, #4]
 8014b04:	9802      	ldr	r0, [sp, #8]
 8014b06:	3101      	adds	r1, #1
 8014b08:	f000 f910 	bl	8014d2c <_Balloc>
 8014b0c:	692a      	ldr	r2, [r5, #16]
 8014b0e:	3202      	adds	r2, #2
 8014b10:	f105 010c 	add.w	r1, r5, #12
 8014b14:	4683      	mov	fp, r0
 8014b16:	0092      	lsls	r2, r2, #2
 8014b18:	300c      	adds	r0, #12
 8014b1a:	f7fd fae7 	bl	80120ec <memcpy>
 8014b1e:	4629      	mov	r1, r5
 8014b20:	9802      	ldr	r0, [sp, #8]
 8014b22:	f000 f937 	bl	8014d94 <_Bfree>
 8014b26:	465d      	mov	r5, fp
 8014b28:	692b      	ldr	r3, [r5, #16]
 8014b2a:	1c5a      	adds	r2, r3, #1
 8014b2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014b30:	612a      	str	r2, [r5, #16]
 8014b32:	2201      	movs	r2, #1
 8014b34:	615a      	str	r2, [r3, #20]
 8014b36:	e7c2      	b.n	8014abe <__gethex+0x390>
 8014b38:	692a      	ldr	r2, [r5, #16]
 8014b3a:	454a      	cmp	r2, r9
 8014b3c:	dd0b      	ble.n	8014b56 <__gethex+0x428>
 8014b3e:	2101      	movs	r1, #1
 8014b40:	4628      	mov	r0, r5
 8014b42:	f7ff fda5 	bl	8014690 <rshift>
 8014b46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b4a:	3401      	adds	r4, #1
 8014b4c:	42a3      	cmp	r3, r4
 8014b4e:	f6ff aed9 	blt.w	8014904 <__gethex+0x1d6>
 8014b52:	2701      	movs	r7, #1
 8014b54:	e7c7      	b.n	8014ae6 <__gethex+0x3b8>
 8014b56:	f016 061f 	ands.w	r6, r6, #31
 8014b5a:	d0fa      	beq.n	8014b52 <__gethex+0x424>
 8014b5c:	449a      	add	sl, r3
 8014b5e:	f1c6 0620 	rsb	r6, r6, #32
 8014b62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014b66:	f000 f9a5 	bl	8014eb4 <__hi0bits>
 8014b6a:	42b0      	cmp	r0, r6
 8014b6c:	dbe7      	blt.n	8014b3e <__gethex+0x410>
 8014b6e:	e7f0      	b.n	8014b52 <__gethex+0x424>

08014b70 <L_shift>:
 8014b70:	f1c2 0208 	rsb	r2, r2, #8
 8014b74:	0092      	lsls	r2, r2, #2
 8014b76:	b570      	push	{r4, r5, r6, lr}
 8014b78:	f1c2 0620 	rsb	r6, r2, #32
 8014b7c:	6843      	ldr	r3, [r0, #4]
 8014b7e:	6804      	ldr	r4, [r0, #0]
 8014b80:	fa03 f506 	lsl.w	r5, r3, r6
 8014b84:	432c      	orrs	r4, r5
 8014b86:	40d3      	lsrs	r3, r2
 8014b88:	6004      	str	r4, [r0, #0]
 8014b8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8014b8e:	4288      	cmp	r0, r1
 8014b90:	d3f4      	bcc.n	8014b7c <L_shift+0xc>
 8014b92:	bd70      	pop	{r4, r5, r6, pc}

08014b94 <__match>:
 8014b94:	b530      	push	{r4, r5, lr}
 8014b96:	6803      	ldr	r3, [r0, #0]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b9e:	b914      	cbnz	r4, 8014ba6 <__match+0x12>
 8014ba0:	6003      	str	r3, [r0, #0]
 8014ba2:	2001      	movs	r0, #1
 8014ba4:	bd30      	pop	{r4, r5, pc}
 8014ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014baa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014bae:	2d19      	cmp	r5, #25
 8014bb0:	bf98      	it	ls
 8014bb2:	3220      	addls	r2, #32
 8014bb4:	42a2      	cmp	r2, r4
 8014bb6:	d0f0      	beq.n	8014b9a <__match+0x6>
 8014bb8:	2000      	movs	r0, #0
 8014bba:	e7f3      	b.n	8014ba4 <__match+0x10>

08014bbc <__hexnan>:
 8014bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc0:	680b      	ldr	r3, [r1, #0]
 8014bc2:	6801      	ldr	r1, [r0, #0]
 8014bc4:	115f      	asrs	r7, r3, #5
 8014bc6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014bca:	f013 031f 	ands.w	r3, r3, #31
 8014bce:	b087      	sub	sp, #28
 8014bd0:	bf18      	it	ne
 8014bd2:	3704      	addne	r7, #4
 8014bd4:	2500      	movs	r5, #0
 8014bd6:	1f3e      	subs	r6, r7, #4
 8014bd8:	4682      	mov	sl, r0
 8014bda:	4690      	mov	r8, r2
 8014bdc:	9301      	str	r3, [sp, #4]
 8014bde:	f847 5c04 	str.w	r5, [r7, #-4]
 8014be2:	46b1      	mov	r9, r6
 8014be4:	4634      	mov	r4, r6
 8014be6:	9502      	str	r5, [sp, #8]
 8014be8:	46ab      	mov	fp, r5
 8014bea:	784a      	ldrb	r2, [r1, #1]
 8014bec:	1c4b      	adds	r3, r1, #1
 8014bee:	9303      	str	r3, [sp, #12]
 8014bf0:	b342      	cbz	r2, 8014c44 <__hexnan+0x88>
 8014bf2:	4610      	mov	r0, r2
 8014bf4:	9105      	str	r1, [sp, #20]
 8014bf6:	9204      	str	r2, [sp, #16]
 8014bf8:	f7ff fd84 	bl	8014704 <__hexdig_fun>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d143      	bne.n	8014c88 <__hexnan+0xcc>
 8014c00:	9a04      	ldr	r2, [sp, #16]
 8014c02:	9905      	ldr	r1, [sp, #20]
 8014c04:	2a20      	cmp	r2, #32
 8014c06:	d818      	bhi.n	8014c3a <__hexnan+0x7e>
 8014c08:	9b02      	ldr	r3, [sp, #8]
 8014c0a:	459b      	cmp	fp, r3
 8014c0c:	dd13      	ble.n	8014c36 <__hexnan+0x7a>
 8014c0e:	454c      	cmp	r4, r9
 8014c10:	d206      	bcs.n	8014c20 <__hexnan+0x64>
 8014c12:	2d07      	cmp	r5, #7
 8014c14:	dc04      	bgt.n	8014c20 <__hexnan+0x64>
 8014c16:	462a      	mov	r2, r5
 8014c18:	4649      	mov	r1, r9
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f7ff ffa8 	bl	8014b70 <L_shift>
 8014c20:	4544      	cmp	r4, r8
 8014c22:	d944      	bls.n	8014cae <__hexnan+0xf2>
 8014c24:	2300      	movs	r3, #0
 8014c26:	f1a4 0904 	sub.w	r9, r4, #4
 8014c2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8014c2e:	f8cd b008 	str.w	fp, [sp, #8]
 8014c32:	464c      	mov	r4, r9
 8014c34:	461d      	mov	r5, r3
 8014c36:	9903      	ldr	r1, [sp, #12]
 8014c38:	e7d7      	b.n	8014bea <__hexnan+0x2e>
 8014c3a:	2a29      	cmp	r2, #41	; 0x29
 8014c3c:	d14a      	bne.n	8014cd4 <__hexnan+0x118>
 8014c3e:	3102      	adds	r1, #2
 8014c40:	f8ca 1000 	str.w	r1, [sl]
 8014c44:	f1bb 0f00 	cmp.w	fp, #0
 8014c48:	d044      	beq.n	8014cd4 <__hexnan+0x118>
 8014c4a:	454c      	cmp	r4, r9
 8014c4c:	d206      	bcs.n	8014c5c <__hexnan+0xa0>
 8014c4e:	2d07      	cmp	r5, #7
 8014c50:	dc04      	bgt.n	8014c5c <__hexnan+0xa0>
 8014c52:	462a      	mov	r2, r5
 8014c54:	4649      	mov	r1, r9
 8014c56:	4620      	mov	r0, r4
 8014c58:	f7ff ff8a 	bl	8014b70 <L_shift>
 8014c5c:	4544      	cmp	r4, r8
 8014c5e:	d928      	bls.n	8014cb2 <__hexnan+0xf6>
 8014c60:	4643      	mov	r3, r8
 8014c62:	f854 2b04 	ldr.w	r2, [r4], #4
 8014c66:	f843 2b04 	str.w	r2, [r3], #4
 8014c6a:	42a6      	cmp	r6, r4
 8014c6c:	d2f9      	bcs.n	8014c62 <__hexnan+0xa6>
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f843 2b04 	str.w	r2, [r3], #4
 8014c74:	429e      	cmp	r6, r3
 8014c76:	d2fb      	bcs.n	8014c70 <__hexnan+0xb4>
 8014c78:	6833      	ldr	r3, [r6, #0]
 8014c7a:	b91b      	cbnz	r3, 8014c84 <__hexnan+0xc8>
 8014c7c:	4546      	cmp	r6, r8
 8014c7e:	d127      	bne.n	8014cd0 <__hexnan+0x114>
 8014c80:	2301      	movs	r3, #1
 8014c82:	6033      	str	r3, [r6, #0]
 8014c84:	2005      	movs	r0, #5
 8014c86:	e026      	b.n	8014cd6 <__hexnan+0x11a>
 8014c88:	3501      	adds	r5, #1
 8014c8a:	2d08      	cmp	r5, #8
 8014c8c:	f10b 0b01 	add.w	fp, fp, #1
 8014c90:	dd06      	ble.n	8014ca0 <__hexnan+0xe4>
 8014c92:	4544      	cmp	r4, r8
 8014c94:	d9cf      	bls.n	8014c36 <__hexnan+0x7a>
 8014c96:	2300      	movs	r3, #0
 8014c98:	f844 3c04 	str.w	r3, [r4, #-4]
 8014c9c:	2501      	movs	r5, #1
 8014c9e:	3c04      	subs	r4, #4
 8014ca0:	6822      	ldr	r2, [r4, #0]
 8014ca2:	f000 000f 	and.w	r0, r0, #15
 8014ca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014caa:	6020      	str	r0, [r4, #0]
 8014cac:	e7c3      	b.n	8014c36 <__hexnan+0x7a>
 8014cae:	2508      	movs	r5, #8
 8014cb0:	e7c1      	b.n	8014c36 <__hexnan+0x7a>
 8014cb2:	9b01      	ldr	r3, [sp, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d0df      	beq.n	8014c78 <__hexnan+0xbc>
 8014cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8014cbc:	f1c3 0320 	rsb	r3, r3, #32
 8014cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8014cc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014cc8:	401a      	ands	r2, r3
 8014cca:	f847 2c04 	str.w	r2, [r7, #-4]
 8014cce:	e7d3      	b.n	8014c78 <__hexnan+0xbc>
 8014cd0:	3e04      	subs	r6, #4
 8014cd2:	e7d1      	b.n	8014c78 <__hexnan+0xbc>
 8014cd4:	2004      	movs	r0, #4
 8014cd6:	b007      	add	sp, #28
 8014cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014cdc <__locale_ctype_ptr_l>:
 8014cdc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014ce0:	4770      	bx	lr

08014ce2 <__localeconv_l>:
 8014ce2:	30f0      	adds	r0, #240	; 0xf0
 8014ce4:	4770      	bx	lr
	...

08014ce8 <_localeconv_r>:
 8014ce8:	4b04      	ldr	r3, [pc, #16]	; (8014cfc <_localeconv_r+0x14>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	6a18      	ldr	r0, [r3, #32]
 8014cee:	4b04      	ldr	r3, [pc, #16]	; (8014d00 <_localeconv_r+0x18>)
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	bf08      	it	eq
 8014cf4:	4618      	moveq	r0, r3
 8014cf6:	30f0      	adds	r0, #240	; 0xf0
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	20000064 	.word	0x20000064
 8014d00:	200000c8 	.word	0x200000c8

08014d04 <__ascii_mbtowc>:
 8014d04:	b082      	sub	sp, #8
 8014d06:	b901      	cbnz	r1, 8014d0a <__ascii_mbtowc+0x6>
 8014d08:	a901      	add	r1, sp, #4
 8014d0a:	b142      	cbz	r2, 8014d1e <__ascii_mbtowc+0x1a>
 8014d0c:	b14b      	cbz	r3, 8014d22 <__ascii_mbtowc+0x1e>
 8014d0e:	7813      	ldrb	r3, [r2, #0]
 8014d10:	600b      	str	r3, [r1, #0]
 8014d12:	7812      	ldrb	r2, [r2, #0]
 8014d14:	1c10      	adds	r0, r2, #0
 8014d16:	bf18      	it	ne
 8014d18:	2001      	movne	r0, #1
 8014d1a:	b002      	add	sp, #8
 8014d1c:	4770      	bx	lr
 8014d1e:	4610      	mov	r0, r2
 8014d20:	e7fb      	b.n	8014d1a <__ascii_mbtowc+0x16>
 8014d22:	f06f 0001 	mvn.w	r0, #1
 8014d26:	e7f8      	b.n	8014d1a <__ascii_mbtowc+0x16>

08014d28 <__malloc_lock>:
 8014d28:	4770      	bx	lr

08014d2a <__malloc_unlock>:
 8014d2a:	4770      	bx	lr

08014d2c <_Balloc>:
 8014d2c:	b570      	push	{r4, r5, r6, lr}
 8014d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d30:	4604      	mov	r4, r0
 8014d32:	460e      	mov	r6, r1
 8014d34:	b93d      	cbnz	r5, 8014d46 <_Balloc+0x1a>
 8014d36:	2010      	movs	r0, #16
 8014d38:	f7fd f9c8 	bl	80120cc <malloc>
 8014d3c:	6260      	str	r0, [r4, #36]	; 0x24
 8014d3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d42:	6005      	str	r5, [r0, #0]
 8014d44:	60c5      	str	r5, [r0, #12]
 8014d46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014d48:	68eb      	ldr	r3, [r5, #12]
 8014d4a:	b183      	cbz	r3, 8014d6e <_Balloc+0x42>
 8014d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014d54:	b9b8      	cbnz	r0, 8014d86 <_Balloc+0x5a>
 8014d56:	2101      	movs	r1, #1
 8014d58:	fa01 f506 	lsl.w	r5, r1, r6
 8014d5c:	1d6a      	adds	r2, r5, #5
 8014d5e:	0092      	lsls	r2, r2, #2
 8014d60:	4620      	mov	r0, r4
 8014d62:	f000 fbe2 	bl	801552a <_calloc_r>
 8014d66:	b160      	cbz	r0, 8014d82 <_Balloc+0x56>
 8014d68:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014d6c:	e00e      	b.n	8014d8c <_Balloc+0x60>
 8014d6e:	2221      	movs	r2, #33	; 0x21
 8014d70:	2104      	movs	r1, #4
 8014d72:	4620      	mov	r0, r4
 8014d74:	f000 fbd9 	bl	801552a <_calloc_r>
 8014d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d7a:	60e8      	str	r0, [r5, #12]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d1e4      	bne.n	8014d4c <_Balloc+0x20>
 8014d82:	2000      	movs	r0, #0
 8014d84:	bd70      	pop	{r4, r5, r6, pc}
 8014d86:	6802      	ldr	r2, [r0, #0]
 8014d88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014d92:	e7f7      	b.n	8014d84 <_Balloc+0x58>

08014d94 <_Bfree>:
 8014d94:	b570      	push	{r4, r5, r6, lr}
 8014d96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014d98:	4606      	mov	r6, r0
 8014d9a:	460d      	mov	r5, r1
 8014d9c:	b93c      	cbnz	r4, 8014dae <_Bfree+0x1a>
 8014d9e:	2010      	movs	r0, #16
 8014da0:	f7fd f994 	bl	80120cc <malloc>
 8014da4:	6270      	str	r0, [r6, #36]	; 0x24
 8014da6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014daa:	6004      	str	r4, [r0, #0]
 8014dac:	60c4      	str	r4, [r0, #12]
 8014dae:	b13d      	cbz	r5, 8014dc0 <_Bfree+0x2c>
 8014db0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014db2:	686a      	ldr	r2, [r5, #4]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014dba:	6029      	str	r1, [r5, #0]
 8014dbc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014dc0:	bd70      	pop	{r4, r5, r6, pc}

08014dc2 <__multadd>:
 8014dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc6:	690d      	ldr	r5, [r1, #16]
 8014dc8:	461f      	mov	r7, r3
 8014dca:	4606      	mov	r6, r0
 8014dcc:	460c      	mov	r4, r1
 8014dce:	f101 0c14 	add.w	ip, r1, #20
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	f8dc 0000 	ldr.w	r0, [ip]
 8014dd8:	b281      	uxth	r1, r0
 8014dda:	fb02 7101 	mla	r1, r2, r1, r7
 8014dde:	0c0f      	lsrs	r7, r1, #16
 8014de0:	0c00      	lsrs	r0, r0, #16
 8014de2:	fb02 7000 	mla	r0, r2, r0, r7
 8014de6:	b289      	uxth	r1, r1
 8014de8:	3301      	adds	r3, #1
 8014dea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014dee:	429d      	cmp	r5, r3
 8014df0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014df4:	f84c 1b04 	str.w	r1, [ip], #4
 8014df8:	dcec      	bgt.n	8014dd4 <__multadd+0x12>
 8014dfa:	b1d7      	cbz	r7, 8014e32 <__multadd+0x70>
 8014dfc:	68a3      	ldr	r3, [r4, #8]
 8014dfe:	42ab      	cmp	r3, r5
 8014e00:	dc12      	bgt.n	8014e28 <__multadd+0x66>
 8014e02:	6861      	ldr	r1, [r4, #4]
 8014e04:	4630      	mov	r0, r6
 8014e06:	3101      	adds	r1, #1
 8014e08:	f7ff ff90 	bl	8014d2c <_Balloc>
 8014e0c:	6922      	ldr	r2, [r4, #16]
 8014e0e:	3202      	adds	r2, #2
 8014e10:	f104 010c 	add.w	r1, r4, #12
 8014e14:	4680      	mov	r8, r0
 8014e16:	0092      	lsls	r2, r2, #2
 8014e18:	300c      	adds	r0, #12
 8014e1a:	f7fd f967 	bl	80120ec <memcpy>
 8014e1e:	4621      	mov	r1, r4
 8014e20:	4630      	mov	r0, r6
 8014e22:	f7ff ffb7 	bl	8014d94 <_Bfree>
 8014e26:	4644      	mov	r4, r8
 8014e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014e2c:	3501      	adds	r5, #1
 8014e2e:	615f      	str	r7, [r3, #20]
 8014e30:	6125      	str	r5, [r4, #16]
 8014e32:	4620      	mov	r0, r4
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e38 <__s2b>:
 8014e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e3c:	460c      	mov	r4, r1
 8014e3e:	4615      	mov	r5, r2
 8014e40:	461f      	mov	r7, r3
 8014e42:	2209      	movs	r2, #9
 8014e44:	3308      	adds	r3, #8
 8014e46:	4606      	mov	r6, r0
 8014e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	2201      	movs	r2, #1
 8014e50:	429a      	cmp	r2, r3
 8014e52:	db20      	blt.n	8014e96 <__s2b+0x5e>
 8014e54:	4630      	mov	r0, r6
 8014e56:	f7ff ff69 	bl	8014d2c <_Balloc>
 8014e5a:	9b08      	ldr	r3, [sp, #32]
 8014e5c:	6143      	str	r3, [r0, #20]
 8014e5e:	2d09      	cmp	r5, #9
 8014e60:	f04f 0301 	mov.w	r3, #1
 8014e64:	6103      	str	r3, [r0, #16]
 8014e66:	dd19      	ble.n	8014e9c <__s2b+0x64>
 8014e68:	f104 0809 	add.w	r8, r4, #9
 8014e6c:	46c1      	mov	r9, r8
 8014e6e:	442c      	add	r4, r5
 8014e70:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014e74:	4601      	mov	r1, r0
 8014e76:	3b30      	subs	r3, #48	; 0x30
 8014e78:	220a      	movs	r2, #10
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	f7ff ffa1 	bl	8014dc2 <__multadd>
 8014e80:	45a1      	cmp	r9, r4
 8014e82:	d1f5      	bne.n	8014e70 <__s2b+0x38>
 8014e84:	eb08 0405 	add.w	r4, r8, r5
 8014e88:	3c08      	subs	r4, #8
 8014e8a:	1b2d      	subs	r5, r5, r4
 8014e8c:	1963      	adds	r3, r4, r5
 8014e8e:	42bb      	cmp	r3, r7
 8014e90:	db07      	blt.n	8014ea2 <__s2b+0x6a>
 8014e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e96:	0052      	lsls	r2, r2, #1
 8014e98:	3101      	adds	r1, #1
 8014e9a:	e7d9      	b.n	8014e50 <__s2b+0x18>
 8014e9c:	340a      	adds	r4, #10
 8014e9e:	2509      	movs	r5, #9
 8014ea0:	e7f3      	b.n	8014e8a <__s2b+0x52>
 8014ea2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014ea6:	4601      	mov	r1, r0
 8014ea8:	3b30      	subs	r3, #48	; 0x30
 8014eaa:	220a      	movs	r2, #10
 8014eac:	4630      	mov	r0, r6
 8014eae:	f7ff ff88 	bl	8014dc2 <__multadd>
 8014eb2:	e7eb      	b.n	8014e8c <__s2b+0x54>

08014eb4 <__hi0bits>:
 8014eb4:	0c02      	lsrs	r2, r0, #16
 8014eb6:	0412      	lsls	r2, r2, #16
 8014eb8:	4603      	mov	r3, r0
 8014eba:	b9b2      	cbnz	r2, 8014eea <__hi0bits+0x36>
 8014ebc:	0403      	lsls	r3, r0, #16
 8014ebe:	2010      	movs	r0, #16
 8014ec0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014ec4:	bf04      	itt	eq
 8014ec6:	021b      	lsleq	r3, r3, #8
 8014ec8:	3008      	addeq	r0, #8
 8014eca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014ece:	bf04      	itt	eq
 8014ed0:	011b      	lsleq	r3, r3, #4
 8014ed2:	3004      	addeq	r0, #4
 8014ed4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014ed8:	bf04      	itt	eq
 8014eda:	009b      	lsleq	r3, r3, #2
 8014edc:	3002      	addeq	r0, #2
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	db06      	blt.n	8014ef0 <__hi0bits+0x3c>
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	d503      	bpl.n	8014eee <__hi0bits+0x3a>
 8014ee6:	3001      	adds	r0, #1
 8014ee8:	4770      	bx	lr
 8014eea:	2000      	movs	r0, #0
 8014eec:	e7e8      	b.n	8014ec0 <__hi0bits+0xc>
 8014eee:	2020      	movs	r0, #32
 8014ef0:	4770      	bx	lr

08014ef2 <__lo0bits>:
 8014ef2:	6803      	ldr	r3, [r0, #0]
 8014ef4:	f013 0207 	ands.w	r2, r3, #7
 8014ef8:	4601      	mov	r1, r0
 8014efa:	d00b      	beq.n	8014f14 <__lo0bits+0x22>
 8014efc:	07da      	lsls	r2, r3, #31
 8014efe:	d423      	bmi.n	8014f48 <__lo0bits+0x56>
 8014f00:	0798      	lsls	r0, r3, #30
 8014f02:	bf49      	itett	mi
 8014f04:	085b      	lsrmi	r3, r3, #1
 8014f06:	089b      	lsrpl	r3, r3, #2
 8014f08:	2001      	movmi	r0, #1
 8014f0a:	600b      	strmi	r3, [r1, #0]
 8014f0c:	bf5c      	itt	pl
 8014f0e:	600b      	strpl	r3, [r1, #0]
 8014f10:	2002      	movpl	r0, #2
 8014f12:	4770      	bx	lr
 8014f14:	b298      	uxth	r0, r3
 8014f16:	b9a8      	cbnz	r0, 8014f44 <__lo0bits+0x52>
 8014f18:	0c1b      	lsrs	r3, r3, #16
 8014f1a:	2010      	movs	r0, #16
 8014f1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014f20:	bf04      	itt	eq
 8014f22:	0a1b      	lsreq	r3, r3, #8
 8014f24:	3008      	addeq	r0, #8
 8014f26:	071a      	lsls	r2, r3, #28
 8014f28:	bf04      	itt	eq
 8014f2a:	091b      	lsreq	r3, r3, #4
 8014f2c:	3004      	addeq	r0, #4
 8014f2e:	079a      	lsls	r2, r3, #30
 8014f30:	bf04      	itt	eq
 8014f32:	089b      	lsreq	r3, r3, #2
 8014f34:	3002      	addeq	r0, #2
 8014f36:	07da      	lsls	r2, r3, #31
 8014f38:	d402      	bmi.n	8014f40 <__lo0bits+0x4e>
 8014f3a:	085b      	lsrs	r3, r3, #1
 8014f3c:	d006      	beq.n	8014f4c <__lo0bits+0x5a>
 8014f3e:	3001      	adds	r0, #1
 8014f40:	600b      	str	r3, [r1, #0]
 8014f42:	4770      	bx	lr
 8014f44:	4610      	mov	r0, r2
 8014f46:	e7e9      	b.n	8014f1c <__lo0bits+0x2a>
 8014f48:	2000      	movs	r0, #0
 8014f4a:	4770      	bx	lr
 8014f4c:	2020      	movs	r0, #32
 8014f4e:	4770      	bx	lr

08014f50 <__i2b>:
 8014f50:	b510      	push	{r4, lr}
 8014f52:	460c      	mov	r4, r1
 8014f54:	2101      	movs	r1, #1
 8014f56:	f7ff fee9 	bl	8014d2c <_Balloc>
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	6144      	str	r4, [r0, #20]
 8014f5e:	6102      	str	r2, [r0, #16]
 8014f60:	bd10      	pop	{r4, pc}

08014f62 <__multiply>:
 8014f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f66:	4614      	mov	r4, r2
 8014f68:	690a      	ldr	r2, [r1, #16]
 8014f6a:	6923      	ldr	r3, [r4, #16]
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	bfb8      	it	lt
 8014f70:	460b      	movlt	r3, r1
 8014f72:	4688      	mov	r8, r1
 8014f74:	bfbc      	itt	lt
 8014f76:	46a0      	movlt	r8, r4
 8014f78:	461c      	movlt	r4, r3
 8014f7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014f7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014f8a:	eb07 0609 	add.w	r6, r7, r9
 8014f8e:	42b3      	cmp	r3, r6
 8014f90:	bfb8      	it	lt
 8014f92:	3101      	addlt	r1, #1
 8014f94:	f7ff feca 	bl	8014d2c <_Balloc>
 8014f98:	f100 0514 	add.w	r5, r0, #20
 8014f9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014fa0:	462b      	mov	r3, r5
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	4573      	cmp	r3, lr
 8014fa6:	d316      	bcc.n	8014fd6 <__multiply+0x74>
 8014fa8:	f104 0214 	add.w	r2, r4, #20
 8014fac:	f108 0114 	add.w	r1, r8, #20
 8014fb0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014fb4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014fb8:	9300      	str	r3, [sp, #0]
 8014fba:	9b00      	ldr	r3, [sp, #0]
 8014fbc:	9201      	str	r2, [sp, #4]
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d80c      	bhi.n	8014fdc <__multiply+0x7a>
 8014fc2:	2e00      	cmp	r6, #0
 8014fc4:	dd03      	ble.n	8014fce <__multiply+0x6c>
 8014fc6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d05d      	beq.n	801508a <__multiply+0x128>
 8014fce:	6106      	str	r6, [r0, #16]
 8014fd0:	b003      	add	sp, #12
 8014fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd6:	f843 2b04 	str.w	r2, [r3], #4
 8014fda:	e7e3      	b.n	8014fa4 <__multiply+0x42>
 8014fdc:	f8b2 b000 	ldrh.w	fp, [r2]
 8014fe0:	f1bb 0f00 	cmp.w	fp, #0
 8014fe4:	d023      	beq.n	801502e <__multiply+0xcc>
 8014fe6:	4689      	mov	r9, r1
 8014fe8:	46ac      	mov	ip, r5
 8014fea:	f04f 0800 	mov.w	r8, #0
 8014fee:	f859 4b04 	ldr.w	r4, [r9], #4
 8014ff2:	f8dc a000 	ldr.w	sl, [ip]
 8014ff6:	b2a3      	uxth	r3, r4
 8014ff8:	fa1f fa8a 	uxth.w	sl, sl
 8014ffc:	fb0b a303 	mla	r3, fp, r3, sl
 8015000:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015004:	f8dc 4000 	ldr.w	r4, [ip]
 8015008:	4443      	add	r3, r8
 801500a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801500e:	fb0b 840a 	mla	r4, fp, sl, r8
 8015012:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015016:	46e2      	mov	sl, ip
 8015018:	b29b      	uxth	r3, r3
 801501a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801501e:	454f      	cmp	r7, r9
 8015020:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015024:	f84a 3b04 	str.w	r3, [sl], #4
 8015028:	d82b      	bhi.n	8015082 <__multiply+0x120>
 801502a:	f8cc 8004 	str.w	r8, [ip, #4]
 801502e:	9b01      	ldr	r3, [sp, #4]
 8015030:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015034:	3204      	adds	r2, #4
 8015036:	f1ba 0f00 	cmp.w	sl, #0
 801503a:	d020      	beq.n	801507e <__multiply+0x11c>
 801503c:	682b      	ldr	r3, [r5, #0]
 801503e:	4689      	mov	r9, r1
 8015040:	46a8      	mov	r8, r5
 8015042:	f04f 0b00 	mov.w	fp, #0
 8015046:	f8b9 c000 	ldrh.w	ip, [r9]
 801504a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801504e:	fb0a 440c 	mla	r4, sl, ip, r4
 8015052:	445c      	add	r4, fp
 8015054:	46c4      	mov	ip, r8
 8015056:	b29b      	uxth	r3, r3
 8015058:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801505c:	f84c 3b04 	str.w	r3, [ip], #4
 8015060:	f859 3b04 	ldr.w	r3, [r9], #4
 8015064:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015068:	0c1b      	lsrs	r3, r3, #16
 801506a:	fb0a b303 	mla	r3, sl, r3, fp
 801506e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015072:	454f      	cmp	r7, r9
 8015074:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015078:	d805      	bhi.n	8015086 <__multiply+0x124>
 801507a:	f8c8 3004 	str.w	r3, [r8, #4]
 801507e:	3504      	adds	r5, #4
 8015080:	e79b      	b.n	8014fba <__multiply+0x58>
 8015082:	46d4      	mov	ip, sl
 8015084:	e7b3      	b.n	8014fee <__multiply+0x8c>
 8015086:	46e0      	mov	r8, ip
 8015088:	e7dd      	b.n	8015046 <__multiply+0xe4>
 801508a:	3e01      	subs	r6, #1
 801508c:	e799      	b.n	8014fc2 <__multiply+0x60>
	...

08015090 <__pow5mult>:
 8015090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015094:	4615      	mov	r5, r2
 8015096:	f012 0203 	ands.w	r2, r2, #3
 801509a:	4606      	mov	r6, r0
 801509c:	460f      	mov	r7, r1
 801509e:	d007      	beq.n	80150b0 <__pow5mult+0x20>
 80150a0:	3a01      	subs	r2, #1
 80150a2:	4c21      	ldr	r4, [pc, #132]	; (8015128 <__pow5mult+0x98>)
 80150a4:	2300      	movs	r3, #0
 80150a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80150aa:	f7ff fe8a 	bl	8014dc2 <__multadd>
 80150ae:	4607      	mov	r7, r0
 80150b0:	10ad      	asrs	r5, r5, #2
 80150b2:	d035      	beq.n	8015120 <__pow5mult+0x90>
 80150b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80150b6:	b93c      	cbnz	r4, 80150c8 <__pow5mult+0x38>
 80150b8:	2010      	movs	r0, #16
 80150ba:	f7fd f807 	bl	80120cc <malloc>
 80150be:	6270      	str	r0, [r6, #36]	; 0x24
 80150c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80150c4:	6004      	str	r4, [r0, #0]
 80150c6:	60c4      	str	r4, [r0, #12]
 80150c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80150cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80150d0:	b94c      	cbnz	r4, 80150e6 <__pow5mult+0x56>
 80150d2:	f240 2171 	movw	r1, #625	; 0x271
 80150d6:	4630      	mov	r0, r6
 80150d8:	f7ff ff3a 	bl	8014f50 <__i2b>
 80150dc:	2300      	movs	r3, #0
 80150de:	f8c8 0008 	str.w	r0, [r8, #8]
 80150e2:	4604      	mov	r4, r0
 80150e4:	6003      	str	r3, [r0, #0]
 80150e6:	f04f 0800 	mov.w	r8, #0
 80150ea:	07eb      	lsls	r3, r5, #31
 80150ec:	d50a      	bpl.n	8015104 <__pow5mult+0x74>
 80150ee:	4639      	mov	r1, r7
 80150f0:	4622      	mov	r2, r4
 80150f2:	4630      	mov	r0, r6
 80150f4:	f7ff ff35 	bl	8014f62 <__multiply>
 80150f8:	4639      	mov	r1, r7
 80150fa:	4681      	mov	r9, r0
 80150fc:	4630      	mov	r0, r6
 80150fe:	f7ff fe49 	bl	8014d94 <_Bfree>
 8015102:	464f      	mov	r7, r9
 8015104:	106d      	asrs	r5, r5, #1
 8015106:	d00b      	beq.n	8015120 <__pow5mult+0x90>
 8015108:	6820      	ldr	r0, [r4, #0]
 801510a:	b938      	cbnz	r0, 801511c <__pow5mult+0x8c>
 801510c:	4622      	mov	r2, r4
 801510e:	4621      	mov	r1, r4
 8015110:	4630      	mov	r0, r6
 8015112:	f7ff ff26 	bl	8014f62 <__multiply>
 8015116:	6020      	str	r0, [r4, #0]
 8015118:	f8c0 8000 	str.w	r8, [r0]
 801511c:	4604      	mov	r4, r0
 801511e:	e7e4      	b.n	80150ea <__pow5mult+0x5a>
 8015120:	4638      	mov	r0, r7
 8015122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015126:	bf00      	nop
 8015128:	08022650 	.word	0x08022650

0801512c <__lshift>:
 801512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015130:	460c      	mov	r4, r1
 8015132:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015136:	6923      	ldr	r3, [r4, #16]
 8015138:	6849      	ldr	r1, [r1, #4]
 801513a:	eb0a 0903 	add.w	r9, sl, r3
 801513e:	68a3      	ldr	r3, [r4, #8]
 8015140:	4607      	mov	r7, r0
 8015142:	4616      	mov	r6, r2
 8015144:	f109 0501 	add.w	r5, r9, #1
 8015148:	42ab      	cmp	r3, r5
 801514a:	db32      	blt.n	80151b2 <__lshift+0x86>
 801514c:	4638      	mov	r0, r7
 801514e:	f7ff fded 	bl	8014d2c <_Balloc>
 8015152:	2300      	movs	r3, #0
 8015154:	4680      	mov	r8, r0
 8015156:	f100 0114 	add.w	r1, r0, #20
 801515a:	461a      	mov	r2, r3
 801515c:	4553      	cmp	r3, sl
 801515e:	db2b      	blt.n	80151b8 <__lshift+0x8c>
 8015160:	6920      	ldr	r0, [r4, #16]
 8015162:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015166:	f104 0314 	add.w	r3, r4, #20
 801516a:	f016 021f 	ands.w	r2, r6, #31
 801516e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015172:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015176:	d025      	beq.n	80151c4 <__lshift+0x98>
 8015178:	f1c2 0e20 	rsb	lr, r2, #32
 801517c:	2000      	movs	r0, #0
 801517e:	681e      	ldr	r6, [r3, #0]
 8015180:	468a      	mov	sl, r1
 8015182:	4096      	lsls	r6, r2
 8015184:	4330      	orrs	r0, r6
 8015186:	f84a 0b04 	str.w	r0, [sl], #4
 801518a:	f853 0b04 	ldr.w	r0, [r3], #4
 801518e:	459c      	cmp	ip, r3
 8015190:	fa20 f00e 	lsr.w	r0, r0, lr
 8015194:	d814      	bhi.n	80151c0 <__lshift+0x94>
 8015196:	6048      	str	r0, [r1, #4]
 8015198:	b108      	cbz	r0, 801519e <__lshift+0x72>
 801519a:	f109 0502 	add.w	r5, r9, #2
 801519e:	3d01      	subs	r5, #1
 80151a0:	4638      	mov	r0, r7
 80151a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80151a6:	4621      	mov	r1, r4
 80151a8:	f7ff fdf4 	bl	8014d94 <_Bfree>
 80151ac:	4640      	mov	r0, r8
 80151ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151b2:	3101      	adds	r1, #1
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	e7c7      	b.n	8015148 <__lshift+0x1c>
 80151b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80151bc:	3301      	adds	r3, #1
 80151be:	e7cd      	b.n	801515c <__lshift+0x30>
 80151c0:	4651      	mov	r1, sl
 80151c2:	e7dc      	b.n	801517e <__lshift+0x52>
 80151c4:	3904      	subs	r1, #4
 80151c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80151ce:	459c      	cmp	ip, r3
 80151d0:	d8f9      	bhi.n	80151c6 <__lshift+0x9a>
 80151d2:	e7e4      	b.n	801519e <__lshift+0x72>

080151d4 <__mcmp>:
 80151d4:	6903      	ldr	r3, [r0, #16]
 80151d6:	690a      	ldr	r2, [r1, #16]
 80151d8:	1a9b      	subs	r3, r3, r2
 80151da:	b530      	push	{r4, r5, lr}
 80151dc:	d10c      	bne.n	80151f8 <__mcmp+0x24>
 80151de:	0092      	lsls	r2, r2, #2
 80151e0:	3014      	adds	r0, #20
 80151e2:	3114      	adds	r1, #20
 80151e4:	1884      	adds	r4, r0, r2
 80151e6:	4411      	add	r1, r2
 80151e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80151ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80151f0:	4295      	cmp	r5, r2
 80151f2:	d003      	beq.n	80151fc <__mcmp+0x28>
 80151f4:	d305      	bcc.n	8015202 <__mcmp+0x2e>
 80151f6:	2301      	movs	r3, #1
 80151f8:	4618      	mov	r0, r3
 80151fa:	bd30      	pop	{r4, r5, pc}
 80151fc:	42a0      	cmp	r0, r4
 80151fe:	d3f3      	bcc.n	80151e8 <__mcmp+0x14>
 8015200:	e7fa      	b.n	80151f8 <__mcmp+0x24>
 8015202:	f04f 33ff 	mov.w	r3, #4294967295
 8015206:	e7f7      	b.n	80151f8 <__mcmp+0x24>

08015208 <__mdiff>:
 8015208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801520c:	460d      	mov	r5, r1
 801520e:	4607      	mov	r7, r0
 8015210:	4611      	mov	r1, r2
 8015212:	4628      	mov	r0, r5
 8015214:	4614      	mov	r4, r2
 8015216:	f7ff ffdd 	bl	80151d4 <__mcmp>
 801521a:	1e06      	subs	r6, r0, #0
 801521c:	d108      	bne.n	8015230 <__mdiff+0x28>
 801521e:	4631      	mov	r1, r6
 8015220:	4638      	mov	r0, r7
 8015222:	f7ff fd83 	bl	8014d2c <_Balloc>
 8015226:	2301      	movs	r3, #1
 8015228:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015230:	bfa4      	itt	ge
 8015232:	4623      	movge	r3, r4
 8015234:	462c      	movge	r4, r5
 8015236:	4638      	mov	r0, r7
 8015238:	6861      	ldr	r1, [r4, #4]
 801523a:	bfa6      	itte	ge
 801523c:	461d      	movge	r5, r3
 801523e:	2600      	movge	r6, #0
 8015240:	2601      	movlt	r6, #1
 8015242:	f7ff fd73 	bl	8014d2c <_Balloc>
 8015246:	692b      	ldr	r3, [r5, #16]
 8015248:	60c6      	str	r6, [r0, #12]
 801524a:	6926      	ldr	r6, [r4, #16]
 801524c:	f105 0914 	add.w	r9, r5, #20
 8015250:	f104 0214 	add.w	r2, r4, #20
 8015254:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015258:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801525c:	f100 0514 	add.w	r5, r0, #20
 8015260:	f04f 0e00 	mov.w	lr, #0
 8015264:	f852 ab04 	ldr.w	sl, [r2], #4
 8015268:	f859 4b04 	ldr.w	r4, [r9], #4
 801526c:	fa1e f18a 	uxtah	r1, lr, sl
 8015270:	b2a3      	uxth	r3, r4
 8015272:	1ac9      	subs	r1, r1, r3
 8015274:	0c23      	lsrs	r3, r4, #16
 8015276:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801527a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801527e:	b289      	uxth	r1, r1
 8015280:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015284:	45c8      	cmp	r8, r9
 8015286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801528a:	4694      	mov	ip, r2
 801528c:	f845 3b04 	str.w	r3, [r5], #4
 8015290:	d8e8      	bhi.n	8015264 <__mdiff+0x5c>
 8015292:	45bc      	cmp	ip, r7
 8015294:	d304      	bcc.n	80152a0 <__mdiff+0x98>
 8015296:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801529a:	b183      	cbz	r3, 80152be <__mdiff+0xb6>
 801529c:	6106      	str	r6, [r0, #16]
 801529e:	e7c5      	b.n	801522c <__mdiff+0x24>
 80152a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80152a4:	fa1e f381 	uxtah	r3, lr, r1
 80152a8:	141a      	asrs	r2, r3, #16
 80152aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80152b8:	f845 3b04 	str.w	r3, [r5], #4
 80152bc:	e7e9      	b.n	8015292 <__mdiff+0x8a>
 80152be:	3e01      	subs	r6, #1
 80152c0:	e7e9      	b.n	8015296 <__mdiff+0x8e>
	...

080152c4 <__ulp>:
 80152c4:	4b12      	ldr	r3, [pc, #72]	; (8015310 <__ulp+0x4c>)
 80152c6:	ee10 2a90 	vmov	r2, s1
 80152ca:	401a      	ands	r2, r3
 80152cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	dd04      	ble.n	80152de <__ulp+0x1a>
 80152d4:	2000      	movs	r0, #0
 80152d6:	4619      	mov	r1, r3
 80152d8:	ec41 0b10 	vmov	d0, r0, r1
 80152dc:	4770      	bx	lr
 80152de:	425b      	negs	r3, r3
 80152e0:	151b      	asrs	r3, r3, #20
 80152e2:	2b13      	cmp	r3, #19
 80152e4:	f04f 0000 	mov.w	r0, #0
 80152e8:	f04f 0100 	mov.w	r1, #0
 80152ec:	dc04      	bgt.n	80152f8 <__ulp+0x34>
 80152ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80152f2:	fa42 f103 	asr.w	r1, r2, r3
 80152f6:	e7ef      	b.n	80152d8 <__ulp+0x14>
 80152f8:	3b14      	subs	r3, #20
 80152fa:	2b1e      	cmp	r3, #30
 80152fc:	f04f 0201 	mov.w	r2, #1
 8015300:	bfda      	itte	le
 8015302:	f1c3 031f 	rsble	r3, r3, #31
 8015306:	fa02 f303 	lslle.w	r3, r2, r3
 801530a:	4613      	movgt	r3, r2
 801530c:	4618      	mov	r0, r3
 801530e:	e7e3      	b.n	80152d8 <__ulp+0x14>
 8015310:	7ff00000 	.word	0x7ff00000

08015314 <__b2d>:
 8015314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015316:	6905      	ldr	r5, [r0, #16]
 8015318:	f100 0714 	add.w	r7, r0, #20
 801531c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015320:	1f2e      	subs	r6, r5, #4
 8015322:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015326:	4620      	mov	r0, r4
 8015328:	f7ff fdc4 	bl	8014eb4 <__hi0bits>
 801532c:	f1c0 0320 	rsb	r3, r0, #32
 8015330:	280a      	cmp	r0, #10
 8015332:	600b      	str	r3, [r1, #0]
 8015334:	f8df c074 	ldr.w	ip, [pc, #116]	; 80153ac <__b2d+0x98>
 8015338:	dc14      	bgt.n	8015364 <__b2d+0x50>
 801533a:	f1c0 0e0b 	rsb	lr, r0, #11
 801533e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015342:	42b7      	cmp	r7, r6
 8015344:	ea41 030c 	orr.w	r3, r1, ip
 8015348:	bf34      	ite	cc
 801534a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801534e:	2100      	movcs	r1, #0
 8015350:	3015      	adds	r0, #21
 8015352:	fa04 f000 	lsl.w	r0, r4, r0
 8015356:	fa21 f10e 	lsr.w	r1, r1, lr
 801535a:	ea40 0201 	orr.w	r2, r0, r1
 801535e:	ec43 2b10 	vmov	d0, r2, r3
 8015362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015364:	42b7      	cmp	r7, r6
 8015366:	bf3a      	itte	cc
 8015368:	f1a5 0608 	subcc.w	r6, r5, #8
 801536c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015370:	2100      	movcs	r1, #0
 8015372:	380b      	subs	r0, #11
 8015374:	d015      	beq.n	80153a2 <__b2d+0x8e>
 8015376:	4084      	lsls	r4, r0
 8015378:	f1c0 0520 	rsb	r5, r0, #32
 801537c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015380:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015384:	42be      	cmp	r6, r7
 8015386:	fa21 fc05 	lsr.w	ip, r1, r5
 801538a:	ea44 030c 	orr.w	r3, r4, ip
 801538e:	bf8c      	ite	hi
 8015390:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015394:	2400      	movls	r4, #0
 8015396:	fa01 f000 	lsl.w	r0, r1, r0
 801539a:	40ec      	lsrs	r4, r5
 801539c:	ea40 0204 	orr.w	r2, r0, r4
 80153a0:	e7dd      	b.n	801535e <__b2d+0x4a>
 80153a2:	ea44 030c 	orr.w	r3, r4, ip
 80153a6:	460a      	mov	r2, r1
 80153a8:	e7d9      	b.n	801535e <__b2d+0x4a>
 80153aa:	bf00      	nop
 80153ac:	3ff00000 	.word	0x3ff00000

080153b0 <__d2b>:
 80153b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80153b4:	460e      	mov	r6, r1
 80153b6:	2101      	movs	r1, #1
 80153b8:	ec59 8b10 	vmov	r8, r9, d0
 80153bc:	4615      	mov	r5, r2
 80153be:	f7ff fcb5 	bl	8014d2c <_Balloc>
 80153c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80153c6:	4607      	mov	r7, r0
 80153c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153cc:	bb34      	cbnz	r4, 801541c <__d2b+0x6c>
 80153ce:	9301      	str	r3, [sp, #4]
 80153d0:	f1b8 0300 	subs.w	r3, r8, #0
 80153d4:	d027      	beq.n	8015426 <__d2b+0x76>
 80153d6:	a802      	add	r0, sp, #8
 80153d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80153dc:	f7ff fd89 	bl	8014ef2 <__lo0bits>
 80153e0:	9900      	ldr	r1, [sp, #0]
 80153e2:	b1f0      	cbz	r0, 8015422 <__d2b+0x72>
 80153e4:	9a01      	ldr	r2, [sp, #4]
 80153e6:	f1c0 0320 	rsb	r3, r0, #32
 80153ea:	fa02 f303 	lsl.w	r3, r2, r3
 80153ee:	430b      	orrs	r3, r1
 80153f0:	40c2      	lsrs	r2, r0
 80153f2:	617b      	str	r3, [r7, #20]
 80153f4:	9201      	str	r2, [sp, #4]
 80153f6:	9b01      	ldr	r3, [sp, #4]
 80153f8:	61bb      	str	r3, [r7, #24]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	bf14      	ite	ne
 80153fe:	2102      	movne	r1, #2
 8015400:	2101      	moveq	r1, #1
 8015402:	6139      	str	r1, [r7, #16]
 8015404:	b1c4      	cbz	r4, 8015438 <__d2b+0x88>
 8015406:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801540a:	4404      	add	r4, r0
 801540c:	6034      	str	r4, [r6, #0]
 801540e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015412:	6028      	str	r0, [r5, #0]
 8015414:	4638      	mov	r0, r7
 8015416:	b003      	add	sp, #12
 8015418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801541c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015420:	e7d5      	b.n	80153ce <__d2b+0x1e>
 8015422:	6179      	str	r1, [r7, #20]
 8015424:	e7e7      	b.n	80153f6 <__d2b+0x46>
 8015426:	a801      	add	r0, sp, #4
 8015428:	f7ff fd63 	bl	8014ef2 <__lo0bits>
 801542c:	9b01      	ldr	r3, [sp, #4]
 801542e:	617b      	str	r3, [r7, #20]
 8015430:	2101      	movs	r1, #1
 8015432:	6139      	str	r1, [r7, #16]
 8015434:	3020      	adds	r0, #32
 8015436:	e7e5      	b.n	8015404 <__d2b+0x54>
 8015438:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801543c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015440:	6030      	str	r0, [r6, #0]
 8015442:	6918      	ldr	r0, [r3, #16]
 8015444:	f7ff fd36 	bl	8014eb4 <__hi0bits>
 8015448:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801544c:	e7e1      	b.n	8015412 <__d2b+0x62>

0801544e <__ratio>:
 801544e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015452:	4688      	mov	r8, r1
 8015454:	4669      	mov	r1, sp
 8015456:	4681      	mov	r9, r0
 8015458:	f7ff ff5c 	bl	8015314 <__b2d>
 801545c:	a901      	add	r1, sp, #4
 801545e:	4640      	mov	r0, r8
 8015460:	ec57 6b10 	vmov	r6, r7, d0
 8015464:	f7ff ff56 	bl	8015314 <__b2d>
 8015468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801546c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015470:	eba3 0c02 	sub.w	ip, r3, r2
 8015474:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015478:	1a9b      	subs	r3, r3, r2
 801547a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801547e:	ec5b ab10 	vmov	sl, fp, d0
 8015482:	2b00      	cmp	r3, #0
 8015484:	bfce      	itee	gt
 8015486:	463a      	movgt	r2, r7
 8015488:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801548c:	465a      	movle	r2, fp
 801548e:	4659      	mov	r1, fp
 8015490:	463d      	mov	r5, r7
 8015492:	bfd4      	ite	le
 8015494:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015498:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801549c:	4630      	mov	r0, r6
 801549e:	ee10 2a10 	vmov	r2, s0
 80154a2:	460b      	mov	r3, r1
 80154a4:	4629      	mov	r1, r5
 80154a6:	f7eb f9e9 	bl	800087c <__aeabi_ddiv>
 80154aa:	ec41 0b10 	vmov	d0, r0, r1
 80154ae:	b003      	add	sp, #12
 80154b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154b4 <__copybits>:
 80154b4:	3901      	subs	r1, #1
 80154b6:	b510      	push	{r4, lr}
 80154b8:	1149      	asrs	r1, r1, #5
 80154ba:	6914      	ldr	r4, [r2, #16]
 80154bc:	3101      	adds	r1, #1
 80154be:	f102 0314 	add.w	r3, r2, #20
 80154c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80154c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80154ca:	42a3      	cmp	r3, r4
 80154cc:	4602      	mov	r2, r0
 80154ce:	d303      	bcc.n	80154d8 <__copybits+0x24>
 80154d0:	2300      	movs	r3, #0
 80154d2:	428a      	cmp	r2, r1
 80154d4:	d305      	bcc.n	80154e2 <__copybits+0x2e>
 80154d6:	bd10      	pop	{r4, pc}
 80154d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80154dc:	f840 2b04 	str.w	r2, [r0], #4
 80154e0:	e7f3      	b.n	80154ca <__copybits+0x16>
 80154e2:	f842 3b04 	str.w	r3, [r2], #4
 80154e6:	e7f4      	b.n	80154d2 <__copybits+0x1e>

080154e8 <__any_on>:
 80154e8:	f100 0214 	add.w	r2, r0, #20
 80154ec:	6900      	ldr	r0, [r0, #16]
 80154ee:	114b      	asrs	r3, r1, #5
 80154f0:	4298      	cmp	r0, r3
 80154f2:	b510      	push	{r4, lr}
 80154f4:	db11      	blt.n	801551a <__any_on+0x32>
 80154f6:	dd0a      	ble.n	801550e <__any_on+0x26>
 80154f8:	f011 011f 	ands.w	r1, r1, #31
 80154fc:	d007      	beq.n	801550e <__any_on+0x26>
 80154fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015502:	fa24 f001 	lsr.w	r0, r4, r1
 8015506:	fa00 f101 	lsl.w	r1, r0, r1
 801550a:	428c      	cmp	r4, r1
 801550c:	d10b      	bne.n	8015526 <__any_on+0x3e>
 801550e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015512:	4293      	cmp	r3, r2
 8015514:	d803      	bhi.n	801551e <__any_on+0x36>
 8015516:	2000      	movs	r0, #0
 8015518:	bd10      	pop	{r4, pc}
 801551a:	4603      	mov	r3, r0
 801551c:	e7f7      	b.n	801550e <__any_on+0x26>
 801551e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015522:	2900      	cmp	r1, #0
 8015524:	d0f5      	beq.n	8015512 <__any_on+0x2a>
 8015526:	2001      	movs	r0, #1
 8015528:	e7f6      	b.n	8015518 <__any_on+0x30>

0801552a <_calloc_r>:
 801552a:	b538      	push	{r3, r4, r5, lr}
 801552c:	fb02 f401 	mul.w	r4, r2, r1
 8015530:	4621      	mov	r1, r4
 8015532:	f7fc fe3d 	bl	80121b0 <_malloc_r>
 8015536:	4605      	mov	r5, r0
 8015538:	b118      	cbz	r0, 8015542 <_calloc_r+0x18>
 801553a:	4622      	mov	r2, r4
 801553c:	2100      	movs	r1, #0
 801553e:	f7fc fde0 	bl	8012102 <memset>
 8015542:	4628      	mov	r0, r5
 8015544:	bd38      	pop	{r3, r4, r5, pc}

08015546 <__ssputs_r>:
 8015546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801554a:	688e      	ldr	r6, [r1, #8]
 801554c:	429e      	cmp	r6, r3
 801554e:	4682      	mov	sl, r0
 8015550:	460c      	mov	r4, r1
 8015552:	4690      	mov	r8, r2
 8015554:	4699      	mov	r9, r3
 8015556:	d837      	bhi.n	80155c8 <__ssputs_r+0x82>
 8015558:	898a      	ldrh	r2, [r1, #12]
 801555a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801555e:	d031      	beq.n	80155c4 <__ssputs_r+0x7e>
 8015560:	6825      	ldr	r5, [r4, #0]
 8015562:	6909      	ldr	r1, [r1, #16]
 8015564:	1a6f      	subs	r7, r5, r1
 8015566:	6965      	ldr	r5, [r4, #20]
 8015568:	2302      	movs	r3, #2
 801556a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801556e:	fb95 f5f3 	sdiv	r5, r5, r3
 8015572:	f109 0301 	add.w	r3, r9, #1
 8015576:	443b      	add	r3, r7
 8015578:	429d      	cmp	r5, r3
 801557a:	bf38      	it	cc
 801557c:	461d      	movcc	r5, r3
 801557e:	0553      	lsls	r3, r2, #21
 8015580:	d530      	bpl.n	80155e4 <__ssputs_r+0x9e>
 8015582:	4629      	mov	r1, r5
 8015584:	f7fc fe14 	bl	80121b0 <_malloc_r>
 8015588:	4606      	mov	r6, r0
 801558a:	b950      	cbnz	r0, 80155a2 <__ssputs_r+0x5c>
 801558c:	230c      	movs	r3, #12
 801558e:	f8ca 3000 	str.w	r3, [sl]
 8015592:	89a3      	ldrh	r3, [r4, #12]
 8015594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015598:	81a3      	strh	r3, [r4, #12]
 801559a:	f04f 30ff 	mov.w	r0, #4294967295
 801559e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a2:	463a      	mov	r2, r7
 80155a4:	6921      	ldr	r1, [r4, #16]
 80155a6:	f7fc fda1 	bl	80120ec <memcpy>
 80155aa:	89a3      	ldrh	r3, [r4, #12]
 80155ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80155b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155b4:	81a3      	strh	r3, [r4, #12]
 80155b6:	6126      	str	r6, [r4, #16]
 80155b8:	6165      	str	r5, [r4, #20]
 80155ba:	443e      	add	r6, r7
 80155bc:	1bed      	subs	r5, r5, r7
 80155be:	6026      	str	r6, [r4, #0]
 80155c0:	60a5      	str	r5, [r4, #8]
 80155c2:	464e      	mov	r6, r9
 80155c4:	454e      	cmp	r6, r9
 80155c6:	d900      	bls.n	80155ca <__ssputs_r+0x84>
 80155c8:	464e      	mov	r6, r9
 80155ca:	4632      	mov	r2, r6
 80155cc:	4641      	mov	r1, r8
 80155ce:	6820      	ldr	r0, [r4, #0]
 80155d0:	f000 f931 	bl	8015836 <memmove>
 80155d4:	68a3      	ldr	r3, [r4, #8]
 80155d6:	1b9b      	subs	r3, r3, r6
 80155d8:	60a3      	str	r3, [r4, #8]
 80155da:	6823      	ldr	r3, [r4, #0]
 80155dc:	441e      	add	r6, r3
 80155de:	6026      	str	r6, [r4, #0]
 80155e0:	2000      	movs	r0, #0
 80155e2:	e7dc      	b.n	801559e <__ssputs_r+0x58>
 80155e4:	462a      	mov	r2, r5
 80155e6:	f000 f93f 	bl	8015868 <_realloc_r>
 80155ea:	4606      	mov	r6, r0
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d1e2      	bne.n	80155b6 <__ssputs_r+0x70>
 80155f0:	6921      	ldr	r1, [r4, #16]
 80155f2:	4650      	mov	r0, sl
 80155f4:	f7fc fd8e 	bl	8012114 <_free_r>
 80155f8:	e7c8      	b.n	801558c <__ssputs_r+0x46>
	...

080155fc <_svfiprintf_r>:
 80155fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015600:	461d      	mov	r5, r3
 8015602:	898b      	ldrh	r3, [r1, #12]
 8015604:	061f      	lsls	r7, r3, #24
 8015606:	b09d      	sub	sp, #116	; 0x74
 8015608:	4680      	mov	r8, r0
 801560a:	460c      	mov	r4, r1
 801560c:	4616      	mov	r6, r2
 801560e:	d50f      	bpl.n	8015630 <_svfiprintf_r+0x34>
 8015610:	690b      	ldr	r3, [r1, #16]
 8015612:	b96b      	cbnz	r3, 8015630 <_svfiprintf_r+0x34>
 8015614:	2140      	movs	r1, #64	; 0x40
 8015616:	f7fc fdcb 	bl	80121b0 <_malloc_r>
 801561a:	6020      	str	r0, [r4, #0]
 801561c:	6120      	str	r0, [r4, #16]
 801561e:	b928      	cbnz	r0, 801562c <_svfiprintf_r+0x30>
 8015620:	230c      	movs	r3, #12
 8015622:	f8c8 3000 	str.w	r3, [r8]
 8015626:	f04f 30ff 	mov.w	r0, #4294967295
 801562a:	e0c8      	b.n	80157be <_svfiprintf_r+0x1c2>
 801562c:	2340      	movs	r3, #64	; 0x40
 801562e:	6163      	str	r3, [r4, #20]
 8015630:	2300      	movs	r3, #0
 8015632:	9309      	str	r3, [sp, #36]	; 0x24
 8015634:	2320      	movs	r3, #32
 8015636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801563a:	2330      	movs	r3, #48	; 0x30
 801563c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015640:	9503      	str	r5, [sp, #12]
 8015642:	f04f 0b01 	mov.w	fp, #1
 8015646:	4637      	mov	r7, r6
 8015648:	463d      	mov	r5, r7
 801564a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801564e:	b10b      	cbz	r3, 8015654 <_svfiprintf_r+0x58>
 8015650:	2b25      	cmp	r3, #37	; 0x25
 8015652:	d13e      	bne.n	80156d2 <_svfiprintf_r+0xd6>
 8015654:	ebb7 0a06 	subs.w	sl, r7, r6
 8015658:	d00b      	beq.n	8015672 <_svfiprintf_r+0x76>
 801565a:	4653      	mov	r3, sl
 801565c:	4632      	mov	r2, r6
 801565e:	4621      	mov	r1, r4
 8015660:	4640      	mov	r0, r8
 8015662:	f7ff ff70 	bl	8015546 <__ssputs_r>
 8015666:	3001      	adds	r0, #1
 8015668:	f000 80a4 	beq.w	80157b4 <_svfiprintf_r+0x1b8>
 801566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801566e:	4453      	add	r3, sl
 8015670:	9309      	str	r3, [sp, #36]	; 0x24
 8015672:	783b      	ldrb	r3, [r7, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	f000 809d 	beq.w	80157b4 <_svfiprintf_r+0x1b8>
 801567a:	2300      	movs	r3, #0
 801567c:	f04f 32ff 	mov.w	r2, #4294967295
 8015680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015684:	9304      	str	r3, [sp, #16]
 8015686:	9307      	str	r3, [sp, #28]
 8015688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801568c:	931a      	str	r3, [sp, #104]	; 0x68
 801568e:	462f      	mov	r7, r5
 8015690:	2205      	movs	r2, #5
 8015692:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015696:	4850      	ldr	r0, [pc, #320]	; (80157d8 <_svfiprintf_r+0x1dc>)
 8015698:	f7ea fdba 	bl	8000210 <memchr>
 801569c:	9b04      	ldr	r3, [sp, #16]
 801569e:	b9d0      	cbnz	r0, 80156d6 <_svfiprintf_r+0xda>
 80156a0:	06d9      	lsls	r1, r3, #27
 80156a2:	bf44      	itt	mi
 80156a4:	2220      	movmi	r2, #32
 80156a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156aa:	071a      	lsls	r2, r3, #28
 80156ac:	bf44      	itt	mi
 80156ae:	222b      	movmi	r2, #43	; 0x2b
 80156b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156b4:	782a      	ldrb	r2, [r5, #0]
 80156b6:	2a2a      	cmp	r2, #42	; 0x2a
 80156b8:	d015      	beq.n	80156e6 <_svfiprintf_r+0xea>
 80156ba:	9a07      	ldr	r2, [sp, #28]
 80156bc:	462f      	mov	r7, r5
 80156be:	2000      	movs	r0, #0
 80156c0:	250a      	movs	r5, #10
 80156c2:	4639      	mov	r1, r7
 80156c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156c8:	3b30      	subs	r3, #48	; 0x30
 80156ca:	2b09      	cmp	r3, #9
 80156cc:	d94d      	bls.n	801576a <_svfiprintf_r+0x16e>
 80156ce:	b1b8      	cbz	r0, 8015700 <_svfiprintf_r+0x104>
 80156d0:	e00f      	b.n	80156f2 <_svfiprintf_r+0xf6>
 80156d2:	462f      	mov	r7, r5
 80156d4:	e7b8      	b.n	8015648 <_svfiprintf_r+0x4c>
 80156d6:	4a40      	ldr	r2, [pc, #256]	; (80157d8 <_svfiprintf_r+0x1dc>)
 80156d8:	1a80      	subs	r0, r0, r2
 80156da:	fa0b f000 	lsl.w	r0, fp, r0
 80156de:	4318      	orrs	r0, r3
 80156e0:	9004      	str	r0, [sp, #16]
 80156e2:	463d      	mov	r5, r7
 80156e4:	e7d3      	b.n	801568e <_svfiprintf_r+0x92>
 80156e6:	9a03      	ldr	r2, [sp, #12]
 80156e8:	1d11      	adds	r1, r2, #4
 80156ea:	6812      	ldr	r2, [r2, #0]
 80156ec:	9103      	str	r1, [sp, #12]
 80156ee:	2a00      	cmp	r2, #0
 80156f0:	db01      	blt.n	80156f6 <_svfiprintf_r+0xfa>
 80156f2:	9207      	str	r2, [sp, #28]
 80156f4:	e004      	b.n	8015700 <_svfiprintf_r+0x104>
 80156f6:	4252      	negs	r2, r2
 80156f8:	f043 0302 	orr.w	r3, r3, #2
 80156fc:	9207      	str	r2, [sp, #28]
 80156fe:	9304      	str	r3, [sp, #16]
 8015700:	783b      	ldrb	r3, [r7, #0]
 8015702:	2b2e      	cmp	r3, #46	; 0x2e
 8015704:	d10c      	bne.n	8015720 <_svfiprintf_r+0x124>
 8015706:	787b      	ldrb	r3, [r7, #1]
 8015708:	2b2a      	cmp	r3, #42	; 0x2a
 801570a:	d133      	bne.n	8015774 <_svfiprintf_r+0x178>
 801570c:	9b03      	ldr	r3, [sp, #12]
 801570e:	1d1a      	adds	r2, r3, #4
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	9203      	str	r2, [sp, #12]
 8015714:	2b00      	cmp	r3, #0
 8015716:	bfb8      	it	lt
 8015718:	f04f 33ff 	movlt.w	r3, #4294967295
 801571c:	3702      	adds	r7, #2
 801571e:	9305      	str	r3, [sp, #20]
 8015720:	4d2e      	ldr	r5, [pc, #184]	; (80157dc <_svfiprintf_r+0x1e0>)
 8015722:	7839      	ldrb	r1, [r7, #0]
 8015724:	2203      	movs	r2, #3
 8015726:	4628      	mov	r0, r5
 8015728:	f7ea fd72 	bl	8000210 <memchr>
 801572c:	b138      	cbz	r0, 801573e <_svfiprintf_r+0x142>
 801572e:	2340      	movs	r3, #64	; 0x40
 8015730:	1b40      	subs	r0, r0, r5
 8015732:	fa03 f000 	lsl.w	r0, r3, r0
 8015736:	9b04      	ldr	r3, [sp, #16]
 8015738:	4303      	orrs	r3, r0
 801573a:	3701      	adds	r7, #1
 801573c:	9304      	str	r3, [sp, #16]
 801573e:	7839      	ldrb	r1, [r7, #0]
 8015740:	4827      	ldr	r0, [pc, #156]	; (80157e0 <_svfiprintf_r+0x1e4>)
 8015742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015746:	2206      	movs	r2, #6
 8015748:	1c7e      	adds	r6, r7, #1
 801574a:	f7ea fd61 	bl	8000210 <memchr>
 801574e:	2800      	cmp	r0, #0
 8015750:	d038      	beq.n	80157c4 <_svfiprintf_r+0x1c8>
 8015752:	4b24      	ldr	r3, [pc, #144]	; (80157e4 <_svfiprintf_r+0x1e8>)
 8015754:	bb13      	cbnz	r3, 801579c <_svfiprintf_r+0x1a0>
 8015756:	9b03      	ldr	r3, [sp, #12]
 8015758:	3307      	adds	r3, #7
 801575a:	f023 0307 	bic.w	r3, r3, #7
 801575e:	3308      	adds	r3, #8
 8015760:	9303      	str	r3, [sp, #12]
 8015762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015764:	444b      	add	r3, r9
 8015766:	9309      	str	r3, [sp, #36]	; 0x24
 8015768:	e76d      	b.n	8015646 <_svfiprintf_r+0x4a>
 801576a:	fb05 3202 	mla	r2, r5, r2, r3
 801576e:	2001      	movs	r0, #1
 8015770:	460f      	mov	r7, r1
 8015772:	e7a6      	b.n	80156c2 <_svfiprintf_r+0xc6>
 8015774:	2300      	movs	r3, #0
 8015776:	3701      	adds	r7, #1
 8015778:	9305      	str	r3, [sp, #20]
 801577a:	4619      	mov	r1, r3
 801577c:	250a      	movs	r5, #10
 801577e:	4638      	mov	r0, r7
 8015780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015784:	3a30      	subs	r2, #48	; 0x30
 8015786:	2a09      	cmp	r2, #9
 8015788:	d903      	bls.n	8015792 <_svfiprintf_r+0x196>
 801578a:	2b00      	cmp	r3, #0
 801578c:	d0c8      	beq.n	8015720 <_svfiprintf_r+0x124>
 801578e:	9105      	str	r1, [sp, #20]
 8015790:	e7c6      	b.n	8015720 <_svfiprintf_r+0x124>
 8015792:	fb05 2101 	mla	r1, r5, r1, r2
 8015796:	2301      	movs	r3, #1
 8015798:	4607      	mov	r7, r0
 801579a:	e7f0      	b.n	801577e <_svfiprintf_r+0x182>
 801579c:	ab03      	add	r3, sp, #12
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	4622      	mov	r2, r4
 80157a2:	4b11      	ldr	r3, [pc, #68]	; (80157e8 <_svfiprintf_r+0x1ec>)
 80157a4:	a904      	add	r1, sp, #16
 80157a6:	4640      	mov	r0, r8
 80157a8:	f7fc fdf0 	bl	801238c <_printf_float>
 80157ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80157b0:	4681      	mov	r9, r0
 80157b2:	d1d6      	bne.n	8015762 <_svfiprintf_r+0x166>
 80157b4:	89a3      	ldrh	r3, [r4, #12]
 80157b6:	065b      	lsls	r3, r3, #25
 80157b8:	f53f af35 	bmi.w	8015626 <_svfiprintf_r+0x2a>
 80157bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157be:	b01d      	add	sp, #116	; 0x74
 80157c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c4:	ab03      	add	r3, sp, #12
 80157c6:	9300      	str	r3, [sp, #0]
 80157c8:	4622      	mov	r2, r4
 80157ca:	4b07      	ldr	r3, [pc, #28]	; (80157e8 <_svfiprintf_r+0x1ec>)
 80157cc:	a904      	add	r1, sp, #16
 80157ce:	4640      	mov	r0, r8
 80157d0:	f7fd f892 	bl	80128f8 <_printf_i>
 80157d4:	e7ea      	b.n	80157ac <_svfiprintf_r+0x1b0>
 80157d6:	bf00      	nop
 80157d8:	0802265c 	.word	0x0802265c
 80157dc:	08022662 	.word	0x08022662
 80157e0:	08022666 	.word	0x08022666
 80157e4:	0801238d 	.word	0x0801238d
 80157e8:	08015547 	.word	0x08015547

080157ec <nanf>:
 80157ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80157f4 <nanf+0x8>
 80157f0:	4770      	bx	lr
 80157f2:	bf00      	nop
 80157f4:	7fc00000 	.word	0x7fc00000

080157f8 <strncmp>:
 80157f8:	b510      	push	{r4, lr}
 80157fa:	b16a      	cbz	r2, 8015818 <strncmp+0x20>
 80157fc:	3901      	subs	r1, #1
 80157fe:	1884      	adds	r4, r0, r2
 8015800:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015804:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015808:	4293      	cmp	r3, r2
 801580a:	d103      	bne.n	8015814 <strncmp+0x1c>
 801580c:	42a0      	cmp	r0, r4
 801580e:	d001      	beq.n	8015814 <strncmp+0x1c>
 8015810:	2b00      	cmp	r3, #0
 8015812:	d1f5      	bne.n	8015800 <strncmp+0x8>
 8015814:	1a98      	subs	r0, r3, r2
 8015816:	bd10      	pop	{r4, pc}
 8015818:	4610      	mov	r0, r2
 801581a:	e7fc      	b.n	8015816 <strncmp+0x1e>

0801581c <__ascii_wctomb>:
 801581c:	b149      	cbz	r1, 8015832 <__ascii_wctomb+0x16>
 801581e:	2aff      	cmp	r2, #255	; 0xff
 8015820:	bf85      	ittet	hi
 8015822:	238a      	movhi	r3, #138	; 0x8a
 8015824:	6003      	strhi	r3, [r0, #0]
 8015826:	700a      	strbls	r2, [r1, #0]
 8015828:	f04f 30ff 	movhi.w	r0, #4294967295
 801582c:	bf98      	it	ls
 801582e:	2001      	movls	r0, #1
 8015830:	4770      	bx	lr
 8015832:	4608      	mov	r0, r1
 8015834:	4770      	bx	lr

08015836 <memmove>:
 8015836:	4288      	cmp	r0, r1
 8015838:	b510      	push	{r4, lr}
 801583a:	eb01 0302 	add.w	r3, r1, r2
 801583e:	d807      	bhi.n	8015850 <memmove+0x1a>
 8015840:	1e42      	subs	r2, r0, #1
 8015842:	4299      	cmp	r1, r3
 8015844:	d00a      	beq.n	801585c <memmove+0x26>
 8015846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801584a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801584e:	e7f8      	b.n	8015842 <memmove+0xc>
 8015850:	4283      	cmp	r3, r0
 8015852:	d9f5      	bls.n	8015840 <memmove+0xa>
 8015854:	1881      	adds	r1, r0, r2
 8015856:	1ad2      	subs	r2, r2, r3
 8015858:	42d3      	cmn	r3, r2
 801585a:	d100      	bne.n	801585e <memmove+0x28>
 801585c:	bd10      	pop	{r4, pc}
 801585e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015862:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015866:	e7f7      	b.n	8015858 <memmove+0x22>

08015868 <_realloc_r>:
 8015868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801586a:	4607      	mov	r7, r0
 801586c:	4614      	mov	r4, r2
 801586e:	460e      	mov	r6, r1
 8015870:	b921      	cbnz	r1, 801587c <_realloc_r+0x14>
 8015872:	4611      	mov	r1, r2
 8015874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015878:	f7fc bc9a 	b.w	80121b0 <_malloc_r>
 801587c:	b922      	cbnz	r2, 8015888 <_realloc_r+0x20>
 801587e:	f7fc fc49 	bl	8012114 <_free_r>
 8015882:	4625      	mov	r5, r4
 8015884:	4628      	mov	r0, r5
 8015886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015888:	f000 f814 	bl	80158b4 <_malloc_usable_size_r>
 801588c:	42a0      	cmp	r0, r4
 801588e:	d20f      	bcs.n	80158b0 <_realloc_r+0x48>
 8015890:	4621      	mov	r1, r4
 8015892:	4638      	mov	r0, r7
 8015894:	f7fc fc8c 	bl	80121b0 <_malloc_r>
 8015898:	4605      	mov	r5, r0
 801589a:	2800      	cmp	r0, #0
 801589c:	d0f2      	beq.n	8015884 <_realloc_r+0x1c>
 801589e:	4631      	mov	r1, r6
 80158a0:	4622      	mov	r2, r4
 80158a2:	f7fc fc23 	bl	80120ec <memcpy>
 80158a6:	4631      	mov	r1, r6
 80158a8:	4638      	mov	r0, r7
 80158aa:	f7fc fc33 	bl	8012114 <_free_r>
 80158ae:	e7e9      	b.n	8015884 <_realloc_r+0x1c>
 80158b0:	4635      	mov	r5, r6
 80158b2:	e7e7      	b.n	8015884 <_realloc_r+0x1c>

080158b4 <_malloc_usable_size_r>:
 80158b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158b8:	1f18      	subs	r0, r3, #4
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	bfbc      	itt	lt
 80158be:	580b      	ldrlt	r3, [r1, r0]
 80158c0:	18c0      	addlt	r0, r0, r3
 80158c2:	4770      	bx	lr

080158c4 <_init>:
 80158c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158c6:	bf00      	nop
 80158c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158ca:	bc08      	pop	{r3}
 80158cc:	469e      	mov	lr, r3
 80158ce:	4770      	bx	lr

080158d0 <_fini>:
 80158d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158d2:	bf00      	nop
 80158d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158d6:	bc08      	pop	{r3}
 80158d8:	469e      	mov	lr, r3
 80158da:	4770      	bx	lr

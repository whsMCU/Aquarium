
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017138  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e814  08017300  08017300  00027300  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025b14  08025b14  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08025b14  08025b14  00035b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025b1c  08025b1c  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025b1c  08025b1c  00035b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025b20  08025b20  00035b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08025b24  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cdb4  200002c0  08025dc0  000402c0  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000d074  08025dc0  0004d074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212dc  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f84  00000000  00000000  000615a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00067530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  00069470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002179e  00000000  00000000  0006b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f49b  00000000  00000000  0008c80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef48  00000000  00000000  000bbca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015abf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093e0  00000000  00000000  0015ac44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080172c0 	.word	0x080172c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	080172c0 	.word	0x080172c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <apInit>:
void sensorMain(void);
//void buttonMain(void);


void apInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 800102c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fdd5 	bl	8001be0 <cliOpen>
	menuSetCallBack(lcdMain);
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <apInit+0x18>)
 8001038:	f003 fc70 	bl	800491c <menuSetCallBack>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	0800108d 	.word	0x0800108d

08001044 <apMain>:

void apMain(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800104a:	f000 f91c 	bl	8001286 <millis>
 800104e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8001050:	f000 f919 	bl	8001286 <millis>
 8001054:	4602      	mov	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105e:	d302      	bcc.n	8001066 <apMain+0x22>
    {
      pre_time = millis();
 8001060:	f000 f911 	bl	8001286 <millis>
 8001064:	6078      	str	r0, [r7, #4]

    }

    sensorMain();
 8001066:	f000 f807 	bl	8001078 <sensorMain>
    buttonMain();
 800106a:	f000 fcaf 	bl	80019cc <buttonMain>

    cliMain();
 800106e:	f000 fe6f 	bl	8001d50 <cliMain>
    //lcdMain();
    menuMain();
 8001072:	f003 fcaf 	bl	80049d4 <menuMain>
    if (millis()-pre_time >= 1000)
 8001076:	e7eb      	b.n	8001050 <apMain+0xc>

08001078 <sensorMain>:
  }
}

void sensorMain(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 800107c:	f001 fd36 	bl	8002aec <Ds18b20_ManualConvert>
    Sonar_measure();
 8001080:	f004 fd72 	bl	8005b68 <Sonar_measure>
    tds_measure();
 8001084:	f005 fa38 	bl	80064f8 <tds_measure>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <lcdMain>:
//		gpioPinWrite(BUZZER, RESET);
//	}
//}

void lcdMain(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 8001092:	f002 fc97 	bl	80039c4 <lcdIsInit>
 8001096:	4603      	mov	r3, r0
 8001098:	f083 0301 	eor.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 80a2 	bne.w	80011e8 <lcdMain+0x15c>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 80010a4:	f002 feb8 	bl	8003e18 <lcdDrawAvailable>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 809d 	beq.w	80011ea <lcdMain+0x15e>
  {
      lcdClearBuffer(black);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f002 fcc5 	bl	8003a40 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f003 fa8c 	bl	80045d4 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[풍경채 아쿠아리움]");
 80010bc:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <lcdMain+0x164>)
 80010be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2000      	movs	r0, #0
 80010c6:	f003 f8b5 	bl	8004234 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 80010ca:	f002 fe8d 	bl	8003de8 <lcdGetFps>
 80010ce:	4603      	mov	r3, r0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <lcdMain+0x168>)
 80010d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d8:	2110      	movs	r1, #16
 80010da:	2000      	movs	r0, #0
 80010dc:	f003 f8aa 	bl	8004234 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 80010e0:	f002 fe8e 	bl	8003e00 <lcdGetFpsTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <lcdMain+0x16c>)
 80010ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ee:	2120      	movs	r1, #32
 80010f0:	2000      	movs	r0, #0
 80010f2:	f003 f89f 	bl	8004234 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 80010f6:	f000 f8c6 	bl	8001286 <millis>
 80010fa:	4603      	mov	r3, r0
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <lcdMain+0x16c>)
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	2130      	movs	r1, #48	; 0x30
 8001106:	2000      	movs	r0, #0
 8001108:	f003 f894 	bl	8004234 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2305      	movs	r3, #5
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2311      	movs	r3, #17
 8001118:	2234      	movs	r2, #52	; 0x34
 800111a:	2110      	movs	r1, #16
 800111c:	2046      	movs	r0, #70	; 0x46
 800111e:	f002 fd37 	bl	8003b90 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, red);
 8001122:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2305      	movs	r3, #5
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	230f      	movs	r3, #15
 800112e:	2232      	movs	r2, #50	; 0x32
 8001130:	2111      	movs	r1, #17
 8001132:	2047      	movs	r0, #71	; 0x47
 8001134:	f002 fe26 	bl	8003d84 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 8001138:	2000      	movs	r0, #0
 800113a:	f003 fa4b 	bl	80045d4 <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <lcdMain+0x170>)
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	2115      	movs	r1, #21
 8001146:	204b      	movs	r0, #75	; 0x4b
 8001148:	f003 f874 	bl	8004234 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 800114c:	2003      	movs	r0, #3
 800114e:	f003 fa41 	bl	80045d4 <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3.1f 도" , ds18b20[0].Temperature);
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <lcdMain+0x174>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9cd 2300 	strd	r2, r3, [sp]
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <lcdMain+0x178>)
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	2000      	movs	r0, #0
 800116e:	f003 f861 	bl	8004234 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <lcdMain+0x17c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <lcdMain+0x180>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <lcdMain+0x184>)
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	2150      	movs	r1, #80	; 0x50
 8001188:	2000      	movs	r0, #0
 800118a:	f003 f853 	bl	8004234 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4.1f ppm" , tds_tbl[0].filter_tdsValue);
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <lcdMain+0x188>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9f0 	bl	8000578 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9cd 2300 	strd	r2, r3, [sp]
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <lcdMain+0x18c>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	2160      	movs	r1, #96	; 0x60
 80011a8:	2000      	movs	r0, #0
 80011aa:	f003 f843 	bl	8004234 <lcdPrintf>
      //lcdDrawBufferImage(50, 20, 50, 50, TEST);

      lcdDrawFillRect( 0, 118, 10, 10, red);
 80011ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	230a      	movs	r3, #10
 80011b6:	220a      	movs	r2, #10
 80011b8:	2176      	movs	r1, #118	; 0x76
 80011ba:	2000      	movs	r0, #0
 80011bc:	f002 ffb4 	bl	8004128 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 80011c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	230a      	movs	r3, #10
 80011c8:	220a      	movs	r2, #10
 80011ca:	2176      	movs	r1, #118	; 0x76
 80011cc:	200a      	movs	r0, #10
 80011ce:	f002 ffab 	bl	8004128 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 80011d2:	231f      	movs	r3, #31
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	230a      	movs	r3, #10
 80011d8:	220a      	movs	r2, #10
 80011da:	2176      	movs	r1, #118	; 0x76
 80011dc:	2014      	movs	r0, #20
 80011de:	f002 ffa3 	bl	8004128 <lcdDrawFillRect>


      lcdRequestDraw();
 80011e2:	f002 fe2f 	bl	8003e44 <lcdRequestDraw>
 80011e6:	e000      	b.n	80011ea <lcdMain+0x15e>
    return;
 80011e8:	bf00      	nop
  }
}
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	08017300 	.word	0x08017300
 80011f4:	0801731c 	.word	0x0801731c
 80011f8:	08017324 	.word	0x08017324
 80011fc:	0801732c 	.word	0x0801732c
 8001200:	20000724 	.word	0x20000724
 8001204:	08017334 	.word	0x08017334
 8001208:	2000cbec 	.word	0x2000cbec
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	0801734c 	.word	0x0801734c
 8001214:	2000cda0 	.word	0x2000cda0
 8001218:	08017360 	.word	0x08017360

0800121c <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  HAL_Init();
 8001222:	f00a fdb3 	bl	800bd8c <HAL_Init>
  SystemClock_Config();
 8001226:	f000 f835 	bl	8001294 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <bspInit+0x50>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <bspInit+0x50>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <bspInit+0x50>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <bspInit+0x50>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <bspInit+0x50>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <bspInit+0x50>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <delay>:

void delay(uint32_t ms)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f00a fdf9 	bl	800be70 <HAL_Delay>
#endif
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <millis>:

uint32_t millis(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800128a:	f00a fde5 	bl	800be58 <HAL_GetTick>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2230      	movs	r2, #48	; 0x30
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f011 fd26 	bl	8012cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <SystemClock_Config+0xc8>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <SystemClock_Config+0xc8>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <SystemClock_Config+0xcc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a20      	ldr	r2, [pc, #128]	; (8001360 <SystemClock_Config+0xcc>)
 80012de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f0:	2301      	movs	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	2302      	movs	r3, #2
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001304:	2319      	movs	r3, #25
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001308:	23c0      	movs	r3, #192	; 0xc0
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130c:	2302      	movs	r3, #2
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001310:	2304      	movs	r3, #4
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f00c fafb 	bl	800d914 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001324:	f000 f81e 	bl	8001364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2103      	movs	r1, #3
 8001344:	4618      	mov	r0, r3
 8001346:	f00c fd53 	bl	800ddf0 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001350:	f000 f808 	bl	8001364 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	; 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f00a fd10 	bl	800be30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <ADC_IRQHandler+0x10>)
 800141a:	f00a fd90 	bl	800bf3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000ccf8 	.word	0x2000ccf8

08001428 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM3_IRQHandler+0x10>)
 800142e:	f00e ffb7 	bl	80103a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000cbac 	.word	0x2000cbac

0800143c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <SPI1_IRQHandler+0x10>)
 8001442:	f00e fc99 	bl	800fd78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000cc40 	.word	0x2000cc40

08001450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART1_IRQHandler+0x10>)
 8001456:	f00f fea5 	bl	80111a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000cefc 	.word	0x2000cefc

08001464 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <SDIO_IRQHandler+0x10>)
 800146a:	f00d f90b 	bl	800e684 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000ca68 	.word	0x2000ca68

08001478 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA2_Stream0_IRQHandler+0x10>)
 800147e:	f00b fd1f 	bl	800cec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000cd40 	.word	0x2000cd40

0800148c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <DMA2_Stream2_IRQHandler+0x10>)
 8001492:	f00b fd15 	bl	800cec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000cf9c 	.word	0x2000cf9c

080014a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <DMA2_Stream3_IRQHandler+0x10>)
 80014a6:	f00b fd0b 	bl	800cec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000cb4c 	.word	0x2000cb4c

080014b4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <DMA2_Stream5_IRQHandler+0x10>)
 80014ba:	f00b fd01 	bl	800cec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000cc98 	.word	0x2000cc98

080014c8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA2_Stream6_IRQHandler+0x10>)
 80014ce:	f00b fcf7 	bl	800cec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000caec 	.word	0x2000caec

080014dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <DMA2_Stream7_IRQHandler+0x10>)
 80014e2:	f00b fced 	bl	800cec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000cf3c 	.word	0x2000cf3c

080014f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_kill>:

int _kill(int pid, int sig)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800150a:	f011 fbab 	bl	8012c64 <__errno>
 800150e:	4603      	mov	r3, r0
 8001510:	2216      	movs	r2, #22
 8001512:	601a      	str	r2, [r3, #0]
	return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_exit>:

void _exit (int status)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffe7 	bl	8001500 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001532:	e7fe      	b.n	8001532 <_exit+0x12>

08001534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e00a      	b.n	800155c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001546:	f3af 8000 	nop.w
 800154a:	4601      	mov	r1, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf0      	blt.n	8001546 <_read+0x12>
	}

return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e009      	b.n	8001594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf1      	blt.n	8001580 <_write+0x12>
	}
	return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ce:	605a      	str	r2, [r3, #4]
	return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_isatty>:

int _isatty(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return 1;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f011 fb10 	bl	8012c64 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20020000 	.word	0x20020000
 8001670:	00000400 	.word	0x00000400
 8001674:	200002dc 	.word	0x200002dc
 8001678:	2000d078 	.word	0x2000d078

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <SystemInit+0x28>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <SystemInit+0x28>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SystemInit+0x28>)
 8001692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001696:	609a      	str	r2, [r3, #8]
#endif
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ae:	e003      	b.n	80016b8 <LoopCopyDataInit>

080016b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016b6:	3104      	adds	r1, #4

080016b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016c0:	d3f6      	bcc.n	80016b0 <CopyDataInit>
  ldr  r2, =_sbss
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016c4:	e002      	b.n	80016cc <LoopFillZerobss>

080016c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016c8:	f842 3b04 	str.w	r3, [r2], #4

080016cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016d0:	d3f9      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016d2:	f7ff ffd3 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f011 facb 	bl	8012c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f011 fab7 	bl	8012c4c <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016e4:	08025b24 	.word	0x08025b24
  ldr  r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016ec:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 80016f0:	200002c0 	.word	0x200002c0
  ldr  r3, = _ebss
 80016f4:	2000d074 	.word	0x2000d074

080016f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <DMA1_Stream0_IRQHandler>

080016fa <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b087      	sub	sp, #28
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]

  return ret;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800173c:	2301      	movs	r3, #1
 800173e:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	e026      	b.n	8001794 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	441a      	add	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	440b      	add	r3, r1
 800175e:	7812      	ldrb	r2, [r2, #0]
 8001760:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d00c      	beq.n	8001788 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6892      	ldr	r2, [r2, #8]
 8001778:	fbb3 f1f2 	udiv	r1, r3, r2
 800177c:	fb01 f202 	mul.w	r2, r1, r2
 8001780:	1a9a      	subs	r2, r3, r2
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e002      	b.n	800178e <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001788:	2300      	movs	r3, #0
 800178a:	75fb      	strb	r3, [r7, #23]
      break;
 800178c:	e006      	b.n	800179c <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	3301      	adds	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8d4      	bhi.n	8001746 <qbufferRead+0x16>
    }
  }

  return ret;
 800179c:	7dfb      	ldrb	r3, [r7, #23]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6892      	ldr	r2, [r2, #8]
 80017c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80017c4:	fb01 f202 	mul.w	r2, r1, r2
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

  return ret;
 80017cc:	68fb      	ldr	r3, [r7, #12]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <DWT_Delay_Init+0x58>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <DWT_Delay_Init+0x58>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ea:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <DWT_Delay_Init+0x58>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <DWT_Delay_Init+0x58>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <DWT_Delay_Init+0x5c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <DWT_Delay_Init+0x5c>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <DWT_Delay_Init+0x5c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <DWT_Delay_Init+0x5c>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <DWT_Delay_Init+0x5c>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001816:	bf00      	nop
     __ASM volatile ("NOP");
 8001818:	bf00      	nop
     __ASM volatile ("NOP");
 800181a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <DWT_Delay_Init+0x5c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001828:	2301      	movs	r3, #1
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000edf0 	.word	0xe000edf0
 8001838:	e0001000 	.word	0xe0001000

0800183c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
  bool ret = true;
 8001842:	2301      	movs	r3, #1
 8001844:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <buttonInit+0xa0>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <buttonInit+0xa0>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <buttonInit+0xa0>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	e023      	b.n	80018c2 <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 800187a:	4919      	ldr	r1, [pc, #100]	; (80018e0 <buttonInit+0xa4>)
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3304      	adds	r3, #4
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 800188e:	4914      	ldr	r1, [pc, #80]	; (80018e0 <buttonInit+0xa4>)
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3308      	adds	r3, #8
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 80018a2:	490f      	ldr	r1, [pc, #60]	; (80018e0 <buttonInit+0xa4>)
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1d3a      	adds	r2, r7, #4
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00b fd78 	bl	800d3ac <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3301      	adds	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	ddd8      	ble.n	800187a <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <buttonInit+0xa8>)
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <buttonInit+0xac>)
 80018cc:	f000 ff62 	bl	8002794 <cliAdd>
#endif

  return ret;
 80018d0:	7efb      	ldrb	r3, [r7, #27]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	20000004 	.word	0x20000004
 80018e4:	08001ab9 	.word	0x08001ab9
 80018e8:	08017370 	.word	0x08017370

080018ec <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <buttonGetPressed+0xdc>)
 8001906:	4413      	add	r3, r2
 8001908:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d901      	bls.n	8001914 <buttonGetPressed+0x28>
  {
    return false;
 8001910:	2300      	movs	r3, #0
 8001912:	e054      	b.n	80019be <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	7b9b      	ldrb	r3, [r3, #14]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <buttonGetPressed+0x36>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d018      	beq.n	8001952 <buttonGetPressed+0x66>
 8001920:	e04c      	b.n	80019bc <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f00b ffa4 	bl	800d87c <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	7b1b      	ldrb	r3, [r3, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d13a      	bne.n	80019b6 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8001940:	f7ff fca1 	bl	8001286 <millis>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	615a      	str	r2, [r3, #20]
  			  button->State = BUTTON_Pressed;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2201      	movs	r2, #1
 800194e:	739a      	strb	r2, [r3, #14]
  		  }
  		  break;
 8001950:	e031      	b.n	80019b6 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f00b ff8c 	bl	800d87c <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d114      	bne.n	800199a <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8001970:	f7ff fc89 	bl	8001286 <millis>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	1ad2      	subs	r2, r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d91a      	bls.n	80019ba <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2201      	movs	r2, #1
 8001988:	735a      	strb	r2, [r3, #13]
				  ret = button->PinState;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	7b5b      	ldrb	r3, [r3, #13]
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8001998:	e00f      	b.n	80019ba <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2200      	movs	r2, #0
 800199e:	739a      	strb	r2, [r3, #14]
			  button->PinState = GPIO_PIN_RESET;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	735a      	strb	r2, [r3, #13]
			  ret = button->PinState;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	7b5b      	ldrb	r3, [r3, #13]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
		  break;
 80019b4:	e001      	b.n	80019ba <buttonGetPressed+0xce>
  		  break;
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <buttonGetPressed+0xd0>
		  break;
 80019ba:	bf00      	nop
  }
  return ret;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000004 	.word	0x20000004

080019cc <buttonMain>:

bool buttonMain(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
	bool ret = false;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
	button_tbl_t *button;

	for (int i=0; i<BUTTON_MAX_CH; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	e063      	b.n	8001aa4 <buttonMain+0xd8>
	{
		button = &button_tbl[i];
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <buttonMain+0xe8>)
 80019e8:	4413      	add	r3, r2
 80019ea:	607b      	str	r3, [r7, #4]
	    if (i >= BUTTON_MAX_CH)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	dd01      	ble.n	80019f6 <buttonMain+0x2a>
	    {
	    	return false;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e05a      	b.n	8001aac <buttonMain+0xe0>
	    }

	    switch(button->State)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7b9b      	ldrb	r3, [r3, #14]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <buttonMain+0x38>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d018      	beq.n	8001a34 <buttonMain+0x68>
 8001a02:	e04c      	b.n	8001a9e <buttonMain+0xd2>
	    {
	    	case BUTTON_IDLE:
	    		if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f00b ff33 	bl	800d87c <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b1b      	ldrb	r3, [r3, #12]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d13a      	bne.n	8001a98 <buttonMain+0xcc>
	    		{
	    			button->lastDebounceTime = millis();
 8001a22:	f7ff fc30 	bl	8001286 <millis>
 8001a26:	4602      	mov	r2, r0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	615a      	str	r2, [r3, #20]
	    			button->State = BUTTON_Pressed;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	739a      	strb	r2, [r3, #14]
	    		}
	    		break;
 8001a32:	e031      	b.n	8001a98 <buttonMain+0xcc>

	    	case BUTTON_Pressed:
	    		if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4610      	mov	r0, r2
 8001a42:	f00b ff1b 	bl	800d87c <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7b1b      	ldrb	r3, [r3, #12]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d114      	bne.n	8001a7c <buttonMain+0xb0>
	    		{
	    			if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8001a52:	f7ff fc18 	bl	8001286 <millis>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	1ad2      	subs	r2, r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d91a      	bls.n	8001a9c <buttonMain+0xd0>
	    			{
	    				button->PinState = GPIO_PIN_SET;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	735a      	strb	r2, [r3, #13]
	    				ret = button->PinState;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b5b      	ldrb	r3, [r3, #13]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
	    		{
	    			button->State = BUTTON_IDLE;
	    			button->PinState = GPIO_PIN_RESET;
	    			ret = button->PinState;
	    		}
	    		break;
 8001a7a:	e00f      	b.n	8001a9c <buttonMain+0xd0>
	    			button->State = BUTTON_IDLE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	739a      	strb	r2, [r3, #14]
	    			button->PinState = GPIO_PIN_RESET;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	735a      	strb	r2, [r3, #13]
	    			ret = button->PinState;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7b5b      	ldrb	r3, [r3, #13]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
	    		break;
 8001a96:	e001      	b.n	8001a9c <buttonMain+0xd0>
	    		break;
 8001a98:	bf00      	nop
 8001a9a:	e000      	b.n	8001a9e <buttonMain+0xd2>
	    		break;
 8001a9c:	bf00      	nop
	for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	dd98      	ble.n	80019dc <buttonMain+0x10>
	    }
	}
	  return ret;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d128      	bne.n	8001b1e <cliButton+0x66>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4919      	ldr	r1, [pc, #100]	; (8001b38 <cliButton+0x80>)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	4798      	blx	r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001adc:	e018      	b.n	8001b10 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	e00c      	b.n	8001afe <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff feff 	bl	80018ec <buttonGetPressed>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4812      	ldr	r0, [pc, #72]	; (8001b3c <cliButton+0x84>)
 8001af4:	f000 fd3e 	bl	8002574 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	ddef      	ble.n	8001ae4 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <cliButton+0x88>)
 8001b06:	f000 fd35 	bl	8002574 <cliPrintf>

      delay(100);
 8001b0a:	2064      	movs	r0, #100	; 0x64
 8001b0c:	f7ff fbb0 	bl	8001270 <delay>
    while(cliKeepLoop())
 8001b10:	f000 fe2a 	bl	8002768 <cliKeepLoop>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e1      	bne.n	8001ade <cliButton+0x26>
    }

    ret = true;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	f083 0301 	eor.w	r3, r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <cliButton+0x8c>)
 8001b2c:	f000 fd22 	bl	8002574 <cliPrintf>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	08017378 	.word	0x08017378
 8001b3c:	08017380 	.word	0x08017380
 8001b40:	08017384 	.word	0x08017384
 8001b44:	08017388 	.word	0x08017388

08001b48 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <cliInit+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <cliInit+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <cliInit+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <cliInit+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <cliInit+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <cliInit+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <cliInit+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <cliInit+0x74>)
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <cliInit+0x78>)
 8001b82:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <cliInit+0x74>)
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <cliInit+0x7c>)
 8001b8a:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <cliInit+0x74>)
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <cliInit+0x80>)
 8001b92:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <cliInit+0x74>)
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <cliInit+0x84>)
 8001b9a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001b9e:	4807      	ldr	r0, [pc, #28]	; (8001bbc <cliInit+0x74>)
 8001ba0:	f000 fb5e 	bl	8002260 <cliLineClean>


  cliAdd("help", cliShowList);
 8001ba4:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <cliInit+0x88>)
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <cliInit+0x8c>)
 8001ba8:	f000 fdf4 	bl	8002794 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001bac:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <cliInit+0x90>)
 8001bae:	480b      	ldr	r0, [pc, #44]	; (8001bdc <cliInit+0x94>)
 8001bb0:	f000 fdf0 	bl	8002794 <cliAdd>

  return true;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002e0 	.word	0x200002e0
 8001bc0:	08002625 	.word	0x08002625
 8001bc4:	08002675 	.word	0x08002675
 8001bc8:	080026cd 	.word	0x080026cd
 8001bcc:	08002715 	.word	0x08002715
 8001bd0:	08002829 	.word	0x08002829
 8001bd4:	08017398 	.word	0x08017398
 8001bd8:	08002899 	.word	0x08002899
 8001bdc:	080173a0 	.word	0x080173a0

08001be0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <cliOpen+0x38>)
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <cliOpen+0x38>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 fe5d 	bl	80068bc <uartOpen>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <cliOpen+0x38>)
 8001c08:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001c0a:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <cliOpen+0x38>)
 8001c0c:	7a1b      	ldrb	r3, [r3, #8]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200002e0 	.word	0x200002e0

08001c1c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <cliShowLog+0xdc>)
 8001c26:	7a5b      	ldrb	r3, [r3, #9]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d061      	beq.n	8001cf0 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7a98      	ldrb	r0, [r3, #10]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001c36:	461a      	mov	r2, r3
 8001c38:	4930      	ldr	r1, [pc, #192]	; (8001cfc <cliShowLog+0xe0>)
 8001c3a:	f004 fff5 	bl	8006c28 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7a98      	ldrb	r0, [r3, #10]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001c48:	461a      	mov	r2, r3
 8001c4a:	492d      	ldr	r1, [pc, #180]	; (8001d00 <cliShowLog+0xe4>)
 8001c4c:	f004 ffec 	bl	8006c28 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7a98      	ldrb	r0, [r3, #10]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4929      	ldr	r1, [pc, #164]	; (8001d04 <cliShowLog+0xe8>)
 8001c5e:	f004 ffe3 	bl	8006c28 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7a98      	ldrb	r0, [r3, #10]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4926      	ldr	r1, [pc, #152]	; (8001d08 <cliShowLog+0xec>)
 8001c70:	f004 ffda 	bl	8006c28 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7a98      	ldrb	r0, [r3, #10]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4922      	ldr	r1, [pc, #136]	; (8001d0c <cliShowLog+0xf0>)
 8001c82:	f004 ffd1 	bl	8006c28 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7a98      	ldrb	r0, [r3, #10]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001c90:	461a      	mov	r2, r3
 8001c92:	491f      	ldr	r1, [pc, #124]	; (8001d10 <cliShowLog+0xf4>)
 8001c94:	f004 ffc8 	bl	8006c28 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7a98      	ldrb	r0, [r3, #10]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	491b      	ldr	r1, [pc, #108]	; (8001d14 <cliShowLog+0xf8>)
 8001ca6:	f004 ffbf 	bl	8006c28 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e012      	b.n	8001cd6 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7a98      	ldrb	r0, [r3, #10]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	015b      	lsls	r3, r3, #5
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4913      	ldr	r1, [pc, #76]	; (8001d18 <cliShowLog+0xfc>)
 8001ccc:	f004 ffac 	bl	8006c28 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	dbe5      	blt.n	8001cb0 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7a9b      	ldrb	r3, [r3, #10]
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <cliShowLog+0x100>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 ff9c 	bl	8006c28 <uartPrintf>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200002e0 	.word	0x200002e0
 8001cfc:	080173a4 	.word	0x080173a4
 8001d00:	080173b4 	.word	0x080173b4
 8001d04:	080173c4 	.word	0x080173c4
 8001d08:	080173d4 	.word	0x080173d4
 8001d0c:	080173e4 	.word	0x080173e4
 8001d10:	080173f4 	.word	0x080173f4
 8001d14:	08017404 	.word	0x08017404
 8001d18:	08017414 	.word	0x08017414
 8001d1c:	08017424 	.word	0x08017424

08001d20 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <cliShowPrompt+0x28>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 ff7a 	bl	8006c28 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <cliShowPrompt+0x2c>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 ff74 	bl	8006c28 <uartPrintf>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	08017428 	.word	0x08017428
 8001d4c:	0801742c 	.word	0x0801742c

08001d50 <cliMain>:

bool cliMain(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <cliMain+0x40>)
 8001d56:	7a1b      	ldrb	r3, [r3, #8]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <cliMain+0x16>
  {
    return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e012      	b.n	8001d8c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <cliMain+0x40>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 feb8 	bl	8006ae0 <uartAvailable>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <cliMain+0x40>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fef6 	bl	8006b6c <uartRead>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4619      	mov	r1, r3
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <cliMain+0x40>)
 8001d86:	f000 f805 	bl	8001d94 <cliUpdate>
  }

  return true;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200002e0 	.word	0x200002e0

08001d94 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001dac:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7c1b      	ldrb	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 8168 	bne.w	8002088 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	2b7f      	cmp	r3, #127	; 0x7f
 8001dbc:	d02a      	beq.n	8001e14 <cliUpdate+0x80>
 8001dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc0:	f300 80da 	bgt.w	8001f78 <cliUpdate+0x1e4>
 8001dc4:	2b1b      	cmp	r3, #27
 8001dc6:	d021      	beq.n	8001e0c <cliUpdate+0x78>
 8001dc8:	2b1b      	cmp	r3, #27
 8001dca:	f300 80d5 	bgt.w	8001f78 <cliUpdate+0x1e4>
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d062      	beq.n	8001e98 <cliUpdate+0x104>
 8001dd2:	2b0d      	cmp	r3, #13
 8001dd4:	f040 80d0 	bne.w	8001f78 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fa56 	bl	8002294 <cliLineAdd>
          cliRunCmd(p_cli);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fb21 	bl	8002430 <cliRunCmd>
        }

        line->count = 0;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff8b 	bl	8001d20 <cliShowPrompt>
        break;
 8001e0a:	e144      	b.n	8002096 <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	741a      	strb	r2, [r3, #16]
        break;
 8001e12:	e140      	b.n	8002096 <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f080 8133 	bcs.w	800208c <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001e36:	2301      	movs	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3a:	e013      	b.n	8001e64 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	461a      	mov	r2, r3
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	441a      	add	r2, r3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	440b      	add	r3, r1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	69f9      	ldr	r1, [r7, #28]
 8001e58:	5c89      	ldrb	r1, [r1, r2]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	3301      	adds	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e64:	7efb      	ldrb	r3, [r7, #27]
 8001e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbe7      	blt.n	8001e3c <cliUpdate+0xa8>
          }

          line->count--;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e82:	461a      	mov	r2, r3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2100      	movs	r1, #0
 8001e88:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	498e      	ldr	r1, [pc, #568]	; (80020c8 <cliUpdate+0x334>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 fec9 	bl	8006c28 <uartPrintf>
        }
        break;
 8001e96:	e0f9      	b.n	800208c <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d055      	beq.n	8001f4e <cliUpdate+0x1ba>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d050      	beq.n	8001f4e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10e      	bne.n	8001eda <cliUpdate+0x146>
          {
            line->count--;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d231      	bcs.n	8001f4e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efe:	e013      	b.n	8001f28 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f06:	461a      	mov	r2, r3
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	441a      	add	r2, r3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f12:	4619      	mov	r1, r3
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	440b      	add	r3, r1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	5c89      	ldrb	r1, [r1, r2]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	3301      	adds	r3, #1
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f28:	7ebb      	ldrb	r3, [r7, #26]
 8001f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbe7      	blt.n	8001f00 <cliUpdate+0x16c>
            }

            line->count--;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f46:	461a      	mov	r2, r3
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 809b 	beq.w	8002090 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4957      	ldr	r1, [pc, #348]	; (80020cc <cliUpdate+0x338>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 fe59 	bl	8006c28 <uartPrintf>
        }
        break;
 8001f76:	e08b      	b.n	8002090 <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f7e:	3301      	adds	r3, #1
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001f86:	4293      	cmp	r3, r2
 8001f88:	f280 8084 	bge.w	8002094 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d124      	bne.n	8001fe6 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	1cf9      	adds	r1, r7, #3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fe07 	bl	8006bb8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	78f9      	ldrb	r1, [r7, #3]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d24e      	bcs.n	8002094 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	e013      	b.n	8002034 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002012:	461a      	mov	r2, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002020:	4619      	mov	r1, r3
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	1acb      	subs	r3, r1, r3
 8002026:	69f9      	ldr	r1, [r7, #28]
 8002028:	5c89      	ldrb	r1, [r1, r2]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	3301      	adds	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	7e7b      	ldrb	r3, [r7, #25]
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	429a      	cmp	r2, r3
 800203a:	dbe7      	blt.n	800200c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002042:	461a      	mov	r2, r3
 8002044:	78f9      	ldrb	r1, [r7, #3]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	5499      	strb	r1, [r3, r2]
            line->count++;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002050:	3301      	adds	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	3301      	adds	r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002070:	461a      	mov	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	4914      	ldr	r1, [pc, #80]	; (80020d0 <cliUpdate+0x33c>)
 8002080:	4618      	mov	r0, r3
 8002082:	f004 fdd1 	bl	8006c28 <uartPrintf>
          }
        }
        break;
 8002086:	e005      	b.n	8002094 <cliUpdate+0x300>
    }
  }
 8002088:	bf00      	nop
 800208a:	e004      	b.n	8002096 <cliUpdate+0x302>
        break;
 800208c:	bf00      	nop
 800208e:	e002      	b.n	8002096 <cliUpdate+0x302>
        break;
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <cliUpdate+0x302>
        break;
 8002094:	bf00      	nop

  switch(p_cli->state)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7c1b      	ldrb	r3, [r3, #16]
 800209a:	3b01      	subs	r3, #1
 800209c:	2b03      	cmp	r3, #3
 800209e:	f200 80d2 	bhi.w	8002246 <cliUpdate+0x4b2>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <cliUpdate+0x314>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020c1 	.word	0x080020c1
 80020b0:	080020d5 	.word	0x080020d5
 80020b4:	0800223d 	.word	0x0800223d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	741a      	strb	r2, [r3, #16]
      break;
 80020be:	e0c2      	b.n	8002246 <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2203      	movs	r2, #3
 80020c4:	741a      	strb	r2, [r3, #16]
      break;
 80020c6:	e0be      	b.n	8002246 <cliUpdate+0x4b2>
 80020c8:	08017434 	.word	0x08017434
 80020cc:	0801743c 	.word	0x0801743c
 80020d0:	08017444 	.word	0x08017444

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	2b44      	cmp	r3, #68	; 0x44
 80020de:	d11a      	bne.n	8002116 <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d015      	beq.n	8002116 <cliUpdate+0x382>
        {
          line->cursor--;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 80020fa:	231b      	movs	r3, #27
 80020fc:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80020fe:	235b      	movs	r3, #91	; 0x5b
 8002100:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f107 010c 	add.w	r1, r7, #12
 800210e:	2203      	movs	r2, #3
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fd51 	bl	8006bb8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	2b43      	cmp	r3, #67	; 0x43
 800211a:	d11d      	bne.n	8002158 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->count)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002128:	429a      	cmp	r2, r3
 800212a:	d215      	bcs.n	8002158 <cliUpdate+0x3c4>
        {
          line->cursor++;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002132:	3301      	adds	r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 800213c:	231b      	movs	r3, #27
 800213e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002140:	235b      	movs	r3, #91	; 0x5b
 8002142:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f107 010c 	add.w	r1, r7, #12
 8002150:	2203      	movs	r2, #3
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fd30 	bl	8006bb8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b41      	cmp	r3, #65	; 0x41
 800215c:	d10c      	bne.n	8002178 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 800215e:	2101      	movs	r1, #1
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f8db 	bl	800231c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f004 fd58 	bl	8006c28 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b42      	cmp	r3, #66	; 0x42
 800217c:	d10c      	bne.n	8002198 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f8cb 	bl	800231c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f004 fd48 	bl	8006c28 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b31      	cmp	r3, #49	; 0x31
 800219c:	d10f      	bne.n	80021be <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7818      	ldrb	r0, [r3, #0]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a8:	461a      	mov	r2, r3
 80021aa:	492b      	ldr	r1, [pc, #172]	; (8002258 <cliUpdate+0x4c4>)
 80021ac:	f004 fd3c 	bl	8006c28 <uartPrintf>
        line->cursor = 0;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2204      	movs	r2, #4
 80021bc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	2b34      	cmp	r3, #52	; 0x34
 80021c2:	d13f      	bne.n	8002244 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d210      	bcs.n	80021f6 <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021da:	b29a      	uxth	r2, r3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	8afa      	ldrh	r2, [r7, #22]
 80021ee:	491b      	ldr	r1, [pc, #108]	; (800225c <cliUpdate+0x4c8>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fd19 	bl	8006c28 <uartPrintf>
        }
        if (line->cursor > line->count)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220c:	b29a      	uxth	r2, r3
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002214:	b29b      	uxth	r3, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	8afa      	ldrh	r2, [r7, #22]
 8002220:	490d      	ldr	r1, [pc, #52]	; (8002258 <cliUpdate+0x4c4>)
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fd00 	bl	8006c28 <uartPrintf>
        }
        line->cursor = line->count;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	741a      	strb	r2, [r3, #16]
      }
      break;
 800223a:	e003      	b.n	8002244 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	741a      	strb	r2, [r3, #16]
      break;
 8002242:	e000      	b.n	8002246 <cliUpdate+0x4b2>
      break;
 8002244:	bf00      	nop
  }



  cliShowLog(p_cli);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fce8 	bl	8001c1c <cliShowLog>

  return ret;
 800224c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002250:	4618      	mov	r0, r3
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	08017450 	.word	0x08017450
 800225c:	08017458 	.word	0x08017458

08002260 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	223f      	movs	r2, #63	; 0x3f
 800227c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80022a2:	461a      	mov	r2, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	015b      	lsls	r3, r3, #5
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4610      	mov	r0, r2
 80022ba:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80022be:	2243      	movs	r2, #67	; 0x43
 80022c0:	4619      	mov	r1, r3
 80022c2:	f010 fd09 	bl	8012cd8 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d807      	bhi.n	80022e0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80022e6:	b25a      	sxtb	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80022f4:	3301      	adds	r3, #1
 80022f6:	425a      	negs	r2, r3
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	f002 0203 	and.w	r2, r2, #3
 8002300:	bf58      	it	pl
 8002302:	4253      	negpl	r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800232e:	2b00      	cmp	r3, #0
 8002330:	d076      	beq.n	8002420 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7818      	ldrb	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002346:	461a      	mov	r2, r3
 8002348:	4937      	ldr	r1, [pc, #220]	; (8002428 <cliLineChange+0x10c>)
 800234a:	f004 fc6d 	bl	8006c28 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7818      	ldrb	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002362:	461a      	mov	r2, r3
 8002364:	4931      	ldr	r1, [pc, #196]	; (800242c <cliLineChange+0x110>)
 8002366:	f004 fc5f 	bl	8006c28 <uartPrintf>
  }


  if (key_up == true)
 800236a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d125      	bne.n	80023be <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002382:	b25a      	sxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002390:	461a      	mov	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002398:	4413      	add	r3, r2
 800239a:	3b01      	subs	r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80023a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80023a6:	fb01 f202 	mul.w	r2, r1, r2
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	b25a      	sxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e013      	b.n	80023e6 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80023c4:	3301      	adds	r3, #1
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80023cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d0:	fb01 f202 	mul.w	r2, r1, r2
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	b25a      	sxtb	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80023e4:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	4413      	add	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	4403      	add	r3, r0
 80023f8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80023fc:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002400:	4611      	mov	r1, r2
 8002402:	2243      	movs	r2, #67	; 0x43
 8002404:	4618      	mov	r0, r3
 8002406:	f010 fc67 	bl	8012cd8 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800241e:	e000      	b.n	8002422 <cliLineChange+0x106>
    return;
 8002420:	bf00      	nop
}
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	08017450 	.word	0x08017450
 800242c:	08017460 	.word	0x08017460

08002430 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002438:	2300      	movs	r3, #0
 800243a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f851 	bl	80024e4 <cliParseArgs>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d046      	beq.n	80024d6 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002448:	4825      	ldr	r0, [pc, #148]	; (80024e0 <cliRunCmd+0xb0>)
 800244a:	f000 f893 	bl	8002574 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f8b1 	bl	80025bc <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e033      	b.n	80024c8 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	4619      	mov	r1, r3
 800247c:	f7fd feb0 	bl	80001e0 <strcmp>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11d      	bne.n	80024c2 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 80024bc:	4610      	mov	r0, r2
 80024be:	4798      	blx	r3
        break;
 80024c0:	e009      	b.n	80024d6 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	dbc4      	blt.n	8002460 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80024d6:	7afb      	ldrb	r3, [r7, #11]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08017468 	.word	0x08017468

080024e4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002502:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800250a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <cliParseArgs+0x8c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f107 0208 	add.w	r2, r7, #8
 8002520:	4619      	mov	r1, r3
 8002522:	6938      	ldr	r0, [r7, #16]
 8002524:	f011 fff6 	bl	8014514 <strtok_r>
 8002528:	61b8      	str	r0, [r7, #24]
 800252a:	e010      	b.n	800254e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	82fa      	strh	r2, [r7, #22]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <cliParseArgs+0x8c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f107 0208 	add.w	r2, r7, #8
 8002544:	4619      	mov	r1, r3
 8002546:	2000      	movs	r0, #0
 8002548:	f011 ffe4 	bl	8014514 <strtok_r>
 800254c:	61b8      	str	r0, [r7, #24]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1eb      	bne.n	800252c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8afa      	ldrh	r2, [r7, #22]
 8002558:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 800255c:	8afb      	ldrh	r3, [r7, #22]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <cliParseArgs+0x82>
  {
    ret = true;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000007c 	.word	0x2000007c

08002574 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002574:	b40f      	push	{r0, r1, r2, r3}
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <cliPrintf+0x44>)
 8002584:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f103 0011 	add.w	r0, r3, #17
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002594:	f012 f86a 	bl	801466c <vsniprintf>
 8002598:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	7818      	ldrb	r0, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3311      	adds	r3, #17
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f004 fb07 	bl	8006bb8 <uartWrite>
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025b4:	b004      	add	sp, #16
 80025b6:	4770      	bx	lr
 80025b8:	200002e0 	.word	0x200002e0

080025bc <cliToUpper>:

void cliToUpper(char *str)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	81fb      	strh	r3, [r7, #14]
 80025c8:	e018      	b.n	80025fc <cliToUpper+0x40>
  {
    str_ch = str[i];
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d014      	beq.n	8002604 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	2b60      	cmp	r3, #96	; 0x60
 80025de:	d905      	bls.n	80025ec <cliToUpper+0x30>
 80025e0:	7b7b      	ldrb	r3, [r7, #13]
 80025e2:	2b7a      	cmp	r3, #122	; 0x7a
 80025e4:	d802      	bhi.n	80025ec <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80025e6:	7b7b      	ldrb	r3, [r7, #13]
 80025e8:	3b20      	subs	r3, #32
 80025ea:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	7b7a      	ldrb	r2, [r7, #13]
 80025f4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	3301      	adds	r3, #1
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	d9e3      	bls.n	80025ca <cliToUpper+0xe>
 8002602:	e000      	b.n	8002606 <cliToUpper+0x4a>
      break;
 8002604:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	2b10      	cmp	r3, #16
 800260a:	d105      	bne.n	8002618 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800260c:	89fb      	ldrh	r3, [r7, #14]
 800260e:	3b01      	subs	r3, #1
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  }
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <cliArgsGetData+0x4c>)
 8002634:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	b29a      	uxth	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002640:	429a      	cmp	r2, r3
 8002642:	d301      	bcc.n	8002648 <cliArgsGetData+0x24>
  {
    return 0;
 8002644:	2300      	movs	r3, #0
 8002646:	e00e      	b.n	8002666 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f011 ffd0 	bl	8014600 <strtoul>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]

  return ret;
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200002e0 	.word	0x200002e0

08002674 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <cliArgsGetFloat+0x54>)
 8002686:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	b29a      	uxth	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <cliArgsGetFloat+0x28>
  {
    return 0;
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e00d      	b.n	80026b8 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f011 fead 	bl	801440c <strtof>
 80026b2:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002e0 	.word	0x200002e0

080026cc <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <cliArgsGetStr+0x44>)
 80026dc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d301      	bcc.n	80026f0 <cliArgsGetStr+0x24>
  {
    return 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e008      	b.n	8002702 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  return ret;
 8002700:	68fb      	ldr	r3, [r7, #12]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200002e0 	.word	0x200002e0

08002714 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <cliArgsIsStr+0x50>)
 8002726:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	b29a      	uxth	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002732:	429a      	cmp	r2, r3
 8002734:	d301      	bcc.n	800273a <cliArgsIsStr+0x26>
  {
    return 0;
 8002736:	2300      	movs	r3, #0
 8002738:	e010      	b.n	800275c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	f7fd fd48 	bl	80001e0 <strcmp>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <cliArgsIsStr+0x46>
  {
    ret = true;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200002e0 	.word	0x200002e0

08002768 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <cliKeepLoop+0x28>)
 8002770:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f9b2 	bl	8006ae0 <uartAvailable>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <cliKeepLoop+0x1e>
  {
    return true;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002786:	2300      	movs	r3, #0
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200002e0 	.word	0x200002e0

08002794 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <cliAdd+0x90>)
 80027a4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d901      	bls.n	80027b4 <cliAdd+0x20>
  {
    return false;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e032      	b.n	800281a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80027ba:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80027bc:	89fa      	ldrh	r2, [r7, #14]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f010 fff0 	bl	80137b8 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	6939      	ldr	r1, [r7, #16]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80027ee:	89fa      	ldrh	r2, [r7, #14]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff feda 	bl	80025bc <cliToUpper>

  p_cli->cmd_count++;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800280e:	3301      	adds	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002818:	7dfb      	ldrb	r3, [r7, #23]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200002e0 	.word	0x200002e0

08002828 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <cliShowList+0x60>)
 8002832:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002834:	4815      	ldr	r0, [pc, #84]	; (800288c <cliShowList+0x64>)
 8002836:	f7ff fe9d 	bl	8002574 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800283a:	4815      	ldr	r0, [pc, #84]	; (8002890 <cliShowList+0x68>)
 800283c:	f7ff fe9a 	bl	8002574 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e012      	b.n	800286c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe8a 	bl	8002574 <cliPrintf>
    cliPrintf("\r\n");
 8002860:	480a      	ldr	r0, [pc, #40]	; (800288c <cliShowList+0x64>)
 8002862:	f7ff fe87 	bl	8002574 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3301      	adds	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4293      	cmp	r3, r2
 8002878:	dbe5      	blt.n	8002846 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <cliShowList+0x6c>)
 800287c:	f7ff fe7a 	bl	8002574 <cliPrintf>
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200002e0 	.word	0x200002e0
 800288c:	08017468 	.word	0x08017468
 8002890:	0801746c 	.word	0x0801746c
 8002894:	0801748c 	.word	0x0801748c

08002898 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80028a0:	2310      	movs	r3, #16
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d103      	bne.n	80028c0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80028b8:	4840      	ldr	r0, [pc, #256]	; (80029bc <cliMemoryDump+0x124>)
 80028ba:	f7ff fe5b 	bl	8002574 <cliPrintf>
 80028be:	e07a      	b.n	80029b6 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	dd09      	ble.n	80028da <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	3304      	adds	r3, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f011 fe95 	bl	8014600 <strtoul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f011 fe8c 	bl	8014600 <strtoul>
 80028e8:	4603      	mov	r3, r0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80028f0:	4833      	ldr	r0, [pc, #204]	; (80029c0 <cliMemoryDump+0x128>)
 80028f2:	f7ff fe3f 	bl	8002574 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fa:	e058      	b.n	80029ae <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	482e      	ldr	r0, [pc, #184]	; (80029c4 <cliMemoryDump+0x12c>)
 800290c:	f7ff fe32 	bl	8002574 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	482c      	ldr	r0, [pc, #176]	; (80029c8 <cliMemoryDump+0x130>)
 8002918:	f7ff fe2c 	bl	8002574 <cliPrintf>

    if ((idx%4) == 3)
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	425a      	negs	r2, r3
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	f002 0203 	and.w	r2, r2, #3
 8002928:	bf58      	it	pl
 800292a:	4253      	negpl	r3, r2
 800292c:	2b03      	cmp	r3, #3
 800292e:	d138      	bne.n	80029a2 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002930:	4826      	ldr	r0, [pc, #152]	; (80029cc <cliMemoryDump+0x134>)
 8002932:	f7ff fe1f 	bl	8002574 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	e02c      	b.n	8002996 <cliMemoryDump+0xfe>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002940:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e01d      	b.n	8002984 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002948:	f107 020c 	add.w	r2, r7, #12
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b1f      	cmp	r3, #31
 8002954:	d910      	bls.n	8002978 <cliMemoryDump+0xe0>
 8002956:	f107 020c 	add.w	r2, r7, #12
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b7e      	cmp	r3, #126	; 0x7e
 8002962:	d809      	bhi.n	8002978 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002964:	f107 020c 	add.w	r2, r7, #12
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4817      	ldr	r0, [pc, #92]	; (80029d0 <cliMemoryDump+0x138>)
 8002972:	f7ff fdff 	bl	8002574 <cliPrintf>
 8002976:	e002      	b.n	800297e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002978:	4816      	ldr	r0, [pc, #88]	; (80029d4 <cliMemoryDump+0x13c>)
 800297a:	f7ff fdfb 	bl	8002574 <cliPrintf>
        for (i=0;i<4;i++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b03      	cmp	r3, #3
 8002988:	ddde      	ble.n	8002948 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	3304      	adds	r3, #4
 800298e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	3301      	adds	r3, #1
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2b03      	cmp	r3, #3
 800299a:	ddcf      	ble.n	800293c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800299c:	480e      	ldr	r0, [pc, #56]	; (80029d8 <cliMemoryDump+0x140>)
 800299e:	f7ff fde9 	bl	8002574 <cliPrintf>
    }
    addr++;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3304      	adds	r3, #4
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	3301      	adds	r3, #1
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	429a      	cmp	r2, r3
 80029b4:	dba2      	blt.n	80028fc <cliMemoryDump+0x64>
  }
}
 80029b6:	3730      	adds	r7, #48	; 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	080174ac 	.word	0x080174ac
 80029c0:	080174c0 	.word	0x080174c0
 80029c4:	080174c8 	.word	0x080174c8
 80029c8:	080174d4 	.word	0x080174d4
 80029cc:	080174dc 	.word	0x080174dc
 80029d0:	080174e0 	.word	0x080174e0
 80029d4:	080174e4 	.word	0x080174e4
 80029d8:	080174e8 	.word	0x080174e8

080029dc <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 80029e2:	2305      	movs	r3, #5
 80029e4:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 80029e6:	2201      	movs	r2, #1
 80029e8:	4939      	ldr	r1, [pc, #228]	; (8002ad0 <Ds18b20_Init+0xf4>)
 80029ea:	483a      	ldr	r0, [pc, #232]	; (8002ad4 <Ds18b20_Init+0xf8>)
 80029ec:	f002 f9cf 	bl	8004d8e <OneWire_Init>
		TempSensorCount = 0;
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <Ds18b20_Init+0xfc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80029f6:	e002      	b.n	80029fe <Ds18b20_Init+0x22>
			HAL_Delay(100);
 80029f8:	2064      	movs	r0, #100	; 0x64
 80029fa:	f009 fa39 	bl	800be70 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 80029fe:	f009 fa2b 	bl	800be58 <HAL_GetTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d9f5      	bls.n	80029f8 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8002a0c:	4831      	ldr	r0, [pc, #196]	; (8002ad4 <Ds18b20_Init+0xf8>)
 8002a0e:	f002 faac 	bl	8004f6a <OneWire_First>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b31      	ldr	r3, [pc, #196]	; (8002adc <Ds18b20_Init+0x100>)
 8002a18:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002a1a:	e019      	b.n	8002a50 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8002a1c:	2064      	movs	r0, #100	; 0x64
 8002a1e:	f009 fa27 	bl	800be70 <HAL_Delay>
			TempSensorCount++;
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <Ds18b20_Init+0xfc>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <Ds18b20_Init+0xfc>)
 8002a2c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <Ds18b20_Init+0xfc>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <Ds18b20_Init+0x104>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4825      	ldr	r0, [pc, #148]	; (8002ad4 <Ds18b20_Init+0xf8>)
 8002a3e:	f002 fba9 	bl	8005194 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8002a42:	4824      	ldr	r0, [pc, #144]	; (8002ad4 <Ds18b20_Init+0xf8>)
 8002a44:	f002 faa1 	bl	8004f8a <OneWire_Next>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <Ds18b20_Init+0x100>)
 8002a4e:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <Ds18b20_Init+0x100>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e1      	bne.n	8002a1c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <Ds18b20_Init+0xfc>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1bc      	bne.n	80029e6 <Ds18b20_Init+0xa>
 8002a6c:	e000      	b.n	8002a70 <Ds18b20_Init+0x94>
			break;
 8002a6e:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <Ds18b20_Init+0x9e>
		return false;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e026      	b.n	8002ac8 <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71bb      	strb	r3, [r7, #6]
 8002a7e:	e019      	b.n	8002ab4 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 8002a80:	2032      	movs	r0, #50	; 0x32
 8002a82:	f009 f9f5 	bl	800be70 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002a86:	79bb      	ldrb	r3, [r7, #6]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <Ds18b20_Init+0x104>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	220c      	movs	r2, #12
 8002a90:	4619      	mov	r1, r3
 8002a92:	4810      	ldr	r0, [pc, #64]	; (8002ad4 <Ds18b20_Init+0xf8>)
 8002a94:	f000 f9cc 	bl	8002e30 <DS18B20_SetResolution>
		HAL_Delay(50);
 8002a98:	2032      	movs	r0, #50	; 0x32
 8002a9a:	f009 f9e9 	bl	800be70 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002a9e:	79bb      	ldrb	r3, [r7, #6]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <Ds18b20_Init+0x104>)
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480a      	ldr	r0, [pc, #40]	; (8002ad4 <Ds18b20_Init+0xf8>)
 8002aaa:	f000 fa5a 	bl	8002f62 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002aae:	79bb      	ldrb	r3, [r7, #6]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	71bb      	strb	r3, [r7, #6]
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <Ds18b20_Init+0xfc>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	79ba      	ldrb	r2, [r7, #6]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3e0      	bcc.n	8002a80 <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 8002abe:	4909      	ldr	r1, [pc, #36]	; (8002ae4 <Ds18b20_Init+0x108>)
 8002ac0:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <Ds18b20_Init+0x10c>)
 8002ac2:	f7ff fe67 	bl	8002794 <cliAdd>
	#endif

	return true;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	20000734 	.word	0x20000734
 8002ad8:	20000749 	.word	0x20000749
 8002adc:	20000748 	.word	0x20000748
 8002ae0:	20000724 	.word	0x20000724
 8002ae4:	08003031 	.word	0x08003031
 8002ae8:	080174f8 	.word	0x080174f8

08002aec <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <Ds18b20_ManualConvert+0x104>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <Ds18b20_ManualConvert+0x14>
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d013      	beq.n	8002b26 <Ds18b20_ManualConvert+0x3a>
 8002afe:	e072      	b.n	8002be6 <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002b00:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <Ds18b20_ManualConvert+0x108>)
 8002b02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b06:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8002b08:	483b      	ldr	r0, [pc, #236]	; (8002bf8 <Ds18b20_ManualConvert+0x10c>)
 8002b0a:	f000 f87d 	bl	8002c08 <DS18B20_StartAll>
	  		  pre_time = millis();
 8002b0e:	f7fe fbba 	bl	8001286 <millis>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <Ds18b20_ManualConvert+0x110>)
 8002b16:	6013      	str	r3, [r2, #0]
	  		  state++;
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <Ds18b20_ManualConvert+0x104>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <Ds18b20_ManualConvert+0x104>)
 8002b22:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002b24:	e05f      	b.n	8002be6 <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8002b26:	f7fe fbae 	bl	8001286 <millis>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <Ds18b20_ManualConvert+0x110>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	d956      	bls.n	8002be4 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8002b36:	4830      	ldr	r0, [pc, #192]	; (8002bf8 <Ds18b20_ManualConvert+0x10c>)
 8002b38:	f000 fa6e 	bl	8003018 <DS18B20_AllDone>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d112      	bne.n	8002b68 <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 8002b42:	f7fe fba0 	bl	8001286 <millis>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a2c      	ldr	r2, [pc, #176]	; (8002bfc <Ds18b20_ManualConvert+0x110>)
 8002b4a:	6013      	str	r3, [r2, #0]
					Ds18b20Timeout-=1;
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <Ds18b20_ManualConvert+0x108>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <Ds18b20_ManualConvert+0x108>)
 8002b56:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <Ds18b20_ManualConvert+0x108>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d141      	bne.n	8002be4 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <Ds18b20_ManualConvert+0x104>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
						break;
 8002b66:	e03e      	b.n	8002be6 <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <Ds18b20_ManualConvert+0x108>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d024      	beq.n	8002bba <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	e01b      	b.n	8002bae <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <Ds18b20_ManualConvert+0x114>)
 8002b7c:	1899      	adds	r1, r3, r2
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	3308      	adds	r3, #8
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <Ds18b20_ManualConvert+0x114>)
 8002b86:	4413      	add	r3, r2
 8002b88:	79fc      	ldrb	r4, [r7, #7]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	481a      	ldr	r0, [pc, #104]	; (8002bf8 <Ds18b20_ManualConvert+0x10c>)
 8002b8e:	f000 f84f 	bl	8002c30 <DS18B20_Read>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <Ds18b20_ManualConvert+0x114>)
 8002b98:	0123      	lsls	r3, r4, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	460a      	mov	r2, r1
 8002ba0:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <Ds18b20_ManualConvert+0x104>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	3301      	adds	r3, #1
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <Ds18b20_ManualConvert+0x118>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3de      	bcc.n	8002b76 <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8002bb8:	e014      	b.n	8002be4 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	71bb      	strb	r3, [r7, #6]
 8002bbe:	e00c      	b.n	8002bda <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8002bc0:	79bb      	ldrb	r3, [r7, #6]
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <Ds18b20_ManualConvert+0x114>)
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	330c      	adds	r3, #12
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <Ds18b20_ManualConvert+0x104>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002bd4:	79bb      	ldrb	r3, [r7, #6]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	71bb      	strb	r3, [r7, #6]
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <Ds18b20_ManualConvert+0x118>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	79ba      	ldrb	r2, [r7, #6]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3ed      	bcc.n	8002bc0 <Ds18b20_ManualConvert+0xd4>
			  break;
 8002be4:	bf00      	nop
	  }
	#endif
	  return true;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	2000074c 	.word	0x2000074c
 8002bf4:	2000074a 	.word	0x2000074a
 8002bf8:	20000734 	.word	0x20000734
 8002bfc:	20000750 	.word	0x20000750
 8002c00:	20000724 	.word	0x20000724
 8002c04:	20000749 	.word	0x20000749

08002c08 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f002 f8e5 	bl	8004de0 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002c16:	21cc      	movs	r1, #204	; 0xcc
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f002 f967 	bl	8004eec <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002c1e:	2144      	movs	r1, #68	; 0x44
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f002 f963 	bl	8004eec <OneWire_WriteByte>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b08b      	sub	sp, #44	; 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8002c46:	68b8      	ldr	r0, [r7, #8]
 8002c48:	f000 f97a 	bl	8002f40 <DS18B20_Is>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <DS18B20_Read+0x26>
		return false;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e0e1      	b.n	8002e1a <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f002 f91e 	bl	8004e98 <OneWire_ReadBit>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e0d9      	b.n	8002e1a <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f002 f8ba 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f002 fa71 	bl	8005156 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c74:	21be      	movs	r1, #190	; 0xbe
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f002 f938 	bl	8004eec <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e00d      	b.n	8002c9e <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002c82:	7ffc      	ldrb	r4, [r7, #31]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f002 f94f 	bl	8004f28 <OneWire_ReadByte>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002c92:	443b      	add	r3, r7
 8002c94:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002c98:	7ffb      	ldrb	r3, [r7, #31]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d9ee      	bls.n	8002c82 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2108      	movs	r1, #8
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 fa8f 	bl	80051ce <OneWire_CRC8>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002cb4:	7f3b      	ldrb	r3, [r7, #28]
 8002cb6:	7fba      	ldrb	r2, [r7, #30]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e0ac      	b.n	8002e1a <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002cc0:	7d3b      	ldrb	r3, [r7, #20]
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	7d7b      	ldrb	r3, [r7, #21]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f002 f885 	bl	8004de0 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002cd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da05      	bge.n	8002cea <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002cde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ce0:	425b      	negs	r3, r3
 8002ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002cea:	7e3b      	ldrb	r3, [r7, #24]
 8002cec:	115b      	asrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3309      	adds	r3, #9
 8002cf8:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002cfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002d1e:	7f7b      	ldrb	r3, [r7, #29]
 8002d20:	3b09      	subs	r3, #9
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d858      	bhi.n	8002dd8 <DS18B20_Read+0x1a8>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <DS18B20_Read+0xfc>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d8d 	.word	0x08002d8d
 8002d38:	08002db5 	.word	0x08002db5
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002d3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002d52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d62:	e03e      	b.n	8002de2 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d76:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002d7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d7e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d86:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d8a:	e02a      	b.n	8002de2 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002d8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002da6:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002db2:	e016      	b.n	8002de2 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002dc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002e24 <DS18B20_Read+0x1f4>
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002dd6:	e004      	b.n	8002de2 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <DS18B20_Read+0x1f8>)
 8002dda:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002de2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dee:	ed97 7a08 	vldr	s14, [r7, #32]
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002dfa:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002e02:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002e2c <DS18B20_Read+0x1fc>
 8002e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	372c      	adds	r7, #44	; 0x2c
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	3d800000 	.word	0x3d800000
 8002e28:	437f0000 	.word	0x437f0000
 8002e2c:	00000000 	.word	0x00000000

08002e30 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f000 f87e 	bl	8002f40 <DS18B20_Is>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <DS18B20_SetResolution+0x1e>
		return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e074      	b.n	8002f38 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 ffc6 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f002 f97d 	bl	8005156 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002e5c:	21be      	movs	r1, #190	; 0xbe
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f002 f844 	bl	8004eec <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f002 f85f 	bl	8004f28 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f002 f85c 	bl	8004f28 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f002 f859 	bl	8004f28 <OneWire_ReadByte>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f002 f854 	bl	8004f28 <OneWire_ReadByte>
 8002e80:	4603      	mov	r3, r0
 8002e82:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f002 f84f 	bl	8004f28 <OneWire_ReadByte>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d108      	bne.n	8002ea6 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	f023 0320 	bic.w	r3, r3, #32
 8002ea2:	75fb      	strb	r3, [r7, #23]
 8002ea4:	e022      	b.n	8002eec <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b0a      	cmp	r3, #10
 8002eaa:	d108      	bne.n	8002ebe <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb2:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	f043 0320 	orr.w	r3, r3, #32
 8002eba:	75fb      	strb	r3, [r7, #23]
 8002ebc:	e016      	b.n	8002eec <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b0b      	cmp	r3, #11
 8002ec2:	d108      	bne.n	8002ed6 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eca:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	f023 0320 	bic.w	r3, r3, #32
 8002ed2:	75fb      	strb	r3, [r7, #23]
 8002ed4:	e00a      	b.n	8002eec <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d107      	bne.n	8002eec <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee2:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	f043 0320 	orr.w	r3, r3, #32
 8002eea:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f001 ff77 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f002 f92e 	bl	8005156 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002efa:	214e      	movs	r1, #78	; 0x4e
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f001 fff5 	bl	8004eec <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002f02:	7dbb      	ldrb	r3, [r7, #22]
 8002f04:	4619      	mov	r1, r3
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f001 fff0 	bl	8004eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002f0c:	7d7b      	ldrb	r3, [r7, #21]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f001 ffeb 	bl	8004eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f001 ffe6 	bl	8004eec <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f001 ff5d 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f002 f914 	bl	8005156 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f2e:	2148      	movs	r1, #72	; 0x48
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f001 ffdb 	bl	8004eec <OneWire_WriteByte>

	return 1;
 8002f36:	2301      	movs	r3, #1
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b28      	cmp	r3, #40	; 0x28
 8002f4e:	d101      	bne.n	8002f54 <DS18B20_Is+0x14>
		return 1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <DS18B20_Is+0x16>

	return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002f6c:	6838      	ldr	r0, [r7, #0]
 8002f6e:	f7ff ffe7 	bl	8002f40 <DS18B20_Is>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e049      	b.n	8003010 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f001 ff2f 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f002 f8e6 	bl	8005156 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002f8a:	21be      	movs	r1, #190	; 0xbe
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 ffad 	bl	8004eec <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 ffc8 	bl	8004f28 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 ffc5 	bl	8004f28 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 ffc2 	bl	8004f28 <OneWire_ReadByte>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f001 ffbd 	bl	8004f28 <OneWire_ReadByte>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 ffb8 	bl	8004f28 <OneWire_ReadByte>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002fbc:	237d      	movs	r3, #125	; 0x7d
 8002fbe:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002fc0:	23c9      	movs	r3, #201	; 0xc9
 8002fc2:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f001 ff0b 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002fca:	6839      	ldr	r1, [r7, #0]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f002 f8c2 	bl	8005156 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002fd2:	214e      	movs	r1, #78	; 0x4e
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 ff89 	bl	8004eec <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 ff84 	bl	8004eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 ff7f 	bl	8004eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002fee:	7b7b      	ldrb	r3, [r7, #13]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 ff7a 	bl	8004eec <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 fef1 	bl	8004de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f002 f8a8 	bl	8005156 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8003006:	2148      	movs	r1, #72	; 0x48
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f001 ff6f 	bl	8004eec <OneWire_WriteByte>

	return 1;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f001 ff39 	bl	8004e98 <OneWire_ReadBit>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d11b      	bne.n	800307c <cliDS18B20+0x4c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	4913      	ldr	r1, [pc, #76]	; (8003098 <cliDS18B20+0x68>)
 800304a:	2000      	movs	r0, #0
 800304c:	4798      	blx	r3
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <cliDS18B20+0x4c>
  {

	  while(cliKeepLoop())
 8003054:	e00b      	b.n	800306e <cliDS18B20+0x3e>
	  {
		  Ds18b20_ManualConvert();
 8003056:	f7ff fd49 	bl	8002aec <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <cliDS18B20+0x6c>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fa8a 	bl	8000578 <__aeabi_f2d>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	480d      	ldr	r0, [pc, #52]	; (80030a0 <cliDS18B20+0x70>)
 800306a:	f7ff fa83 	bl	8002574 <cliPrintf>
	  while(cliKeepLoop())
 800306e:	f7ff fb7b 	bl	8002768 <cliKeepLoop>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ee      	bne.n	8003056 <cliDS18B20+0x26>
	  }
    ret = true;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	f083 0301 	eor.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <cliDS18B20+0x5e>
  {
    cliPrintf("DS18B20 test\n");
 8003088:	4806      	ldr	r0, [pc, #24]	; (80030a4 <cliDS18B20+0x74>)
 800308a:	f7ff fa73 	bl	8002574 <cliPrintf>
  }
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	08017500 	.word	0x08017500
 800309c:	20000724 	.word	0x20000724
 80030a0:	08017508 	.word	0x08017508
 80030a4:	08017520 	.word	0x08017520

080030a8 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  bool ret = true;
 80030ae:	2301      	movs	r3, #1
 80030b0:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80030b2:	490d      	ldr	r1, [pc, #52]	; (80030e8 <fatfsInit+0x40>)
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <fatfsInit+0x44>)
 80030b6:	f008 fd7d 	bl	800bbb4 <FATFS_LinkDriver>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 80030c0:	2200      	movs	r2, #0
 80030c2:	4909      	ldr	r1, [pc, #36]	; (80030e8 <fatfsInit+0x40>)
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <fatfsInit+0x48>)
 80030c6:	f007 f96f 	bl	800a3a8 <f_mount>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <fatfsInit+0x2e>
    {
      is_init = true;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <fatfsInit+0x4c>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 80030d6:	4908      	ldr	r1, [pc, #32]	; (80030f8 <fatfsInit+0x50>)
 80030d8:	4808      	ldr	r0, [pc, #32]	; (80030fc <fatfsInit+0x54>)
 80030da:	f7ff fb5b 	bl	8002794 <cliAdd>
#endif

  return ret;
 80030de:	79fb      	ldrb	r3, [r7, #7]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	2000098c 	.word	0x2000098c
 80030ec:	080179f0 	.word	0x080179f0
 80030f0:	20000758 	.word	0x20000758
 80030f4:	20000754 	.word	0x20000754
 80030f8:	080031d5 	.word	0x080031d5
 80030fc:	08017530 	.word	0x08017530

08003100 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0d6      	sub	sp, #344	; 0x158
 8003104:	af00      	add	r7, sp, #0
 8003106:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800310a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800310e:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8003110:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003114:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003118:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	4610      	mov	r0, r2
 8003120:	f008 f8bb 	bl	800b29a <f_opendir>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 800312a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800312e:	2b00      	cmp	r3, #0
 8003130:	d144      	bne.n	80031bc <fatfsDir+0xbc>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003132:	f107 0208 	add.w	r2, r7, #8
 8003136:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f008 f955 	bl	800b3ec <f_readdir>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003148:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800314c:	2b00      	cmp	r3, #0
 800314e:	d130      	bne.n	80031b2 <fatfsDir+0xb2>
 8003150:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003154:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003158:	7d9b      	ldrb	r3, [r3, #22]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d029      	beq.n	80031b2 <fatfsDir+0xb2>
      if (fno.fattrib & AM_DIR)
 800315e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003162:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003166:	7a1b      	ldrb	r3, [r3, #8]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <fatfsDir+0x8a>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8003170:	f107 0308 	add.w	r3, r7, #8
 8003174:	f103 0216 	add.w	r2, r3, #22
 8003178:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800317c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	4812      	ldr	r0, [pc, #72]	; (80031cc <fatfsDir+0xcc>)
 8003184:	f7ff f9f6 	bl	8002574 <cliPrintf>
 8003188:	e7d3      	b.n	8003132 <fatfsDir+0x32>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 800318a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800318e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	f103 0216 	add.w	r2, r3, #22
 800319e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031a2:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 80031a6:	4603      	mov	r3, r0
 80031a8:	6809      	ldr	r1, [r1, #0]
 80031aa:	4809      	ldr	r0, [pc, #36]	; (80031d0 <fatfsDir+0xd0>)
 80031ac:	f7ff f9e2 	bl	8002574 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80031b0:	e7bf      	b.n	8003132 <fatfsDir+0x32>
      }
    }
    f_closedir(&dir);
 80031b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80031b6:	4618      	mov	r0, r3
 80031b8:	f008 f8f2 	bl	800b3a0 <f_closedir>
  }

  return res;
 80031bc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	08017538 	.word	0x08017538
 80031d0:	08017544 	.word	0x08017544

080031d4 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80031da:	af00      	add	r7, sp, #0
 80031dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80031e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80031e4:	6018      	str	r0, [r3, #0]
  bool ret = false;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 80031ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80031f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d14d      	bne.n	8003298 <cliFatfs+0xc4>
 80031fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003200:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4990      	ldr	r1, [pc, #576]	; (800344c <cliFatfs+0x278>)
 800320a:	2000      	movs	r0, #0
 800320c:	4798      	blx	r3
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d041      	beq.n	8003298 <cliFatfs+0xc4>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8003214:	4b8e      	ldr	r3, [pc, #568]	; (8003450 <cliFatfs+0x27c>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	488e      	ldr	r0, [pc, #568]	; (8003454 <cliFatfs+0x280>)
 800321c:	f7ff f9aa 	bl	8002574 <cliPrintf>

    if (is_init == true)
 8003220:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <cliFatfs+0x27c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d034      	beq.n	8003292 <cliFatfs+0xbe>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8003228:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800322c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003230:	4619      	mov	r1, r3
 8003232:	4889      	ldr	r0, [pc, #548]	; (8003458 <cliFatfs+0x284>)
 8003234:	f008 f927 	bl	800b486 <f_getfree>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 800323e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11f      	bne.n	8003286 <cliFatfs+0xb2>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8003246:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	3b02      	subs	r3, #2
 800324e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003252:	8952      	ldrh	r2, [r2, #10]
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 800325c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003260:	895b      	ldrh	r3, [r3, #10]
 8003262:	461a      	mov	r2, r3
 8003264:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8003270:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003274:	0859      	lsrs	r1, r3, #1
 8003276:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	461a      	mov	r2, r3
 800327e:	4877      	ldr	r0, [pc, #476]	; (800345c <cliFatfs+0x288>)
 8003280:	f7ff f978 	bl	8002574 <cliPrintf>
 8003284:	e005      	b.n	8003292 <cliFatfs+0xbe>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8003286:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800328a:	4619      	mov	r1, r3
 800328c:	4874      	ldr	r0, [pc, #464]	; (8003460 <cliFatfs+0x28c>)
 800328e:	f7ff f971 	bl	8002574 <cliPrintf>
       }
    }

    ret = true;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8003298:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800329c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d11e      	bne.n	80032e6 <cliFatfs+0x112>
 80032a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80032ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	496b      	ldr	r1, [pc, #428]	; (8003464 <cliFatfs+0x290>)
 80032b6:	2000      	movs	r0, #0
 80032b8:	4798      	blx	r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <cliFatfs+0x112>
  {
    FRESULT res;

    res = fatfsDir("/");
 80032c0:	4869      	ldr	r0, [pc, #420]	; (8003468 <cliFatfs+0x294>)
 80032c2:	f7ff ff1d 	bl	8003100 <fatfsDir>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 80032cc:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <cliFatfs+0x10c>
    {
      cliPrintf(" err : %d\n", res);
 80032d4:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80032d8:	4619      	mov	r1, r3
 80032da:	4861      	ldr	r0, [pc, #388]	; (8003460 <cliFatfs+0x28c>)
 80032dc:	f7ff f94a 	bl	8002574 <cliPrintf>
    }

    ret = true;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 80032e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80032ea:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	f040 8095 	bne.w	8003422 <cliFatfs+0x24e>
 80032f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80032fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4959      	ldr	r1, [pc, #356]	; (800346c <cliFatfs+0x298>)
 8003306:	2000      	movs	r0, #0
 8003308:	4798      	blx	r3
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8088 	beq.w	8003422 <cliFatfs+0x24e>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8003312:	f7fd ffb8 	bl	8001286 <millis>
 8003316:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	220b      	movs	r2, #11
 8003320:	4953      	ldr	r1, [pc, #332]	; (8003470 <cliFatfs+0x29c>)
 8003322:	4618      	mov	r0, r3
 8003324:	f007 f886 	bl	800a434 <f_open>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 800332e:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003332:	2b00      	cmp	r3, #0
 8003334:	d165      	bne.n	8003402 <cliFatfs+0x22e>
    {
      f_printf(&log_file, "test1, ");
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	494e      	ldr	r1, [pc, #312]	; (8003474 <cliFatfs+0x2a0>)
 800333c:	4618      	mov	r0, r3
 800333e:	f008 f9cf 	bl	800b6e0 <f_printf>
      f_printf(&log_file, "test2, ");
 8003342:	f107 0308 	add.w	r3, r7, #8
 8003346:	494c      	ldr	r1, [pc, #304]	; (8003478 <cliFatfs+0x2a4>)
 8003348:	4618      	mov	r0, r3
 800334a:	f008 f9c9 	bl	800b6e0 <f_printf>
      f_printf(&log_file, "test3, ");
 800334e:	f107 0308 	add.w	r3, r7, #8
 8003352:	494a      	ldr	r1, [pc, #296]	; (800347c <cliFatfs+0x2a8>)
 8003354:	4618      	mov	r0, r3
 8003356:	f008 f9c3 	bl	800b6e0 <f_printf>
      f_printf(&log_file, ", ");
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	4948      	ldr	r1, [pc, #288]	; (8003480 <cliFatfs+0x2ac>)
 8003360:	4618      	mov	r0, r3
 8003362:	f008 f9bd 	bl	800b6e0 <f_printf>
      f_printf(&log_file, "\n");
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	4946      	ldr	r1, [pc, #280]	; (8003484 <cliFatfs+0x2b0>)
 800336c:	4618      	mov	r0, r3
 800336e:	f008 f9b7 	bl	800b6e0 <f_printf>

      for (int i=0; i<8; i++)
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003378:	e00c      	b.n	8003394 <cliFatfs+0x1c0>
      {
        f_printf(&log_file, "%d \n", i);
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003382:	4941      	ldr	r1, [pc, #260]	; (8003488 <cliFatfs+0x2b4>)
 8003384:	4618      	mov	r0, r3
 8003386:	f008 f9ab 	bl	800b6e0 <f_printf>
      for (int i=0; i<8; i++)
 800338a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800338e:	3301      	adds	r3, #1
 8003390:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003394:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003398:	2b07      	cmp	r3, #7
 800339a:	ddee      	ble.n	800337a <cliFatfs+0x1a6>
      }

      f_rewind(&log_file);
 800339c:	f107 0308 	add.w	r3, r7, #8
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f007 fd70 	bl	800ae88 <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 80033a8:	e01c      	b.n	80033e4 <cliFatfs+0x210>
      {
        len = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 80033b0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80033b4:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80033b8:	f107 0008 	add.w	r0, r7, #8
 80033bc:	2201      	movs	r2, #1
 80033be:	f007 fa07 	bl	800a7d0 <f_read>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 80033c8:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <cliFatfs+0x21c>
        {
          break;
        }
        if (len == 0)
 80033d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <cliFatfs+0x220>
        {
          break;
        }

        cliPrintf("%c", data);
 80033d8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80033dc:	4619      	mov	r1, r3
 80033de:	482b      	ldr	r0, [pc, #172]	; (800348c <cliFatfs+0x2b8>)
 80033e0:	f7ff f8c8 	bl	8002574 <cliPrintf>
      while(cliKeepLoop())
 80033e4:	f7ff f9c0 	bl	8002768 <cliKeepLoop>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1dd      	bne.n	80033aa <cliFatfs+0x1d6>
 80033ee:	e002      	b.n	80033f6 <cliFatfs+0x222>
          break;
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <cliFatfs+0x222>
          break;
 80033f4:	bf00      	nop
      }

      f_close(&log_file);
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	4618      	mov	r0, r3
 80033fc:	f007 fd1a 	bl	800ae34 <f_close>
 8003400:	e002      	b.n	8003408 <cliFatfs+0x234>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 8003402:	4823      	ldr	r0, [pc, #140]	; (8003490 <cliFatfs+0x2bc>)
 8003404:	f7ff f8b6 	bl	8002574 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8003408:	f7fd ff3d 	bl	8001286 <millis>
 800340c:	4602      	mov	r2, r0
 800340e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	4619      	mov	r1, r3
 8003416:	481f      	ldr	r0, [pc, #124]	; (8003494 <cliFatfs+0x2c0>)
 8003418:	f7ff f8ac 	bl	8002574 <cliPrintf>

    ret = true;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8003422:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8003426:	f083 0301 	eor.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <cliFatfs+0x26e>
  {
    cliPrintf("fatfs info\n");
 8003430:	4819      	ldr	r0, [pc, #100]	; (8003498 <cliFatfs+0x2c4>)
 8003432:	f7ff f89f 	bl	8002574 <cliPrintf>
    cliPrintf("fatfs dir\n");
 8003436:	4819      	ldr	r0, [pc, #100]	; (800349c <cliFatfs+0x2c8>)
 8003438:	f7ff f89c 	bl	8002574 <cliPrintf>
    cliPrintf("fatfs test\n");
 800343c:	4818      	ldr	r0, [pc, #96]	; (80034a0 <cliFatfs+0x2cc>)
 800343e:	f7ff f899 	bl	8002574 <cliPrintf>
  }
}
 8003442:	bf00      	nop
 8003444:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08017558 	.word	0x08017558
 8003450:	20000754 	.word	0x20000754
 8003454:	08017560 	.word	0x08017560
 8003458:	08017574 	.word	0x08017574
 800345c:	08017578 	.word	0x08017578
 8003460:	080175ac 	.word	0x080175ac
 8003464:	080175b8 	.word	0x080175b8
 8003468:	080175bc 	.word	0x080175bc
 800346c:	080175c0 	.word	0x080175c0
 8003470:	080175c8 	.word	0x080175c8
 8003474:	080175d0 	.word	0x080175d0
 8003478:	080175d8 	.word	0x080175d8
 800347c:	080175e0 	.word	0x080175e0
 8003480:	080175e8 	.word	0x080175e8
 8003484:	080175ec 	.word	0x080175ec
 8003488:	080175f0 	.word	0x080175f0
 800348c:	080175f8 	.word	0x080175f8
 8003490:	080175fc 	.word	0x080175fc
 8003494:	0801760c 	.word	0x0801760c
 8003498:	08017614 	.word	0x08017614
 800349c:	08017620 	.word	0x08017620
 80034a0:	0801762c 	.word	0x0801762c

080034a4 <gpioInit>:
#endif



bool gpioInit(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
  bool ret = true;
 80034aa:	2301      	movs	r3, #1
 80034ac:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <gpioInit+0xa0>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <gpioInit+0xa0>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <gpioInit+0xa0>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <gpioInit+0xa0>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <gpioInit+0xa0>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <gpioInit+0xa0>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e01e      	b.n	800352a <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	b2d8      	uxtb	r0, r3
 80034f0:	4915      	ldr	r1, [pc, #84]	; (8003548 <gpioInit+0xa4>)
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3308      	adds	r3, #8
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	f000 f826 	bl	8003554 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	b2d8      	uxtb	r0, r3
 800350c:	490e      	ldr	r1, [pc, #56]	; (8003548 <gpioInit+0xa4>)
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	330b      	adds	r3, #11
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4619      	mov	r1, r3
 8003520:	f000 f88a 	bl	8003638 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3301      	adds	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	dddd      	ble.n	80034ec <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8003530:	4906      	ldr	r1, [pc, #24]	; (800354c <gpioInit+0xa8>)
 8003532:	4807      	ldr	r0, [pc, #28]	; (8003550 <gpioInit+0xac>)
 8003534:	f7ff f92e 	bl	8002794 <cliAdd>
#endif

  return ret;
 8003538:	7afb      	ldrb	r3, [r7, #11]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	08017908 	.word	0x08017908
 800354c:	0800374d 	.word	0x0800374d
 8003550:	08017638 	.word	0x08017638

08003554 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	460a      	mov	r2, r1
 800355e:	71fb      	strb	r3, [r7, #7]
 8003560:	4613      	mov	r3, r2
 8003562:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d901      	bls.n	8003582 <gpioPinMode+0x2e>
  {
    return false;
 800357e:	2300      	movs	r3, #0
 8003580:	e054      	b.n	800362c <gpioPinMode+0xd8>
  }

  switch(mode)
 8003582:	79bb      	ldrb	r3, [r7, #6]
 8003584:	2b06      	cmp	r3, #6
 8003586:	d838      	bhi.n	80035fa <gpioPinMode+0xa6>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <gpioPinMode+0x3c>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035ad 	.word	0x080035ad
 8003594:	080035b7 	.word	0x080035b7
 8003598:	080035c1 	.word	0x080035c1
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	080035df 	.word	0x080035df
 80035a8:	080035e9 	.word	0x080035e9
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]
      break;
 80035b4:	e021      	b.n	80035fa <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035ba:	2301      	movs	r3, #1
 80035bc:	613b      	str	r3, [r7, #16]
      break;
 80035be:	e01c      	b.n	80035fa <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035c4:	2302      	movs	r3, #2
 80035c6:	613b      	str	r3, [r7, #16]
      break;
 80035c8:	e017      	b.n	80035fa <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	2301      	movs	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
      break;
 80035d2:	e012      	b.n	80035fa <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d4:	2301      	movs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
      break;
 80035dc:	e00d      	b.n	80035fa <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035de:	2301      	movs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035e2:	2302      	movs	r3, #2
 80035e4:	613b      	str	r3, [r7, #16]
      break;
 80035e6:	e008      	b.n	80035fa <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
      break;
 80035f8:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80035fa:	79fa      	ldrb	r2, [r7, #7]
 80035fc:	490d      	ldr	r1, [pc, #52]	; (8003634 <gpioPinMode+0xe0>)
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3304      	adds	r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800360e:	79fa      	ldrb	r2, [r7, #7]
 8003610:	4908      	ldr	r1, [pc, #32]	; (8003634 <gpioPinMode+0xe0>)
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f009 fec1 	bl	800d3ac <HAL_GPIO_Init>

  return ret;
 800362a:	7ffb      	ldrb	r3, [r7, #31]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	08017908 	.word	0x08017908

08003638 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	460a      	mov	r2, r1
 8003642:	71fb      	strb	r3, [r7, #7]
 8003644:	4613      	mov	r3, r2
 8003646:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d840      	bhi.n	80036d0 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 800364e:	79bb      	ldrb	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01e      	beq.n	8003692 <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	4920      	ldr	r1, [pc, #128]	; (80036d8 <gpioPinWrite+0xa0>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	491c      	ldr	r1, [pc, #112]	; (80036d8 <gpioPinWrite+0xa0>)
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	3304      	adds	r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b299      	uxth	r1, r3
 8003678:	79fa      	ldrb	r2, [r7, #7]
 800367a:	4c17      	ldr	r4, [pc, #92]	; (80036d8 <gpioPinWrite+0xa0>)
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4423      	add	r3, r4
 8003686:	3309      	adds	r3, #9
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f00a f90e 	bl	800d8ac <HAL_GPIO_WritePin>
 8003690:	e01f      	b.n	80036d2 <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003692:	79fa      	ldrb	r2, [r7, #7]
 8003694:	4910      	ldr	r1, [pc, #64]	; (80036d8 <gpioPinWrite+0xa0>)
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	79fa      	ldrb	r2, [r7, #7]
 80036a4:	490c      	ldr	r1, [pc, #48]	; (80036d8 <gpioPinWrite+0xa0>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3304      	adds	r3, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	b299      	uxth	r1, r3
 80036b6:	79fa      	ldrb	r2, [r7, #7]
 80036b8:	4c07      	ldr	r4, [pc, #28]	; (80036d8 <gpioPinWrite+0xa0>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4423      	add	r3, r4
 80036c4:	330a      	adds	r3, #10
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f00a f8ef 	bl	800d8ac <HAL_GPIO_WritePin>
 80036ce:	e000      	b.n	80036d2 <gpioPinWrite+0x9a>
    return;
 80036d0:	bf00      	nop
  }
}
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	08017908 	.word	0x08017908

080036dc <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d901      	bls.n	80036f4 <gpioPinRead+0x18>
  {
    return false;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e024      	b.n	800373e <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80036f4:	79fa      	ldrb	r2, [r7, #7]
 80036f6:	4914      	ldr	r1, [pc, #80]	; (8003748 <gpioPinRead+0x6c>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	79fa      	ldrb	r2, [r7, #7]
 8003706:	4910      	ldr	r1, [pc, #64]	; (8003748 <gpioPinRead+0x6c>)
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3304      	adds	r3, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	f00a f8af 	bl	800d87c <HAL_GPIO_ReadPin>
 800371e:	4603      	mov	r3, r0
 8003720:	4618      	mov	r0, r3
 8003722:	79fa      	ldrb	r2, [r7, #7]
 8003724:	4908      	ldr	r1, [pc, #32]	; (8003748 <gpioPinRead+0x6c>)
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3309      	adds	r3, #9
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4298      	cmp	r0, r3
 8003736:	d101      	bne.n	800373c <gpioPinRead+0x60>
  {
    ret = true;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08017908 	.word	0x08017908

0800374c <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d128      	bne.n	80037b2 <cliGpio+0x66>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4947      	ldr	r1, [pc, #284]	; (8003884 <cliGpio+0x138>)
 8003766:	2000      	movs	r0, #0
 8003768:	4798      	blx	r3
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8003770:	e018      	b.n	80037a4 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e00c      	b.n	8003792 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ffad 	bl	80036dc <gpioPinRead>
 8003782:	4603      	mov	r3, r0
 8003784:	4619      	mov	r1, r3
 8003786:	4840      	ldr	r0, [pc, #256]	; (8003888 <cliGpio+0x13c>)
 8003788:	f7fe fef4 	bl	8002574 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3301      	adds	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	ddef      	ble.n	8003778 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8003798:	483c      	ldr	r0, [pc, #240]	; (800388c <cliGpio+0x140>)
 800379a:	f7fe feeb 	bl	8002574 <cliPrintf>
      delay(100);
 800379e:	2064      	movs	r0, #100	; 0x64
 80037a0:	f7fd fd66 	bl	8001270 <delay>
    while(cliKeepLoop())
 80037a4:	f7fe ffe0 	bl	8002768 <cliKeepLoop>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e1      	bne.n	8003772 <cliGpio+0x26>
    }
    ret = true;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d123      	bne.n	8003802 <cliGpio+0xb6>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4934      	ldr	r1, [pc, #208]	; (8003890 <cliGpio+0x144>)
 80037c0:	2000      	movs	r0, #0
 80037c2:	4798      	blx	r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01b      	beq.n	8003802 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2001      	movs	r0, #1
 80037d0:	4798      	blx	r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80037d6:	e00d      	b.n	80037f4 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80037d8:	7bfc      	ldrb	r4, [r7, #15]
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff7d 	bl	80036dc <gpioPinRead>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	4621      	mov	r1, r4
 80037e8:	482a      	ldr	r0, [pc, #168]	; (8003894 <cliGpio+0x148>)
 80037ea:	f7fe fec3 	bl	8002574 <cliPrintf>
      delay(100);
 80037ee:	2064      	movs	r0, #100	; 0x64
 80037f0:	f7fd fd3e 	bl	8001270 <delay>
    while(cliKeepLoop())
 80037f4:	f7fe ffb8 	bl	8002768 <cliKeepLoop>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ec      	bne.n	80037d8 <cliGpio+0x8c>
    }

    ret = true;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d126      	bne.n	8003858 <cliGpio+0x10c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4922      	ldr	r1, [pc, #136]	; (8003898 <cliGpio+0x14c>)
 8003810:	2000      	movs	r0, #0
 8003812:	4798      	blx	r3
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01e      	beq.n	8003858 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2001      	movs	r0, #1
 8003820:	4798      	blx	r3
 8003822:	4603      	mov	r3, r0
 8003824:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2002      	movs	r0, #2
 800382c:	4798      	blx	r3
 800382e:	4603      	mov	r3, r0
 8003830:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2da      	uxtb	r2, r3
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fef8 	bl	8003638 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8003848:	7bbb      	ldrb	r3, [r7, #14]
 800384a:	7b7a      	ldrb	r2, [r7, #13]
 800384c:	4619      	mov	r1, r3
 800384e:	4813      	ldr	r0, [pc, #76]	; (800389c <cliGpio+0x150>)
 8003850:	f7fe fe90 	bl	8002574 <cliPrintf>
    ret = true;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8003864:	480e      	ldr	r0, [pc, #56]	; (80038a0 <cliGpio+0x154>)
 8003866:	f7fe fe85 	bl	8002574 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800386a:	210c      	movs	r1, #12
 800386c:	480d      	ldr	r0, [pc, #52]	; (80038a4 <cliGpio+0x158>)
 800386e:	f7fe fe81 	bl	8002574 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8003872:	210c      	movs	r1, #12
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <cliGpio+0x15c>)
 8003876:	f7fe fe7d 	bl	8002574 <cliPrintf>
  }
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	bf00      	nop
 8003884:	08017640 	.word	0x08017640
 8003888:	08017648 	.word	0x08017648
 800388c:	0801764c 	.word	0x0801764c
 8003890:	08017650 	.word	0x08017650
 8003894:	08017658 	.word	0x08017658
 8003898:	0801766c 	.word	0x0801766c
 800389c:	08017674 	.word	0x08017674
 80038a0:	08017688 	.word	0x08017688
 80038a4:	08017694 	.word	0x08017694
 80038a8:	080176a8 	.word	0x080176a8

080038ac <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 80038b0:	f7fd fce9 	bl	8001286 <millis>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <TransferDoneISR+0x40>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <TransferDoneISR+0x44>)
 80038be:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80038c0:	f7fd fce1 	bl	8001286 <millis>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <TransferDoneISR+0x40>)
 80038c8:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <TransferDoneISR+0x44>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <TransferDoneISR+0x44>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <TransferDoneISR+0x48>)
 80038e0:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <TransferDoneISR+0x4c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200009b0 	.word	0x200009b0
 80038f0:	200009b4 	.word	0x200009b4
 80038f4:	200009b8 	.word	0x200009b8
 80038f8:	200009ae 	.word	0x200009ae

080038fc <lcdInit>:


bool lcdInit(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <lcdInit+0xa4>)
 8003904:	2264      	movs	r2, #100	; 0x64
 8003906:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8003908:	f003 ff46 	bl	8007798 <st7735Init>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <lcdInit+0xa8>)
 8003912:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8003914:	4824      	ldr	r0, [pc, #144]	; (80039a8 <lcdInit+0xac>)
 8003916:	f003 ff4b 	bl	80077b0 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <lcdInit+0xac>)
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4823      	ldr	r0, [pc, #140]	; (80039ac <lcdInit+0xb0>)
 8003920:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	e007      	b.n	8003938 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <lcdInit+0xb4>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2100      	movs	r1, #0
 800392e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3301      	adds	r3, #1
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800393e:	dbf3      	blt.n	8003928 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8003940:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003944:	2100      	movs	r1, #0
 8003946:	481a      	ldr	r0, [pc, #104]	; (80039b0 <lcdInit+0xb4>)
 8003948:	f00f f9d4 	bl	8012cf4 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <lcdInit+0xb8>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	035b      	lsls	r3, r3, #13
 800395a:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <lcdInit+0xb4>)
 800395c:	4413      	add	r3, r2
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <lcdInit+0xbc>)
 8003960:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	22a0      	movs	r2, #160	; 0xa0
 800396a:	2100      	movs	r1, #0
 800396c:	2000      	movs	r0, #0
 800396e:	f000 fbdb 	bl	8004128 <lcdDrawFillRect>
  lcdUpdateDraw();
 8003972:	f000 fa9f 	bl	8003eb4 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8003976:	2064      	movs	r0, #100	; 0x64
 8003978:	f000 f830 	bl	80039dc <lcdSetBackLight>


  if (is_init != true)
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <lcdInit+0xa8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <lcdInit+0x92>
  {
    return false;
 800398a:	2300      	movs	r3, #0
 800398c:	e004      	b.n	8003998 <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 800398e:	490b      	ldr	r1, [pc, #44]	; (80039bc <lcdInit+0xc0>)
 8003990:	480b      	ldr	r0, [pc, #44]	; (80039c0 <lcdInit+0xc4>)
 8003992:	f7fe feff 	bl	8002794 <cliAdd>
#endif

  return true;
 8003996:	2301      	movs	r3, #1
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000080 	.word	0x20000080
 80039a4:	200009ac 	.word	0x200009ac
 80039a8:	20000990 	.word	0x20000990
 80039ac:	080038ad 	.word	0x080038ad
 80039b0:	200009c0 	.word	0x200009c0
 80039b4:	200009ad 	.word	0x200009ad
 80039b8:	200009bc 	.word	0x200009bc
 80039bc:	080045f5 	.word	0x080045f5
 80039c0:	080179a4 	.word	0x080179a4

080039c4 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return is_init;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <lcdIsInit+0x14>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	200009ac 	.word	0x200009ac

080039dc <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	2b64      	cmp	r3, #100	; 0x64
 80039ea:	bf28      	it	cs
 80039ec:	2364      	movcs	r3, #100	; 0x64
 80039ee:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <lcdSetBackLight+0x48>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	79fa      	ldrb	r2, [r7, #7]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d002      	beq.n	8003a00 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <lcdSetBackLight+0x48>)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <lcdSetBackLight+0x48>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f7ff fe14 	bl	8003638 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8003a10:	e003      	b.n	8003a1a <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8003a12:	2100      	movs	r1, #0
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7ff fe0f 	bl	8003638 <gpioPinWrite>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000080 	.word	0x20000080

08003a28 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <lcdDrawPixel+0x14>)
 8003a2a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003a34:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	200009bc 	.word	0x200009bc

08003a40 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8003a40:	b510      	push	{r4, lr}
 8003a42:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8003a44:	f000 fa62 	bl	8003f0c <lcdGetFrameBuffer>
 8003a48:	f500 411f 	add.w	r1, r0, #40704	; 0x9f00

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8003a4c:	b2a2      	uxth	r2, r4
 8003a4e:	1e83      	subs	r3, r0, #2
 8003a50:	31fe      	adds	r1, #254	; 0xfe
 8003a52:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8003a56:	428b      	cmp	r3, r1
 8003a58:	d1fb      	bne.n	8003a52 <lcdClearBuffer+0x12>
  }
}
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8003a5c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003a60:	4616      	mov	r6, r2
 8003a62:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
  int32_t x     = 0;

  while (x < r)
 8003a64:	2e00      	cmp	r6, #0
{
 8003a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -2 * r;
 8003a68:	ebc6 7bc6 	rsb	fp, r6, r6, lsl #31
  while (x < r)
 8003a6c:	f340 808d 	ble.w	8003b8a <lcdDrawCircleHelper+0x12e>
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003a70:	fa1f f981 	uxth.w	r9, r1
 8003a74:	f003 0104 	and.w	r1, r3, #4
 8003a78:	9103      	str	r1, [sp, #12]
 8003a7a:	f003 0102 	and.w	r1, r3, #2
 8003a7e:	9101      	str	r1, [sp, #4]
 8003a80:	f003 0108 	and.w	r1, r3, #8
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	f1c6 0401 	rsb	r4, r6, #1
 8003a8c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003a90:	fa1f f880 	uxth.w	r8, r0
 8003a94:	9102      	str	r1, [sp, #8]
 8003a96:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8003a98:	2500      	movs	r5, #0
 8003a9a:	e00a      	b.n	8003ab2 <lcdDrawCircleHelper+0x56>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8003a9c:	9b01      	ldr	r3, [sp, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d12c      	bne.n	8003afc <lcdDrawCircleHelper+0xa0>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8003aa2:	9b02      	ldr	r3, [sp, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d141      	bne.n	8003b2c <lcdDrawCircleHelper+0xd0>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d156      	bne.n	8003b5c <lcdDrawCircleHelper+0x100>
  while (x < r)
 8003aae:	42ae      	cmp	r6, r5
 8003ab0:	dd6b      	ble.n	8003b8a <lcdDrawCircleHelper+0x12e>
    if (f >= 0)
 8003ab2:	2c00      	cmp	r4, #0
 8003ab4:	db03      	blt.n	8003abe <lcdDrawCircleHelper+0x62>
      ddF_y += 2;
 8003ab6:	f10b 0b02 	add.w	fp, fp, #2
      r--;
 8003aba:	3e01      	subs	r6, #1
      f     += ddF_y;
 8003abc:	445c      	add	r4, fp
    x++;
 8003abe:	3501      	adds	r5, #1
    if (cornername & 0x4)
 8003ac0:	9b03      	ldr	r3, [sp, #12]
    f     += ddF_x;
 8003ac2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003ac6:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0e7      	beq.n	8003a9c <lcdDrawCircleHelper+0x40>
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003acc:	b2b3      	uxth	r3, r6
 8003ace:	fa1f fa85 	uxth.w	sl, r5
 8003ad2:	eb09 0103 	add.w	r1, r9, r3
 8003ad6:	eb08 000a 	add.w	r0, r8, sl
 8003ada:	b289      	uxth	r1, r1
 8003adc:	b280      	uxth	r0, r0
 8003ade:	9305      	str	r3, [sp, #20]
 8003ae0:	f7ff ffa2 	bl	8003a28 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 8003ae4:	9b05      	ldr	r3, [sp, #20]
 8003ae6:	eb09 010a 	add.w	r1, r9, sl
 8003aea:	eb08 0003 	add.w	r0, r8, r3
 8003aee:	b289      	uxth	r1, r1
 8003af0:	b280      	uxth	r0, r0
 8003af2:	f7ff ff99 	bl	8003a28 <lcdDrawPixel>
    if (cornername & 0x2)
 8003af6:	9b01      	ldr	r3, [sp, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0d2      	beq.n	8003aa2 <lcdDrawCircleHelper+0x46>
      lcdDrawPixel(x0 + x, y0 - r, color);
 8003afc:	b2b3      	uxth	r3, r6
 8003afe:	fa1f fa85 	uxth.w	sl, r5
 8003b02:	eba9 0103 	sub.w	r1, r9, r3
 8003b06:	eb08 000a 	add.w	r0, r8, sl
 8003b0a:	b289      	uxth	r1, r1
 8003b0c:	b280      	uxth	r0, r0
 8003b0e:	9305      	str	r3, [sp, #20]
 8003b10:	f7ff ff8a 	bl	8003a28 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003b14:	9b05      	ldr	r3, [sp, #20]
 8003b16:	eba9 010a 	sub.w	r1, r9, sl
 8003b1a:	eb08 0003 	add.w	r0, r8, r3
 8003b1e:	b289      	uxth	r1, r1
 8003b20:	b280      	uxth	r0, r0
 8003b22:	f7ff ff81 	bl	8003a28 <lcdDrawPixel>
    if (cornername & 0x8)
 8003b26:	9b02      	ldr	r3, [sp, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0bd      	beq.n	8003aa8 <lcdDrawCircleHelper+0x4c>
 8003b2c:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 - r, y0 + x, color);
 8003b2e:	fa1f fa86 	uxth.w	sl, r6
 8003b32:	eb09 0103 	add.w	r1, r9, r3
 8003b36:	eba8 000a 	sub.w	r0, r8, sl
 8003b3a:	b289      	uxth	r1, r1
 8003b3c:	b280      	uxth	r0, r0
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	f7ff ff72 	bl	8003a28 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003b44:	9b05      	ldr	r3, [sp, #20]
 8003b46:	eb0a 0109 	add.w	r1, sl, r9
 8003b4a:	eba8 0003 	sub.w	r0, r8, r3
 8003b4e:	b289      	uxth	r1, r1
 8003b50:	b280      	uxth	r0, r0
 8003b52:	f7ff ff69 	bl	8003a28 <lcdDrawPixel>
    if (cornername & 0x1)
 8003b56:	9b04      	ldr	r3, [sp, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0a8      	beq.n	8003aae <lcdDrawCircleHelper+0x52>
 8003b5c:	b2ab      	uxth	r3, r5
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 8003b5e:	fa1f fa86 	uxth.w	sl, r6
 8003b62:	eba9 0103 	sub.w	r1, r9, r3
 8003b66:	eba8 000a 	sub.w	r0, r8, sl
 8003b6a:	b289      	uxth	r1, r1
 8003b6c:	b280      	uxth	r0, r0
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	f7ff ff5a 	bl	8003a28 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 8003b74:	9b05      	ldr	r3, [sp, #20]
 8003b76:	eba9 010a 	sub.w	r1, r9, sl
 8003b7a:	eba8 0003 	sub.w	r0, r8, r3
 8003b7e:	b289      	uxth	r1, r1
 8003b80:	b280      	uxth	r0, r0
 8003b82:	f7ff ff51 	bl	8003a28 <lcdDrawPixel>
  while (x < r)
 8003b86:	42ae      	cmp	r6, r5
 8003b88:	dc93      	bgt.n	8003ab2 <lcdDrawCircleHelper+0x56>
    }
  }
}
 8003b8a:	b006      	add	sp, #24
 8003b8c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003b90 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003b90:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003b94:	b08a      	sub	sp, #40	; 0x28
 8003b96:	4694      	mov	ip, r2
 8003b98:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b9a:	f8cd c00c 	str.w	ip, [sp, #12]
 8003b9e:	fa1f f886 	uxth.w	r8, r6
 8003ba2:	ea4f 0248 	mov.w	r2, r8, lsl #1
{
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	b291      	uxth	r1, r2
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003baa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
{
 8003bae:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003bb2:	4605      	mov	r5, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003bb4:	b280      	uxth	r0, r0
 8003bb6:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8003bba:	9005      	str	r0, [sp, #20]
 8003bbc:	1a52      	subs	r2, r2, r1
 8003bbe:	4440      	add	r0, r8
{
 8003bc0:	4699      	mov	r9, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003bc2:	b200      	sxth	r0, r0
 8003bc4:	fa1f f38a 	uxth.w	r3, sl
 8003bc8:	b212      	sxth	r2, r2
 8003bca:	b221      	sxth	r1, r4
 8003bcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003bd0:	9004      	str	r0, [sp, #16]
 8003bd2:	f000 fa83 	bl	80040dc <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003bd6:	9804      	ldr	r0, [sp, #16]
 8003bd8:	f8cd 9010 	str.w	r9, [sp, #16]
 8003bdc:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 8003be0:	9a08      	ldr	r2, [sp, #32]
 8003be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be4:	9308      	str	r3, [sp, #32]
 8003be6:	fa1f fb84 	uxth.w	fp, r4
 8003bea:	f109 31ff 	add.w	r1, r9, #4294967295
 8003bee:	4459      	add	r1, fp
 8003bf0:	b209      	sxth	r1, r1
 8003bf2:	f000 fa73 	bl	80040dc <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8003bf6:	9b07      	ldr	r3, [sp, #28]
 8003bf8:	eb08 010b 	add.w	r1, r8, fp
 8003bfc:	eba9 0203 	sub.w	r2, r9, r3
 8003c00:	9b08      	ldr	r3, [sp, #32]
 8003c02:	b209      	sxth	r1, r1
 8003c04:	b212      	sxth	r2, r2
 8003c06:	b228      	sxth	r0, r5
 8003c08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003c0c:	9107      	str	r1, [sp, #28]
 8003c0e:	f000 fa3f 	bl	8004090 <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003c12:	9a06      	ldr	r2, [sp, #24]
 8003c14:	9b05      	ldr	r3, [sp, #20]
 8003c16:	9907      	ldr	r1, [sp, #28]
 8003c18:	1e50      	subs	r0, r2, #1
 8003c1a:	4418      	add	r0, r3

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003c1c:	eb05 0806 	add.w	r8, r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003c20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c24:	b200      	sxth	r0, r0
 8003c26:	f000 fa33 	bl	8004090 <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003c2a:	1931      	adds	r1, r6, r4
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4640      	mov	r0, r8
 8003c30:	f8cd a000 	str.w	sl, [sp]
 8003c34:	2301      	movs	r3, #1
 8003c36:	9105      	str	r1, [sp, #20]
 8003c38:	f7ff ff10 	bl	8003a5c <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003c3c:	9803      	ldr	r0, [sp, #12]
 8003c3e:	9905      	ldr	r1, [sp, #20]
 8003c40:	f8cd a000 	str.w	sl, [sp]
 8003c44:	4428      	add	r0, r5
 8003c46:	1b80      	subs	r0, r0, r6
 8003c48:	3801      	subs	r0, #1
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9003      	str	r0, [sp, #12]
 8003c50:	f7ff ff04 	bl	8003a5c <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8003c54:	9904      	ldr	r1, [sp, #16]
 8003c56:	9803      	ldr	r0, [sp, #12]
 8003c58:	f8cd a000 	str.w	sl, [sp]
 8003c5c:	4421      	add	r1, r4
 8003c5e:	1b89      	subs	r1, r1, r6
 8003c60:	3901      	subs	r1, #1
 8003c62:	4632      	mov	r2, r6
 8003c64:	2304      	movs	r3, #4
 8003c66:	9103      	str	r1, [sp, #12]
 8003c68:	f7ff fef8 	bl	8003a5c <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8003c6c:	9903      	ldr	r1, [sp, #12]
 8003c6e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8003c72:	2308      	movs	r3, #8
 8003c74:	4632      	mov	r2, r6
 8003c76:	4640      	mov	r0, r8
}
 8003c78:	b00a      	add	sp, #40	; 0x28
 8003c7a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8003c7e:	f7ff beed 	b.w	8003a5c <lcdDrawCircleHelper>
 8003c82:	bf00      	nop

08003c84 <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 8003c84:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003c88:	4690      	mov	r8, r2
 8003c8a:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8003c8c:	f1c8 0a00 	rsb	sl, r8, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 8003c90:	f1b8 0f00 	cmp.w	r8, #0
{
 8003c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 8003c96:	ebaa 0a08 	sub.w	sl, sl, r8
  while (y < r)
 8003c9a:	dd6f      	ble.n	8003d7c <lcdDrawFillCircleHelper+0xf8>
 8003c9c:	3201      	adds	r2, #1
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	1c95      	adds	r5, r2, #2
 8003ca2:	9204      	str	r2, [sp, #16]
 8003ca4:	f003 0201 	and.w	r2, r3, #1
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	9302      	str	r3, [sp, #8]
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cb0:	9203      	str	r2, [sp, #12]
 8003cb2:	b280      	uxth	r0, r0
 8003cb4:	b289      	uxth	r1, r1
 8003cb6:	f1c8 0401 	rsb	r4, r8, #1
 8003cba:	9000      	str	r0, [sp, #0]
 8003cbc:	9101      	str	r1, [sp, #4]
 8003cbe:	b2ad      	uxth	r5, r5
  int32_t y     = 0;
 8003cc0:	2600      	movs	r6, #0
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	e006      	b.n	8003cd4 <lcdDrawFillCircleHelper+0x50>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8003cc6:	9a02      	ldr	r2, [sp, #8]
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d133      	bne.n	8003d34 <lcdDrawFillCircleHelper+0xb0>
  while (y < r)
 8003ccc:	3502      	adds	r5, #2
 8003cce:	45b0      	cmp	r8, r6
 8003cd0:	b2ad      	uxth	r5, r5
 8003cd2:	dd53      	ble.n	8003d7c <lcdDrawFillCircleHelper+0xf8>
    if (f >= 0)
 8003cd4:	2c00      	cmp	r4, #0
    y++;
 8003cd6:	f106 0601 	add.w	r6, r6, #1
    if (f >= 0)
 8003cda:	db04      	blt.n	8003ce6 <lcdDrawFillCircleHelper+0x62>
      ddF_y += 2;
 8003cdc:	f10a 0a02 	add.w	sl, sl, #2
      r--;
 8003ce0:	f108 38ff 	add.w	r8, r8, #4294967295
      f     += ddF_y;
 8003ce4:	4454      	add	r4, sl
    if (cornername & 0x1)
 8003ce6:	9a03      	ldr	r2, [sp, #12]
    f     += ddF_x;
 8003ce8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8003cec:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	d0e9      	beq.n	8003cc6 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003cf2:	9a04      	ldr	r2, [sp, #16]
 8003cf4:	9901      	ldr	r1, [sp, #4]
 8003cf6:	9800      	ldr	r0, [sp, #0]
 8003cf8:	9305      	str	r3, [sp, #20]
 8003cfa:	fa1f f988 	uxth.w	r9, r8
 8003cfe:	fa1f fb86 	uxth.w	fp, r6
 8003d02:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8003d06:	4459      	add	r1, fp
 8003d08:	eba0 0009 	sub.w	r0, r0, r9
 8003d0c:	b212      	sxth	r2, r2
 8003d0e:	b209      	sxth	r1, r1
 8003d10:	b200      	sxth	r0, r0
 8003d12:	f000 f9e3 	bl	80040dc <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003d16:	9901      	ldr	r1, [sp, #4]
 8003d18:	9800      	ldr	r0, [sp, #0]
 8003d1a:	9b05      	ldr	r3, [sp, #20]
 8003d1c:	4449      	add	r1, r9
 8003d1e:	eba0 000b 	sub.w	r0, r0, fp
 8003d22:	b22a      	sxth	r2, r5
 8003d24:	b209      	sxth	r1, r1
 8003d26:	b200      	sxth	r0, r0
 8003d28:	f000 f9d8 	bl	80040dc <lcdDrawHLine>
    if (cornername & 0x2)
 8003d2c:	9a02      	ldr	r2, [sp, #8]
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003d2e:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2)
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	d0cb      	beq.n	8003ccc <lcdDrawFillCircleHelper+0x48>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8003d34:	9a04      	ldr	r2, [sp, #16]
 8003d36:	9901      	ldr	r1, [sp, #4]
 8003d38:	9800      	ldr	r0, [sp, #0]
 8003d3a:	9305      	str	r3, [sp, #20]
 8003d3c:	fa1f f988 	uxth.w	r9, r8
 8003d40:	fa1f fb86 	uxth.w	fp, r6
 8003d44:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8003d48:	eba1 010b 	sub.w	r1, r1, fp
 8003d4c:	eba0 0009 	sub.w	r0, r0, r9
 8003d50:	b212      	sxth	r2, r2
 8003d52:	b209      	sxth	r1, r1
 8003d54:	b200      	sxth	r0, r0
 8003d56:	f000 f9c1 	bl	80040dc <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003d5a:	9901      	ldr	r1, [sp, #4]
 8003d5c:	9800      	ldr	r0, [sp, #0]
 8003d5e:	9b05      	ldr	r3, [sp, #20]
 8003d60:	eba1 0109 	sub.w	r1, r1, r9
 8003d64:	eba0 000b 	sub.w	r0, r0, fp
 8003d68:	b22a      	sxth	r2, r5
 8003d6a:	b209      	sxth	r1, r1
 8003d6c:	b200      	sxth	r0, r0
 8003d6e:	f000 f9b5 	bl	80040dc <lcdDrawHLine>
  while (y < r)
 8003d72:	3502      	adds	r5, #2
 8003d74:	45b0      	cmp	r8, r6
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003d76:	9b05      	ldr	r3, [sp, #20]
  while (y < r)
 8003d78:	b2ad      	uxth	r5, r5
 8003d7a:	dcab      	bgt.n	8003cd4 <lcdDrawFillCircleHelper+0x50>
    }
  }
}
 8003d7c:	b006      	add	sp, #24
 8003d7e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8003d82:	bf00      	nop

08003d84 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003d84:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8003d8e:	4688      	mov	r8, r1
 8003d90:	4614      	mov	r4, r2
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d92:	b2b1      	uxth	r1, r6
 8003d94:	fa1f f289 	uxth.w	r2, r9
{
 8003d98:	461d      	mov	r5, r3
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d9a:	9200      	str	r2, [sp, #0]
 8003d9c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003da0:	b222      	sxth	r2, r4
 8003da2:	4441      	add	r1, r8

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003da4:	eba4 0446 	sub.w	r4, r4, r6, lsl #1
 8003da8:	4445      	add	r5, r8
{
 8003daa:	4682      	mov	sl, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003dac:	3c01      	subs	r4, #1
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	b209      	sxth	r1, r1
 8003db2:	b200      	sxth	r0, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003db4:	1bad      	subs	r5, r5, r6
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003db6:	f000 f9b7 	bl	8004128 <lcdDrawFillRect>
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003dba:	eb0a 0006 	add.w	r0, sl, r6
 8003dbe:	1e69      	subs	r1, r5, #1
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	e9cd 4900 	strd	r4, r9, [sp]
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	9003      	str	r0, [sp, #12]
 8003dca:	f7ff ff5b 	bl	8003c84 <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003dce:	9803      	ldr	r0, [sp, #12]
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	eb08 0106 	add.w	r1, r8, r6
 8003dd8:	e9cd 490c 	strd	r4, r9, [sp, #48]	; 0x30
}
 8003ddc:	b005      	add	sp, #20
 8003dde:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003de2:	f7ff bf4f 	b.w	8003c84 <lcdDrawFillCircleHelper>
 8003de6:	bf00      	nop

08003de8 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return fps_count;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <lcdGetFps+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200009b8 	.word	0x200009b8

08003e00 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return fps_time;
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <lcdGetFpsTime+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	200009b4 	.word	0x200009b4

08003e18 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <lcdDrawAvailable+0x28>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	b2db      	uxtb	r3, r3
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	200009ae 	.word	0x200009ae

08003e44 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8003e44:	b598      	push	{r3, r4, r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  if (is_init != true)
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <lcdRequestDraw+0x5c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f083 0301 	eor.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <lcdRequestDraw+0x16>
  {
    return false;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e020      	b.n	8003e9c <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <lcdRequestDraw+0x60>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <lcdRequestDraw+0x22>
  {
    return false;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e01a      	b.n	8003e9c <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <lcdRequestDraw+0x64>)
 8003e68:	689c      	ldr	r4, [r3, #8]
 8003e6a:	237f      	movs	r3, #127	; 0x7f
 8003e6c:	229f      	movs	r2, #159	; 0x9f
 8003e6e:	2100      	movs	r1, #0
 8003e70:	2000      	movs	r0, #0
 8003e72:	47a0      	blx	r4

  lcd_request_draw = true;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <lcdRequestDraw+0x60>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <lcdRequestDraw+0x64>)
 8003e7c:	699c      	ldr	r4, [r3, #24]
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <lcdRequestDraw+0x68>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	035b      	lsls	r3, r3, #13
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <lcdRequestDraw+0x6c>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	2200      	movs	r2, #0
 8003e92:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003e96:	4618      	mov	r0, r3
 8003e98:	47a0      	blx	r4

  return true;
 8003e9a:	2301      	movs	r3, #1
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd98      	pop	{r3, r4, r7, pc}
 8003ea0:	200009ac 	.word	0x200009ac
 8003ea4:	200009ae 	.word	0x200009ae
 8003ea8:	20000990 	.word	0x20000990
 8003eac:	200009ad 	.word	0x200009ad
 8003eb0:	200009c0 	.word	0x200009c0

08003eb4 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <lcdUpdateDraw+0x54>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	f083 0301 	eor.w	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d118      	bne.n	8003efa <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003ec8:	f7ff ffbc 	bl	8003e44 <lcdRequestDraw>

  pre_time = millis();
 8003ecc:	f7fd f9db 	bl	8001286 <millis>
 8003ed0:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003ed2:	e009      	b.n	8003ee8 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fd f9cb 	bl	8001270 <delay>
    if (millis()-pre_time >= 100)
 8003eda:	f7fd f9d4 	bl	8001286 <millis>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b63      	cmp	r3, #99	; 0x63
 8003ee6:	d80a      	bhi.n	8003efe <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003ee8:	f7ff ff96 	bl	8003e18 <lcdDrawAvailable>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f083 0301 	eor.w	r3, r3, #1
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ed      	bne.n	8003ed4 <lcdUpdateDraw+0x20>
 8003ef8:	e002      	b.n	8003f00 <lcdUpdateDraw+0x4c>
    return;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <lcdUpdateDraw+0x4c>
    {
      break;
 8003efe:	bf00      	nop
    }
  }
}
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200009ac 	.word	0x200009ac

08003f0c <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <lcdGetFrameBuffer+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200009bc 	.word	0x200009bc

08003f24 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	80fb      	strh	r3, [r7, #6]
 8003f36:	4603      	mov	r3, r0
 8003f38:	80bb      	strh	r3, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003f42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003f50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003f54:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5c:	1acb      	subs	r3, r1, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bfb8      	it	lt
 8003f62:	425b      	neglt	r3, r3
 8003f64:	429a      	cmp	r2, r3
 8003f66:	bfcc      	ite	gt
 8003f68:	2301      	movgt	r3, #1
 8003f6a:	2300      	movle	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8003f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da01      	bge.n	8003f7c <lcdDrawLine+0x58>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8003f7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	da01      	bge.n	8003f88 <lcdDrawLine+0x64>
 8003f84:	2300      	movs	r3, #0
 8003f86:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8003f88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	da01      	bge.n	8003f94 <lcdDrawLine+0x70>
 8003f90:	2300      	movs	r3, #0
 8003f92:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8003f94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da01      	bge.n	8003fa0 <lcdDrawLine+0x7c>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003fa0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	833b      	strh	r3, [r7, #24]
 8003fac:	88bb      	ldrh	r3, [r7, #4]
 8003fae:	80fb      	strh	r3, [r7, #6]
 8003fb0:	8b3b      	ldrh	r3, [r7, #24]
 8003fb2:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	82fb      	strh	r3, [r7, #22]
 8003fb8:	883b      	ldrh	r3, [r7, #0]
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003fc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	dd0b      	ble.n	8003fe4 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	82bb      	strh	r3, [r7, #20]
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	80fb      	strh	r3, [r7, #6]
 8003fd4:	8abb      	ldrh	r3, [r7, #20]
 8003fd6:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003fd8:	88bb      	ldrh	r3, [r7, #4]
 8003fda:	827b      	strh	r3, [r7, #18]
 8003fdc:	883b      	ldrh	r3, [r7, #0]
 8003fde:	80bb      	strh	r3, [r7, #4]
 8003fe0:	8a7b      	ldrh	r3, [r7, #18]
 8003fe2:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8003fee:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003ff2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfb8      	it	lt
 8003ffc:	425b      	neglt	r3, r3
 8003ffe:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8004000:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004004:	0fda      	lsrs	r2, r3, #31
 8004006:	4413      	add	r3, r2
 8004008:	105b      	asrs	r3, r3, #1
 800400a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 800400c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004010:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004014:	429a      	cmp	r2, r3
 8004016:	da02      	bge.n	800401e <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8004018:	2301      	movs	r3, #1
 800401a:	83bb      	strh	r3, [r7, #28]
 800401c:	e02d      	b.n	800407a <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 800401e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004022:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8004024:	e029      	b.n	800407a <lcdDrawLine+0x156>
  {
    if (steep)
 8004026:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 800402e:	88bb      	ldrh	r3, [r7, #4]
 8004030:	88f9      	ldrh	r1, [r7, #6]
 8004032:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fcf7 	bl	8003a28 <lcdDrawPixel>
 800403a:	e005      	b.n	8004048 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	88b9      	ldrh	r1, [r7, #4]
 8004040:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fcf0 	bl	8003a28 <lcdDrawPixel>
    }
    err -= dy;
 8004048:	8bfa      	ldrh	r2, [r7, #30]
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	b29b      	uxth	r3, r3
 8004050:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8004052:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da09      	bge.n	800406e <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 800405a:	88ba      	ldrh	r2, [r7, #4]
 800405c:	8bbb      	ldrh	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8004064:	8bfa      	ldrh	r2, [r7, #30]
 8004066:	8a3b      	ldrh	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 800406e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004072:	b29b      	uxth	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	80fb      	strh	r3, [r7, #6]
 800407a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800407e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004082:	429a      	cmp	r2, r3
 8004084:	ddcf      	ble.n	8004026 <lcdDrawLine+0x102>
    }
  }
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	3724      	adds	r7, #36	; 0x24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b085      	sub	sp, #20
 8004094:	af02      	add	r7, sp, #8
 8004096:	4604      	mov	r4, r0
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	80fb      	strh	r3, [r7, #6]
 80040a2:	4603      	mov	r3, r0
 80040a4:	80bb      	strh	r3, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	807b      	strh	r3, [r7, #2]
 80040aa:	4613      	mov	r3, r2
 80040ac:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 80040ae:	88ba      	ldrh	r2, [r7, #4]
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	4413      	add	r3, r2
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	b21c      	sxth	r4, r3
 80040bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040c8:	883b      	ldrh	r3, [r7, #0]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	4623      	mov	r3, r4
 80040ce:	f7ff ff29 	bl	8003f24 <lcdDrawLine>
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop

080040dc <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b085      	sub	sp, #20
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	80fb      	strh	r3, [r7, #6]
 80040ee:	4603      	mov	r3, r0
 80040f0:	80bb      	strh	r3, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	807b      	strh	r3, [r7, #2]
 80040f6:	4613      	mov	r3, r2
 80040f8:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	4413      	add	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	b21a      	sxth	r2, r3
 8004108:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800410c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004110:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004114:	883b      	ldrh	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4623      	mov	r3, r4
 800411a:	f7ff ff03 	bl	8003f24 <lcdDrawLine>
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}
 8004126:	bf00      	nop

08004128 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	4623      	mov	r3, r4
 8004138:	80fb      	strh	r3, [r7, #6]
 800413a:	4603      	mov	r3, r0
 800413c:	80bb      	strh	r3, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	807b      	strh	r3, [r7, #2]
 8004142:	4613      	mov	r3, r2
 8004144:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	81fb      	strh	r3, [r7, #14]
 800414a:	e00e      	b.n	800416a <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 800414c:	8c3b      	ldrh	r3, [r7, #32]
 800414e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004152:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004156:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800415a:	f7ff ff99 	bl	8004090 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 800415e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004162:	b29b      	uxth	r3, r3
 8004164:	3301      	adds	r3, #1
 8004166:	b29b      	uxth	r3, r3
 8004168:	81fb      	strh	r3, [r7, #14]
 800416a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800416e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004176:	440b      	add	r3, r1
 8004178:	429a      	cmp	r2, r3
 800417a:	dbe7      	blt.n	800414c <lcdDrawFillRect+0x24>
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	bf00      	nop

08004188 <lcdDrawBufferImage>:
    if((y + h - 1) >= LCD_HEIGHT) return;

    lcd.setWindow(x, y, x+w-1, y+h-1);
    lcd.sendBuffer((uint8_t *)data, sizeof(uint16_t)*w*h, 10);
}
void lcdDrawBufferImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	80fb      	strh	r3, [r7, #6]
 800419a:	4603      	mov	r3, r0
 800419c:	80bb      	strh	r3, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	807b      	strh	r3, [r7, #2]
 80041a2:	4613      	mov	r3, r2
 80041a4:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b9f      	cmp	r3, #159	; 0x9f
 80041aa:	d83b      	bhi.n	8004224 <lcdDrawBufferImage+0x9c>
 80041ac:	88bb      	ldrh	r3, [r7, #4]
 80041ae:	2b7f      	cmp	r3, #127	; 0x7f
 80041b0:	d838      	bhi.n	8004224 <lcdDrawBufferImage+0x9c>
    if((x + w - 1) >= LCD_WIDTH) return;
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	4413      	add	r3, r2
 80041b8:	2ba0      	cmp	r3, #160	; 0xa0
 80041ba:	dc35      	bgt.n	8004228 <lcdDrawBufferImage+0xa0>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80041bc:	88ba      	ldrh	r2, [r7, #4]
 80041be:	883b      	ldrh	r3, [r7, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	dc32      	bgt.n	800422c <lcdDrawBufferImage+0xa4>

    uint16_t pixel_cnt = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	81fb      	strh	r3, [r7, #14]

    for (int16_t i=y; i<y+h; i++)
 80041ca:	88bb      	ldrh	r3, [r7, #4]
 80041cc:	81bb      	strh	r3, [r7, #12]
 80041ce:	e021      	b.n	8004214 <lcdDrawBufferImage+0x8c>
    {
		for (int16_t j=x; j<x+w; j++)
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	817b      	strh	r3, [r7, #10]
 80041d4:	e011      	b.n	80041fa <lcdDrawBufferImage+0x72>
		{
			lcdDrawPixel(j, i, data[pixel_cnt++]);
 80041d6:	8978      	ldrh	r0, [r7, #10]
 80041d8:	89b9      	ldrh	r1, [r7, #12]
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	81fa      	strh	r2, [r7, #14]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	6a3a      	ldr	r2, [r7, #32]
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f7ff fc1d 	bl	8003a28 <lcdDrawPixel>
		for (int16_t j=x; j<x+w; j++)
 80041ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	817b      	strh	r3, [r7, #10]
 80041fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041fe:	88f9      	ldrh	r1, [r7, #6]
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	440b      	add	r3, r1
 8004204:	429a      	cmp	r2, r3
 8004206:	dbe6      	blt.n	80041d6 <lcdDrawBufferImage+0x4e>
    for (int16_t i=y; i<y+h; i++)
 8004208:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800420c:	b29b      	uxth	r3, r3
 800420e:	3301      	adds	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	81bb      	strh	r3, [r7, #12]
 8004214:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004218:	88b9      	ldrh	r1, [r7, #4]
 800421a:	883b      	ldrh	r3, [r7, #0]
 800421c:	440b      	add	r3, r1
 800421e:	429a      	cmp	r2, r3
 8004220:	dbd6      	blt.n	80041d0 <lcdDrawBufferImage+0x48>
 8004222:	e004      	b.n	800422e <lcdDrawBufferImage+0xa6>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8004224:	bf00      	nop
 8004226:	e002      	b.n	800422e <lcdDrawBufferImage+0xa6>
    if((x + w - 1) >= LCD_WIDTH) return;
 8004228:	bf00      	nop
 800422a:	e000      	b.n	800422e <lcdDrawBufferImage+0xa6>
    if((y + h - 1) >= LCD_HEIGHT) return;
 800422c:	bf00      	nop
		}
    }
}
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8004234:	b408      	push	{r3}
 8004236:	b590      	push	{r4, r7, lr}
 8004238:	b0d8      	sub	sp, #352	; 0x160
 800423a:	af02      	add	r7, sp, #8
 800423c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004240:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004244:	6018      	str	r0, [r3, #0]
 8004246:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800424a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800424e:	6019      	str	r1, [r3, #0]
 8004250:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004254:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004258:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 800425a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800425e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8004262:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004266:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8004270:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004274:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004278:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800427c:	21ff      	movs	r1, #255	; 0xff
 800427e:	f010 f9f5 	bl	801466c <vsniprintf>
 8004282:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8004286:	4b80      	ldr	r3, [pc, #512]	; (8004488 <lcdPrintf+0x254>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	4b7f      	ldr	r3, [pc, #508]	; (800448c <lcdPrintf+0x258>)
 800428e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d072      	beq.n	800437e <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800429e:	e067      	b.n	8004370 <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 80042a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042a4:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80042a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80042ac:	4413      	add	r3, r2
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	4b75      	ldr	r3, [pc, #468]	; (8004488 <lcdPrintf+0x254>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	4b75      	ldr	r3, [pc, #468]	; (800448c <lcdPrintf+0x258>)
 80042b8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80042bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042c0:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80042c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042c8:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80042cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042d0:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4623      	mov	r3, r4
 80042da:	6809      	ldr	r1, [r1, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f000 f92d 	bl	800453c <disEngFont>

      Size_Char = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 80042e8:	4b67      	ldr	r3, [pc, #412]	; (8004488 <lcdPrintf+0x254>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <lcdPrintf+0x258>)
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <lcdPrintf+0x254>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	4b62      	ldr	r3, [pc, #392]	; (800448c <lcdPrintf+0x258>)
 8004302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 800430c:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004310:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004314:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004318:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800431c:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8004320:	6809      	ldr	r1, [r1, #0]
 8004322:	440a      	add	r2, r1
 8004324:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8004326:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800432a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800432e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4413      	add	r3, r2
 8004336:	2ba0      	cmp	r3, #160	; 0xa0
 8004338:	dd13      	ble.n	8004362 <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 800433a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800433e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004342:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004346:	601a      	str	r2, [r3, #0]
        y += font_height;
 8004348:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 800434c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004350:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004354:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004358:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 800435c:	6809      	ldr	r1, [r1, #0]
 800435e:	440a      	add	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8004362:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004366:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800436a:	4413      	add	r3, r2
 800436c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004370:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004374:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004378:	429a      	cmp	r2, r3
 800437a:	db91      	blt.n	80042a0 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 800437c:	e07b      	b.n	8004476 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004384:	e06f      	b.n	8004466 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8004386:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800438a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800438e:	4413      	add	r3, r2
 8004390:	f107 0214 	add.w	r2, r7, #20
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f002 ff0c 	bl	80071b4 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 800439c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043a0:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	f107 0214 	add.w	r2, r7, #20
 80043aa:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80043ae:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80043b2:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80043b6:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 80043ba:	6809      	ldr	r1, [r1, #0]
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	f000 f867 	bl	8004490 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 80043c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043ca:	885b      	ldrh	r3, [r3, #2]
 80043cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 80043d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	dd0e      	ble.n	80043f6 <lcdPrintf+0x1c2>
        font_width = 16;
 80043d8:	2310      	movs	r3, #16
 80043da:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 80043de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043e6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80043ea:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	3210      	adds	r2, #16
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e00d      	b.n	8004412 <lcdPrintf+0x1de>
        font_width = 8;
 80043f6:	2308      	movs	r3, #8
 80043f8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 80043fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004400:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004404:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004408:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	3208      	adds	r2, #8
 8004410:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8004412:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004416:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800441a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4413      	add	r3, r2
 8004422:	2ba0      	cmp	r3, #160	; 0xa0
 8004424:	dd11      	ble.n	800444a <lcdPrintf+0x216>
        x  = x_Pre;
 8004426:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800442a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800442e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004432:	601a      	str	r2, [r3, #0]
        y += 16;
 8004434:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004438:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800443c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004440:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	3210      	adds	r2, #16
 8004448:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800444a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800444e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004452:	889b      	ldrh	r3, [r3, #4]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d00d      	beq.n	8004474 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8004458:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800445c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004460:	4413      	add	r3, r2
 8004462:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004466:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800446a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800446e:	429a      	cmp	r2, r3
 8004470:	db89      	blt.n	8004386 <lcdPrintf+0x152>
}
 8004472:	e000      	b.n	8004476 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004474:	bf00      	nop
}
 8004476:	bf00      	nop
 8004478:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004482:	b001      	add	sp, #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000081 	.word	0x20000081
 800448c:	20000084 	.word	0x20000084

08004490 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	885b      	ldrh	r3, [r3, #2]
 80044a2:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 80044a4:	8b3b      	ldrh	r3, [r7, #24]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <disHanFont+0x1e>
  {
    FontSize = 2;
 80044aa:	2302      	movs	r3, #2
 80044ac:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80044ae:	2300      	movs	r3, #0
 80044b0:	83fb      	strh	r3, [r7, #30]
 80044b2:	e03a      	b.n	800452a <disHanFont+0x9a>
  {
    index_x = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80044b8:	2300      	movs	r3, #0
 80044ba:	83bb      	strh	r3, [r7, #28]
 80044bc:	e02e      	b.n	800451c <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 80044be:	8bfb      	ldrh	r3, [r7, #30]
 80044c0:	8b3a      	ldrh	r2, [r7, #24]
 80044c2:	fb03 f202 	mul.w	r2, r3, r2
 80044c6:	8bbb      	ldrh	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	799b      	ldrb	r3, [r3, #6]
 80044d0:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 80044d2:	2300      	movs	r3, #0
 80044d4:	837b      	strh	r3, [r7, #26]
 80044d6:	e01b      	b.n	8004510 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 80044d8:	7d7a      	ldrb	r2, [r7, #21]
 80044da:	8b7b      	ldrh	r3, [r7, #26]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	8afb      	ldrh	r3, [r7, #22]
 80044ee:	4413      	add	r3, r2
 80044f0:	b298      	uxth	r0, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	8bfb      	ldrh	r3, [r7, #30]
 80044f8:	4413      	add	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	4619      	mov	r1, r3
 8004500:	f7ff fa92 	bl	8003a28 <lcdDrawPixel>
        }
        index_x++;
 8004504:	8afb      	ldrh	r3, [r7, #22]
 8004506:	3301      	adds	r3, #1
 8004508:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 800450a:	8b7b      	ldrh	r3, [r7, #26]
 800450c:	3301      	adds	r3, #1
 800450e:	837b      	strh	r3, [r7, #26]
 8004510:	8b7b      	ldrh	r3, [r7, #26]
 8004512:	2b07      	cmp	r3, #7
 8004514:	d9e0      	bls.n	80044d8 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004516:	8bbb      	ldrh	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	83bb      	strh	r3, [r7, #28]
 800451c:	8bba      	ldrh	r2, [r7, #28]
 800451e:	8b3b      	ldrh	r3, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3cc      	bcc.n	80044be <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	3301      	adds	r3, #1
 8004528:	83fb      	strh	r3, [r7, #30]
 800452a:	8bfb      	ldrh	r3, [r7, #30]
 800452c:	2b0f      	cmp	r3, #15
 800452e:	d9c1      	bls.n	80044b4 <disHanFont+0x24>
      }
    }
  }
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop

0800453c <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	e035      	b.n	80045be <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	3b20      	subs	r3, #32
 800455a:	6839      	ldr	r1, [r7, #0]
 800455c:	7849      	ldrb	r1, [r1, #1]
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4619      	mov	r1, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	440b      	add	r3, r1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	e01a      	b.n	80045ac <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00f      	beq.n	80045a6 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	b29a      	uxth	r2, r3
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	b29b      	uxth	r3, r3
 800458e:	4413      	add	r3, r2
 8004590:	b298      	uxth	r0, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	b29a      	uxth	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	b29b      	uxth	r3, r3
 800459a:	4413      	add	r3, r2
 800459c:	b29b      	uxth	r3, r3
 800459e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80045a0:	4619      	mov	r1, r3
 80045a2:	f7ff fa41 	bl	8003a28 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d3de      	bcc.n	8004576 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	461a      	mov	r2, r3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d3c3      	bcc.n	8004552 <disEngFont+0x16>
      }
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 80045de:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <lcdSetFont+0x1c>)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	7013      	strb	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000081 	.word	0x20000081

080045f4 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d163      	bne.n	80046d0 <cliLcd+0xdc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	494e      	ldr	r1, [pc, #312]	; (8004748 <cliLcd+0x154>)
 800460e:	2000      	movs	r0, #0
 8004610:	4798      	blx	r3
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d05b      	beq.n	80046d0 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 8004618:	2003      	movs	r0, #3
 800461a:	f7ff ffdb 	bl	80045d4 <lcdSetFont>

    while(cliKeepLoop())
 800461e:	e04b      	b.n	80046b8 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 8004620:	f7ff fbfa 	bl	8003e18 <lcdDrawAvailable>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d046      	beq.n	80046b8 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 800462a:	2000      	movs	r0, #0
 800462c:	f7ff fa08 	bl	8003a40 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <cliLcd+0x158>)
 8004632:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004636:	2100      	movs	r1, #0
 8004638:	2019      	movs	r0, #25
 800463a:	f7ff fdfb 	bl	8004234 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 800463e:	f7ff fbd3 	bl	8003de8 <lcdGetFps>
 8004642:	4603      	mov	r3, r0
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	4b42      	ldr	r3, [pc, #264]	; (8004750 <cliLcd+0x15c>)
 8004648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464c:	2110      	movs	r1, #16
 800464e:	2000      	movs	r0, #0
 8004650:	f7ff fdf0 	bl	8004234 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8004654:	f7ff fbd4 	bl	8003e00 <lcdGetFpsTime>
 8004658:	4603      	mov	r3, r0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <cliLcd+0x160>)
 800465e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004662:	2120      	movs	r1, #32
 8004664:	2000      	movs	r0, #0
 8004666:	f7ff fde5 	bl	8004234 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 800466a:	f7fc fe0c 	bl	8001286 <millis>
 800466e:	4603      	mov	r3, r0
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <cliLcd+0x160>)
 8004674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004678:	2130      	movs	r1, #48	; 0x30
 800467a:	2000      	movs	r0, #0
 800467c:	f7ff fdda 	bl	8004234 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8004680:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	230a      	movs	r3, #10
 8004688:	220a      	movs	r2, #10
 800468a:	2146      	movs	r1, #70	; 0x46
 800468c:	2000      	movs	r0, #0
 800468e:	f7ff fd4b 	bl	8004128 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8004692:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	230a      	movs	r3, #10
 800469a:	220a      	movs	r2, #10
 800469c:	2146      	movs	r1, #70	; 0x46
 800469e:	200a      	movs	r0, #10
 80046a0:	f7ff fd42 	bl	8004128 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 80046a4:	231f      	movs	r3, #31
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	230a      	movs	r3, #10
 80046aa:	220a      	movs	r2, #10
 80046ac:	2146      	movs	r1, #70	; 0x46
 80046ae:	2014      	movs	r0, #20
 80046b0:	f7ff fd3a 	bl	8004128 <lcdDrawFillRect>

        lcdRequestDraw();
 80046b4:	f7ff fbc6 	bl	8003e44 <lcdRequestDraw>
    while(cliKeepLoop())
 80046b8:	f7fe f856 	bl	8002768 <cliKeepLoop>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ae      	bne.n	8004620 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 80046c2:	2000      	movs	r0, #0
 80046c4:	f7ff f9bc 	bl	8003a40 <lcdClearBuffer>
    lcdUpdateDraw();
 80046c8:	f7ff fbf4 	bl	8003eb4 <lcdUpdateDraw>

    ret = true;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d126      	bne.n	8004726 <cliLcd+0x132>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	491e      	ldr	r1, [pc, #120]	; (8004758 <cliLcd+0x164>)
 80046de:	2000      	movs	r0, #0
 80046e0:	4798      	blx	r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01e      	beq.n	8004726 <cliLcd+0x132>
  {
	  lcdClearBuffer(black);
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7ff f9a9 	bl	8003a40 <lcdClearBuffer>
	  lcdUpdateDraw();
 80046ee:	f7ff fbe1 	bl	8003eb4 <lcdUpdateDraw>
	  while(cliKeepLoop())
 80046f2:	e00c      	b.n	800470e <cliLcd+0x11a>
	  {
		  static bool blink = 0;
		  blink = get_blink();
 80046f4:	f002 fc38 	bl	8006f68 <get_blink>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b17      	ldr	r3, [pc, #92]	; (800475c <cliLcd+0x168>)
 80046fe:	701a      	strb	r2, [r3, #0]
		  draw_fan_status(0, 0, blink);
 8004700:	4b16      	ldr	r3, [pc, #88]	; (800475c <cliLcd+0x168>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	2100      	movs	r1, #0
 8004708:	2000      	movs	r0, #0
 800470a:	f002 fbe1 	bl	8006ed0 <draw_fan_status>
	  while(cliKeepLoop())
 800470e:	f7fe f82b 	bl	8002768 <cliKeepLoop>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ed      	bne.n	80046f4 <cliLcd+0x100>
	  }
	  lcdClearBuffer(black);
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff f991 	bl	8003a40 <lcdClearBuffer>
	  lcdUpdateDraw();
 800471e:	f7ff fbc9 	bl	8003eb4 <lcdUpdateDraw>

	  ret = true;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <cliLcd+0x14a>
  {
    cliPrintf("lcd test\n");
 8004732:	480b      	ldr	r0, [pc, #44]	; (8004760 <cliLcd+0x16c>)
 8004734:	f7fd ff1e 	bl	8002574 <cliPrintf>
    cliPrintf("lcd image\n");
 8004738:	480a      	ldr	r0, [pc, #40]	; (8004764 <cliLcd+0x170>)
 800473a:	f7fd ff1b 	bl	8002574 <cliPrintf>
  }
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	080179a8 	.word	0x080179a8
 800474c:	080179b0 	.word	0x080179b0
 8004750:	080179c0 	.word	0x080179c0
 8004754:	080179c8 	.word	0x080179c8
 8004758:	080179d0 	.word	0x080179d0
 800475c:	2000a9c0 	.word	0x2000a9c0
 8004760:	080179d8 	.word	0x080179d8
 8004764:	080179e4 	.word	0x080179e4

08004768 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
  bool ret = true;
 800476e:	2301      	movs	r3, #1
 8004770:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004780:	2300      	movs	r3, #0
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <ledInit+0x8c>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <ledInit+0x8c>)
 800478a:	f043 0304 	orr.w	r3, r3, #4
 800478e:	6313      	str	r3, [r2, #48]	; 0x30
 8004790:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <ledInit+0x8c>)
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479c:	2301      	movs	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e016      	b.n	80047dc <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80047ae:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <ledInit+0x90>)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	889b      	ldrh	r3, [r3, #4]
 80047b8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80047ba:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <ledInit+0x90>)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047c2:	1d3a      	adds	r2, r7, #4
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f008 fdf0 	bl	800d3ac <HAL_GPIO_Init>

    ledOff(i);
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f817 	bl	8004804 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dde5      	ble.n	80047ae <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <ledInit+0x94>)
 80047e4:	4806      	ldr	r0, [pc, #24]	; (8004800 <ledInit+0x98>)
 80047e6:	f7fd ffd5 	bl	8002794 <cliAdd>
#endif

  return ret;
 80047ea:	7efb      	ldrb	r3, [r7, #27]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40023800 	.word	0x40023800
 80047f8:	20000094 	.word	0x20000094
 80047fc:	0800487d 	.word	0x0800487d
 8004800:	080176c4 	.word	0x080176c4

08004804 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d111      	bne.n	8004838 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <ledOff+0x3c>)
 8004818:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	4a08      	ldr	r2, [pc, #32]	; (8004840 <ledOff+0x3c>)
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	8899      	ldrh	r1, [r3, #4]
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	4a05      	ldr	r2, [pc, #20]	; (8004840 <ledOff+0x3c>)
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	79db      	ldrb	r3, [r3, #7]
 8004830:	461a      	mov	r2, r3
 8004832:	f009 f83b 	bl	800d8ac <HAL_GPIO_WritePin>
 8004836:	e000      	b.n	800483a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8004838:	bf00      	nop
}
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000094 	.word	0x20000094

08004844 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <ledToggle+0x34>)
 8004858:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	4906      	ldr	r1, [pc, #24]	; (8004878 <ledToggle+0x34>)
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	889b      	ldrh	r3, [r3, #4]
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f009 f838 	bl	800d8de <HAL_GPIO_TogglePin>
 800486e:	e000      	b.n	8004872 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8004870:	bf00      	nop
}
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000094 	.word	0x20000094

0800487c <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004884:	2300      	movs	r3, #0
 8004886:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d133      	bne.n	80048f8 <cliLed+0x7c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	491f      	ldr	r1, [pc, #124]	; (8004914 <cliLed+0x98>)
 8004896:	2000      	movs	r0, #0
 8004898:	4798      	blx	r3
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d02b      	beq.n	80048f8 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2001      	movs	r0, #1
 80048a6:	4798      	blx	r3
 80048a8:	4603      	mov	r3, r0
 80048aa:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2002      	movs	r0, #2
 80048b2:	4798      	blx	r3
 80048b4:	4603      	mov	r3, r0
 80048b6:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 80048b8:	7dbb      	ldrb	r3, [r7, #22]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <cliLed+0x48>
    {
      led_ch--;
 80048be:	7dbb      	ldrb	r3, [r7, #22]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 80048c4:	f7fc fcdf 	bl	8001286 <millis>
 80048c8:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 80048ca:	e00e      	b.n	80048ea <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 80048cc:	f7fc fcdb 	bl	8001286 <millis>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d806      	bhi.n	80048ea <cliLed+0x6e>
      {
        pre_time = millis();
 80048dc:	f7fc fcd3 	bl	8001286 <millis>
 80048e0:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 80048e2:	7dbb      	ldrb	r3, [r7, #22]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ffad 	bl	8004844 <ledToggle>
    while(cliKeepLoop())
 80048ea:	f7fd ff3d 	bl	8002768 <cliKeepLoop>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1eb      	bne.n	80048cc <cliLed+0x50>
      }
    }

    ret = true;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	f083 0301 	eor.w	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8004904:	2101      	movs	r1, #1
 8004906:	4804      	ldr	r0, [pc, #16]	; (8004918 <cliLed+0x9c>)
 8004908:	f7fd fe34 	bl	8002574 <cliPrintf>
  }
}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	080176c8 	.word	0x080176c8
 8004918:	080176d0 	.word	0x080176d0

0800491c <menuSetCallBack>:
static bool     menuArgsIsStr(uint8_t index, char *p_str);

void menu_manual(menu_args_t *args);

void menuSetCallBack(void (*callback)(void))
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	menu_node.callback = callback;
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <menuSetCallBack+0x24>)
 8004926:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	2000a9c4 	.word	0x2000a9c4

08004944 <menuInit>:

bool menuInit(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
	menu_node.node = 1;
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <menuInit+0x74>)
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
	menu_node.main = 0;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <menuInit+0x74>)
 8004950:	2200      	movs	r2, #0
 8004952:	705a      	strb	r2, [r3, #1]
	menu_node.layer = 0;
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <menuInit+0x74>)
 8004956:	2200      	movs	r2, #0
 8004958:	709a      	strb	r2, [r3, #2]
	menu_node.menu_count = 0;
 800495a:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <menuInit+0x74>)
 800495c:	2200      	movs	r2, #0
 800495e:	70da      	strb	r2, [r3, #3]
	menu_node.menu_args.getData  = menuArgsGetData;
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <menuInit+0x74>)
 8004962:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004966:	461a      	mov	r2, r3
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <menuInit+0x78>)
 800496a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	menu_node.menu_args.getFloat = menuArgsGetFloat;
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <menuInit+0x74>)
 8004970:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004974:	461a      	mov	r2, r3
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <menuInit+0x7c>)
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	menu_node.menu_args.getStr   = menuArgsGetStr;
 800497c:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <menuInit+0x74>)
 800497e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004982:	461a      	mov	r2, r3
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <menuInit+0x80>)
 8004986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	menu_node.menu_args.isStr    = menuArgsIsStr;
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <menuInit+0x74>)
 800498c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004990:	461a      	mov	r2, r3
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <menuInit+0x84>)
 8004994:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	menu_node.callback = NULL;
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <menuInit+0x74>)
 800499a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800499e:	461a      	mov	r2, r3
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	menuAdd("manual", 0, menu_manual);
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <menuInit+0x88>)
 80049a8:	2100      	movs	r1, #0
 80049aa:	4809      	ldr	r0, [pc, #36]	; (80049d0 <menuInit+0x8c>)
 80049ac:	f000 f926 	bl	8004bfc <menuAdd>

	return true;
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	2000a9c4 	.word	0x2000a9c4
 80049bc:	08004a99 	.word	0x08004a99
 80049c0:	08004af1 	.word	0x08004af1
 80049c4:	08004b51 	.word	0x08004b51
 80049c8:	08004ba1 	.word	0x08004ba1
 80049cc:	08004c89 	.word	0x08004c89
 80049d0:	080176f0 	.word	0x080176f0

080049d4 <menuMain>:

bool menuMain(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  if (menu_node.node == 0)
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <menuMain+0x24>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <menuMain+0x10>
  {
    return false;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e007      	b.n	80049f4 <menuMain+0x20>
  }

  if (menu_node.node >= 1)
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <menuMain+0x24>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <menuMain+0x1e>
  {
    menuUpdate(&menu_node);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <menuMain+0x24>)
 80049ee:	f000 f805 	bl	80049fc <menuUpdate>
  }

  return true;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	2000a9c4 	.word	0x2000a9c4

080049fc <menuUpdate>:

bool menuUpdate(menu_t *p_menu)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]

  if(p_menu->callback != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <menuUpdate+0x26>
  {
	  (*p_menu->callback)();
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a20:	4798      	blx	r3
  }

  return ret;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <menu_strToUpper>:

void menu_strToUpper(char *str)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<MENU_NAME_MAX; i++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	81fb      	strh	r3, [r7, #14]
 8004a38:	e018      	b.n	8004a6c <menu_strToUpper+0x40>
  {
    str_ch = str[i];
 8004a3a:	89fb      	ldrh	r3, [r7, #14]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8004a44:	7b7b      	ldrb	r3, [r7, #13]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <menu_strToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8004a4a:	7b7b      	ldrb	r3, [r7, #13]
 8004a4c:	2b60      	cmp	r3, #96	; 0x60
 8004a4e:	d905      	bls.n	8004a5c <menu_strToUpper+0x30>
 8004a50:	7b7b      	ldrb	r3, [r7, #13]
 8004a52:	2b7a      	cmp	r3, #122	; 0x7a
 8004a54:	d802      	bhi.n	8004a5c <menu_strToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8004a56:	7b7b      	ldrb	r3, [r7, #13]
 8004a58:	3b20      	subs	r3, #32
 8004a5a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	7b7a      	ldrb	r2, [r7, #13]
 8004a64:	701a      	strb	r2, [r3, #0]
  for (i=0; i<MENU_NAME_MAX; i++)
 8004a66:	89fb      	ldrh	r3, [r7, #14]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	81fb      	strh	r3, [r7, #14]
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
 8004a6e:	2bff      	cmp	r3, #255	; 0xff
 8004a70:	d9e3      	bls.n	8004a3a <menu_strToUpper+0xe>
 8004a72:	e000      	b.n	8004a76 <menu_strToUpper+0x4a>
      break;
 8004a74:	bf00      	nop
  }

  if (i == MENU_NAME_MAX)
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7c:	d105      	bne.n	8004a8a <menu_strToUpper+0x5e>
  {
    str[i-1] = 0;
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <menuArgsGetData>:


int32_t menuArgsGetData(uint8_t index)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <menuArgsGetData+0x54>)
 8004aa8:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ab4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d301      	bcc.n	8004ac0 <menuArgsGetData+0x28>
  {
    return 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e010      	b.n	8004ae2 <menuArgsGetData+0x4a>
  }

  ret = (int32_t)strtoul((const char * ) p_menu->menu_args.argv[index], (char **)NULL, (int) 0);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ac6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f00f fd92 	bl	8014600 <strtoul>
 8004adc:	4603      	mov	r3, r0
 8004ade:	60fb      	str	r3, [r7, #12]

  return ret;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2000a9c4 	.word	0x2000a9c4

08004af0 <menuArgsGetFloat>:

float menuArgsGetFloat(uint8_t index)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <menuArgsGetFloat+0x5c>)
 8004b02:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b0e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <menuArgsGetFloat+0x2c>
  {
    return 0;
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e00f      	b.n	8004b3c <menuArgsGetFloat+0x4c>
  }

  ret = (float)strtof((const char * ) p_menu->menu_args.argv[index], (char **)NULL);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f00f fc6b 	bl	801440c <strtof>
 8004b36:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eeb0 0a67 	vmov.f32	s0, s15
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000a9c4 	.word	0x2000a9c4

08004b50 <menuArgsGetStr>:

char *menuArgsGetStr(uint8_t index)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <menuArgsGetStr+0x4c>)
 8004b60:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d301      	bcc.n	8004b78 <menuArgsGetStr+0x28>
  {
    return 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e00a      	b.n	8004b8e <menuArgsGetStr+0x3e>
  }

  ret = p_menu->menu_args.argv[index];
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]

  return ret;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	2000a9c4 	.word	0x2000a9c4

08004ba0 <menuArgsIsStr>:

bool menuArgsIsStr(uint8_t index, char *p_str)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8004bac:	2300      	movs	r3, #0
 8004bae:	73fb      	strb	r3, [r7, #15]
  menu_t *p_menu = &menu_node;
 8004bb0:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <menuArgsIsStr+0x58>)
 8004bb2:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004bbe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d301      	bcc.n	8004bca <menuArgsIsStr+0x2a>
  {
    return 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e012      	b.n	8004bf0 <menuArgsIsStr+0x50>
  }

  if(strcmp(p_str, p_menu->menu_args.argv[index]) == 0)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004bd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6838      	ldr	r0, [r7, #0]
 8004be0:	f7fb fafe 	bl	80001e0 <strcmp>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <menuArgsIsStr+0x4e>
  {
    ret = true;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	2000a9c4 	.word	0x2000a9c4

08004bfc <menuAdd>:

bool menuAdd(const char *menu_str, uint8_t layer, void (*p_func)(menu_args_t *))
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	460b      	mov	r3, r1
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]
  menu_t *p_menu = &menu_node;
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <menuAdd+0x88>)
 8004c10:	61bb      	str	r3, [r7, #24]
  uint16_t index;

  if (p_menu->menu_count >= MENU_LIST_MAX)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	2b1f      	cmp	r3, #31
 8004c18:	d901      	bls.n	8004c1e <menuAdd+0x22>
  {
    return false;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e02e      	b.n	8004c7c <menuAdd+0x80>
  }

  index = p_menu->menu_count;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	78db      	ldrb	r3, [r3, #3]
 8004c22:	82fb      	strh	r3, [r7, #22]
  p_menu->layer = layer;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	7afa      	ldrb	r2, [r7, #11]
 8004c28:	709a      	strb	r2, [r3, #2]

  strcpy(p_menu->menu_list[index].menu_str, menu_str);
 8004c2a:	8afa      	ldrh	r2, [r7, #22]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	019b      	lsls	r3, r3, #6
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f00e fdbb 	bl	80137b8 <strcpy>
  p_menu->menu_list[index].menu_func = p_func;
 8004c42:	8afa      	ldrh	r2, [r7, #22]
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	4613      	mov	r3, r2
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]

  menu_strToUpper(p_menu->menu_list[index].menu_str);
 8004c58:	8afa      	ldrh	r2, [r7, #22]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	019b      	lsls	r3, r3, #6
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4413      	add	r3, r2
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fedf 	bl	8004a2c <menu_strToUpper>

  p_menu->menu_count++;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	3301      	adds	r3, #1
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	70da      	strb	r2, [r3, #3]

  return ret;
 8004c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	2000a9c4 	.word	0x2000a9c4

08004c88 <menu_manual>:

void menu_manual(menu_args_t *args)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	menu_t *p_menu = &menu_node;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <menu_manual+0x18>)
 8004c92:	60fb      	str	r3, [r7, #12]

}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	2000a9c4 	.word	0x2000a9c4

08004ca4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <DWT_Delay_us+0x40>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004cb2:	f009 fa49 	bl	800e148 <HAL_RCC_GetHCLKFreq>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <DWT_Delay_us+0x44>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0c9b      	lsrs	r3, r3, #18
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004cc8:	bf00      	nop
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <DWT_Delay_us+0x40>)
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad2      	subs	r2, r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d3f8      	bcc.n	8004cca <DWT_Delay_us+0x26>
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e0001000 	.word	0xe0001000
 8004ce8:	431bde83 	.word	0x431bde83

08004cec <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	889b      	ldrh	r3, [r3, #4]
 8004cf8:	041a      	lsls	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	619a      	str	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	889a      	ldrh	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	619a      	str	r2, [r3, #24]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	889b      	ldrh	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f107 020c 	add.w	r2, r7, #12
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f008 fb2c 	bl	800d3ac <HAL_GPIO_Init>
}
 8004d54:	bf00      	nop
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8004d64:	2311      	movs	r3, #17
 8004d66:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	889b      	ldrh	r3, [r3, #4]
 8004d74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f107 020c 	add.w	r2, r7, #12
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f008 fb13 	bl	800d3ac <HAL_GPIO_Init>

}
 8004d86:	bf00      	nop
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ffd7 	bl	8004d5c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ffac 	bl	8004d0c <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8004db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004db8:	f7ff ff74 	bl	8004ca4 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff ff95 	bl	8004cec <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8004dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dc6:	f7ff ff6d 	bl	8004ca4 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff9e 	bl	8004d0c <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8004dd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004dd4:	f7ff ff66 	bl	8004ca4 <DWT_Delay_us>
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff7f 	bl	8004cec <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ffb4 	bl	8004d5c <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8004df4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004df8:	f7ff ff54 	bl	8004ca4 <DWT_Delay_us>
	DWT_Delay_us(20);
 8004dfc:	2014      	movs	r0, #20
 8004dfe:	f7ff ff51 	bl	8004ca4 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ff91 	bl	8004d2a <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8004e08:	2046      	movs	r0, #70	; 0x46
 8004e0a:	f7ff ff4b 	bl	8004ca4 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	889b      	ldrh	r3, [r3, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f008 fd2f 	bl	800d87c <HAL_GPIO_ReadPin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8004e22:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004e26:	f7ff ff3d 	bl	8004ca4 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d012      	beq.n	8004e6c <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff50 	bl	8004cec <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff85 	bl	8004d5c <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8004e52:	200a      	movs	r0, #10
 8004e54:	f7ff ff26 	bl	8004ca4 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff66 	bl	8004d2a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8004e5e:	2037      	movs	r0, #55	; 0x37
 8004e60:	f7ff ff20 	bl	8004ca4 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff60 	bl	8004d2a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8004e6a:	e011      	b.n	8004e90 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff3d 	bl	8004cec <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff ff72 	bl	8004d5c <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8004e78:	2041      	movs	r0, #65	; 0x41
 8004e7a:	f7ff ff13 	bl	8004ca4 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ff53 	bl	8004d2a <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8004e84:	2005      	movs	r0, #5
 8004e86:	f7ff ff0d 	bl	8004ca4 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff4d 	bl	8004d2a <ONEWIRE_INPUT>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ff21 	bl	8004cec <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ff56 	bl	8004d5c <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8004eb0:	2002      	movs	r0, #2
 8004eb2:	f7ff fef7 	bl	8004ca4 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ff37 	bl	8004d2a <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8004ebc:	200a      	movs	r0, #10
 8004ebe:	f7ff fef1 	bl	8004ca4 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	889b      	ldrh	r3, [r3, #4]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f008 fcd5 	bl	800d87c <HAL_GPIO_ReadPin>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8004edc:	2032      	movs	r0, #50	; 0x32
 8004ede:	f7ff fee1 	bl	8004ca4 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004ef8:	2308      	movs	r3, #8
 8004efa:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8004efc:	e00a      	b.n	8004f14 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff93 	bl	8004e34 <OneWire_WriteBit>
		byte >>= 1;
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	73fa      	strb	r2, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1ef      	bne.n	8004efe <OneWire_WriteByte+0x12>
	}
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8004f30:	2308      	movs	r3, #8
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	2300      	movs	r3, #0
 8004f36:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004f38:	e00d      	b.n	8004f56 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ffa9 	bl	8004e98 <OneWire_ReadBit>
 8004f46:	4603      	mov	r3, r0
 8004f48:	01db      	lsls	r3, r3, #7
 8004f4a:	b25a      	sxtb	r2, r3
 8004f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	b25b      	sxtb	r3, r3
 8004f54:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	1e5a      	subs	r2, r3, #1
 8004f5a:	73fa      	strb	r2, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ec      	bne.n	8004f3a <OneWire_ReadByte+0x12>
	}

	return byte;
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f816 	bl	8004fa4 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004f78:	21f0      	movs	r1, #240	; 0xf0
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f825 	bl	8004fca <OneWire_Search>
 8004f80:	4603      	mov	r3, r0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004f92:	21f0      	movs	r1, #240	; 0xf0
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f818 	bl	8004fca <OneWire_Search>
 8004f9a:	4603      	mov	r3, r0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	71da      	strb	r2, [r3, #7]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7a1b      	ldrb	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 809a 	bne.w	8005128 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fef3 	bl	8004de0 <OneWire_Reset>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	71da      	strb	r2, [r3, #7]
			return 0;
 8005012:	2300      	movs	r3, #0
 8005014:	e09b      	b.n	800514e <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ff66 	bl	8004eec <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff39 	bl	8004e98 <OneWire_ReadBit>
 8005026:	4603      	mov	r3, r0
 8005028:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff34 	bl	8004e98 <OneWire_ReadBit>
 8005030:	4603      	mov	r3, r0
 8005032:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8005034:	7a7b      	ldrb	r3, [r7, #9]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <OneWire_Search+0x76>
 800503a:	7a3b      	ldrb	r3, [r7, #8]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d064      	beq.n	800510a <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8005040:	7a7a      	ldrb	r2, [r7, #9]
 8005042:	7a3b      	ldrb	r3, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d002      	beq.n	800504e <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8005048:	7a7b      	ldrb	r3, [r7, #9]
 800504a:	72bb      	strb	r3, [r7, #10]
 800504c:	e026      	b.n	800509c <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	799b      	ldrb	r3, [r3, #6]
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	429a      	cmp	r2, r3
 8005056:	d20d      	bcs.n	8005074 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8005058:	7b7b      	ldrb	r3, [r7, #13]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	7a5a      	ldrb	r2, [r3, #9]
 8005060:	7afb      	ldrb	r3, [r7, #11]
 8005062:	4013      	ands	r3, r2
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	72bb      	strb	r3, [r7, #10]
 8005072:	e008      	b.n	8005086 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	799b      	ldrb	r3, [r3, #6]
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8005086:	7abb      	ldrb	r3, [r7, #10]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d802      	bhi.n	800509c <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7bba      	ldrb	r2, [r7, #14]
 800509a:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800509c:	7abb      	ldrb	r3, [r7, #10]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10c      	bne.n	80050bc <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	7a59      	ldrb	r1, [r3, #9]
 80050aa:	7b7b      	ldrb	r3, [r7, #13]
 80050ac:	7afa      	ldrb	r2, [r7, #11]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	b2d1      	uxtb	r1, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	460a      	mov	r2, r1
 80050b8:	725a      	strb	r2, [r3, #9]
 80050ba:	e010      	b.n	80050de <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80050bc:	7b7b      	ldrb	r3, [r7, #13]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	7a5b      	ldrb	r3, [r3, #9]
 80050c4:	b25a      	sxtb	r2, r3
 80050c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	b25b      	sxtb	r3, r3
 80050ce:	4013      	ands	r3, r2
 80050d0:	b25a      	sxtb	r2, r3
 80050d2:	7b7b      	ldrb	r3, [r7, #13]
 80050d4:	b2d1      	uxtb	r1, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	460a      	mov	r2, r1
 80050dc:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80050de:	7abb      	ldrb	r3, [r7, #10]
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fea6 	bl	8004e34 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	3301      	adds	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80050f4:	7afb      	ldrb	r3, [r7, #11]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80050fa:	7b7b      	ldrb	r3, [r7, #13]
 80050fc:	3301      	adds	r3, #1
 80050fe:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8005100:	2301      	movs	r3, #1
 8005102:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8005104:	7b7b      	ldrb	r3, [r7, #13]
 8005106:	2b07      	cmp	r3, #7
 8005108:	d98a      	bls.n	8005020 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d90b      	bls.n	8005128 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	7bba      	ldrb	r2, [r7, #14]
 8005114:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	799b      	ldrb	r3, [r3, #6]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8005124:	2301      	movs	r3, #1
 8005126:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8005128:	7b3b      	ldrb	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <OneWire_Search+0x16c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7a5b      	ldrb	r3, [r3, #9]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800514c:	7b3b      	ldrb	r3, [r7, #12]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8005160:	2155      	movs	r1, #85	; 0x55
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fec2 	bl	8004eec <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e00a      	b.n	8005184 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	4413      	add	r3, r2
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff feb7 	bl	8004eec <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	3301      	adds	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b07      	cmp	r3, #7
 8005188:	d9f1      	bls.n	800516e <OneWire_SelectWithPointer+0x18>
	}
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e00a      	b.n	80051ba <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	440b      	add	r3, r1
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	440a      	add	r2, r1
 80051b0:	7a52      	ldrb	r2, [r2, #9]
 80051b2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	3301      	adds	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b07      	cmp	r3, #7
 80051be:	d9f1      	bls.n	80051a4 <OneWire_GetFullROM+0x10>
	}
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80051da:	2300      	movs	r3, #0
 80051dc:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 80051de:	e022      	b.n	8005226 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80051ea:	2308      	movs	r3, #8
 80051ec:	737b      	strb	r3, [r7, #13]
 80051ee:	e017      	b.n	8005220 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	4053      	eors	r3, r2
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8005204:	7b3b      	ldrb	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8005210:	43db      	mvns	r3, r3
 8005212:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8005214:	7bbb      	ldrb	r3, [r7, #14]
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800521a:	7b7b      	ldrb	r3, [r7, #13]
 800521c:	3b01      	subs	r3, #1
 800521e:	737b      	strb	r3, [r7, #13]
 8005220:	7b7b      	ldrb	r3, [r7, #13]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e4      	bne.n	80051f0 <OneWire_CRC8+0x22>
	while (len--) {
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	70fa      	strb	r2, [r7, #3]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1d7      	bne.n	80051e0 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  bool ret = false;
 8005246:	2300      	movs	r3, #0
 8005248:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <sdInit+0x80>)
 800524c:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <sdInit+0x84>)
 800524e:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <sdInit+0x80>)
 8005252:	2200      	movs	r2, #0
 8005254:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <sdInit+0x80>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800525c:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <sdInit+0x80>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <sdInit+0x80>)
 8005264:	2200      	movs	r2, #0
 8005266:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <sdInit+0x80>)
 800526a:	2200      	movs	r2, #0
 800526c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 800526e:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <sdInit+0x80>)
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <sdInit+0x88>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <sdInit+0x88>)
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <sdInit+0x88>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00f      	beq.n	80052a8 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8005288:	480d      	ldr	r0, [pc, #52]	; (80052c0 <sdInit+0x80>)
 800528a:	f008 ff91 	bl	800e1b0 <HAL_SD_Init>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8005294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005298:	4809      	ldr	r0, [pc, #36]	; (80052c0 <sdInit+0x80>)
 800529a:	f009 fd5d 	bl	800ed58 <HAL_SD_ConfigWideBusOperation>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <sdInit+0x68>
      {
        ret = true;
 80052a4:	2301      	movs	r3, #1
 80052a6:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <sdInit+0x8c>)
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 80052ae:	4908      	ldr	r1, [pc, #32]	; (80052d0 <sdInit+0x90>)
 80052b0:	4808      	ldr	r0, [pc, #32]	; (80052d4 <sdInit+0x94>)
 80052b2:	f7fd fa6f 	bl	8002794 <cliAdd>
#endif

  return ret;
 80052b6:	79fb      	ldrb	r3, [r7, #7]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	2000ca68 	.word	0x2000ca68
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	2000ca65 	.word	0x2000ca65
 80052cc:	2000ca64 	.word	0x2000ca64
 80052d0:	080057c1 	.word	0x080057c1
 80052d4:	080176f8 	.word	0x080176f8

080052d8 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return is_init;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <sdIsInit+0x14>)
 80052de:	781b      	ldrb	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	2000ca64 	.word	0x2000ca64

080052f0 <sdIsDetected>:

bool sdIsDetected(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7fe f9f1 	bl	80036dc <gpioPinRead>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <sdIsDetected+0x18>
  {
    is_detected = true;
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <sdIsDetected+0x28>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e002      	b.n	800530e <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <sdIsDetected+0x28>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 800530e:	4b02      	ldr	r3, [pc, #8]	; (8005318 <sdIsDetected+0x28>)
 8005310:	781b      	ldrb	r3, [r3, #0]
}
 8005312:	4618      	mov	r0, r3
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000ca65 	.word	0x2000ca65

0800531c <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 800531c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005320:	b08c      	sub	sp, #48	; 0x30
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8005326:	2300      	movs	r3, #0
 8005328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8005330:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <sdGetInfo+0xa8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03d      	beq.n	80053b4 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4619      	mov	r1, r3
 800533e:	4822      	ldr	r0, [pc, #136]	; (80053c8 <sdGetInfo+0xac>)
 8005340:	f009 fcde 	bl	800ed00 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2200      	movs	r2, #0
 800537a:	469a      	mov	sl, r3
 800537c:	4693      	mov	fp, r2
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	4698      	mov	r8, r3
 8005386:	4691      	mov	r9, r2
 8005388:	fb08 f20b 	mul.w	r2, r8, fp
 800538c:	fb0a f309 	mul.w	r3, sl, r9
 8005390:	4413      	add	r3, r2
 8005392:	fbaa 4508 	umull	r4, r5, sl, r8
 8005396:	442b      	add	r3, r5
 8005398:	461d      	mov	r5, r3
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	0d22      	lsrs	r2, r4, #20
 80053a4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80053a8:	0d2b      	lsrs	r3, r5, #20
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	621a      	str	r2, [r3, #32]
    ret = true;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80053b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3730      	adds	r7, #48	; 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c2:	bf00      	nop
 80053c4:	2000ca64 	.word	0x2000ca64
 80053c8:	2000ca68 	.word	0x2000ca68

080053cc <sdIsBusy>:

bool sdIsBusy(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80053d2:	4808      	ldr	r0, [pc, #32]	; (80053f4 <sdIsBusy+0x28>)
 80053d4:	f009 fd3c 	bl	800ee50 <HAL_SD_GetCardState>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d102      	bne.n	80053e4 <sdIsBusy+0x18>
  {
    is_busy = false;
 80053de:	2300      	movs	r3, #0
 80053e0:	71fb      	strb	r3, [r7, #7]
 80053e2:	e001      	b.n	80053e8 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 80053e4:	2301      	movs	r3, #1
 80053e6:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 80053e8:	79fb      	ldrb	r3, [r7, #7]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	2000ca68 	.word	0x2000ca68

080053f8 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8005400:	f7fb ff41 	bl	8001286 <millis>
 8005404:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8005406:	e009      	b.n	800541c <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8005408:	f7ff ffe0 	bl	80053cc <sdIsBusy>
 800540c:	4603      	mov	r3, r0
 800540e:	f083 0301 	eor.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <sdIsReady+0x24>
    {
      return true;
 8005418:	2301      	movs	r3, #1
 800541a:	e008      	b.n	800542e <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 800541c:	f7fb ff33 	bl	8001286 <millis>
 8005420:	4602      	mov	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d8ed      	bhi.n	8005408 <sdIsReady+0x10>
    }
  }

  return false;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 800544a:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <sdReadBlocks+0x8c>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	481c      	ldr	r0, [pc, #112]	; (80054c8 <sdReadBlocks+0x90>)
 8005458:	f008 ff3a 	bl	800e2d0 <HAL_SD_ReadBlocks_DMA>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d12a      	bne.n	80054b8 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8005462:	f7fb ff10 	bl	8001286 <millis>
 8005466:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8005468:	e007      	b.n	800547a <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 800546a:	f7fb ff0c 	bl	8001286 <millis>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d908      	bls.n	800548c <sdReadBlocks+0x54>
    while(is_rx_done == false)
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <sdReadBlocks+0x8c>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f083 0301 	eor.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ef      	bne.n	800546a <sdReadBlocks+0x32>
 800548a:	e00d      	b.n	80054a8 <sdReadBlocks+0x70>
      {
        break;
 800548c:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 800548e:	e00b      	b.n	80054a8 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8005490:	f7fb fef9 	bl	8001286 <millis>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d803      	bhi.n	80054a8 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <sdReadBlocks+0x8c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
        break;
 80054a6:	e004      	b.n	80054b2 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 80054a8:	f7ff ff90 	bl	80053cc <sdIsBusy>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ee      	bne.n	8005490 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <sdReadBlocks+0x8c>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	2000ca66 	.word	0x2000ca66
 80054c8:	2000ca68 	.word	0x2000ca68

080054cc <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 80054de:	4b1f      	ldr	r3, [pc, #124]	; (800555c <sdWriteBlocks+0x90>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	481d      	ldr	r0, [pc, #116]	; (8005560 <sdWriteBlocks+0x94>)
 80054ec:	f008 ffda 	bl	800e4a4 <HAL_SD_WriteBlocks_DMA>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d12d      	bne.n	8005552 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 80054f6:	f7fb fec6 	bl	8001286 <millis>
 80054fa:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 80054fc:	e007      	b.n	800550e <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80054fe:	f7fb fec2 	bl	8001286 <millis>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d908      	bls.n	8005520 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <sdWriteBlocks+0x90>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f083 0301 	eor.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ef      	bne.n	80054fe <sdWriteBlocks+0x32>
 800551e:	e000      	b.n	8005522 <sdWriteBlocks+0x56>
      {
        break;
 8005520:	bf00      	nop
      }
    }
    pre_time = millis();
 8005522:	f7fb feb0 	bl	8001286 <millis>
 8005526:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8005528:	e00b      	b.n	8005542 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 800552a:	f7fb feac 	bl	8001286 <millis>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d803      	bhi.n	8005542 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <sdWriteBlocks+0x90>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
        break;
 8005540:	e004      	b.n	800554c <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8005542:	f7ff ff43 	bl	80053cc <sdIsBusy>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1ee      	bne.n	800552a <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <sdWriteBlocks+0x90>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	2000ca67 	.word	0x2000ca67
 8005560:	2000ca68 	.word	0x2000ca68

08005564 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_SD_RxCpltCallback+0x1c>)
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000ca66 	.word	0x2000ca66

08005584 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <HAL_SD_TxCpltCallback+0x1c>)
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000ca67 	.word	0x2000ca67

080055a4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08c      	sub	sp, #48	; 0x30
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	f107 031c 	add.w	r3, r7, #28
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a77      	ldr	r2, [pc, #476]	; (80057a0 <HAL_SD_MspInit+0x1fc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f040 80e8 	bne.w	8005798 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	4b75      	ldr	r3, [pc, #468]	; (80057a4 <HAL_SD_MspInit+0x200>)
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	4a74      	ldr	r2, [pc, #464]	; (80057a4 <HAL_SD_MspInit+0x200>)
 80055d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055d6:	6313      	str	r3, [r2, #48]	; 0x30
 80055d8:	4b72      	ldr	r3, [pc, #456]	; (80057a4 <HAL_SD_MspInit+0x200>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	4b6e      	ldr	r3, [pc, #440]	; (80057a4 <HAL_SD_MspInit+0x200>)
 80055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ec:	4a6d      	ldr	r2, [pc, #436]	; (80057a4 <HAL_SD_MspInit+0x200>)
 80055ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055f2:	6453      	str	r3, [r2, #68]	; 0x44
 80055f4:	4b6b      	ldr	r3, [pc, #428]	; (80057a4 <HAL_SD_MspInit+0x200>)
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005600:	2300      	movs	r3, #0
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	4b67      	ldr	r3, [pc, #412]	; (80057a4 <HAL_SD_MspInit+0x200>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	4a66      	ldr	r2, [pc, #408]	; (80057a4 <HAL_SD_MspInit+0x200>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	6313      	str	r3, [r2, #48]	; 0x30
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <HAL_SD_MspInit+0x200>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	4b60      	ldr	r3, [pc, #384]	; (80057a4 <HAL_SD_MspInit+0x200>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	4a5f      	ldr	r2, [pc, #380]	; (80057a4 <HAL_SD_MspInit+0x200>)
 8005626:	f043 0302 	orr.w	r3, r3, #2
 800562a:	6313      	str	r3, [r2, #48]	; 0x30
 800562c:	4b5d      	ldr	r3, [pc, #372]	; (80057a4 <HAL_SD_MspInit+0x200>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8005638:	f44f 7350 	mov.w	r3, #832	; 0x340
 800563c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563e:	2302      	movs	r3, #2
 8005640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005642:	2300      	movs	r3, #0
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005646:	2301      	movs	r3, #1
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800564a:	230c      	movs	r3, #12
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564e:	f107 031c 	add.w	r3, r7, #28
 8005652:	4619      	mov	r1, r3
 8005654:	4854      	ldr	r0, [pc, #336]	; (80057a8 <HAL_SD_MspInit+0x204>)
 8005656:	f007 fea9 	bl	800d3ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 800565a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800565e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005668:	2301      	movs	r3, #1
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800566c:	230c      	movs	r3, #12
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005670:	f107 031c 	add.w	r3, r7, #28
 8005674:	4619      	mov	r1, r3
 8005676:	484d      	ldr	r0, [pc, #308]	; (80057ac <HAL_SD_MspInit+0x208>)
 8005678:	f007 fe98 	bl	800d3ac <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800567c:	4b4c      	ldr	r3, [pc, #304]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 800567e:	4a4d      	ldr	r2, [pc, #308]	; (80057b4 <HAL_SD_MspInit+0x210>)
 8005680:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005682:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 8005684:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005688:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005690:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005696:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 8005698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800569c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800569e:	4b44      	ldr	r3, [pc, #272]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056a4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056a6:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ac:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056b0:	2220      	movs	r2, #32
 80056b2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056b4:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056ba:	4b3d      	ldr	r3, [pc, #244]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056bc:	2204      	movs	r2, #4
 80056be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056c0:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056c2:	2203      	movs	r2, #3
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80056c6:	4b3a      	ldr	r3, [pc, #232]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056ce:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80056d6:	4836      	ldr	r0, [pc, #216]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056d8:	f007 fa6c 	bl	800cbb4 <HAL_DMA_Init>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 80056e2:	f7fb fe3f 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a31      	ldr	r2, [pc, #196]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
 80056ec:	4a30      	ldr	r2, [pc, #192]	; (80057b0 <HAL_SD_MspInit+0x20c>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80056f2:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_SD_MspInit+0x214>)
 80056f4:	4a31      	ldr	r2, [pc, #196]	; (80057bc <HAL_SD_MspInit+0x218>)
 80056f6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80056f8:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <HAL_SD_MspInit+0x214>)
 80056fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056fe:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005700:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005702:	2240      	movs	r2, #64	; 0x40
 8005704:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005706:	4b2c      	ldr	r3, [pc, #176]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800570c:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <HAL_SD_MspInit+0x214>)
 800570e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005712:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005716:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800571a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800571c:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_SD_MspInit+0x214>)
 800571e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005722:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005724:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005726:	2220      	movs	r2, #32
 8005728:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <HAL_SD_MspInit+0x214>)
 800572c:	2200      	movs	r2, #0
 800572e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005732:	2204      	movs	r2, #4
 8005734:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005738:	2203      	movs	r2, #3
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800573c:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <HAL_SD_MspInit+0x214>)
 800573e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005746:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800574c:	481a      	ldr	r0, [pc, #104]	; (80057b8 <HAL_SD_MspInit+0x214>)
 800574e:	f007 fa31 	bl	800cbb4 <HAL_DMA_Init>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8005758:	f7fb fe04 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005760:	63da      	str	r2, [r3, #60]	; 0x3c
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_SD_MspInit+0x214>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8005768:	2200      	movs	r2, #0
 800576a:	2103      	movs	r1, #3
 800576c:	2031      	movs	r0, #49	; 0x31
 800576e:	f007 f9dc 	bl	800cb2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005772:	2031      	movs	r0, #49	; 0x31
 8005774:	f007 f9f5 	bl	800cb62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8005778:	2200      	movs	r2, #0
 800577a:	2103      	movs	r1, #3
 800577c:	203b      	movs	r0, #59	; 0x3b
 800577e:	f007 f9d4 	bl	800cb2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005782:	203b      	movs	r0, #59	; 0x3b
 8005784:	f007 f9ed 	bl	800cb62 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8005788:	2200      	movs	r2, #0
 800578a:	2103      	movs	r1, #3
 800578c:	2045      	movs	r0, #69	; 0x45
 800578e:	f007 f9cc 	bl	800cb2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005792:	2045      	movs	r0, #69	; 0x45
 8005794:	f007 f9e5 	bl	800cb62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005798:	bf00      	nop
 800579a:	3730      	adds	r7, #48	; 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40023800 	.word	0x40023800
 80057a8:	40020000 	.word	0x40020000
 80057ac:	40020400 	.word	0x40020400
 80057b0:	2000caec 	.word	0x2000caec
 80057b4:	400264a0 	.word	0x400264a0
 80057b8:	2000cb4c 	.word	0x2000cb4c
 80057bc:	40026458 	.word	0x40026458

080057c0 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057cc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80057d0:	6018      	str	r0, [r3, #0]
  bool ret = false;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 80057d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057dc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	f040 8094 	bne.w	8005912 <cliSd+0x152>
 80057ea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057ee:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	4979      	ldr	r1, [pc, #484]	; (80059dc <cliSd+0x21c>)
 80057f8:	2000      	movs	r0, #0
 80057fa:	4798      	blx	r3
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8087 	beq.w	8005912 <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8005804:	4b76      	ldr	r3, [pc, #472]	; (80059e0 <cliSd+0x220>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	4876      	ldr	r0, [pc, #472]	; (80059e4 <cliSd+0x224>)
 800580c:	f7fc feb2 	bl	8002574 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8005810:	4b75      	ldr	r3, [pc, #468]	; (80059e8 <cliSd+0x228>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4619      	mov	r1, r3
 8005816:	4875      	ldr	r0, [pc, #468]	; (80059ec <cliSd+0x22c>)
 8005818:	f7fc feac 	bl	8002574 <cliPrintf>

    if (is_init == true)
 800581c:	4b70      	ldr	r3, [pc, #448]	; (80059e0 <cliSd+0x220>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d073      	beq.n	800590c <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fd77 	bl	800531c <sdGetInfo>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d06b      	beq.n	800590c <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8005834:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005838:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	486b      	ldr	r0, [pc, #428]	; (80059f0 <cliSd+0x230>)
 8005842:	f7fc fe97 	bl	8002574 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8005846:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800584a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4619      	mov	r1, r3
 8005852:	4868      	ldr	r0, [pc, #416]	; (80059f4 <cliSd+0x234>)
 8005854:	f7fc fe8e 	bl	8002574 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8005858:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800585c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4619      	mov	r1, r3
 8005864:	4864      	ldr	r0, [pc, #400]	; (80059f8 <cliSd+0x238>)
 8005866:	f7fc fe85 	bl	8002574 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 800586a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800586e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4619      	mov	r1, r3
 8005876:	4861      	ldr	r0, [pc, #388]	; (80059fc <cliSd+0x23c>)
 8005878:	f7fc fe7c 	bl	8002574 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 800587c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005880:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	4619      	mov	r1, r3
 8005888:	485d      	ldr	r0, [pc, #372]	; (8005a00 <cliSd+0x240>)
 800588a:	f7fc fe73 	bl	8002574 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 800588e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005892:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4619      	mov	r1, r3
 800589a:	485a      	ldr	r0, [pc, #360]	; (8005a04 <cliSd+0x244>)
 800589c:	f7fc fe6a 	bl	8002574 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80058a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4856      	ldr	r0, [pc, #344]	; (8005a08 <cliSd+0x248>)
 80058ae:	f7fc fe61 	bl	8002574 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80058b2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4619      	mov	r1, r3
 80058be:	4853      	ldr	r0, [pc, #332]	; (8005a0c <cliSd+0x24c>)
 80058c0:	f7fc fe58 	bl	8002574 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80058c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058cc:	6a18      	ldr	r0, [r3, #32]
 80058ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	0a9c      	lsrs	r4, r3, #10
 80058da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058de:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058e2:	6a1a      	ldr	r2, [r3, #32]
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	0a99      	lsrs	r1, r3, #10
 80058ee:	4b48      	ldr	r3, [pc, #288]	; (8005a10 <cliSd+0x250>)
 80058f0:	fba3 2301 	umull	r2, r3, r3, r1
 80058f4:	08da      	lsrs	r2, r3, #3
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	1aca      	subs	r2, r1, r3
 8005900:	4613      	mov	r3, r2
 8005902:	4622      	mov	r2, r4
 8005904:	4601      	mov	r1, r0
 8005906:	4843      	ldr	r0, [pc, #268]	; (8005a14 <cliSd+0x254>)
 8005908:	f7fc fe34 	bl	8002574 <cliPrintf>
      }
    }
    ret = true;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8005912:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005916:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d146      	bne.n	80059b0 <cliSd+0x1f0>
 8005922:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005926:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	493a      	ldr	r1, [pc, #232]	; (8005a18 <cliSd+0x258>)
 8005930:	2000      	movs	r0, #0
 8005932:	4798      	blx	r3
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d03a      	beq.n	80059b0 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 800593a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800593e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2001      	movs	r0, #1
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8005950:	f107 010c 	add.w	r1, r7, #12
 8005954:	2364      	movs	r3, #100	; 0x64
 8005956:	2201      	movs	r2, #1
 8005958:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800595c:	f7ff fd6c 	bl	8005438 <sdReadBlocks>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01e      	beq.n	80059a4 <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800596c:	e015      	b.n	800599a <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 800596e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005972:	0099      	lsls	r1, r3, #2
 8005974:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005978:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800597c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005984:	460a      	mov	r2, r1
 8005986:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800598a:	4824      	ldr	r0, [pc, #144]	; (8005a1c <cliSd+0x25c>)
 800598c:	f7fc fdf2 	bl	8002574 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8005990:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005994:	3301      	adds	r3, #1
 8005996:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800599a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800599e:	2b7f      	cmp	r3, #127	; 0x7f
 80059a0:	dde5      	ble.n	800596e <cliSd+0x1ae>
 80059a2:	e002      	b.n	80059aa <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 80059a4:	481e      	ldr	r0, [pc, #120]	; (8005a20 <cliSd+0x260>)
 80059a6:	f7fc fde5 	bl	8002574 <cliPrintf>
    }

    ret = true;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 80059b0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80059b4:	f083 0301 	eor.w	r3, r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 80059be:	4819      	ldr	r0, [pc, #100]	; (8005a24 <cliSd+0x264>)
 80059c0:	f7fc fdd8 	bl	8002574 <cliPrintf>

    if (is_init == true)
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <cliSd+0x220>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 80059cc:	4816      	ldr	r0, [pc, #88]	; (8005a28 <cliSd+0x268>)
 80059ce:	f7fc fdd1 	bl	8002574 <cliPrintf>
    }
  }
}
 80059d2:	bf00      	nop
 80059d4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}
 80059dc:	080176fc 	.word	0x080176fc
 80059e0:	2000ca64 	.word	0x2000ca64
 80059e4:	08017704 	.word	0x08017704
 80059e8:	2000ca65 	.word	0x2000ca65
 80059ec:	08017718 	.word	0x08017718
 80059f0:	0801772c 	.word	0x0801772c
 80059f4:	0801774c 	.word	0x0801774c
 80059f8:	0801776c 	.word	0x0801776c
 80059fc:	0801778c 	.word	0x0801778c
 8005a00:	080177ac 	.word	0x080177ac
 8005a04:	080177cc 	.word	0x080177cc
 8005a08:	080177ec 	.word	0x080177ec
 8005a0c:	0801780c 	.word	0x0801780c
 8005a10:	cccccccd 	.word	0xcccccccd
 8005a14:	0801782c 	.word	0x0801782c
 8005a18:	08017858 	.word	0x08017858
 8005a1c:	08017860 	.word	0x08017860
 8005a20:	08017874 	.word	0x08017874
 8005a24:	08017884 	.word	0x08017884
 8005a28:	08017890 	.word	0x08017890

08005a2c <DWT_Delay_us>:
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <DWT_Delay_us+0x40>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8005a3a:	f008 fb85 	bl	800e148 <HAL_RCC_GetHCLKFreq>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a0b      	ldr	r2, [pc, #44]	; (8005a70 <DWT_Delay_us+0x44>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	0c9b      	lsrs	r3, r3, #18
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8005a50:	bf00      	nop
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <DWT_Delay_us+0x40>)
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d3f8      	bcc.n	8005a52 <DWT_Delay_us+0x26>
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	e0001000 	.word	0xe0001000
 8005a70:	431bde83 	.word	0x431bde83

08005a74 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	; 0x30
 8005a78:	af00      	add	r7, sp, #0
	bool ret = false;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a80:	f107 031c 	add.w	r3, r7, #28
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a8e:	f107 0314 	add.w	r3, r7, #20
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8005a98:	1d3b      	adds	r3, r7, #4
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 8005aa4:	4b2e      	ldr	r3, [pc, #184]	; (8005b60 <sonarInit+0xec>)
 8005aa6:	4a2f      	ldr	r2, [pc, #188]	; (8005b64 <sonarInit+0xf0>)
 8005aa8:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <sonarInit+0xec>)
 8005aac:	225f      	movs	r2, #95	; 0x5f
 8005aae:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <sonarInit+0xec>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 8005ab6:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <sonarInit+0xec>)
 8005ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005abc:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005abe:	4b28      	ldr	r3, [pc, #160]	; (8005b60 <sonarInit+0xec>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ac4:	4b26      	ldr	r3, [pc, #152]	; (8005b60 <sonarInit+0xec>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005aca:	4825      	ldr	r0, [pc, #148]	; (8005b60 <sonarInit+0xec>)
 8005acc:	f00a fba0 	bl	8010210 <HAL_TIM_Base_Init>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <sonarInit+0x66>
	  {
	    Error_Handler();
 8005ad6:	f7fb fc45 	bl	8001364 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ade:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ae0:	f107 031c 	add.w	r3, r7, #28
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	481e      	ldr	r0, [pc, #120]	; (8005b60 <sonarInit+0xec>)
 8005ae8:	f00a fdfe 	bl	80106e8 <HAL_TIM_ConfigClockSource>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <sonarInit+0x82>
	  {
	    Error_Handler();
 8005af2:	f7fb fc37 	bl	8001364 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005af6:	481a      	ldr	r0, [pc, #104]	; (8005b60 <sonarInit+0xec>)
 8005af8:	f00a fbb5 	bl	8010266 <HAL_TIM_IC_Init>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <sonarInit+0x92>
	  {
	    Error_Handler();
 8005b02:	f7fb fc2f 	bl	8001364 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b0e:	f107 0314 	add.w	r3, r7, #20
 8005b12:	4619      	mov	r1, r3
 8005b14:	4812      	ldr	r0, [pc, #72]	; (8005b60 <sonarInit+0xec>)
 8005b16:	f00b f931 	bl	8010d7c <HAL_TIMEx_MasterConfigSynchronization>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <sonarInit+0xb0>
	  {
	    Error_Handler();
 8005b20:	f7fb fc20 	bl	8001364 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005b24:	2300      	movs	r3, #0
 8005b26:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	220c      	movs	r2, #12
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4809      	ldr	r0, [pc, #36]	; (8005b60 <sonarInit+0xec>)
 8005b3c:	f00a fd38 	bl	80105b0 <HAL_TIM_IC_ConfigChannel>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <sonarInit+0xd6>
	  {
	    Error_Handler();
 8005b46:	f7fb fc0d 	bl	8001364 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8005b4a:	210c      	movs	r1, #12
 8005b4c:	4804      	ldr	r0, [pc, #16]	; (8005b60 <sonarInit+0xec>)
 8005b4e:	f00a fbbf 	bl	80102d0 <HAL_TIM_IC_Start_IT>

	return ret;
 8005b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3730      	adds	r7, #48	; 0x30
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	2000cbac 	.word	0x2000cbac
 8005b64:	40000400 	.word	0x40000400

08005b68 <Sonar_measure>:

bool Sonar_measure(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	bool ret = false;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <Sonar_measure+0x180>)
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <Sonar_measure+0x18>
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d022      	beq.n	8005bc4 <Sonar_measure+0x5c>
 8005b7e:	e0a9      	b.n	8005cd4 <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8005b80:	2103      	movs	r1, #3
 8005b82:	2007      	movs	r0, #7
 8005b84:	f7fd fce6 	bl	8003554 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	2007      	movs	r0, #7
 8005b8c:	f7fd fd54 	bl	8003638 <gpioPinWrite>
			DWT_Delay_us(5);
 8005b90:	2005      	movs	r0, #5
 8005b92:	f7ff ff4b 	bl	8005a2c <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8005b96:	2100      	movs	r1, #0
 8005b98:	2007      	movs	r0, #7
 8005b9a:	f7fd fd4d 	bl	8003638 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8005b9e:	2106      	movs	r1, #6
 8005ba0:	2007      	movs	r0, #7
 8005ba2:	f7fd fcd7 	bl	8003554 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8005ba6:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <Sonar_measure+0x180>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8005bac:	4b4e      	ldr	r3, [pc, #312]	; (8005ce8 <Sonar_measure+0x180>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b4c      	ldr	r3, [pc, #304]	; (8005ce8 <Sonar_measure+0x180>)
 8005bb6:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8005bb8:	f7fb fb65 	bl	8001286 <millis>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4a4b      	ldr	r2, [pc, #300]	; (8005cec <Sonar_measure+0x184>)
 8005bc0:	6013      	str	r3, [r2, #0]
			break;
 8005bc2:	e087      	b.n	8005cd4 <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8005bc4:	4b48      	ldr	r3, [pc, #288]	; (8005ce8 <Sonar_measure+0x180>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f083 0301 	eor.w	r3, r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d06a      	beq.n	8005ca8 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8005bd2:	4b45      	ldr	r3, [pc, #276]	; (8005ce8 <Sonar_measure+0x180>)
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <Sonar_measure+0x180>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d907      	bls.n	8005bee <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8005bde:	4b42      	ldr	r3, [pc, #264]	; (8005ce8 <Sonar_measure+0x180>)
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <Sonar_measure+0x180>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <Sonar_measure+0x180>)
 8005bea:	60d3      	str	r3, [r2, #12]
 8005bec:	e00e      	b.n	8005c0c <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8005bee:	4b3e      	ldr	r3, [pc, #248]	; (8005ce8 <Sonar_measure+0x180>)
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b3d      	ldr	r3, [pc, #244]	; (8005ce8 <Sonar_measure+0x180>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d208      	bcs.n	8005c0c <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <Sonar_measure+0x180>)
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ce8 <Sonar_measure+0x180>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005c08:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <Sonar_measure+0x180>)
 8005c0a:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8005c0c:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <Sonar_measure+0x180>)
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fa fc8b 	bl	8000534 <__aeabi_ui2d>
 8005c1e:	a330      	add	r3, pc, #192	; (adr r3, 8005ce0 <Sonar_measure+0x178>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f7fa fd00 	bl	8000628 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f7fa ffd2 	bl	8000bd8 <__aeabi_d2uiz>
 8005c34:	4603      	mov	r3, r0
 8005c36:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <Sonar_measure+0x180>)
 8005c38:	6153      	str	r3, [r2, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8005c3a:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <Sonar_measure+0x188>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	3301      	adds	r3, #1
 8005c42:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8005c44:	79bb      	ldrb	r3, [r7, #6]
 8005c46:	2b0b      	cmp	r3, #11
 8005c48:	d101      	bne.n	8005c4e <Sonar_measure+0xe6>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8005c4e:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <Sonar_measure+0x180>)
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <Sonar_measure+0x188>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	b211      	sxth	r1, r2
 8005c58:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <Sonar_measure+0x18c>)
 8005c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8005c5e:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <Sonar_measure+0x188>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <Sonar_measure+0x18c>)
 8005c64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <Sonar_measure+0x190>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4413      	add	r3, r2
 8005c70:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <Sonar_measure+0x190>)
 8005c72:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8005c74:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <Sonar_measure+0x190>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	79ba      	ldrb	r2, [r7, #6]
 8005c7a:	491e      	ldr	r1, [pc, #120]	; (8005cf4 <Sonar_measure+0x18c>)
 8005c7c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <Sonar_measure+0x190>)
 8005c84:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8005c86:	79bb      	ldrb	r3, [r7, #6]
 8005c88:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <Sonar_measure+0x188>)
 8005c8a:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <Sonar_measure+0x190>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <Sonar_measure+0x194>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <Sonar_measure+0x180>)
 8005c9a:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8005c9c:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <Sonar_measure+0x180>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	705a      	strb	r2, [r3, #1]
				ret = true;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 8005ca6:	e014      	b.n	8005cd2 <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8005ca8:	f7fb faed 	bl	8001286 <millis>
 8005cac:	4602      	mov	r2, r0
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <Sonar_measure+0x184>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b18      	cmp	r3, #24
 8005cb6:	d90c      	bls.n	8005cd2 <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <Sonar_measure+0x180>)
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	4a0a      	ldr	r2, [pc, #40]	; (8005ce8 <Sonar_measure+0x180>)
 8005cc0:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <Sonar_measure+0x180>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8005cc8:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <Sonar_measure+0x180>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	705a      	strb	r2, [r3, #1]
					ret = false;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	71fb      	strb	r3, [r7, #7]
			break;
 8005cd2:	bf00      	nop
	}
	return ret;
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	75f6fd22 	.word	0x75f6fd22
 8005ce4:	3f919ce0 	.word	0x3f919ce0
 8005ce8:	2000cbec 	.word	0x2000cbec
 8005cec:	2000cc08 	.word	0x2000cc08
 8005cf0:	2000cc0c 	.word	0x2000cc0c
 8005cf4:	2000cc10 	.word	0x2000cc10
 8005cf8:	2000cc28 	.word	0x2000cc28
 8005cfc:	cccccccd 	.word	0xcccccccd

08005d00 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_TIM_Base_MspInit+0x94>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d133      	bne.n	8005d8a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	4b1c      	ldr	r3, [pc, #112]	; (8005d98 <HAL_TIM_Base_MspInit+0x98>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_TIM_Base_MspInit+0x98>)
 8005d2c:	f043 0302 	orr.w	r3, r3, #2
 8005d30:	6413      	str	r3, [r2, #64]	; 0x40
 8005d32:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <HAL_TIM_Base_MspInit+0x98>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <HAL_TIM_Base_MspInit+0x98>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <HAL_TIM_Base_MspInit+0x98>)
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <HAL_TIM_Base_MspInit+0x98>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d66:	2300      	movs	r3, #0
 8005d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	4619      	mov	r1, r3
 8005d74:	4809      	ldr	r0, [pc, #36]	; (8005d9c <HAL_TIM_Base_MspInit+0x9c>)
 8005d76:	f007 fb19 	bl	800d3ac <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	201d      	movs	r0, #29
 8005d80:	f006 fed3 	bl	800cb2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d84:	201d      	movs	r0, #29
 8005d86:	f006 feec 	bl	800cb62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	3728      	adds	r7, #40	; 0x28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40020400 	.word	0x40020400

08005da0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7f1b      	ldrb	r3, [r3, #28]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d129      	bne.n	8005e04 <HAL_TIM_IC_CaptureCallback+0x64>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d124      	bne.n	8005e04 <HAL_TIM_IC_CaptureCallback+0x64>
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d020      	beq.n	8005e04 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <HAL_TIM_IC_CaptureCallback+0x78>)
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005dda:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005de2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005de6:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8005de8:	e00c      	b.n	8005e04 <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005df0:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8005df2:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfc:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40000400 	.word	0x40000400
 8005e14:	2000cbec 	.word	0x2000cbec
 8005e18:	40020400 	.word	0x40020400

08005e1c <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
  bool ret = true;
 8005e22:	2301      	movs	r3, #1
 8005e24:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	e03d      	b.n	8005ea8 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8005e2c:	4923      	ldr	r1, [pc, #140]	; (8005ebc <spiInit+0xa0>)
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8005e3e:	491f      	ldr	r1, [pc, #124]	; (8005ebc <spiInit+0xa0>)
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	2201      	movs	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8005e52:	491a      	ldr	r1, [pc, #104]	; (8005ebc <spiInit+0xa0>)
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	3302      	adds	r3, #2
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8005e66:	4915      	ldr	r1, [pc, #84]	; (8005ebc <spiInit+0xa0>)
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3304      	adds	r3, #4
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8005e7a:	4910      	ldr	r1, [pc, #64]	; (8005ebc <spiInit+0xa0>)
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	3310      	adds	r3, #16
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8005e8e:	490b      	ldr	r1, [pc, #44]	; (8005ebc <spiInit+0xa0>)
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	ddbe      	ble.n	8005e2c <spiInit+0x10>
  }

  return ret;
 8005eae:	78fb      	ldrb	r3, [r7, #3]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	2000cc2c 	.word	0x2000cc2c

08005ec0 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8005ece:	79fa      	ldrb	r2, [r7, #7]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <spiBegin+0xa8>)
 8005eda:	4413      	add	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <spiBegin+0x28>
 8005ee4:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 8005ee6:	e03a      	b.n	8005f5e <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <spiBegin+0xac>)
 8005eec:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <spiBegin+0xb0>)
 8005ef2:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <spiBegin+0xac>)
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <spiBegin+0xb4>)
 8005ef8:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8005efa:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <spiBegin+0xac>)
 8005efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f00:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <spiBegin+0xac>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f08:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <spiBegin+0xac>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <spiBegin+0xac>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f14:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <spiBegin+0xac>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <spiBegin+0xac>)
 8005f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f20:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <spiBegin+0xac>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <spiBegin+0xac>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <spiBegin+0xac>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <spiBegin+0xac>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <spiBegin+0xac>)
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8005f40:	480a      	ldr	r0, [pc, #40]	; (8005f6c <spiBegin+0xac>)
 8005f42:	f009 fca1 	bl	800f888 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8005f46:	4809      	ldr	r0, [pc, #36]	; (8005f6c <spiBegin+0xac>)
 8005f48:	f009 fc3a 	bl	800f7c0 <HAL_SPI_Init>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <spiBegin+0x9c>
        p_spi->is_open = true;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2201      	movs	r2, #1
 8005f56:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f5c:	bf00      	nop
  }

  return ret;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2000cc2c 	.word	0x2000cc2c
 8005f6c:	2000cc40 	.word	0x2000cc40
 8005f70:	2000cc98 	.word	0x2000cc98
 8005f74:	40013000 	.word	0x40013000

08005f78 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	460a      	mov	r2, r1
 8005f82:	71fb      	strb	r3, [r7, #7]
 8005f84:	4613      	mov	r3, r2
 8005f86:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005f88:	79fa      	ldrb	r2, [r7, #7]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a2a      	ldr	r2, [pc, #168]	; (800603c <spiSetDataMode+0xc4>)
 8005f94:	4413      	add	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f083 0301 	eor.w	r3, r3, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d146      	bne.n	8006034 <spiSetDataMode+0xbc>


  switch( dataMode )
 8005fa6:	79bb      	ldrb	r3, [r7, #6]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d844      	bhi.n	8006036 <spiSetDataMode+0xbe>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <spiSetDataMode+0x3c>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005ffd 	.word	0x08005ffd
 8005fc0:	08006019 	.word	0x08006019
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f009 fbf1 	bl	800f7c0 <HAL_SPI_Init>
      break;
 8005fde:	e02a      	b.n	8006036 <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2201      	movs	r2, #1
 8005fee:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f009 fbe3 	bl	800f7c0 <HAL_SPI_Init>
      break;
 8005ffa:	e01c      	b.n	8006036 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2202      	movs	r2, #2
 8006002:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4618      	mov	r0, r3
 8006012:	f009 fbd5 	bl	800f7c0 <HAL_SPI_Init>
      break;
 8006016:	e00e      	b.n	8006036 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2202      	movs	r2, #2
 800601e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2201      	movs	r2, #1
 8006026:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f009 fbc7 	bl	800f7c0 <HAL_SPI_Init>
      break;
 8006032:	e000      	b.n	8006036 <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8006034:	bf00      	nop
  }
}
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2000cc2c 	.word	0x2000cc2c

08006040 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	460a      	mov	r2, r1
 800604a:	71fb      	strb	r3, [r7, #7]
 800604c:	4613      	mov	r3, r2
 800604e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8006050:	79fa      	ldrb	r2, [r7, #7]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4a10      	ldr	r2, [pc, #64]	; (800609c <spiSetBitWidth+0x5c>)
 800605c:	4413      	add	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	f083 0301 	eor.w	r3, r3, #1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d111      	bne.n	8006092 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2200      	movs	r2, #0
 8006074:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8006076:	79bb      	ldrb	r3, [r7, #6]
 8006078:	2b10      	cmp	r3, #16
 800607a:	d104      	bne.n	8006086 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006084:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4618      	mov	r0, r3
 800608c:	f009 fb98 	bl	800f7c0 <HAL_SPI_Init>
 8006090:	e000      	b.n	8006094 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 8006092:	bf00      	nop
}
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000cc2c 	.word	0x2000cc2c

080060a0 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	4603      	mov	r3, r0
 80060a8:	460a      	mov	r2, r1
 80060aa:	71fb      	strb	r3, [r7, #7]
 80060ac:	4613      	mov	r3, r2
 80060ae:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 80060b0:	79fa      	ldrb	r2, [r7, #7]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <spiTransfer8+0x50>)
 80060bc:	4413      	add	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f083 0301 	eor.w	r3, r3, #1
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <spiTransfer8+0x32>
 80060ce:	2300      	movs	r3, #0
 80060d0:	e00a      	b.n	80060e8 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6898      	ldr	r0, [r3, #8]
 80060d6:	f107 020b 	add.w	r2, r7, #11
 80060da:	1db9      	adds	r1, r7, #6
 80060dc:	230a      	movs	r3, #10
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2301      	movs	r3, #1
 80060e2:	f009 fbf9 	bl	800f8d8 <HAL_SPI_TransmitReceive>

  return ret;
 80060e6:	7afb      	ldrb	r3, [r7, #11]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	2000cc2c 	.word	0x2000cc2c

080060f4 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a0c      	ldr	r2, [pc, #48]	; (8006140 <spiDmaTxStart+0x4c>)
 800610e:	4413      	add	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f083 0301 	eor.w	r3, r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2200      	movs	r2, #0
 8006124:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	b292      	uxth	r2, r2
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f009 fd73 	bl	800fc1c <HAL_SPI_Transmit_DMA>
 8006136:	e000      	b.n	800613a <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8006138:	bf00      	nop
}
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	2000cc2c 	.word	0x2000cc2c

08006144 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8006154:	2301      	movs	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff ffc8 	bl	80060f4 <spiDmaTxStart>

  t_time = millis();
 8006164:	f7fb f88f 	bl	8001286 <millis>
 8006168:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <spiDmaTxTransfer+0x30>
 8006170:	2301      	movs	r3, #1
 8006172:	e013      	b.n	800619c <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f814 	bl	80061a4 <spiDmaTxIsDone>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8006182:	f7fb f880 	bl	8001286 <millis>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d2f0      	bcs.n	8006174 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]
      break;
 8006196:	e000      	b.n	800619a <spiDmaTxTransfer+0x56>
      break;
 8006198:	bf00      	nop
    }
  }

  return ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <spiDmaTxIsDone+0x3c>)
 80061ba:	4413      	add	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f083 0301 	eor.w	r3, r3, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <spiDmaTxIsDone+0x2c>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e001      	b.n	80061d4 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	785b      	ldrb	r3, [r3, #1]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	2000cc2c 	.word	0x2000cc2c

080061e4 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	6039      	str	r1, [r7, #0]
 80061ee:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80061f0:	79fa      	ldrb	r2, [r7, #7]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <spiAttachTxInterrupt+0x40>)
 80061fc:	4413      	add	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f083 0301 	eor.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	e000      	b.n	8006218 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8006216:	bf00      	nop
}
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000cc2c 	.word	0x2000cc2c

08006228 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_SPI_ErrorCallback+0x28>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d102      	bne.n	8006244 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <HAL_SPI_ErrorCallback+0x28>)
 8006240:	2201      	movs	r2, #1
 8006242:	709a      	strb	r2, [r3, #2]
  }
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	2000cc2c 	.word	0x2000cc2c

08006254 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <HAL_SPI_TxCpltCallback+0x38>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d10b      	bne.n	8006282 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 800626a:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_SPI_TxCpltCallback+0x38>)
 800626c:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4798      	blx	r3
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	2000cc2c 	.word	0x2000cc2c

08006290 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	60da      	str	r2, [r3, #12]
 80062a6:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a40      	ldr	r2, [pc, #256]	; (80063b0 <HAL_SPI_MspInit+0x120>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d179      	bne.n	80063a6 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	4b3f      	ldr	r3, [pc, #252]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	4a3e      	ldr	r2, [pc, #248]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062c0:	6313      	str	r3, [r2, #48]	; 0x30
 80062c2:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4b38      	ldr	r3, [pc, #224]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	4a37      	ldr	r2, [pc, #220]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062dc:	6453      	str	r3, [r2, #68]	; 0x44
 80062de:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	4a30      	ldr	r2, [pc, #192]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	6313      	str	r3, [r2, #48]	; 0x30
 80062fa:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <HAL_SPI_MspInit+0x124>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006306:	23a0      	movs	r3, #160	; 0xa0
 8006308:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800630a:	2302      	movs	r3, #2
 800630c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006312:	2303      	movs	r3, #3
 8006314:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006316:	2305      	movs	r3, #5
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800631a:	f107 0314 	add.w	r3, r7, #20
 800631e:	4619      	mov	r1, r3
 8006320:	4825      	ldr	r0, [pc, #148]	; (80063b8 <HAL_SPI_MspInit+0x128>)
 8006322:	f007 f843 	bl	800d3ac <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 8006326:	4b25      	ldr	r3, [pc, #148]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006328:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <HAL_SPI_MspInit+0x130>)
 800632a:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800632c:	4b23      	ldr	r3, [pc, #140]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 800632e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006332:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006336:	2240      	movs	r2, #64	; 0x40
 8006338:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800633a:	4b20      	ldr	r3, [pc, #128]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 800633c:	2200      	movs	r2, #0
 800633e:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006340:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006346:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006348:	4b1c      	ldr	r3, [pc, #112]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 800634a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634e:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006356:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006358:	4b18      	ldr	r3, [pc, #96]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 800635a:	2200      	movs	r2, #0
 800635c:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800635e:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006360:	2200      	movs	r2, #0
 8006362:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006364:	4b15      	ldr	r3, [pc, #84]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006366:	2200      	movs	r2, #0
 8006368:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800636a:	4814      	ldr	r0, [pc, #80]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 800636c:	f006 fc22 	bl	800cbb4 <HAL_DMA_Init>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8006376:	f7fa fff5 	bl	8001364 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a0f      	ldr	r2, [pc, #60]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 800637e:	649a      	str	r2, [r3, #72]	; 0x48
 8006380:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <HAL_SPI_MspInit+0x12c>)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	2023      	movs	r0, #35	; 0x23
 800638c:	f006 fbcd 	bl	800cb2a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006390:	2023      	movs	r0, #35	; 0x23
 8006392:	f006 fbe6 	bl	800cb62 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8006396:	2200      	movs	r2, #0
 8006398:	2105      	movs	r1, #5
 800639a:	2044      	movs	r0, #68	; 0x44
 800639c:	f006 fbc5 	bl	800cb2a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80063a0:	2044      	movs	r0, #68	; 0x44
 80063a2:	f006 fbde 	bl	800cb62 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80063a6:	bf00      	nop
 80063a8:	3728      	adds	r7, #40	; 0x28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40013000 	.word	0x40013000
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40020000 	.word	0x40020000
 80063bc:	2000cc98 	.word	0x2000cc98
 80063c0:	40026488 	.word	0x40026488

080063c4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <HAL_SPI_MspDeInit+0x40>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d111      	bne.n	80063fa <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <HAL_SPI_MspDeInit+0x44>)
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	4a0b      	ldr	r2, [pc, #44]	; (8006408 <HAL_SPI_MspDeInit+0x44>)
 80063dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e0:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80063e2:	21a0      	movs	r1, #160	; 0xa0
 80063e4:	4809      	ldr	r0, [pc, #36]	; (800640c <HAL_SPI_MspDeInit+0x48>)
 80063e6:	f007 f965 	bl	800d6b4 <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ee:	4618      	mov	r0, r3
 80063f0:	f006 fc8e 	bl	800cd10 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80063f4:	2023      	movs	r0, #35	; 0x23
 80063f6:	f006 fbc2 	bl	800cb7e <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40013000 	.word	0x40013000
 8006408:	40023800 	.word	0x40023800
 800640c:	40020000 	.word	0x40020000

08006410 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
	bool ret = true;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 800641a:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <tdsInit+0xd0>)
 800641c:	2203      	movs	r2, #3
 800641e:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8006420:	4b2f      	ldr	r3, [pc, #188]	; (80064e0 <tdsInit+0xd0>)
 8006422:	4a30      	ldr	r2, [pc, #192]	; (80064e4 <tdsInit+0xd4>)
 8006424:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8006426:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <tdsInit+0xd0>)
 8006428:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800642c:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 800642e:	4b2c      	ldr	r3, [pc, #176]	; (80064e0 <tdsInit+0xd0>)
 8006430:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006434:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <tdsInit+0xd8>)
 8006444:	4a29      	ldr	r2, [pc, #164]	; (80064ec <tdsInit+0xdc>)
 8006446:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006448:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <tdsInit+0xd8>)
 800644a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800644e:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006450:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <tdsInit+0xd8>)
 8006452:	2200      	movs	r2, #0
 8006454:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <tdsInit+0xd8>)
 8006458:	2201      	movs	r2, #1
 800645a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 800645c:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <tdsInit+0xd8>)
 800645e:	2201      	movs	r2, #1
 8006460:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006462:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <tdsInit+0xd8>)
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800646a:	4b1f      	ldr	r3, [pc, #124]	; (80064e8 <tdsInit+0xd8>)
 800646c:	2200      	movs	r2, #0
 800646e:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <tdsInit+0xd8>)
 8006472:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <tdsInit+0xe0>)
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006476:	4b1c      	ldr	r3, [pc, #112]	; (80064e8 <tdsInit+0xd8>)
 8006478:	2200      	movs	r2, #0
 800647a:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 800647c:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <tdsInit+0xd8>)
 800647e:	2201      	movs	r2, #1
 8006480:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006482:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <tdsInit+0xd8>)
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <tdsInit+0xd8>)
 800648c:	2201      	movs	r2, #1
 800648e:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006490:	4815      	ldr	r0, [pc, #84]	; (80064e8 <tdsInit+0xd8>)
 8006492:	f005 fd11 	bl	800beb8 <HAL_ADC_Init>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <tdsInit+0x90>
	  {
	    Error_Handler();
 800649c:	f7fa ff62 	bl	8001364 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80064a0:	2301      	movs	r3, #1
 80064a2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80064a4:	2301      	movs	r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80064a8:	2307      	movs	r3, #7
 80064aa:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	4619      	mov	r1, r3
 80064b0:	480d      	ldr	r0, [pc, #52]	; (80064e8 <tdsInit+0xd8>)
 80064b2:	f005 ff81 	bl	800c3b8 <HAL_ADC_ConfigChannel>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <tdsInit+0xb0>
	  {
	    Error_Handler();
 80064bc:	f7fa ff52 	bl	8001364 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 80064c0:	2201      	movs	r2, #1
 80064c2:	490c      	ldr	r1, [pc, #48]	; (80064f4 <tdsInit+0xe4>)
 80064c4:	4808      	ldr	r0, [pc, #32]	; (80064e8 <tdsInit+0xd8>)
 80064c6:	f005 fe7b 	bl	800c1c0 <HAL_ADC_Start_DMA>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <tdsInit+0xc4>
	{
		Error_Handler();
 80064d0:	f7fa ff48 	bl	8001364 <Error_Handler>
	}

	return ret;
 80064d4:	7dfb      	ldrb	r3, [r7, #23]

}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000cda0 	.word	0x2000cda0
 80064e4:	41c80000 	.word	0x41c80000
 80064e8:	2000ccf8 	.word	0x2000ccf8
 80064ec:	40012000 	.word	0x40012000
 80064f0:	0f000001 	.word	0x0f000001
 80064f4:	2000cdb0 	.word	0x2000cdb0

080064f8 <tds_measure>:
bool tds_measure(void)
{
 80064f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
	bool ret = true;
 8006500:	2301      	movs	r3, #1
 8006502:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8006504:	4b8e      	ldr	r3, [pc, #568]	; (8006740 <tds_measure+0x248>)
 8006506:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	edd3 7a03 	vldr	s15, [r3, #12]
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800652a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	4618      	mov	r0, r3
 800653a:	f7fa f81d 	bl	8000578 <__aeabi_f2d>
 800653e:	a378      	add	r3, pc, #480	; (adr r3, 8006720 <tds_measure+0x228>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7fa f870 	bl	8000628 <__aeabi_dmul>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	4618      	mov	r0, r3
 8006556:	f7fa f80f 	bl	8000578 <__aeabi_f2d>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7fa f861 	bl	8000628 <__aeabi_dmul>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4614      	mov	r4, r2
 800656c:	461d      	mov	r5, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	4618      	mov	r0, r3
 8006574:	f7fa f800 	bl	8000578 <__aeabi_f2d>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7fa f852 	bl	8000628 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	4618      	mov	r0, r3
 8006592:	f7f9 fff1 	bl	8000578 <__aeabi_f2d>
 8006596:	a364      	add	r3, pc, #400	; (adr r3, 8006728 <tds_measure+0x230>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f7fa f844 	bl	8000628 <__aeabi_dmul>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4690      	mov	r8, r2
 80065a6:	4699      	mov	r9, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7f9 ffe3 	bl	8000578 <__aeabi_f2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7fa f835 	bl	8000628 <__aeabi_dmul>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4620      	mov	r0, r4
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7f9 fe77 	bl	80002b8 <__aeabi_dsub>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4614      	mov	r4, r2
 80065d0:	461d      	mov	r5, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7f9 ffce 	bl	8000578 <__aeabi_f2d>
 80065dc:	a354      	add	r3, pc, #336	; (adr r3, 8006730 <tds_measure+0x238>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7fa f821 	bl	8000628 <__aeabi_dmul>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7f9 fe65 	bl	80002bc <__adddf3>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4614      	mov	r4, r2
 80065f8:	461d      	mov	r5, r3
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7f9 ffba 	bl	8000578 <__aeabi_f2d>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7fa f80c 	bl	8000628 <__aeabi_dmul>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	f7fa fafe 	bl	8000c18 <__aeabi_d2f>
 800661c:	4602      	mov	r2, r0
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	4618      	mov	r0, r3
 8006628:	f7f9 ffa6 	bl	8000578 <__aeabi_f2d>
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	4618      	mov	r0, r3
 8006636:	f7f9 ff9f 	bl	8000578 <__aeabi_f2d>
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <tds_measure+0x24c>)
 8006640:	f7f9 fe3a 	bl	80002b8 <__aeabi_dsub>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4610      	mov	r0, r2
 800664a:	4619      	mov	r1, r3
 800664c:	a33a      	add	r3, pc, #232	; (adr r3, 8006738 <tds_measure+0x240>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 ffe9 	bl	8000628 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <tds_measure+0x250>)
 8006664:	f7f9 fe2a 	bl	80002bc <__adddf3>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7fa f904 	bl	800087c <__aeabi_ddiv>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4610      	mov	r0, r2
 800667a:	4619      	mov	r1, r3
 800667c:	f7fa facc 	bl	8000c18 <__aeabi_d2f>
 8006680:	4602      	mov	r2, r0
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	edd3 7a07 	vldr	s15, [r3, #28]
 800668c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <tds_measure+0x254>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	3301      	adds	r3, #1
 80066a2:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	2b0b      	cmp	r3, #11
 80066a8:	d101      	bne.n	80066ae <tds_measure+0x1b6>
 80066aa:	2300      	movs	r3, #0
 80066ac:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80066b4:	4b25      	ldr	r3, [pc, #148]	; (800674c <tds_measure+0x254>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066bc:	ee17 2a90 	vmov	r2, s15
 80066c0:	b211      	sxth	r1, r2
 80066c2:	4a23      	ldr	r2, [pc, #140]	; (8006750 <tds_measure+0x258>)
 80066c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <tds_measure+0x254>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a20      	ldr	r2, [pc, #128]	; (8006750 <tds_measure+0x258>)
 80066ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80066d2:	461a      	mov	r2, r3
 80066d4:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <tds_measure+0x25c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4413      	add	r3, r2
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <tds_measure+0x25c>)
 80066dc:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 80066de:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <tds_measure+0x25c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	79fa      	ldrb	r2, [r7, #7]
 80066e4:	491a      	ldr	r1, [pc, #104]	; (8006750 <tds_measure+0x258>)
 80066e6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	4a19      	ldr	r2, [pc, #100]	; (8006754 <tds_measure+0x25c>)
 80066ee:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	4a16      	ldr	r2, [pc, #88]	; (800674c <tds_measure+0x254>)
 80066f4:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 80066f6:	4b17      	ldr	r3, [pc, #92]	; (8006754 <tds_measure+0x25c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a17      	ldr	r2, [pc, #92]	; (8006758 <tds_measure+0x260>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8006710:	79bb      	ldrb	r3, [r7, #6]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800671c:	f3af 8000 	nop.w
 8006720:	a3d70a3d 	.word	0xa3d70a3d
 8006724:	4060ad70 	.word	0x4060ad70
 8006728:	1eb851ec 	.word	0x1eb851ec
 800672c:	406ffb85 	.word	0x406ffb85
 8006730:	b851eb85 	.word	0xb851eb85
 8006734:	408acb1e 	.word	0x408acb1e
 8006738:	47ae147b 	.word	0x47ae147b
 800673c:	3f947ae1 	.word	0x3f947ae1
 8006740:	2000cda0 	.word	0x2000cda0
 8006744:	40390000 	.word	0x40390000
 8006748:	3ff00000 	.word	0x3ff00000
 800674c:	2000cdc8 	.word	0x2000cdc8
 8006750:	2000cdcc 	.word	0x2000cdcc
 8006754:	2000cde4 	.word	0x2000cde4
 8006758:	cccccccd 	.word	0xcccccccd

0800675c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006764:	f107 0314 	add.w	r3, r7, #20
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a3e      	ldr	r2, [pc, #248]	; (8006874 <HAL_ADC_MspInit+0x118>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d175      	bne.n	800686a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 800677e:	2300      	movs	r3, #0
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	4b3d      	ldr	r3, [pc, #244]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4a3c      	ldr	r2, [pc, #240]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 8006788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800678c:	6313      	str	r3, [r2, #48]	; 0x30
 800678e:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	4b36      	ldr	r3, [pc, #216]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	4a35      	ldr	r2, [pc, #212]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 80067a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a8:	6453      	str	r3, [r2, #68]	; 0x44
 80067aa:	4b33      	ldr	r3, [pc, #204]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	4b2f      	ldr	r3, [pc, #188]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	4a2e      	ldr	r2, [pc, #184]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	6313      	str	r3, [r2, #48]	; 0x30
 80067c6:	4b2c      	ldr	r3, [pc, #176]	; (8006878 <HAL_ADC_MspInit+0x11c>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80067d2:	2302      	movs	r3, #2
 80067d4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067d6:	2303      	movs	r3, #3
 80067d8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	4619      	mov	r1, r3
 80067e4:	4825      	ldr	r0, [pc, #148]	; (800687c <HAL_ADC_MspInit+0x120>)
 80067e6:	f006 fde1 	bl	800d3ac <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 80067ea:	4b25      	ldr	r3, [pc, #148]	; (8006880 <HAL_ADC_MspInit+0x124>)
 80067ec:	4a25      	ldr	r2, [pc, #148]	; (8006884 <HAL_ADC_MspInit+0x128>)
 80067ee:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80067f0:	4b23      	ldr	r3, [pc, #140]	; (8006880 <HAL_ADC_MspInit+0x124>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067f6:	4b22      	ldr	r3, [pc, #136]	; (8006880 <HAL_ADC_MspInit+0x124>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067fc:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_ADC_MspInit+0x124>)
 80067fe:	2200      	movs	r2, #0
 8006800:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <HAL_ADC_MspInit+0x124>)
 8006804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006808:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800680a:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <HAL_ADC_MspInit+0x124>)
 800680c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006810:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006812:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <HAL_ADC_MspInit+0x124>)
 8006814:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006818:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800681a:	4b19      	ldr	r3, [pc, #100]	; (8006880 <HAL_ADC_MspInit+0x124>)
 800681c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006820:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006822:	4b17      	ldr	r3, [pc, #92]	; (8006880 <HAL_ADC_MspInit+0x124>)
 8006824:	2200      	movs	r2, #0
 8006826:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006828:	4b15      	ldr	r3, [pc, #84]	; (8006880 <HAL_ADC_MspInit+0x124>)
 800682a:	2200      	movs	r2, #0
 800682c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800682e:	4814      	ldr	r0, [pc, #80]	; (8006880 <HAL_ADC_MspInit+0x124>)
 8006830:	f006 f9c0 	bl	800cbb4 <HAL_DMA_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 800683a:	f7fa fd93 	bl	8001364 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a0f      	ldr	r2, [pc, #60]	; (8006880 <HAL_ADC_MspInit+0x124>)
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
 8006844:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <HAL_ADC_MspInit+0x124>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800684a:	2200      	movs	r2, #0
 800684c:	2106      	movs	r1, #6
 800684e:	2012      	movs	r0, #18
 8006850:	f006 f96b 	bl	800cb2a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006854:	2012      	movs	r0, #18
 8006856:	f006 f984 	bl	800cb62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	2106      	movs	r1, #6
 800685e:	2038      	movs	r0, #56	; 0x38
 8006860:	f006 f963 	bl	800cb2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006864:	2038      	movs	r0, #56	; 0x38
 8006866:	f006 f97c 	bl	800cb62 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800686a:	bf00      	nop
 800686c:	3728      	adds	r7, #40	; 0x28
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40012000 	.word	0x40012000
 8006878:	40023800 	.word	0x40023800
 800687c:	40020000 	.word	0x40020000
 8006880:	2000cd40 	.word	0x2000cd40
 8006884:	40026410 	.word	0x40026410

08006888 <uartInit>:
#endif



bool uartInit(void)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e007      	b.n	80068a4 <uartInit+0x1c>
  {
    is_open[i] = false;
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <uartInit+0x30>)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3301      	adds	r3, #1
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	ddf4      	ble.n	8006894 <uartInit+0xc>
  }


  return true;
 80068aa:	2301      	movs	r3, #1
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	2000cde8 	.word	0x2000cde8

080068bc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80068c8:	2300      	movs	r3, #0
 80068ca:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <uartOpen+0x1c>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d078      	beq.n	80069c8 <uartOpen+0x10c>
 80068d6:	e0ef      	b.n	8006ab8 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 80068d8:	4b7a      	ldr	r3, [pc, #488]	; (8006ac4 <uartOpen+0x208>)
 80068da:	4a7b      	ldr	r2, [pc, #492]	; (8006ac8 <uartOpen+0x20c>)
 80068dc:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 80068de:	4a79      	ldr	r2, [pc, #484]	; (8006ac4 <uartOpen+0x208>)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80068e4:	4b77      	ldr	r3, [pc, #476]	; (8006ac4 <uartOpen+0x208>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 80068ea:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <uartOpen+0x208>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 80068f0:	4b74      	ldr	r3, [pc, #464]	; (8006ac4 <uartOpen+0x208>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <uartOpen+0x208>)
 80068f8:	220c      	movs	r2, #12
 80068fa:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80068fc:	4b71      	ldr	r3, [pc, #452]	; (8006ac4 <uartOpen+0x208>)
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8006902:	4b70      	ldr	r3, [pc, #448]	; (8006ac4 <uartOpen+0x208>)
 8006904:	2200      	movs	r2, #0
 8006906:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8006908:	486e      	ldr	r0, [pc, #440]	; (8006ac4 <uartOpen+0x208>)
 800690a:	f00a fb06 	bl	8010f1a <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4a6e      	ldr	r2, [pc, #440]	; (8006acc <uartOpen+0x210>)
 8006914:	4413      	add	r3, r2
 8006916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800691a:	496d      	ldr	r1, [pc, #436]	; (8006ad0 <uartOpen+0x214>)
 800691c:	4618      	mov	r0, r3
 800691e:	f7fa feec 	bl	80016fa <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	4b6b      	ldr	r3, [pc, #428]	; (8006ad4 <uartOpen+0x218>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <uartOpen+0x218>)
 800692c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006930:	6313      	str	r3, [r2, #48]	; 0x30
 8006932:	4b68      	ldr	r3, [pc, #416]	; (8006ad4 <uartOpen+0x218>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800693e:	2200      	movs	r2, #0
 8006940:	2104      	movs	r1, #4
 8006942:	203a      	movs	r0, #58	; 0x3a
 8006944:	f006 f8f1 	bl	800cb2a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006948:	203a      	movs	r0, #58	; 0x3a
 800694a:	f006 f90a 	bl	800cb62 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800694e:	2200      	movs	r2, #0
 8006950:	2104      	movs	r1, #4
 8006952:	2046      	movs	r0, #70	; 0x46
 8006954:	f006 f8e9 	bl	800cb2a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006958:	2046      	movs	r0, #70	; 0x46
 800695a:	f006 f902 	bl	800cb62 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 800695e:	4859      	ldr	r0, [pc, #356]	; (8006ac4 <uartOpen+0x208>)
 8006960:	f00a fa8e 	bl	8010e80 <HAL_UART_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <uartOpen+0xb4>
        {
          ret = false;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 800696e:	e0a3      	b.n	8006ab8 <uartOpen+0x1fc>
          ret = true;
 8006970:	2301      	movs	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	4a58      	ldr	r2, [pc, #352]	; (8006ad8 <uartOpen+0x21c>)
 8006978:	2101      	movs	r1, #1
 800697a:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800697c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006980:	4953      	ldr	r1, [pc, #332]	; (8006ad0 <uartOpen+0x214>)
 8006982:	4850      	ldr	r0, [pc, #320]	; (8006ac4 <uartOpen+0x208>)
 8006984:	f00a fb8e 	bl	80110a4 <HAL_UART_Receive_DMA>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <uartOpen+0xd6>
            ret = false;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	4a4d      	ldr	r2, [pc, #308]	; (8006acc <uartOpen+0x210>)
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	4413      	add	r3, r2
 800699a:	3308      	adds	r3, #8
 800699c:	6819      	ldr	r1, [r3, #0]
 800699e:	4b4f      	ldr	r3, [pc, #316]	; (8006adc <uartOpen+0x220>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	1a8a      	subs	r2, r1, r2
 80069a8:	4948      	ldr	r1, [pc, #288]	; (8006acc <uartOpen+0x210>)
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	440b      	add	r3, r1
 80069ae:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80069b0:	79fa      	ldrb	r2, [r7, #7]
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	4945      	ldr	r1, [pc, #276]	; (8006acc <uartOpen+0x210>)
 80069b6:	0112      	lsls	r2, r2, #4
 80069b8:	440a      	add	r2, r1
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	4943      	ldr	r1, [pc, #268]	; (8006acc <uartOpen+0x210>)
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	440b      	add	r3, r1
 80069c2:	3304      	adds	r3, #4
 80069c4:	601a      	str	r2, [r3, #0]
      break;
 80069c6:	e077      	b.n	8006ab8 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80069c8:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <uartOpen+0x208>)
 80069ca:	4a3f      	ldr	r2, [pc, #252]	; (8006ac8 <uartOpen+0x20c>)
 80069cc:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80069ce:	4a3d      	ldr	r2, [pc, #244]	; (8006ac4 <uartOpen+0x208>)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80069d4:	4b3b      	ldr	r3, [pc, #236]	; (8006ac4 <uartOpen+0x208>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 80069da:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <uartOpen+0x208>)
 80069dc:	2200      	movs	r2, #0
 80069de:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80069e0:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <uartOpen+0x208>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80069e6:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <uartOpen+0x208>)
 80069e8:	220c      	movs	r2, #12
 80069ea:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069ec:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <uartOpen+0x208>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80069f2:	4b34      	ldr	r3, [pc, #208]	; (8006ac4 <uartOpen+0x208>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 80069f8:	4832      	ldr	r0, [pc, #200]	; (8006ac4 <uartOpen+0x208>)
 80069fa:	f00a fa8e 	bl	8010f1a <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4a32      	ldr	r2, [pc, #200]	; (8006acc <uartOpen+0x210>)
 8006a04:	4413      	add	r3, r2
 8006a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a0a:	4931      	ldr	r1, [pc, #196]	; (8006ad0 <uartOpen+0x214>)
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fa fe74 	bl	80016fa <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	4b2f      	ldr	r3, [pc, #188]	; (8006ad4 <uartOpen+0x218>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	4a2e      	ldr	r2, [pc, #184]	; (8006ad4 <uartOpen+0x218>)
 8006a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a20:	6313      	str	r3, [r2, #48]	; 0x30
 8006a22:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <uartOpen+0x218>)
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2104      	movs	r1, #4
 8006a32:	203a      	movs	r0, #58	; 0x3a
 8006a34:	f006 f879 	bl	800cb2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006a38:	203a      	movs	r0, #58	; 0x3a
 8006a3a:	f006 f892 	bl	800cb62 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2104      	movs	r1, #4
 8006a42:	2046      	movs	r0, #70	; 0x46
 8006a44:	f006 f871 	bl	800cb2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006a48:	2046      	movs	r0, #70	; 0x46
 8006a4a:	f006 f88a 	bl	800cb62 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a4e:	481d      	ldr	r0, [pc, #116]	; (8006ac4 <uartOpen+0x208>)
 8006a50:	f00a fa16 	bl	8010e80 <HAL_UART_Init>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <uartOpen+0x1a4>
      {
        ret = false;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8006a5e:	e02a      	b.n	8006ab6 <uartOpen+0x1fa>
        ret = true;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	4a1c      	ldr	r2, [pc, #112]	; (8006ad8 <uartOpen+0x21c>)
 8006a68:	2101      	movs	r1, #1
 8006a6a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a70:	4917      	ldr	r1, [pc, #92]	; (8006ad0 <uartOpen+0x214>)
 8006a72:	4814      	ldr	r0, [pc, #80]	; (8006ac4 <uartOpen+0x208>)
 8006a74:	f00a fb16 	bl	80110a4 <HAL_UART_Receive_DMA>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <uartOpen+0x1c6>
          ret = false;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	4a11      	ldr	r2, [pc, #68]	; (8006acc <uartOpen+0x210>)
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	4413      	add	r3, r2
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	4b13      	ldr	r3, [pc, #76]	; (8006adc <uartOpen+0x220>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	1a8a      	subs	r2, r1, r2
 8006a98:	490c      	ldr	r1, [pc, #48]	; (8006acc <uartOpen+0x210>)
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	440b      	add	r3, r1
 8006a9e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8006aa0:	79fa      	ldrb	r2, [r7, #7]
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4909      	ldr	r1, [pc, #36]	; (8006acc <uartOpen+0x210>)
 8006aa6:	0112      	lsls	r2, r2, #4
 8006aa8:	440a      	add	r2, r1
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	4907      	ldr	r1, [pc, #28]	; (8006acc <uartOpen+0x210>)
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	601a      	str	r2, [r3, #0]
      break;
 8006ab6:	bf00      	nop
  }

  return ret;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	2000cefc 	.word	0x2000cefc
 8006ac8:	40011000 	.word	0x40011000
 8006acc:	2000cdec 	.word	0x2000cdec
 8006ad0:	2000cdfc 	.word	0x2000cdfc
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	2000cde8 	.word	0x2000cde8
 8006adc:	2000cf9c 	.word	0x2000cf9c

08006ae0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <uartAvailable+0x1a>
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d018      	beq.n	8006b2a <uartAvailable+0x4a>
 8006af8:	e02f      	b.n	8006b5a <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <uartAvailable+0x84>)
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4413      	add	r3, r2
 8006b02:	3308      	adds	r3, #8
 8006b04:	6819      	ldr	r1, [r3, #0]
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <uartAvailable+0x88>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	1a8a      	subs	r2, r1, r2
 8006b10:	4914      	ldr	r1, [pc, #80]	; (8006b64 <uartAvailable+0x84>)
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	440b      	add	r3, r1
 8006b16:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	4a11      	ldr	r2, [pc, #68]	; (8006b64 <uartAvailable+0x84>)
 8006b1e:	4413      	add	r3, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fa fe42 	bl	80017aa <qbufferAvailable>
 8006b26:	60f8      	str	r0, [r7, #12]
      break;
 8006b28:	e017      	b.n	8006b5a <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	4a0d      	ldr	r2, [pc, #52]	; (8006b64 <uartAvailable+0x84>)
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	4413      	add	r3, r2
 8006b32:	3308      	adds	r3, #8
 8006b34:	6819      	ldr	r1, [r3, #0]
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <uartAvailable+0x88>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	1a8a      	subs	r2, r1, r2
 8006b40:	4908      	ldr	r1, [pc, #32]	; (8006b64 <uartAvailable+0x84>)
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	440b      	add	r3, r1
 8006b46:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <uartAvailable+0x84>)
 8006b4e:	4413      	add	r3, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fa fe2a 	bl	80017aa <qbufferAvailable>
 8006b56:	60f8      	str	r0, [r7, #12]
      break;
 8006b58:	bf00      	nop
  }

  return ret;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2000cdec 	.word	0x2000cdec
 8006b68:	2000cf9c 	.word	0x2000cf9c

08006b6c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <uartRead+0x1a>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d008      	beq.n	8006b96 <uartRead+0x2a>
 8006b84:	e00f      	b.n	8006ba6 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8006b86:	f107 030f 	add.w	r3, r7, #15
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <uartRead+0x44>)
 8006b90:	f7fa fdce 	bl	8001730 <qbufferRead>
      break;
 8006b94:	e007      	b.n	8006ba6 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006b96:	f107 030f 	add.w	r3, r7, #15
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4805      	ldr	r0, [pc, #20]	; (8006bb4 <uartRead+0x48>)
 8006ba0:	f7fa fdc6 	bl	8001730 <qbufferRead>
      break;
 8006ba4:	bf00      	nop
  }

  return ret;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	2000cdec 	.word	0x2000cdec
 8006bb4:	2000cdfc 	.word	0x2000cdfc

08006bb8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <uartWrite+0x1e>
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d00f      	beq.n	8006bf4 <uartWrite+0x3c>
 8006bd4:	e020      	b.n	8006c18 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	2364      	movs	r3, #100	; 0x64
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4811      	ldr	r0, [pc, #68]	; (8006c24 <uartWrite+0x6c>)
 8006be0:	f00a f9c7 	bl	8010f72 <HAL_UART_Transmit>
 8006be4:	4603      	mov	r3, r0
 8006be6:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d111      	bne.n	8006c12 <uartWrite+0x5a>
        {
          ret = length;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
        }
      break;
 8006bf2:	e00e      	b.n	8006c12 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	2364      	movs	r3, #100	; 0x64
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4809      	ldr	r0, [pc, #36]	; (8006c24 <uartWrite+0x6c>)
 8006bfe:	f00a f9b8 	bl	8010f72 <HAL_UART_Transmit>
 8006c02:	4603      	mov	r3, r0
 8006c04:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <uartWrite+0x5e>
      {
        ret = length;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006c10:	e001      	b.n	8006c16 <uartWrite+0x5e>
      break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <uartWrite+0x60>
      break;
 8006c16:	bf00      	nop
  }

  return ret;
 8006c18:	697b      	ldr	r3, [r7, #20]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	2000cefc 	.word	0x2000cefc

08006c28 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006c28:	b40e      	push	{r1, r2, r3}
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b0c7      	sub	sp, #284	; 0x11c
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	4602      	mov	r2, r0
 8006c32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c36:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006c3a:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8006c3c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006c40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c48:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8006c4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c52:	f107 0010 	add.w	r0, r7, #16
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c60:	f00d fd04 	bl	801466c <vsniprintf>
 8006c64:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006c68:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006c6c:	f107 0110 	add.w	r1, r7, #16
 8006c70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c74:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff ff9c 	bl	8006bb8 <uartWrite>
 8006c80:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8006c84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c94:	b003      	add	sp, #12
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc8:	f107 0314 	add.w	r3, r7, #20
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	60da      	str	r2, [r3, #12]
 8006cd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a5b      	ldr	r2, [pc, #364]	; (8006e4c <HAL_UART_MspInit+0x18c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	f040 80b0 	bne.w	8006e44 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	4b59      	ldr	r3, [pc, #356]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	4a58      	ldr	r2, [pc, #352]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006cee:	f043 0310 	orr.w	r3, r3, #16
 8006cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8006cf4:	4b56      	ldr	r3, [pc, #344]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	4b52      	ldr	r3, [pc, #328]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	4a51      	ldr	r2, [pc, #324]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d10:	4b4f      	ldr	r3, [pc, #316]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	4b4b      	ldr	r3, [pc, #300]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	4a4a      	ldr	r2, [pc, #296]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006d26:	f043 0302 	orr.w	r3, r3, #2
 8006d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2c:	4b48      	ldr	r3, [pc, #288]	; (8006e50 <HAL_UART_MspInit+0x190>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d46:	2303      	movs	r3, #3
 8006d48:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d4a:	2307      	movs	r3, #7
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	4619      	mov	r1, r3
 8006d54:	483f      	ldr	r0, [pc, #252]	; (8006e54 <HAL_UART_MspInit+0x194>)
 8006d56:	f006 fb29 	bl	800d3ac <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d66:	2303      	movs	r3, #3
 8006d68:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d6a:	2307      	movs	r3, #7
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d6e:	f107 0314 	add.w	r3, r7, #20
 8006d72:	4619      	mov	r1, r3
 8006d74:	4838      	ldr	r0, [pc, #224]	; (8006e58 <HAL_UART_MspInit+0x198>)
 8006d76:	f006 fb19 	bl	800d3ac <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006d7a:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006d7c:	4a38      	ldr	r2, [pc, #224]	; (8006e60 <HAL_UART_MspInit+0x1a0>)
 8006d7e:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006d80:	4b36      	ldr	r3, [pc, #216]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d86:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d88:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006d8a:	2240      	movs	r2, #64	; 0x40
 8006d8c:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d8e:	4b33      	ldr	r3, [pc, #204]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d94:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d9a:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d9c:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006da2:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006da8:	4b2c      	ldr	r3, [pc, #176]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006db4:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006dba:	4828      	ldr	r0, [pc, #160]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006dbc:	f005 fefa 	bl	800cbb4 <HAL_DMA_Init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8006dc6:	f7fa facd 	bl	8001364 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a23      	ldr	r2, [pc, #140]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
 8006dd0:	4a22      	ldr	r2, [pc, #136]	; (8006e5c <HAL_UART_MspInit+0x19c>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006dd6:	4b23      	ldr	r3, [pc, #140]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006dd8:	4a23      	ldr	r2, [pc, #140]	; (8006e68 <HAL_UART_MspInit+0x1a8>)
 8006dda:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006ddc:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006de2:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006de4:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dea:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006df0:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006df6:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006df8:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dfe:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006e04:	4b17      	ldr	r3, [pc, #92]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e0a:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e0c:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006e18:	4812      	ldr	r0, [pc, #72]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e1a:	f005 fecb 	bl	800cbb4 <HAL_DMA_Init>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8006e24:	f7fa fa9e 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8006e2e:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <HAL_UART_MspInit+0x1a4>)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e34:	2200      	movs	r2, #0
 8006e36:	2100      	movs	r1, #0
 8006e38:	2025      	movs	r0, #37	; 0x25
 8006e3a:	f005 fe76 	bl	800cb2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e3e:	2025      	movs	r0, #37	; 0x25
 8006e40:	f005 fe8f 	bl	800cb62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e44:	bf00      	nop
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40011000 	.word	0x40011000
 8006e50:	40023800 	.word	0x40023800
 8006e54:	40020000 	.word	0x40020000
 8006e58:	40020400 	.word	0x40020400
 8006e5c:	2000cf3c 	.word	0x2000cf3c
 8006e60:	400264b8 	.word	0x400264b8
 8006e64:	2000cf9c 	.word	0x2000cf9c
 8006e68:	40026440 	.word	0x40026440

08006e6c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a11      	ldr	r2, [pc, #68]	; (8006ec0 <HAL_UART_MspDeInit+0x54>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d11b      	bne.n	8006eb6 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <HAL_UART_MspDeInit+0x58>)
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <HAL_UART_MspDeInit+0x58>)
 8006e84:	f023 0310 	bic.w	r3, r3, #16
 8006e88:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e8e:	480e      	ldr	r0, [pc, #56]	; (8006ec8 <HAL_UART_MspDeInit+0x5c>)
 8006e90:	f006 fc10 	bl	800d6b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006e94:	2140      	movs	r1, #64	; 0x40
 8006e96:	480d      	ldr	r0, [pc, #52]	; (8006ecc <HAL_UART_MspDeInit+0x60>)
 8006e98:	f006 fc0c 	bl	800d6b4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f005 ff35 	bl	800cd10 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f005 ff30 	bl	800cd10 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006eb0:	2025      	movs	r0, #37	; 0x25
 8006eb2:	f005 fe64 	bl	800cb7e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40020000 	.word	0x40020000
 8006ecc:	40020400 	.word	0x40020400

08006ed0 <draw_fan_status>:
#include "ui_common.h"
#include "image.h"
#include "lcd.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	80fb      	strh	r3, [r7, #6]
 8006eda:	460b      	mov	r3, r1
 8006edc:	80bb      	strh	r3, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 127;
 8006ee2:	237f      	movs	r3, #127	; 0x7f
 8006ee4:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b7e      	cmp	r3, #126	; 0x7e
 8006eea:	d910      	bls.n	8006f0e <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <draw_fan_status+0x30>
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <draw_fan_status+0x90>)
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	6810      	ldr	r0, [r2, #0]
 8006efa:	6851      	ldr	r1, [r2, #4]
 8006efc:	c303      	stmia	r3!, {r0, r1}
 8006efe:	e020      	b.n	8006f42 <draw_fan_status+0x72>
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <draw_fan_status+0x94>)
 8006f02:	f107 030c 	add.w	r3, r7, #12
 8006f06:	6810      	ldr	r0, [r2, #0]
 8006f08:	6851      	ldr	r1, [r2, #4]
 8006f0a:	c303      	stmia	r3!, {r0, r1}
 8006f0c:	e019      	b.n	8006f42 <draw_fan_status+0x72>
  }
  else if (fanSpeed > 0)
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d010      	beq.n	8006f36 <draw_fan_status+0x66>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <draw_fan_status+0x58>
 8006f1a:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <draw_fan_status+0x90>)
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	6810      	ldr	r0, [r2, #0]
 8006f22:	6851      	ldr	r1, [r2, #4]
 8006f24:	c303      	stmia	r3!, {r0, r1}
 8006f26:	e00c      	b.n	8006f42 <draw_fan_status+0x72>
 8006f28:	4a0e      	ldr	r2, [pc, #56]	; (8006f64 <draw_fan_status+0x94>)
 8006f2a:	f107 030c 	add.w	r3, r7, #12
 8006f2e:	6810      	ldr	r0, [r2, #0]
 8006f30:	6851      	ldr	r1, [r2, #4]
 8006f32:	c303      	stmia	r3!, {r0, r1}
 8006f34:	e005      	b.n	8006f42 <draw_fan_status+0x72>
  }
  else
  {
    image = Fan0_32x32x4;
 8006f36:	4a0b      	ldr	r2, [pc, #44]	; (8006f64 <draw_fan_status+0x94>)
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	6810      	ldr	r0, [r2, #0]
 8006f3e:	6851      	ldr	r1, [r2, #4]
 8006f40:	c303      	stmia	r3!, {r0, r1}
  }
  lcdDrawBufferImage(0, 0, image.width, image.height, image.data);
 8006f42:	8a3a      	ldrh	r2, [r7, #16]
 8006f44:	8a79      	ldrh	r1, [r7, #18]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f7fd f91a 	bl	8004188 <lcdDrawBufferImage>
  lcdRequestDraw();
 8006f54:	f7fc ff76 	bl	8003e44 <lcdRequestDraw>
}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	08021208 	.word	0x08021208
 8006f64:	08021200 	.word	0x08021200

08006f68 <get_blink>:

bool get_blink() {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 8006f6e:	f7fa f98a 	bl	8001286 <millis>
 8006f72:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <get_blink+0x44>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db0a      	blt.n	8006f96 <get_blink+0x2e>
    blink ^= 0xFF;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <get_blink+0x48>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	43db      	mvns	r3, r3
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <get_blink+0x48>)
 8006f8a:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 8006f92:	4a06      	ldr	r2, [pc, #24]	; (8006fac <get_blink+0x44>)
 8006f94:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <get_blink+0x48>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf14      	ite	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	2300      	moveq	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	2000cffc 	.word	0x2000cffc
 8006fb0:	2000d000 	.word	0x2000d000

08006fb4 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006fbe:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <SD_CheckStatus+0x80>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8006fc4:	f7fe f988 	bl	80052d8 <sdIsInit>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f083 0301 	eor.w	r3, r3, #1
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <SD_CheckStatus+0x80>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	4b14      	ldr	r3, [pc, #80]	; (8007034 <SD_CheckStatus+0x80>)
 8006fe2:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8006fe4:	f7fe f984 	bl	80052f0 <sdIsDetected>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f083 0301 	eor.w	r3, r3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <SD_CheckStatus+0x80>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f043 0302 	orr.w	r3, r3, #2
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <SD_CheckStatus+0x80>)
 8007002:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8007004:	200a      	movs	r0, #10
 8007006:	f7fe f9f7 	bl	80053f8 <sdIsReady>
 800700a:	4603      	mov	r3, r0
 800700c:	f083 0301 	eor.w	r3, r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <SD_CheckStatus+0x80>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	b2da      	uxtb	r2, r3
 8007022:	4b04      	ldr	r3, [pc, #16]	; (8007034 <SD_CheckStatus+0x80>)
 8007024:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <SD_CheckStatus+0x80>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b2db      	uxtb	r3, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2000009c 	.word	0x2000009c

08007038 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8007042:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <SD_initialize+0x40>)
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8007048:	f7fe f946 	bl	80052d8 <sdIsInit>
 800704c:	4603      	mov	r3, r0
 800704e:	f083 0301 	eor.w	r3, r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <SD_initialize+0x40>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <SD_initialize+0x40>)
 8007066:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007068:	4b03      	ldr	r3, [pc, #12]	; (8007078 <SD_initialize+0x40>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b2db      	uxtb	r3, r3
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	2000009c 	.word	0x2000009c

0800707c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff ff93 	bl	8006fb4 <SD_CheckStatus>
 800708e:	4603      	mov	r3, r0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 80070ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fe f9bf 	bl	8005438 <sdReadBlocks>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <SD_read+0x2c>
  {
    res = RES_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b086      	sub	sp, #24
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 80070e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe f9ee 	bl	80054cc <sdWriteBlocks>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <SD_write+0x2c>
  {
    res = RES_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08c      	sub	sp, #48	; 0x30
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	603a      	str	r2, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
 8007110:	460b      	mov	r3, r1
 8007112:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800711a:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <SD_ioctl+0xac>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <SD_ioctl+0x28>
 8007128:	2303      	movs	r3, #3
 800712a:	e03c      	b.n	80071a6 <SD_ioctl+0xa2>

  switch (cmd)
 800712c:	79bb      	ldrb	r3, [r7, #6]
 800712e:	2b03      	cmp	r3, #3
 8007130:	d834      	bhi.n	800719c <SD_ioctl+0x98>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <SD_ioctl+0x34>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007149 	.word	0x08007149
 800713c:	08007151 	.word	0x08007151
 8007140:	08007169 	.word	0x08007169
 8007144:	08007183 	.word	0x08007183
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800714e:	e028      	b.n	80071a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8007150:	f107 0308 	add.w	r3, r7, #8
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe f8e1 	bl	800531c <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007166:	e01c      	b.n	80071a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe f8d5 	bl	800531c <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	b29a      	uxth	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007180:	e00f      	b.n	80071a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8007182:	f107 0308 	add.w	r3, r7, #8
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe f8c8 	bl	800531c <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	0a5a      	lsrs	r2, r3, #9
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800719a:	e002      	b.n	80071a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800719c:	2304      	movs	r3, #4
 800719e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80071a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3730      	adds	r7, #48	; 0x30
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	2000009c 	.word	0x2000009c

080071b4 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	3306      	adds	r3, #6
 80071c2:	2220      	movs	r2, #32
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f00b fd94 	bl	8012cf4 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2200      	movs	r2, #0
 80071d0:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <hanFontLoad+0x2e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b0a      	cmp	r3, #10
 80071e0:	d107      	bne.n	80071f2 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2204      	movs	r2, #4
 80071e6:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2201      	movs	r2, #1
 80071ec:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 80071ee:	2304      	movs	r3, #4
 80071f0:	e03b      	b.n	800726a <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da2b      	bge.n	8007254 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	041a      	lsls	r2, r3, #16
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3301      	adds	r3, #1
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	4313      	orrs	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	3202      	adds	r2, #2
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a16      	ldr	r2, [pc, #88]	; (8007274 <hanFontLoad+0xc0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d30e      	bcc.n	800723c <hanFontLoad+0x88>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4a15      	ldr	r2, [pc, #84]	; (8007278 <hanFontLoad+0xc4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d80a      	bhi.n	800723c <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2201      	movs	r2, #1
 800722a:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2203      	movs	r2, #3
 8007230:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f91f 	bl	8007478 <hanUniFontLoad>
 800723a:	e009      	b.n	8007250 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2202      	movs	r2, #2
 8007246:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f816 	bl	800727c <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8007250:	2301      	movs	r3, #1
 8007252:	e00a      	b.n	800726a <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2202      	movs	r2, #2
 8007258:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa30 	bl	80076c8 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8007268:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	00eab080 	.word	0x00eab080
 8007278:	00ed9fb0 	.word	0x00ed9fb0

0800727c <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	b21a      	sxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3301      	adds	r3, #1
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b21b      	sxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b21b      	sxth	r3, r3
 800729a:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 800729c:	89bb      	ldrh	r3, [r7, #12]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fa3c 	bl	800771c <hanCnvCodeWan2Johab>
 80072a4:	4603      	mov	r3, r0
 80072a6:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 80072a8:	89bb      	ldrh	r3, [r7, #12]
 80072aa:	0a9b      	lsrs	r3, r3, #10
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	4b63      	ldr	r3, [pc, #396]	; (8007444 <hanWanFontLoad+0x1c8>)
 80072b6:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 80072b8:	89bb      	ldrh	r3, [r7, #12]
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	4b60      	ldr	r3, [pc, #384]	; (8007448 <hanWanFontLoad+0x1cc>)
 80072c6:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 80072c8:	89bb      	ldrh	r3, [r7, #12]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	4b5e      	ldr	r3, [pc, #376]	; (800744c <hanWanFontLoad+0x1d0>)
 80072d2:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 80072d4:	4b5b      	ldr	r3, [pc, #364]	; (8007444 <hanWanFontLoad+0x1c8>)
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	4b5d      	ldr	r3, [pc, #372]	; (8007450 <hanWanFontLoad+0x1d4>)
 80072dc:	5c9b      	ldrb	r3, [r3, r2]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	4b58      	ldr	r3, [pc, #352]	; (8007444 <hanWanFontLoad+0x1c8>)
 80072e2:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 80072e4:	4b58      	ldr	r3, [pc, #352]	; (8007448 <hanWanFontLoad+0x1cc>)
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	4b5a      	ldr	r3, [pc, #360]	; (8007454 <hanWanFontLoad+0x1d8>)
 80072ec:	5c9b      	ldrb	r3, [r3, r2]
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	4b55      	ldr	r3, [pc, #340]	; (8007448 <hanWanFontLoad+0x1cc>)
 80072f2:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 80072f4:	4b55      	ldr	r3, [pc, #340]	; (800744c <hanWanFontLoad+0x1d0>)
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b57      	ldr	r3, [pc, #348]	; (8007458 <hanWanFontLoad+0x1dc>)
 80072fc:	5c9b      	ldrb	r3, [r3, r2]
 80072fe:	b29a      	uxth	r2, r3
 8007300:	4b52      	ldr	r3, [pc, #328]	; (800744c <hanWanFontLoad+0x1d0>)
 8007302:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007304:	4b51      	ldr	r3, [pc, #324]	; (800744c <hanWanFontLoad+0x1d0>)
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <hanWanFontLoad+0x9e>
 800730c:	4b4e      	ldr	r3, [pc, #312]	; (8007448 <hanWanFontLoad+0x1cc>)
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	4b52      	ldr	r3, [pc, #328]	; (800745c <hanWanFontLoad+0x1e0>)
 8007314:	5c9b      	ldrb	r3, [r3, r2]
 8007316:	b29b      	uxth	r3, r3
 8007318:	e005      	b.n	8007326 <hanWanFontLoad+0xaa>
 800731a:	4b4b      	ldr	r3, [pc, #300]	; (8007448 <hanWanFontLoad+0x1cc>)
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	4b4f      	ldr	r3, [pc, #316]	; (8007460 <hanWanFontLoad+0x1e4>)
 8007322:	5c9b      	ldrb	r3, [r3, r2]
 8007324:	b29b      	uxth	r3, r3
 8007326:	4a4f      	ldr	r2, [pc, #316]	; (8007464 <hanWanFontLoad+0x1e8>)
 8007328:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800732a:	4b46      	ldr	r3, [pc, #280]	; (8007444 <hanWanFontLoad+0x1c8>)
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <hanWanFontLoad+0xca>
 8007332:	4b44      	ldr	r3, [pc, #272]	; (8007444 <hanWanFontLoad+0x1c8>)
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d005      	beq.n	8007346 <hanWanFontLoad+0xca>
 800733a:	4b42      	ldr	r3, [pc, #264]	; (8007444 <hanWanFontLoad+0x1c8>)
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	2b10      	cmp	r3, #16
 8007340:	d001      	beq.n	8007346 <hanWanFontLoad+0xca>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <hanWanFontLoad+0xcc>
 8007346:	2300      	movs	r3, #0
 8007348:	b29b      	uxth	r3, r3
 800734a:	4a40      	ldr	r2, [pc, #256]	; (800744c <hanWanFontLoad+0x1d0>)
 800734c:	8812      	ldrh	r2, [r2, #0]
 800734e:	2a00      	cmp	r2, #0
 8007350:	d001      	beq.n	8007356 <hanWanFontLoad+0xda>
 8007352:	2202      	movs	r2, #2
 8007354:	e000      	b.n	8007358 <hanWanFontLoad+0xdc>
 8007356:	2200      	movs	r2, #0
 8007358:	4413      	add	r3, r2
 800735a:	b29a      	uxth	r2, r3
 800735c:	4b42      	ldr	r3, [pc, #264]	; (8007468 <hanWanFontLoad+0x1ec>)
 800735e:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <hanWanFontLoad+0x1cc>)
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	4b41      	ldr	r3, [pc, #260]	; (800746c <hanWanFontLoad+0x1f0>)
 8007368:	5c9b      	ldrb	r3, [r3, r2]
 800736a:	b29a      	uxth	r2, r3
 800736c:	4b40      	ldr	r3, [pc, #256]	; (8007470 <hanWanFontLoad+0x1f4>)
 800736e:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8007370:	2300      	movs	r3, #0
 8007372:	81fb      	strh	r3, [r7, #14]
 8007374:	e035      	b.n	80073e2 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8007376:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <hanWanFontLoad+0x1e8>)
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	461a      	mov	r2, r3
 8007386:	4b2f      	ldr	r3, [pc, #188]	; (8007444 <hanWanFontLoad+0x1c8>)
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	441a      	add	r2, r3
 800738c:	89fb      	ldrh	r3, [r7, #14]
 800738e:	4939      	ldr	r1, [pc, #228]	; (8007474 <hanWanFontLoad+0x1f8>)
 8007390:	0152      	lsls	r2, r2, #5
 8007392:	4413      	add	r3, r2
 8007394:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8007398:	89fb      	ldrh	r3, [r7, #14]
 800739a:	b2d1      	uxtb	r1, r2
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	4413      	add	r3, r2
 80073a0:	460a      	mov	r2, r1
 80073a2:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 80073a4:	89fb      	ldrh	r3, [r7, #14]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4413      	add	r3, r2
 80073aa:	7999      	ldrb	r1, [r3, #6]
 80073ac:	4b2e      	ldr	r3, [pc, #184]	; (8007468 <hanWanFontLoad+0x1ec>)
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	2316      	movs	r3, #22
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
 80073b8:	33a0      	adds	r3, #160	; 0xa0
 80073ba:	4a23      	ldr	r2, [pc, #140]	; (8007448 <hanWanFontLoad+0x1cc>)
 80073bc:	8812      	ldrh	r2, [r2, #0]
 80073be:	441a      	add	r2, r3
 80073c0:	89fb      	ldrh	r3, [r7, #14]
 80073c2:	482c      	ldr	r0, [pc, #176]	; (8007474 <hanWanFontLoad+0x1f8>)
 80073c4:	0152      	lsls	r2, r2, #5
 80073c6:	4413      	add	r3, r2
 80073c8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	89fb      	ldrh	r3, [r7, #14]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	b2d1      	uxtb	r1, r2
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	4413      	add	r3, r2
 80073d8:	460a      	mov	r2, r1
 80073da:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	3301      	adds	r3, #1
 80073e0:	81fb      	strh	r3, [r7, #14]
 80073e2:	89fb      	ldrh	r3, [r7, #14]
 80073e4:	2b1f      	cmp	r3, #31
 80073e6:	d9c6      	bls.n	8007376 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 80073e8:	4b18      	ldr	r3, [pc, #96]	; (800744c <hanWanFontLoad+0x1d0>)
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d025      	beq.n	800743c <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80073f0:	2300      	movs	r3, #0
 80073f2:	81fb      	strh	r3, [r7, #14]
 80073f4:	e01f      	b.n	8007436 <hanWanFontLoad+0x1ba>
 80073f6:	89fb      	ldrh	r3, [r7, #14]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	4413      	add	r3, r2
 80073fc:	7999      	ldrb	r1, [r3, #6]
 80073fe:	4b1c      	ldr	r3, [pc, #112]	; (8007470 <hanWanFontLoad+0x1f4>)
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	4613      	mov	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	33f8      	adds	r3, #248	; 0xf8
 800740e:	4a0f      	ldr	r2, [pc, #60]	; (800744c <hanWanFontLoad+0x1d0>)
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	441a      	add	r2, r3
 8007414:	89fb      	ldrh	r3, [r7, #14]
 8007416:	4817      	ldr	r0, [pc, #92]	; (8007474 <hanWanFontLoad+0x1f8>)
 8007418:	0152      	lsls	r2, r2, #5
 800741a:	4413      	add	r3, r2
 800741c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	430a      	orrs	r2, r1
 8007426:	b2d1      	uxtb	r1, r2
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4413      	add	r3, r2
 800742c:	460a      	mov	r2, r1
 800742e:	719a      	strb	r2, [r3, #6]
 8007430:	89fb      	ldrh	r3, [r7, #14]
 8007432:	3301      	adds	r3, #1
 8007434:	81fb      	strh	r3, [r7, #14]
 8007436:	89fb      	ldrh	r3, [r7, #14]
 8007438:	2b1f      	cmp	r3, #31
 800743a:	d9dc      	bls.n	80073f6 <hanWanFontLoad+0x17a>
  }
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	2000d002 	.word	0x2000d002
 8007448:	2000d004 	.word	0x2000d004
 800744c:	2000d006 	.word	0x2000d006
 8007450:	08019204 	.word	0x08019204
 8007454:	08019224 	.word	0x08019224
 8007458:	08019244 	.word	0x08019244
 800745c:	080192dc 	.word	0x080192dc
 8007460:	080192c4 	.word	0x080192c4
 8007464:	2000d008 	.word	0x2000d008
 8007468:	2000d00a 	.word	0x2000d00a
 800746c:	080192f4 	.word	0x080192f4
 8007470:	2000d00c 	.word	0x2000d00c
 8007474:	0801b800 	.word	0x0801b800

08007478 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	031b      	lsls	r3, r3, #12
 8007488:	b21a      	sxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3301      	adds	r3, #1
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	019b      	lsls	r3, r3, #6
 8007492:	b21b      	sxth	r3, r3
 8007494:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8007498:	b21b      	sxth	r3, r3
 800749a:	4313      	orrs	r3, r2
 800749c:	b21a      	sxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3302      	adds	r3, #2
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074aa:	b21b      	sxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b21b      	sxth	r3, r3
 80074b0:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 80074b2:	89bb      	ldrh	r3, [r7, #12]
 80074b4:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80074b8:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 80074ba:	89ba      	ldrh	r2, [r7, #12]
 80074bc:	0893      	lsrs	r3, r2, #2
 80074be:	4973      	ldr	r1, [pc, #460]	; (800768c <hanUniFontLoad+0x214>)
 80074c0:	fba1 3103 	umull	r3, r1, r1, r3
 80074c4:	460b      	mov	r3, r1
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	1a5b      	subs	r3, r3, r1
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	4b6f      	ldr	r3, [pc, #444]	; (8007690 <hanUniFontLoad+0x218>)
 80074d2:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 80074d4:	89bb      	ldrh	r3, [r7, #12]
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	4a6c      	ldr	r2, [pc, #432]	; (800768c <hanUniFontLoad+0x214>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 80074e0:	89b9      	ldrh	r1, [r7, #12]
 80074e2:	4b6c      	ldr	r3, [pc, #432]	; (8007694 <hanUniFontLoad+0x21c>)
 80074e4:	fba3 2301 	umull	r2, r3, r3, r1
 80074e8:	1aca      	subs	r2, r1, r3
 80074ea:	0852      	lsrs	r2, r2, #1
 80074ec:	4413      	add	r3, r2
 80074ee:	091a      	lsrs	r2, r3, #4
 80074f0:	4613      	mov	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4413      	add	r3, r2
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	1ad2      	subs	r2, r2, r3
 80074fa:	1a8b      	subs	r3, r1, r2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	4b66      	ldr	r3, [pc, #408]	; (8007698 <hanUniFontLoad+0x220>)
 8007500:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8007502:	89ba      	ldrh	r2, [r7, #12]
 8007504:	4b63      	ldr	r3, [pc, #396]	; (8007694 <hanUniFontLoad+0x21c>)
 8007506:	fba3 1302 	umull	r1, r3, r3, r2
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	0852      	lsrs	r2, r2, #1
 800750e:	4413      	add	r3, r2
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	b29a      	uxth	r2, r3
 8007514:	4b61      	ldr	r3, [pc, #388]	; (800769c <hanUniFontLoad+0x224>)
 8007516:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8007518:	4b60      	ldr	r3, [pc, #384]	; (800769c <hanUniFontLoad+0x224>)
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	4b60      	ldr	r3, [pc, #384]	; (80076a0 <hanUniFontLoad+0x228>)
 8007520:	5c9b      	ldrb	r3, [r3, r2]
 8007522:	b29a      	uxth	r2, r3
 8007524:	4b5d      	ldr	r3, [pc, #372]	; (800769c <hanUniFontLoad+0x224>)
 8007526:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8007528:	4b5b      	ldr	r3, [pc, #364]	; (8007698 <hanUniFontLoad+0x220>)
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <hanUniFontLoad+0x22c>)
 8007530:	5c9b      	ldrb	r3, [r3, r2]
 8007532:	b29a      	uxth	r2, r3
 8007534:	4b58      	ldr	r3, [pc, #352]	; (8007698 <hanUniFontLoad+0x220>)
 8007536:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8007538:	4b55      	ldr	r3, [pc, #340]	; (8007690 <hanUniFontLoad+0x218>)
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	4b5a      	ldr	r3, [pc, #360]	; (80076a8 <hanUniFontLoad+0x230>)
 8007540:	5c9b      	ldrb	r3, [r3, r2]
 8007542:	b29a      	uxth	r2, r3
 8007544:	4b52      	ldr	r3, [pc, #328]	; (8007690 <hanUniFontLoad+0x218>)
 8007546:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007548:	4b51      	ldr	r3, [pc, #324]	; (8007690 <hanUniFontLoad+0x218>)
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <hanUniFontLoad+0xe6>
 8007550:	4b51      	ldr	r3, [pc, #324]	; (8007698 <hanUniFontLoad+0x220>)
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	4b55      	ldr	r3, [pc, #340]	; (80076ac <hanUniFontLoad+0x234>)
 8007558:	5c9b      	ldrb	r3, [r3, r2]
 800755a:	b29b      	uxth	r3, r3
 800755c:	e005      	b.n	800756a <hanUniFontLoad+0xf2>
 800755e:	4b4e      	ldr	r3, [pc, #312]	; (8007698 <hanUniFontLoad+0x220>)
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	4b52      	ldr	r3, [pc, #328]	; (80076b0 <hanUniFontLoad+0x238>)
 8007566:	5c9b      	ldrb	r3, [r3, r2]
 8007568:	b29b      	uxth	r3, r3
 800756a:	4a52      	ldr	r2, [pc, #328]	; (80076b4 <hanUniFontLoad+0x23c>)
 800756c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800756e:	4b4b      	ldr	r3, [pc, #300]	; (800769c <hanUniFontLoad+0x224>)
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <hanUniFontLoad+0x112>
 8007576:	4b49      	ldr	r3, [pc, #292]	; (800769c <hanUniFontLoad+0x224>)
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d005      	beq.n	800758a <hanUniFontLoad+0x112>
 800757e:	4b47      	ldr	r3, [pc, #284]	; (800769c <hanUniFontLoad+0x224>)
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	2b10      	cmp	r3, #16
 8007584:	d001      	beq.n	800758a <hanUniFontLoad+0x112>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <hanUniFontLoad+0x114>
 800758a:	2300      	movs	r3, #0
 800758c:	b29b      	uxth	r3, r3
 800758e:	4a40      	ldr	r2, [pc, #256]	; (8007690 <hanUniFontLoad+0x218>)
 8007590:	8812      	ldrh	r2, [r2, #0]
 8007592:	2a00      	cmp	r2, #0
 8007594:	d001      	beq.n	800759a <hanUniFontLoad+0x122>
 8007596:	2202      	movs	r2, #2
 8007598:	e000      	b.n	800759c <hanUniFontLoad+0x124>
 800759a:	2200      	movs	r2, #0
 800759c:	4413      	add	r3, r2
 800759e:	b29a      	uxth	r2, r3
 80075a0:	4b45      	ldr	r3, [pc, #276]	; (80076b8 <hanUniFontLoad+0x240>)
 80075a2:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 80075a4:	4b3c      	ldr	r3, [pc, #240]	; (8007698 <hanUniFontLoad+0x220>)
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b44      	ldr	r3, [pc, #272]	; (80076bc <hanUniFontLoad+0x244>)
 80075ac:	5c9b      	ldrb	r3, [r3, r2]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	4b43      	ldr	r3, [pc, #268]	; (80076c0 <hanUniFontLoad+0x248>)
 80075b2:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	81fb      	strh	r3, [r7, #14]
 80075b8:	e035      	b.n	8007626 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <hanUniFontLoad+0x23c>)
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	461a      	mov	r2, r3
 80075ca:	4b34      	ldr	r3, [pc, #208]	; (800769c <hanUniFontLoad+0x224>)
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	441a      	add	r2, r3
 80075d0:	89fb      	ldrh	r3, [r7, #14]
 80075d2:	493c      	ldr	r1, [pc, #240]	; (80076c4 <hanUniFontLoad+0x24c>)
 80075d4:	0152      	lsls	r2, r2, #5
 80075d6:	4413      	add	r3, r2
 80075d8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	b2d1      	uxtb	r1, r2
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	4413      	add	r3, r2
 80075e4:	460a      	mov	r2, r1
 80075e6:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 80075e8:	89fb      	ldrh	r3, [r7, #14]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	7999      	ldrb	r1, [r3, #6]
 80075f0:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <hanUniFontLoad+0x240>)
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	2316      	movs	r3, #22
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	33a0      	adds	r3, #160	; 0xa0
 80075fe:	4a26      	ldr	r2, [pc, #152]	; (8007698 <hanUniFontLoad+0x220>)
 8007600:	8812      	ldrh	r2, [r2, #0]
 8007602:	441a      	add	r2, r3
 8007604:	89fb      	ldrh	r3, [r7, #14]
 8007606:	482f      	ldr	r0, [pc, #188]	; (80076c4 <hanUniFontLoad+0x24c>)
 8007608:	0152      	lsls	r2, r2, #5
 800760a:	4413      	add	r3, r2
 800760c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	89fb      	ldrh	r3, [r7, #14]
 8007614:	430a      	orrs	r2, r1
 8007616:	b2d1      	uxtb	r1, r2
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	4413      	add	r3, r2
 800761c:	460a      	mov	r2, r1
 800761e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	3301      	adds	r3, #1
 8007624:	81fb      	strh	r3, [r7, #14]
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	2b1f      	cmp	r3, #31
 800762a:	d9c6      	bls.n	80075ba <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 800762c:	4b18      	ldr	r3, [pc, #96]	; (8007690 <hanUniFontLoad+0x218>)
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d025      	beq.n	8007680 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8007634:	2300      	movs	r3, #0
 8007636:	81fb      	strh	r3, [r7, #14]
 8007638:	e01f      	b.n	800767a <hanUniFontLoad+0x202>
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	4413      	add	r3, r2
 8007640:	7999      	ldrb	r1, [r3, #6]
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <hanUniFontLoad+0x248>)
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	4613      	mov	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	33f8      	adds	r3, #248	; 0xf8
 8007652:	4a0f      	ldr	r2, [pc, #60]	; (8007690 <hanUniFontLoad+0x218>)
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	441a      	add	r2, r3
 8007658:	89fb      	ldrh	r3, [r7, #14]
 800765a:	481a      	ldr	r0, [pc, #104]	; (80076c4 <hanUniFontLoad+0x24c>)
 800765c:	0152      	lsls	r2, r2, #5
 800765e:	4413      	add	r3, r2
 8007660:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	89fb      	ldrh	r3, [r7, #14]
 8007668:	430a      	orrs	r2, r1
 800766a:	b2d1      	uxtb	r1, r2
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	4413      	add	r3, r2
 8007670:	460a      	mov	r2, r1
 8007672:	719a      	strb	r2, [r3, #6]
 8007674:	89fb      	ldrh	r3, [r7, #14]
 8007676:	3301      	adds	r3, #1
 8007678:	81fb      	strh	r3, [r7, #14]
 800767a:	89fb      	ldrh	r3, [r7, #14]
 800767c:	2b1f      	cmp	r3, #31
 800767e:	d9dc      	bls.n	800763a <hanUniFontLoad+0x1c2>
  }
}
 8007680:	bf00      	nop
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	24924925 	.word	0x24924925
 8007690:	2000d00e 	.word	0x2000d00e
 8007694:	86186187 	.word	0x86186187
 8007698:	2000d010 	.word	0x2000d010
 800769c:	2000d012 	.word	0x2000d012
 80076a0:	08019264 	.word	0x08019264
 80076a4:	08019284 	.word	0x08019284
 80076a8:	080192a4 	.word	0x080192a4
 80076ac:	080192dc 	.word	0x080192dc
 80076b0:	080192c4 	.word	0x080192c4
 80076b4:	2000d014 	.word	0x2000d014
 80076b8:	2000d016 	.word	0x2000d016
 80076bc:	080192f4 	.word	0x080192f4
 80076c0:	2000d018 	.word	0x2000d018
 80076c4:	0801b800 	.word	0x0801b800

080076c8 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 80076d8:	7b7b      	ldrb	r3, [r7, #13]
 80076da:	3b20      	subs	r3, #32
 80076dc:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	81fb      	strh	r3, [r7, #14]
 80076e2:	e00f      	b.n	8007704 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 80076e4:	7b7a      	ldrb	r2, [r7, #13]
 80076e6:	89fb      	ldrh	r3, [r7, #14]
 80076e8:	490b      	ldr	r1, [pc, #44]	; (8007718 <hanEngFontLoad+0x50>)
 80076ea:	0112      	lsls	r2, r2, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80076f2:	89fb      	ldrh	r3, [r7, #14]
 80076f4:	b2d1      	uxtb	r1, r2
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	460a      	mov	r2, r1
 80076fc:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 80076fe:	89fb      	ldrh	r3, [r7, #14]
 8007700:	3301      	adds	r3, #1
 8007702:	81fb      	strh	r3, [r7, #14]
 8007704:	89fb      	ldrh	r3, [r7, #14]
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d9ec      	bls.n	80076e4 <hanEngFontLoad+0x1c>
  }
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	08017a04 	.word	0x08017a04

0800771c <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	0a1b      	lsrs	r3, r3, #8
 800772a:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8007732:	89fb      	ldrh	r3, [r7, #14]
 8007734:	3bb0      	subs	r3, #176	; 0xb0
 8007736:	225e      	movs	r2, #94	; 0x5e
 8007738:	fb03 f202 	mul.w	r2, r3, r2
 800773c:	89bb      	ldrh	r3, [r7, #12]
 800773e:	3ba1      	subs	r3, #161	; 0xa1
 8007740:	4413      	add	r3, r2
 8007742:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8007744:	4a05      	ldr	r2, [pc, #20]	; (800775c <hanCnvCodeWan2Johab+0x40>)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774c:	b29b      	uxth	r3, r3
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	08019340 	.word	0x08019340

08007760 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <TransferDoneISR+0x30>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 800776e:	4b08      	ldr	r3, [pc, #32]	; (8007790 <TransferDoneISR+0x30>)
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007774:	2101      	movs	r1, #1
 8007776:	2002      	movs	r0, #2
 8007778:	f7fb ff5e 	bl	8003638 <gpioPinWrite>

    if (frameCallBack != NULL)
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <TransferDoneISR+0x34>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8007784:	4b03      	ldr	r3, [pc, #12]	; (8007794 <TransferDoneISR+0x34>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4798      	blx	r3
    }
  }
}
 800778a:	bf00      	nop
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	2000d020 	.word	0x2000d020
 8007794:	2000d01c 	.word	0x2000d01c

08007798 <st7735Init>:


bool st7735Init(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 800779e:	f000 f835 	bl	800780c <st7735Reset>
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]

  return ret;
 80077a6:	79fb      	ldrb	r3, [r7, #7]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <st7735InitDriver+0x40>)
 80077bc:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <st7735InitDriver+0x44>)
 80077c2:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <st7735InitDriver+0x48>)
 80077c8:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <st7735InitDriver+0x4c>)
 80077ce:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0b      	ldr	r2, [pc, #44]	; (8007800 <st7735InitDriver+0x50>)
 80077d4:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a0a      	ldr	r2, [pc, #40]	; (8007804 <st7735InitDriver+0x54>)
 80077da:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0a      	ldr	r2, [pc, #40]	; (8007808 <st7735InitDriver+0x58>)
 80077e0:	619a      	str	r2, [r3, #24]
  return true;
 80077e2:	2301      	movs	r3, #1
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	08007799 	.word	0x08007799
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007ad1 	.word	0x08007ad1
 80077fc:	08007885 	.word	0x08007885
 8007800:	08007895 	.word	0x08007895
 8007804:	08007d29 	.word	0x08007d29
 8007808:	08007cdd 	.word	0x08007cdd

0800780c <st7735Reset>:

bool st7735Reset(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <st7735Reset+0x70>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fb52 	bl	8005ec0 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 800781c:	4b17      	ldr	r3, [pc, #92]	; (800787c <st7735Reset+0x70>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fba8 	bl	8005f78 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8007828:	4b14      	ldr	r3, [pc, #80]	; (800787c <st7735Reset+0x70>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	4914      	ldr	r1, [pc, #80]	; (8007880 <st7735Reset+0x74>)
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe fcd8 	bl	80061e4 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8007834:	2100      	movs	r1, #0
 8007836:	2001      	movs	r0, #1
 8007838:	f7fb fefe 	bl	8003638 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 800783c:	2101      	movs	r1, #1
 800783e:	2003      	movs	r0, #3
 8007840:	f7fb fefa 	bl	8003638 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8007844:	2101      	movs	r1, #1
 8007846:	2002      	movs	r0, #2
 8007848:	f7fb fef6 	bl	8003638 <gpioPinWrite>
  delay(10);
 800784c:	200a      	movs	r0, #10
 800784e:	f7f9 fd0f 	bl	8001270 <delay>

  st7735InitRegs();
 8007852:	f000 f863 	bl	800791c <st7735InitRegs>


  st7735SetRotation(1);
 8007856:	2001      	movs	r0, #1
 8007858:	f000 f910 	bl	8007a7c <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 800785c:	2300      	movs	r3, #0
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	22a0      	movs	r2, #160	; 0xa0
 8007864:	2100      	movs	r1, #0
 8007866:	2000      	movs	r0, #0
 8007868:	f000 f97e 	bl	8007b68 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 800786c:	2100      	movs	r1, #0
 800786e:	2001      	movs	r0, #1
 8007870:	f7fb fee2 	bl	8003638 <gpioPinWrite>
  return true;
 8007874:	2301      	movs	r3, #1
}
 8007876:	4618      	mov	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	2000d01a 	.word	0x2000d01a
 8007880:	08007761 	.word	0x08007761

08007884 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8007888:	23a0      	movs	r3, #160	; 0xa0
}
 800788a:	4618      	mov	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8007898:	2380      	movs	r3, #128	; 0x80
}
 800789a:	4618      	mov	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <writecommand>:

void writecommand(uint8_t c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 80078ae:	2100      	movs	r1, #0
 80078b0:	2003      	movs	r0, #3
 80078b2:	f7fb fec1 	bl	8003638 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80078b6:	2100      	movs	r1, #0
 80078b8:	2002      	movs	r0, #2
 80078ba:	f7fb febd 	bl	8003638 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <writecommand+0x38>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	79fa      	ldrb	r2, [r7, #7]
 80078c4:	4611      	mov	r1, r2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fbea 	bl	80060a0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80078cc:	2101      	movs	r1, #1
 80078ce:	2002      	movs	r0, #2
 80078d0:	f7fb feb2 	bl	8003638 <gpioPinWrite>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	2000d01a 	.word	0x2000d01a

080078e0 <writedata>:

void writedata(uint8_t d)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80078ea:	2101      	movs	r1, #1
 80078ec:	2003      	movs	r0, #3
 80078ee:	f7fb fea3 	bl	8003638 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80078f2:	2100      	movs	r1, #0
 80078f4:	2002      	movs	r0, #2
 80078f6:	f7fb fe9f 	bl	8003638 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 80078fa:	4b07      	ldr	r3, [pc, #28]	; (8007918 <writedata+0x38>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	79fa      	ldrb	r2, [r7, #7]
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fbcc 	bl	80060a0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007908:	2101      	movs	r1, #1
 800790a:	2002      	movs	r0, #2
 800790c:	f7fb fe94 	bl	8003638 <gpioPinWrite>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	2000d01a 	.word	0x2000d01a

0800791c <st7735InitRegs>:

void st7735InitRegs(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8007920:	2001      	movs	r0, #1
 8007922:	f7ff ffbf 	bl	80078a4 <writecommand>
  delay(10);
 8007926:	200a      	movs	r0, #10
 8007928:	f7f9 fca2 	bl	8001270 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 800792c:	2011      	movs	r0, #17
 800792e:	f7ff ffb9 	bl	80078a4 <writecommand>
  delay(10);
 8007932:	200a      	movs	r0, #10
 8007934:	f7f9 fc9c 	bl	8001270 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8007938:	20b1      	movs	r0, #177	; 0xb1
 800793a:	f7ff ffb3 	bl	80078a4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800793e:	2001      	movs	r0, #1
 8007940:	f7ff ffce 	bl	80078e0 <writedata>
  writedata(0x2C);
 8007944:	202c      	movs	r0, #44	; 0x2c
 8007946:	f7ff ffcb 	bl	80078e0 <writedata>
  writedata(0x2D);
 800794a:	202d      	movs	r0, #45	; 0x2d
 800794c:	f7ff ffc8 	bl	80078e0 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8007950:	20b2      	movs	r0, #178	; 0xb2
 8007952:	f7ff ffa7 	bl	80078a4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8007956:	2001      	movs	r0, #1
 8007958:	f7ff ffc2 	bl	80078e0 <writedata>
  writedata(0x2C);
 800795c:	202c      	movs	r0, #44	; 0x2c
 800795e:	f7ff ffbf 	bl	80078e0 <writedata>
  writedata(0x2D);
 8007962:	202d      	movs	r0, #45	; 0x2d
 8007964:	f7ff ffbc 	bl	80078e0 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8007968:	20b3      	movs	r0, #179	; 0xb3
 800796a:	f7ff ff9b 	bl	80078a4 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 800796e:	2001      	movs	r0, #1
 8007970:	f7ff ffb6 	bl	80078e0 <writedata>
  writedata(0x2C);
 8007974:	202c      	movs	r0, #44	; 0x2c
 8007976:	f7ff ffb3 	bl	80078e0 <writedata>
  writedata(0x2D);
 800797a:	202d      	movs	r0, #45	; 0x2d
 800797c:	f7ff ffb0 	bl	80078e0 <writedata>
  writedata(0x01);              //     Line inversion mode
 8007980:	2001      	movs	r0, #1
 8007982:	f7ff ffad 	bl	80078e0 <writedata>
  writedata(0x2C);
 8007986:	202c      	movs	r0, #44	; 0x2c
 8007988:	f7ff ffaa 	bl	80078e0 <writedata>
  writedata(0x2D);
 800798c:	202d      	movs	r0, #45	; 0x2d
 800798e:	f7ff ffa7 	bl	80078e0 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8007992:	20b4      	movs	r0, #180	; 0xb4
 8007994:	f7ff ff86 	bl	80078a4 <writecommand>
  writedata(0x07);              //     No inversion
 8007998:	2007      	movs	r0, #7
 800799a:	f7ff ffa1 	bl	80078e0 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 800799e:	20c0      	movs	r0, #192	; 0xc0
 80079a0:	f7ff ff80 	bl	80078a4 <writecommand>
  writedata(0xA2);
 80079a4:	20a2      	movs	r0, #162	; 0xa2
 80079a6:	f7ff ff9b 	bl	80078e0 <writedata>
  writedata(0x02);              //     -4.6V
 80079aa:	2002      	movs	r0, #2
 80079ac:	f7ff ff98 	bl	80078e0 <writedata>
  writedata(0x84);              //     AUTO mode
 80079b0:	2084      	movs	r0, #132	; 0x84
 80079b2:	f7ff ff95 	bl	80078e0 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 80079b6:	20c1      	movs	r0, #193	; 0xc1
 80079b8:	f7ff ff74 	bl	80078a4 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80079bc:	20c5      	movs	r0, #197	; 0xc5
 80079be:	f7ff ff8f 	bl	80078e0 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80079c2:	20c2      	movs	r0, #194	; 0xc2
 80079c4:	f7ff ff6e 	bl	80078a4 <writecommand>
  writedata(0x0A);              //     Opamp current small
 80079c8:	200a      	movs	r0, #10
 80079ca:	f7ff ff89 	bl	80078e0 <writedata>
  writedata(0x00);              //     Boost frequency
 80079ce:	2000      	movs	r0, #0
 80079d0:	f7ff ff86 	bl	80078e0 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 80079d4:	20c3      	movs	r0, #195	; 0xc3
 80079d6:	f7ff ff65 	bl	80078a4 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80079da:	208a      	movs	r0, #138	; 0x8a
 80079dc:	f7ff ff80 	bl	80078e0 <writedata>
  writedata(0x2A);
 80079e0:	202a      	movs	r0, #42	; 0x2a
 80079e2:	f7ff ff7d 	bl	80078e0 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80079e6:	20c4      	movs	r0, #196	; 0xc4
 80079e8:	f7ff ff5c 	bl	80078a4 <writecommand>
  writedata(0x8A);
 80079ec:	208a      	movs	r0, #138	; 0x8a
 80079ee:	f7ff ff77 	bl	80078e0 <writedata>
  writedata(0xEE);
 80079f2:	20ee      	movs	r0, #238	; 0xee
 80079f4:	f7ff ff74 	bl	80078e0 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 80079f8:	20c5      	movs	r0, #197	; 0xc5
 80079fa:	f7ff ff53 	bl	80078a4 <writecommand>
  writedata(0x0E);
 80079fe:	200e      	movs	r0, #14
 8007a00:	f7ff ff6e 	bl	80078e0 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8007a04:	2020      	movs	r0, #32
 8007a06:	f7ff ff4d 	bl	80078a4 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8007a0a:	2036      	movs	r0, #54	; 0x36
 8007a0c:	f7ff ff4a 	bl	80078a4 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8007a10:	20c8      	movs	r0, #200	; 0xc8
 8007a12:	f7ff ff65 	bl	80078e0 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8007a16:	203a      	movs	r0, #58	; 0x3a
 8007a18:	f7ff ff44 	bl	80078a4 <writecommand>
  writedata(0x05);              //     16-bit color
 8007a1c:	2005      	movs	r0, #5
 8007a1e:	f7ff ff5f 	bl	80078e0 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8007a22:	202a      	movs	r0, #42	; 0x2a
 8007a24:	f7ff ff3e 	bl	80078a4 <writecommand>
  writedata(0x00);
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7ff ff59 	bl	80078e0 <writedata>
  writedata(0x00);              //     XSTART = 0
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f7ff ff56 	bl	80078e0 <writedata>
  writedata(0x00);
 8007a34:	2000      	movs	r0, #0
 8007a36:	f7ff ff53 	bl	80078e0 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8007a3a:	209f      	movs	r0, #159	; 0x9f
 8007a3c:	f7ff ff50 	bl	80078e0 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8007a40:	202b      	movs	r0, #43	; 0x2b
 8007a42:	f7ff ff2f 	bl	80078a4 <writecommand>
  writedata(0x00);
 8007a46:	2000      	movs	r0, #0
 8007a48:	f7ff ff4a 	bl	80078e0 <writedata>
  writedata(0x00);              //     XSTART = 0
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f7ff ff47 	bl	80078e0 <writedata>
  writedata(0x00);
 8007a52:	2000      	movs	r0, #0
 8007a54:	f7ff ff44 	bl	80078e0 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8007a58:	207f      	movs	r0, #127	; 0x7f
 8007a5a:	f7ff ff41 	bl	80078e0 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8007a5e:	2013      	movs	r0, #19
 8007a60:	f7ff ff20 	bl	80078a4 <writecommand>
  delay(10);
 8007a64:	200a      	movs	r0, #10
 8007a66:	f7f9 fc03 	bl	8001270 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8007a6a:	2029      	movs	r0, #41	; 0x29
 8007a6c:	f7ff ff1a 	bl	80078a4 <writecommand>
  delay(10);
 8007a70:	200a      	movs	r0, #10
 8007a72:	f7f9 fbfd 	bl	8001270 <delay>
}
 8007a76:	bf00      	nop
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8007a86:	2036      	movs	r0, #54	; 0x36
 8007a88:	f7ff ff0c 	bl	80078a4 <writecommand>

  switch (mode)
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d81a      	bhi.n	8007ac8 <st7735SetRotation+0x4c>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <st7735SetRotation+0x1c>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ab9 	.word	0x08007ab9
 8007aa4:	08007ac1 	.word	0x08007ac1
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8007aa8:	20c0      	movs	r0, #192	; 0xc0
 8007aaa:	f7ff ff19 	bl	80078e0 <writedata>
     break;
 8007aae:	e00b      	b.n	8007ac8 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8007ab0:	20a0      	movs	r0, #160	; 0xa0
 8007ab2:	f7ff ff15 	bl	80078e0 <writedata>
     break;
 8007ab6:	e007      	b.n	8007ac8 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f7ff ff11 	bl	80078e0 <writedata>
    break;
 8007abe:	e003      	b.n	8007ac8 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8007ac0:	2060      	movs	r0, #96	; 0x60
 8007ac2:	f7ff ff0d 	bl	80078e0 <writedata>
     break;
 8007ac6:	bf00      	nop
  }
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8007ade:	4b21      	ldr	r3, [pc, #132]	; (8007b64 <st7735SetWindow+0x94>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2108      	movs	r1, #8
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe faab 	bl	8006040 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8007aea:	202a      	movs	r0, #42	; 0x2a
 8007aec:	f7ff feda 	bl	80078a4 <writecommand>
  writedata(0x00);
 8007af0:	2000      	movs	r0, #0
 8007af2:	f7ff fef5 	bl	80078e0 <writedata>
  writedata(x0+colstart);     // XSTART
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	4413      	add	r3, r2
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff feec 	bl	80078e0 <writedata>
  writedata(0x00);
 8007b08:	2000      	movs	r0, #0
 8007b0a:	f7ff fee9 	bl	80078e0 <writedata>
  writedata(x1+colstart);     // XEND
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	2300      	movs	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fee0 	bl	80078e0 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8007b20:	202b      	movs	r0, #43	; 0x2b
 8007b22:	f7ff febf 	bl	80078a4 <writecommand>
  writedata(0x00);
 8007b26:	2000      	movs	r0, #0
 8007b28:	f7ff feda 	bl	80078e0 <writedata>
  writedata(y0+rowstart);     // YSTART
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	2300      	movs	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fed1 	bl	80078e0 <writedata>
  writedata(0x00);
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7ff fece 	bl	80078e0 <writedata>
  writedata(y1+rowstart);     // YEND
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	2300      	movs	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fec5 	bl	80078e0 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8007b56:	202c      	movs	r0, #44	; 0x2c
 8007b58:	f7ff fea4 	bl	80078a4 <writecommand>
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	2000d01a 	.word	0x2000d01a

08007b68 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8007b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	b089      	sub	sp, #36	; 0x24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	466b      	mov	r3, sp
 8007b7a:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	1e4b      	subs	r3, r1, #1
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	460a      	mov	r2, r1
 8007b84:	2300      	movs	r3, #0
 8007b86:	4690      	mov	r8, r2
 8007b88:	4699      	mov	r9, r3
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8007b96:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8007b9a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8007b9e:	460a      	mov	r2, r1
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4614      	mov	r4, r2
 8007ba4:	461d      	mov	r5, r3
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	012b      	lsls	r3, r5, #4
 8007bb0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8007bb4:	0122      	lsls	r2, r4, #4
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	3307      	adds	r3, #7
 8007bbc:	08db      	lsrs	r3, r3, #3
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	ebad 0d03 	sub.w	sp, sp, r3
 8007bc4:	466b      	mov	r3, sp
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	085b      	lsrs	r3, r3, #1
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 8007bce:	22a0      	movs	r2, #160	; 0xa0
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	da78      	bge.n	8007cc8 <st7735FillRect+0x160>
 8007bd6:	2280      	movs	r2, #128	; 0x80
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	da74      	bge.n	8007cc8 <st7735FillRect+0x160>

  if (x < 0) { w += x; x = 0; }
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	da05      	bge.n	8007bf0 <st7735FillRect+0x88>
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da05      	bge.n	8007c02 <st7735FillRect+0x9a>
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	603b      	str	r3, [r7, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4413      	add	r3, r2
 8007c08:	22a0      	movs	r2, #160	; 0xa0
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	dd03      	ble.n	8007c16 <st7735FillRect+0xae>
 8007c0e:	22a0      	movs	r2, #160	; 0xa0
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	2280      	movs	r2, #128	; 0x80
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	dd03      	ble.n	8007c2a <st7735FillRect+0xc2>
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dd4d      	ble.n	8007ccc <st7735FillRect+0x164>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd4a      	ble.n	8007ccc <st7735FillRect+0x164>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	1e59      	subs	r1, r3, #1
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	4413      	add	r3, r2
 8007c44:	3b01      	subs	r3, #1
 8007c46:	460a      	mov	r2, r1
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff ff40 	bl	8007ad0 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8007c50:	4b21      	ldr	r3, [pc, #132]	; (8007cd8 <st7735FillRect+0x170>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2110      	movs	r1, #16
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe f9f2 	bl	8006040 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	2003      	movs	r0, #3
 8007c60:	f7fb fcea 	bl	8003638 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007c64:	2100      	movs	r1, #0
 8007c66:	2002      	movs	r0, #2
 8007c68:	f7fb fce6 	bl	8003638 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e008      	b.n	8007c84 <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 8007c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c74:	b299      	uxth	r1, r3
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	3301      	adds	r3, #1
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	dbf2      	blt.n	8007c72 <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	e00e      	b.n	8007cb0 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	230a      	movs	r3, #10
 8007c96:	6939      	ldr	r1, [r7, #16]
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f7fe fa53 	bl	8006144 <spiDmaTxTransfer>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f083 0301 	eor.w	r3, r3, #1
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d107      	bne.n	8007cba <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	3301      	adds	r3, #1
 8007cae:	61bb      	str	r3, [r7, #24]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	dbec      	blt.n	8007c92 <st7735FillRect+0x12a>
 8007cb8:	e000      	b.n	8007cbc <st7735FillRect+0x154>
    {
      break;
 8007cba:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	2002      	movs	r0, #2
 8007cc0:	f7fb fcba 	bl	8003638 <gpioPinWrite>
 8007cc4:	46b5      	mov	sp, r6
 8007cc6:	e003      	b.n	8007cd0 <st7735FillRect+0x168>
  if ((x >= _width) || (y >= _height)) return;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <st7735FillRect+0x166>
  if ((w < 1) || (h < 1)) return;
 8007ccc:	bf00      	nop
 8007cce:	46b5      	mov	sp, r6
}
 8007cd0:	3724      	adds	r7, #36	; 0x24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cd8:	2000d01a 	.word	0x2000d01a

08007cdc <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <st7735SendBuffer+0x44>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <st7735SendBuffer+0x48>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2110      	movs	r1, #16
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe f9a3 	bl	8006040 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	f7fb fc9b 	bl	8003638 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007d02:	2100      	movs	r1, #0
 8007d04:	2002      	movs	r0, #2
 8007d06:	f7fb fc97 	bl	8003638 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	2000      	movs	r0, #0
 8007d12:	f7fe fa17 	bl	8006144 <spiDmaTxTransfer>
  return true;
 8007d16:	2301      	movs	r3, #1
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	2000d020 	.word	0x2000d020
 8007d24:	2000d01a 	.word	0x2000d01a

08007d28 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8007d30:	4a04      	ldr	r2, [pc, #16]	; (8007d44 <st7735SetCallBack+0x1c>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]

  return true;
 8007d36:	2301      	movs	r3, #1
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	2000d01c 	.word	0x2000d01c

08007d48 <hwInit>:




void hwInit(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  bspInit();
 8007d4c:	f7f9 fa66 	bl	800121c <bspInit>

  cliInit();
 8007d50:	f7f9 fefa 	bl	8001b48 <cliInit>
  ledInit();
 8007d54:	f7fc fd08 	bl	8004768 <ledInit>
  uartInit();
 8007d58:	f7fe fd96 	bl	8006888 <uartInit>
  spiInit();
 8007d5c:	f7fe f85e 	bl	8005e1c <spiInit>
  DWT_Delay_Init();
 8007d60:	f7f9 fd3c 	bl	80017dc <DWT_Delay_Init>
  buttonInit();
 8007d64:	f7f9 fd6a 	bl	800183c <buttonInit>
  gpioInit();
 8007d68:	f7fb fb9c 	bl	80034a4 <gpioInit>
  Ds18b20_Init();
 8007d6c:	f7fa fe36 	bl	80029dc <Ds18b20_Init>
  sonarInit();
 8007d70:	f7fd fe80 	bl	8005a74 <sonarInit>

  //LCD_INIT();
  lcdInit();
 8007d74:	f7fb fdc2 	bl	80038fc <lcdInit>
  tdsInit();
 8007d78:	f7fe fb4a 	bl	8006410 <tdsInit>

  if (sdInit() == true)
 8007d7c:	f7fd fa60 	bl	8005240 <sdInit>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <hwInit+0x42>
  {
    fatfsInit();
 8007d86:	f7fb f98f 	bl	80030a8 <fatfsInit>
  }

  menuInit();
 8007d8a:	f7fc fddb 	bl	8004944 <menuInit>
}
 8007d8e:	bf00      	nop
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <disk_status+0x30>)
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	79fa      	ldrb	r2, [r7, #7]
 8007dac:	4905      	ldr	r1, [pc, #20]	; (8007dc4 <disk_status+0x30>)
 8007dae:	440a      	add	r2, r1
 8007db0:	7b12      	ldrb	r2, [r2, #12]
 8007db2:	4610      	mov	r0, r2
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	2000d050 	.word	0x2000d050

08007dc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	4a0d      	ldr	r2, [pc, #52]	; (8007e10 <disk_initialize+0x48>)
 8007dda:	5cd3      	ldrb	r3, [r2, r3]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d111      	bne.n	8007e04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	4a0b      	ldr	r2, [pc, #44]	; (8007e10 <disk_initialize+0x48>)
 8007de4:	2101      	movs	r1, #1
 8007de6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <disk_initialize+0x48>)
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	79fa      	ldrb	r2, [r7, #7]
 8007df6:	4906      	ldr	r1, [pc, #24]	; (8007e10 <disk_initialize+0x48>)
 8007df8:	440a      	add	r2, r1
 8007dfa:	7b12      	ldrb	r2, [r2, #12]
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	2000d050 	.word	0x2000d050

08007e14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <disk_read+0x3c>)
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	689c      	ldr	r4, [r3, #8]
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	4a07      	ldr	r2, [pc, #28]	; (8007e50 <disk_read+0x3c>)
 8007e34:	4413      	add	r3, r2
 8007e36:	7b18      	ldrb	r0, [r3, #12]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	47a0      	blx	r4
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd90      	pop	{r4, r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	2000d050 	.word	0x2000d050

08007e54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <disk_write+0x3c>)
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68dc      	ldr	r4, [r3, #12]
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4a07      	ldr	r2, [pc, #28]	; (8007e90 <disk_write+0x3c>)
 8007e74:	4413      	add	r3, r2
 8007e76:	7b18      	ldrb	r0, [r3, #12]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	47a0      	blx	r4
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd90      	pop	{r4, r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	2000d050 	.word	0x2000d050

08007e94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	603a      	str	r2, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <disk_ioctl+0x38>)
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	79fa      	ldrb	r2, [r7, #7]
 8007eb2:	4906      	ldr	r1, [pc, #24]	; (8007ecc <disk_ioctl+0x38>)
 8007eb4:	440a      	add	r2, r1
 8007eb6:	7b10      	ldrb	r0, [r2, #12]
 8007eb8:	79b9      	ldrb	r1, [r7, #6]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	4798      	blx	r3
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	2000d050 	.word	0x2000d050

08007ed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  return 0;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3301      	adds	r3, #1
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b21a      	sxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	4313      	orrs	r3, r2
 8007efe:	b21b      	sxth	r3, r3
 8007f00:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f02:	89fb      	ldrh	r3, [r7, #14]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3303      	adds	r3, #3
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	3202      	adds	r2, #2
 8007f28:	7812      	ldrb	r2, [r2, #0]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	3201      	adds	r2, #1
 8007f36:	7812      	ldrb	r2, [r2, #0]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7812      	ldrb	r2, [r2, #0]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f48:	68fb      	ldr	r3, [r7, #12]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	887a      	ldrh	r2, [r7, #2]
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	887a      	ldrh	r2, [r7, #2]
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	0a1b      	lsrs	r3, r3, #8
 8007fa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00d      	beq.n	800801a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	1c53      	adds	r3, r2, #1
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	1c59      	adds	r1, r3, #1
 8008008:	6179      	str	r1, [r7, #20]
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3b01      	subs	r3, #1
 8008012:	607b      	str	r3, [r7, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f1      	bne.n	8007ffe <mem_cpy+0x1a>
	}
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	617a      	str	r2, [r7, #20]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3b01      	subs	r3, #1
 8008046:	607b      	str	r3, [r7, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f3      	bne.n	8008036 <mem_set+0x10>
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800805c:	b480      	push	{r7}
 800805e:	b089      	sub	sp, #36	; 0x24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	61fa      	str	r2, [r7, #28]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	61ba      	str	r2, [r7, #24]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	1acb      	subs	r3, r1, r3
 8008088:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3b01      	subs	r3, #1
 800808e:	607b      	str	r3, [r7, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <mem_cmp+0x40>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0eb      	beq.n	8008074 <mem_cmp+0x18>

	return r;
 800809c:	697b      	ldr	r3, [r7, #20]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3724      	adds	r7, #36	; 0x24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80080b4:	e002      	b.n	80080bc <chk_chr+0x12>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3301      	adds	r3, #1
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <chk_chr+0x26>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d1f2      	bne.n	80080b6 <chk_chr+0xc>
	return *str;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	781b      	ldrb	r3, [r3, #0]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	e029      	b.n	8008148 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80080f4:	4a27      	ldr	r2, [pc, #156]	; (8008194 <chk_lock+0xb4>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	4413      	add	r3, r2
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01d      	beq.n	800813e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008102:	4a24      	ldr	r2, [pc, #144]	; (8008194 <chk_lock+0xb4>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	4413      	add	r3, r2
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d116      	bne.n	8008142 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008114:	4a1f      	ldr	r2, [pc, #124]	; (8008194 <chk_lock+0xb4>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	4413      	add	r3, r2
 800811c:	3304      	adds	r3, #4
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008124:	429a      	cmp	r2, r3
 8008126:	d10c      	bne.n	8008142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008128:	4a1a      	ldr	r2, [pc, #104]	; (8008194 <chk_lock+0xb4>)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	4413      	add	r3, r2
 8008130:	3308      	adds	r3, #8
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008138:	429a      	cmp	r2, r3
 800813a:	d102      	bne.n	8008142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800813c:	e007      	b.n	800814e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800813e:	2301      	movs	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d9d2      	bls.n	80080f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d109      	bne.n	8008168 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <chk_lock+0x80>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d101      	bne.n	8008164 <chk_lock+0x84>
 8008160:	2300      	movs	r3, #0
 8008162:	e010      	b.n	8008186 <chk_lock+0xa6>
 8008164:	2312      	movs	r3, #18
 8008166:	e00e      	b.n	8008186 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d108      	bne.n	8008180 <chk_lock+0xa0>
 800816e:	4a09      	ldr	r2, [pc, #36]	; (8008194 <chk_lock+0xb4>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	4413      	add	r3, r2
 8008176:	330c      	adds	r3, #12
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817e:	d101      	bne.n	8008184 <chk_lock+0xa4>
 8008180:	2310      	movs	r3, #16
 8008182:	e000      	b.n	8008186 <chk_lock+0xa6>
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000d030 	.word	0x2000d030

08008198 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800819e:	2300      	movs	r3, #0
 80081a0:	607b      	str	r3, [r7, #4]
 80081a2:	e002      	b.n	80081aa <enq_lock+0x12>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d806      	bhi.n	80081be <enq_lock+0x26>
 80081b0:	4a09      	ldr	r2, [pc, #36]	; (80081d8 <enq_lock+0x40>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	4413      	add	r3, r2
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f2      	bne.n	80081a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	bf14      	ite	ne
 80081c4:	2301      	movne	r3, #1
 80081c6:	2300      	moveq	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	2000d030 	.word	0x2000d030

080081dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	e01f      	b.n	800822c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80081ec:	4a41      	ldr	r2, [pc, #260]	; (80082f4 <inc_lock+0x118>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	4413      	add	r3, r2
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d113      	bne.n	8008226 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80081fe:	4a3d      	ldr	r2, [pc, #244]	; (80082f4 <inc_lock+0x118>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	4413      	add	r3, r2
 8008206:	3304      	adds	r3, #4
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800820e:	429a      	cmp	r2, r3
 8008210:	d109      	bne.n	8008226 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008212:	4a38      	ldr	r2, [pc, #224]	; (80082f4 <inc_lock+0x118>)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	4413      	add	r3, r2
 800821a:	3308      	adds	r3, #8
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008222:	429a      	cmp	r2, r3
 8008224:	d006      	beq.n	8008234 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3301      	adds	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d9dc      	bls.n	80081ec <inc_lock+0x10>
 8008232:	e000      	b.n	8008236 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008234:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d132      	bne.n	80082a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e002      	b.n	8008248 <inc_lock+0x6c>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3301      	adds	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d806      	bhi.n	800825c <inc_lock+0x80>
 800824e:	4a29      	ldr	r2, [pc, #164]	; (80082f4 <inc_lock+0x118>)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	4413      	add	r3, r2
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f2      	bne.n	8008242 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d101      	bne.n	8008266 <inc_lock+0x8a>
 8008262:	2300      	movs	r3, #0
 8008264:	e040      	b.n	80082e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4922      	ldr	r1, [pc, #136]	; (80082f4 <inc_lock+0x118>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	440b      	add	r3, r1
 8008272:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	491e      	ldr	r1, [pc, #120]	; (80082f4 <inc_lock+0x118>)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	440b      	add	r3, r1
 8008280:	3304      	adds	r3, #4
 8008282:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695a      	ldr	r2, [r3, #20]
 8008288:	491a      	ldr	r1, [pc, #104]	; (80082f4 <inc_lock+0x118>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	440b      	add	r3, r1
 8008290:	3308      	adds	r3, #8
 8008292:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008294:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <inc_lock+0x118>)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	4413      	add	r3, r2
 800829c:	330c      	adds	r3, #12
 800829e:	2200      	movs	r2, #0
 80082a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d009      	beq.n	80082bc <inc_lock+0xe0>
 80082a8:	4a12      	ldr	r2, [pc, #72]	; (80082f4 <inc_lock+0x118>)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	4413      	add	r3, r2
 80082b0:	330c      	adds	r3, #12
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <inc_lock+0xe0>
 80082b8:	2300      	movs	r3, #0
 80082ba:	e015      	b.n	80082e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d108      	bne.n	80082d4 <inc_lock+0xf8>
 80082c2:	4a0c      	ldr	r2, [pc, #48]	; (80082f4 <inc_lock+0x118>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	4413      	add	r3, r2
 80082ca:	330c      	adds	r3, #12
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	e001      	b.n	80082d8 <inc_lock+0xfc>
 80082d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082d8:	4906      	ldr	r1, [pc, #24]	; (80082f4 <inc_lock+0x118>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	440b      	add	r3, r1
 80082e0:	330c      	adds	r3, #12
 80082e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	2000d030 	.word	0x2000d030

080082f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3b01      	subs	r3, #1
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d825      	bhi.n	8008358 <dec_lock+0x60>
		n = Files[i].ctr;
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <dec_lock+0x74>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	4413      	add	r3, r2
 8008314:	330c      	adds	r3, #12
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800831a:	89fb      	ldrh	r3, [r7, #14]
 800831c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008320:	d101      	bne.n	8008326 <dec_lock+0x2e>
 8008322:	2300      	movs	r3, #0
 8008324:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008326:	89fb      	ldrh	r3, [r7, #14]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <dec_lock+0x3a>
 800832c:	89fb      	ldrh	r3, [r7, #14]
 800832e:	3b01      	subs	r3, #1
 8008330:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008332:	4a0e      	ldr	r2, [pc, #56]	; (800836c <dec_lock+0x74>)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	4413      	add	r3, r2
 800833a:	330c      	adds	r3, #12
 800833c:	89fa      	ldrh	r2, [r7, #14]
 800833e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008340:	89fb      	ldrh	r3, [r7, #14]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d105      	bne.n	8008352 <dec_lock+0x5a>
 8008346:	4a09      	ldr	r2, [pc, #36]	; (800836c <dec_lock+0x74>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	4413      	add	r3, r2
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	737b      	strb	r3, [r7, #13]
 8008356:	e001      	b.n	800835c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008358:	2302      	movs	r3, #2
 800835a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800835c:	7b7b      	ldrb	r3, [r7, #13]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	2000d030 	.word	0x2000d030

08008370 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e010      	b.n	80083a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800837e:	4a0d      	ldr	r2, [pc, #52]	; (80083b4 <clear_lock+0x44>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	4413      	add	r3, r2
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d105      	bne.n	800839a <clear_lock+0x2a>
 800838e:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <clear_lock+0x44>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	4413      	add	r3, r2
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d9eb      	bls.n	800837e <clear_lock+0xe>
	}
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	2000d030 	.word	0x2000d030

080083b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	78db      	ldrb	r3, [r3, #3]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d034      	beq.n	8008436 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7858      	ldrb	r0, [r3, #1]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083dc:	2301      	movs	r3, #1
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	f7ff fd38 	bl	8007e54 <disk_write>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	e022      	b.n	8008436 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	1ad2      	subs	r2, r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	429a      	cmp	r2, r3
 8008404:	d217      	bcs.n	8008436 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	789b      	ldrb	r3, [r3, #2]
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	e010      	b.n	8008430 <sync_window+0x78>
					wsect += fs->fsize;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4413      	add	r3, r2
 8008416:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7858      	ldrb	r0, [r3, #1]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008422:	2301      	movs	r3, #1
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	f7ff fd15 	bl	8007e54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3b01      	subs	r3, #1
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d8eb      	bhi.n	800840e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d01b      	beq.n	8008490 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ffad 	bl	80083b8 <sync_window>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d113      	bne.n	8008490 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7858      	ldrb	r0, [r3, #1]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008472:	2301      	movs	r3, #1
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	f7ff fccd 	bl	8007e14 <disk_read>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008480:	f04f 33ff 	mov.w	r3, #4294967295
 8008484:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff ff87 	bl	80083b8 <sync_window>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d158      	bne.n	8008566 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d148      	bne.n	800854e <sync_fs+0xb2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	791b      	ldrb	r3, [r3, #4]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d144      	bne.n	800854e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3334      	adds	r3, #52	; 0x34
 80084c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fda9 	bl	8008026 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3334      	adds	r3, #52	; 0x34
 80084d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fd38 	bl	8007f56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3334      	adds	r3, #52	; 0x34
 80084ea:	4921      	ldr	r1, [pc, #132]	; (8008570 <sync_fs+0xd4>)
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff fd4d 	bl	8007f8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3334      	adds	r3, #52	; 0x34
 80084f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80084fa:	491e      	ldr	r1, [pc, #120]	; (8008574 <sync_fs+0xd8>)
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff fd45 	bl	8007f8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3334      	adds	r3, #52	; 0x34
 8008506:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7ff fd3b 	bl	8007f8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3334      	adds	r3, #52	; 0x34
 800851a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7ff fd31 	bl	8007f8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	7858      	ldrb	r0, [r3, #1]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008542:	2301      	movs	r3, #1
 8008544:	f7ff fc86 	bl	8007e54 <disk_write>
			fs->fsi_flag = 0;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fc9c 	bl	8007e94 <disk_ioctl>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <sync_fs+0xca>
 8008562:	2301      	movs	r3, #1
 8008564:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	41615252 	.word	0x41615252
 8008574:	61417272 	.word	0x61417272

08008578 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	3b02      	subs	r3, #2
 8008586:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	3b02      	subs	r3, #2
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d301      	bcc.n	8008598 <clust2sect+0x20>
 8008594:	2300      	movs	r3, #0
 8008596:	e008      	b.n	80085aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	895b      	ldrh	r3, [r3, #10]
 800859c:	461a      	mov	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	fb03 f202 	mul.w	r2, r3, r2
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4413      	add	r3, r2
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d904      	bls.n	80085d6 <get_fat+0x20>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80085d6:	2301      	movs	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e08f      	b.n	80086fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d062      	beq.n	80086b0 <get_fat+0xfa>
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	dc7c      	bgt.n	80086e8 <get_fat+0x132>
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d002      	beq.n	80085f8 <get_fat+0x42>
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d042      	beq.n	800867c <get_fat+0xc6>
 80085f6:	e077      	b.n	80086e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	0a5b      	lsrs	r3, r3, #9
 800860e:	4413      	add	r3, r2
 8008610:	4619      	mov	r1, r3
 8008612:	6938      	ldr	r0, [r7, #16]
 8008614:	f7ff ff14 	bl	8008440 <move_window>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d167      	bne.n	80086ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	60fa      	str	r2, [r7, #12]
 8008624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4413      	add	r3, r2
 800862c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008630:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	0a5b      	lsrs	r3, r3, #9
 800863a:	4413      	add	r3, r2
 800863c:	4619      	mov	r1, r3
 800863e:	6938      	ldr	r0, [r7, #16]
 8008640:	f7ff fefe 	bl	8008440 <move_window>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d153      	bne.n	80086f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	4413      	add	r3, r2
 8008654:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	461a      	mov	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4313      	orrs	r3, r2
 8008660:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <get_fat+0xbc>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	091b      	lsrs	r3, r3, #4
 8008670:	e002      	b.n	8008678 <get_fat+0xc2>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008678:	617b      	str	r3, [r7, #20]
			break;
 800867a:	e03f      	b.n	80086fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	4413      	add	r3, r2
 8008686:	4619      	mov	r1, r3
 8008688:	6938      	ldr	r0, [r7, #16]
 800868a:	f7ff fed9 	bl	8008440 <move_window>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d130      	bne.n	80086f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80086a2:	4413      	add	r3, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff fc1b 	bl	8007ee0 <ld_word>
 80086aa:	4603      	mov	r3, r0
 80086ac:	617b      	str	r3, [r7, #20]
			break;
 80086ae:	e025      	b.n	80086fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	09db      	lsrs	r3, r3, #7
 80086b8:	4413      	add	r3, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	6938      	ldr	r0, [r7, #16]
 80086be:	f7ff febf 	bl	8008440 <move_window>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d118      	bne.n	80086fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086d6:	4413      	add	r3, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fc19 	bl	8007f10 <ld_dword>
 80086de:	4603      	mov	r3, r0
 80086e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80086e4:	617b      	str	r3, [r7, #20]
			break;
 80086e6:	e009      	b.n	80086fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80086e8:	2301      	movs	r3, #1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e006      	b.n	80086fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086ee:	bf00      	nop
 80086f0:	e004      	b.n	80086fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086f2:	bf00      	nop
 80086f4:	e002      	b.n	80086fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086fa:	bf00      	nop
		}
	}

	return val;
 80086fc:	697b      	ldr	r3, [r7, #20]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008706:	b590      	push	{r4, r7, lr}
 8008708:	b089      	sub	sp, #36	; 0x24
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008712:	2302      	movs	r3, #2
 8008714:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b01      	cmp	r3, #1
 800871a:	f240 80d2 	bls.w	80088c2 <put_fat+0x1bc>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	429a      	cmp	r2, r3
 8008726:	f080 80cc 	bcs.w	80088c2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b03      	cmp	r3, #3
 8008730:	f000 8096 	beq.w	8008860 <put_fat+0x15a>
 8008734:	2b03      	cmp	r3, #3
 8008736:	f300 80cd 	bgt.w	80088d4 <put_fat+0x1ce>
 800873a:	2b01      	cmp	r3, #1
 800873c:	d002      	beq.n	8008744 <put_fat+0x3e>
 800873e:	2b02      	cmp	r3, #2
 8008740:	d06e      	beq.n	8008820 <put_fat+0x11a>
 8008742:	e0c7      	b.n	80088d4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	61bb      	str	r3, [r7, #24]
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	4413      	add	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	0a5b      	lsrs	r3, r3, #9
 800875a:	4413      	add	r3, r2
 800875c:	4619      	mov	r1, r3
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fe6e 	bl	8008440 <move_window>
 8008764:	4603      	mov	r3, r0
 8008766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008768:	7ffb      	ldrb	r3, [r7, #31]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 80ab 	bne.w	80088c6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	1c59      	adds	r1, r3, #1
 800877a:	61b9      	str	r1, [r7, #24]
 800877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008780:	4413      	add	r3, r2
 8008782:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <put_fat+0xa4>
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	b25b      	sxtb	r3, r3
 8008794:	f003 030f 	and.w	r3, r3, #15
 8008798:	b25a      	sxtb	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	b25b      	sxtb	r3, r3
 80087a2:	4313      	orrs	r3, r2
 80087a4:	b25b      	sxtb	r3, r3
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	e001      	b.n	80087ae <put_fat+0xa8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	0a5b      	lsrs	r3, r3, #9
 80087c0:	4413      	add	r3, r2
 80087c2:	4619      	mov	r1, r3
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fe3b 	bl	8008440 <move_window>
 80087ca:	4603      	mov	r3, r0
 80087cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087ce:	7ffb      	ldrb	r3, [r7, #31]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d17a      	bne.n	80088ca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e0:	4413      	add	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <put_fat+0xf0>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	091b      	lsrs	r3, r3, #4
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	e00e      	b.n	8008814 <put_fat+0x10e>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b25b      	sxtb	r3, r3
 80087fc:	f023 030f 	bic.w	r3, r3, #15
 8008800:	b25a      	sxtb	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	0a1b      	lsrs	r3, r3, #8
 8008806:	b25b      	sxtb	r3, r3
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	b25b      	sxtb	r3, r3
 800880e:	4313      	orrs	r3, r2
 8008810:	b25b      	sxtb	r3, r3
 8008812:	b2db      	uxtb	r3, r3
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	70da      	strb	r2, [r3, #3]
			break;
 800881e:	e059      	b.n	80088d4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	0a1b      	lsrs	r3, r3, #8
 8008828:	4413      	add	r3, r2
 800882a:	4619      	mov	r1, r3
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff fe07 	bl	8008440 <move_window>
 8008832:	4603      	mov	r3, r0
 8008834:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008836:	7ffb      	ldrb	r3, [r7, #31]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d148      	bne.n	80088ce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800884a:	4413      	add	r3, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	b292      	uxth	r2, r2
 8008850:	4611      	mov	r1, r2
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff fb7f 	bl	8007f56 <st_word>
			fs->wflag = 1;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	70da      	strb	r2, [r3, #3]
			break;
 800885e:	e039      	b.n	80088d4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	09db      	lsrs	r3, r3, #7
 8008868:	4413      	add	r3, r2
 800886a:	4619      	mov	r1, r3
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fde7 	bl	8008440 <move_window>
 8008872:	4603      	mov	r3, r0
 8008874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008876:	7ffb      	ldrb	r3, [r7, #31]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d12a      	bne.n	80088d2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008890:	4413      	add	r3, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fb3c 	bl	8007f10 <ld_dword>
 8008898:	4603      	mov	r3, r0
 800889a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800889e:	4323      	orrs	r3, r4
 80088a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088b0:	4413      	add	r3, r2
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fb69 	bl	8007f8c <st_dword>
			fs->wflag = 1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	70da      	strb	r2, [r3, #3]
			break;
 80088c0:	e008      	b.n	80088d4 <put_fat+0x1ce>
		}
	}
 80088c2:	bf00      	nop
 80088c4:	e006      	b.n	80088d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80088c6:	bf00      	nop
 80088c8:	e004      	b.n	80088d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80088ca:	bf00      	nop
 80088cc:	e002      	b.n	80088d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80088ce:	bf00      	nop
 80088d0:	e000      	b.n	80088d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80088d2:	bf00      	nop
	return res;
 80088d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3724      	adds	r7, #36	; 0x24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd90      	pop	{r4, r7, pc}

080088de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d904      	bls.n	8008904 <remove_chain+0x26>
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	d301      	bcc.n	8008908 <remove_chain+0x2a>
 8008904:	2302      	movs	r3, #2
 8008906:	e04b      	b.n	80089a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f7ff fef6 	bl	8008706 <put_fat>
 800891a:	4603      	mov	r3, r0
 800891c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800891e:	7ffb      	ldrb	r3, [r7, #31]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <remove_chain+0x4a>
 8008924:	7ffb      	ldrb	r3, [r7, #31]
 8008926:	e03b      	b.n	80089a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fe43 	bl	80085b6 <get_fat>
 8008930:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d031      	beq.n	800899c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <remove_chain+0x64>
 800893e:	2302      	movs	r3, #2
 8008940:	e02e      	b.n	80089a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d101      	bne.n	800894e <remove_chain+0x70>
 800894a:	2301      	movs	r3, #1
 800894c:	e028      	b.n	80089a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800894e:	2200      	movs	r2, #0
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	69b8      	ldr	r0, [r7, #24]
 8008954:	f7ff fed7 	bl	8008706 <put_fat>
 8008958:	4603      	mov	r3, r0
 800895a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800895c:	7ffb      	ldrb	r3, [r7, #31]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <remove_chain+0x88>
 8008962:	7ffb      	ldrb	r3, [r7, #31]
 8008964:	e01c      	b.n	80089a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	695a      	ldr	r2, [r3, #20]
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	3b02      	subs	r3, #2
 8008970:	429a      	cmp	r2, r3
 8008972:	d20b      	bcs.n	800898c <remove_chain+0xae>
			fs->free_clst++;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	791b      	ldrb	r3, [r3, #4]
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	b2da      	uxtb	r2, r3
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	429a      	cmp	r2, r3
 8008998:	d3c6      	bcc.n	8008928 <remove_chain+0x4a>
 800899a:	e000      	b.n	800899e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800899c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3720      	adds	r7, #32
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10d      	bne.n	80089da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <create_chain+0x2c>
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d31b      	bcc.n	8008a0c <create_chain+0x64>
 80089d4:	2301      	movs	r3, #1
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	e018      	b.n	8008a0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fdea 	bl	80085b6 <get_fat>
 80089e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d801      	bhi.n	80089ee <create_chain+0x46>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e070      	b.n	8008ad0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f4:	d101      	bne.n	80089fa <create_chain+0x52>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e06a      	b.n	8008ad0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d201      	bcs.n	8008a08 <create_chain+0x60>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	e063      	b.n	8008ad0 <create_chain+0x128>
		scl = clst;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	3301      	adds	r3, #1
 8008a14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d307      	bcc.n	8008a30 <create_chain+0x88>
				ncl = 2;
 8008a20:	2302      	movs	r3, #2
 8008a22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d901      	bls.n	8008a30 <create_chain+0x88>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e04f      	b.n	8008ad0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a30:	69f9      	ldr	r1, [r7, #28]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fdbf 	bl	80085b6 <get_fat>
 8008a38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d003      	beq.n	8008a4e <create_chain+0xa6>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d101      	bne.n	8008a52 <create_chain+0xaa>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	e03e      	b.n	8008ad0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1da      	bne.n	8008a10 <create_chain+0x68>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e038      	b.n	8008ad0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	6938      	ldr	r0, [r7, #16]
 8008a68:	f7ff fe4d 	bl	8008706 <put_fat>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <create_chain+0xe2>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f7ff fe40 	bl	8008706 <put_fat>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d116      	bne.n	8008abe <create_chain+0x116>
		fs->last_clst = ncl;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	695a      	ldr	r2, [r3, #20]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	3b02      	subs	r3, #2
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d804      	bhi.n	8008aae <create_chain+0x106>
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	1e5a      	subs	r2, r3, #1
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	711a      	strb	r2, [r3, #4]
 8008abc:	e007      	b.n	8008ace <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d102      	bne.n	8008aca <create_chain+0x122>
 8008ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac8:	e000      	b.n	8008acc <create_chain+0x124>
 8008aca:	2301      	movs	r3, #1
 8008acc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ace:	69fb      	ldr	r3, [r7, #28]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	3304      	adds	r3, #4
 8008aee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	0a5b      	lsrs	r3, r3, #9
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	8952      	ldrh	r2, [r2, #10]
 8008af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1d1a      	adds	r2, r3, #4
 8008b02:	613a      	str	r2, [r7, #16]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <clmt_clust+0x3a>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e010      	b.n	8008b34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d307      	bcc.n	8008b2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3304      	adds	r3, #4
 8008b26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b28:	e7e9      	b.n	8008afe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008b2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4413      	add	r3, r2
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b56:	d204      	bcs.n	8008b62 <dir_sdi+0x22>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f003 031f 	and.w	r3, r3, #31
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b62:	2302      	movs	r3, #2
 8008b64:	e063      	b.n	8008c2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <dir_sdi+0x46>
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d902      	bls.n	8008b86 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10c      	bne.n	8008ba6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	8912      	ldrh	r2, [r2, #8]
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d301      	bcc.n	8008b9c <dir_sdi+0x5c>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e048      	b.n	8008c2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	61da      	str	r2, [r3, #28]
 8008ba4:	e029      	b.n	8008bfa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	895b      	ldrh	r3, [r3, #10]
 8008baa:	025b      	lsls	r3, r3, #9
 8008bac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bae:	e019      	b.n	8008be4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fcfe 	bl	80085b6 <get_fat>
 8008bba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d101      	bne.n	8008bc8 <dir_sdi+0x88>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e032      	b.n	8008c2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d904      	bls.n	8008bd8 <dir_sdi+0x98>
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d301      	bcc.n	8008bdc <dir_sdi+0x9c>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e028      	b.n	8008c2e <dir_sdi+0xee>
			ofs -= csz;
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d2e1      	bcs.n	8008bb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008bec:	6979      	ldr	r1, [r7, #20]
 8008bee:	6938      	ldr	r0, [r7, #16]
 8008bf0:	f7ff fcc2 	bl	8008578 <clust2sect>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <dir_sdi+0xcc>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e010      	b.n	8008c2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69da      	ldr	r2, [r3, #28]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	0a5b      	lsrs	r3, r3, #9
 8008c14:	441a      	add	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	3320      	adds	r3, #32
 8008c4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <dir_next+0x28>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c5c:	d301      	bcc.n	8008c62 <dir_next+0x2c>
 8008c5e:	2304      	movs	r3, #4
 8008c60:	e0aa      	b.n	8008db8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 8098 	bne.w	8008d9e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10b      	bne.n	8008c98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	8912      	ldrh	r2, [r2, #8]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	f0c0 8088 	bcc.w	8008d9e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	61da      	str	r2, [r3, #28]
 8008c94:	2304      	movs	r3, #4
 8008c96:	e08f      	b.n	8008db8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	0a5b      	lsrs	r3, r3, #9
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	8952      	ldrh	r2, [r2, #10]
 8008ca0:	3a01      	subs	r2, #1
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d17a      	bne.n	8008d9e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f7ff fc80 	bl	80085b6 <get_fat>
 8008cb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d801      	bhi.n	8008cc2 <dir_next+0x8c>
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	e07a      	b.n	8008db8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d101      	bne.n	8008cce <dir_next+0x98>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e074      	b.n	8008db8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d358      	bcc.n	8008d8a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	61da      	str	r2, [r3, #28]
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	e067      	b.n	8008db8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f7ff fe59 	bl	80089a8 <create_chain>
 8008cf6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <dir_next+0xcc>
 8008cfe:	2307      	movs	r3, #7
 8008d00:	e05a      	b.n	8008db8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <dir_next+0xd6>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e055      	b.n	8008db8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d101      	bne.n	8008d18 <dir_next+0xe2>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e04f      	b.n	8008db8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff fb4d 	bl	80083b8 <sync_window>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <dir_next+0xf2>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e047      	b.n	8008db8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3334      	adds	r3, #52	; 0x34
 8008d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff f977 	bl	8008026 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d38:	2300      	movs	r3, #0
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	6979      	ldr	r1, [r7, #20]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7ff fc1a 	bl	8008578 <clust2sect>
 8008d44:	4602      	mov	r2, r0
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
 8008d4a:	e012      	b.n	8008d72 <dir_next+0x13c>
						fs->wflag = 1;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff fb30 	bl	80083b8 <sync_window>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <dir_next+0x12c>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e02a      	b.n	8008db8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3301      	adds	r3, #1
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	895b      	ldrh	r3, [r3, #10]
 8008d76:	461a      	mov	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d3e6      	bcc.n	8008d4c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008d90:	6979      	ldr	r1, [r7, #20]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fbf0 	bl	8008578 <clust2sect>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db0:	441a      	add	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff feb4 	bl	8008b40 <dir_sdi>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d12b      	bne.n	8008e3a <dir_alloc+0x7a>
		n = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4619      	mov	r1, r3
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7ff fb27 	bl	8008440 <move_window>
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11d      	bne.n	8008e38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2be5      	cmp	r3, #229	; 0xe5
 8008e04:	d004      	beq.n	8008e10 <dir_alloc+0x50>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d102      	bne.n	8008e24 <dir_alloc+0x64>
 8008e1e:	e00c      	b.n	8008e3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e20:	2300      	movs	r3, #0
 8008e22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e24:	2101      	movs	r1, #1
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff ff05 	bl	8008c36 <dir_next>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0d7      	beq.n	8008de6 <dir_alloc+0x26>
 8008e36:	e000      	b.n	8008e3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d101      	bne.n	8008e44 <dir_alloc+0x84>
 8008e40:	2307      	movs	r3, #7
 8008e42:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	331a      	adds	r3, #26
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7ff f83f 	bl	8007ee0 <ld_word>
 8008e62:	4603      	mov	r3, r0
 8008e64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d109      	bne.n	8008e82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	3314      	adds	r3, #20
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff f834 	bl	8007ee0 <ld_word>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e82:	68fb      	ldr	r3, [r7, #12]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	331a      	adds	r3, #26
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff f857 	bl	8007f56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d109      	bne.n	8008ec4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f103 0214 	add.w	r2, r3, #20
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7ff f849 	bl	8007f56 <st_word>
	}
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008ecc:	b590      	push	{r4, r7, lr}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	331a      	adds	r3, #26
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff f800 	bl	8007ee0 <ld_word>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <cmp_lfn+0x1e>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e059      	b.n	8008f9e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ef2:	1e5a      	subs	r2, r3, #1
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f00:	2301      	movs	r3, #1
 8008f02:	81fb      	strh	r3, [r7, #14]
 8008f04:	2300      	movs	r3, #0
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	e033      	b.n	8008f72 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f0a:	4a27      	ldr	r2, [pc, #156]	; (8008fa8 <cmp_lfn+0xdc>)
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	4413      	add	r3, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe ffe1 	bl	8007ee0 <ld_word>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008f22:	89fb      	ldrh	r3, [r7, #14]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01a      	beq.n	8008f5e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8008f2c:	d812      	bhi.n	8008f54 <cmp_lfn+0x88>
 8008f2e:	89bb      	ldrh	r3, [r7, #12]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 fea1 	bl	800bc78 <ff_wtoupper>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461c      	mov	r4, r3
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	617a      	str	r2, [r7, #20]
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f002 fe95 	bl	800bc78 <ff_wtoupper>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	429c      	cmp	r4, r3
 8008f52:	d001      	beq.n	8008f58 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008f54:	2300      	movs	r3, #0
 8008f56:	e022      	b.n	8008f9e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008f58:	89bb      	ldrh	r3, [r7, #12]
 8008f5a:	81fb      	strh	r3, [r7, #14]
 8008f5c:	e006      	b.n	8008f6c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f5e:	89bb      	ldrh	r3, [r7, #12]
 8008f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d001      	beq.n	8008f6c <cmp_lfn+0xa0>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e018      	b.n	8008f9e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b0c      	cmp	r3, #12
 8008f76:	d9c8      	bls.n	8008f0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <cmp_lfn+0xd0>
 8008f84:	89fb      	ldrh	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d008      	beq.n	8008f9c <cmp_lfn+0xd0>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <cmp_lfn+0xd0>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e000      	b.n	8008f9e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008f9c:	2301      	movs	r3, #1
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd90      	pop	{r4, r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	080252a4 	.word	0x080252a4

08008fac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	331a      	adds	r3, #26
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe ff90 	bl	8007ee0 <ld_word>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <pick_lfn+0x1e>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e04d      	b.n	8009066 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd2:	1e5a      	subs	r2, r3, #1
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	81fb      	strh	r3, [r7, #14]
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	e028      	b.n	800903c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008fea:	4a21      	ldr	r2, [pc, #132]	; (8009070 <pick_lfn+0xc4>)
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4413      	add	r3, r2
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fe ff71 	bl	8007ee0 <ld_word>
 8008ffe:	4603      	mov	r3, r0
 8009000:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009002:	89fb      	ldrh	r3, [r7, #14]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00f      	beq.n	8009028 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2bfe      	cmp	r3, #254	; 0xfe
 800900c:	d901      	bls.n	8009012 <pick_lfn+0x66>
 800900e:	2300      	movs	r3, #0
 8009010:	e029      	b.n	8009066 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009012:	89bb      	ldrh	r3, [r7, #12]
 8009014:	81fb      	strh	r3, [r7, #14]
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	617a      	str	r2, [r7, #20]
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	89fa      	ldrh	r2, [r7, #14]
 8009024:	801a      	strh	r2, [r3, #0]
 8009026:	e006      	b.n	8009036 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009028:	89bb      	ldrh	r3, [r7, #12]
 800902a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800902e:	4293      	cmp	r3, r2
 8009030:	d001      	beq.n	8009036 <pick_lfn+0x8a>
 8009032:	2300      	movs	r3, #0
 8009034:	e017      	b.n	8009066 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3301      	adds	r3, #1
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b0c      	cmp	r3, #12
 8009040:	d9d3      	bls.n	8008fea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2bfe      	cmp	r3, #254	; 0xfe
 8009052:	d901      	bls.n	8009058 <pick_lfn+0xac>
 8009054:	2300      	movs	r3, #0
 8009056:	e006      	b.n	8009066 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	2200      	movs	r2, #0
 8009062:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009064:	2301      	movs	r3, #1
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	080252a4 	.word	0x080252a4

08009074 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4611      	mov	r1, r2
 8009080:	461a      	mov	r2, r3
 8009082:	460b      	mov	r3, r1
 8009084:	71fb      	strb	r3, [r7, #7]
 8009086:	4613      	mov	r3, r2
 8009088:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	330d      	adds	r3, #13
 800908e:	79ba      	ldrb	r2, [r7, #6]
 8009090:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	330b      	adds	r3, #11
 8009096:	220f      	movs	r2, #15
 8009098:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	330c      	adds	r3, #12
 800909e:	2200      	movs	r2, #0
 80090a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	331a      	adds	r3, #26
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fe ff54 	bl	8007f56 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	4613      	mov	r3, r2
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	82fb      	strh	r3, [r7, #22]
 80090c2:	2300      	movs	r3, #0
 80090c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80090c6:	8afb      	ldrh	r3, [r7, #22]
 80090c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d007      	beq.n	80090e0 <put_lfn+0x6c>
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	61fa      	str	r2, [r7, #28]
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80090e0:	4a17      	ldr	r2, [pc, #92]	; (8009140 <put_lfn+0xcc>)
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	4413      	add	r3, r2
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4413      	add	r3, r2
 80090ee:	8afa      	ldrh	r2, [r7, #22]
 80090f0:	4611      	mov	r1, r2
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe ff2f 	bl	8007f56 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80090f8:	8afb      	ldrh	r3, [r7, #22]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d102      	bne.n	8009104 <put_lfn+0x90>
 80090fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009102:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	3301      	adds	r3, #1
 8009108:	61bb      	str	r3, [r7, #24]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b0c      	cmp	r3, #12
 800910e:	d9da      	bls.n	80090c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009110:	8afb      	ldrh	r3, [r7, #22]
 8009112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009116:	4293      	cmp	r3, r2
 8009118:	d006      	beq.n	8009128 <put_lfn+0xb4>
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4413      	add	r3, r2
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <put_lfn+0xbc>
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	79fa      	ldrb	r2, [r7, #7]
 8009134:	701a      	strb	r2, [r3, #0]
}
 8009136:	bf00      	nop
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	080252a4 	.word	0x080252a4

08009144 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08c      	sub	sp, #48	; 0x30
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009152:	220b      	movs	r2, #11
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7fe ff44 	bl	8007fe4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2b05      	cmp	r3, #5
 8009160:	d92b      	bls.n	80091ba <gen_numname+0x76>
		sr = seq;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009166:	e022      	b.n	80091ae <gen_numname+0x6a>
			wc = *lfn++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	1c9a      	adds	r2, r3, #2
 800916c:	607a      	str	r2, [r7, #4]
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009172:	2300      	movs	r3, #0
 8009174:	62bb      	str	r3, [r7, #40]	; 0x28
 8009176:	e017      	b.n	80091a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	005a      	lsls	r2, r3, #1
 800917c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009188:	085b      	lsrs	r3, r3, #1
 800918a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <gen_numname+0x5e>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800919c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80091a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	3301      	adds	r3, #1
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b0f      	cmp	r3, #15
 80091ac:	d9e4      	bls.n	8009178 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1d8      	bne.n	8009168 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80091ba:	2307      	movs	r3, #7
 80091bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	3330      	adds	r3, #48	; 0x30
 80091ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80091ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091d2:	2b39      	cmp	r3, #57	; 0x39
 80091d4:	d904      	bls.n	80091e0 <gen_numname+0x9c>
 80091d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091da:	3307      	adds	r3, #7
 80091dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	1e5a      	subs	r2, r3, #1
 80091e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80091e6:	3330      	adds	r3, #48	; 0x30
 80091e8:	443b      	add	r3, r7
 80091ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80091ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	091b      	lsrs	r3, r3, #4
 80091f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1df      	bne.n	80091be <gen_numname+0x7a>
	ns[i] = '~';
 80091fe:	f107 0214 	add.w	r2, r7, #20
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	4413      	add	r3, r2
 8009206:	227e      	movs	r2, #126	; 0x7e
 8009208:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800920a:	2300      	movs	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
 800920e:	e002      	b.n	8009216 <gen_numname+0xd2>
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	3301      	adds	r3, #1
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	429a      	cmp	r2, r3
 800921c:	d205      	bcs.n	800922a <gen_numname+0xe6>
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	4413      	add	r3, r2
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b20      	cmp	r3, #32
 8009228:	d1f2      	bne.n	8009210 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	2b07      	cmp	r3, #7
 800922e:	d807      	bhi.n	8009240 <gen_numname+0xfc>
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	62ba      	str	r2, [r7, #40]	; 0x28
 8009236:	3330      	adds	r3, #48	; 0x30
 8009238:	443b      	add	r3, r7
 800923a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800923e:	e000      	b.n	8009242 <gen_numname+0xfe>
 8009240:	2120      	movs	r1, #32
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	627a      	str	r2, [r7, #36]	; 0x24
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4413      	add	r3, r2
 800924c:	460a      	mov	r2, r1
 800924e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	2b07      	cmp	r3, #7
 8009254:	d9e9      	bls.n	800922a <gen_numname+0xe6>
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	3730      	adds	r7, #48	; 0x30
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800926c:	230b      	movs	r3, #11
 800926e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	b2da      	uxtb	r2, r3
 8009274:	0852      	lsrs	r2, r2, #1
 8009276:	01db      	lsls	r3, r3, #7
 8009278:	4313      	orrs	r3, r2
 800927a:	b2da      	uxtb	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1c59      	adds	r1, r3, #1
 8009280:	6079      	str	r1, [r7, #4]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	4413      	add	r3, r2
 8009286:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	3b01      	subs	r3, #1
 800928c:	60bb      	str	r3, [r7, #8]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1ed      	bne.n	8009270 <sum_sfn+0x10>
	return sum;
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80092ac:	2304      	movs	r3, #4
 80092ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80092b6:	23ff      	movs	r3, #255	; 0xff
 80092b8:	757b      	strb	r3, [r7, #21]
 80092ba:	23ff      	movs	r3, #255	; 0xff
 80092bc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80092be:	e081      	b.n	80093c4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	4619      	mov	r1, r3
 80092c6:	6938      	ldr	r0, [r7, #16]
 80092c8:	f7ff f8ba 	bl	8008440 <move_window>
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d17c      	bne.n	80093d0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80092de:	7dbb      	ldrb	r3, [r7, #22]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80092e4:	2304      	movs	r3, #4
 80092e6:	75fb      	strb	r3, [r7, #23]
 80092e8:	e077      	b.n	80093da <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	330b      	adds	r3, #11
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f6:	73fb      	strb	r3, [r7, #15]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7bfa      	ldrb	r2, [r7, #15]
 80092fc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80092fe:	7dbb      	ldrb	r3, [r7, #22]
 8009300:	2be5      	cmp	r3, #229	; 0xe5
 8009302:	d00e      	beq.n	8009322 <dir_read+0x80>
 8009304:	7dbb      	ldrb	r3, [r7, #22]
 8009306:	2b2e      	cmp	r3, #46	; 0x2e
 8009308:	d00b      	beq.n	8009322 <dir_read+0x80>
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	f023 0320 	bic.w	r3, r3, #32
 8009310:	2b08      	cmp	r3, #8
 8009312:	bf0c      	ite	eq
 8009314:	2301      	moveq	r3, #1
 8009316:	2300      	movne	r3, #0
 8009318:	b2db      	uxtb	r3, r3
 800931a:	461a      	mov	r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	4293      	cmp	r3, r2
 8009320:	d002      	beq.n	8009328 <dir_read+0x86>
				ord = 0xFF;
 8009322:	23ff      	movs	r3, #255	; 0xff
 8009324:	757b      	strb	r3, [r7, #21]
 8009326:	e044      	b.n	80093b2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b0f      	cmp	r3, #15
 800932c:	d12f      	bne.n	800938e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800932e:	7dbb      	ldrb	r3, [r7, #22]
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00d      	beq.n	8009354 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a1b      	ldr	r3, [r3, #32]
 800933c:	7b5b      	ldrb	r3, [r3, #13]
 800933e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009340:	7dbb      	ldrb	r3, [r7, #22]
 8009342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009346:	75bb      	strb	r3, [r7, #22]
 8009348:	7dbb      	ldrb	r3, [r7, #22]
 800934a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	695a      	ldr	r2, [r3, #20]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009354:	7dba      	ldrb	r2, [r7, #22]
 8009356:	7d7b      	ldrb	r3, [r7, #21]
 8009358:	429a      	cmp	r2, r3
 800935a:	d115      	bne.n	8009388 <dir_read+0xe6>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	330d      	adds	r3, #13
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	7d3a      	ldrb	r2, [r7, #20]
 8009366:	429a      	cmp	r2, r3
 8009368:	d10e      	bne.n	8009388 <dir_read+0xe6>
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	4619      	mov	r1, r3
 8009374:	4610      	mov	r0, r2
 8009376:	f7ff fe19 	bl	8008fac <pick_lfn>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <dir_read+0xe6>
 8009380:	7d7b      	ldrb	r3, [r7, #21]
 8009382:	3b01      	subs	r3, #1
 8009384:	b2db      	uxtb	r3, r3
 8009386:	e000      	b.n	800938a <dir_read+0xe8>
 8009388:	23ff      	movs	r3, #255	; 0xff
 800938a:	757b      	strb	r3, [r7, #21]
 800938c:	e011      	b.n	80093b2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800938e:	7d7b      	ldrb	r3, [r7, #21]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d109      	bne.n	80093a8 <dir_read+0x106>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff ff61 	bl	8009260 <sum_sfn>
 800939e:	4603      	mov	r3, r0
 80093a0:	461a      	mov	r2, r3
 80093a2:	7d3b      	ldrb	r3, [r7, #20]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d015      	beq.n	80093d4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80093b0:	e010      	b.n	80093d4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff fc3e 	bl	8008c36 <dir_next>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <dir_read+0x136>
	while (dp->sect) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f af79 	bne.w	80092c0 <dir_read+0x1e>
 80093ce:	e004      	b.n	80093da <dir_read+0x138>
		if (res != FR_OK) break;
 80093d0:	bf00      	nop
 80093d2:	e002      	b.n	80093da <dir_read+0x138>
					break;
 80093d4:	bf00      	nop
 80093d6:	e000      	b.n	80093da <dir_read+0x138>
		if (res != FR_OK) break;
 80093d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <dir_read+0x144>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	61da      	str	r2, [r3, #28]
	return res;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80093fe:	2100      	movs	r1, #0
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff fb9d 	bl	8008b40 <dir_sdi>
 8009406:	4603      	mov	r3, r0
 8009408:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <dir_find+0x24>
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	e0a9      	b.n	8009568 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009414:	23ff      	movs	r3, #255	; 0xff
 8009416:	753b      	strb	r3, [r7, #20]
 8009418:	7d3b      	ldrb	r3, [r7, #20]
 800941a:	757b      	strb	r3, [r7, #21]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	4619      	mov	r1, r3
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f7ff f808 	bl	8008440 <move_window>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 8090 	bne.w	800955c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009444:	7dbb      	ldrb	r3, [r7, #22]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <dir_find+0x60>
 800944a:	2304      	movs	r3, #4
 800944c:	75fb      	strb	r3, [r7, #23]
 800944e:	e08a      	b.n	8009566 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	330b      	adds	r3, #11
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800945c:	73fb      	strb	r3, [r7, #15]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7bfa      	ldrb	r2, [r7, #15]
 8009462:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009464:	7dbb      	ldrb	r3, [r7, #22]
 8009466:	2be5      	cmp	r3, #229	; 0xe5
 8009468:	d007      	beq.n	800947a <dir_find+0x8a>
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d009      	beq.n	8009488 <dir_find+0x98>
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	2b0f      	cmp	r3, #15
 8009478:	d006      	beq.n	8009488 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800947a:	23ff      	movs	r3, #255	; 0xff
 800947c:	757b      	strb	r3, [r7, #21]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	631a      	str	r2, [r3, #48]	; 0x30
 8009486:	e05e      	b.n	8009546 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d136      	bne.n	80094fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d154      	bne.n	8009546 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800949c:	7dbb      	ldrb	r3, [r7, #22]
 800949e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	7b5b      	ldrb	r3, [r3, #13]
 80094ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80094ae:	7dbb      	ldrb	r3, [r7, #22]
 80094b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094b4:	75bb      	strb	r3, [r7, #22]
 80094b6:	7dbb      	ldrb	r3, [r7, #22]
 80094b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695a      	ldr	r2, [r3, #20]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80094c2:	7dba      	ldrb	r2, [r7, #22]
 80094c4:	7d7b      	ldrb	r3, [r7, #21]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d115      	bne.n	80094f6 <dir_find+0x106>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	330d      	adds	r3, #13
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	7d3a      	ldrb	r2, [r7, #20]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d10e      	bne.n	80094f6 <dir_find+0x106>
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7ff fcf2 	bl	8008ecc <cmp_lfn>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <dir_find+0x106>
 80094ee:	7d7b      	ldrb	r3, [r7, #21]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	e000      	b.n	80094f8 <dir_find+0x108>
 80094f6:	23ff      	movs	r3, #255	; 0xff
 80094f8:	757b      	strb	r3, [r7, #21]
 80094fa:	e024      	b.n	8009546 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80094fc:	7d7b      	ldrb	r3, [r7, #21]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <dir_find+0x126>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff feaa 	bl	8009260 <sum_sfn>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	7d3b      	ldrb	r3, [r7, #20]
 8009512:	4293      	cmp	r3, r2
 8009514:	d024      	beq.n	8009560 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <dir_find+0x14a>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a18      	ldr	r0, [r3, #32]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3324      	adds	r3, #36	; 0x24
 800952c:	220b      	movs	r2, #11
 800952e:	4619      	mov	r1, r3
 8009530:	f7fe fd94 	bl	800805c <mem_cmp>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d014      	beq.n	8009564 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800953a:	23ff      	movs	r3, #255	; 0xff
 800953c:	757b      	strb	r3, [r7, #21]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f04f 32ff 	mov.w	r2, #4294967295
 8009544:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009546:	2100      	movs	r1, #0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fb74 	bl	8008c36 <dir_next>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f43f af65 	beq.w	8009424 <dir_find+0x34>
 800955a:	e004      	b.n	8009566 <dir_find+0x176>
		if (res != FR_OK) break;
 800955c:	bf00      	nop
 800955e:	e002      	b.n	8009566 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009564:	bf00      	nop

	return res;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08c      	sub	sp, #48	; 0x30
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009584:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <dir_register+0x20>
 800958c:	2306      	movs	r3, #6
 800958e:	e0e0      	b.n	8009752 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009590:	2300      	movs	r3, #0
 8009592:	627b      	str	r3, [r7, #36]	; 0x24
 8009594:	e002      	b.n	800959c <dir_register+0x2c>
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	3301      	adds	r3, #1
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	4413      	add	r3, r2
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1f4      	bne.n	8009596 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80095b2:	f107 030c 	add.w	r3, r7, #12
 80095b6:	220c      	movs	r2, #12
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fd13 	bl	8007fe4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d032      	beq.n	800962e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2240      	movs	r2, #64	; 0x40
 80095cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80095d0:	2301      	movs	r3, #1
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d4:	e016      	b.n	8009604 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	f107 010c 	add.w	r1, r7, #12
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	f7ff fdad 	bl	8009144 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff ff00 	bl	80093f0 <dir_find>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80095f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	3301      	adds	r3, #1
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	2b63      	cmp	r3, #99	; 0x63
 8009608:	d9e5      	bls.n	80095d6 <dir_register+0x66>
 800960a:	e000      	b.n	800960e <dir_register+0x9e>
			if (res != FR_OK) break;
 800960c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	2b64      	cmp	r3, #100	; 0x64
 8009612:	d101      	bne.n	8009618 <dir_register+0xa8>
 8009614:	2307      	movs	r3, #7
 8009616:	e09c      	b.n	8009752 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800961c:	2b04      	cmp	r3, #4
 800961e:	d002      	beq.n	8009626 <dir_register+0xb6>
 8009620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009624:	e095      	b.n	8009752 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009626:	7dfa      	ldrb	r2, [r7, #23]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d007      	beq.n	8009648 <dir_register+0xd8>
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	330c      	adds	r3, #12
 800963c:	4a47      	ldr	r2, [pc, #284]	; (800975c <dir_register+0x1ec>)
 800963e:	fba2 2303 	umull	r2, r3, r2, r3
 8009642:	089b      	lsrs	r3, r3, #2
 8009644:	3301      	adds	r3, #1
 8009646:	e000      	b.n	800964a <dir_register+0xda>
 8009648:	2301      	movs	r3, #1
 800964a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800964c:	6a39      	ldr	r1, [r7, #32]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff fbb6 	bl	8008dc0 <dir_alloc>
 8009654:	4603      	mov	r3, r0
 8009656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800965a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800965e:	2b00      	cmp	r3, #0
 8009660:	d148      	bne.n	80096f4 <dir_register+0x184>
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	3b01      	subs	r3, #1
 8009666:	623b      	str	r3, [r7, #32]
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d042      	beq.n	80096f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695a      	ldr	r2, [r3, #20]
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	015b      	lsls	r3, r3, #5
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff fa60 	bl	8008b40 <dir_sdi>
 8009680:	4603      	mov	r3, r0
 8009682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800968a:	2b00      	cmp	r3, #0
 800968c:	d132      	bne.n	80096f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3324      	adds	r3, #36	; 0x24
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fde4 	bl	8009260 <sum_sfn>
 8009698:	4603      	mov	r3, r0
 800969a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	4619      	mov	r1, r3
 80096a2:	69f8      	ldr	r0, [r7, #28]
 80096a4:	f7fe fecc 	bl	8008440 <move_window>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80096ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d11d      	bne.n	80096f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	68d8      	ldr	r0, [r3, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a19      	ldr	r1, [r3, #32]
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	7efb      	ldrb	r3, [r7, #27]
 80096c4:	f7ff fcd6 	bl	8009074 <put_lfn>
				fs->wflag = 1;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	2201      	movs	r2, #1
 80096cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80096ce:	2100      	movs	r1, #0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff fab0 	bl	8008c36 <dir_next>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80096dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d107      	bne.n	80096f4 <dir_register+0x184>
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	623b      	str	r3, [r7, #32]
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1d5      	bne.n	800969c <dir_register+0x12c>
 80096f0:	e000      	b.n	80096f4 <dir_register+0x184>
				if (res != FR_OK) break;
 80096f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80096f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d128      	bne.n	800974e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	4619      	mov	r1, r3
 8009702:	69f8      	ldr	r0, [r7, #28]
 8009704:	f7fe fe9c 	bl	8008440 <move_window>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800970e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11b      	bne.n	800974e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	2220      	movs	r2, #32
 800971c:	2100      	movs	r1, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe fc81 	bl	8008026 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a18      	ldr	r0, [r3, #32]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3324      	adds	r3, #36	; 0x24
 800972c:	220b      	movs	r2, #11
 800972e:	4619      	mov	r1, r3
 8009730:	f7fe fc58 	bl	8007fe4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	330c      	adds	r3, #12
 8009740:	f002 0218 	and.w	r2, r2, #24
 8009744:	b2d2      	uxtb	r2, r2
 8009746:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	2201      	movs	r2, #1
 800974c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800974e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009752:	4618      	mov	r0, r3
 8009754:	3730      	adds	r7, #48	; 0x30
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	4ec4ec4f 	.word	0x4ec4ec4f

08009760 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2200      	movs	r2, #0
 8009774:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 80c9 	beq.w	8009912 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d032      	beq.n	80097f0 <get_fileinfo+0x90>
			i = j = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	61bb      	str	r3, [r7, #24]
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009792:	e01b      	b.n	80097cc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009794:	89fb      	ldrh	r3, [r7, #14]
 8009796:	2100      	movs	r1, #0
 8009798:	4618      	mov	r0, r3
 800979a:	f002 fa31 	bl	800bc00 <ff_convert>
 800979e:	4603      	mov	r3, r0
 80097a0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80097a2:	89fb      	ldrh	r3, [r7, #14]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <get_fileinfo+0x4e>
 80097a8:	2300      	movs	r3, #0
 80097aa:	61fb      	str	r3, [r7, #28]
 80097ac:	e01a      	b.n	80097e4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	2bfe      	cmp	r3, #254	; 0xfe
 80097b2:	d902      	bls.n	80097ba <get_fileinfo+0x5a>
 80097b4:	2300      	movs	r3, #0
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	e014      	b.n	80097e4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	61fa      	str	r2, [r7, #28]
 80097c0:	89fa      	ldrh	r2, [r7, #14]
 80097c2:	b2d1      	uxtb	r1, r2
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	4413      	add	r3, r2
 80097c8:	460a      	mov	r2, r1
 80097ca:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	1c59      	adds	r1, r3, #1
 80097d4:	61b9      	str	r1, [r7, #24]
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	81fb      	strh	r3, [r7, #14]
 80097de:	89fb      	ldrh	r3, [r7, #14]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1d7      	bne.n	8009794 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	4413      	add	r3, r2
 80097ea:	3316      	adds	r3, #22
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	3316      	adds	r3, #22
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009804:	e04c      	b.n	80098a0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1a      	ldr	r2, [r3, #32]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	1c59      	adds	r1, r3, #1
 800980e:	61f9      	str	r1, [r7, #28]
 8009810:	4413      	add	r3, r2
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b20      	cmp	r3, #32
 800981a:	d100      	bne.n	800981e <get_fileinfo+0xbe>
 800981c:	e040      	b.n	80098a0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	2b05      	cmp	r3, #5
 8009822:	d101      	bne.n	8009828 <get_fileinfo+0xc8>
 8009824:	23e5      	movs	r3, #229	; 0xe5
 8009826:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d10f      	bne.n	800984e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800982e:	89bb      	ldrh	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <get_fileinfo+0xe0>
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	4413      	add	r3, r2
 800983a:	3316      	adds	r3, #22
 800983c:	222e      	movs	r2, #46	; 0x2e
 800983e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	61ba      	str	r2, [r7, #24]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4413      	add	r3, r2
 800984a:	222e      	movs	r2, #46	; 0x2e
 800984c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	4413      	add	r3, r2
 8009854:	3309      	adds	r3, #9
 8009856:	7dfa      	ldrb	r2, [r7, #23]
 8009858:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800985a:	89bb      	ldrh	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d11c      	bne.n	800989a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	2b40      	cmp	r3, #64	; 0x40
 8009864:	d913      	bls.n	800988e <get_fileinfo+0x12e>
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b5a      	cmp	r3, #90	; 0x5a
 800986a:	d810      	bhi.n	800988e <get_fileinfo+0x12e>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	330c      	adds	r3, #12
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	2b08      	cmp	r3, #8
 800987a:	d901      	bls.n	8009880 <get_fileinfo+0x120>
 800987c:	2310      	movs	r3, #16
 800987e:	e000      	b.n	8009882 <get_fileinfo+0x122>
 8009880:	2308      	movs	r3, #8
 8009882:	4013      	ands	r3, r2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	3320      	adds	r3, #32
 800988c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	4413      	add	r3, r2
 8009894:	3316      	adds	r3, #22
 8009896:	7dfa      	ldrb	r2, [r7, #23]
 8009898:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	3301      	adds	r3, #1
 800989e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	2b0a      	cmp	r3, #10
 80098a4:	d9af      	bls.n	8009806 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80098a6:	89bb      	ldrh	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10d      	bne.n	80098c8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	4413      	add	r3, r2
 80098b2:	3316      	adds	r3, #22
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	330c      	adds	r3, #12
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <get_fileinfo+0x168>
 80098c4:	2300      	movs	r3, #0
 80098c6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	4413      	add	r3, r2
 80098ce:	3309      	adds	r3, #9
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	7ada      	ldrb	r2, [r3, #11]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	331c      	adds	r3, #28
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fe fb13 	bl	8007f10 <ld_dword>
 80098ea:	4602      	mov	r2, r0
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	3316      	adds	r3, #22
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fb0a 	bl	8007f10 <ld_dword>
 80098fc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	b29a      	uxth	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	80da      	strh	r2, [r3, #6]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	0c1b      	lsrs	r3, r3, #16
 800990a:	b29a      	uxth	r2, r3
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	809a      	strh	r2, [r3, #4]
 8009910:	e000      	b.n	8009914 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009912:	bf00      	nop
}
 8009914:	3720      	adds	r7, #32
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b08a      	sub	sp, #40	; 0x28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	61ba      	str	r2, [r7, #24]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4413      	add	r3, r2
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800994a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800994c:	2b1f      	cmp	r3, #31
 800994e:	d940      	bls.n	80099d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009952:	2b2f      	cmp	r3, #47	; 0x2f
 8009954:	d006      	beq.n	8009964 <create_name+0x48>
 8009956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009958:	2b5c      	cmp	r3, #92	; 0x5c
 800995a:	d110      	bne.n	800997e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800995c:	e002      	b.n	8009964 <create_name+0x48>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	3301      	adds	r3, #1
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	4413      	add	r3, r2
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b2f      	cmp	r3, #47	; 0x2f
 800996e:	d0f6      	beq.n	800995e <create_name+0x42>
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	4413      	add	r3, r2
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b5c      	cmp	r3, #92	; 0x5c
 800997a:	d0f0      	beq.n	800995e <create_name+0x42>
			break;
 800997c:	e02a      	b.n	80099d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2bfe      	cmp	r3, #254	; 0xfe
 8009982:	d901      	bls.n	8009988 <create_name+0x6c>
 8009984:	2306      	movs	r3, #6
 8009986:	e17d      	b.n	8009c84 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800998a:	b2db      	uxtb	r3, r3
 800998c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800998e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009990:	2101      	movs	r1, #1
 8009992:	4618      	mov	r0, r3
 8009994:	f002 f934 	bl	800bc00 <ff_convert>
 8009998:	4603      	mov	r3, r0
 800999a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800999c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <create_name+0x8a>
 80099a2:	2306      	movs	r3, #6
 80099a4:	e16e      	b.n	8009c84 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80099a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099a8:	2b7f      	cmp	r3, #127	; 0x7f
 80099aa:	d809      	bhi.n	80099c0 <create_name+0xa4>
 80099ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ae:	4619      	mov	r1, r3
 80099b0:	488d      	ldr	r0, [pc, #564]	; (8009be8 <create_name+0x2cc>)
 80099b2:	f7fe fb7a 	bl	80080aa <chk_chr>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <create_name+0xa4>
 80099bc:	2306      	movs	r3, #6
 80099be:	e161      	b.n	8009c84 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	617a      	str	r2, [r7, #20]
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80099d0:	e7b4      	b.n	800993c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80099d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	441a      	add	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099e0:	2b1f      	cmp	r3, #31
 80099e2:	d801      	bhi.n	80099e8 <create_name+0xcc>
 80099e4:	2304      	movs	r3, #4
 80099e6:	e000      	b.n	80099ea <create_name+0xce>
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099ee:	e011      	b.n	8009a14 <create_name+0xf8>
		w = lfn[di - 1];
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099f6:	3b01      	subs	r3, #1
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4413      	add	r3, r2
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d002      	beq.n	8009a0e <create_name+0xf2>
 8009a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a0c:	d106      	bne.n	8009a1c <create_name+0x100>
		di--;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1ea      	bne.n	80099f0 <create_name+0xd4>
 8009a1a:	e000      	b.n	8009a1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009a1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	2200      	movs	r2, #0
 8009a28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <create_name+0x118>
 8009a30:	2306      	movs	r3, #6
 8009a32:	e127      	b.n	8009c84 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3324      	adds	r3, #36	; 0x24
 8009a38:	220b      	movs	r2, #11
 8009a3a:	2120      	movs	r1, #32
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe faf2 	bl	8008026 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a42:	2300      	movs	r3, #0
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	e002      	b.n	8009a4e <create_name+0x132>
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	61bb      	str	r3, [r7, #24]
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4413      	add	r3, r2
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d0f5      	beq.n	8009a48 <create_name+0x12c>
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	2b2e      	cmp	r3, #46	; 0x2e
 8009a68:	d0ee      	beq.n	8009a48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d009      	beq.n	8009a84 <create_name+0x168>
 8009a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a74:	f043 0303 	orr.w	r3, r3, #3
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a7c:	e002      	b.n	8009a84 <create_name+0x168>
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <create_name+0x182>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a90:	3b01      	subs	r3, #1
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4413      	add	r3, r2
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a9c:	d1ef      	bne.n	8009a7e <create_name+0x162>

	i = b = 0; ni = 8;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	623b      	str	r3, [r7, #32]
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	61ba      	str	r2, [r7, #24]
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 8090 	beq.w	8009be4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d006      	beq.n	8009ad8 <create_name+0x1bc>
 8009aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009acc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ace:	d10a      	bne.n	8009ae6 <create_name+0x1ca>
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d006      	beq.n	8009ae6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009adc:	f043 0303 	orr.w	r3, r3, #3
 8009ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ae4:	e07d      	b.n	8009be2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009ae6:	6a3a      	ldr	r2, [r7, #32]
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d203      	bcs.n	8009af6 <create_name+0x1da>
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d123      	bne.n	8009b3e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	2b0b      	cmp	r3, #11
 8009afa:	d106      	bne.n	8009b0a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b00:	f043 0303 	orr.w	r3, r3, #3
 8009b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b08:	e075      	b.n	8009bf6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d005      	beq.n	8009b1e <create_name+0x202>
 8009b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b16:	f043 0303 	orr.w	r3, r3, #3
 8009b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d866      	bhi.n	8009bf4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	2308      	movs	r3, #8
 8009b2c:	623b      	str	r3, [r7, #32]
 8009b2e:	230b      	movs	r3, #11
 8009b30:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b3c:	e051      	b.n	8009be2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b40:	2b7f      	cmp	r3, #127	; 0x7f
 8009b42:	d914      	bls.n	8009b6e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b46:	2100      	movs	r1, #0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f002 f859 	bl	800bc00 <ff_convert>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d004      	beq.n	8009b62 <create_name+0x246>
 8009b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b5a:	3b80      	subs	r3, #128	; 0x80
 8009b5c:	4a23      	ldr	r2, [pc, #140]	; (8009bec <create_name+0x2d0>)
 8009b5e:	5cd3      	ldrb	r3, [r2, r3]
 8009b60:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b66:	f043 0302 	orr.w	r3, r3, #2
 8009b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d007      	beq.n	8009b84 <create_name+0x268>
 8009b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b76:	4619      	mov	r1, r3
 8009b78:	481d      	ldr	r0, [pc, #116]	; (8009bf0 <create_name+0x2d4>)
 8009b7a:	f7fe fa96 	bl	80080aa <chk_chr>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b84:	235f      	movs	r3, #95	; 0x5f
 8009b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b8c:	f043 0303 	orr.w	r3, r3, #3
 8009b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b94:	e01b      	b.n	8009bce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b98:	2b40      	cmp	r3, #64	; 0x40
 8009b9a:	d909      	bls.n	8009bb0 <create_name+0x294>
 8009b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b9e:	2b5a      	cmp	r3, #90	; 0x5a
 8009ba0:	d806      	bhi.n	8009bb0 <create_name+0x294>
					b |= 2;
 8009ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ba6:	f043 0302 	orr.w	r3, r3, #2
 8009baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009bae:	e00e      	b.n	8009bce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb2:	2b60      	cmp	r3, #96	; 0x60
 8009bb4:	d90b      	bls.n	8009bce <create_name+0x2b2>
 8009bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb8:	2b7a      	cmp	r3, #122	; 0x7a
 8009bba:	d808      	bhi.n	8009bce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bc0:	f043 0301 	orr.w	r3, r3, #1
 8009bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bca:	3b20      	subs	r3, #32
 8009bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	623a      	str	r2, [r7, #32]
 8009bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009bd6:	b2d1      	uxtb	r1, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	4413      	add	r3, r2
 8009bdc:	460a      	mov	r2, r1
 8009bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009be2:	e763      	b.n	8009aac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009be4:	bf00      	nop
 8009be6:	e006      	b.n	8009bf6 <create_name+0x2da>
 8009be8:	080178a8 	.word	0x080178a8
 8009bec:	08025224 	.word	0x08025224
 8009bf0:	080178b4 	.word	0x080178b4
			if (si > di) break;			/* No extension */
 8009bf4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bfc:	2be5      	cmp	r3, #229	; 0xe5
 8009bfe:	d103      	bne.n	8009c08 <create_name+0x2ec>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2205      	movs	r2, #5
 8009c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d104      	bne.n	8009c18 <create_name+0x2fc>
 8009c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c1c:	f003 030c 	and.w	r3, r3, #12
 8009c20:	2b0c      	cmp	r3, #12
 8009c22:	d005      	beq.n	8009c30 <create_name+0x314>
 8009c24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c28:	f003 0303 	and.w	r3, r3, #3
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d105      	bne.n	8009c3c <create_name+0x320>
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d117      	bne.n	8009c78 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009c48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d105      	bne.n	8009c60 <create_name+0x344>
 8009c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c58:	f043 0310 	orr.w	r3, r3, #16
 8009c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009c60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c64:	f003 030c 	and.w	r3, r3, #12
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d105      	bne.n	8009c78 <create_name+0x35c>
 8009c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c70:	f043 0308 	orr.w	r3, r3, #8
 8009c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009c82:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3728      	adds	r7, #40	; 0x28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ca0:	e002      	b.n	8009ca8 <follow_path+0x1c>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b2f      	cmp	r3, #47	; 0x2f
 8009cae:	d0f8      	beq.n	8009ca2 <follow_path+0x16>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8009cb6:	d0f4      	beq.n	8009ca2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b1f      	cmp	r3, #31
 8009cc4:	d80a      	bhi.n	8009cdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2280      	movs	r2, #128	; 0x80
 8009cca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7fe ff35 	bl	8008b40 <dir_sdi>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	75fb      	strb	r3, [r7, #23]
 8009cda:	e043      	b.n	8009d64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009cdc:	463b      	mov	r3, r7
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fe1b 	bl	800991c <create_name>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d134      	bne.n	8009d5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff fb7d 	bl	80093f0 <dir_find>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d127      	bne.n	8009d5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009d0e:	7afb      	ldrb	r3, [r7, #11]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d122      	bne.n	8009d5e <follow_path+0xd2>
 8009d18:	2305      	movs	r3, #5
 8009d1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009d1c:	e01f      	b.n	8009d5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11c      	bne.n	8009d62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	799b      	ldrb	r3, [r3, #6]
 8009d2c:	f003 0310 	and.w	r3, r3, #16
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009d34:	2305      	movs	r3, #5
 8009d36:	75fb      	strb	r3, [r7, #23]
 8009d38:	e014      	b.n	8009d64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d48:	4413      	add	r3, r2
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff f87e 	bl	8008e4e <ld_clust>
 8009d52:	4602      	mov	r2, r0
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d58:	e7c0      	b.n	8009cdc <follow_path+0x50>
			if (res != FR_OK) break;
 8009d5a:	bf00      	nop
 8009d5c:	e002      	b.n	8009d64 <follow_path+0xd8>
				break;
 8009d5e:	bf00      	nop
 8009d60:	e000      	b.n	8009d64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d62:	bf00      	nop
			}
		}
	}

	return res;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b087      	sub	sp, #28
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d76:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d031      	beq.n	8009de8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e002      	b.n	8009d92 <get_ldnumber+0x24>
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b1f      	cmp	r3, #31
 8009d98:	d903      	bls.n	8009da2 <get_ldnumber+0x34>
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b3a      	cmp	r3, #58	; 0x3a
 8009da0:	d1f4      	bne.n	8009d8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b3a      	cmp	r3, #58	; 0x3a
 8009da8:	d11c      	bne.n	8009de4 <get_ldnumber+0x76>
			tp = *path;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	60fa      	str	r2, [r7, #12]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	3b30      	subs	r3, #48	; 0x30
 8009dba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d80e      	bhi.n	8009de0 <get_ldnumber+0x72>
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d10a      	bne.n	8009de0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d807      	bhi.n	8009de0 <get_ldnumber+0x72>
					vol = (int)i;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	e002      	b.n	8009dea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009de4:	2300      	movs	r3, #0
 8009de6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009de8:	693b      	ldr	r3, [r7, #16]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
	...

08009df8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	70da      	strb	r2, [r3, #3]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7fe fb14 	bl	8008440 <move_window>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <check_fs+0x2a>
 8009e1e:	2304      	movs	r3, #4
 8009e20:	e038      	b.n	8009e94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3334      	adds	r3, #52	; 0x34
 8009e26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe f858 	bl	8007ee0 <ld_word>
 8009e30:	4603      	mov	r3, r0
 8009e32:	461a      	mov	r2, r3
 8009e34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d001      	beq.n	8009e40 <check_fs+0x48>
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e029      	b.n	8009e94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e46:	2be9      	cmp	r3, #233	; 0xe9
 8009e48:	d009      	beq.n	8009e5e <check_fs+0x66>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e50:	2beb      	cmp	r3, #235	; 0xeb
 8009e52:	d11e      	bne.n	8009e92 <check_fs+0x9a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009e5a:	2b90      	cmp	r3, #144	; 0x90
 8009e5c:	d119      	bne.n	8009e92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3334      	adds	r3, #52	; 0x34
 8009e62:	3336      	adds	r3, #54	; 0x36
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe f853 	bl	8007f10 <ld_dword>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e70:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <check_fs+0xa4>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d101      	bne.n	8009e7a <check_fs+0x82>
 8009e76:	2300      	movs	r3, #0
 8009e78:	e00c      	b.n	8009e94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3334      	adds	r3, #52	; 0x34
 8009e7e:	3352      	adds	r3, #82	; 0x52
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe f845 	bl	8007f10 <ld_dword>
 8009e86:	4603      	mov	r3, r0
 8009e88:	4a05      	ldr	r2, [pc, #20]	; (8009ea0 <check_fs+0xa8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d101      	bne.n	8009e92 <check_fs+0x9a>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e000      	b.n	8009e94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e92:	2302      	movs	r3, #2
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	00544146 	.word	0x00544146
 8009ea0:	33544146 	.word	0x33544146

08009ea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b096      	sub	sp, #88	; 0x58
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7ff ff58 	bl	8009d6e <get_ldnumber>
 8009ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da01      	bge.n	8009eca <find_volume+0x26>
 8009ec6:	230b      	movs	r3, #11
 8009ec8:	e22d      	b.n	800a326 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009eca:	4aa1      	ldr	r2, [pc, #644]	; (800a150 <find_volume+0x2ac>)
 8009ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <find_volume+0x3a>
 8009eda:	230c      	movs	r3, #12
 8009edc:	e223      	b.n	800a326 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ee2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	f023 0301 	bic.w	r3, r3, #1
 8009eea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01a      	beq.n	8009f2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fd ff4b 	bl	8007d94 <disk_status>
 8009efe:	4603      	mov	r3, r0
 8009f00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009f04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10c      	bne.n	8009f2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <find_volume+0x82>
 8009f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f1a:	f003 0304 	and.w	r3, r3, #4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009f22:	230a      	movs	r3, #10
 8009f24:	e1ff      	b.n	800a326 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009f26:	2300      	movs	r3, #0
 8009f28:	e1fd      	b.n	800a326 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fd ff43 	bl	8007dc8 <disk_initialize>
 8009f42:	4603      	mov	r3, r0
 8009f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f54:	2303      	movs	r3, #3
 8009f56:	e1e6      	b.n	800a326 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009f58:	79fb      	ldrb	r3, [r7, #7]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d007      	beq.n	8009f6e <find_volume+0xca>
 8009f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009f6a:	230a      	movs	r3, #10
 8009f6c:	e1db      	b.n	800a326 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f76:	f7ff ff3f 	bl	8009df8 <check_fs>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d149      	bne.n	800a01c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f88:	2300      	movs	r3, #0
 8009f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f8c:	e01e      	b.n	8009fcc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009f9c:	4413      	add	r3, r2
 8009f9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d006      	beq.n	8009fb8 <find_volume+0x114>
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	3308      	adds	r3, #8
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fd ffae 	bl	8007f10 <ld_dword>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	e000      	b.n	8009fba <find_volume+0x116>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	3358      	adds	r3, #88	; 0x58
 8009fc0:	443b      	add	r3, r7
 8009fc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc8:	3301      	adds	r3, #1
 8009fca:	643b      	str	r3, [r7, #64]	; 0x40
 8009fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d9dd      	bls.n	8009f8e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <find_volume+0x13e>
 8009fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	3358      	adds	r3, #88	; 0x58
 8009fe8:	443b      	add	r3, r7
 8009fea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009fee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <find_volume+0x15e>
 8009ff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ffa:	f7ff fefd 	bl	8009df8 <check_fs>
 8009ffe:	4603      	mov	r3, r0
 800a000:	e000      	b.n	800a004 <find_volume+0x160>
 800a002:	2303      	movs	r3, #3
 800a004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d905      	bls.n	800a01c <find_volume+0x178>
 800a010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a012:	3301      	adds	r3, #1
 800a014:	643b      	str	r3, [r7, #64]	; 0x40
 800a016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d9e2      	bls.n	8009fe2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a01c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a020:	2b04      	cmp	r3, #4
 800a022:	d101      	bne.n	800a028 <find_volume+0x184>
 800a024:	2301      	movs	r3, #1
 800a026:	e17e      	b.n	800a326 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d901      	bls.n	800a034 <find_volume+0x190>
 800a030:	230d      	movs	r3, #13
 800a032:	e178      	b.n	800a326 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	3334      	adds	r3, #52	; 0x34
 800a038:	330b      	adds	r3, #11
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fd ff50 	bl	8007ee0 <ld_word>
 800a040:	4603      	mov	r3, r0
 800a042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a046:	d001      	beq.n	800a04c <find_volume+0x1a8>
 800a048:	230d      	movs	r3, #13
 800a04a:	e16c      	b.n	800a326 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	3334      	adds	r3, #52	; 0x34
 800a050:	3316      	adds	r3, #22
 800a052:	4618      	mov	r0, r3
 800a054:	f7fd ff44 	bl	8007ee0 <ld_word>
 800a058:	4603      	mov	r3, r0
 800a05a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <find_volume+0x1cc>
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	3334      	adds	r3, #52	; 0x34
 800a066:	3324      	adds	r3, #36	; 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fd ff51 	bl	8007f10 <ld_dword>
 800a06e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a074:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	789b      	ldrb	r3, [r3, #2]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d005      	beq.n	800a094 <find_volume+0x1f0>
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	789b      	ldrb	r3, [r3, #2]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d001      	beq.n	800a094 <find_volume+0x1f0>
 800a090:	230d      	movs	r3, #13
 800a092:	e148      	b.n	800a326 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	789b      	ldrb	r3, [r3, #2]
 800a098:	461a      	mov	r2, r3
 800a09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09c:	fb02 f303 	mul.w	r3, r2, r3
 800a0a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	895b      	ldrh	r3, [r3, #10]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d008      	beq.n	800a0c8 <find_volume+0x224>
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	895b      	ldrh	r3, [r3, #10]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	895b      	ldrh	r3, [r3, #10]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <find_volume+0x228>
 800a0c8:	230d      	movs	r3, #13
 800a0ca:	e12c      	b.n	800a326 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	3334      	adds	r3, #52	; 0x34
 800a0d0:	3311      	adds	r3, #17
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fd ff04 	bl	8007ee0 <ld_word>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e2:	891b      	ldrh	r3, [r3, #8]
 800a0e4:	f003 030f 	and.w	r3, r3, #15
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <find_volume+0x24e>
 800a0ee:	230d      	movs	r3, #13
 800a0f0:	e119      	b.n	800a326 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	3334      	adds	r3, #52	; 0x34
 800a0f6:	3313      	adds	r3, #19
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fd fef1 	bl	8007ee0 <ld_word>
 800a0fe:	4603      	mov	r3, r0
 800a100:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a104:	2b00      	cmp	r3, #0
 800a106:	d106      	bne.n	800a116 <find_volume+0x272>
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	3334      	adds	r3, #52	; 0x34
 800a10c:	3320      	adds	r3, #32
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fefe 	bl	8007f10 <ld_dword>
 800a114:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	3334      	adds	r3, #52	; 0x34
 800a11a:	330e      	adds	r3, #14
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fd fedf 	bl	8007ee0 <ld_word>
 800a122:	4603      	mov	r3, r0
 800a124:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <find_volume+0x28c>
 800a12c:	230d      	movs	r3, #13
 800a12e:	e0fa      	b.n	800a326 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a134:	4413      	add	r3, r2
 800a136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a138:	8912      	ldrh	r2, [r2, #8]
 800a13a:	0912      	lsrs	r2, r2, #4
 800a13c:	b292      	uxth	r2, r2
 800a13e:	4413      	add	r3, r2
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	429a      	cmp	r2, r3
 800a148:	d204      	bcs.n	800a154 <find_volume+0x2b0>
 800a14a:	230d      	movs	r3, #13
 800a14c:	e0eb      	b.n	800a326 <find_volume+0x482>
 800a14e:	bf00      	nop
 800a150:	2000d024 	.word	0x2000d024
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15c:	8952      	ldrh	r2, [r2, #10]
 800a15e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <find_volume+0x2ca>
 800a16a:	230d      	movs	r3, #13
 800a16c:	e0db      	b.n	800a326 <find_volume+0x482>
		fmt = FS_FAT32;
 800a16e:	2303      	movs	r3, #3
 800a170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d802      	bhi.n	800a184 <find_volume+0x2e0>
 800a17e:	2302      	movs	r3, #2
 800a180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d802      	bhi.n	800a194 <find_volume+0x2f0>
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	1c9a      	adds	r2, r3, #2
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1a0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a1a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a6:	441a      	add	r2, r3
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	441a      	add	r2, r3
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a1b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d11e      	bne.n	800a1fc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	3334      	adds	r3, #52	; 0x34
 800a1c2:	332a      	adds	r3, #42	; 0x2a
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fd fe8b 	bl	8007ee0 <ld_word>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <find_volume+0x330>
 800a1d0:	230d      	movs	r3, #13
 800a1d2:	e0a8      	b.n	800a326 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	891b      	ldrh	r3, [r3, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <find_volume+0x33c>
 800a1dc:	230d      	movs	r3, #13
 800a1de:	e0a2      	b.n	800a326 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	3334      	adds	r3, #52	; 0x34
 800a1e4:	332c      	adds	r3, #44	; 0x2c
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fd fe92 	bl	8007f10 <ld_dword>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1fa:	e01f      	b.n	800a23c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	891b      	ldrh	r3, [r3, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <find_volume+0x364>
 800a204:	230d      	movs	r3, #13
 800a206:	e08e      	b.n	800a326 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a20e:	441a      	add	r2, r3
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d103      	bne.n	800a224 <find_volume+0x380>
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	e00a      	b.n	800a23a <find_volume+0x396>
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	699a      	ldr	r2, [r3, #24]
 800a228:	4613      	mov	r3, r2
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	4413      	add	r3, r2
 800a22e:	085a      	lsrs	r2, r3, #1
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a23a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a242:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a246:	0a5b      	lsrs	r3, r3, #9
 800a248:	429a      	cmp	r2, r3
 800a24a:	d201      	bcs.n	800a250 <find_volume+0x3ac>
 800a24c:	230d      	movs	r3, #13
 800a24e:	e06a      	b.n	800a326 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f04f 32ff 	mov.w	r2, #4294967295
 800a256:	615a      	str	r2, [r3, #20]
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	695a      	ldr	r2, [r3, #20]
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	2280      	movs	r2, #128	; 0x80
 800a264:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d149      	bne.n	800a302 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	3334      	adds	r3, #52	; 0x34
 800a272:	3330      	adds	r3, #48	; 0x30
 800a274:	4618      	mov	r0, r3
 800a276:	f7fd fe33 	bl	8007ee0 <ld_word>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d140      	bne.n	800a302 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a282:	3301      	adds	r3, #1
 800a284:	4619      	mov	r1, r3
 800a286:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a288:	f7fe f8da 	bl	8008440 <move_window>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d137      	bne.n	800a302 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	2200      	movs	r2, #0
 800a296:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	3334      	adds	r3, #52	; 0x34
 800a29c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fd fe1d 	bl	8007ee0 <ld_word>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d127      	bne.n	800a302 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	3334      	adds	r3, #52	; 0x34
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fd fe2a 	bl	8007f10 <ld_dword>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	4a1c      	ldr	r2, [pc, #112]	; (800a330 <find_volume+0x48c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d11e      	bne.n	800a302 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	3334      	adds	r3, #52	; 0x34
 800a2c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fd fe1f 	bl	8007f10 <ld_dword>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <find_volume+0x490>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d113      	bne.n	800a302 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	3334      	adds	r3, #52	; 0x34
 800a2de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fd fe14 	bl	8007f10 <ld_dword>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	3334      	adds	r3, #52	; 0x34
 800a2f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fd fe0a 	bl	8007f10 <ld_dword>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a308:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a30a:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <find_volume+0x494>)
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <find_volume+0x494>)
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	4b08      	ldr	r3, [pc, #32]	; (800a338 <find_volume+0x494>)
 800a318:	881a      	ldrh	r2, [r3, #0]
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a31e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a320:	f7fe f826 	bl	8008370 <clear_lock>
#endif
	return FR_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3758      	adds	r7, #88	; 0x58
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	41615252 	.word	0x41615252
 800a334:	61417272 	.word	0x61417272
 800a338:	2000d02c 	.word	0x2000d02c

0800a33c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a346:	2309      	movs	r3, #9
 800a348:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01c      	beq.n	800a38a <validate+0x4e>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d018      	beq.n	800a38a <validate+0x4e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d013      	beq.n	800a38a <validate+0x4e>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	889a      	ldrh	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	88db      	ldrh	r3, [r3, #6]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d10c      	bne.n	800a38a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd fd0c 	bl	8007d94 <disk_status>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <validate+0x4e>
			res = FR_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <validate+0x5a>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	e000      	b.n	800a398 <validate+0x5c>
 800a396:	2300      	movs	r3, #0
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	6013      	str	r3, [r2, #0]
	return res;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a3ba:	f107 0310 	add.w	r3, r7, #16
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fcd5 	bl	8009d6e <get_ldnumber>
 800a3c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	da01      	bge.n	800a3d0 <f_mount+0x28>
 800a3cc:	230b      	movs	r3, #11
 800a3ce:	e02b      	b.n	800a428 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a3d0:	4a17      	ldr	r2, [pc, #92]	; (800a430 <f_mount+0x88>)
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a3e0:	69b8      	ldr	r0, [r7, #24]
 800a3e2:	f7fd ffc5 	bl	8008370 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	490d      	ldr	r1, [pc, #52]	; (800a430 <f_mount+0x88>)
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <f_mount+0x66>
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d001      	beq.n	800a412 <f_mount+0x6a>
 800a40e:	2300      	movs	r3, #0
 800a410:	e00a      	b.n	800a428 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a412:	f107 010c 	add.w	r1, r7, #12
 800a416:	f107 0308 	add.w	r3, r7, #8
 800a41a:	2200      	movs	r2, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fd41 	bl	8009ea4 <find_volume>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a426:	7dfb      	ldrb	r3, [r7, #23]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	2000d024 	.word	0x2000d024

0800a434 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b09a      	sub	sp, #104	; 0x68
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <f_open+0x18>
 800a448:	2309      	movs	r3, #9
 800a44a:	e1bd      	b.n	800a7c8 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a452:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a454:	79fa      	ldrb	r2, [r7, #7]
 800a456:	f107 0110 	add.w	r1, r7, #16
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fd20 	bl	8009ea4 <find_volume>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a46a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 81a1 	bne.w	800a7b6 <f_open+0x382>
		dj.obj.fs = fs;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800a478:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a47c:	f001 fba9 	bl	800bbd2 <ff_memalloc>
 800a480:	65b8      	str	r0, [r7, #88]	; 0x58
 800a482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <f_open+0x58>
 800a488:	2311      	movs	r3, #17
 800a48a:	e19d      	b.n	800a7c8 <f_open+0x394>
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a490:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	f107 0314 	add.w	r3, r7, #20
 800a498:	4611      	mov	r1, r2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fbf6 	bl	8009c8c <follow_path>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a4a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d11a      	bne.n	800a4e4 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a4ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a4b2:	b25b      	sxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	da03      	bge.n	800a4c0 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800a4b8:	2306      	movs	r3, #6
 800a4ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a4be:	e011      	b.n	800a4e4 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	f023 0301 	bic.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bf14      	ite	ne
 800a4ca:	2301      	movne	r3, #1
 800a4cc:	2300      	moveq	r3, #0
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	f107 0314 	add.w	r3, r7, #20
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fd fe01 	bl	80080e0 <chk_lock>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	f003 031c 	and.w	r3, r3, #28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d07f      	beq.n	800a5ee <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800a4ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d017      	beq.n	800a526 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d10e      	bne.n	800a51c <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a4fe:	f7fd fe4b 	bl	8008198 <enq_lock>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d006      	beq.n	800a516 <f_open+0xe2>
 800a508:	f107 0314 	add.w	r3, r7, #20
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff f82f 	bl	8009570 <dir_register>
 800a512:	4603      	mov	r3, r0
 800a514:	e000      	b.n	800a518 <f_open+0xe4>
 800a516:	2312      	movs	r3, #18
 800a518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	f043 0308 	orr.w	r3, r3, #8
 800a522:	71fb      	strb	r3, [r7, #7]
 800a524:	e010      	b.n	800a548 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a526:	7ebb      	ldrb	r3, [r7, #26]
 800a528:	f003 0311 	and.w	r3, r3, #17
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <f_open+0x104>
					res = FR_DENIED;
 800a530:	2307      	movs	r3, #7
 800a532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a536:	e007      	b.n	800a548 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <f_open+0x114>
 800a542:	2308      	movs	r3, #8
 800a544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a548:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d168      	bne.n	800a622 <f_open+0x1ee>
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d063      	beq.n	800a622 <f_open+0x1ee>
				dw = GET_FATTIME();
 800a55a:	f7fd fcb9 	bl	8007ed0 <get_fattime>
 800a55e:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	330e      	adds	r3, #14
 800a564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a566:	4618      	mov	r0, r3
 800a568:	f7fd fd10 	bl	8007f8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56e:	3316      	adds	r3, #22
 800a570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a572:	4618      	mov	r0, r3
 800a574:	f7fd fd0a 	bl	8007f8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57a:	330b      	adds	r3, #11
 800a57c:	2220      	movs	r2, #32
 800a57e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a584:	4611      	mov	r1, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fc61 	bl	8008e4e <ld_clust>
 800a58c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a592:	2200      	movs	r2, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fc79 	bl	8008e8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59c:	331c      	adds	r3, #28
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fd fcf3 	bl	8007f8c <st_dword>
					fs->wflag = 1;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d037      	beq.n	800a622 <f_open+0x1ee>
						dw = fs->winsect;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800a5b8:	f107 0314 	add.w	r3, r7, #20
 800a5bc:	2200      	movs	r2, #0
 800a5be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fe f98c 	bl	80088de <remove_chain>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a5cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d126      	bne.n	800a622 <f_open+0x1ee>
							res = move_window(fs, dw);
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fd ff31 	bl	8008440 <move_window>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	611a      	str	r2, [r3, #16]
 800a5ec:	e019      	b.n	800a622 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a5ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d115      	bne.n	800a622 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a5f6:	7ebb      	ldrb	r3, [r7, #26]
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <f_open+0x1d4>
					res = FR_NO_FILE;
 800a600:	2304      	movs	r3, #4
 800a602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a606:	e00c      	b.n	800a622 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a608:	79fb      	ldrb	r3, [r7, #7]
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d007      	beq.n	800a622 <f_open+0x1ee>
 800a612:	7ebb      	ldrb	r3, [r7, #26]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <f_open+0x1ee>
						res = FR_DENIED;
 800a61c:	2307      	movs	r3, #7
 800a61e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a622:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a626:	2b00      	cmp	r3, #0
 800a628:	d128      	bne.n	800a67c <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a62a:	79fb      	ldrb	r3, [r7, #7]
 800a62c:	f003 0308 	and.w	r3, r3, #8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <f_open+0x208>
				mode |= FA_MODIFIED;
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	f023 0301 	bic.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	bf14      	ite	ne
 800a654:	2301      	movne	r3, #1
 800a656:	2300      	moveq	r3, #0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd fdba 	bl	80081dc <inc_lock>
 800a668:	4602      	mov	r2, r0
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <f_open+0x248>
 800a676:	2302      	movs	r3, #2
 800a678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a67c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 8095 	bne.w	800a7b0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fbde 	bl	8008e4e <ld_clust>
 800a692:	4602      	mov	r2, r0
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	331c      	adds	r3, #28
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd fc37 	bl	8007f10 <ld_dword>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	88da      	ldrh	r2, [r3, #6]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	79fa      	ldrb	r2, [r7, #7]
 800a6c0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3330      	adds	r3, #48	; 0x30
 800a6d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6dc:	2100      	movs	r1, #0
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd fca1 	bl	8008026 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d060      	beq.n	800a7b0 <f_open+0x37c>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d05c      	beq.n	800a7b0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	895b      	ldrh	r3, [r3, #10]
 800a702:	025b      	lsls	r3, r3, #9
 800a704:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a712:	e016      	b.n	800a742 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fd ff4c 	bl	80085b6 <get_fat>
 800a71e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a722:	2b01      	cmp	r3, #1
 800a724:	d802      	bhi.n	800a72c <f_open+0x2f8>
 800a726:	2302      	movs	r3, #2
 800a728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a72c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	d102      	bne.n	800a73a <f_open+0x306>
 800a734:	2301      	movs	r3, #1
 800a736:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a73a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a746:	2b00      	cmp	r3, #0
 800a748:	d103      	bne.n	800a752 <f_open+0x31e>
 800a74a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a74e:	429a      	cmp	r2, r3
 800a750:	d8e0      	bhi.n	800a714 <f_open+0x2e0>
				}
				fp->clust = clst;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a756:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a758:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d127      	bne.n	800a7b0 <f_open+0x37c>
 800a760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a766:	2b00      	cmp	r3, #0
 800a768:	d022      	beq.n	800a7b0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd ff02 	bl	8008578 <clust2sect>
 800a774:	64b8      	str	r0, [r7, #72]	; 0x48
 800a776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <f_open+0x350>
						res = FR_INT_ERR;
 800a77c:	2302      	movs	r3, #2
 800a77e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a782:	e015      	b.n	800a7b0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a786:	0a5a      	lsrs	r2, r3, #9
 800a788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a78a:	441a      	add	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	7858      	ldrb	r0, [r3, #1]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	2301      	movs	r3, #1
 800a7a0:	f7fd fb38 	bl	8007e14 <disk_read>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <f_open+0x37c>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800a7b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7b2:	f001 fa1a 	bl	800bbea <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a7b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <f_open+0x390>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a7c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3768      	adds	r7, #104	; 0x68
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08e      	sub	sp, #56	; 0x38
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f107 0214 	add.w	r2, r7, #20
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fda3 	bl	800a33c <validate>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a7fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a800:	2b00      	cmp	r3, #0
 800a802:	d107      	bne.n	800a814 <f_read+0x44>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	7d5b      	ldrb	r3, [r3, #21]
 800a808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a80c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <f_read+0x4a>
 800a814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a818:	e115      	b.n	800aa46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	7d1b      	ldrb	r3, [r3, #20]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <f_read+0x5a>
 800a826:	2307      	movs	r3, #7
 800a828:	e10d      	b.n	800aa46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	f240 80fe 	bls.w	800aa3c <f_read+0x26c>
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a844:	e0fa      	b.n	800aa3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f040 80c6 	bne.w	800a9e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	0a5b      	lsrs	r3, r3, #9
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	8952      	ldrh	r2, [r2, #10]
 800a85e:	3a01      	subs	r2, #1
 800a860:	4013      	ands	r3, r2
 800a862:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d12f      	bne.n	800a8ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d103      	bne.n	800a87a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	633b      	str	r3, [r7, #48]	; 0x30
 800a878:	e013      	b.n	800a8a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d007      	beq.n	800a892 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	4619      	mov	r1, r3
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f7fe f925 	bl	8008ad8 <clmt_clust>
 800a88e:	6338      	str	r0, [r7, #48]	; 0x30
 800a890:	e007      	b.n	800a8a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fd fe8b 	bl	80085b6 <get_fat>
 800a8a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d804      	bhi.n	800a8b2 <f_read+0xe2>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	755a      	strb	r2, [r3, #21]
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e0c9      	b.n	800aa46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d104      	bne.n	800a8c4 <f_read+0xf4>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	755a      	strb	r2, [r3, #21]
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e0c0      	b.n	800aa46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	f7fd fe50 	bl	8008578 <clust2sect>
 800a8d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <f_read+0x11a>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	755a      	strb	r2, [r3, #21]
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e0ad      	b.n	800aa46 <f_read+0x276>
			sect += csect;
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	0a5b      	lsrs	r3, r3, #9
 800a8f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d039      	beq.n	800a972 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	4413      	add	r3, r2
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	8952      	ldrh	r2, [r2, #10]
 800a908:	4293      	cmp	r3, r2
 800a90a:	d905      	bls.n	800a918 <f_read+0x148>
					cc = fs->csize - csect;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	895b      	ldrh	r3, [r3, #10]
 800a910:	461a      	mov	r2, r3
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	7858      	ldrb	r0, [r3, #1]
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a922:	f7fd fa77 	bl	8007e14 <disk_read>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <f_read+0x166>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2201      	movs	r2, #1
 800a930:	755a      	strb	r2, [r3, #21]
 800a932:	2301      	movs	r3, #1
 800a934:	e087      	b.n	800aa46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	7d1b      	ldrb	r3, [r3, #20]
 800a93a:	b25b      	sxtb	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da14      	bge.n	800a96a <f_read+0x19a>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a1a      	ldr	r2, [r3, #32]
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d90d      	bls.n	800a96a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6a1a      	ldr	r2, [r3, #32]
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	025b      	lsls	r3, r3, #9
 800a958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a95a:	18d0      	adds	r0, r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	3330      	adds	r3, #48	; 0x30
 800a960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a964:	4619      	mov	r1, r3
 800a966:	f7fd fb3d 	bl	8007fe4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	025b      	lsls	r3, r3, #9
 800a96e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a970:	e050      	b.n	800aa14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d02e      	beq.n	800a9da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	7d1b      	ldrb	r3, [r3, #20]
 800a980:	b25b      	sxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	da18      	bge.n	800a9b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	7858      	ldrb	r0, [r3, #1]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6a1a      	ldr	r2, [r3, #32]
 800a994:	2301      	movs	r3, #1
 800a996:	f7fd fa5d 	bl	8007e54 <disk_write>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <f_read+0x1da>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	755a      	strb	r2, [r3, #21]
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e04d      	b.n	800aa46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	7d1b      	ldrb	r3, [r3, #20]
 800a9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	7858      	ldrb	r0, [r3, #1]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	f7fd fa25 	bl	8007e14 <disk_read>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <f_read+0x20a>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	755a      	strb	r2, [r3, #21]
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e035      	b.n	800aa46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a9ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d901      	bls.n	800a9fa <f_read+0x22a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa08:	4413      	add	r3, r2
 800aa0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa10:	f7fd fae8 	bl	8007fe4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	4413      	add	r3, r2
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	699a      	ldr	r2, [r3, #24]
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	441a      	add	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	619a      	str	r2, [r3, #24]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	441a      	add	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f47f af01 	bne.w	800a846 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3738      	adds	r7, #56	; 0x38
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b08c      	sub	sp, #48	; 0x30
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f107 0210 	add.w	r2, r7, #16
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7ff fc64 	bl	800a33c <validate>
 800aa74:	4603      	mov	r3, r0
 800aa76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d107      	bne.n	800aa92 <f_write+0x44>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	7d5b      	ldrb	r3, [r3, #21]
 800aa86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <f_write+0x4a>
 800aa92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa96:	e14b      	b.n	800ad30 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	7d1b      	ldrb	r3, [r3, #20]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <f_write+0x5a>
 800aaa4:	2307      	movs	r3, #7
 800aaa6:	e143      	b.n	800ad30 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	699a      	ldr	r2, [r3, #24]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	441a      	add	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	f080 812d 	bcs.w	800ad14 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	43db      	mvns	r3, r3
 800aac0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aac2:	e127      	b.n	800ad14 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f040 80e3 	bne.w	800ac98 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	0a5b      	lsrs	r3, r3, #9
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	8952      	ldrh	r2, [r2, #10]
 800aadc:	3a01      	subs	r2, #1
 800aade:	4013      	ands	r3, r2
 800aae0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d143      	bne.n	800ab70 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10c      	bne.n	800ab0a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d11a      	bne.n	800ab32 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2100      	movs	r1, #0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd ff51 	bl	80089a8 <create_chain>
 800ab06:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab08:	e013      	b.n	800ab32 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	4619      	mov	r1, r3
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7fd ffdd 	bl	8008ad8 <clmt_clust>
 800ab1e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab20:	e007      	b.n	800ab32 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f7fd ff3c 	bl	80089a8 <create_chain>
 800ab30:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 80f2 	beq.w	800ad1e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d104      	bne.n	800ab4a <f_write+0xfc>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2202      	movs	r2, #2
 800ab44:	755a      	strb	r2, [r3, #21]
 800ab46:	2302      	movs	r3, #2
 800ab48:	e0f2      	b.n	800ad30 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab50:	d104      	bne.n	800ab5c <f_write+0x10e>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2201      	movs	r2, #1
 800ab56:	755a      	strb	r2, [r3, #21]
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e0e9      	b.n	800ad30 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab60:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d102      	bne.n	800ab70 <f_write+0x122>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	7d1b      	ldrb	r3, [r3, #20]
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da18      	bge.n	800abac <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	7858      	ldrb	r0, [r3, #1]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a1a      	ldr	r2, [r3, #32]
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f7fd f963 	bl	8007e54 <disk_write>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d004      	beq.n	800ab9e <f_write+0x150>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	755a      	strb	r2, [r3, #21]
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e0c8      	b.n	800ad30 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	7d1b      	ldrb	r3, [r3, #20]
 800aba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	4619      	mov	r1, r3
 800abb4:	4610      	mov	r0, r2
 800abb6:	f7fd fcdf 	bl	8008578 <clust2sect>
 800abba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d104      	bne.n	800abcc <f_write+0x17e>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2202      	movs	r2, #2
 800abc6:	755a      	strb	r2, [r3, #21]
 800abc8:	2302      	movs	r3, #2
 800abca:	e0b1      	b.n	800ad30 <f_write+0x2e2>
			sect += csect;
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	4413      	add	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	0a5b      	lsrs	r3, r3, #9
 800abd8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d03c      	beq.n	800ac5a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	4413      	add	r3, r2
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	8952      	ldrh	r2, [r2, #10]
 800abea:	4293      	cmp	r3, r2
 800abec:	d905      	bls.n	800abfa <f_write+0x1ac>
					cc = fs->csize - csect;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	895b      	ldrh	r3, [r3, #10]
 800abf2:	461a      	mov	r2, r3
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	7858      	ldrb	r0, [r3, #1]
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	69f9      	ldr	r1, [r7, #28]
 800ac04:	f7fd f926 	bl	8007e54 <disk_write>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <f_write+0x1ca>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2201      	movs	r2, #1
 800ac12:	755a      	strb	r2, [r3, #21]
 800ac14:	2301      	movs	r3, #1
 800ac16:	e08b      	b.n	800ad30 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6a1a      	ldr	r2, [r3, #32]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	6a3a      	ldr	r2, [r7, #32]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d915      	bls.n	800ac52 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a1a      	ldr	r2, [r3, #32]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	025b      	lsls	r3, r3, #9
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac3e:	4619      	mov	r1, r3
 800ac40:	f7fd f9d0 	bl	8007fe4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	7d1b      	ldrb	r3, [r3, #20]
 800ac48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	025b      	lsls	r3, r3, #9
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ac58:	e03f      	b.n	800acda <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d016      	beq.n	800ac92 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	699a      	ldr	r2, [r3, #24]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d210      	bcs.n	800ac92 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	7858      	ldrb	r0, [r3, #1]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	f7fd f8c9 	bl	8007e14 <disk_read>
 800ac82:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d004      	beq.n	800ac92 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	755a      	strb	r2, [r3, #21]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e04e      	b.n	800ad30 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d901      	bls.n	800acb2 <f_write+0x264>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc0:	4413      	add	r3, r2
 800acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc4:	69f9      	ldr	r1, [r7, #28]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fd f98c 	bl	8007fe4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	7d1b      	ldrb	r3, [r3, #20]
 800acd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	4413      	add	r3, r2
 800ace0:	61fb      	str	r3, [r7, #28]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	699a      	ldr	r2, [r3, #24]
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	441a      	add	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	619a      	str	r2, [r3, #24]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	68da      	ldr	r2, [r3, #12]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	bf38      	it	cc
 800acfa:	461a      	movcc	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	60da      	str	r2, [r3, #12]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	441a      	add	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f47f aed4 	bne.w	800aac4 <f_write+0x76>
 800ad1c:	e000      	b.n	800ad20 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	7d1b      	ldrb	r3, [r3, #20]
 800ad24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3730      	adds	r7, #48	; 0x30
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f107 0208 	add.w	r2, r7, #8
 800ad46:	4611      	mov	r1, r2
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7ff faf7 	bl	800a33c <validate>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d168      	bne.n	800ae2a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	7d1b      	ldrb	r3, [r3, #20]
 800ad5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d062      	beq.n	800ae2a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	7d1b      	ldrb	r3, [r3, #20]
 800ad68:	b25b      	sxtb	r3, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da15      	bge.n	800ad9a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	7858      	ldrb	r0, [r3, #1]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a1a      	ldr	r2, [r3, #32]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	f7fd f869 	bl	8007e54 <disk_write>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <f_sync+0x54>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e04f      	b.n	800ae2c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7d1b      	ldrb	r3, [r3, #20]
 800ad90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ad9a:	f7fd f899 	bl	8007ed0 <get_fattime>
 800ad9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f7fd fb49 	bl	8008440 <move_window>
 800adae:	4603      	mov	r3, r0
 800adb0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d138      	bne.n	800ae2a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	330b      	adds	r3, #11
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	330b      	adds	r3, #11
 800adc8:	f042 0220 	orr.w	r2, r2, #32
 800adcc:	b2d2      	uxtb	r2, r2
 800adce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	461a      	mov	r2, r3
 800adda:	68f9      	ldr	r1, [r7, #12]
 800addc:	f7fe f856 	bl	8008e8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f103 021c 	add.w	r2, r3, #28
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7fd f8cd 	bl	8007f8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3316      	adds	r3, #22
 800adf6:	6939      	ldr	r1, [r7, #16]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fd f8c7 	bl	8007f8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3312      	adds	r3, #18
 800ae02:	2100      	movs	r1, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fd f8a6 	bl	8007f56 <st_word>
					fs->wflag = 1;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fd fb42 	bl	800849c <sync_fs>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	7d1b      	ldrb	r3, [r3, #20]
 800ae20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff ff7b 	bl	800ad38 <f_sync>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d118      	bne.n	800ae7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f107 0208 	add.w	r2, r7, #8
 800ae52:	4611      	mov	r1, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff fa71 	bl	800a33c <validate>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10c      	bne.n	800ae7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fd fa45 	bl	80082f8 <dec_lock>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b090      	sub	sp, #64	; 0x40
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f107 0208 	add.w	r2, r7, #8
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff fa4e 	bl	800a33c <validate>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800aea6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <f_lseek+0x2e>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	7d5b      	ldrb	r3, [r3, #21]
 800aeb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800aeb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <f_lseek+0x3c>
 800aebe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aec2:	e1e6      	b.n	800b292 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 80d1 	beq.w	800b070 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed4:	d15a      	bne.n	800af8c <f_lseek+0x104>
			tbl = fp->cltbl;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeda:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	627a      	str	r2, [r7, #36]	; 0x24
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	2302      	movs	r3, #2
 800aee8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d03a      	beq.n	800af6c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	613b      	str	r3, [r7, #16]
 800aefa:	2300      	movs	r3, #0
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	3302      	adds	r3, #2
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	3301      	adds	r3, #1
 800af0c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af12:	4618      	mov	r0, r3
 800af14:	f7fd fb4f 	bl	80085b6 <get_fat>
 800af18:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d804      	bhi.n	800af2a <f_lseek+0xa2>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	755a      	strb	r2, [r3, #21]
 800af26:	2302      	movs	r3, #2
 800af28:	e1b3      	b.n	800b292 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af30:	d104      	bne.n	800af3c <f_lseek+0xb4>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	755a      	strb	r2, [r3, #21]
 800af38:	2301      	movs	r3, #1
 800af3a:	e1aa      	b.n	800b292 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af42:	429a      	cmp	r2, r3
 800af44:	d0de      	beq.n	800af04 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800af46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d809      	bhi.n	800af62 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	1d1a      	adds	r2, r3, #4
 800af52:	627a      	str	r2, [r7, #36]	; 0x24
 800af54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	627a      	str	r2, [r7, #36]	; 0x24
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af68:	429a      	cmp	r2, r3
 800af6a:	d3c4      	bcc.n	800aef6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af72:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800af74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d803      	bhi.n	800af84 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	e184      	b.n	800b28e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800af84:	2311      	movs	r3, #17
 800af86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800af8a:	e180      	b.n	800b28e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	429a      	cmp	r2, r3
 800af94:	d902      	bls.n	800af9c <f_lseek+0x114>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8172 	beq.w	800b28e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	3b01      	subs	r3, #1
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7fd fd91 	bl	8008ad8 <clmt_clust>
 800afb6:	4602      	mov	r2, r0
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	4619      	mov	r1, r3
 800afc4:	4610      	mov	r0, r2
 800afc6:	f7fd fad7 	bl	8008578 <clust2sect>
 800afca:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d104      	bne.n	800afdc <f_lseek+0x154>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	755a      	strb	r2, [r3, #21]
 800afd8:	2302      	movs	r3, #2
 800afda:	e15a      	b.n	800b292 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	3b01      	subs	r3, #1
 800afe0:	0a5b      	lsrs	r3, r3, #9
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	8952      	ldrh	r2, [r2, #10]
 800afe6:	3a01      	subs	r2, #1
 800afe8:	4013      	ands	r3, r2
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	4413      	add	r3, r2
 800afee:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8148 	beq.w	800b28e <f_lseek+0x406>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	429a      	cmp	r2, r3
 800b006:	f000 8142 	beq.w	800b28e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	7d1b      	ldrb	r3, [r3, #20]
 800b00e:	b25b      	sxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	da18      	bge.n	800b046 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	7858      	ldrb	r0, [r3, #1]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1a      	ldr	r2, [r3, #32]
 800b022:	2301      	movs	r3, #1
 800b024:	f7fc ff16 	bl	8007e54 <disk_write>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d004      	beq.n	800b038 <f_lseek+0x1b0>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	755a      	strb	r2, [r3, #21]
 800b034:	2301      	movs	r3, #1
 800b036:	e12c      	b.n	800b292 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	7d1b      	ldrb	r3, [r3, #20]
 800b03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b040:	b2da      	uxtb	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	7858      	ldrb	r0, [r3, #1]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b050:	2301      	movs	r3, #1
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	f7fc fede 	bl	8007e14 <disk_read>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d004      	beq.n	800b068 <f_lseek+0x1e0>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	755a      	strb	r2, [r3, #21]
 800b064:	2301      	movs	r3, #1
 800b066:	e114      	b.n	800b292 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	621a      	str	r2, [r3, #32]
 800b06e:	e10e      	b.n	800b28e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d908      	bls.n	800b08c <f_lseek+0x204>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	7d1b      	ldrb	r3, [r3, #20]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b00      	cmp	r3, #0
 800b084:	d102      	bne.n	800b08c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b09a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80a7 	beq.w	800b1f2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	895b      	ldrh	r3, [r3, #10]
 800b0a8:	025b      	lsls	r3, r3, #9
 800b0aa:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01b      	beq.n	800b0ea <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	1e5a      	subs	r2, r3, #1
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	1e59      	subs	r1, r3, #1
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d30f      	bcc.n	800b0ea <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	1e5a      	subs	r2, r3, #1
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	425b      	negs	r3, r3
 800b0d2:	401a      	ands	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0e8:	e022      	b.n	800b130 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d119      	bne.n	800b12a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fd fc54 	bl	80089a8 <create_chain>
 800b100:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	2b01      	cmp	r3, #1
 800b106:	d104      	bne.n	800b112 <f_lseek+0x28a>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	755a      	strb	r2, [r3, #21]
 800b10e:	2302      	movs	r3, #2
 800b110:	e0bf      	b.n	800b292 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d104      	bne.n	800b124 <f_lseek+0x29c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	755a      	strb	r2, [r3, #21]
 800b120:	2301      	movs	r3, #1
 800b122:	e0b6      	b.n	800b292 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b128:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b12e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	2b00      	cmp	r3, #0
 800b134:	d05d      	beq.n	800b1f2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b136:	e03a      	b.n	800b1ae <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	699a      	ldr	r2, [r3, #24]
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	441a      	add	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	7d1b      	ldrb	r3, [r3, #20]
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fd fc23 	bl	80089a8 <create_chain>
 800b162:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	2b00      	cmp	r3, #0
 800b168:	d108      	bne.n	800b17c <f_lseek+0x2f4>
							ofs = 0; break;
 800b16a:	2300      	movs	r3, #0
 800b16c:	603b      	str	r3, [r7, #0]
 800b16e:	e022      	b.n	800b1b6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b174:	4618      	mov	r0, r3
 800b176:	f7fd fa1e 	bl	80085b6 <get_fat>
 800b17a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b182:	d104      	bne.n	800b18e <f_lseek+0x306>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	755a      	strb	r2, [r3, #21]
 800b18a:	2301      	movs	r3, #1
 800b18c:	e081      	b.n	800b292 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	2b01      	cmp	r3, #1
 800b192:	d904      	bls.n	800b19e <f_lseek+0x316>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d304      	bcc.n	800b1a8 <f_lseek+0x320>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	755a      	strb	r2, [r3, #21]
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e074      	b.n	800b292 <f_lseek+0x40a>
					fp->clust = clst;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1ac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d8c0      	bhi.n	800b138 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	699a      	ldr	r2, [r3, #24]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	441a      	add	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d012      	beq.n	800b1f2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fd f9d1 	bl	8008578 <clust2sect>
 800b1d6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d104      	bne.n	800b1e8 <f_lseek+0x360>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	755a      	strb	r2, [r3, #21]
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	e054      	b.n	800b292 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	0a5b      	lsrs	r3, r3, #9
 800b1ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1ee:	4413      	add	r3, r2
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699a      	ldr	r2, [r3, #24]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d90a      	bls.n	800b214 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	699a      	ldr	r2, [r3, #24]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	7d1b      	ldrb	r3, [r3, #20]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d036      	beq.n	800b28e <f_lseek+0x406>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b226:	429a      	cmp	r2, r3
 800b228:	d031      	beq.n	800b28e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	7d1b      	ldrb	r3, [r3, #20]
 800b22e:	b25b      	sxtb	r3, r3
 800b230:	2b00      	cmp	r3, #0
 800b232:	da18      	bge.n	800b266 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	7858      	ldrb	r0, [r3, #1]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1a      	ldr	r2, [r3, #32]
 800b242:	2301      	movs	r3, #1
 800b244:	f7fc fe06 	bl	8007e54 <disk_write>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <f_lseek+0x3d0>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	755a      	strb	r2, [r3, #21]
 800b254:	2301      	movs	r3, #1
 800b256:	e01c      	b.n	800b292 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	7d1b      	ldrb	r3, [r3, #20]
 800b25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b260:	b2da      	uxtb	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	7858      	ldrb	r0, [r3, #1]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b270:	2301      	movs	r3, #1
 800b272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b274:	f7fc fdce 	bl	8007e14 <disk_read>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d004      	beq.n	800b288 <f_lseek+0x400>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	755a      	strb	r2, [r3, #21]
 800b284:	2301      	movs	r3, #1
 800b286:	e004      	b.n	800b292 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b28c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b28e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b292:	4618      	mov	r0, r3
 800b294:	3740      	adds	r7, #64	; 0x40
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <f_opendir+0x14>
 800b2aa:	2309      	movs	r3, #9
 800b2ac:	e074      	b.n	800b398 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b2b2:	f107 0108 	add.w	r1, r7, #8
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe fdf2 	bl	8009ea4 <find_volume>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d15f      	bne.n	800b38a <f_opendir+0xf0>
		obj->fs = fs;
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800b2d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b2d4:	f000 fc7d 	bl	800bbd2 <ff_memalloc>
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <f_opendir+0x4a>
 800b2e0:	2311      	movs	r3, #17
 800b2e2:	e059      	b.n	800b398 <f_opendir+0xfe>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7fe fccc 	bl	8009c8c <follow_path>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d13d      	bne.n	800b37a <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b304:	b25b      	sxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	db12      	blt.n	800b330 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	799b      	ldrb	r3, [r3, #6]
 800b30e:	f003 0310 	and.w	r3, r3, #16
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	4619      	mov	r1, r3
 800b31e:	4610      	mov	r0, r2
 800b320:	f7fd fd95 	bl	8008e4e <ld_clust>
 800b324:	4602      	mov	r2, r0
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	609a      	str	r2, [r3, #8]
 800b32a:	e001      	b.n	800b330 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b32c:	2305      	movs	r3, #5
 800b32e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d121      	bne.n	800b37a <f_opendir+0xe0>
				obj->id = fs->id;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	88da      	ldrh	r2, [r3, #6]
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b33e:	2100      	movs	r1, #0
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7fd fbfd 	bl	8008b40 <dir_sdi>
 800b346:	4603      	mov	r3, r0
 800b348:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d114      	bne.n	800b37a <f_opendir+0xe0>
					if (obj->sclust) {
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00d      	beq.n	800b374 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b358:	2100      	movs	r1, #0
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7fc ff3e 	bl	80081dc <inc_lock>
 800b360:	4602      	mov	r2, r0
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d105      	bne.n	800b37a <f_opendir+0xe0>
 800b36e:	2312      	movs	r3, #18
 800b370:	75fb      	strb	r3, [r7, #23]
 800b372:	e002      	b.n	800b37a <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	2200      	movs	r2, #0
 800b378:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 fc35 	bl	800bbea <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	2b04      	cmp	r3, #4
 800b384:	d101      	bne.n	800b38a <f_opendir+0xf0>
 800b386:	2305      	movs	r3, #5
 800b388:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <f_opendir+0xfc>
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b396:	7dfb      	ldrb	r3, [r7, #23]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f107 0208 	add.w	r2, r7, #8
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe ffc3 	bl	800a33c <validate>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d110      	bne.n	800b3e2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d006      	beq.n	800b3d6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fc ff93 	bl	80082f8 <dec_lock>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f107 020c 	add.w	r2, r7, #12
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe ff9c 	bl	800a33c <validate>
 800b404:	4603      	mov	r3, r0
 800b406:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d136      	bne.n	800b47c <f_readdir+0x90>
		if (!fno) {
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b414:	2100      	movs	r1, #0
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7fd fb92 	bl	8008b40 <dir_sdi>
 800b41c:	4603      	mov	r3, r0
 800b41e:	75fb      	strb	r3, [r7, #23]
 800b420:	e02c      	b.n	800b47c <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800b422:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b426:	f000 fbd4 	bl	800bbd2 <ff_memalloc>
 800b42a:	6138      	str	r0, [r7, #16]
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <f_readdir+0x4a>
 800b432:	2311      	movs	r3, #17
 800b434:	e023      	b.n	800b47e <f_readdir+0x92>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800b43c:	2100      	movs	r1, #0
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7fd ff2f 	bl	80092a2 <dir_read>
 800b444:	4603      	mov	r3, r0
 800b446:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d101      	bne.n	800b452 <f_readdir+0x66>
 800b44e:	2300      	movs	r3, #0
 800b450:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10e      	bne.n	800b476 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7fe f980 	bl	8009760 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b460:	2100      	movs	r1, #0
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7fd fbe7 	bl	8008c36 <dir_next>
 800b468:	4603      	mov	r3, r0
 800b46a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d101      	bne.n	800b476 <f_readdir+0x8a>
 800b472:	2300      	movs	r3, #0
 800b474:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800b476:	6938      	ldr	r0, [r7, #16]
 800b478:	f000 fbb7 	bl	800bbea <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b092      	sub	sp, #72	; 0x48
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b492:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b496:	f107 030c 	add.w	r3, r7, #12
 800b49a:	2200      	movs	r2, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fe fd01 	bl	8009ea4 <find_volume>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b4a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f040 8099 	bne.w	800b5e4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	695a      	ldr	r2, [r3, #20]
 800b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	3b02      	subs	r3, #2
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d804      	bhi.n	800b4d0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	695a      	ldr	r2, [r3, #20]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	e089      	b.n	800b5e4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d128      	bne.n	800b52e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b4e4:	f107 0314 	add.w	r3, r7, #20
 800b4e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd f863 	bl	80085b6 <get_fat>
 800b4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d103      	bne.n	800b502 <f_getfree+0x7c>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b500:	e063      	b.n	800b5ca <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b504:	2b01      	cmp	r3, #1
 800b506:	d103      	bne.n	800b510 <f_getfree+0x8a>
 800b508:	2302      	movs	r3, #2
 800b50a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b50e:	e05c      	b.n	800b5ca <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <f_getfree+0x96>
 800b516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b518:	3301      	adds	r3, #1
 800b51a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51e:	3301      	adds	r3, #1
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b528:	429a      	cmp	r2, r3
 800b52a:	d3db      	bcc.n	800b4e4 <f_getfree+0x5e>
 800b52c:	e04d      	b.n	800b5ca <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	637b      	str	r3, [r7, #52]	; 0x34
 800b53e:	2300      	movs	r3, #0
 800b540:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b544:	2b00      	cmp	r3, #0
 800b546:	d113      	bne.n	800b570 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b550:	4619      	mov	r1, r3
 800b552:	f7fc ff75 	bl	8008440 <move_window>
 800b556:	4603      	mov	r3, r0
 800b558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b55c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b560:	2b00      	cmp	r3, #0
 800b562:	d131      	bne.n	800b5c8 <f_getfree+0x142>
							p = fs->win;
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	3334      	adds	r3, #52	; 0x34
 800b568:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b56a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b56e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b02      	cmp	r3, #2
 800b576:	d10f      	bne.n	800b598 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b57a:	f7fc fcb1 	bl	8007ee0 <ld_word>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d102      	bne.n	800b58a <f_getfree+0x104>
 800b584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b586:	3301      	adds	r3, #1
 800b588:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	3302      	adds	r3, #2
 800b58e:	633b      	str	r3, [r7, #48]	; 0x30
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	3b02      	subs	r3, #2
 800b594:	637b      	str	r3, [r7, #52]	; 0x34
 800b596:	e010      	b.n	800b5ba <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b59a:	f7fc fcb9 	bl	8007f10 <ld_dword>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <f_getfree+0x128>
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800b5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b6:	3b04      	subs	r3, #4
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1bd      	bne.n	800b542 <f_getfree+0xbc>
 800b5c6:	e000      	b.n	800b5ca <f_getfree+0x144>
							if (res != FR_OK) break;
 800b5c8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5ce:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	791a      	ldrb	r2, [r3, #4]
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	f042 0201 	orr.w	r2, r2, #1
 800b5e0:	b2d2      	uxtb	r2, r2
 800b5e2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b5e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3748      	adds	r7, #72	; 0x48
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b5fc:	78fb      	ldrb	r3, [r7, #3]
 800b5fe:	2b0a      	cmp	r3, #10
 800b600:	d103      	bne.n	800b60a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b602:	210d      	movs	r1, #13
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff fff3 	bl	800b5f0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	db25      	blt.n	800b662 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	60fa      	str	r2, [r7, #12]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	4413      	add	r3, r2
 800b620:	78fa      	ldrb	r2, [r7, #3]
 800b622:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b3c      	cmp	r3, #60	; 0x3c
 800b628:	dd12      	ble.n	800b650 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f103 010c 	add.w	r1, r3, #12
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	f107 0308 	add.w	r3, r7, #8
 800b63a:	f7ff fa08 	bl	800aa4e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	429a      	cmp	r2, r3
 800b644:	d101      	bne.n	800b64a <putc_bfd+0x5a>
 800b646:	2300      	movs	r3, #0
 800b648:	e001      	b.n	800b64e <putc_bfd+0x5e>
 800b64a:	f04f 33ff 	mov.w	r3, #4294967295
 800b64e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	609a      	str	r2, [r3, #8]
 800b660:	e000      	b.n	800b664 <putc_bfd+0x74>
	if (i < 0) return;
 800b662:	bf00      	nop
}
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	db16      	blt.n	800b6a8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f103 010c 	add.w	r1, r3, #12
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	461a      	mov	r2, r3
 800b68a:	f107 030c 	add.w	r3, r7, #12
 800b68e:	f7ff f9de 	bl	800aa4e <f_write>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d107      	bne.n	800b6a8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d102      	bne.n	800b6a8 <putc_flush+0x3e>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	e001      	b.n	800b6ac <putc_flush+0x42>
	return EOF;
 800b6a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	605a      	str	r2, [r3, #4]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	609a      	str	r2, [r3, #8]
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b6e0:	b40e      	push	{r1, r2, r3}
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b0a7      	sub	sp, #156	; 0x9c
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b6ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6ee:	6879      	ldr	r1, [r7, #4]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff ffdf 	bl	800b6b4 <putc_init>

	va_start(arp, fmt);
 800b6f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b6fa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b6fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b70c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 81f2 	beq.w	800bafa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800b716:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b71a:	2b25      	cmp	r3, #37	; 0x25
 800b71c:	d008      	beq.n	800b730 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b71e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff ff61 	bl	800b5f0 <putc_bfd>
			continue;
 800b72e:	e1e3      	b.n	800baf8 <f_printf+0x418>
		}
		w = f = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b736:	2300      	movs	r3, #0
 800b738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b73c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b74c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b750:	2b30      	cmp	r3, #48	; 0x30
 800b752:	d10b      	bne.n	800b76c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b754:	2301      	movs	r3, #1
 800b756:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b75a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b76a:	e024      	b.n	800b7b6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b76c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b770:	2b2d      	cmp	r3, #45	; 0x2d
 800b772:	d120      	bne.n	800b7b6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b774:	2302      	movs	r3, #2
 800b776:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b77a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b78a:	e014      	b.n	800b7b6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b78c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	461a      	mov	r2, r3
 800b79a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b79e:	4413      	add	r3, r2
 800b7a0:	3b30      	subs	r3, #48	; 0x30
 800b7a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b7a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b7b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b7ba:	2b2f      	cmp	r3, #47	; 0x2f
 800b7bc:	d903      	bls.n	800b7c6 <f_printf+0xe6>
 800b7be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b7c2:	2b39      	cmp	r3, #57	; 0x39
 800b7c4:	d9e2      	bls.n	800b78c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b7c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b7ca:	2b6c      	cmp	r3, #108	; 0x6c
 800b7cc:	d003      	beq.n	800b7d6 <f_printf+0xf6>
 800b7ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b7d2:	2b4c      	cmp	r3, #76	; 0x4c
 800b7d4:	d10d      	bne.n	800b7f2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b7d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b7da:	f043 0304 	orr.w	r3, r3, #4
 800b7de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b7e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b7f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 8181 	beq.w	800bafe <f_printf+0x41e>
		d = c;
 800b7fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b800:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b804:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b808:	2b60      	cmp	r3, #96	; 0x60
 800b80a:	d908      	bls.n	800b81e <f_printf+0x13e>
 800b80c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b810:	2b7a      	cmp	r3, #122	; 0x7a
 800b812:	d804      	bhi.n	800b81e <f_printf+0x13e>
 800b814:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b818:	3b20      	subs	r3, #32
 800b81a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b81e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b822:	3b42      	subs	r3, #66	; 0x42
 800b824:	2b16      	cmp	r3, #22
 800b826:	f200 8098 	bhi.w	800b95a <f_printf+0x27a>
 800b82a:	a201      	add	r2, pc, #4	; (adr r2, 800b830 <f_printf+0x150>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b93b 	.word	0x0800b93b
 800b834:	0800b923 	.word	0x0800b923
 800b838:	0800b94b 	.word	0x0800b94b
 800b83c:	0800b95b 	.word	0x0800b95b
 800b840:	0800b95b 	.word	0x0800b95b
 800b844:	0800b95b 	.word	0x0800b95b
 800b848:	0800b95b 	.word	0x0800b95b
 800b84c:	0800b95b 	.word	0x0800b95b
 800b850:	0800b95b 	.word	0x0800b95b
 800b854:	0800b95b 	.word	0x0800b95b
 800b858:	0800b95b 	.word	0x0800b95b
 800b85c:	0800b95b 	.word	0x0800b95b
 800b860:	0800b95b 	.word	0x0800b95b
 800b864:	0800b943 	.word	0x0800b943
 800b868:	0800b95b 	.word	0x0800b95b
 800b86c:	0800b95b 	.word	0x0800b95b
 800b870:	0800b95b 	.word	0x0800b95b
 800b874:	0800b88d 	.word	0x0800b88d
 800b878:	0800b95b 	.word	0x0800b95b
 800b87c:	0800b94b 	.word	0x0800b94b
 800b880:	0800b95b 	.word	0x0800b95b
 800b884:	0800b95b 	.word	0x0800b95b
 800b888:	0800b953 	.word	0x0800b953
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b88c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b88e:	1d1a      	adds	r2, r3, #4
 800b890:	67ba      	str	r2, [r7, #120]	; 0x78
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b896:	2300      	movs	r3, #0
 800b898:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b89c:	e004      	b.n	800b8a8 <f_printf+0x1c8>
 800b89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b8aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8ae:	4413      	add	r3, r2
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1f3      	bne.n	800b89e <f_printf+0x1be>
			if (!(f & 2)) {
 800b8b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b8ba:	f003 0302 	and.w	r3, r3, #2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d11a      	bne.n	800b8f8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b8c2:	e005      	b.n	800b8d0 <f_printf+0x1f0>
 800b8c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8c8:	2120      	movs	r1, #32
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff fe90 	bl	800b5f0 <putc_bfd>
 800b8d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d8f0      	bhi.n	800b8c4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b8e2:	e009      	b.n	800b8f8 <f_printf+0x218>
 800b8e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b8ea:	781a      	ldrb	r2, [r3, #0]
 800b8ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fe7c 	bl	800b5f0 <putc_bfd>
 800b8f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1f1      	bne.n	800b8e4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b900:	e005      	b.n	800b90e <f_printf+0x22e>
 800b902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b906:	2120      	movs	r1, #32
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff fe71 	bl	800b5f0 <putc_bfd>
 800b90e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b918:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d8f0      	bhi.n	800b902 <f_printf+0x222>
			continue;
 800b920:	e0ea      	b.n	800baf8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b924:	1d1a      	adds	r2, r3, #4
 800b926:	67ba      	str	r2, [r7, #120]	; 0x78
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b930:	4611      	mov	r1, r2
 800b932:	4618      	mov	r0, r3
 800b934:	f7ff fe5c 	bl	800b5f0 <putc_bfd>
 800b938:	e0de      	b.n	800baf8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800b93a:	2302      	movs	r3, #2
 800b93c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b940:	e014      	b.n	800b96c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b942:	2308      	movs	r3, #8
 800b944:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b948:	e010      	b.n	800b96c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b94a:	230a      	movs	r3, #10
 800b94c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b950:	e00c      	b.n	800b96c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b952:	2310      	movs	r3, #16
 800b954:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b958:	e008      	b.n	800b96c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b95a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b95e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b962:	4611      	mov	r1, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7ff fe43 	bl	800b5f0 <putc_bfd>
 800b96a:	e0c5      	b.n	800baf8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b96c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d004      	beq.n	800b982 <f_printf+0x2a2>
 800b978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b97a:	1d1a      	adds	r2, r3, #4
 800b97c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	e00c      	b.n	800b99c <f_printf+0x2bc>
 800b982:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b986:	2b44      	cmp	r3, #68	; 0x44
 800b988:	d104      	bne.n	800b994 <f_printf+0x2b4>
 800b98a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b98c:	1d1a      	adds	r2, r3, #4
 800b98e:	67ba      	str	r2, [r7, #120]	; 0x78
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	e003      	b.n	800b99c <f_printf+0x2bc>
 800b994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	67ba      	str	r2, [r7, #120]	; 0x78
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b9a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b9a4:	2b44      	cmp	r3, #68	; 0x44
 800b9a6:	d10e      	bne.n	800b9c6 <f_printf+0x2e6>
 800b9a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	da0a      	bge.n	800b9c6 <f_printf+0x2e6>
			v = 0 - v;
 800b9b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9b4:	425b      	negs	r3, r3
 800b9b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b9ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b9be:	f043 0308 	orr.w	r3, r3, #8
 800b9c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b9cc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9d8:	fb01 f202 	mul.w	r2, r1, r2
 800b9dc:	1a9b      	subs	r3, r3, r2
 800b9de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b9e2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b9e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b9f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b9f6:	2b09      	cmp	r3, #9
 800b9f8:	d90b      	bls.n	800ba12 <f_printf+0x332>
 800b9fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9fe:	2b78      	cmp	r3, #120	; 0x78
 800ba00:	d101      	bne.n	800ba06 <f_printf+0x326>
 800ba02:	2227      	movs	r2, #39	; 0x27
 800ba04:	e000      	b.n	800ba08 <f_printf+0x328>
 800ba06:	2207      	movs	r2, #7
 800ba08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ba12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ba1c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ba20:	3230      	adds	r2, #48	; 0x30
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	3398      	adds	r3, #152	; 0x98
 800ba26:	443b      	add	r3, r7
 800ba28:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ba2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <f_printf+0x35c>
 800ba34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba38:	2b1f      	cmp	r3, #31
 800ba3a:	d9c7      	bls.n	800b9cc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ba3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ba40:	f003 0308 	and.w	r3, r3, #8
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d009      	beq.n	800ba5c <f_printf+0x37c>
 800ba48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ba52:	3398      	adds	r3, #152	; 0x98
 800ba54:	443b      	add	r3, r7
 800ba56:	222d      	movs	r2, #45	; 0x2d
 800ba58:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ba5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba64:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <f_printf+0x394>
 800ba70:	2330      	movs	r3, #48	; 0x30
 800ba72:	e000      	b.n	800ba76 <f_printf+0x396>
 800ba74:	2320      	movs	r3, #32
 800ba76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ba7a:	e007      	b.n	800ba8c <f_printf+0x3ac>
 800ba7c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ba80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fdb2 	bl	800b5f0 <putc_bfd>
 800ba8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d108      	bne.n	800baaa <f_printf+0x3ca>
 800ba98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800baa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d8e8      	bhi.n	800ba7c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800baaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800baae:	3b01      	subs	r3, #1
 800bab0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bab4:	f107 020c 	add.w	r2, r7, #12
 800bab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800babc:	4413      	add	r3, r2
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff fd92 	bl	800b5f0 <putc_bfd>
		} while (i);
 800bacc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1ea      	bne.n	800baaa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800bad4:	e007      	b.n	800bae6 <f_printf+0x406>
 800bad6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fd85 	bl	800b5f0 <putc_bfd>
 800bae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800baf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d8ee      	bhi.n	800bad6 <f_printf+0x3f6>
		c = *fmt++;
 800baf8:	e600      	b.n	800b6fc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800bafa:	bf00      	nop
 800bafc:	e000      	b.n	800bb00 <f_printf+0x420>
		if (!c) break;
 800bafe:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800bb00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff fdb0 	bl	800b66a <putc_flush>
 800bb0a:	4603      	mov	r3, r0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	379c      	adds	r7, #156	; 0x9c
 800bb10:	46bd      	mov	sp, r7
 800bb12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb16:	b003      	add	sp, #12
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop

0800bb1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	4613      	mov	r3, r2
 800bb28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb32:	4b1f      	ldr	r3, [pc, #124]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb34:	7b9b      	ldrb	r3, [r3, #14]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d831      	bhi.n	800bba0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb3c:	4b1c      	ldr	r3, [pc, #112]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb3e:	7b9b      	ldrb	r3, [r3, #14]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	461a      	mov	r2, r3
 800bb44:	4b1a      	ldr	r3, [pc, #104]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb46:	2100      	movs	r1, #0
 800bb48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb4a:	4b19      	ldr	r3, [pc, #100]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb4c:	7b9b      	ldrb	r3, [r3, #14]
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	4a17      	ldr	r2, [pc, #92]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb5a:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb5c:	7b9b      	ldrb	r3, [r3, #14]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	461a      	mov	r2, r3
 800bb62:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb64:	4413      	add	r3, r2
 800bb66:	79fa      	ldrb	r2, [r7, #7]
 800bb68:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800bb6a:	4b11      	ldr	r3, [pc, #68]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb6c:	7b9b      	ldrb	r3, [r3, #14]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	b2d1      	uxtb	r1, r2
 800bb74:	4a0e      	ldr	r2, [pc, #56]	; (800bbb0 <FATFS_LinkDriverEx+0x94>)
 800bb76:	7391      	strb	r1, [r2, #14]
 800bb78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb7a:	7dbb      	ldrb	r3, [r7, #22]
 800bb7c:	3330      	adds	r3, #48	; 0x30
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	3301      	adds	r3, #1
 800bb88:	223a      	movs	r2, #58	; 0x3a
 800bb8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	3302      	adds	r3, #2
 800bb90:	222f      	movs	r2, #47	; 0x2f
 800bb92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	3303      	adds	r3, #3
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	2000d050 	.word	0x2000d050

0800bbb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff ffaa 	bl	800bb1c <FATFS_LinkDriverEx>
 800bbc8:	4603      	mov	r3, r0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f007 f86c 	bl	8012cb8 <malloc>
 800bbe0:	4603      	mov	r3, r0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b082      	sub	sp, #8
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f007 f868 	bl	8012cc8 <free>
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	6039      	str	r1, [r7, #0]
 800bc0a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bc0c:	88fb      	ldrh	r3, [r7, #6]
 800bc0e:	2b7f      	cmp	r3, #127	; 0x7f
 800bc10:	d802      	bhi.n	800bc18 <ff_convert+0x18>
		c = chr;
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	81fb      	strh	r3, [r7, #14]
 800bc16:	e025      	b.n	800bc64 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00b      	beq.n	800bc36 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bc1e:	88fb      	ldrh	r3, [r7, #6]
 800bc20:	2bff      	cmp	r3, #255	; 0xff
 800bc22:	d805      	bhi.n	800bc30 <ff_convert+0x30>
 800bc24:	88fb      	ldrh	r3, [r7, #6]
 800bc26:	3b80      	subs	r3, #128	; 0x80
 800bc28:	4a12      	ldr	r2, [pc, #72]	; (800bc74 <ff_convert+0x74>)
 800bc2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc2e:	e000      	b.n	800bc32 <ff_convert+0x32>
 800bc30:	2300      	movs	r3, #0
 800bc32:	81fb      	strh	r3, [r7, #14]
 800bc34:	e016      	b.n	800bc64 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bc36:	2300      	movs	r3, #0
 800bc38:	81fb      	strh	r3, [r7, #14]
 800bc3a:	e009      	b.n	800bc50 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bc3c:	89fb      	ldrh	r3, [r7, #14]
 800bc3e:	4a0d      	ldr	r2, [pc, #52]	; (800bc74 <ff_convert+0x74>)
 800bc40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc44:	88fa      	ldrh	r2, [r7, #6]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d006      	beq.n	800bc58 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bc4a:	89fb      	ldrh	r3, [r7, #14]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	81fb      	strh	r3, [r7, #14]
 800bc50:	89fb      	ldrh	r3, [r7, #14]
 800bc52:	2b7f      	cmp	r3, #127	; 0x7f
 800bc54:	d9f2      	bls.n	800bc3c <ff_convert+0x3c>
 800bc56:	e000      	b.n	800bc5a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bc58:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bc5a:	89fb      	ldrh	r3, [r7, #14]
 800bc5c:	3380      	adds	r3, #128	; 0x80
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bc64:	89fb      	ldrh	r3, [r7, #14]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	080252b4 	.word	0x080252b4

0800bc78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bc82:	88fb      	ldrh	r3, [r7, #6]
 800bc84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc88:	d201      	bcs.n	800bc8e <ff_wtoupper+0x16>
 800bc8a:	4b3e      	ldr	r3, [pc, #248]	; (800bd84 <ff_wtoupper+0x10c>)
 800bc8c:	e000      	b.n	800bc90 <ff_wtoupper+0x18>
 800bc8e:	4b3e      	ldr	r3, [pc, #248]	; (800bd88 <ff_wtoupper+0x110>)
 800bc90:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	1c9a      	adds	r2, r3, #2
 800bc96:	617a      	str	r2, [r7, #20]
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bc9c:	8a7b      	ldrh	r3, [r7, #18]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d068      	beq.n	800bd74 <ff_wtoupper+0xfc>
 800bca2:	88fa      	ldrh	r2, [r7, #6]
 800bca4:	8a7b      	ldrh	r3, [r7, #18]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d364      	bcc.n	800bd74 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	1c9a      	adds	r2, r3, #2
 800bcae:	617a      	str	r2, [r7, #20]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	823b      	strh	r3, [r7, #16]
 800bcb4:	8a3b      	ldrh	r3, [r7, #16]
 800bcb6:	0a1b      	lsrs	r3, r3, #8
 800bcb8:	81fb      	strh	r3, [r7, #14]
 800bcba:	8a3b      	ldrh	r3, [r7, #16]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bcc0:	88fa      	ldrh	r2, [r7, #6]
 800bcc2:	8a79      	ldrh	r1, [r7, #18]
 800bcc4:	8a3b      	ldrh	r3, [r7, #16]
 800bcc6:	440b      	add	r3, r1
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	da49      	bge.n	800bd60 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bccc:	89fb      	ldrh	r3, [r7, #14]
 800bcce:	2b08      	cmp	r3, #8
 800bcd0:	d84f      	bhi.n	800bd72 <ff_wtoupper+0xfa>
 800bcd2:	a201      	add	r2, pc, #4	; (adr r2, 800bcd8 <ff_wtoupper+0x60>)
 800bcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd8:	0800bcfd 	.word	0x0800bcfd
 800bcdc:	0800bd0f 	.word	0x0800bd0f
 800bce0:	0800bd25 	.word	0x0800bd25
 800bce4:	0800bd2d 	.word	0x0800bd2d
 800bce8:	0800bd35 	.word	0x0800bd35
 800bcec:	0800bd3d 	.word	0x0800bd3d
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bd4d 	.word	0x0800bd4d
 800bcf8:	0800bd55 	.word	0x0800bd55
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bcfc:	88fa      	ldrh	r2, [r7, #6]
 800bcfe:	8a7b      	ldrh	r3, [r7, #18]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4413      	add	r3, r2
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	80fb      	strh	r3, [r7, #6]
 800bd0c:	e027      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bd0e:	88fa      	ldrh	r2, [r7, #6]
 800bd10:	8a7b      	ldrh	r3, [r7, #18]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	f003 0301 	and.w	r3, r3, #1
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	88fa      	ldrh	r2, [r7, #6]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	80fb      	strh	r3, [r7, #6]
 800bd22:	e01c      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	3b10      	subs	r3, #16
 800bd28:	80fb      	strh	r3, [r7, #6]
 800bd2a:	e018      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	3b20      	subs	r3, #32
 800bd30:	80fb      	strh	r3, [r7, #6]
 800bd32:	e014      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bd34:	88fb      	ldrh	r3, [r7, #6]
 800bd36:	3b30      	subs	r3, #48	; 0x30
 800bd38:	80fb      	strh	r3, [r7, #6]
 800bd3a:	e010      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	3b1a      	subs	r3, #26
 800bd40:	80fb      	strh	r3, [r7, #6]
 800bd42:	e00c      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	3308      	adds	r3, #8
 800bd48:	80fb      	strh	r3, [r7, #6]
 800bd4a:	e008      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bd4c:	88fb      	ldrh	r3, [r7, #6]
 800bd4e:	3b50      	subs	r3, #80	; 0x50
 800bd50:	80fb      	strh	r3, [r7, #6]
 800bd52:	e004      	b.n	800bd5e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bd54:	88fb      	ldrh	r3, [r7, #6]
 800bd56:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bd5a:	80fb      	strh	r3, [r7, #6]
 800bd5c:	bf00      	nop
			}
			break;
 800bd5e:	e008      	b.n	800bd72 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bd60:	89fb      	ldrh	r3, [r7, #14]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d195      	bne.n	800bc92 <ff_wtoupper+0x1a>
 800bd66:	8a3b      	ldrh	r3, [r7, #16]
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bd70:	e78f      	b.n	800bc92 <ff_wtoupper+0x1a>
			break;
 800bd72:	bf00      	nop
	}

	return chr;
 800bd74:	88fb      	ldrh	r3, [r7, #6]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	080253b4 	.word	0x080253b4
 800bd88:	080255a8 	.word	0x080255a8

0800bd8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bd90:	4b0e      	ldr	r3, [pc, #56]	; (800bdcc <HAL_Init+0x40>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a0d      	ldr	r2, [pc, #52]	; (800bdcc <HAL_Init+0x40>)
 800bd96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <HAL_Init+0x40>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a0a      	ldr	r2, [pc, #40]	; (800bdcc <HAL_Init+0x40>)
 800bda2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bda6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bda8:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <HAL_Init+0x40>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a07      	ldr	r2, [pc, #28]	; (800bdcc <HAL_Init+0x40>)
 800bdae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bdb4:	2003      	movs	r0, #3
 800bdb6:	f000 fead 	bl	800cb14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bdba:	2000      	movs	r0, #0
 800bdbc:	f000 f808 	bl	800bdd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bdc0:	f7f5 fad6 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	40023c00 	.word	0x40023c00

0800bdd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bdd8:	4b12      	ldr	r3, [pc, #72]	; (800be24 <HAL_InitTick+0x54>)
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	4b12      	ldr	r3, [pc, #72]	; (800be28 <HAL_InitTick+0x58>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	4619      	mov	r1, r3
 800bde2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bde6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fed3 	bl	800cb9a <HAL_SYSTICK_Config>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e00e      	b.n	800be1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b0f      	cmp	r3, #15
 800be02:	d80a      	bhi.n	800be1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800be04:	2200      	movs	r2, #0
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	f04f 30ff 	mov.w	r0, #4294967295
 800be0c:	f000 fe8d 	bl	800cb2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800be10:	4a06      	ldr	r2, [pc, #24]	; (800be2c <HAL_InitTick+0x5c>)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	e000      	b.n	800be1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20000000 	.word	0x20000000
 800be28:	200000c4 	.word	0x200000c4
 800be2c:	200000c0 	.word	0x200000c0

0800be30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be30:	b480      	push	{r7}
 800be32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800be34:	4b06      	ldr	r3, [pc, #24]	; (800be50 <HAL_IncTick+0x20>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	461a      	mov	r2, r3
 800be3a:	4b06      	ldr	r3, [pc, #24]	; (800be54 <HAL_IncTick+0x24>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4413      	add	r3, r2
 800be40:	4a04      	ldr	r2, [pc, #16]	; (800be54 <HAL_IncTick+0x24>)
 800be42:	6013      	str	r3, [r2, #0]
}
 800be44:	bf00      	nop
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	200000c4 	.word	0x200000c4
 800be54:	2000d060 	.word	0x2000d060

0800be58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  return uwTick;
 800be5c:	4b03      	ldr	r3, [pc, #12]	; (800be6c <HAL_GetTick+0x14>)
 800be5e:	681b      	ldr	r3, [r3, #0]
}
 800be60:	4618      	mov	r0, r3
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	2000d060 	.word	0x2000d060

0800be70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800be78:	f7ff ffee 	bl	800be58 <HAL_GetTick>
 800be7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be88:	d005      	beq.n	800be96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800be8a:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <HAL_Delay+0x44>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4413      	add	r3, r2
 800be94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800be96:	bf00      	nop
 800be98:	f7ff ffde 	bl	800be58 <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d8f7      	bhi.n	800be98 <HAL_Delay+0x28>
  {
  }
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	200000c4 	.word	0x200000c4

0800beb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d101      	bne.n	800bece <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e033      	b.n	800bf36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d109      	bne.n	800beea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7fa fc40 	bl	800675c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beee:	f003 0310 	and.w	r3, r3, #16
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d118      	bne.n	800bf28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800befe:	f023 0302 	bic.w	r3, r3, #2
 800bf02:	f043 0202 	orr.w	r2, r3, #2
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fb86 	bl	800c61c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	f043 0201 	orr.w	r2, r3, #1
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	641a      	str	r2, [r3, #64]	; 0x40
 800bf26:	e001      	b.n	800bf2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800bf46:	2300      	movs	r3, #0
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 0302 	and.w	r3, r3, #2
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	bf0c      	ite	eq
 800bf5c:	2301      	moveq	r3, #1
 800bf5e:	2300      	movne	r3, #0
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	bf0c      	ite	eq
 800bf72:	2301      	moveq	r3, #1
 800bf74:	2300      	movne	r3, #0
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d049      	beq.n	800c014 <HAL_ADC_IRQHandler+0xd6>
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d046      	beq.n	800c014 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8a:	f003 0310 	and.w	r3, r3, #16
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d105      	bne.n	800bf9e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d12b      	bne.n	800c004 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d127      	bne.n	800c004 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d006      	beq.n	800bfd0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d119      	bne.n	800c004 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f022 0220 	bic.w	r2, r2, #32
 800bfde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d105      	bne.n	800c004 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	f043 0201 	orr.w	r2, r3, #1
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9af 	bl	800c368 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f06f 0212 	mvn.w	r2, #18
 800c012:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0304 	and.w	r3, r3, #4
 800c01e:	2b04      	cmp	r3, #4
 800c020:	bf0c      	ite	eq
 800c022:	2301      	moveq	r3, #1
 800c024:	2300      	movne	r3, #0
 800c026:	b2db      	uxtb	r3, r3
 800c028:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c034:	2b80      	cmp	r3, #128	; 0x80
 800c036:	bf0c      	ite	eq
 800c038:	2301      	moveq	r3, #1
 800c03a:	2300      	movne	r3, #0
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d057      	beq.n	800c0f6 <HAL_ADC_IRQHandler+0x1b8>
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d054      	beq.n	800c0f6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c050:	f003 0310 	and.w	r3, r3, #16
 800c054:	2b00      	cmp	r3, #0
 800c056:	d105      	bne.n	800c064 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d139      	bne.n	800c0e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d12b      	bne.n	800c0e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d124      	bne.n	800c0e6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d11d      	bne.n	800c0e6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d119      	bne.n	800c0e6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	685a      	ldr	r2, [r3, #4]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0de:	f043 0201 	orr.w	r2, r3, #1
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fc16 	bl	800c918 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f06f 020c 	mvn.w	r2, #12
 800c0f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b01      	cmp	r3, #1
 800c102:	bf0c      	ite	eq
 800c104:	2301      	moveq	r3, #1
 800c106:	2300      	movne	r3, #0
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c116:	2b40      	cmp	r3, #64	; 0x40
 800c118:	bf0c      	ite	eq
 800c11a:	2301      	moveq	r3, #1
 800c11c:	2300      	movne	r3, #0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d017      	beq.n	800c158 <HAL_ADC_IRQHandler+0x21a>
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d014      	beq.n	800c158 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d10d      	bne.n	800c158 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c140:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f921 	bl	800c390 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f06f 0201 	mvn.w	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 0320 	and.w	r3, r3, #32
 800c162:	2b20      	cmp	r3, #32
 800c164:	bf0c      	ite	eq
 800c166:	2301      	moveq	r3, #1
 800c168:	2300      	movne	r3, #0
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c17c:	bf0c      	ite	eq
 800c17e:	2301      	moveq	r3, #1
 800c180:	2300      	movne	r3, #0
 800c182:	b2db      	uxtb	r3, r3
 800c184:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d015      	beq.n	800c1b8 <HAL_ADC_IRQHandler+0x27a>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d012      	beq.n	800c1b8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c196:	f043 0202 	orr.w	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f06f 0220 	mvn.w	r2, #32
 800c1a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f8fb 	bl	800c3a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f06f 0220 	mvn.w	r2, #32
 800c1b6:	601a      	str	r2, [r3, #0]
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <HAL_ADC_Start_DMA+0x1e>
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e0b1      	b.n	800c342 <HAL_ADC_Start_DMA+0x182>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d018      	beq.n	800c226 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f042 0201 	orr.w	r2, r2, #1
 800c202:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c204:	4b51      	ldr	r3, [pc, #324]	; (800c34c <HAL_ADC_Start_DMA+0x18c>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a51      	ldr	r2, [pc, #324]	; (800c350 <HAL_ADC_Start_DMA+0x190>)
 800c20a:	fba2 2303 	umull	r2, r3, r2, r3
 800c20e:	0c9a      	lsrs	r2, r3, #18
 800c210:	4613      	mov	r3, r2
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	4413      	add	r3, r2
 800c216:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c218:	e002      	b.n	800c220 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1f9      	bne.n	800c21a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	2b01      	cmp	r3, #1
 800c232:	f040 8085 	bne.w	800c340 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c23e:	f023 0301 	bic.w	r3, r3, #1
 800c242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c254:	2b00      	cmp	r3, #0
 800c256:	d007      	beq.n	800c268 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c260:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c274:	d106      	bne.n	800c284 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27a:	f023 0206 	bic.w	r2, r3, #6
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	645a      	str	r2, [r3, #68]	; 0x44
 800c282:	e002      	b.n	800c28a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c292:	4b30      	ldr	r3, [pc, #192]	; (800c354 <HAL_ADC_Start_DMA+0x194>)
 800c294:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29a:	4a2f      	ldr	r2, [pc, #188]	; (800c358 <HAL_ADC_Start_DMA+0x198>)
 800c29c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	4a2e      	ldr	r2, [pc, #184]	; (800c35c <HAL_ADC_Start_DMA+0x19c>)
 800c2a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	4a2d      	ldr	r2, [pc, #180]	; (800c360 <HAL_ADC_Start_DMA+0x1a0>)
 800c2ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c2b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c2c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	689a      	ldr	r2, [r3, #8]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	334c      	adds	r3, #76	; 0x4c
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f000 fd70 	bl	800cdcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f003 031f 	and.w	r3, r3, #31
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10f      	bne.n	800c318 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d11c      	bne.n	800c340 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c314:	609a      	str	r2, [r3, #8]
 800c316:	e013      	b.n	800c340 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a11      	ldr	r2, [pc, #68]	; (800c364 <HAL_ADC_Start_DMA+0x1a4>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d10e      	bne.n	800c340 <HAL_ADC_Start_DMA+0x180>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d107      	bne.n	800c340 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689a      	ldr	r2, [r3, #8]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c33e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20000000 	.word	0x20000000
 800c350:	431bde83 	.word	0x431bde83
 800c354:	40012300 	.word	0x40012300
 800c358:	0800c815 	.word	0x0800c815
 800c35c:	0800c8cf 	.word	0x0800c8cf
 800c360:	0800c8eb 	.word	0x0800c8eb
 800c364:	40012000 	.word	0x40012000

0800c368 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_ADC_ConfigChannel+0x1c>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e113      	b.n	800c5fc <HAL_ADC_ConfigChannel+0x244>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b09      	cmp	r3, #9
 800c3e2:	d925      	bls.n	800c430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68d9      	ldr	r1, [r3, #12]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	4413      	add	r3, r2
 800c3f8:	3b1e      	subs	r3, #30
 800c3fa:	2207      	movs	r2, #7
 800c3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c400:	43da      	mvns	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	400a      	ands	r2, r1
 800c408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	68d9      	ldr	r1, [r3, #12]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	689a      	ldr	r2, [r3, #8]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	4618      	mov	r0, r3
 800c41c:	4603      	mov	r3, r0
 800c41e:	005b      	lsls	r3, r3, #1
 800c420:	4403      	add	r3, r0
 800c422:	3b1e      	subs	r3, #30
 800c424:	409a      	lsls	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	60da      	str	r2, [r3, #12]
 800c42e:	e022      	b.n	800c476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6919      	ldr	r1, [r3, #16]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	461a      	mov	r2, r3
 800c43e:	4613      	mov	r3, r2
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	4413      	add	r3, r2
 800c444:	2207      	movs	r2, #7
 800c446:	fa02 f303 	lsl.w	r3, r2, r3
 800c44a:	43da      	mvns	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	400a      	ands	r2, r1
 800c452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6919      	ldr	r1, [r3, #16]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	689a      	ldr	r2, [r3, #8]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	b29b      	uxth	r3, r3
 800c464:	4618      	mov	r0, r3
 800c466:	4603      	mov	r3, r0
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	4403      	add	r3, r0
 800c46c:	409a      	lsls	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	2b06      	cmp	r3, #6
 800c47c:	d824      	bhi.n	800c4c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	3b05      	subs	r3, #5
 800c490:	221f      	movs	r2, #31
 800c492:	fa02 f303 	lsl.w	r3, r2, r3
 800c496:	43da      	mvns	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	400a      	ands	r2, r1
 800c49e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3b05      	subs	r3, #5
 800c4ba:	fa00 f203 	lsl.w	r2, r0, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	635a      	str	r2, [r3, #52]	; 0x34
 800c4c6:	e04c      	b.n	800c562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	2b0c      	cmp	r3, #12
 800c4ce:	d824      	bhi.n	800c51a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	3b23      	subs	r3, #35	; 0x23
 800c4e2:	221f      	movs	r2, #31
 800c4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e8:	43da      	mvns	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	400a      	ands	r2, r1
 800c4f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4618      	mov	r0, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	3b23      	subs	r3, #35	; 0x23
 800c50c:	fa00 f203 	lsl.w	r2, r0, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	631a      	str	r2, [r3, #48]	; 0x30
 800c518:	e023      	b.n	800c562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	3b41      	subs	r3, #65	; 0x41
 800c52c:	221f      	movs	r2, #31
 800c52e:	fa02 f303 	lsl.w	r3, r2, r3
 800c532:	43da      	mvns	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	400a      	ands	r2, r1
 800c53a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	b29b      	uxth	r3, r3
 800c548:	4618      	mov	r0, r3
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4613      	mov	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	3b41      	subs	r3, #65	; 0x41
 800c556:	fa00 f203 	lsl.w	r2, r0, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	430a      	orrs	r2, r1
 800c560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c562:	4b29      	ldr	r3, [pc, #164]	; (800c608 <HAL_ADC_ConfigChannel+0x250>)
 800c564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a28      	ldr	r2, [pc, #160]	; (800c60c <HAL_ADC_ConfigChannel+0x254>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d10f      	bne.n	800c590 <HAL_ADC_ConfigChannel+0x1d8>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b12      	cmp	r3, #18
 800c576:	d10b      	bne.n	800c590 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a1d      	ldr	r2, [pc, #116]	; (800c60c <HAL_ADC_ConfigChannel+0x254>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d12b      	bne.n	800c5f2 <HAL_ADC_ConfigChannel+0x23a>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a1c      	ldr	r2, [pc, #112]	; (800c610 <HAL_ADC_ConfigChannel+0x258>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d003      	beq.n	800c5ac <HAL_ADC_ConfigChannel+0x1f4>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b11      	cmp	r3, #17
 800c5aa:	d122      	bne.n	800c5f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a11      	ldr	r2, [pc, #68]	; (800c610 <HAL_ADC_ConfigChannel+0x258>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d111      	bne.n	800c5f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c5ce:	4b11      	ldr	r3, [pc, #68]	; (800c614 <HAL_ADC_ConfigChannel+0x25c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a11      	ldr	r2, [pc, #68]	; (800c618 <HAL_ADC_ConfigChannel+0x260>)
 800c5d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d8:	0c9a      	lsrs	r2, r3, #18
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c5e4:	e002      	b.n	800c5ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f9      	bne.n	800c5e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40012300 	.word	0x40012300
 800c60c:	40012000 	.word	0x40012000
 800c610:	10000012 	.word	0x10000012
 800c614:	20000000 	.word	0x20000000
 800c618:	431bde83 	.word	0x431bde83

0800c61c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c624:	4b79      	ldr	r3, [pc, #484]	; (800c80c <ADC_Init+0x1f0>)
 800c626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	431a      	orrs	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6859      	ldr	r1, [r3, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	021a      	lsls	r2, r3, #8
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	430a      	orrs	r2, r1
 800c664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6859      	ldr	r1, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	430a      	orrs	r2, r1
 800c686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689a      	ldr	r2, [r3, #8]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6899      	ldr	r1, [r3, #8]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ae:	4a58      	ldr	r2, [pc, #352]	; (800c810 <ADC_Init+0x1f4>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d022      	beq.n	800c6fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689a      	ldr	r2, [r3, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c6c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6899      	ldr	r1, [r3, #8]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	689a      	ldr	r2, [r3, #8]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c6e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6899      	ldr	r1, [r3, #8]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	430a      	orrs	r2, r1
 800c6f6:	609a      	str	r2, [r3, #8]
 800c6f8:	e00f      	b.n	800c71a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689a      	ldr	r2, [r3, #8]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f022 0202 	bic.w	r2, r2, #2
 800c728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6899      	ldr	r1, [r3, #8]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	7e1b      	ldrb	r3, [r3, #24]
 800c734:	005a      	lsls	r2, r3, #1
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01b      	beq.n	800c780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6859      	ldr	r1, [r3, #4]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	3b01      	subs	r3, #1
 800c774:	035a      	lsls	r2, r3, #13
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	430a      	orrs	r2, r1
 800c77c:	605a      	str	r2, [r3, #4]
 800c77e:	e007      	b.n	800c790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c78e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c79e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	051a      	lsls	r2, r3, #20
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	689a      	ldr	r2, [r3, #8]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c7c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6899      	ldr	r1, [r3, #8]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7d2:	025a      	lsls	r2, r3, #9
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6899      	ldr	r1, [r3, #8]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	029a      	lsls	r2, r3, #10
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	609a      	str	r2, [r3, #8]
}
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	40012300 	.word	0x40012300
 800c810:	0f000001 	.word	0x0f000001

0800c814 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c820:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c826:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d13c      	bne.n	800c8a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c832:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d12b      	bne.n	800c8a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d127      	bne.n	800c8a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c856:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d119      	bne.n	800c8a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f022 0220 	bic.w	r2, r2, #32
 800c87a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c880:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c890:	2b00      	cmp	r3, #0
 800c892:	d105      	bne.n	800c8a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c898:	f043 0201 	orr.w	r2, r3, #1
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f7ff fd61 	bl	800c368 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c8a6:	e00e      	b.n	800c8c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ac:	f003 0310 	and.w	r3, r3, #16
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d003      	beq.n	800c8bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7ff fd75 	bl	800c3a4 <HAL_ADC_ErrorCallback>
}
 800c8ba:	e004      	b.n	800c8c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	4798      	blx	r3
}
 800c8c6:	bf00      	nop
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b084      	sub	sp, #16
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff fd4d 	bl	800c37c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c8e2:	bf00      	nop
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b084      	sub	sp, #16
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2240      	movs	r2, #64	; 0x40
 800c8fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c902:	f043 0204 	orr.w	r2, r3, #4
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7ff fd4a 	bl	800c3a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c910:	bf00      	nop
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c93c:	4b0c      	ldr	r3, [pc, #48]	; (800c970 <__NVIC_SetPriorityGrouping+0x44>)
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c948:	4013      	ands	r3, r2
 800c94a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c95c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c95e:	4a04      	ldr	r2, [pc, #16]	; (800c970 <__NVIC_SetPriorityGrouping+0x44>)
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	60d3      	str	r3, [r2, #12]
}
 800c964:	bf00      	nop
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	e000ed00 	.word	0xe000ed00

0800c974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c978:	4b04      	ldr	r3, [pc, #16]	; (800c98c <__NVIC_GetPriorityGrouping+0x18>)
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	0a1b      	lsrs	r3, r3, #8
 800c97e:	f003 0307 	and.w	r3, r3, #7
}
 800c982:	4618      	mov	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	e000ed00 	.word	0xe000ed00

0800c990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	db0b      	blt.n	800c9ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c9a2:	79fb      	ldrb	r3, [r7, #7]
 800c9a4:	f003 021f 	and.w	r2, r3, #31
 800c9a8:	4907      	ldr	r1, [pc, #28]	; (800c9c8 <__NVIC_EnableIRQ+0x38>)
 800c9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9ae:	095b      	lsrs	r3, r3, #5
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	fa00 f202 	lsl.w	r2, r0, r2
 800c9b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	e000e100 	.word	0xe000e100

0800c9cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c9d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	db12      	blt.n	800ca04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	f003 021f 	and.w	r2, r3, #31
 800c9e4:	490a      	ldr	r1, [pc, #40]	; (800ca10 <__NVIC_DisableIRQ+0x44>)
 800c9e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9ea:	095b      	lsrs	r3, r3, #5
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	fa00 f202 	lsl.w	r2, r0, r2
 800c9f2:	3320      	adds	r3, #32
 800c9f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c9f8:	f3bf 8f4f 	dsb	sy
}
 800c9fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c9fe:	f3bf 8f6f 	isb	sy
}
 800ca02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	e000e100 	.word	0xe000e100

0800ca14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	6039      	str	r1, [r7, #0]
 800ca1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	db0a      	blt.n	800ca3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	490c      	ldr	r1, [pc, #48]	; (800ca60 <__NVIC_SetPriority+0x4c>)
 800ca2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca32:	0112      	lsls	r2, r2, #4
 800ca34:	b2d2      	uxtb	r2, r2
 800ca36:	440b      	add	r3, r1
 800ca38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ca3c:	e00a      	b.n	800ca54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	4908      	ldr	r1, [pc, #32]	; (800ca64 <__NVIC_SetPriority+0x50>)
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	3b04      	subs	r3, #4
 800ca4c:	0112      	lsls	r2, r2, #4
 800ca4e:	b2d2      	uxtb	r2, r2
 800ca50:	440b      	add	r3, r1
 800ca52:	761a      	strb	r2, [r3, #24]
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	e000e100 	.word	0xe000e100
 800ca64:	e000ed00 	.word	0xe000ed00

0800ca68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b089      	sub	sp, #36	; 0x24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	f1c3 0307 	rsb	r3, r3, #7
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	bf28      	it	cs
 800ca86:	2304      	movcs	r3, #4
 800ca88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	d902      	bls.n	800ca98 <NVIC_EncodePriority+0x30>
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	3b03      	subs	r3, #3
 800ca96:	e000      	b.n	800ca9a <NVIC_EncodePriority+0x32>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca9c:	f04f 32ff 	mov.w	r2, #4294967295
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	fa02 f303 	lsl.w	r3, r2, r3
 800caa6:	43da      	mvns	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	401a      	ands	r2, r3
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cab0:	f04f 31ff 	mov.w	r1, #4294967295
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	fa01 f303 	lsl.w	r3, r1, r3
 800caba:	43d9      	mvns	r1, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cac0:	4313      	orrs	r3, r2
         );
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3724      	adds	r7, #36	; 0x24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
	...

0800cad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	3b01      	subs	r3, #1
 800cadc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cae0:	d301      	bcc.n	800cae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cae2:	2301      	movs	r3, #1
 800cae4:	e00f      	b.n	800cb06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cae6:	4a0a      	ldr	r2, [pc, #40]	; (800cb10 <SysTick_Config+0x40>)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3b01      	subs	r3, #1
 800caec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800caee:	210f      	movs	r1, #15
 800caf0:	f04f 30ff 	mov.w	r0, #4294967295
 800caf4:	f7ff ff8e 	bl	800ca14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800caf8:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <SysTick_Config+0x40>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cafe:	4b04      	ldr	r3, [pc, #16]	; (800cb10 <SysTick_Config+0x40>)
 800cb00:	2207      	movs	r2, #7
 800cb02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	e000e010 	.word	0xe000e010

0800cb14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff ff05 	bl	800c92c <__NVIC_SetPriorityGrouping>
}
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b086      	sub	sp, #24
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	4603      	mov	r3, r0
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
 800cb36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cb3c:	f7ff ff1a 	bl	800c974 <__NVIC_GetPriorityGrouping>
 800cb40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	68b9      	ldr	r1, [r7, #8]
 800cb46:	6978      	ldr	r0, [r7, #20]
 800cb48:	f7ff ff8e 	bl	800ca68 <NVIC_EncodePriority>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb52:	4611      	mov	r1, r2
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff ff5d 	bl	800ca14 <__NVIC_SetPriority>
}
 800cb5a:	bf00      	nop
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	4603      	mov	r3, r0
 800cb6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cb6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff ff0d 	bl	800c990 <__NVIC_EnableIRQ>
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	4603      	mov	r3, r0
 800cb86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cb88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff ff1d 	bl	800c9cc <__NVIC_DisableIRQ>
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff ff94 	bl	800cad0 <SysTick_Config>
 800cba8:	4603      	mov	r3, r0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800cbc0:	f7ff f94a 	bl	800be58 <HAL_GetTick>
 800cbc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e099      	b.n	800cd04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2202      	movs	r2, #2
 800cbdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 0201 	bic.w	r2, r2, #1
 800cbee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cbf0:	e00f      	b.n	800cc12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cbf2:	f7ff f931 	bl	800be58 <HAL_GetTick>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	2b05      	cmp	r3, #5
 800cbfe:	d908      	bls.n	800cc12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2220      	movs	r2, #32
 800cc04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2203      	movs	r2, #3
 800cc0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e078      	b.n	800cd04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e8      	bne.n	800cbf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4b38      	ldr	r3, [pc, #224]	; (800cd0c <HAL_DMA_Init+0x158>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cc3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cc4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d107      	bne.n	800cc7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc74:	4313      	orrs	r3, r2
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f023 0307 	bic.w	r3, r3, #7
 800cc92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca2:	2b04      	cmp	r3, #4
 800cca4:	d117      	bne.n	800ccd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00e      	beq.n	800ccd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fafb 	bl	800d2b4 <DMA_CheckFifoParam>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d008      	beq.n	800ccd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2240      	movs	r2, #64	; 0x40
 800ccc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e016      	b.n	800cd04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 fab2 	bl	800d248 <DMA_CalcBaseAndBitshift>
 800cce4:	4603      	mov	r3, r0
 800cce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccec:	223f      	movs	r2, #63	; 0x3f
 800ccee:	409a      	lsls	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	f010803f 	.word	0xf010803f

0800cd10 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e050      	b.n	800cdc4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d101      	bne.n	800cd32 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	e048      	b.n	800cdc4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0201 	bic.w	r2, r2, #1
 800cd40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2200      	movs	r2, #0
 800cd48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2200      	movs	r2, #0
 800cd58:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2200      	movs	r2, #0
 800cd68:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2221      	movs	r2, #33	; 0x21
 800cd70:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fa68 	bl	800d248 <DMA_CalcBaseAndBitshift>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda4:	223f      	movs	r2, #63	; 0x3f
 800cda6:	409a      	lsls	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d101      	bne.n	800cdf2 <HAL_DMA_Start_IT+0x26>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	e040      	b.n	800ce74 <HAL_DMA_Start_IT+0xa8>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d12f      	bne.n	800ce66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	68b9      	ldr	r1, [r7, #8]
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 f9e6 	bl	800d1ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce24:	223f      	movs	r2, #63	; 0x3f
 800ce26:	409a      	lsls	r2, r3
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f042 0216 	orr.w	r2, r2, #22
 800ce3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d007      	beq.n	800ce54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f042 0208 	orr.w	r2, r2, #8
 800ce52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f042 0201 	orr.w	r2, r2, #1
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	e005      	b.n	800ce72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ce6e:	2302      	movs	r3, #2
 800ce70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d004      	beq.n	800ce9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2280      	movs	r2, #128	; 0x80
 800ce94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	e00c      	b.n	800ceb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 0201 	bic.w	r2, r2, #1
 800ceb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cecc:	4b8e      	ldr	r3, [pc, #568]	; (800d108 <HAL_DMA_IRQHandler+0x248>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a8e      	ldr	r2, [pc, #568]	; (800d10c <HAL_DMA_IRQHandler+0x24c>)
 800ced2:	fba2 2303 	umull	r2, r3, r2, r3
 800ced6:	0a9b      	lsrs	r3, r3, #10
 800ced8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceea:	2208      	movs	r2, #8
 800ceec:	409a      	lsls	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	4013      	ands	r3, r2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d01a      	beq.n	800cf2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 0304 	and.w	r3, r3, #4
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d013      	beq.n	800cf2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f022 0204 	bic.w	r2, r2, #4
 800cf12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf18:	2208      	movs	r2, #8
 800cf1a:	409a      	lsls	r2, r3
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf24:	f043 0201 	orr.w	r2, r3, #1
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf30:	2201      	movs	r2, #1
 800cf32:	409a      	lsls	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4013      	ands	r3, r2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d012      	beq.n	800cf62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00b      	beq.n	800cf62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf4e:	2201      	movs	r2, #1
 800cf50:	409a      	lsls	r2, r3
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5a:	f043 0202 	orr.w	r2, r3, #2
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf66:	2204      	movs	r2, #4
 800cf68:	409a      	lsls	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d012      	beq.n	800cf98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0302 	and.w	r3, r3, #2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00b      	beq.n	800cf98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf84:	2204      	movs	r2, #4
 800cf86:	409a      	lsls	r2, r3
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf90:	f043 0204 	orr.w	r2, r3, #4
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9c:	2210      	movs	r2, #16
 800cf9e:	409a      	lsls	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	4013      	ands	r3, r2
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d043      	beq.n	800d030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0308 	and.w	r3, r3, #8
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d03c      	beq.n	800d030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfba:	2210      	movs	r2, #16
 800cfbc:	409a      	lsls	r2, r3
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d018      	beq.n	800d002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d108      	bne.n	800cff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d024      	beq.n	800d030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	4798      	blx	r3
 800cfee:	e01f      	b.n	800d030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d01b      	beq.n	800d030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	4798      	blx	r3
 800d000:	e016      	b.n	800d030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d107      	bne.n	800d020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f022 0208 	bic.w	r2, r2, #8
 800d01e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d034:	2220      	movs	r2, #32
 800d036:	409a      	lsls	r2, r3
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 808f 	beq.w	800d160 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f000 8087 	beq.w	800d160 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d056:	2220      	movs	r2, #32
 800d058:	409a      	lsls	r2, r3
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b05      	cmp	r3, #5
 800d068:	d136      	bne.n	800d0d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f022 0216 	bic.w	r2, r2, #22
 800d078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	695a      	ldr	r2, [r3, #20]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <HAL_DMA_IRQHandler+0x1da>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d096:	2b00      	cmp	r3, #0
 800d098:	d007      	beq.n	800d0aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f022 0208 	bic.w	r2, r2, #8
 800d0a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0ae:	223f      	movs	r2, #63	; 0x3f
 800d0b0:	409a      	lsls	r2, r3
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d07e      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	4798      	blx	r3
        }
        return;
 800d0d6:	e079      	b.n	800d1cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d01d      	beq.n	800d122 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10d      	bne.n	800d110 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d031      	beq.n	800d160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	4798      	blx	r3
 800d104:	e02c      	b.n	800d160 <HAL_DMA_IRQHandler+0x2a0>
 800d106:	bf00      	nop
 800d108:	20000000 	.word	0x20000000
 800d10c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d023      	beq.n	800d160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	4798      	blx	r3
 800d120:	e01e      	b.n	800d160 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10f      	bne.n	800d150 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f022 0210 	bic.w	r2, r2, #16
 800d13e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d164:	2b00      	cmp	r3, #0
 800d166:	d032      	beq.n	800d1ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	d022      	beq.n	800d1ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2205      	movs	r2, #5
 800d178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f022 0201 	bic.w	r2, r2, #1
 800d18a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	3301      	adds	r3, #1
 800d190:	60bb      	str	r3, [r7, #8]
 800d192:	697a      	ldr	r2, [r7, #20]
 800d194:	429a      	cmp	r2, r3
 800d196:	d307      	bcc.n	800d1a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1f2      	bne.n	800d18c <HAL_DMA_IRQHandler+0x2cc>
 800d1a6:	e000      	b.n	800d1aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800d1a8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d005      	beq.n	800d1ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	4798      	blx	r3
 800d1ca:	e000      	b.n	800d1ce <HAL_DMA_IRQHandler+0x30e>
        return;
 800d1cc:	bf00      	nop
    }
  }
}
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	2b40      	cmp	r3, #64	; 0x40
 800d218:	d108      	bne.n	800d22c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d22a:	e007      	b.n	800d23c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	60da      	str	r2, [r3, #12]
}
 800d23c:	bf00      	nop
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	b2db      	uxtb	r3, r3
 800d256:	3b10      	subs	r3, #16
 800d258:	4a14      	ldr	r2, [pc, #80]	; (800d2ac <DMA_CalcBaseAndBitshift+0x64>)
 800d25a:	fba2 2303 	umull	r2, r3, r2, r3
 800d25e:	091b      	lsrs	r3, r3, #4
 800d260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d262:	4a13      	ldr	r2, [pc, #76]	; (800d2b0 <DMA_CalcBaseAndBitshift+0x68>)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4413      	add	r3, r2
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b03      	cmp	r3, #3
 800d274:	d909      	bls.n	800d28a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d27e:	f023 0303 	bic.w	r3, r3, #3
 800d282:	1d1a      	adds	r2, r3, #4
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	659a      	str	r2, [r3, #88]	; 0x58
 800d288:	e007      	b.n	800d29a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d292:	f023 0303 	bic.w	r3, r3, #3
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	aaaaaaab 	.word	0xaaaaaaab
 800d2b0:	08025664 	.word	0x08025664

0800d2b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d11f      	bne.n	800d30e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b03      	cmp	r3, #3
 800d2d2:	d856      	bhi.n	800d382 <DMA_CheckFifoParam+0xce>
 800d2d4:	a201      	add	r2, pc, #4	; (adr r2, 800d2dc <DMA_CheckFifoParam+0x28>)
 800d2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2da:	bf00      	nop
 800d2dc:	0800d2ed 	.word	0x0800d2ed
 800d2e0:	0800d2ff 	.word	0x0800d2ff
 800d2e4:	0800d2ed 	.word	0x0800d2ed
 800d2e8:	0800d383 	.word	0x0800d383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d046      	beq.n	800d386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d2fc:	e043      	b.n	800d386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d306:	d140      	bne.n	800d38a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d30c:	e03d      	b.n	800d38a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d316:	d121      	bne.n	800d35c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d837      	bhi.n	800d38e <DMA_CheckFifoParam+0xda>
 800d31e:	a201      	add	r2, pc, #4	; (adr r2, 800d324 <DMA_CheckFifoParam+0x70>)
 800d320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d324:	0800d335 	.word	0x0800d335
 800d328:	0800d33b 	.word	0x0800d33b
 800d32c:	0800d335 	.word	0x0800d335
 800d330:	0800d34d 	.word	0x0800d34d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	73fb      	strb	r3, [r7, #15]
      break;
 800d338:	e030      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d025      	beq.n	800d392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d34a:	e022      	b.n	800d392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d354:	d11f      	bne.n	800d396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d35a:	e01c      	b.n	800d396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d903      	bls.n	800d36a <DMA_CheckFifoParam+0xb6>
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	2b03      	cmp	r3, #3
 800d366:	d003      	beq.n	800d370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d368:	e018      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	73fb      	strb	r3, [r7, #15]
      break;
 800d36e:	e015      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00e      	beq.n	800d39a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	73fb      	strb	r3, [r7, #15]
      break;
 800d380:	e00b      	b.n	800d39a <DMA_CheckFifoParam+0xe6>
      break;
 800d382:	bf00      	nop
 800d384:	e00a      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      break;
 800d386:	bf00      	nop
 800d388:	e008      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      break;
 800d38a:	bf00      	nop
 800d38c:	e006      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      break;
 800d38e:	bf00      	nop
 800d390:	e004      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      break;
 800d392:	bf00      	nop
 800d394:	e002      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      break;   
 800d396:	bf00      	nop
 800d398:	e000      	b.n	800d39c <DMA_CheckFifoParam+0xe8>
      break;
 800d39a:	bf00      	nop
    }
  } 
  
  return status; 
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop

0800d3ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b089      	sub	sp, #36	; 0x24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	61fb      	str	r3, [r7, #28]
 800d3c6:	e159      	b.n	800d67c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	4013      	ands	r3, r2
 800d3da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	f040 8148 	bne.w	800d676 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d00b      	beq.n	800d406 <HAL_GPIO_Init+0x5a>
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d007      	beq.n	800d406 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d3fa:	2b11      	cmp	r3, #17
 800d3fc:	d003      	beq.n	800d406 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	2b12      	cmp	r3, #18
 800d404:	d130      	bne.n	800d468 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	2203      	movs	r2, #3
 800d412:	fa02 f303 	lsl.w	r3, r2, r3
 800d416:	43db      	mvns	r3, r3
 800d418:	69ba      	ldr	r2, [r7, #24]
 800d41a:	4013      	ands	r3, r2
 800d41c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	68da      	ldr	r2, [r3, #12]
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	fa02 f303 	lsl.w	r3, r2, r3
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	69ba      	ldr	r2, [r7, #24]
 800d434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d43c:	2201      	movs	r2, #1
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	fa02 f303 	lsl.w	r3, r2, r3
 800d444:	43db      	mvns	r3, r3
 800d446:	69ba      	ldr	r2, [r7, #24]
 800d448:	4013      	ands	r3, r2
 800d44a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	091b      	lsrs	r3, r3, #4
 800d452:	f003 0201 	and.w	r2, r3, #1
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	fa02 f303 	lsl.w	r3, r2, r3
 800d45c:	69ba      	ldr	r2, [r7, #24]
 800d45e:	4313      	orrs	r3, r2
 800d460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	005b      	lsls	r3, r3, #1
 800d472:	2203      	movs	r2, #3
 800d474:	fa02 f303 	lsl.w	r3, r2, r3
 800d478:	43db      	mvns	r3, r3
 800d47a:	69ba      	ldr	r2, [r7, #24]
 800d47c:	4013      	ands	r3, r2
 800d47e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	005b      	lsls	r3, r3, #1
 800d488:	fa02 f303 	lsl.w	r3, r2, r3
 800d48c:	69ba      	ldr	r2, [r7, #24]
 800d48e:	4313      	orrs	r3, r2
 800d490:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	69ba      	ldr	r2, [r7, #24]
 800d496:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d003      	beq.n	800d4a8 <HAL_GPIO_Init+0xfc>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	2b12      	cmp	r3, #18
 800d4a6:	d123      	bne.n	800d4f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	08da      	lsrs	r2, r3, #3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3208      	adds	r2, #8
 800d4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	f003 0307 	and.w	r3, r3, #7
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	220f      	movs	r2, #15
 800d4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c4:	43db      	mvns	r3, r3
 800d4c6:	69ba      	ldr	r2, [r7, #24]
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	691a      	ldr	r2, [r3, #16]
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	f003 0307 	and.w	r3, r3, #7
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	08da      	lsrs	r2, r3, #3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3208      	adds	r2, #8
 800d4ea:	69b9      	ldr	r1, [r7, #24]
 800d4ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d500:	43db      	mvns	r3, r3
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	4013      	ands	r3, r2
 800d506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	f003 0203 	and.w	r2, r3, #3
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	fa02 f303 	lsl.w	r3, r2, r3
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80a2 	beq.w	800d676 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	4b57      	ldr	r3, [pc, #348]	; (800d694 <HAL_GPIO_Init+0x2e8>)
 800d538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53a:	4a56      	ldr	r2, [pc, #344]	; (800d694 <HAL_GPIO_Init+0x2e8>)
 800d53c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d540:	6453      	str	r3, [r2, #68]	; 0x44
 800d542:	4b54      	ldr	r3, [pc, #336]	; (800d694 <HAL_GPIO_Init+0x2e8>)
 800d544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d54e:	4a52      	ldr	r2, [pc, #328]	; (800d698 <HAL_GPIO_Init+0x2ec>)
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	089b      	lsrs	r3, r3, #2
 800d554:	3302      	adds	r3, #2
 800d556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d55a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	f003 0303 	and.w	r3, r3, #3
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	220f      	movs	r2, #15
 800d566:	fa02 f303 	lsl.w	r3, r2, r3
 800d56a:	43db      	mvns	r3, r3
 800d56c:	69ba      	ldr	r2, [r7, #24]
 800d56e:	4013      	ands	r3, r2
 800d570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a49      	ldr	r2, [pc, #292]	; (800d69c <HAL_GPIO_Init+0x2f0>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d019      	beq.n	800d5ae <HAL_GPIO_Init+0x202>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4a48      	ldr	r2, [pc, #288]	; (800d6a0 <HAL_GPIO_Init+0x2f4>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d013      	beq.n	800d5aa <HAL_GPIO_Init+0x1fe>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4a47      	ldr	r2, [pc, #284]	; (800d6a4 <HAL_GPIO_Init+0x2f8>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d00d      	beq.n	800d5a6 <HAL_GPIO_Init+0x1fa>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4a46      	ldr	r2, [pc, #280]	; (800d6a8 <HAL_GPIO_Init+0x2fc>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d007      	beq.n	800d5a2 <HAL_GPIO_Init+0x1f6>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a45      	ldr	r2, [pc, #276]	; (800d6ac <HAL_GPIO_Init+0x300>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d101      	bne.n	800d59e <HAL_GPIO_Init+0x1f2>
 800d59a:	2304      	movs	r3, #4
 800d59c:	e008      	b.n	800d5b0 <HAL_GPIO_Init+0x204>
 800d59e:	2307      	movs	r3, #7
 800d5a0:	e006      	b.n	800d5b0 <HAL_GPIO_Init+0x204>
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	e004      	b.n	800d5b0 <HAL_GPIO_Init+0x204>
 800d5a6:	2302      	movs	r3, #2
 800d5a8:	e002      	b.n	800d5b0 <HAL_GPIO_Init+0x204>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <HAL_GPIO_Init+0x204>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	69fa      	ldr	r2, [r7, #28]
 800d5b2:	f002 0203 	and.w	r2, r2, #3
 800d5b6:	0092      	lsls	r2, r2, #2
 800d5b8:	4093      	lsls	r3, r2
 800d5ba:	69ba      	ldr	r2, [r7, #24]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d5c0:	4935      	ldr	r1, [pc, #212]	; (800d698 <HAL_GPIO_Init+0x2ec>)
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	089b      	lsrs	r3, r3, #2
 800d5c6:	3302      	adds	r3, #2
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d5ce:	4b38      	ldr	r3, [pc, #224]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	43db      	mvns	r3, r3
 800d5d8:	69ba      	ldr	r2, [r7, #24]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d5f2:	4a2f      	ldr	r2, [pc, #188]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d5f8:	4b2d      	ldr	r3, [pc, #180]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	43db      	mvns	r3, r3
 800d602:	69ba      	ldr	r2, [r7, #24]
 800d604:	4013      	ands	r3, r2
 800d606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800d614:	69ba      	ldr	r2, [r7, #24]
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	4313      	orrs	r3, r2
 800d61a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d61c:	4a24      	ldr	r2, [pc, #144]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d622:	4b23      	ldr	r3, [pc, #140]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	43db      	mvns	r3, r3
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	4013      	ands	r3, r2
 800d630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800d63e:	69ba      	ldr	r2, [r7, #24]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	4313      	orrs	r3, r2
 800d644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d646:	4a1a      	ldr	r2, [pc, #104]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d64c:	4b18      	ldr	r3, [pc, #96]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	43db      	mvns	r3, r3
 800d656:	69ba      	ldr	r2, [r7, #24]
 800d658:	4013      	ands	r3, r2
 800d65a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800d668:	69ba      	ldr	r2, [r7, #24]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d670:	4a0f      	ldr	r2, [pc, #60]	; (800d6b0 <HAL_GPIO_Init+0x304>)
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	3301      	adds	r3, #1
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	2b0f      	cmp	r3, #15
 800d680:	f67f aea2 	bls.w	800d3c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	3724      	adds	r7, #36	; 0x24
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	40023800 	.word	0x40023800
 800d698:	40013800 	.word	0x40013800
 800d69c:	40020000 	.word	0x40020000
 800d6a0:	40020400 	.word	0x40020400
 800d6a4:	40020800 	.word	0x40020800
 800d6a8:	40020c00 	.word	0x40020c00
 800d6ac:	40021000 	.word	0x40021000
 800d6b0:	40013c00 	.word	0x40013c00

0800d6b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	617b      	str	r3, [r7, #20]
 800d6ce:	e0bb      	b.n	800d848 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	4013      	ands	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	f040 80ab 	bne.w	800d842 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d6ec:	4a5c      	ldr	r2, [pc, #368]	; (800d860 <HAL_GPIO_DeInit+0x1ac>)
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	089b      	lsrs	r3, r3, #2
 800d6f2:	3302      	adds	r3, #2
 800d6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f003 0303 	and.w	r3, r3, #3
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	220f      	movs	r2, #15
 800d704:	fa02 f303 	lsl.w	r3, r2, r3
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	4013      	ands	r3, r2
 800d70c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a54      	ldr	r2, [pc, #336]	; (800d864 <HAL_GPIO_DeInit+0x1b0>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d019      	beq.n	800d74a <HAL_GPIO_DeInit+0x96>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a53      	ldr	r2, [pc, #332]	; (800d868 <HAL_GPIO_DeInit+0x1b4>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d013      	beq.n	800d746 <HAL_GPIO_DeInit+0x92>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a52      	ldr	r2, [pc, #328]	; (800d86c <HAL_GPIO_DeInit+0x1b8>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d00d      	beq.n	800d742 <HAL_GPIO_DeInit+0x8e>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a51      	ldr	r2, [pc, #324]	; (800d870 <HAL_GPIO_DeInit+0x1bc>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d007      	beq.n	800d73e <HAL_GPIO_DeInit+0x8a>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a50      	ldr	r2, [pc, #320]	; (800d874 <HAL_GPIO_DeInit+0x1c0>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d101      	bne.n	800d73a <HAL_GPIO_DeInit+0x86>
 800d736:	2304      	movs	r3, #4
 800d738:	e008      	b.n	800d74c <HAL_GPIO_DeInit+0x98>
 800d73a:	2307      	movs	r3, #7
 800d73c:	e006      	b.n	800d74c <HAL_GPIO_DeInit+0x98>
 800d73e:	2303      	movs	r3, #3
 800d740:	e004      	b.n	800d74c <HAL_GPIO_DeInit+0x98>
 800d742:	2302      	movs	r3, #2
 800d744:	e002      	b.n	800d74c <HAL_GPIO_DeInit+0x98>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <HAL_GPIO_DeInit+0x98>
 800d74a:	2300      	movs	r3, #0
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	f002 0203 	and.w	r2, r2, #3
 800d752:	0092      	lsls	r2, r2, #2
 800d754:	4093      	lsls	r3, r2
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d132      	bne.n	800d7c2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d75c:	4b46      	ldr	r3, [pc, #280]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	43db      	mvns	r3, r3
 800d764:	4944      	ldr	r1, [pc, #272]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d766:	4013      	ands	r3, r2
 800d768:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d76a:	4b43      	ldr	r3, [pc, #268]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	43db      	mvns	r3, r3
 800d772:	4941      	ldr	r1, [pc, #260]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d774:	4013      	ands	r3, r2
 800d776:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d778:	4b3f      	ldr	r3, [pc, #252]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	43db      	mvns	r3, r3
 800d780:	493d      	ldr	r1, [pc, #244]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d782:	4013      	ands	r3, r2
 800d784:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d786:	4b3c      	ldr	r3, [pc, #240]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d788:	68da      	ldr	r2, [r3, #12]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	43db      	mvns	r3, r3
 800d78e:	493a      	ldr	r1, [pc, #232]	; (800d878 <HAL_GPIO_DeInit+0x1c4>)
 800d790:	4013      	ands	r3, r2
 800d792:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	220f      	movs	r2, #15
 800d79e:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d7a4:	4a2e      	ldr	r2, [pc, #184]	; (800d860 <HAL_GPIO_DeInit+0x1ac>)
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	089b      	lsrs	r3, r3, #2
 800d7aa:	3302      	adds	r3, #2
 800d7ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	43da      	mvns	r2, r3
 800d7b4:	482a      	ldr	r0, [pc, #168]	; (800d860 <HAL_GPIO_DeInit+0x1ac>)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	089b      	lsrs	r3, r3, #2
 800d7ba:	400a      	ands	r2, r1
 800d7bc:	3302      	adds	r3, #2
 800d7be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	2103      	movs	r1, #3
 800d7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d7d0:	43db      	mvns	r3, r3
 800d7d2:	401a      	ands	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	08da      	lsrs	r2, r3, #3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	3208      	adds	r2, #8
 800d7e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	220f      	movs	r2, #15
 800d7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f2:	43db      	mvns	r3, r3
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	08d2      	lsrs	r2, r2, #3
 800d7f8:	4019      	ands	r1, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	3208      	adds	r2, #8
 800d7fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	2103      	movs	r1, #3
 800d80c:	fa01 f303 	lsl.w	r3, r1, r3
 800d810:	43db      	mvns	r3, r3
 800d812:	401a      	ands	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	2101      	movs	r1, #1
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	fa01 f303 	lsl.w	r3, r1, r3
 800d824:	43db      	mvns	r3, r3
 800d826:	401a      	ands	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689a      	ldr	r2, [r3, #8]
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	2103      	movs	r1, #3
 800d836:	fa01 f303 	lsl.w	r3, r1, r3
 800d83a:	43db      	mvns	r3, r3
 800d83c:	401a      	ands	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	3301      	adds	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	2b0f      	cmp	r3, #15
 800d84c:	f67f af40 	bls.w	800d6d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	371c      	adds	r7, #28
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	40013800 	.word	0x40013800
 800d864:	40020000 	.word	0x40020000
 800d868:	40020400 	.word	0x40020400
 800d86c:	40020800 	.word	0x40020800
 800d870:	40020c00 	.word	0x40020c00
 800d874:	40021000 	.word	0x40021000
 800d878:	40013c00 	.word	0x40013c00

0800d87c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691a      	ldr	r2, [r3, #16]
 800d88c:	887b      	ldrh	r3, [r7, #2]
 800d88e:	4013      	ands	r3, r2
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d894:	2301      	movs	r3, #1
 800d896:	73fb      	strb	r3, [r7, #15]
 800d898:	e001      	b.n	800d89e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d89a:	2300      	movs	r3, #0
 800d89c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	807b      	strh	r3, [r7, #2]
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d8bc:	787b      	ldrb	r3, [r7, #1]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d003      	beq.n	800d8ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d8c2:	887a      	ldrh	r2, [r7, #2]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d8c8:	e003      	b.n	800d8d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d8ca:	887b      	ldrh	r3, [r7, #2]
 800d8cc:	041a      	lsls	r2, r3, #16
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	619a      	str	r2, [r3, #24]
}
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	695a      	ldr	r2, [r3, #20]
 800d8ee:	887b      	ldrh	r3, [r7, #2]
 800d8f0:	401a      	ands	r2, r3
 800d8f2:	887b      	ldrh	r3, [r7, #2]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d104      	bne.n	800d902 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d8f8:	887b      	ldrh	r3, [r7, #2]
 800d8fa:	041a      	lsls	r2, r3, #16
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800d900:	e002      	b.n	800d908 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800d902:	887a      	ldrh	r2, [r7, #2]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	619a      	str	r2, [r3, #24]
}
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e25e      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f003 0301 	and.w	r3, r3, #1
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d075      	beq.n	800da1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d932:	4b88      	ldr	r3, [pc, #544]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f003 030c 	and.w	r3, r3, #12
 800d93a:	2b04      	cmp	r3, #4
 800d93c:	d00c      	beq.n	800d958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d93e:	4b85      	ldr	r3, [pc, #532]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d946:	2b08      	cmp	r3, #8
 800d948:	d112      	bne.n	800d970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d94a:	4b82      	ldr	r3, [pc, #520]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d956:	d10b      	bne.n	800d970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d958:	4b7e      	ldr	r3, [pc, #504]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d960:	2b00      	cmp	r3, #0
 800d962:	d05b      	beq.n	800da1c <HAL_RCC_OscConfig+0x108>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d157      	bne.n	800da1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d96c:	2301      	movs	r3, #1
 800d96e:	e239      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d978:	d106      	bne.n	800d988 <HAL_RCC_OscConfig+0x74>
 800d97a:	4b76      	ldr	r3, [pc, #472]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a75      	ldr	r2, [pc, #468]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	e01d      	b.n	800d9c4 <HAL_RCC_OscConfig+0xb0>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d990:	d10c      	bne.n	800d9ac <HAL_RCC_OscConfig+0x98>
 800d992:	4b70      	ldr	r3, [pc, #448]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a6f      	ldr	r2, [pc, #444]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d99c:	6013      	str	r3, [r2, #0]
 800d99e:	4b6d      	ldr	r3, [pc, #436]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a6c      	ldr	r2, [pc, #432]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9a8:	6013      	str	r3, [r2, #0]
 800d9aa:	e00b      	b.n	800d9c4 <HAL_RCC_OscConfig+0xb0>
 800d9ac:	4b69      	ldr	r3, [pc, #420]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a68      	ldr	r2, [pc, #416]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	4b66      	ldr	r3, [pc, #408]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a65      	ldr	r2, [pc, #404]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d9c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d013      	beq.n	800d9f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9cc:	f7fe fa44 	bl	800be58 <HAL_GetTick>
 800d9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9d2:	e008      	b.n	800d9e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d9d4:	f7fe fa40 	bl	800be58 <HAL_GetTick>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	2b64      	cmp	r3, #100	; 0x64
 800d9e0:	d901      	bls.n	800d9e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	e1fe      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9e6:	4b5b      	ldr	r3, [pc, #364]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d0f0      	beq.n	800d9d4 <HAL_RCC_OscConfig+0xc0>
 800d9f2:	e014      	b.n	800da1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9f4:	f7fe fa30 	bl	800be58 <HAL_GetTick>
 800d9f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d9fa:	e008      	b.n	800da0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d9fc:	f7fe fa2c 	bl	800be58 <HAL_GetTick>
 800da00:	4602      	mov	r2, r0
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	2b64      	cmp	r3, #100	; 0x64
 800da08:	d901      	bls.n	800da0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e1ea      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800da0e:	4b51      	ldr	r3, [pc, #324]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1f0      	bne.n	800d9fc <HAL_RCC_OscConfig+0xe8>
 800da1a:	e000      	b.n	800da1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f003 0302 	and.w	r3, r3, #2
 800da26:	2b00      	cmp	r3, #0
 800da28:	d063      	beq.n	800daf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800da2a:	4b4a      	ldr	r3, [pc, #296]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f003 030c 	and.w	r3, r3, #12
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00b      	beq.n	800da4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800da36:	4b47      	ldr	r3, [pc, #284]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800da3e:	2b08      	cmp	r3, #8
 800da40:	d11c      	bne.n	800da7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800da42:	4b44      	ldr	r3, [pc, #272]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d116      	bne.n	800da7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800da4e:	4b41      	ldr	r3, [pc, #260]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d005      	beq.n	800da66 <HAL_RCC_OscConfig+0x152>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d001      	beq.n	800da66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e1be      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da66:	4b3b      	ldr	r3, [pc, #236]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	00db      	lsls	r3, r3, #3
 800da74:	4937      	ldr	r1, [pc, #220]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800da76:	4313      	orrs	r3, r2
 800da78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800da7a:	e03a      	b.n	800daf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d020      	beq.n	800dac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da84:	4b34      	ldr	r3, [pc, #208]	; (800db58 <HAL_RCC_OscConfig+0x244>)
 800da86:	2201      	movs	r2, #1
 800da88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da8a:	f7fe f9e5 	bl	800be58 <HAL_GetTick>
 800da8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da90:	e008      	b.n	800daa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da92:	f7fe f9e1 	bl	800be58 <HAL_GetTick>
 800da96:	4602      	mov	r2, r0
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d901      	bls.n	800daa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e19f      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800daa4:	4b2b      	ldr	r3, [pc, #172]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 0302 	and.w	r3, r3, #2
 800daac:	2b00      	cmp	r3, #0
 800daae:	d0f0      	beq.n	800da92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dab0:	4b28      	ldr	r3, [pc, #160]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	00db      	lsls	r3, r3, #3
 800dabe:	4925      	ldr	r1, [pc, #148]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800dac0:	4313      	orrs	r3, r2
 800dac2:	600b      	str	r3, [r1, #0]
 800dac4:	e015      	b.n	800daf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dac6:	4b24      	ldr	r3, [pc, #144]	; (800db58 <HAL_RCC_OscConfig+0x244>)
 800dac8:	2200      	movs	r2, #0
 800daca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dacc:	f7fe f9c4 	bl	800be58 <HAL_GetTick>
 800dad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dad2:	e008      	b.n	800dae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dad4:	f7fe f9c0 	bl	800be58 <HAL_GetTick>
 800dad8:	4602      	mov	r2, r0
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d901      	bls.n	800dae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e17e      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dae6:	4b1b      	ldr	r3, [pc, #108]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0302 	and.w	r3, r3, #2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1f0      	bne.n	800dad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f003 0308 	and.w	r3, r3, #8
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d036      	beq.n	800db6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	695b      	ldr	r3, [r3, #20]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d016      	beq.n	800db34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800db06:	4b15      	ldr	r3, [pc, #84]	; (800db5c <HAL_RCC_OscConfig+0x248>)
 800db08:	2201      	movs	r2, #1
 800db0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db0c:	f7fe f9a4 	bl	800be58 <HAL_GetTick>
 800db10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800db12:	e008      	b.n	800db26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800db14:	f7fe f9a0 	bl	800be58 <HAL_GetTick>
 800db18:	4602      	mov	r2, r0
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d901      	bls.n	800db26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800db22:	2303      	movs	r3, #3
 800db24:	e15e      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800db26:	4b0b      	ldr	r3, [pc, #44]	; (800db54 <HAL_RCC_OscConfig+0x240>)
 800db28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db2a:	f003 0302 	and.w	r3, r3, #2
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0f0      	beq.n	800db14 <HAL_RCC_OscConfig+0x200>
 800db32:	e01b      	b.n	800db6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800db34:	4b09      	ldr	r3, [pc, #36]	; (800db5c <HAL_RCC_OscConfig+0x248>)
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db3a:	f7fe f98d 	bl	800be58 <HAL_GetTick>
 800db3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db40:	e00e      	b.n	800db60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800db42:	f7fe f989 	bl	800be58 <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d907      	bls.n	800db60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800db50:	2303      	movs	r3, #3
 800db52:	e147      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
 800db54:	40023800 	.word	0x40023800
 800db58:	42470000 	.word	0x42470000
 800db5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db60:	4b88      	ldr	r3, [pc, #544]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800db62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db64:	f003 0302 	and.w	r3, r3, #2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1ea      	bne.n	800db42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 8097 	beq.w	800dca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db7a:	2300      	movs	r3, #0
 800db7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db7e:	4b81      	ldr	r3, [pc, #516]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800db80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10f      	bne.n	800dbaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db8a:	2300      	movs	r3, #0
 800db8c:	60bb      	str	r3, [r7, #8]
 800db8e:	4b7d      	ldr	r3, [pc, #500]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	4a7c      	ldr	r2, [pc, #496]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800db94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db98:	6413      	str	r3, [r2, #64]	; 0x40
 800db9a:	4b7a      	ldr	r3, [pc, #488]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800db9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dba2:	60bb      	str	r3, [r7, #8]
 800dba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dba6:	2301      	movs	r3, #1
 800dba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbaa:	4b77      	ldr	r3, [pc, #476]	; (800dd88 <HAL_RCC_OscConfig+0x474>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d118      	bne.n	800dbe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dbb6:	4b74      	ldr	r3, [pc, #464]	; (800dd88 <HAL_RCC_OscConfig+0x474>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a73      	ldr	r2, [pc, #460]	; (800dd88 <HAL_RCC_OscConfig+0x474>)
 800dbbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dbc2:	f7fe f949 	bl	800be58 <HAL_GetTick>
 800dbc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbc8:	e008      	b.n	800dbdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dbca:	f7fe f945 	bl	800be58 <HAL_GetTick>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d901      	bls.n	800dbdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	e103      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbdc:	4b6a      	ldr	r3, [pc, #424]	; (800dd88 <HAL_RCC_OscConfig+0x474>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d0f0      	beq.n	800dbca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d106      	bne.n	800dbfe <HAL_RCC_OscConfig+0x2ea>
 800dbf0:	4b64      	ldr	r3, [pc, #400]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dbf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf4:	4a63      	ldr	r2, [pc, #396]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dbf6:	f043 0301 	orr.w	r3, r3, #1
 800dbfa:	6713      	str	r3, [r2, #112]	; 0x70
 800dbfc:	e01c      	b.n	800dc38 <HAL_RCC_OscConfig+0x324>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	2b05      	cmp	r3, #5
 800dc04:	d10c      	bne.n	800dc20 <HAL_RCC_OscConfig+0x30c>
 800dc06:	4b5f      	ldr	r3, [pc, #380]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0a:	4a5e      	ldr	r2, [pc, #376]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc0c:	f043 0304 	orr.w	r3, r3, #4
 800dc10:	6713      	str	r3, [r2, #112]	; 0x70
 800dc12:	4b5c      	ldr	r3, [pc, #368]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc16:	4a5b      	ldr	r2, [pc, #364]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc18:	f043 0301 	orr.w	r3, r3, #1
 800dc1c:	6713      	str	r3, [r2, #112]	; 0x70
 800dc1e:	e00b      	b.n	800dc38 <HAL_RCC_OscConfig+0x324>
 800dc20:	4b58      	ldr	r3, [pc, #352]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc24:	4a57      	ldr	r2, [pc, #348]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc26:	f023 0301 	bic.w	r3, r3, #1
 800dc2a:	6713      	str	r3, [r2, #112]	; 0x70
 800dc2c:	4b55      	ldr	r3, [pc, #340]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc30:	4a54      	ldr	r2, [pc, #336]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc32:	f023 0304 	bic.w	r3, r3, #4
 800dc36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d015      	beq.n	800dc6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc40:	f7fe f90a 	bl	800be58 <HAL_GetTick>
 800dc44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc46:	e00a      	b.n	800dc5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc48:	f7fe f906 	bl	800be58 <HAL_GetTick>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d901      	bls.n	800dc5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e0c2      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc5e:	4b49      	ldr	r3, [pc, #292]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0ee      	beq.n	800dc48 <HAL_RCC_OscConfig+0x334>
 800dc6a:	e014      	b.n	800dc96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc6c:	f7fe f8f4 	bl	800be58 <HAL_GetTick>
 800dc70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc72:	e00a      	b.n	800dc8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc74:	f7fe f8f0 	bl	800be58 <HAL_GetTick>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d901      	bls.n	800dc8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e0ac      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc8a:	4b3e      	ldr	r3, [pc, #248]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1ee      	bne.n	800dc74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d105      	bne.n	800dca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc9c:	4b39      	ldr	r3, [pc, #228]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca0:	4a38      	ldr	r2, [pc, #224]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8098 	beq.w	800dde2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dcb2:	4b34      	ldr	r3, [pc, #208]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	f003 030c 	and.w	r3, r3, #12
 800dcba:	2b08      	cmp	r3, #8
 800dcbc:	d05c      	beq.n	800dd78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d141      	bne.n	800dd4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dcc6:	4b31      	ldr	r3, [pc, #196]	; (800dd8c <HAL_RCC_OscConfig+0x478>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dccc:	f7fe f8c4 	bl	800be58 <HAL_GetTick>
 800dcd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcd2:	e008      	b.n	800dce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dcd4:	f7fe f8c0 	bl	800be58 <HAL_GetTick>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d901      	bls.n	800dce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800dce2:	2303      	movs	r3, #3
 800dce4:	e07e      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dce6:	4b27      	ldr	r3, [pc, #156]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1f0      	bne.n	800dcd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	69da      	ldr	r2, [r3, #28]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	431a      	orrs	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd00:	019b      	lsls	r3, r3, #6
 800dd02:	431a      	orrs	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	085b      	lsrs	r3, r3, #1
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	041b      	lsls	r3, r3, #16
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd14:	061b      	lsls	r3, r3, #24
 800dd16:	491b      	ldr	r1, [pc, #108]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dd1c:	4b1b      	ldr	r3, [pc, #108]	; (800dd8c <HAL_RCC_OscConfig+0x478>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd22:	f7fe f899 	bl	800be58 <HAL_GetTick>
 800dd26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd28:	e008      	b.n	800dd3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd2a:	f7fe f895 	bl	800be58 <HAL_GetTick>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d901      	bls.n	800dd3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e053      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd3c:	4b11      	ldr	r3, [pc, #68]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d0f0      	beq.n	800dd2a <HAL_RCC_OscConfig+0x416>
 800dd48:	e04b      	b.n	800dde2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd4a:	4b10      	ldr	r3, [pc, #64]	; (800dd8c <HAL_RCC_OscConfig+0x478>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd50:	f7fe f882 	bl	800be58 <HAL_GetTick>
 800dd54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd56:	e008      	b.n	800dd6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd58:	f7fe f87e 	bl	800be58 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d901      	bls.n	800dd6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800dd66:	2303      	movs	r3, #3
 800dd68:	e03c      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd6a:	4b06      	ldr	r3, [pc, #24]	; (800dd84 <HAL_RCC_OscConfig+0x470>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1f0      	bne.n	800dd58 <HAL_RCC_OscConfig+0x444>
 800dd76:	e034      	b.n	800dde2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	699b      	ldr	r3, [r3, #24]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d107      	bne.n	800dd90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	e02f      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
 800dd84:	40023800 	.word	0x40023800
 800dd88:	40007000 	.word	0x40007000
 800dd8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dd90:	4b16      	ldr	r3, [pc, #88]	; (800ddec <HAL_RCC_OscConfig+0x4d8>)
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d11c      	bne.n	800ddde <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d115      	bne.n	800ddde <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ddb8:	4013      	ands	r3, r2
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d10d      	bne.n	800ddde <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d106      	bne.n	800ddde <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d001      	beq.n	800dde2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e000      	b.n	800dde4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	40023800 	.word	0x40023800

0800ddf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	e0cc      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800de04:	4b68      	ldr	r3, [pc, #416]	; (800dfa8 <HAL_RCC_ClockConfig+0x1b8>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f003 030f 	and.w	r3, r3, #15
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d90c      	bls.n	800de2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de12:	4b65      	ldr	r3, [pc, #404]	; (800dfa8 <HAL_RCC_ClockConfig+0x1b8>)
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de1a:	4b63      	ldr	r3, [pc, #396]	; (800dfa8 <HAL_RCC_ClockConfig+0x1b8>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 030f 	and.w	r3, r3, #15
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d001      	beq.n	800de2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e0b8      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f003 0302 	and.w	r3, r3, #2
 800de34:	2b00      	cmp	r3, #0
 800de36:	d020      	beq.n	800de7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f003 0304 	and.w	r3, r3, #4
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de44:	4b59      	ldr	r3, [pc, #356]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	4a58      	ldr	r2, [pc, #352]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800de4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f003 0308 	and.w	r3, r3, #8
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800de5c:	4b53      	ldr	r3, [pc, #332]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	4a52      	ldr	r2, [pc, #328]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800de66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de68:	4b50      	ldr	r3, [pc, #320]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	494d      	ldr	r1, [pc, #308]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de76:	4313      	orrs	r3, r2
 800de78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b00      	cmp	r3, #0
 800de84:	d044      	beq.n	800df10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d107      	bne.n	800de9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de8e:	4b47      	ldr	r3, [pc, #284]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de96:	2b00      	cmp	r3, #0
 800de98:	d119      	bne.n	800dece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e07f      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d003      	beq.n	800deae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d107      	bne.n	800debe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800deae:	4b3f      	ldr	r3, [pc, #252]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d109      	bne.n	800dece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e06f      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800debe:	4b3b      	ldr	r3, [pc, #236]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0302 	and.w	r3, r3, #2
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	e067      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dece:	4b37      	ldr	r3, [pc, #220]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	f023 0203 	bic.w	r2, r3, #3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	4934      	ldr	r1, [pc, #208]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800dedc:	4313      	orrs	r3, r2
 800dede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dee0:	f7fd ffba 	bl	800be58 <HAL_GetTick>
 800dee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dee6:	e00a      	b.n	800defe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dee8:	f7fd ffb6 	bl	800be58 <HAL_GetTick>
 800deec:	4602      	mov	r2, r0
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	f241 3288 	movw	r2, #5000	; 0x1388
 800def6:	4293      	cmp	r3, r2
 800def8:	d901      	bls.n	800defe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800defa:	2303      	movs	r3, #3
 800defc:	e04f      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800defe:	4b2b      	ldr	r3, [pc, #172]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	f003 020c 	and.w	r2, r3, #12
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d1eb      	bne.n	800dee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df10:	4b25      	ldr	r3, [pc, #148]	; (800dfa8 <HAL_RCC_ClockConfig+0x1b8>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f003 030f 	and.w	r3, r3, #15
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d20c      	bcs.n	800df38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df1e:	4b22      	ldr	r3, [pc, #136]	; (800dfa8 <HAL_RCC_ClockConfig+0x1b8>)
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	b2d2      	uxtb	r2, r2
 800df24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df26:	4b20      	ldr	r3, [pc, #128]	; (800dfa8 <HAL_RCC_ClockConfig+0x1b8>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f003 030f 	and.w	r3, r3, #15
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d001      	beq.n	800df38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	e032      	b.n	800df9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	d008      	beq.n	800df56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800df44:	4b19      	ldr	r3, [pc, #100]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	4916      	ldr	r1, [pc, #88]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800df52:	4313      	orrs	r3, r2
 800df54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 0308 	and.w	r3, r3, #8
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d009      	beq.n	800df76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800df62:	4b12      	ldr	r3, [pc, #72]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	490e      	ldr	r1, [pc, #56]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800df72:	4313      	orrs	r3, r2
 800df74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800df76:	f000 f821 	bl	800dfbc <HAL_RCC_GetSysClockFreq>
 800df7a:	4602      	mov	r2, r0
 800df7c:	4b0b      	ldr	r3, [pc, #44]	; (800dfac <HAL_RCC_ClockConfig+0x1bc>)
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	091b      	lsrs	r3, r3, #4
 800df82:	f003 030f 	and.w	r3, r3, #15
 800df86:	490a      	ldr	r1, [pc, #40]	; (800dfb0 <HAL_RCC_ClockConfig+0x1c0>)
 800df88:	5ccb      	ldrb	r3, [r1, r3]
 800df8a:	fa22 f303 	lsr.w	r3, r2, r3
 800df8e:	4a09      	ldr	r2, [pc, #36]	; (800dfb4 <HAL_RCC_ClockConfig+0x1c4>)
 800df90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800df92:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <HAL_RCC_ClockConfig+0x1c8>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd ff1a 	bl	800bdd0 <HAL_InitTick>

  return HAL_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	40023c00 	.word	0x40023c00
 800dfac:	40023800 	.word	0x40023800
 800dfb0:	080178f0 	.word	0x080178f0
 800dfb4:	20000000 	.word	0x20000000
 800dfb8:	200000c0 	.word	0x200000c0

0800dfbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dfbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfc0:	b090      	sub	sp, #64	; 0x40
 800dfc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc8:	2300      	movs	r3, #0
 800dfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfcc:	2300      	movs	r3, #0
 800dfce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dfd4:	4b59      	ldr	r3, [pc, #356]	; (800e13c <HAL_RCC_GetSysClockFreq+0x180>)
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f003 030c 	and.w	r3, r3, #12
 800dfdc:	2b08      	cmp	r3, #8
 800dfde:	d00d      	beq.n	800dffc <HAL_RCC_GetSysClockFreq+0x40>
 800dfe0:	2b08      	cmp	r3, #8
 800dfe2:	f200 80a1 	bhi.w	800e128 <HAL_RCC_GetSysClockFreq+0x16c>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d002      	beq.n	800dff0 <HAL_RCC_GetSysClockFreq+0x34>
 800dfea:	2b04      	cmp	r3, #4
 800dfec:	d003      	beq.n	800dff6 <HAL_RCC_GetSysClockFreq+0x3a>
 800dfee:	e09b      	b.n	800e128 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dff0:	4b53      	ldr	r3, [pc, #332]	; (800e140 <HAL_RCC_GetSysClockFreq+0x184>)
 800dff2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800dff4:	e09b      	b.n	800e12e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dff6:	4b53      	ldr	r3, [pc, #332]	; (800e144 <HAL_RCC_GetSysClockFreq+0x188>)
 800dff8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800dffa:	e098      	b.n	800e12e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dffc:	4b4f      	ldr	r3, [pc, #316]	; (800e13c <HAL_RCC_GetSysClockFreq+0x180>)
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e004:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e006:	4b4d      	ldr	r3, [pc, #308]	; (800e13c <HAL_RCC_GetSysClockFreq+0x180>)
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d028      	beq.n	800e064 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e012:	4b4a      	ldr	r3, [pc, #296]	; (800e13c <HAL_RCC_GetSysClockFreq+0x180>)
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	099b      	lsrs	r3, r3, #6
 800e018:	2200      	movs	r2, #0
 800e01a:	623b      	str	r3, [r7, #32]
 800e01c:	627a      	str	r2, [r7, #36]	; 0x24
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800e024:	2100      	movs	r1, #0
 800e026:	4b47      	ldr	r3, [pc, #284]	; (800e144 <HAL_RCC_GetSysClockFreq+0x188>)
 800e028:	fb03 f201 	mul.w	r2, r3, r1
 800e02c:	2300      	movs	r3, #0
 800e02e:	fb00 f303 	mul.w	r3, r0, r3
 800e032:	4413      	add	r3, r2
 800e034:	4a43      	ldr	r2, [pc, #268]	; (800e144 <HAL_RCC_GetSysClockFreq+0x188>)
 800e036:	fba0 1202 	umull	r1, r2, r0, r2
 800e03a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e03c:	460a      	mov	r2, r1
 800e03e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e042:	4413      	add	r3, r2
 800e044:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e048:	2200      	movs	r2, #0
 800e04a:	61bb      	str	r3, [r7, #24]
 800e04c:	61fa      	str	r2, [r7, #28]
 800e04e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e052:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e056:	f7f2 fe2f 	bl	8000cb8 <__aeabi_uldivmod>
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	4613      	mov	r3, r2
 800e060:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e062:	e053      	b.n	800e10c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e064:	4b35      	ldr	r3, [pc, #212]	; (800e13c <HAL_RCC_GetSysClockFreq+0x180>)
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	099b      	lsrs	r3, r3, #6
 800e06a:	2200      	movs	r2, #0
 800e06c:	613b      	str	r3, [r7, #16]
 800e06e:	617a      	str	r2, [r7, #20]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800e076:	f04f 0b00 	mov.w	fp, #0
 800e07a:	4652      	mov	r2, sl
 800e07c:	465b      	mov	r3, fp
 800e07e:	f04f 0000 	mov.w	r0, #0
 800e082:	f04f 0100 	mov.w	r1, #0
 800e086:	0159      	lsls	r1, r3, #5
 800e088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e08c:	0150      	lsls	r0, r2, #5
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	ebb2 080a 	subs.w	r8, r2, sl
 800e096:	eb63 090b 	sbc.w	r9, r3, fp
 800e09a:	f04f 0200 	mov.w	r2, #0
 800e09e:	f04f 0300 	mov.w	r3, #0
 800e0a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800e0a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800e0aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800e0ae:	ebb2 0408 	subs.w	r4, r2, r8
 800e0b2:	eb63 0509 	sbc.w	r5, r3, r9
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	f04f 0300 	mov.w	r3, #0
 800e0be:	00eb      	lsls	r3, r5, #3
 800e0c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e0c4:	00e2      	lsls	r2, r4, #3
 800e0c6:	4614      	mov	r4, r2
 800e0c8:	461d      	mov	r5, r3
 800e0ca:	eb14 030a 	adds.w	r3, r4, sl
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	eb45 030b 	adc.w	r3, r5, fp
 800e0d4:	607b      	str	r3, [r7, #4]
 800e0d6:	f04f 0200 	mov.w	r2, #0
 800e0da:	f04f 0300 	mov.w	r3, #0
 800e0de:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	028b      	lsls	r3, r1, #10
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	028a      	lsls	r2, r1, #10
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	60bb      	str	r3, [r7, #8]
 800e0fa:	60fa      	str	r2, [r7, #12]
 800e0fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e100:	f7f2 fdda 	bl	8000cb8 <__aeabi_uldivmod>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4613      	mov	r3, r2
 800e10a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e10c:	4b0b      	ldr	r3, [pc, #44]	; (800e13c <HAL_RCC_GetSysClockFreq+0x180>)
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	0c1b      	lsrs	r3, r3, #16
 800e112:	f003 0303 	and.w	r3, r3, #3
 800e116:	3301      	adds	r3, #1
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800e11c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	fbb2 f3f3 	udiv	r3, r2, r3
 800e124:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e126:	e002      	b.n	800e12e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e128:	4b05      	ldr	r3, [pc, #20]	; (800e140 <HAL_RCC_GetSysClockFreq+0x184>)
 800e12a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e12c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e130:	4618      	mov	r0, r3
 800e132:	3740      	adds	r7, #64	; 0x40
 800e134:	46bd      	mov	sp, r7
 800e136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e13a:	bf00      	nop
 800e13c:	40023800 	.word	0x40023800
 800e140:	00f42400 	.word	0x00f42400
 800e144:	017d7840 	.word	0x017d7840

0800e148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e148:	b480      	push	{r7}
 800e14a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e14c:	4b03      	ldr	r3, [pc, #12]	; (800e15c <HAL_RCC_GetHCLKFreq+0x14>)
 800e14e:	681b      	ldr	r3, [r3, #0]
}
 800e150:	4618      	mov	r0, r3
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	20000000 	.word	0x20000000

0800e160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e164:	f7ff fff0 	bl	800e148 <HAL_RCC_GetHCLKFreq>
 800e168:	4602      	mov	r2, r0
 800e16a:	4b05      	ldr	r3, [pc, #20]	; (800e180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	0a9b      	lsrs	r3, r3, #10
 800e170:	f003 0307 	and.w	r3, r3, #7
 800e174:	4903      	ldr	r1, [pc, #12]	; (800e184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e176:	5ccb      	ldrb	r3, [r1, r3]
 800e178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	40023800 	.word	0x40023800
 800e184:	08017900 	.word	0x08017900

0800e188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e18c:	f7ff ffdc 	bl	800e148 <HAL_RCC_GetHCLKFreq>
 800e190:	4602      	mov	r2, r0
 800e192:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	0b5b      	lsrs	r3, r3, #13
 800e198:	f003 0307 	and.w	r3, r3, #7
 800e19c:	4903      	ldr	r1, [pc, #12]	; (800e1ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800e19e:	5ccb      	ldrb	r3, [r1, r3]
 800e1a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	40023800 	.word	0x40023800
 800e1ac:	08017900 	.word	0x08017900

0800e1b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e022      	b.n	800e208 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d105      	bne.n	800e1da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7f7 f9e5 	bl	80055a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2203      	movs	r2, #3
 800e1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 f814 	bl	800e210 <HAL_SD_InitCard>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e00a      	b.n	800e208 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e210:	b5b0      	push	{r4, r5, r7, lr}
 800e212:	b08e      	sub	sp, #56	; 0x38
 800e214:	af04      	add	r7, sp, #16
 800e216:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e218:	2300      	movs	r3, #0
 800e21a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e21c:	2300      	movs	r3, #0
 800e21e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e220:	2300      	movs	r3, #0
 800e222:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e224:	2300      	movs	r3, #0
 800e226:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e228:	2300      	movs	r3, #0
 800e22a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e22c:	2376      	movs	r3, #118	; 0x76
 800e22e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681d      	ldr	r5, [r3, #0]
 800e234:	466c      	mov	r4, sp
 800e236:	f107 0314 	add.w	r3, r7, #20
 800e23a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e23e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e242:	f107 0308 	add.w	r3, r7, #8
 800e246:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e248:	4628      	mov	r0, r5
 800e24a:	f003 ff9b 	bl	8012184 <SDIO_Init>
 800e24e:	4603      	mov	r3, r0
 800e250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e25c:	2301      	movs	r3, #1
 800e25e:	e031      	b.n	800e2c4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e260:	4b1a      	ldr	r3, [pc, #104]	; (800e2cc <HAL_SD_InitCard+0xbc>)
 800e262:	2200      	movs	r2, #0
 800e264:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4618      	mov	r0, r3
 800e26c:	f003 ffd3 	bl	8012216 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e270:	4b16      	ldr	r3, [pc, #88]	; (800e2cc <HAL_SD_InitCard+0xbc>)
 800e272:	2201      	movs	r2, #1
 800e274:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 ffe6 	bl	800f248 <SD_PowerON>
 800e27c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	431a      	orrs	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e013      	b.n	800e2c4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 ff05 	bl	800f0ac <SD_InitCard>
 800e2a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00b      	beq.n	800e2c2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	431a      	orrs	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e000      	b.n	800e2c4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3728      	adds	r7, #40	; 0x28
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e2cc:	422580a0 	.word	0x422580a0

0800e2d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08c      	sub	sp, #48	; 0x30
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d107      	bne.n	800e2f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e0c9      	b.n	800e48c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b01      	cmp	r3, #1
 800e302:	f040 80c2 	bne.w	800e48a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	441a      	add	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e316:	429a      	cmp	r2, r3
 800e318:	d907      	bls.n	800e32a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e31e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e0b0      	b.n	800e48c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2203      	movs	r2, #3
 800e32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2200      	movs	r2, #0
 800e338:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	6812      	ldr	r2, [r2, #0]
 800e344:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800e348:	f043 0302 	orr.w	r3, r3, #2
 800e34c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e352:	4a50      	ldr	r2, [pc, #320]	; (800e494 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35a:	4a4f      	ldr	r2, [pc, #316]	; (800e498 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e35c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e362:	2200      	movs	r2, #0
 800e364:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3380      	adds	r3, #128	; 0x80
 800e370:	4619      	mov	r1, r3
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	025b      	lsls	r3, r3, #9
 800e378:	089b      	lsrs	r3, r3, #2
 800e37a:	f7fe fd27 	bl	800cdcc <HAL_DMA_Start_IT>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d017      	beq.n	800e3b4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e392:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a40      	ldr	r2, [pc, #256]	; (800e49c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e39a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e06b      	b.n	800e48c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e3b4:	4b3a      	ldr	r3, [pc, #232]	; (800e4a0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d002      	beq.n	800e3c8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800e3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c4:	025b      	lsls	r3, r3, #9
 800e3c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f003 ffb3 	bl	801233c <SDMMC_CmdBlockLength>
 800e3d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00f      	beq.n	800e3fe <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a2e      	ldr	r2, [pc, #184]	; (800e49c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	431a      	orrs	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e046      	b.n	800e48c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e402:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	025b      	lsls	r3, r3, #9
 800e408:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e40a:	2390      	movs	r3, #144	; 0x90
 800e40c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e40e:	2302      	movs	r3, #2
 800e410:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e412:	2300      	movs	r3, #0
 800e414:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e416:	2301      	movs	r3, #1
 800e418:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f107 0210 	add.w	r2, r7, #16
 800e422:	4611      	mov	r1, r2
 800e424:	4618      	mov	r0, r3
 800e426:	f003 ff5d 	bl	80122e4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d90a      	bls.n	800e446 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2282      	movs	r2, #130	; 0x82
 800e434:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e43c:	4618      	mov	r0, r3
 800e43e:	f003 ffc1 	bl	80123c4 <SDMMC_CmdReadMultiBlock>
 800e442:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e444:	e009      	b.n	800e45a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2281      	movs	r2, #129	; 0x81
 800e44a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e452:	4618      	mov	r0, r3
 800e454:	f003 ff94 	bl	8012380 <SDMMC_CmdReadSingleBlock>
 800e458:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d012      	beq.n	800e486 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a0d      	ldr	r2, [pc, #52]	; (800e49c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e466:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	431a      	orrs	r2, r3
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	e002      	b.n	800e48c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	e000      	b.n	800e48c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800e48a:	2302      	movs	r3, #2
  }
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3730      	adds	r7, #48	; 0x30
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	0800eebb 	.word	0x0800eebb
 800e498:	0800ef2d 	.word	0x0800ef2d
 800e49c:	004005ff 	.word	0x004005ff
 800e4a0:	4225858c 	.word	0x4225858c

0800e4a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08c      	sub	sp, #48	; 0x30
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
 800e4b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d107      	bne.n	800e4cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e0ce      	b.n	800e66a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	f040 80c7 	bne.w	800e668 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	441a      	add	r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d907      	bls.n	800e4fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e0b5      	b.n	800e66a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2203      	movs	r2, #3
 800e502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2200      	movs	r2, #0
 800e50c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	6812      	ldr	r2, [r2, #0]
 800e518:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800e51c:	f043 0302 	orr.w	r3, r3, #2
 800e520:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e526:	4a53      	ldr	r2, [pc, #332]	; (800e674 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800e528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52e:	4a52      	ldr	r2, [pc, #328]	; (800e678 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800e530:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e536:	2200      	movs	r2, #0
 800e538:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d002      	beq.n	800e548 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	025b      	lsls	r3, r3, #9
 800e546:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e550:	4618      	mov	r0, r3
 800e552:	f003 fef3 	bl	801233c <SDMMC_CmdBlockLength>
 800e556:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00f      	beq.n	800e57e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a46      	ldr	r2, [pc, #280]	; (800e67c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56c:	431a      	orrs	r2, r3
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	e075      	b.n	800e66a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b01      	cmp	r3, #1
 800e582:	d90a      	bls.n	800e59a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	22a0      	movs	r2, #160	; 0xa0
 800e588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e590:	4618      	mov	r0, r3
 800e592:	f003 ff5b 	bl	801244c <SDMMC_CmdWriteMultiBlock>
 800e596:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e598:	e009      	b.n	800e5ae <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2290      	movs	r2, #144	; 0x90
 800e59e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f003 ff2e 	bl	8012408 <SDMMC_CmdWriteSingleBlock>
 800e5ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d012      	beq.n	800e5da <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a30      	ldr	r2, [pc, #192]	; (800e67c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e5ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	431a      	orrs	r2, r3
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e047      	b.n	800e66a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e5da:	4b29      	ldr	r3, [pc, #164]	; (800e680 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800e5dc:	2201      	movs	r2, #1
 800e5de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e5e4:	68b9      	ldr	r1, [r7, #8]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3380      	adds	r3, #128	; 0x80
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	025b      	lsls	r3, r3, #9
 800e5f2:	089b      	lsrs	r3, r3, #2
 800e5f4:	f7fe fbea 	bl	800cdcc <HAL_DMA_Start_IT>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d01c      	beq.n	800e638 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	6812      	ldr	r2, [r2, #0]
 800e608:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800e60c:	f023 0302 	bic.w	r3, r3, #2
 800e610:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a19      	ldr	r2, [pc, #100]	; (800e67c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	e018      	b.n	800e66a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e638:	f04f 33ff 	mov.w	r3, #4294967295
 800e63c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	025b      	lsls	r3, r3, #9
 800e642:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e644:	2390      	movs	r3, #144	; 0x90
 800e646:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e648:	2300      	movs	r3, #0
 800e64a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e64c:	2300      	movs	r3, #0
 800e64e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e650:	2301      	movs	r3, #1
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f107 0210 	add.w	r2, r7, #16
 800e65c:	4611      	mov	r1, r2
 800e65e:	4618      	mov	r0, r3
 800e660:	f003 fe40 	bl	80122e4 <SDIO_ConfigData>

      return HAL_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	e000      	b.n	800e66a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e668:	2302      	movs	r3, #2
  }
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3730      	adds	r7, #48	; 0x30
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	0800ee91 	.word	0x0800ee91
 800e678:	0800ef2d 	.word	0x0800ef2d
 800e67c:	004005ff 	.word	0x004005ff
 800e680:	4225858c 	.word	0x4225858c

0800e684 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e690:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d008      	beq.n	800e6b2 <HAL_SD_IRQHandler+0x2e>
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f003 0308 	and.w	r3, r3, #8
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 ffe2 	bl	800f674 <SD_Read_IT>
 800e6b0:	e165      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 808f 	beq.w	800e7e0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e6ca:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	6812      	ldr	r2, [r2, #0]
 800e6d6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800e6da:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800e6de:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 0201 	bic.w	r2, r2, #1
 800e6ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f003 0308 	and.w	r3, r3, #8
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d039      	beq.n	800e76e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f003 0302 	and.w	r3, r3, #2
 800e700:	2b00      	cmp	r3, #0
 800e702:	d104      	bne.n	800e70e <HAL_SD_IRQHandler+0x8a>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f003 0320 	and.w	r3, r3, #32
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d011      	beq.n	800e732 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4618      	mov	r0, r3
 800e714:	f003 febc 	bl	8012490 <SDMMC_CmdStopTransfer>
 800e718:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d008      	beq.n	800e732 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	431a      	orrs	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f92f 	bl	800e990 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f240 523a 	movw	r2, #1338	; 0x53a
 800e73a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d104      	bne.n	800e75e <HAL_SD_IRQHandler+0xda>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f003 0302 	and.w	r3, r3, #2
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d003      	beq.n	800e766 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f6 ff00 	bl	8005564 <HAL_SD_RxCpltCallback>
 800e764:	e10b      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7f6 ff0c 	bl	8005584 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e76c:	e107      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 8102 	beq.w	800e97e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d011      	beq.n	800e7a8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4618      	mov	r0, r3
 800e78a:	f003 fe81 	bl	8012490 <SDMMC_CmdStopTransfer>
 800e78e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d008      	beq.n	800e7a8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	431a      	orrs	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f8f4 	bl	800e990 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f003 0301 	and.w	r3, r3, #1
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f040 80e5 	bne.w	800e97e <HAL_SD_IRQHandler+0x2fa>
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f003 0302 	and.w	r3, r3, #2
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f040 80df 	bne.w	800e97e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f022 0208 	bic.w	r2, r2, #8
 800e7ce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7f6 fed3 	bl	8005584 <HAL_SD_TxCpltCallback>
}
 800e7de:	e0ce      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d008      	beq.n	800e800 <HAL_SD_IRQHandler+0x17c>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f003 0308 	and.w	r3, r3, #8
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 ff8c 	bl	800f716 <SD_Write_IT>
 800e7fe:	e0be      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e806:	f240 233a 	movw	r3, #570	; 0x23a
 800e80a:	4013      	ands	r3, r2
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f000 80b6 	beq.w	800e97e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e818:	f003 0302 	and.w	r3, r3, #2
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d005      	beq.n	800e82c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e824:	f043 0202 	orr.w	r2, r3, #2
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e832:	f003 0308 	and.w	r3, r3, #8
 800e836:	2b00      	cmp	r3, #0
 800e838:	d005      	beq.n	800e846 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83e:	f043 0208 	orr.w	r2, r3, #8
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84c:	f003 0320 	and.w	r3, r3, #32
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e858:	f043 0220 	orr.w	r2, r3, #32
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e866:	f003 0310 	and.w	r3, r3, #16
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d005      	beq.n	800e87a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e872:	f043 0210 	orr.w	r2, r3, #16
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e884:	2b00      	cmp	r3, #0
 800e886:	d005      	beq.n	800e894 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88c:	f043 0208 	orr.w	r2, r3, #8
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f240 723a 	movw	r2, #1850	; 0x73a
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	6812      	ldr	r2, [r2, #0]
 800e8a8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800e8ac:	f023 0302 	bic.w	r3, r3, #2
 800e8b0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f003 fdea 	bl	8012490 <SDMMC_CmdStopTransfer>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c2:	431a      	orrs	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f003 0308 	and.w	r3, r3, #8
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00a      	beq.n	800e8e8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f855 	bl	800e990 <HAL_SD_ErrorCallback>
}
 800e8e6:	e04a      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d045      	beq.n	800e97e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f003 0310 	and.w	r3, r3, #16
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d104      	bne.n	800e906 <HAL_SD_IRQHandler+0x282>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f003 0320 	and.w	r3, r3, #32
 800e902:	2b00      	cmp	r3, #0
 800e904:	d011      	beq.n	800e92a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e90a:	4a1f      	ldr	r2, [pc, #124]	; (800e988 <HAL_SD_IRQHandler+0x304>)
 800e90c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe fab2 	bl	800ce7c <HAL_DMA_Abort_IT>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d02f      	beq.n	800e97e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e922:	4618      	mov	r0, r3
 800e924:	f000 fb54 	bl	800efd0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e928:	e029      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f003 0301 	and.w	r3, r3, #1
 800e930:	2b00      	cmp	r3, #0
 800e932:	d104      	bne.n	800e93e <HAL_SD_IRQHandler+0x2ba>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f003 0302 	and.w	r3, r3, #2
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d011      	beq.n	800e962 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e942:	4a12      	ldr	r2, [pc, #72]	; (800e98c <HAL_SD_IRQHandler+0x308>)
 800e944:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe fa96 	bl	800ce7c <HAL_DMA_Abort_IT>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d013      	beq.n	800e97e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 fb6f 	bl	800f03e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e960:	e00d      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f814 	bl	800e9a4 <HAL_SD_AbortCallback>
}
 800e97c:	e7ff      	b.n	800e97e <HAL_SD_IRQHandler+0x2fa>
 800e97e:	bf00      	nop
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	0800efd1 	.word	0x0800efd1
 800e98c:	0800f03f 	.word	0x0800f03f

0800e990 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800e9ac:	bf00      	nop
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c6:	0f9b      	lsrs	r3, r3, #30
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d2:	0e9b      	lsrs	r3, r3, #26
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	f003 030f 	and.w	r3, r3, #15
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9e4:	0e1b      	lsrs	r3, r3, #24
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	f003 0303 	and.w	r3, r3, #3
 800e9ec:	b2da      	uxtb	r2, r3
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9f6:	0c1b      	lsrs	r3, r3, #16
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea02:	0a1b      	lsrs	r3, r3, #8
 800ea04:	b2da      	uxtb	r2, r3
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea18:	0d1b      	lsrs	r3, r3, #20
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea24:	0c1b      	lsrs	r3, r3, #16
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	f003 030f 	and.w	r3, r3, #15
 800ea2c:	b2da      	uxtb	r2, r3
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea36:	0bdb      	lsrs	r3, r3, #15
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea48:	0b9b      	lsrs	r3, r3, #14
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea5a:	0b5b      	lsrs	r3, r3, #13
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea6c:	0b1b      	lsrs	r3, r3, #12
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d163      	bne.n	800eb50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea8c:	009a      	lsls	r2, r3, #2
 800ea8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ea92:	4013      	ands	r3, r2
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ea98:	0f92      	lsrs	r2, r2, #30
 800ea9a:	431a      	orrs	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaa4:	0edb      	lsrs	r3, r3, #27
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	f003 0307 	and.w	r3, r3, #7
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab6:	0e1b      	lsrs	r3, r3, #24
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	f003 0307 	and.w	r3, r3, #7
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac8:	0d5b      	lsrs	r3, r3, #21
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	f003 0307 	and.w	r3, r3, #7
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eada:	0c9b      	lsrs	r3, r3, #18
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	f003 0307 	and.w	r3, r3, #7
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaec:	0bdb      	lsrs	r3, r3, #15
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	f003 0307 	and.w	r3, r3, #7
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	1c5a      	adds	r2, r3, #1
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	7e1b      	ldrb	r3, [r3, #24]
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	f003 0307 	and.w	r3, r3, #7
 800eb0e:	3302      	adds	r3, #2
 800eb10:	2201      	movs	r2, #1
 800eb12:	fa02 f303 	lsl.w	r3, r2, r3
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800eb1a:	fb03 f202 	mul.w	r2, r3, r2
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	7a1b      	ldrb	r3, [r3, #8]
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	f003 030f 	and.w	r3, r3, #15
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	409a      	lsls	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800eb3c:	0a52      	lsrs	r2, r2, #9
 800eb3e:	fb03 f202 	mul.w	r2, r3, r2
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb4c:	661a      	str	r2, [r3, #96]	; 0x60
 800eb4e:	e031      	b.n	800ebb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d11d      	bne.n	800eb94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb5c:	041b      	lsls	r3, r3, #16
 800eb5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb66:	0c1b      	lsrs	r3, r3, #16
 800eb68:	431a      	orrs	r2, r3
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	3301      	adds	r3, #1
 800eb74:	029a      	lsls	r2, r3, #10
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	661a      	str	r2, [r3, #96]	; 0x60
 800eb92:	e00f      	b.n	800ebb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a58      	ldr	r2, [pc, #352]	; (800ecfc <HAL_SD_GetCardCSD+0x344>)
 800eb9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e09d      	b.n	800ecf0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb8:	0b9b      	lsrs	r3, r3, #14
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	f003 0301 	and.w	r3, r3, #1
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebca:	09db      	lsrs	r3, r3, #7
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebec:	0fdb      	lsrs	r3, r3, #31
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf8:	0f5b      	lsrs	r3, r3, #29
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	f003 0303 	and.w	r3, r3, #3
 800ec00:	b2da      	uxtb	r2, r3
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec0a:	0e9b      	lsrs	r3, r3, #26
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	f003 0307 	and.w	r3, r3, #7
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1c:	0d9b      	lsrs	r3, r3, #22
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	f003 030f 	and.w	r3, r3, #15
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2e:	0d5b      	lsrs	r3, r3, #21
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	b2da      	uxtb	r2, r3
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec4a:	0c1b      	lsrs	r3, r3, #16
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec5e:	0bdb      	lsrs	r3, r3, #15
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	f003 0301 	and.w	r3, r3, #1
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec72:	0b9b      	lsrs	r3, r3, #14
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec86:	0b5b      	lsrs	r3, r3, #13
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	f003 0301 	and.w	r3, r3, #1
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec9a:	0b1b      	lsrs	r3, r3, #12
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecae:	0a9b      	lsrs	r3, r3, #10
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	f003 0303 	and.w	r3, r3, #3
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecc2:	0a1b      	lsrs	r3, r3, #8
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	f003 0303 	and.w	r3, r3, #3
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecd6:	085b      	lsrs	r3, r3, #1
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	004005ff 	.word	0x004005ff

0800ed00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ed58:	b5b0      	push	{r4, r5, r7, lr}
 800ed5a:	b08e      	sub	sp, #56	; 0x38
 800ed5c:	af04      	add	r7, sp, #16
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2203      	movs	r2, #3
 800ed66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d02e      	beq.n	800edd0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed78:	d106      	bne.n	800ed88 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
 800ed86:	e029      	b.n	800eddc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed8e:	d10a      	bne.n	800eda6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fb0f 	bl	800f3b4 <SD_WideBus_Enable>
 800ed96:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	639a      	str	r2, [r3, #56]	; 0x38
 800eda4:	e01a      	b.n	800eddc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d10a      	bne.n	800edc2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f000 fb4c 	bl	800f44a <SD_WideBus_Disable>
 800edb2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edba:	431a      	orrs	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	639a      	str	r2, [r3, #56]	; 0x38
 800edc0:	e00c      	b.n	800eddc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	639a      	str	r2, [r3, #56]	; 0x38
 800edce:	e005      	b.n	800eddc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d009      	beq.n	800edf8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a18      	ldr	r2, [pc, #96]	; (800ee4c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800edea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800edf4:	2301      	movs	r3, #1
 800edf6:	e024      	b.n	800ee42 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	695b      	ldr	r3, [r3, #20]
 800ee12:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	699b      	ldr	r3, [r3, #24]
 800ee18:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681d      	ldr	r5, [r3, #0]
 800ee1e:	466c      	mov	r4, sp
 800ee20:	f107 0318 	add.w	r3, r7, #24
 800ee24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee2c:	f107 030c 	add.w	r3, r7, #12
 800ee30:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee32:	4628      	mov	r0, r5
 800ee34:	f003 f9a6 	bl	8012184 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3728      	adds	r7, #40	; 0x28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bdb0      	pop	{r4, r5, r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	004005ff 	.word	0x004005ff

0800ee50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ee5c:	f107 030c 	add.w	r3, r7, #12
 800ee60:	4619      	mov	r1, r3
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fa7e 	bl	800f364 <SD_SendStatus>
 800ee68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d005      	beq.n	800ee7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	431a      	orrs	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	0a5b      	lsrs	r3, r3, #9
 800ee80:	f003 030f 	and.w	r3, r3, #15
 800ee84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ee86:	693b      	ldr	r3, [r7, #16]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eeac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800eeae:	bf00      	nop
 800eeb0:	3714      	adds	r7, #20
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b084      	sub	sp, #16
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eecc:	2b82      	cmp	r3, #130	; 0x82
 800eece:	d111      	bne.n	800eef4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f003 fadb 	bl	8012490 <SDMMC_CmdStopTransfer>
 800eeda:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d008      	beq.n	800eef4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	431a      	orrs	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7ff fd4e 	bl	800e990 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f022 0208 	bic.w	r2, r2, #8
 800ef02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f240 523a 	movw	r2, #1338	; 0x53a
 800ef0c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f7f6 fb21 	bl	8005564 <HAL_SD_RxCpltCallback>
#endif
}
 800ef22:	bf00      	nop
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b086      	sub	sp, #24
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef38:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7fe f94a 	bl	800d1d4 <HAL_DMA_GetError>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d03e      	beq.n	800efc4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef4c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef54:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d002      	beq.n	800ef62 <SD_DMAError+0x36>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d12d      	bne.n	800efbe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a19      	ldr	r2, [pc, #100]	; (800efcc <SD_DMAError+0xa0>)
 800ef68:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ef78:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ef86:	6978      	ldr	r0, [r7, #20]
 800ef88:	f7ff ff62 	bl	800ee50 <HAL_SD_GetCardState>
 800ef8c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2b06      	cmp	r3, #6
 800ef92:	d002      	beq.n	800ef9a <SD_DMAError+0x6e>
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	2b05      	cmp	r3, #5
 800ef98:	d10a      	bne.n	800efb0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f003 fa76 	bl	8012490 <SDMMC_CmdStopTransfer>
 800efa4:	4602      	mov	r2, r0
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efaa:	431a      	orrs	r2, r3
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2200      	movs	r2, #0
 800efbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800efbe:	6978      	ldr	r0, [r7, #20]
 800efc0:	f7ff fce6 	bl	800e990 <HAL_SD_ErrorCallback>
#endif
  }
}
 800efc4:	bf00      	nop
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	004005ff 	.word	0x004005ff

0800efd0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efdc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f240 523a 	movw	r2, #1338	; 0x53a
 800efe6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f7ff ff31 	bl	800ee50 <HAL_SD_GetCardState>
 800efee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2200      	movs	r2, #0
 800effc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b06      	cmp	r3, #6
 800f002:	d002      	beq.n	800f00a <SD_DMATxAbort+0x3a>
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	2b05      	cmp	r3, #5
 800f008:	d10a      	bne.n	800f020 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	f003 fa3e 	bl	8012490 <SDMMC_CmdStopTransfer>
 800f014:	4602      	mov	r2, r0
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01a:	431a      	orrs	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f024:	2b00      	cmp	r3, #0
 800f026:	d103      	bne.n	800f030 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f7ff fcbb 	bl	800e9a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f02e:	e002      	b.n	800f036 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f7ff fcad 	bl	800e990 <HAL_SD_ErrorCallback>
}
 800f036:	bf00      	nop
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b084      	sub	sp, #16
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f04a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f240 523a 	movw	r2, #1338	; 0x53a
 800f054:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff fefa 	bl	800ee50 <HAL_SD_GetCardState>
 800f05c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2201      	movs	r2, #1
 800f062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b06      	cmp	r3, #6
 800f070:	d002      	beq.n	800f078 <SD_DMARxAbort+0x3a>
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	2b05      	cmp	r3, #5
 800f076:	d10a      	bne.n	800f08e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f003 fa07 	bl	8012490 <SDMMC_CmdStopTransfer>
 800f082:	4602      	mov	r2, r0
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f088:	431a      	orrs	r2, r3
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f092:	2b00      	cmp	r3, #0
 800f094:	d103      	bne.n	800f09e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7ff fc84 	bl	800e9a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f09c:	e002      	b.n	800f0a4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff fc76 	bl	800e990 <HAL_SD_ErrorCallback>
}
 800f0a4:	bf00      	nop
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f0ac:	b5b0      	push	{r4, r5, r7, lr}
 800f0ae:	b094      	sub	sp, #80	; 0x50
 800f0b0:	af04      	add	r7, sp, #16
 800f0b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f003 f8b9 	bl	8012234 <SDIO_GetPowerState>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d102      	bne.n	800f0ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f0c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f0cc:	e0b8      	b.n	800f240 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d02f      	beq.n	800f136 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f003 fae2 	bl	80126a4 <SDMMC_CmdSendCID>
 800f0e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d001      	beq.n	800f0ec <SD_InitCard+0x40>
    {
      return errorstate;
 800f0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ea:	e0a9      	b.n	800f240 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f003 f8e3 	bl	80122be <SDIO_GetResponse>
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2104      	movs	r1, #4
 800f104:	4618      	mov	r0, r3
 800f106:	f003 f8da 	bl	80122be <SDIO_GetResponse>
 800f10a:	4602      	mov	r2, r0
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2108      	movs	r1, #8
 800f116:	4618      	mov	r0, r3
 800f118:	f003 f8d1 	bl	80122be <SDIO_GetResponse>
 800f11c:	4602      	mov	r2, r0
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	210c      	movs	r1, #12
 800f128:	4618      	mov	r0, r3
 800f12a:	f003 f8c8 	bl	80122be <SDIO_GetResponse>
 800f12e:	4602      	mov	r2, r0
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d00d      	beq.n	800f15a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f107 020e 	add.w	r2, r7, #14
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f003 fae8 	bl	801271e <SDMMC_CmdSetRelAdd>
 800f14e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <SD_InitCard+0xae>
    {
      return errorstate;
 800f156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f158:	e072      	b.n	800f240 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f15e:	2b03      	cmp	r3, #3
 800f160:	d036      	beq.n	800f1d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f162:	89fb      	ldrh	r3, [r7, #14]
 800f164:	461a      	mov	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f172:	041b      	lsls	r3, r3, #16
 800f174:	4619      	mov	r1, r3
 800f176:	4610      	mov	r0, r2
 800f178:	f003 fab2 	bl	80126e0 <SDMMC_CmdSendCSD>
 800f17c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f180:	2b00      	cmp	r3, #0
 800f182:	d001      	beq.n	800f188 <SD_InitCard+0xdc>
    {
      return errorstate;
 800f184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f186:	e05b      	b.n	800f240 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2100      	movs	r1, #0
 800f18e:	4618      	mov	r0, r3
 800f190:	f003 f895 	bl	80122be <SDIO_GetResponse>
 800f194:	4602      	mov	r2, r0
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2104      	movs	r1, #4
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f003 f88c 	bl	80122be <SDIO_GetResponse>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2108      	movs	r1, #8
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f003 f883 	bl	80122be <SDIO_GetResponse>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	210c      	movs	r1, #12
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f003 f87a 	bl	80122be <SDIO_GetResponse>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2104      	movs	r1, #4
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f003 f871 	bl	80122be <SDIO_GetResponse>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	0d1a      	lsrs	r2, r3, #20
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f1e4:	f107 0310 	add.w	r3, r7, #16
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff fbe4 	bl	800e9b8 <HAL_SD_GetCardCSD>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1fa:	e021      	b.n	800f240 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6819      	ldr	r1, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f204:	041b      	lsls	r3, r3, #16
 800f206:	2200      	movs	r2, #0
 800f208:	461c      	mov	r4, r3
 800f20a:	4615      	mov	r5, r2
 800f20c:	4622      	mov	r2, r4
 800f20e:	462b      	mov	r3, r5
 800f210:	4608      	mov	r0, r1
 800f212:	f003 f95f 	bl	80124d4 <SDMMC_CmdSelDesel>
 800f216:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <SD_InitCard+0x176>
  {
    return errorstate;
 800f21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f220:	e00e      	b.n	800f240 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681d      	ldr	r5, [r3, #0]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	466c      	mov	r4, sp
 800f22a:	f103 0210 	add.w	r2, r3, #16
 800f22e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f234:	3304      	adds	r3, #4
 800f236:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f238:	4628      	mov	r0, r5
 800f23a:	f002 ffa3 	bl	8012184 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3740      	adds	r7, #64	; 0x40
 800f244:	46bd      	mov	sp, r7
 800f246:	bdb0      	pop	{r4, r5, r7, pc}

0800f248 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f250:	2300      	movs	r3, #0
 800f252:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f254:	2300      	movs	r3, #0
 800f256:	617b      	str	r3, [r7, #20]
 800f258:	2300      	movs	r3, #0
 800f25a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4618      	mov	r0, r3
 800f262:	f003 f95a 	bl	801251a <SDMMC_CmdGoIdleState>
 800f266:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d001      	beq.n	800f272 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	e072      	b.n	800f358 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4618      	mov	r0, r3
 800f278:	f003 f96d 	bl	8012556 <SDMMC_CmdOperCond>
 800f27c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00d      	beq.n	800f2a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4618      	mov	r0, r3
 800f290:	f003 f943 	bl	801251a <SDMMC_CmdGoIdleState>
 800f294:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d004      	beq.n	800f2a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	e05b      	b.n	800f358 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d137      	bne.n	800f31e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f003 f96d 	bl	8012594 <SDMMC_CmdAppCommand>
 800f2ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d02d      	beq.n	800f31e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2c6:	e047      	b.n	800f358 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f003 f960 	bl	8012594 <SDMMC_CmdAppCommand>
 800f2d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d001      	beq.n	800f2e0 <SD_PowerON+0x98>
    {
      return errorstate;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	e03b      	b.n	800f358 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	491e      	ldr	r1, [pc, #120]	; (800f360 <SD_PowerON+0x118>)
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f003 f976 	bl	80125d8 <SDMMC_CmdAppOperCommand>
 800f2ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2f8:	e02e      	b.n	800f358 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2100      	movs	r1, #0
 800f300:	4618      	mov	r0, r3
 800f302:	f002 ffdc 	bl	80122be <SDIO_GetResponse>
 800f306:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	0fdb      	lsrs	r3, r3, #31
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d101      	bne.n	800f314 <SD_PowerON+0xcc>
 800f310:	2301      	movs	r3, #1
 800f312:	e000      	b.n	800f316 <SD_PowerON+0xce>
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]

    count++;
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	3301      	adds	r3, #1
 800f31c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f324:	4293      	cmp	r3, r2
 800f326:	d802      	bhi.n	800f32e <SD_PowerON+0xe6>
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0cc      	beq.n	800f2c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f334:	4293      	cmp	r3, r2
 800f336:	d902      	bls.n	800f33e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f33c:	e00c      	b.n	800f358 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f344:	2b00      	cmp	r3, #0
 800f346:	d003      	beq.n	800f350 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2201      	movs	r2, #1
 800f34c:	645a      	str	r2, [r3, #68]	; 0x44
 800f34e:	e002      	b.n	800f356 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f356:	2300      	movs	r3, #0
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3718      	adds	r7, #24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	c1100000 	.word	0xc1100000

0800f364 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d102      	bne.n	800f37a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f378:	e018      	b.n	800f3ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f382:	041b      	lsls	r3, r3, #16
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	f003 f9ea 	bl	8012760 <SDMMC_CmdSendStatus>
 800f38c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	e009      	b.n	800f3ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2100      	movs	r1, #0
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f002 ff8d 	bl	80122be <SDIO_GetResponse>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b086      	sub	sp, #24
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f3bc:	2300      	movs	r3, #0
 800f3be:	60fb      	str	r3, [r7, #12]
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f002 ff77 	bl	80122be <SDIO_GetResponse>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3da:	d102      	bne.n	800f3e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f3dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3e0:	e02f      	b.n	800f442 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f3e2:	f107 030c 	add.w	r3, r7, #12
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f879 	bl	800f4e0 <SD_FindSCR>
 800f3ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d001      	beq.n	800f3fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	e023      	b.n	800f442 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f400:	2b00      	cmp	r3, #0
 800f402:	d01c      	beq.n	800f43e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f40c:	041b      	lsls	r3, r3, #16
 800f40e:	4619      	mov	r1, r3
 800f410:	4610      	mov	r0, r2
 800f412:	f003 f8bf 	bl	8012594 <SDMMC_CmdAppCommand>
 800f416:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	e00f      	b.n	800f442 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2102      	movs	r1, #2
 800f428:	4618      	mov	r0, r3
 800f42a:	f003 f8f8 	bl	801261e <SDMMC_CmdBusWidth>
 800f42e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	e003      	b.n	800f442 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f43a:	2300      	movs	r3, #0
 800f43c:	e001      	b.n	800f442 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f43e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f442:	4618      	mov	r0, r3
 800f444:	3718      	adds	r7, #24
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b086      	sub	sp, #24
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f452:	2300      	movs	r3, #0
 800f454:	60fb      	str	r3, [r7, #12]
 800f456:	2300      	movs	r3, #0
 800f458:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2100      	movs	r1, #0
 800f460:	4618      	mov	r0, r3
 800f462:	f002 ff2c 	bl	80122be <SDIO_GetResponse>
 800f466:	4603      	mov	r3, r0
 800f468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f46c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f470:	d102      	bne.n	800f478 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f476:	e02f      	b.n	800f4d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f478:	f107 030c 	add.w	r3, r7, #12
 800f47c:	4619      	mov	r1, r3
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 f82e 	bl	800f4e0 <SD_FindSCR>
 800f484:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	e023      	b.n	800f4d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d01c      	beq.n	800f4d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4a2:	041b      	lsls	r3, r3, #16
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	f003 f874 	bl	8012594 <SDMMC_CmdAppCommand>
 800f4ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	e00f      	b.n	800f4d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2100      	movs	r1, #0
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f003 f8ad 	bl	801261e <SDMMC_CmdBusWidth>
 800f4c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d001      	beq.n	800f4d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	e003      	b.n	800f4d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e001      	b.n	800f4d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f4d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f4e0:	b590      	push	{r4, r7, lr}
 800f4e2:	b08f      	sub	sp, #60	; 0x3c
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f4ea:	f7fc fcb5 	bl	800be58 <HAL_GetTick>
 800f4ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	60bb      	str	r3, [r7, #8]
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2108      	movs	r1, #8
 800f506:	4618      	mov	r0, r3
 800f508:	f002 ff18 	bl	801233c <SDMMC_CmdBlockLength>
 800f50c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	2b00      	cmp	r3, #0
 800f512:	d001      	beq.n	800f518 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f516:	e0a9      	b.n	800f66c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f520:	041b      	lsls	r3, r3, #16
 800f522:	4619      	mov	r1, r3
 800f524:	4610      	mov	r0, r2
 800f526:	f003 f835 	bl	8012594 <SDMMC_CmdAppCommand>
 800f52a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	e09a      	b.n	800f66c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f536:	f04f 33ff 	mov.w	r3, #4294967295
 800f53a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f53c:	2308      	movs	r3, #8
 800f53e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800f540:	2330      	movs	r3, #48	; 0x30
 800f542:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f544:	2302      	movs	r3, #2
 800f546:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f548:	2300      	movs	r3, #0
 800f54a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800f54c:	2301      	movs	r3, #1
 800f54e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f107 0210 	add.w	r2, r7, #16
 800f558:	4611      	mov	r1, r2
 800f55a:	4618      	mov	r0, r3
 800f55c:	f002 fec2 	bl	80122e4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4618      	mov	r0, r3
 800f566:	f003 f87c 	bl	8012662 <SDMMC_CmdSendSCR>
 800f56a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d022      	beq.n	800f5b8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	e07a      	b.n	800f66c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f57c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00e      	beq.n	800f5a2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6819      	ldr	r1, [r3, #0]
 800f588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	f107 0208 	add.w	r2, r7, #8
 800f590:	18d4      	adds	r4, r2, r3
 800f592:	4608      	mov	r0, r1
 800f594:	f002 fe21 	bl	80121da <SDIO_ReadFIFO>
 800f598:	4603      	mov	r3, r0
 800f59a:	6023      	str	r3, [r4, #0]
      index++;
 800f59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f59e:	3301      	adds	r3, #1
 800f5a0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f5a2:	f7fc fc59 	bl	800be58 <HAL_GetTick>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b0:	d102      	bne.n	800f5b8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f5b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5b6:	e059      	b.n	800f66c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5be:	f240 432a 	movw	r3, #1066	; 0x42a
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0d6      	beq.n	800f576 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ce:	f003 0308 	and.w	r3, r3, #8
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d005      	beq.n	800f5e2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2208      	movs	r2, #8
 800f5dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f5de:	2308      	movs	r3, #8
 800f5e0:	e044      	b.n	800f66c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e8:	f003 0302 	and.w	r3, r3, #2
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d005      	beq.n	800f5fc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	e037      	b.n	800f66c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f602:	f003 0320 	and.w	r3, r3, #32
 800f606:	2b00      	cmp	r3, #0
 800f608:	d005      	beq.n	800f616 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2220      	movs	r2, #32
 800f610:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f612:	2320      	movs	r3, #32
 800f614:	e02a      	b.n	800f66c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f240 523a 	movw	r2, #1338	; 0x53a
 800f61e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	061a      	lsls	r2, r3, #24
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	021b      	lsls	r3, r3, #8
 800f628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f62c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	0a1b      	lsrs	r3, r3, #8
 800f632:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f636:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	0e1b      	lsrs	r3, r3, #24
 800f63c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f640:	601a      	str	r2, [r3, #0]
    scr++;
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	3304      	adds	r3, #4
 800f646:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	061a      	lsls	r2, r3, #24
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	021b      	lsls	r3, r3, #8
 800f650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f654:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	0a1b      	lsrs	r3, r3, #8
 800f65a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f65e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	0e1b      	lsrs	r3, r3, #24
 800f664:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f668:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	373c      	adds	r7, #60	; 0x3c
 800f670:	46bd      	mov	sp, r7
 800f672:	bd90      	pop	{r4, r7, pc}

0800f674 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f680:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f686:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d03f      	beq.n	800f70e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f68e:	2300      	movs	r3, #0
 800f690:	617b      	str	r3, [r7, #20]
 800f692:	e033      	b.n	800f6fc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4618      	mov	r0, r3
 800f69a:	f002 fd9e 	bl	80121da <SDIO_ReadFIFO>
 800f69e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	0a1b      	lsrs	r3, r3, #8
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	0c1b      	lsrs	r3, r3, #16
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	0e1b      	lsrs	r3, r3, #24
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	2b07      	cmp	r3, #7
 800f700:	d9c8      	bls.n	800f694 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	693a      	ldr	r2, [r7, #16]
 800f70c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f70e:	bf00      	nop
 800f710:	3718      	adds	r7, #24
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}

0800f716 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f716:	b580      	push	{r7, lr}
 800f718:	b086      	sub	sp, #24
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a1b      	ldr	r3, [r3, #32]
 800f722:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f728:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d043      	beq.n	800f7b8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f730:	2300      	movs	r3, #0
 800f732:	617b      	str	r3, [r7, #20]
 800f734:	e037      	b.n	800f7a6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3301      	adds	r3, #1
 800f740:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	3b01      	subs	r3, #1
 800f746:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	021a      	lsls	r2, r3, #8
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	4313      	orrs	r3, r2
 800f752:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	3301      	adds	r3, #1
 800f758:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	3b01      	subs	r3, #1
 800f75e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	041a      	lsls	r2, r3, #16
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	4313      	orrs	r3, r2
 800f76a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	3301      	adds	r3, #1
 800f770:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	3b01      	subs	r3, #1
 800f776:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	061a      	lsls	r2, r3, #24
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	4313      	orrs	r3, r2
 800f782:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	3301      	adds	r3, #1
 800f788:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	3b01      	subs	r3, #1
 800f78e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f107 0208 	add.w	r2, r7, #8
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f002 fd2a 	bl	80121f4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	617b      	str	r3, [r7, #20]
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	2b07      	cmp	r3, #7
 800f7aa:	d9c4      	bls.n	800f736 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f7b8:	bf00      	nop
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e056      	b.n	800f880 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d106      	bne.n	800f7f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7f6 fd4f 	bl	8006290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f808:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	431a      	orrs	r2, r3
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	431a      	orrs	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	691b      	ldr	r3, [r3, #16]
 800f81e:	431a      	orrs	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	431a      	orrs	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f82e:	431a      	orrs	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	69db      	ldr	r3, [r3, #28]
 800f834:	431a      	orrs	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	ea42 0103 	orr.w	r1, r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	430a      	orrs	r2, r1
 800f848:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	0c1b      	lsrs	r3, r3, #16
 800f850:	f003 0104 	and.w	r1, r3, #4
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	430a      	orrs	r2, r1
 800f85e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	69da      	ldr	r2, [r3, #28]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f86e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f896:	2301      	movs	r3, #1
 800f898:	e01a      	b.n	800f8d0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2202      	movs	r2, #2
 800f89e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7f6 fd86 	bl	80063c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08c      	sub	sp, #48	; 0x30
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d101      	bne.n	800f8fe <HAL_SPI_TransmitReceive+0x26>
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	e18a      	b.n	800fc14 <HAL_SPI_TransmitReceive+0x33c>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2201      	movs	r2, #1
 800f902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f906:	f7fc faa7 	bl	800be58 <HAL_GetTick>
 800f90a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f91c:	887b      	ldrh	r3, [r7, #2]
 800f91e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f924:	2b01      	cmp	r3, #1
 800f926:	d00f      	beq.n	800f948 <HAL_SPI_TransmitReceive+0x70>
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f92e:	d107      	bne.n	800f940 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d103      	bne.n	800f940 <HAL_SPI_TransmitReceive+0x68>
 800f938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f93c:	2b04      	cmp	r3, #4
 800f93e:	d003      	beq.n	800f948 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f940:	2302      	movs	r3, #2
 800f942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f946:	e15b      	b.n	800fc00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d005      	beq.n	800f95a <HAL_SPI_TransmitReceive+0x82>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <HAL_SPI_TransmitReceive+0x82>
 800f954:	887b      	ldrh	r3, [r7, #2]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d103      	bne.n	800f962 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f960:	e14e      	b.n	800fc00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2b04      	cmp	r3, #4
 800f96c:	d003      	beq.n	800f976 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2205      	movs	r2, #5
 800f972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	887a      	ldrh	r2, [r7, #2]
 800f986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	887a      	ldrh	r2, [r7, #2]
 800f98c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	887a      	ldrh	r2, [r7, #2]
 800f998:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	887a      	ldrh	r2, [r7, #2]
 800f99e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9b6:	2b40      	cmp	r3, #64	; 0x40
 800f9b8:	d007      	beq.n	800f9ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9d2:	d178      	bne.n	800fac6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <HAL_SPI_TransmitReceive+0x10a>
 800f9dc:	8b7b      	ldrh	r3, [r7, #26]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d166      	bne.n	800fab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e6:	881a      	ldrh	r2, [r3, #0]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f2:	1c9a      	adds	r2, r3, #2
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	3b01      	subs	r3, #1
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa06:	e053      	b.n	800fab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	f003 0302 	and.w	r3, r3, #2
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d11b      	bne.n	800fa4e <HAL_SPI_TransmitReceive+0x176>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d016      	beq.n	800fa4e <HAL_SPI_TransmitReceive+0x176>
 800fa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d113      	bne.n	800fa4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2a:	881a      	ldrh	r2, [r3, #0]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa36:	1c9a      	adds	r2, r3, #2
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	3b01      	subs	r3, #1
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d119      	bne.n	800fa90 <HAL_SPI_TransmitReceive+0x1b8>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d014      	beq.n	800fa90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	68da      	ldr	r2, [r3, #12]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa70:	b292      	uxth	r2, r2
 800fa72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa78:	1c9a      	adds	r2, r3, #2
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	3b01      	subs	r3, #1
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fa90:	f7fc f9e2 	bl	800be58 <HAL_GetTick>
 800fa94:	4602      	mov	r2, r0
 800fa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d807      	bhi.n	800fab0 <HAL_SPI_TransmitReceive+0x1d8>
 800faa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa6:	d003      	beq.n	800fab0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800faa8:	2303      	movs	r3, #3
 800faaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800faae:	e0a7      	b.n	800fc00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1a6      	bne.n	800fa08 <HAL_SPI_TransmitReceive+0x130>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1a1      	bne.n	800fa08 <HAL_SPI_TransmitReceive+0x130>
 800fac4:	e07c      	b.n	800fbc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d002      	beq.n	800fad4 <HAL_SPI_TransmitReceive+0x1fc>
 800face:	8b7b      	ldrh	r3, [r7, #26]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d16b      	bne.n	800fbac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	330c      	adds	r3, #12
 800fade:	7812      	ldrb	r2, [r2, #0]
 800fae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae6:	1c5a      	adds	r2, r3, #1
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	3b01      	subs	r3, #1
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fafa:	e057      	b.n	800fbac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	f003 0302 	and.w	r3, r3, #2
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	d11c      	bne.n	800fb44 <HAL_SPI_TransmitReceive+0x26c>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d017      	beq.n	800fb44 <HAL_SPI_TransmitReceive+0x26c>
 800fb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d114      	bne.n	800fb44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	330c      	adds	r3, #12
 800fb24:	7812      	ldrb	r2, [r2, #0]
 800fb26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fb40:	2300      	movs	r3, #0
 800fb42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	f003 0301 	and.w	r3, r3, #1
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d119      	bne.n	800fb86 <HAL_SPI_TransmitReceive+0x2ae>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d014      	beq.n	800fb86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68da      	ldr	r2, [r3, #12]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb66:	b2d2      	uxtb	r2, r2
 800fb68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fb82:	2301      	movs	r3, #1
 800fb84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fb86:	f7fc f967 	bl	800be58 <HAL_GetTick>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d803      	bhi.n	800fb9e <HAL_SPI_TransmitReceive+0x2c6>
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9c:	d102      	bne.n	800fba4 <HAL_SPI_TransmitReceive+0x2cc>
 800fb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d103      	bne.n	800fbac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fbaa:	e029      	b.n	800fc00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1a2      	bne.n	800fafc <HAL_SPI_TransmitReceive+0x224>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d19d      	bne.n	800fafc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f000 fae1 	bl	801018c <SPI_EndRxTxTransaction>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d006      	beq.n	800fbde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2220      	movs	r2, #32
 800fbda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800fbdc:	e010      	b.n	800fc00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10b      	bne.n	800fbfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	617b      	str	r3, [r7, #20]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	617b      	str	r3, [r7, #20]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	617b      	str	r3, [r7, #20]
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	e000      	b.n	800fc00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fbfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2201      	movs	r2, #1
 800fc04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fc10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3730      	adds	r7, #48	; 0x30
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b086      	sub	sp, #24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	4613      	mov	r3, r2
 800fc28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d101      	bne.n	800fc3c <HAL_SPI_Transmit_DMA+0x20>
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e093      	b.n	800fd64 <HAL_SPI_Transmit_DMA+0x148>
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc4a:	b2db      	uxtb	r3, r3
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d002      	beq.n	800fc56 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800fc50:	2302      	movs	r3, #2
 800fc52:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fc54:	e081      	b.n	800fd5a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d002      	beq.n	800fc62 <HAL_SPI_Transmit_DMA+0x46>
 800fc5c:	88fb      	ldrh	r3, [r7, #6]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d102      	bne.n	800fc68 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800fc62:	2301      	movs	r3, #1
 800fc64:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fc66:	e078      	b.n	800fd5a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2203      	movs	r2, #3
 800fc6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	68ba      	ldr	r2, [r7, #8]
 800fc7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	88fa      	ldrh	r2, [r7, #6]
 800fc80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	88fa      	ldrh	r2, [r7, #6]
 800fc86:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2200      	movs	r2, #0
 800fc92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2200      	movs	r2, #0
 800fc98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2200      	movs	r2, #0
 800fca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcae:	d107      	bne.n	800fcc0 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fcbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcc4:	4a29      	ldr	r2, [pc, #164]	; (800fd6c <HAL_SPI_Transmit_DMA+0x150>)
 800fcc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fccc:	4a28      	ldr	r2, [pc, #160]	; (800fd70 <HAL_SPI_Transmit_DMA+0x154>)
 800fcce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcd4:	4a27      	ldr	r2, [pc, #156]	; (800fd74 <HAL_SPI_Transmit_DMA+0x158>)
 800fcd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcdc:	2200      	movs	r2, #0
 800fcde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce8:	4619      	mov	r1, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	330c      	adds	r3, #12
 800fcf0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fcf6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fcf8:	f7fd f868 	bl	800cdcc <HAL_DMA_Start_IT>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00c      	beq.n	800fd1c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd06:	f043 0210 	orr.w	r2, r3, #16
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800fd0e:	2301      	movs	r3, #1
 800fd10:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2201      	movs	r2, #1
 800fd16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800fd1a:	e01e      	b.n	800fd5a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd26:	2b40      	cmp	r3, #64	; 0x40
 800fd28:	d007      	beq.n	800fd3a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd38:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f042 0220 	orr.w	r2, r2, #32
 800fd48:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f042 0202 	orr.w	r2, r2, #2
 800fd58:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3718      	adds	r7, #24
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	08010035 	.word	0x08010035
 800fd70:	0800ff8d 	.word	0x0800ff8d
 800fd74:	08010051 	.word	0x08010051

0800fd78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b088      	sub	sp, #32
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	099b      	lsrs	r3, r3, #6
 800fd94:	f003 0301 	and.w	r3, r3, #1
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10f      	bne.n	800fdbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00a      	beq.n	800fdbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	099b      	lsrs	r3, r3, #6
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d004      	beq.n	800fdbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	4798      	blx	r3
    return;
 800fdba:	e0d7      	b.n	800ff6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	085b      	lsrs	r3, r3, #1
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00a      	beq.n	800fdde <HAL_SPI_IRQHandler+0x66>
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	09db      	lsrs	r3, r3, #7
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d004      	beq.n	800fdde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	4798      	blx	r3
    return;
 800fddc:	e0c6      	b.n	800ff6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	095b      	lsrs	r3, r3, #5
 800fde2:	f003 0301 	and.w	r3, r3, #1
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d10c      	bne.n	800fe04 <HAL_SPI_IRQHandler+0x8c>
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	099b      	lsrs	r3, r3, #6
 800fdee:	f003 0301 	and.w	r3, r3, #1
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d106      	bne.n	800fe04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	0a1b      	lsrs	r3, r3, #8
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 80b4 	beq.w	800ff6c <HAL_SPI_IRQHandler+0x1f4>
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	095b      	lsrs	r3, r3, #5
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f000 80ad 	beq.w	800ff6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	099b      	lsrs	r3, r3, #6
 800fe16:	f003 0301 	and.w	r3, r3, #1
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d023      	beq.n	800fe66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d011      	beq.n	800fe4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe2e:	f043 0204 	orr.w	r2, r3, #4
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fe36:	2300      	movs	r3, #0
 800fe38:	617b      	str	r3, [r7, #20]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	617b      	str	r3, [r7, #20]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	617b      	str	r3, [r7, #20]
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	e00b      	b.n	800fe66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fe4e:	2300      	movs	r3, #0
 800fe50:	613b      	str	r3, [r7, #16]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	613b      	str	r3, [r7, #16]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	613b      	str	r3, [r7, #16]
 800fe62:	693b      	ldr	r3, [r7, #16]
        return;
 800fe64:	e082      	b.n	800ff6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	095b      	lsrs	r3, r3, #5
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d014      	beq.n	800fe9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe76:	f043 0201 	orr.w	r2, r3, #1
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fe7e:	2300      	movs	r3, #0
 800fe80:	60fb      	str	r3, [r7, #12]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	60fb      	str	r3, [r7, #12]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	0a1b      	lsrs	r3, r3, #8
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00c      	beq.n	800fec2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feac:	f043 0208 	orr.w	r2, r3, #8
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800feb4:	2300      	movs	r3, #0
 800feb6:	60bb      	str	r3, [r7, #8]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	60bb      	str	r3, [r7, #8]
 800fec0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d04f      	beq.n	800ff6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	685a      	ldr	r2, [r3, #4]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fed8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2201      	movs	r2, #1
 800fede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	f003 0302 	and.w	r3, r3, #2
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d104      	bne.n	800fef6 <HAL_SPI_IRQHandler+0x17e>
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	f003 0301 	and.w	r3, r3, #1
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d034      	beq.n	800ff60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f022 0203 	bic.w	r2, r2, #3
 800ff04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d011      	beq.n	800ff32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff12:	4a18      	ldr	r2, [pc, #96]	; (800ff74 <HAL_SPI_IRQHandler+0x1fc>)
 800ff14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fc ffae 	bl	800ce7c <HAL_DMA_Abort_IT>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d005      	beq.n	800ff32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d016      	beq.n	800ff68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff3e:	4a0d      	ldr	r2, [pc, #52]	; (800ff74 <HAL_SPI_IRQHandler+0x1fc>)
 800ff40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fc ff98 	bl	800ce7c <HAL_DMA_Abort_IT>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00a      	beq.n	800ff68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800ff5e:	e003      	b.n	800ff68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7f6 f961 	bl	8006228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ff66:	e000      	b.n	800ff6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ff68:	bf00      	nop
    return;
 800ff6a:	bf00      	nop
  }
}
 800ff6c:	3720      	adds	r7, #32
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	08010091 	.word	0x08010091

0800ff78 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff9a:	f7fb ff5d 	bl	800be58 <HAL_GetTick>
 800ff9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffae:	d03b      	beq.n	8010028 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	685a      	ldr	r2, [r3, #4]
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f022 0220 	bic.w	r2, r2, #32
 800ffbe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	685a      	ldr	r2, [r3, #4]
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f022 0202 	bic.w	r2, r2, #2
 800ffce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ffd0:	693a      	ldr	r2, [r7, #16]
 800ffd2:	2164      	movs	r1, #100	; 0x64
 800ffd4:	6978      	ldr	r0, [r7, #20]
 800ffd6:	f000 f8d9 	bl	801018c <SPI_EndRxTxTransaction>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d005      	beq.n	800ffec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffe4:	f043 0220 	orr.w	r2, r3, #32
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10a      	bne.n	801000a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fff4:	2300      	movs	r3, #0
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	60fb      	str	r3, [r7, #12]
 8010008:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	2200      	movs	r2, #0
 801000e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2201      	movs	r2, #1
 8010014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801001c:	2b00      	cmp	r3, #0
 801001e:	d003      	beq.n	8010028 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010020:	6978      	ldr	r0, [r7, #20]
 8010022:	f7f6 f901 	bl	8006228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010026:	e002      	b.n	801002e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8010028:	6978      	ldr	r0, [r7, #20]
 801002a:	f7f6 f913 	bl	8006254 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801002e:	3718      	adds	r7, #24
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010040:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f7ff ff98 	bl	800ff78 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010048:	bf00      	nop
 801004a:	3710      	adds	r7, #16
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801005c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	685a      	ldr	r2, [r3, #4]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f022 0203 	bic.w	r2, r2, #3
 801006c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010072:	f043 0210 	orr.w	r2, r3, #16
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2201      	movs	r2, #1
 801007e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7f6 f8d0 	bl	8006228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010088:	bf00      	nop
 801008a:	3710      	adds	r7, #16
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801009c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2200      	movs	r2, #0
 80100a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f7f6 f8bc 	bl	8006228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80100b0:	bf00      	nop
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	603b      	str	r3, [r7, #0]
 80100c4:	4613      	mov	r3, r2
 80100c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80100c8:	e04c      	b.n	8010164 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d0:	d048      	beq.n	8010164 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80100d2:	f7fb fec1 	bl	800be58 <HAL_GetTick>
 80100d6:	4602      	mov	r2, r0
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d902      	bls.n	80100e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d13d      	bne.n	8010164 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80100f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010100:	d111      	bne.n	8010126 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801010a:	d004      	beq.n	8010116 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010114:	d107      	bne.n	8010126 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801012e:	d10f      	bne.n	8010150 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801014e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2201      	movs	r2, #1
 8010154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2200      	movs	r2, #0
 801015c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010160:	2303      	movs	r3, #3
 8010162:	e00f      	b.n	8010184 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	689a      	ldr	r2, [r3, #8]
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	4013      	ands	r3, r2
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	429a      	cmp	r2, r3
 8010172:	bf0c      	ite	eq
 8010174:	2301      	moveq	r3, #1
 8010176:	2300      	movne	r3, #0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	461a      	mov	r2, r3
 801017c:	79fb      	ldrb	r3, [r7, #7]
 801017e:	429a      	cmp	r2, r3
 8010180:	d1a3      	bne.n	80100ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010182:	2300      	movs	r3, #0
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af02      	add	r7, sp, #8
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010198:	4b1b      	ldr	r3, [pc, #108]	; (8010208 <SPI_EndRxTxTransaction+0x7c>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a1b      	ldr	r2, [pc, #108]	; (801020c <SPI_EndRxTxTransaction+0x80>)
 801019e:	fba2 2303 	umull	r2, r3, r2, r3
 80101a2:	0d5b      	lsrs	r3, r3, #21
 80101a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80101a8:	fb02 f303 	mul.w	r3, r2, r3
 80101ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80101b6:	d112      	bne.n	80101de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	2200      	movs	r2, #0
 80101c0:	2180      	movs	r1, #128	; 0x80
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f7ff ff78 	bl	80100b8 <SPI_WaitFlagStateUntilTimeout>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d016      	beq.n	80101fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101d2:	f043 0220 	orr.w	r2, r3, #32
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80101da:	2303      	movs	r3, #3
 80101dc:	e00f      	b.n	80101fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d00a      	beq.n	80101fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	3b01      	subs	r3, #1
 80101e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101f4:	2b80      	cmp	r3, #128	; 0x80
 80101f6:	d0f2      	beq.n	80101de <SPI_EndRxTxTransaction+0x52>
 80101f8:	e000      	b.n	80101fc <SPI_EndRxTxTransaction+0x70>
        break;
 80101fa:	bf00      	nop
  }

  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3718      	adds	r7, #24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	20000000 	.word	0x20000000
 801020c:	165e9f81 	.word	0x165e9f81

08010210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d101      	bne.n	8010222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801021e:	2301      	movs	r3, #1
 8010220:	e01d      	b.n	801025e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010228:	b2db      	uxtb	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2200      	movs	r2, #0
 8010232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7f5 fd62 	bl	8005d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2202      	movs	r2, #2
 8010240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3304      	adds	r3, #4
 801024c:	4619      	mov	r1, r3
 801024e:	4610      	mov	r0, r2
 8010250:	f000 fb36 	bl	80108c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b082      	sub	sp, #8
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010274:	2301      	movs	r3, #1
 8010276:	e01d      	b.n	80102b4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801027e:	b2db      	uxtb	r3, r3
 8010280:	2b00      	cmp	r3, #0
 8010282:	d106      	bne.n	8010292 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 f815 	bl	80102bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2202      	movs	r2, #2
 8010296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3304      	adds	r3, #4
 80102a2:	4619      	mov	r1, r3
 80102a4:	4610      	mov	r0, r2
 80102a6:	f000 fb0b 	bl	80108c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80102b2:	2300      	movs	r3, #0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80102c4:	bf00      	nop
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	2b0c      	cmp	r3, #12
 80102de:	d841      	bhi.n	8010364 <HAL_TIM_IC_Start_IT+0x94>
 80102e0:	a201      	add	r2, pc, #4	; (adr r2, 80102e8 <HAL_TIM_IC_Start_IT+0x18>)
 80102e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e6:	bf00      	nop
 80102e8:	0801031d 	.word	0x0801031d
 80102ec:	08010365 	.word	0x08010365
 80102f0:	08010365 	.word	0x08010365
 80102f4:	08010365 	.word	0x08010365
 80102f8:	0801032f 	.word	0x0801032f
 80102fc:	08010365 	.word	0x08010365
 8010300:	08010365 	.word	0x08010365
 8010304:	08010365 	.word	0x08010365
 8010308:	08010341 	.word	0x08010341
 801030c:	08010365 	.word	0x08010365
 8010310:	08010365 	.word	0x08010365
 8010314:	08010365 	.word	0x08010365
 8010318:	08010353 	.word	0x08010353
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	68da      	ldr	r2, [r3, #12]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f042 0202 	orr.w	r2, r2, #2
 801032a:	60da      	str	r2, [r3, #12]
      break;
 801032c:	e01b      	b.n	8010366 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68da      	ldr	r2, [r3, #12]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f042 0204 	orr.w	r2, r2, #4
 801033c:	60da      	str	r2, [r3, #12]
      break;
 801033e:	e012      	b.n	8010366 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	68da      	ldr	r2, [r3, #12]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f042 0208 	orr.w	r2, r2, #8
 801034e:	60da      	str	r2, [r3, #12]
      break;
 8010350:	e009      	b.n	8010366 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	68da      	ldr	r2, [r3, #12]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f042 0210 	orr.w	r2, r2, #16
 8010360:	60da      	str	r2, [r3, #12]
      break;
 8010362:	e000      	b.n	8010366 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8010364:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2201      	movs	r2, #1
 801036c:	6839      	ldr	r1, [r7, #0]
 801036e:	4618      	mov	r0, r3
 8010370:	f000 fcde 	bl	8010d30 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	f003 0307 	and.w	r3, r3, #7
 801037e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2b06      	cmp	r3, #6
 8010384:	d007      	beq.n	8010396 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f042 0201 	orr.w	r2, r2, #1
 8010394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	f003 0302 	and.w	r3, r3, #2
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	d122      	bne.n	80103fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	f003 0302 	and.w	r3, r3, #2
 80103c0:	2b02      	cmp	r3, #2
 80103c2:	d11b      	bne.n	80103fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f06f 0202 	mvn.w	r2, #2
 80103cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	699b      	ldr	r3, [r3, #24]
 80103da:	f003 0303 	and.w	r3, r3, #3
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d003      	beq.n	80103ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7f5 fcdc 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 80103e8:	e005      	b.n	80103f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fa4a 	bl	8010884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 fa51 	bl	8010898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	f003 0304 	and.w	r3, r3, #4
 8010406:	2b04      	cmp	r3, #4
 8010408:	d122      	bne.n	8010450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	f003 0304 	and.w	r3, r3, #4
 8010414:	2b04      	cmp	r3, #4
 8010416:	d11b      	bne.n	8010450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f06f 0204 	mvn.w	r2, #4
 8010420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2202      	movs	r2, #2
 8010426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	699b      	ldr	r3, [r3, #24]
 801042e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010432:	2b00      	cmp	r3, #0
 8010434:	d003      	beq.n	801043e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7f5 fcb2 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 801043c:	e005      	b.n	801044a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 fa20 	bl	8010884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 fa27 	bl	8010898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	691b      	ldr	r3, [r3, #16]
 8010456:	f003 0308 	and.w	r3, r3, #8
 801045a:	2b08      	cmp	r3, #8
 801045c:	d122      	bne.n	80104a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	f003 0308 	and.w	r3, r3, #8
 8010468:	2b08      	cmp	r3, #8
 801046a:	d11b      	bne.n	80104a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f06f 0208 	mvn.w	r2, #8
 8010474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2204      	movs	r2, #4
 801047a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	69db      	ldr	r3, [r3, #28]
 8010482:	f003 0303 	and.w	r3, r3, #3
 8010486:	2b00      	cmp	r3, #0
 8010488:	d003      	beq.n	8010492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7f5 fc88 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8010490:	e005      	b.n	801049e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 f9f6 	bl	8010884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f9fd 	bl	8010898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2200      	movs	r2, #0
 80104a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	691b      	ldr	r3, [r3, #16]
 80104aa:	f003 0310 	and.w	r3, r3, #16
 80104ae:	2b10      	cmp	r3, #16
 80104b0:	d122      	bne.n	80104f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	f003 0310 	and.w	r3, r3, #16
 80104bc:	2b10      	cmp	r3, #16
 80104be:	d11b      	bne.n	80104f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f06f 0210 	mvn.w	r2, #16
 80104c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2208      	movs	r2, #8
 80104ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	69db      	ldr	r3, [r3, #28]
 80104d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d003      	beq.n	80104e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7f5 fc5e 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 80104e4:	e005      	b.n	80104f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 f9cc 	bl	8010884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f9d3 	bl	8010898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	691b      	ldr	r3, [r3, #16]
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b01      	cmp	r3, #1
 8010504:	d10e      	bne.n	8010524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	f003 0301 	and.w	r3, r3, #1
 8010510:	2b01      	cmp	r3, #1
 8010512:	d107      	bne.n	8010524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f06f 0201 	mvn.w	r2, #1
 801051c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f9a6 	bl	8010870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	691b      	ldr	r3, [r3, #16]
 801052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801052e:	2b80      	cmp	r3, #128	; 0x80
 8010530:	d10e      	bne.n	8010550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801053c:	2b80      	cmp	r3, #128	; 0x80
 801053e:	d107      	bne.n	8010550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 fc8e 	bl	8010e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801055a:	2b40      	cmp	r3, #64	; 0x40
 801055c:	d10e      	bne.n	801057c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010568:	2b40      	cmp	r3, #64	; 0x40
 801056a:	d107      	bne.n	801057c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 f998 	bl	80108ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	f003 0320 	and.w	r3, r3, #32
 8010586:	2b20      	cmp	r3, #32
 8010588:	d10e      	bne.n	80105a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	f003 0320 	and.w	r3, r3, #32
 8010594:	2b20      	cmp	r3, #32
 8010596:	d107      	bne.n	80105a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f06f 0220 	mvn.w	r2, #32
 80105a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fc58 	bl	8010e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d101      	bne.n	80105ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80105c6:	2302      	movs	r3, #2
 80105c8:	e08a      	b.n	80106e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2201      	movs	r2, #1
 80105ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2202      	movs	r2, #2
 80105d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d11b      	bne.n	8010618 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6818      	ldr	r0, [r3, #0]
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	6819      	ldr	r1, [r3, #0]
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	f000 f9e6 	bl	80109c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	699a      	ldr	r2, [r3, #24]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f022 020c 	bic.w	r2, r2, #12
 8010602:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	6999      	ldr	r1, [r3, #24]
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	689a      	ldr	r2, [r3, #8]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	430a      	orrs	r2, r1
 8010614:	619a      	str	r2, [r3, #24]
 8010616:	e05a      	b.n	80106ce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2b04      	cmp	r3, #4
 801061c:	d11c      	bne.n	8010658 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6818      	ldr	r0, [r3, #0]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	6819      	ldr	r1, [r3, #0]
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	685a      	ldr	r2, [r3, #4]
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	f000 fa5e 	bl	8010aee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	699a      	ldr	r2, [r3, #24]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010640:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	6999      	ldr	r1, [r3, #24]
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	021a      	lsls	r2, r3, #8
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	430a      	orrs	r2, r1
 8010654:	619a      	str	r2, [r3, #24]
 8010656:	e03a      	b.n	80106ce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b08      	cmp	r3, #8
 801065c:	d11b      	bne.n	8010696 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6818      	ldr	r0, [r3, #0]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	6819      	ldr	r1, [r3, #0]
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	685a      	ldr	r2, [r3, #4]
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	f000 faab 	bl	8010bc8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	69da      	ldr	r2, [r3, #28]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f022 020c 	bic.w	r2, r2, #12
 8010680:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	69d9      	ldr	r1, [r3, #28]
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	689a      	ldr	r2, [r3, #8]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	430a      	orrs	r2, r1
 8010692:	61da      	str	r2, [r3, #28]
 8010694:	e01b      	b.n	80106ce <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	6819      	ldr	r1, [r3, #0]
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	685a      	ldr	r2, [r3, #4]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	f000 facb 	bl	8010c40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	69da      	ldr	r2, [r3, #28]
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80106b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	69d9      	ldr	r1, [r3, #28]
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	021a      	lsls	r2, r3, #8
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	430a      	orrs	r2, r1
 80106cc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2201      	movs	r2, #1
 80106d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2200      	movs	r2, #0
 80106da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d101      	bne.n	8010700 <HAL_TIM_ConfigClockSource+0x18>
 80106fc:	2302      	movs	r3, #2
 80106fe:	e0b3      	b.n	8010868 <HAL_TIM_ConfigClockSource+0x180>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2201      	movs	r2, #1
 8010704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2202      	movs	r2, #2
 801070c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801071e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010738:	d03e      	beq.n	80107b8 <HAL_TIM_ConfigClockSource+0xd0>
 801073a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801073e:	f200 8087 	bhi.w	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010746:	f000 8085 	beq.w	8010854 <HAL_TIM_ConfigClockSource+0x16c>
 801074a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801074e:	d87f      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010750:	2b70      	cmp	r3, #112	; 0x70
 8010752:	d01a      	beq.n	801078a <HAL_TIM_ConfigClockSource+0xa2>
 8010754:	2b70      	cmp	r3, #112	; 0x70
 8010756:	d87b      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010758:	2b60      	cmp	r3, #96	; 0x60
 801075a:	d050      	beq.n	80107fe <HAL_TIM_ConfigClockSource+0x116>
 801075c:	2b60      	cmp	r3, #96	; 0x60
 801075e:	d877      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010760:	2b50      	cmp	r3, #80	; 0x50
 8010762:	d03c      	beq.n	80107de <HAL_TIM_ConfigClockSource+0xf6>
 8010764:	2b50      	cmp	r3, #80	; 0x50
 8010766:	d873      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010768:	2b40      	cmp	r3, #64	; 0x40
 801076a:	d058      	beq.n	801081e <HAL_TIM_ConfigClockSource+0x136>
 801076c:	2b40      	cmp	r3, #64	; 0x40
 801076e:	d86f      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010770:	2b30      	cmp	r3, #48	; 0x30
 8010772:	d064      	beq.n	801083e <HAL_TIM_ConfigClockSource+0x156>
 8010774:	2b30      	cmp	r3, #48	; 0x30
 8010776:	d86b      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010778:	2b20      	cmp	r3, #32
 801077a:	d060      	beq.n	801083e <HAL_TIM_ConfigClockSource+0x156>
 801077c:	2b20      	cmp	r3, #32
 801077e:	d867      	bhi.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
 8010780:	2b00      	cmp	r3, #0
 8010782:	d05c      	beq.n	801083e <HAL_TIM_ConfigClockSource+0x156>
 8010784:	2b10      	cmp	r3, #16
 8010786:	d05a      	beq.n	801083e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8010788:	e062      	b.n	8010850 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6818      	ldr	r0, [r3, #0]
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	6899      	ldr	r1, [r3, #8]
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	685a      	ldr	r2, [r3, #4]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	f000 faa9 	bl	8010cf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80107ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68fa      	ldr	r2, [r7, #12]
 80107b4:	609a      	str	r2, [r3, #8]
      break;
 80107b6:	e04e      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6818      	ldr	r0, [r3, #0]
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	6899      	ldr	r1, [r3, #8]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	685a      	ldr	r2, [r3, #4]
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	f000 fa92 	bl	8010cf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	689a      	ldr	r2, [r3, #8]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80107da:	609a      	str	r2, [r3, #8]
      break;
 80107dc:	e03b      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	6859      	ldr	r1, [r3, #4]
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	461a      	mov	r2, r3
 80107ec:	f000 f950 	bl	8010a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2150      	movs	r1, #80	; 0x50
 80107f6:	4618      	mov	r0, r3
 80107f8:	f000 fa5f 	bl	8010cba <TIM_ITRx_SetConfig>
      break;
 80107fc:	e02b      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6818      	ldr	r0, [r3, #0]
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	6859      	ldr	r1, [r3, #4]
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	461a      	mov	r2, r3
 801080c:	f000 f9ac 	bl	8010b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2160      	movs	r1, #96	; 0x60
 8010816:	4618      	mov	r0, r3
 8010818:	f000 fa4f 	bl	8010cba <TIM_ITRx_SetConfig>
      break;
 801081c:	e01b      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6818      	ldr	r0, [r3, #0]
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	6859      	ldr	r1, [r3, #4]
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	461a      	mov	r2, r3
 801082c:	f000 f930 	bl	8010a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2140      	movs	r1, #64	; 0x40
 8010836:	4618      	mov	r0, r3
 8010838:	f000 fa3f 	bl	8010cba <TIM_ITRx_SetConfig>
      break;
 801083c:	e00b      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4619      	mov	r1, r3
 8010848:	4610      	mov	r0, r2
 801084a:	f000 fa36 	bl	8010cba <TIM_ITRx_SetConfig>
      break;
 801084e:	e002      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010850:	bf00      	nop
 8010852:	e000      	b.n	8010856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2200      	movs	r2, #0
 8010862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3710      	adds	r7, #16
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801088c:	bf00      	nop
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80108b4:	bf00      	nop
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4a34      	ldr	r2, [pc, #208]	; (80109a4 <TIM_Base_SetConfig+0xe4>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d00f      	beq.n	80108f8 <TIM_Base_SetConfig+0x38>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108de:	d00b      	beq.n	80108f8 <TIM_Base_SetConfig+0x38>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	4a31      	ldr	r2, [pc, #196]	; (80109a8 <TIM_Base_SetConfig+0xe8>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d007      	beq.n	80108f8 <TIM_Base_SetConfig+0x38>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a30      	ldr	r2, [pc, #192]	; (80109ac <TIM_Base_SetConfig+0xec>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d003      	beq.n	80108f8 <TIM_Base_SetConfig+0x38>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4a2f      	ldr	r2, [pc, #188]	; (80109b0 <TIM_Base_SetConfig+0xf0>)
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d108      	bne.n	801090a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	4313      	orrs	r3, r2
 8010908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4a25      	ldr	r2, [pc, #148]	; (80109a4 <TIM_Base_SetConfig+0xe4>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d01b      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010918:	d017      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a22      	ldr	r2, [pc, #136]	; (80109a8 <TIM_Base_SetConfig+0xe8>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d013      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a21      	ldr	r2, [pc, #132]	; (80109ac <TIM_Base_SetConfig+0xec>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d00f      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4a20      	ldr	r2, [pc, #128]	; (80109b0 <TIM_Base_SetConfig+0xf0>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d00b      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a1f      	ldr	r2, [pc, #124]	; (80109b4 <TIM_Base_SetConfig+0xf4>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d007      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a1e      	ldr	r2, [pc, #120]	; (80109b8 <TIM_Base_SetConfig+0xf8>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d003      	beq.n	801094a <TIM_Base_SetConfig+0x8a>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a1d      	ldr	r2, [pc, #116]	; (80109bc <TIM_Base_SetConfig+0xfc>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d108      	bne.n	801095c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	4313      	orrs	r3, r2
 801095a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	4313      	orrs	r3, r2
 8010968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	689a      	ldr	r2, [r3, #8]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a08      	ldr	r2, [pc, #32]	; (80109a4 <TIM_Base_SetConfig+0xe4>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d103      	bne.n	8010990 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	691a      	ldr	r2, [r3, #16]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2201      	movs	r2, #1
 8010994:	615a      	str	r2, [r3, #20]
}
 8010996:	bf00      	nop
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	40010000 	.word	0x40010000
 80109a8:	40000400 	.word	0x40000400
 80109ac:	40000800 	.word	0x40000800
 80109b0:	40000c00 	.word	0x40000c00
 80109b4:	40014000 	.word	0x40014000
 80109b8:	40014400 	.word	0x40014400
 80109bc:	40014800 	.word	0x40014800

080109c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b087      	sub	sp, #28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
 80109cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	f023 0201 	bic.w	r2, r3, #1
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	699b      	ldr	r3, [r3, #24]
 80109de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6a1b      	ldr	r3, [r3, #32]
 80109e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	4a24      	ldr	r2, [pc, #144]	; (8010a7c <TIM_TI1_SetConfig+0xbc>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d013      	beq.n	8010a16 <TIM_TI1_SetConfig+0x56>
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109f4:	d00f      	beq.n	8010a16 <TIM_TI1_SetConfig+0x56>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	4a21      	ldr	r2, [pc, #132]	; (8010a80 <TIM_TI1_SetConfig+0xc0>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d00b      	beq.n	8010a16 <TIM_TI1_SetConfig+0x56>
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	4a20      	ldr	r2, [pc, #128]	; (8010a84 <TIM_TI1_SetConfig+0xc4>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d007      	beq.n	8010a16 <TIM_TI1_SetConfig+0x56>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	4a1f      	ldr	r2, [pc, #124]	; (8010a88 <TIM_TI1_SetConfig+0xc8>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d003      	beq.n	8010a16 <TIM_TI1_SetConfig+0x56>
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	4a1e      	ldr	r2, [pc, #120]	; (8010a8c <TIM_TI1_SetConfig+0xcc>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d101      	bne.n	8010a1a <TIM_TI1_SetConfig+0x5a>
 8010a16:	2301      	movs	r3, #1
 8010a18:	e000      	b.n	8010a1c <TIM_TI1_SetConfig+0x5c>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d008      	beq.n	8010a32 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	f023 0303 	bic.w	r3, r3, #3
 8010a26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010a28:	697a      	ldr	r2, [r7, #20]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4313      	orrs	r3, r2
 8010a2e:	617b      	str	r3, [r7, #20]
 8010a30:	e003      	b.n	8010a3a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	f043 0301 	orr.w	r3, r3, #1
 8010a38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	011b      	lsls	r3, r3, #4
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	f023 030a 	bic.w	r3, r3, #10
 8010a54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	f003 030a 	and.w	r3, r3, #10
 8010a5c:	693a      	ldr	r2, [r7, #16]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	697a      	ldr	r2, [r7, #20]
 8010a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	621a      	str	r2, [r3, #32]
}
 8010a6e:	bf00      	nop
 8010a70:	371c      	adds	r7, #28
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	40010000 	.word	0x40010000
 8010a80:	40000400 	.word	0x40000400
 8010a84:	40000800 	.word	0x40000800
 8010a88:	40000c00 	.word	0x40000c00
 8010a8c:	40014000 	.word	0x40014000

08010a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b087      	sub	sp, #28
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6a1b      	ldr	r3, [r3, #32]
 8010aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	f023 0201 	bic.w	r2, r3, #1
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	699b      	ldr	r3, [r3, #24]
 8010ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	011b      	lsls	r3, r3, #4
 8010ac0:	693a      	ldr	r2, [r7, #16]
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	f023 030a 	bic.w	r3, r3, #10
 8010acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010ace:	697a      	ldr	r2, [r7, #20]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	693a      	ldr	r2, [r7, #16]
 8010ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	621a      	str	r2, [r3, #32]
}
 8010ae2:	bf00      	nop
 8010ae4:	371c      	adds	r7, #28
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b087      	sub	sp, #28
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	60f8      	str	r0, [r7, #12]
 8010af6:	60b9      	str	r1, [r7, #8]
 8010af8:	607a      	str	r2, [r7, #4]
 8010afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6a1b      	ldr	r3, [r3, #32]
 8010b00:	f023 0210 	bic.w	r2, r3, #16
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6a1b      	ldr	r3, [r3, #32]
 8010b12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	021b      	lsls	r3, r3, #8
 8010b20:	697a      	ldr	r2, [r7, #20]
 8010b22:	4313      	orrs	r3, r2
 8010b24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	031b      	lsls	r3, r3, #12
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	697a      	ldr	r2, [r7, #20]
 8010b36:	4313      	orrs	r3, r2
 8010b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010b40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	011b      	lsls	r3, r3, #4
 8010b46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010b4a:	693a      	ldr	r2, [r7, #16]
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	697a      	ldr	r2, [r7, #20]
 8010b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	693a      	ldr	r2, [r7, #16]
 8010b5a:	621a      	str	r2, [r3, #32]
}
 8010b5c:	bf00      	nop
 8010b5e:	371c      	adds	r7, #28
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b087      	sub	sp, #28
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6a1b      	ldr	r3, [r3, #32]
 8010b78:	f023 0210 	bic.w	r2, r3, #16
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	699b      	ldr	r3, [r3, #24]
 8010b84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	6a1b      	ldr	r3, [r3, #32]
 8010b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010b92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	031b      	lsls	r3, r3, #12
 8010b98:	697a      	ldr	r2, [r7, #20]
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	011b      	lsls	r3, r3, #4
 8010baa:	693a      	ldr	r2, [r7, #16]
 8010bac:	4313      	orrs	r3, r2
 8010bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	697a      	ldr	r2, [r7, #20]
 8010bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	693a      	ldr	r2, [r7, #16]
 8010bba:	621a      	str	r2, [r3, #32]
}
 8010bbc:	bf00      	nop
 8010bbe:	371c      	adds	r7, #28
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b087      	sub	sp, #28
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
 8010bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	6a1b      	ldr	r3, [r3, #32]
 8010bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	69db      	ldr	r3, [r3, #28]
 8010be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	6a1b      	ldr	r3, [r3, #32]
 8010bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f023 0303 	bic.w	r3, r3, #3
 8010bf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010c04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	011b      	lsls	r3, r3, #4
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	697a      	ldr	r2, [r7, #20]
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010c18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	021b      	lsls	r3, r3, #8
 8010c1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8010c22:	693a      	ldr	r2, [r7, #16]
 8010c24:	4313      	orrs	r3, r2
 8010c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	697a      	ldr	r2, [r7, #20]
 8010c2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	693a      	ldr	r2, [r7, #16]
 8010c32:	621a      	str	r2, [r3, #32]
}
 8010c34:	bf00      	nop
 8010c36:	371c      	adds	r7, #28
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b087      	sub	sp, #28
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6a1b      	ldr	r3, [r3, #32]
 8010c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	69db      	ldr	r3, [r3, #28]
 8010c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6a1b      	ldr	r3, [r3, #32]
 8010c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	021b      	lsls	r3, r3, #8
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	4313      	orrs	r3, r2
 8010c76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010c7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	031b      	lsls	r3, r3, #12
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8010c92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	031b      	lsls	r3, r3, #12
 8010c98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010c9c:	693a      	ldr	r2, [r7, #16]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	697a      	ldr	r2, [r7, #20]
 8010ca6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	693a      	ldr	r2, [r7, #16]
 8010cac:	621a      	str	r2, [r3, #32]
}
 8010cae:	bf00      	nop
 8010cb0:	371c      	adds	r7, #28
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr

08010cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010cba:	b480      	push	{r7}
 8010cbc:	b085      	sub	sp, #20
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
 8010cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	f043 0307 	orr.w	r3, r3, #7
 8010cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	609a      	str	r2, [r3, #8]
}
 8010ce4:	bf00      	nop
 8010ce6:	3714      	adds	r7, #20
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	021a      	lsls	r2, r3, #8
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	431a      	orrs	r2, r3
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	4313      	orrs	r3, r2
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	609a      	str	r2, [r3, #8]
}
 8010d24:	bf00      	nop
 8010d26:	371c      	adds	r7, #28
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b087      	sub	sp, #28
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	60b9      	str	r1, [r7, #8]
 8010d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	f003 031f 	and.w	r3, r3, #31
 8010d42:	2201      	movs	r2, #1
 8010d44:	fa02 f303 	lsl.w	r3, r2, r3
 8010d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6a1a      	ldr	r2, [r3, #32]
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	43db      	mvns	r3, r3
 8010d52:	401a      	ands	r2, r3
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6a1a      	ldr	r2, [r3, #32]
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	f003 031f 	and.w	r3, r3, #31
 8010d62:	6879      	ldr	r1, [r7, #4]
 8010d64:	fa01 f303 	lsl.w	r3, r1, r3
 8010d68:	431a      	orrs	r2, r3
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	621a      	str	r2, [r3, #32]
}
 8010d6e:	bf00      	nop
 8010d70:	371c      	adds	r7, #28
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr
	...

08010d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d101      	bne.n	8010d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d90:	2302      	movs	r3, #2
 8010d92:	e050      	b.n	8010e36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2201      	movs	r2, #1
 8010d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2202      	movs	r2, #2
 8010da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a1c      	ldr	r2, [pc, #112]	; (8010e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d018      	beq.n	8010e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010de0:	d013      	beq.n	8010e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a18      	ldr	r2, [pc, #96]	; (8010e48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d00e      	beq.n	8010e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a16      	ldr	r2, [pc, #88]	; (8010e4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d009      	beq.n	8010e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a15      	ldr	r2, [pc, #84]	; (8010e50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d004      	beq.n	8010e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a13      	ldr	r2, [pc, #76]	; (8010e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d10c      	bne.n	8010e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	4313      	orrs	r3, r2
 8010e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68ba      	ldr	r2, [r7, #8]
 8010e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	40010000 	.word	0x40010000
 8010e48:	40000400 	.word	0x40000400
 8010e4c:	40000800 	.word	0x40000800
 8010e50:	40000c00 	.word	0x40000c00
 8010e54:	40014000 	.word	0x40014000

08010e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e60:	bf00      	nop
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e74:	bf00      	nop
 8010e76:	370c      	adds	r7, #12
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e03f      	b.n	8010f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d106      	bne.n	8010eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7f5 ff0a 	bl	8006cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2224      	movs	r2, #36	; 0x24
 8010eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68da      	ldr	r2, [r3, #12]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 fc8f 	bl	80117e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	691a      	ldr	r2, [r3, #16]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	695a      	ldr	r2, [r3, #20]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	68da      	ldr	r2, [r3, #12]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2220      	movs	r2, #32
 8010f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2220      	movs	r2, #32
 8010f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b082      	sub	sp, #8
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d101      	bne.n	8010f2c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010f28:	2301      	movs	r3, #1
 8010f2a:	e01e      	b.n	8010f6a <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2224      	movs	r2, #36	; 0x24
 8010f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	68da      	ldr	r2, [r3, #12]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010f42:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f7f5 ff91 	bl	8006e6c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2200      	movs	r2, #0
 8010f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}

08010f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b088      	sub	sp, #32
 8010f76:	af02      	add	r7, sp, #8
 8010f78:	60f8      	str	r0, [r7, #12]
 8010f7a:	60b9      	str	r1, [r7, #8]
 8010f7c:	603b      	str	r3, [r7, #0]
 8010f7e:	4613      	mov	r3, r2
 8010f80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010f82:	2300      	movs	r3, #0
 8010f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b20      	cmp	r3, #32
 8010f90:	f040 8083 	bne.w	801109a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d002      	beq.n	8010fa0 <HAL_UART_Transmit+0x2e>
 8010f9a:	88fb      	ldrh	r3, [r7, #6]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d101      	bne.n	8010fa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e07b      	b.n	801109c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d101      	bne.n	8010fb2 <HAL_UART_Transmit+0x40>
 8010fae:	2302      	movs	r3, #2
 8010fb0:	e074      	b.n	801109c <HAL_UART_Transmit+0x12a>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2221      	movs	r2, #33	; 0x21
 8010fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010fc8:	f7fa ff46 	bl	800be58 <HAL_GetTick>
 8010fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	88fa      	ldrh	r2, [r7, #6]
 8010fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	88fa      	ldrh	r2, [r7, #6]
 8010fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010fe2:	e042      	b.n	801106a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	3b01      	subs	r3, #1
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ffa:	d122      	bne.n	8011042 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	2200      	movs	r2, #0
 8011004:	2180      	movs	r1, #128	; 0x80
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f000 fa6c 	bl	80114e4 <UART_WaitOnFlagUntilTimeout>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d001      	beq.n	8011016 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8011012:	2303      	movs	r3, #3
 8011014:	e042      	b.n	801109c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	461a      	mov	r2, r3
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011028:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	691b      	ldr	r3, [r3, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d103      	bne.n	801103a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	3302      	adds	r3, #2
 8011036:	60bb      	str	r3, [r7, #8]
 8011038:	e017      	b.n	801106a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	3301      	adds	r3, #1
 801103e:	60bb      	str	r3, [r7, #8]
 8011040:	e013      	b.n	801106a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	9300      	str	r3, [sp, #0]
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	2200      	movs	r2, #0
 801104a:	2180      	movs	r1, #128	; 0x80
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 fa49 	bl	80114e4 <UART_WaitOnFlagUntilTimeout>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d001      	beq.n	801105c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8011058:	2303      	movs	r3, #3
 801105a:	e01f      	b.n	801109c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	1c5a      	adds	r2, r3, #1
 8011060:	60ba      	str	r2, [r7, #8]
 8011062:	781a      	ldrb	r2, [r3, #0]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801106e:	b29b      	uxth	r3, r3
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1b7      	bne.n	8010fe4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	2200      	movs	r2, #0
 801107c:	2140      	movs	r1, #64	; 0x40
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f000 fa30 	bl	80114e4 <UART_WaitOnFlagUntilTimeout>
 8011084:	4603      	mov	r3, r0
 8011086:	2b00      	cmp	r3, #0
 8011088:	d001      	beq.n	801108e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801108a:	2303      	movs	r3, #3
 801108c:	e006      	b.n	801109c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2220      	movs	r2, #32
 8011092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	e000      	b.n	801109c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801109a:	2302      	movs	r3, #2
  }
}
 801109c:	4618      	mov	r0, r3
 801109e:	3718      	adds	r7, #24
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b086      	sub	sp, #24
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	4613      	mov	r3, r2
 80110b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	2b20      	cmp	r3, #32
 80110bc:	d166      	bne.n	801118c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d002      	beq.n	80110ca <HAL_UART_Receive_DMA+0x26>
 80110c4:	88fb      	ldrh	r3, [r7, #6]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d101      	bne.n	80110ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80110ca:	2301      	movs	r3, #1
 80110cc:	e05f      	b.n	801118e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d101      	bne.n	80110dc <HAL_UART_Receive_DMA+0x38>
 80110d8:	2302      	movs	r3, #2
 80110da:	e058      	b.n	801118e <HAL_UART_Receive_DMA+0xea>
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	88fa      	ldrh	r2, [r7, #6]
 80110ee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2222      	movs	r2, #34	; 0x22
 80110fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011102:	4a25      	ldr	r2, [pc, #148]	; (8011198 <HAL_UART_Receive_DMA+0xf4>)
 8011104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801110a:	4a24      	ldr	r2, [pc, #144]	; (801119c <HAL_UART_Receive_DMA+0xf8>)
 801110c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011112:	4a23      	ldr	r2, [pc, #140]	; (80111a0 <HAL_UART_Receive_DMA+0xfc>)
 8011114:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801111a:	2200      	movs	r2, #0
 801111c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801111e:	f107 0308 	add.w	r3, r7, #8
 8011122:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	3304      	adds	r3, #4
 801112e:	4619      	mov	r1, r3
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	88fb      	ldrh	r3, [r7, #6]
 8011136:	f7fb fe49 	bl	800cdcc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801113a:	2300      	movs	r3, #0
 801113c:	613b      	str	r3, [r7, #16]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	613b      	str	r3, [r7, #16]
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	613b      	str	r3, [r7, #16]
 801114e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68da      	ldr	r2, [r3, #12]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011166:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	695a      	ldr	r2, [r3, #20]
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f042 0201 	orr.w	r2, r2, #1
 8011176:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	695a      	ldr	r2, [r3, #20]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011186:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8011188:	2300      	movs	r3, #0
 801118a:	e000      	b.n	801118e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801118c:	2302      	movs	r3, #2
  }
}
 801118e:	4618      	mov	r0, r3
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	080113cd 	.word	0x080113cd
 801119c:	08011435 	.word	0x08011435
 80111a0:	08011451 	.word	0x08011451

080111a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b088      	sub	sp, #32
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80111c4:	2300      	movs	r3, #0
 80111c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80111c8:	2300      	movs	r3, #0
 80111ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	f003 030f 	and.w	r3, r3, #15
 80111d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d10d      	bne.n	80111f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	f003 0320 	and.w	r3, r3, #32
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d008      	beq.n	80111f6 <HAL_UART_IRQHandler+0x52>
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	f003 0320 	and.w	r3, r3, #32
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d003      	beq.n	80111f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 fa78 	bl	80116e4 <UART_Receive_IT>
      return;
 80111f4:	e0d0      	b.n	8011398 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f000 80b0 	beq.w	801135e <HAL_UART_IRQHandler+0x1ba>
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	f003 0301 	and.w	r3, r3, #1
 8011204:	2b00      	cmp	r3, #0
 8011206:	d105      	bne.n	8011214 <HAL_UART_IRQHandler+0x70>
 8011208:	69bb      	ldr	r3, [r7, #24]
 801120a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 80a5 	beq.w	801135e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	f003 0301 	and.w	r3, r3, #1
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00a      	beq.n	8011234 <HAL_UART_IRQHandler+0x90>
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011224:	2b00      	cmp	r3, #0
 8011226:	d005      	beq.n	8011234 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801122c:	f043 0201 	orr.w	r2, r3, #1
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	f003 0304 	and.w	r3, r3, #4
 801123a:	2b00      	cmp	r3, #0
 801123c:	d00a      	beq.n	8011254 <HAL_UART_IRQHandler+0xb0>
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	f003 0301 	and.w	r3, r3, #1
 8011244:	2b00      	cmp	r3, #0
 8011246:	d005      	beq.n	8011254 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801124c:	f043 0202 	orr.w	r2, r3, #2
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	f003 0302 	and.w	r3, r3, #2
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00a      	beq.n	8011274 <HAL_UART_IRQHandler+0xd0>
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f003 0301 	and.w	r3, r3, #1
 8011264:	2b00      	cmp	r3, #0
 8011266:	d005      	beq.n	8011274 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801126c:	f043 0204 	orr.w	r2, r3, #4
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	f003 0308 	and.w	r3, r3, #8
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00f      	beq.n	801129e <HAL_UART_IRQHandler+0xfa>
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	f003 0320 	and.w	r3, r3, #32
 8011284:	2b00      	cmp	r3, #0
 8011286:	d104      	bne.n	8011292 <HAL_UART_IRQHandler+0xee>
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	d005      	beq.n	801129e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011296:	f043 0208 	orr.w	r2, r3, #8
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d077      	beq.n	8011396 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	f003 0320 	and.w	r3, r3, #32
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d007      	beq.n	80112c0 <HAL_UART_IRQHandler+0x11c>
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	f003 0320 	and.w	r3, r3, #32
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d002      	beq.n	80112c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 fa12 	bl	80116e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	695b      	ldr	r3, [r3, #20]
 80112c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ca:	2b40      	cmp	r3, #64	; 0x40
 80112cc:	bf0c      	ite	eq
 80112ce:	2301      	moveq	r3, #1
 80112d0:	2300      	movne	r3, #0
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112da:	f003 0308 	and.w	r3, r3, #8
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <HAL_UART_IRQHandler+0x144>
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d031      	beq.n	801134c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 f95b 	bl	80115a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112f8:	2b40      	cmp	r3, #64	; 0x40
 80112fa:	d123      	bne.n	8011344 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	695a      	ldr	r2, [r3, #20]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801130a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011310:	2b00      	cmp	r3, #0
 8011312:	d013      	beq.n	801133c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011318:	4a21      	ldr	r2, [pc, #132]	; (80113a0 <HAL_UART_IRQHandler+0x1fc>)
 801131a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011320:	4618      	mov	r0, r3
 8011322:	f7fb fdab 	bl	800ce7c <HAL_DMA_Abort_IT>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d016      	beq.n	801135a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011336:	4610      	mov	r0, r2
 8011338:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801133a:	e00e      	b.n	801135a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7f5 fcab 	bl	8006c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011342:	e00a      	b.n	801135a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7f5 fca7 	bl	8006c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801134a:	e006      	b.n	801135a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7f5 fca3 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8011358:	e01d      	b.n	8011396 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801135a:	bf00      	nop
    return;
 801135c:	e01b      	b.n	8011396 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801135e:	69fb      	ldr	r3, [r7, #28]
 8011360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011364:	2b00      	cmp	r3, #0
 8011366:	d008      	beq.n	801137a <HAL_UART_IRQHandler+0x1d6>
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801136e:	2b00      	cmp	r3, #0
 8011370:	d003      	beq.n	801137a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f000 f948 	bl	8011608 <UART_Transmit_IT>
    return;
 8011378:	e00e      	b.n	8011398 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011380:	2b00      	cmp	r3, #0
 8011382:	d009      	beq.n	8011398 <HAL_UART_IRQHandler+0x1f4>
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801138a:	2b00      	cmp	r3, #0
 801138c:	d004      	beq.n	8011398 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 f990 	bl	80116b4 <UART_EndTransmit_IT>
    return;
 8011394:	e000      	b.n	8011398 <HAL_UART_IRQHandler+0x1f4>
    return;
 8011396:	bf00      	nop
  }
}
 8011398:	3720      	adds	r7, #32
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	080115e1 	.word	0x080115e1

080113a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80113a4:	b480      	push	{r7}
 80113a6:	b083      	sub	sp, #12
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80113ac:	bf00      	nop
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b083      	sub	sp, #12
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80113c0:	bf00      	nop
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d11e      	bne.n	8011426 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68da      	ldr	r2, [r3, #12]
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80113fc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	695a      	ldr	r2, [r3, #20]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f022 0201 	bic.w	r2, r2, #1
 801140c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	695a      	ldr	r2, [r3, #20]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801141c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2220      	movs	r2, #32
 8011422:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011426:	68f8      	ldr	r0, [r7, #12]
 8011428:	f7f5 fc40 	bl	8006cac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801142c:	bf00      	nop
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011440:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f7ff ffb8 	bl	80113b8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011448:	bf00      	nop
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011458:	2300      	movs	r3, #0
 801145a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011460:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	695b      	ldr	r3, [r3, #20]
 8011468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801146c:	2b80      	cmp	r3, #128	; 0x80
 801146e:	bf0c      	ite	eq
 8011470:	2301      	moveq	r3, #1
 8011472:	2300      	movne	r3, #0
 8011474:	b2db      	uxtb	r3, r3
 8011476:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801147e:	b2db      	uxtb	r3, r3
 8011480:	2b21      	cmp	r3, #33	; 0x21
 8011482:	d108      	bne.n	8011496 <UART_DMAError+0x46>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d005      	beq.n	8011496 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2200      	movs	r2, #0
 801148e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011490:	68b8      	ldr	r0, [r7, #8]
 8011492:	f000 f871 	bl	8011578 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	695b      	ldr	r3, [r3, #20]
 801149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114a0:	2b40      	cmp	r3, #64	; 0x40
 80114a2:	bf0c      	ite	eq
 80114a4:	2301      	moveq	r3, #1
 80114a6:	2300      	movne	r3, #0
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	2b22      	cmp	r3, #34	; 0x22
 80114b6:	d108      	bne.n	80114ca <UART_DMAError+0x7a>
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d005      	beq.n	80114ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	2200      	movs	r2, #0
 80114c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80114c4:	68b8      	ldr	r0, [r7, #8]
 80114c6:	f000 f86d 	bl	80115a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ce:	f043 0210 	orr.w	r2, r3, #16
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80114d6:	68b8      	ldr	r0, [r7, #8]
 80114d8:	f7f5 fbde 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114dc:	bf00      	nop
 80114de:	3710      	adds	r7, #16
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	4613      	mov	r3, r2
 80114f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114f4:	e02c      	b.n	8011550 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114fc:	d028      	beq.n	8011550 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d007      	beq.n	8011514 <UART_WaitOnFlagUntilTimeout+0x30>
 8011504:	f7fa fca8 	bl	800be58 <HAL_GetTick>
 8011508:	4602      	mov	r2, r0
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	429a      	cmp	r2, r3
 8011512:	d21d      	bcs.n	8011550 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011522:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	695a      	ldr	r2, [r3, #20]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f022 0201 	bic.w	r2, r2, #1
 8011532:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2220      	movs	r2, #32
 8011538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2220      	movs	r2, #32
 8011540:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2200      	movs	r2, #0
 8011548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801154c:	2303      	movs	r3, #3
 801154e:	e00f      	b.n	8011570 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	681a      	ldr	r2, [r3, #0]
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	4013      	ands	r3, r2
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	429a      	cmp	r2, r3
 801155e:	bf0c      	ite	eq
 8011560:	2301      	moveq	r3, #1
 8011562:	2300      	movne	r3, #0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	461a      	mov	r2, r3
 8011568:	79fb      	ldrb	r3, [r7, #7]
 801156a:	429a      	cmp	r2, r3
 801156c:	d0c3      	beq.n	80114f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801156e:	2300      	movs	r3, #0
}
 8011570:	4618      	mov	r0, r3
 8011572:	3710      	adds	r7, #16
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011578:	b480      	push	{r7}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	68da      	ldr	r2, [r3, #12]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801158e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2220      	movs	r2, #32
 8011594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8011598:	bf00      	nop
 801159a:	370c      	adds	r7, #12
 801159c:	46bd      	mov	sp, r7
 801159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a2:	4770      	bx	lr

080115a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b083      	sub	sp, #12
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	68da      	ldr	r2, [r3, #12]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80115ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	695a      	ldr	r2, [r3, #20]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f022 0201 	bic.w	r2, r2, #1
 80115ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2220      	movs	r2, #32
 80115d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80115d4:	bf00      	nop
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2200      	movs	r2, #0
 80115f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2200      	movs	r2, #0
 80115f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7f5 fb4c 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011600:	bf00      	nop
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011616:	b2db      	uxtb	r3, r3
 8011618:	2b21      	cmp	r3, #33	; 0x21
 801161a:	d144      	bne.n	80116a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011624:	d11a      	bne.n	801165c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a1b      	ldr	r3, [r3, #32]
 801162a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	881b      	ldrh	r3, [r3, #0]
 8011630:	461a      	mov	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801163a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	691b      	ldr	r3, [r3, #16]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d105      	bne.n	8011650 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6a1b      	ldr	r3, [r3, #32]
 8011648:	1c9a      	adds	r2, r3, #2
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	621a      	str	r2, [r3, #32]
 801164e:	e00e      	b.n	801166e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6a1b      	ldr	r3, [r3, #32]
 8011654:	1c5a      	adds	r2, r3, #1
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	621a      	str	r2, [r3, #32]
 801165a:	e008      	b.n	801166e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6a1b      	ldr	r3, [r3, #32]
 8011660:	1c59      	adds	r1, r3, #1
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	6211      	str	r1, [r2, #32]
 8011666:	781a      	ldrb	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011672:	b29b      	uxth	r3, r3
 8011674:	3b01      	subs	r3, #1
 8011676:	b29b      	uxth	r3, r3
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	4619      	mov	r1, r3
 801167c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10f      	bne.n	80116a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	68da      	ldr	r2, [r3, #12]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011690:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	68da      	ldr	r2, [r3, #12]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80116a2:	2300      	movs	r3, #0
 80116a4:	e000      	b.n	80116a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80116a6:	2302      	movs	r3, #2
  }
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	68da      	ldr	r2, [r3, #12]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2220      	movs	r2, #32
 80116d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7ff fe65 	bl	80113a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	2b22      	cmp	r3, #34	; 0x22
 80116f6:	d171      	bne.n	80117dc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011700:	d123      	bne.n	801174a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011706:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d10e      	bne.n	801172e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	b29b      	uxth	r3, r3
 8011718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801171c:	b29a      	uxth	r2, r3
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011726:	1c9a      	adds	r2, r3, #2
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	629a      	str	r2, [r3, #40]	; 0x28
 801172c:	e029      	b.n	8011782 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	b29b      	uxth	r3, r3
 8011736:	b2db      	uxtb	r3, r3
 8011738:	b29a      	uxth	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011742:	1c5a      	adds	r2, r3, #1
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	629a      	str	r2, [r3, #40]	; 0x28
 8011748:	e01b      	b.n	8011782 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10a      	bne.n	8011768 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	6858      	ldr	r0, [r3, #4]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175c:	1c59      	adds	r1, r3, #1
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	6291      	str	r1, [r2, #40]	; 0x28
 8011762:	b2c2      	uxtb	r2, r0
 8011764:	701a      	strb	r2, [r3, #0]
 8011766:	e00c      	b.n	8011782 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	b2da      	uxtb	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011774:	1c58      	adds	r0, r3, #1
 8011776:	6879      	ldr	r1, [r7, #4]
 8011778:	6288      	str	r0, [r1, #40]	; 0x28
 801177a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801177e:	b2d2      	uxtb	r2, r2
 8011780:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011786:	b29b      	uxth	r3, r3
 8011788:	3b01      	subs	r3, #1
 801178a:	b29b      	uxth	r3, r3
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	4619      	mov	r1, r3
 8011790:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011792:	2b00      	cmp	r3, #0
 8011794:	d120      	bne.n	80117d8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	68da      	ldr	r2, [r3, #12]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	f022 0220 	bic.w	r2, r2, #32
 80117a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	68da      	ldr	r2, [r3, #12]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80117b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	695a      	ldr	r2, [r3, #20]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f022 0201 	bic.w	r2, r2, #1
 80117c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2220      	movs	r2, #32
 80117ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7f5 fa6c 	bl	8006cac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80117d4:	2300      	movs	r3, #0
 80117d6:	e002      	b.n	80117de <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80117d8:	2300      	movs	r3, #0
 80117da:	e000      	b.n	80117de <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80117dc:	2302      	movs	r3, #2
  }
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
	...

080117e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80117e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80117ec:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	691b      	ldr	r3, [r3, #16]
 80117fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011802:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011806:	68d9      	ldr	r1, [r3, #12]
 8011808:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	ea40 0301 	orr.w	r3, r0, r1
 8011812:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011814:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011818:	689a      	ldr	r2, [r3, #8]
 801181a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801181e:	691b      	ldr	r3, [r3, #16]
 8011820:	431a      	orrs	r2, r3
 8011822:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011826:	695b      	ldr	r3, [r3, #20]
 8011828:	431a      	orrs	r2, r3
 801182a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801182e:	69db      	ldr	r3, [r3, #28]
 8011830:	4313      	orrs	r3, r2
 8011832:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8011836:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011842:	f021 010c 	bic.w	r1, r1, #12
 8011846:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8011850:	430b      	orrs	r3, r1
 8011852:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011854:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	695b      	ldr	r3, [r3, #20]
 801185c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011860:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011864:	6999      	ldr	r1, [r3, #24]
 8011866:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	ea40 0301 	orr.w	r3, r0, r1
 8011870:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011872:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801187c:	f040 824a 	bne.w	8011d14 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011880:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	4b96      	ldr	r3, [pc, #600]	; (8011ae0 <UART_SetConfig+0x2f8>)
 8011888:	429a      	cmp	r2, r3
 801188a:	d006      	beq.n	801189a <UART_SetConfig+0xb2>
 801188c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	4b94      	ldr	r3, [pc, #592]	; (8011ae4 <UART_SetConfig+0x2fc>)
 8011894:	429a      	cmp	r2, r3
 8011896:	f040 8129 	bne.w	8011aec <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801189a:	f7fc fc75 	bl	800e188 <HAL_RCC_GetPCLK2Freq>
 801189e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80118a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80118a6:	2200      	movs	r2, #0
 80118a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80118ac:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80118b0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80118b4:	4622      	mov	r2, r4
 80118b6:	462b      	mov	r3, r5
 80118b8:	1891      	adds	r1, r2, r2
 80118ba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80118be:	415b      	adcs	r3, r3
 80118c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80118c4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80118c8:	4621      	mov	r1, r4
 80118ca:	1851      	adds	r1, r2, r1
 80118cc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80118d0:	4629      	mov	r1, r5
 80118d2:	414b      	adcs	r3, r1
 80118d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80118d8:	f04f 0200 	mov.w	r2, #0
 80118dc:	f04f 0300 	mov.w	r3, #0
 80118e0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80118e4:	4649      	mov	r1, r9
 80118e6:	00cb      	lsls	r3, r1, #3
 80118e8:	4641      	mov	r1, r8
 80118ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80118ee:	4641      	mov	r1, r8
 80118f0:	00ca      	lsls	r2, r1, #3
 80118f2:	4610      	mov	r0, r2
 80118f4:	4619      	mov	r1, r3
 80118f6:	4603      	mov	r3, r0
 80118f8:	4622      	mov	r2, r4
 80118fa:	189b      	adds	r3, r3, r2
 80118fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8011900:	462b      	mov	r3, r5
 8011902:	460a      	mov	r2, r1
 8011904:	eb42 0303 	adc.w	r3, r2, r3
 8011908:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801190c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2200      	movs	r2, #0
 8011914:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8011918:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 801191c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8011920:	460b      	mov	r3, r1
 8011922:	18db      	adds	r3, r3, r3
 8011924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011928:	4613      	mov	r3, r2
 801192a:	eb42 0303 	adc.w	r3, r2, r3
 801192e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011932:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8011936:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 801193a:	f7ef f9bd 	bl	8000cb8 <__aeabi_uldivmod>
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	4b69      	ldr	r3, [pc, #420]	; (8011ae8 <UART_SetConfig+0x300>)
 8011944:	fba3 2302 	umull	r2, r3, r3, r2
 8011948:	095b      	lsrs	r3, r3, #5
 801194a:	011c      	lsls	r4, r3, #4
 801194c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011950:	2200      	movs	r2, #0
 8011952:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8011956:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 801195a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 801195e:	4642      	mov	r2, r8
 8011960:	464b      	mov	r3, r9
 8011962:	1891      	adds	r1, r2, r2
 8011964:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8011968:	415b      	adcs	r3, r3
 801196a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801196e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011972:	4641      	mov	r1, r8
 8011974:	1851      	adds	r1, r2, r1
 8011976:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801197a:	4649      	mov	r1, r9
 801197c:	414b      	adcs	r3, r1
 801197e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011982:	f04f 0200 	mov.w	r2, #0
 8011986:	f04f 0300 	mov.w	r3, #0
 801198a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 801198e:	4659      	mov	r1, fp
 8011990:	00cb      	lsls	r3, r1, #3
 8011992:	4651      	mov	r1, sl
 8011994:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011998:	4651      	mov	r1, sl
 801199a:	00ca      	lsls	r2, r1, #3
 801199c:	4610      	mov	r0, r2
 801199e:	4619      	mov	r1, r3
 80119a0:	4603      	mov	r3, r0
 80119a2:	4642      	mov	r2, r8
 80119a4:	189b      	adds	r3, r3, r2
 80119a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80119aa:	464b      	mov	r3, r9
 80119ac:	460a      	mov	r2, r1
 80119ae:	eb42 0303 	adc.w	r3, r2, r3
 80119b2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80119b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	2200      	movs	r2, #0
 80119be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80119c2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80119c6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80119ca:	460b      	mov	r3, r1
 80119cc:	18db      	adds	r3, r3, r3
 80119ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80119d2:	4613      	mov	r3, r2
 80119d4:	eb42 0303 	adc.w	r3, r2, r3
 80119d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80119dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80119e0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80119e4:	f7ef f968 	bl	8000cb8 <__aeabi_uldivmod>
 80119e8:	4602      	mov	r2, r0
 80119ea:	460b      	mov	r3, r1
 80119ec:	4611      	mov	r1, r2
 80119ee:	4b3e      	ldr	r3, [pc, #248]	; (8011ae8 <UART_SetConfig+0x300>)
 80119f0:	fba3 2301 	umull	r2, r3, r3, r1
 80119f4:	095b      	lsrs	r3, r3, #5
 80119f6:	2264      	movs	r2, #100	; 0x64
 80119f8:	fb02 f303 	mul.w	r3, r2, r3
 80119fc:	1acb      	subs	r3, r1, r3
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011a04:	4b38      	ldr	r3, [pc, #224]	; (8011ae8 <UART_SetConfig+0x300>)
 8011a06:	fba3 2302 	umull	r2, r3, r3, r2
 8011a0a:	095b      	lsrs	r3, r3, #5
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011a12:	441c      	add	r4, r3
 8011a14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8011a1e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8011a22:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8011a26:	4642      	mov	r2, r8
 8011a28:	464b      	mov	r3, r9
 8011a2a:	1891      	adds	r1, r2, r2
 8011a2c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8011a30:	415b      	adcs	r3, r3
 8011a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011a36:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8011a3a:	4641      	mov	r1, r8
 8011a3c:	1851      	adds	r1, r2, r1
 8011a3e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011a42:	4649      	mov	r1, r9
 8011a44:	414b      	adcs	r3, r1
 8011a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011a4a:	f04f 0200 	mov.w	r2, #0
 8011a4e:	f04f 0300 	mov.w	r3, #0
 8011a52:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8011a56:	4659      	mov	r1, fp
 8011a58:	00cb      	lsls	r3, r1, #3
 8011a5a:	4651      	mov	r1, sl
 8011a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a60:	4651      	mov	r1, sl
 8011a62:	00ca      	lsls	r2, r1, #3
 8011a64:	4610      	mov	r0, r2
 8011a66:	4619      	mov	r1, r3
 8011a68:	4603      	mov	r3, r0
 8011a6a:	4642      	mov	r2, r8
 8011a6c:	189b      	adds	r3, r3, r2
 8011a6e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8011a72:	464b      	mov	r3, r9
 8011a74:	460a      	mov	r2, r1
 8011a76:	eb42 0303 	adc.w	r3, r2, r3
 8011a7a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8011a7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	2200      	movs	r2, #0
 8011a86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8011a8a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8011a8e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8011a92:	460b      	mov	r3, r1
 8011a94:	18db      	adds	r3, r3, r3
 8011a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a9a:	4613      	mov	r3, r2
 8011a9c:	eb42 0303 	adc.w	r3, r2, r3
 8011aa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011aa4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011aa8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8011aac:	f7ef f904 	bl	8000cb8 <__aeabi_uldivmod>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	4b0c      	ldr	r3, [pc, #48]	; (8011ae8 <UART_SetConfig+0x300>)
 8011ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8011aba:	095b      	lsrs	r3, r3, #5
 8011abc:	2164      	movs	r1, #100	; 0x64
 8011abe:	fb01 f303 	mul.w	r3, r1, r3
 8011ac2:	1ad3      	subs	r3, r2, r3
 8011ac4:	00db      	lsls	r3, r3, #3
 8011ac6:	3332      	adds	r3, #50	; 0x32
 8011ac8:	4a07      	ldr	r2, [pc, #28]	; (8011ae8 <UART_SetConfig+0x300>)
 8011aca:	fba2 2303 	umull	r2, r3, r2, r3
 8011ace:	095b      	lsrs	r3, r3, #5
 8011ad0:	f003 0207 	and.w	r2, r3, #7
 8011ad4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4422      	add	r2, r4
 8011adc:	609a      	str	r2, [r3, #8]
 8011ade:	e349      	b.n	8012174 <UART_SetConfig+0x98c>
 8011ae0:	40011000 	.word	0x40011000
 8011ae4:	40011400 	.word	0x40011400
 8011ae8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011aec:	f7fc fb38 	bl	800e160 <HAL_RCC_GetPCLK1Freq>
 8011af0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011af4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011af8:	2200      	movs	r2, #0
 8011afa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8011afe:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8011b02:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8011b06:	4622      	mov	r2, r4
 8011b08:	462b      	mov	r3, r5
 8011b0a:	1891      	adds	r1, r2, r2
 8011b0c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8011b10:	415b      	adcs	r3, r3
 8011b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011b16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	eb12 0a01 	adds.w	sl, r2, r1
 8011b20:	4629      	mov	r1, r5
 8011b22:	eb43 0b01 	adc.w	fp, r3, r1
 8011b26:	f04f 0200 	mov.w	r2, #0
 8011b2a:	f04f 0300 	mov.w	r3, #0
 8011b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011b32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011b3a:	4692      	mov	sl, r2
 8011b3c:	469b      	mov	fp, r3
 8011b3e:	4623      	mov	r3, r4
 8011b40:	eb1a 0303 	adds.w	r3, sl, r3
 8011b44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8011b48:	462b      	mov	r3, r5
 8011b4a:	eb4b 0303 	adc.w	r3, fp, r3
 8011b4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8011b52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8011b5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8011b62:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8011b66:	460b      	mov	r3, r1
 8011b68:	18db      	adds	r3, r3, r3
 8011b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b6e:	4613      	mov	r3, r2
 8011b70:	eb42 0303 	adc.w	r3, r2, r3
 8011b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b78:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011b7c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8011b80:	f7ef f89a 	bl	8000cb8 <__aeabi_uldivmod>
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	4b61      	ldr	r3, [pc, #388]	; (8011d10 <UART_SetConfig+0x528>)
 8011b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8011b8e:	095b      	lsrs	r3, r3, #5
 8011b90:	011c      	lsls	r4, r3, #4
 8011b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011b96:	2200      	movs	r2, #0
 8011b98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8011b9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8011ba0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8011ba4:	4642      	mov	r2, r8
 8011ba6:	464b      	mov	r3, r9
 8011ba8:	1891      	adds	r1, r2, r2
 8011baa:	67b9      	str	r1, [r7, #120]	; 0x78
 8011bac:	415b      	adcs	r3, r3
 8011bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011bb0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011bb4:	4641      	mov	r1, r8
 8011bb6:	1851      	adds	r1, r2, r1
 8011bb8:	6739      	str	r1, [r7, #112]	; 0x70
 8011bba:	4649      	mov	r1, r9
 8011bbc:	414b      	adcs	r3, r1
 8011bbe:	677b      	str	r3, [r7, #116]	; 0x74
 8011bc0:	f04f 0200 	mov.w	r2, #0
 8011bc4:	f04f 0300 	mov.w	r3, #0
 8011bc8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8011bcc:	4659      	mov	r1, fp
 8011bce:	00cb      	lsls	r3, r1, #3
 8011bd0:	4651      	mov	r1, sl
 8011bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011bd6:	4651      	mov	r1, sl
 8011bd8:	00ca      	lsls	r2, r1, #3
 8011bda:	4610      	mov	r0, r2
 8011bdc:	4619      	mov	r1, r3
 8011bde:	4603      	mov	r3, r0
 8011be0:	4642      	mov	r2, r8
 8011be2:	189b      	adds	r3, r3, r2
 8011be4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8011be8:	464b      	mov	r3, r9
 8011bea:	460a      	mov	r2, r1
 8011bec:	eb42 0303 	adc.w	r3, r2, r3
 8011bf0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8011bf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011c00:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8011c04:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8011c08:	460b      	mov	r3, r1
 8011c0a:	18db      	adds	r3, r3, r3
 8011c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c0e:	4613      	mov	r3, r2
 8011c10:	eb42 0303 	adc.w	r3, r2, r3
 8011c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011c16:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011c1a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8011c1e:	f7ef f84b 	bl	8000cb8 <__aeabi_uldivmod>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	4611      	mov	r1, r2
 8011c28:	4b39      	ldr	r3, [pc, #228]	; (8011d10 <UART_SetConfig+0x528>)
 8011c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8011c2e:	095b      	lsrs	r3, r3, #5
 8011c30:	2264      	movs	r2, #100	; 0x64
 8011c32:	fb02 f303 	mul.w	r3, r2, r3
 8011c36:	1acb      	subs	r3, r1, r3
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011c3e:	4b34      	ldr	r3, [pc, #208]	; (8011d10 <UART_SetConfig+0x528>)
 8011c40:	fba3 2302 	umull	r2, r3, r3, r2
 8011c44:	095b      	lsrs	r3, r3, #5
 8011c46:	005b      	lsls	r3, r3, #1
 8011c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011c4c:	441c      	add	r4, r3
 8011c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011c52:	2200      	movs	r2, #0
 8011c54:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8011c58:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8011c5c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8011c60:	4642      	mov	r2, r8
 8011c62:	464b      	mov	r3, r9
 8011c64:	1891      	adds	r1, r2, r2
 8011c66:	6639      	str	r1, [r7, #96]	; 0x60
 8011c68:	415b      	adcs	r3, r3
 8011c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8011c6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011c70:	4641      	mov	r1, r8
 8011c72:	1851      	adds	r1, r2, r1
 8011c74:	65b9      	str	r1, [r7, #88]	; 0x58
 8011c76:	4649      	mov	r1, r9
 8011c78:	414b      	adcs	r3, r1
 8011c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c7c:	f04f 0200 	mov.w	r2, #0
 8011c80:	f04f 0300 	mov.w	r3, #0
 8011c84:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8011c88:	4659      	mov	r1, fp
 8011c8a:	00cb      	lsls	r3, r1, #3
 8011c8c:	4651      	mov	r1, sl
 8011c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011c92:	4651      	mov	r1, sl
 8011c94:	00ca      	lsls	r2, r1, #3
 8011c96:	4610      	mov	r0, r2
 8011c98:	4619      	mov	r1, r3
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	4642      	mov	r2, r8
 8011c9e:	189b      	adds	r3, r3, r2
 8011ca0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011ca4:	464b      	mov	r3, r9
 8011ca6:	460a      	mov	r2, r1
 8011ca8:	eb42 0303 	adc.w	r3, r2, r3
 8011cac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011cb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8011cbc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8011cc0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	18db      	adds	r3, r3, r3
 8011cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8011cca:	4613      	mov	r3, r2
 8011ccc:	eb42 0303 	adc.w	r3, r2, r3
 8011cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8011cd2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011cd6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8011cda:	f7ee ffed 	bl	8000cb8 <__aeabi_uldivmod>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4b0b      	ldr	r3, [pc, #44]	; (8011d10 <UART_SetConfig+0x528>)
 8011ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8011ce8:	095b      	lsrs	r3, r3, #5
 8011cea:	2164      	movs	r1, #100	; 0x64
 8011cec:	fb01 f303 	mul.w	r3, r1, r3
 8011cf0:	1ad3      	subs	r3, r2, r3
 8011cf2:	00db      	lsls	r3, r3, #3
 8011cf4:	3332      	adds	r3, #50	; 0x32
 8011cf6:	4a06      	ldr	r2, [pc, #24]	; (8011d10 <UART_SetConfig+0x528>)
 8011cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8011cfc:	095b      	lsrs	r3, r3, #5
 8011cfe:	f003 0207 	and.w	r2, r3, #7
 8011d02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4422      	add	r2, r4
 8011d0a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011d0c:	e232      	b.n	8012174 <UART_SetConfig+0x98c>
 8011d0e:	bf00      	nop
 8011d10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011d14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	4b8d      	ldr	r3, [pc, #564]	; (8011f50 <UART_SetConfig+0x768>)
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d006      	beq.n	8011d2e <UART_SetConfig+0x546>
 8011d20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	4b8b      	ldr	r3, [pc, #556]	; (8011f54 <UART_SetConfig+0x76c>)
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	f040 8117 	bne.w	8011f5c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011d2e:	f7fc fa2b 	bl	800e188 <HAL_RCC_GetPCLK2Freq>
 8011d32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8011d40:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8011d44:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8011d48:	4622      	mov	r2, r4
 8011d4a:	462b      	mov	r3, r5
 8011d4c:	1891      	adds	r1, r2, r2
 8011d4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8011d50:	415b      	adcs	r3, r3
 8011d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011d58:	4621      	mov	r1, r4
 8011d5a:	eb12 0801 	adds.w	r8, r2, r1
 8011d5e:	4629      	mov	r1, r5
 8011d60:	eb43 0901 	adc.w	r9, r3, r1
 8011d64:	f04f 0200 	mov.w	r2, #0
 8011d68:	f04f 0300 	mov.w	r3, #0
 8011d6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011d70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011d74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011d78:	4690      	mov	r8, r2
 8011d7a:	4699      	mov	r9, r3
 8011d7c:	4623      	mov	r3, r4
 8011d7e:	eb18 0303 	adds.w	r3, r8, r3
 8011d82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8011d86:	462b      	mov	r3, r5
 8011d88:	eb49 0303 	adc.w	r3, r9, r3
 8011d8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8011d90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8011d9c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8011da0:	f04f 0200 	mov.w	r2, #0
 8011da4:	f04f 0300 	mov.w	r3, #0
 8011da8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8011dac:	4629      	mov	r1, r5
 8011dae:	008b      	lsls	r3, r1, #2
 8011db0:	4621      	mov	r1, r4
 8011db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011db6:	4621      	mov	r1, r4
 8011db8:	008a      	lsls	r2, r1, #2
 8011dba:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8011dbe:	f7ee ff7b 	bl	8000cb8 <__aeabi_uldivmod>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	4b64      	ldr	r3, [pc, #400]	; (8011f58 <UART_SetConfig+0x770>)
 8011dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8011dcc:	095b      	lsrs	r3, r3, #5
 8011dce:	011c      	lsls	r4, r3, #4
 8011dd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8011dda:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8011dde:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8011de2:	4642      	mov	r2, r8
 8011de4:	464b      	mov	r3, r9
 8011de6:	1891      	adds	r1, r2, r2
 8011de8:	6439      	str	r1, [r7, #64]	; 0x40
 8011dea:	415b      	adcs	r3, r3
 8011dec:	647b      	str	r3, [r7, #68]	; 0x44
 8011dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011df2:	4641      	mov	r1, r8
 8011df4:	1851      	adds	r1, r2, r1
 8011df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8011df8:	4649      	mov	r1, r9
 8011dfa:	414b      	adcs	r3, r1
 8011dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dfe:	f04f 0200 	mov.w	r2, #0
 8011e02:	f04f 0300 	mov.w	r3, #0
 8011e06:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8011e0a:	4659      	mov	r1, fp
 8011e0c:	00cb      	lsls	r3, r1, #3
 8011e0e:	4651      	mov	r1, sl
 8011e10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e14:	4651      	mov	r1, sl
 8011e16:	00ca      	lsls	r2, r1, #3
 8011e18:	4610      	mov	r0, r2
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	4642      	mov	r2, r8
 8011e20:	189b      	adds	r3, r3, r2
 8011e22:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011e26:	464b      	mov	r3, r9
 8011e28:	460a      	mov	r2, r1
 8011e2a:	eb42 0303 	adc.w	r3, r2, r3
 8011e2e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8011e32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011e3e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8011e42:	f04f 0200 	mov.w	r2, #0
 8011e46:	f04f 0300 	mov.w	r3, #0
 8011e4a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8011e4e:	4649      	mov	r1, r9
 8011e50:	008b      	lsls	r3, r1, #2
 8011e52:	4641      	mov	r1, r8
 8011e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011e58:	4641      	mov	r1, r8
 8011e5a:	008a      	lsls	r2, r1, #2
 8011e5c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8011e60:	f7ee ff2a 	bl	8000cb8 <__aeabi_uldivmod>
 8011e64:	4602      	mov	r2, r0
 8011e66:	460b      	mov	r3, r1
 8011e68:	4b3b      	ldr	r3, [pc, #236]	; (8011f58 <UART_SetConfig+0x770>)
 8011e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8011e6e:	095b      	lsrs	r3, r3, #5
 8011e70:	2164      	movs	r1, #100	; 0x64
 8011e72:	fb01 f303 	mul.w	r3, r1, r3
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	011b      	lsls	r3, r3, #4
 8011e7a:	3332      	adds	r3, #50	; 0x32
 8011e7c:	4a36      	ldr	r2, [pc, #216]	; (8011f58 <UART_SetConfig+0x770>)
 8011e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8011e82:	095b      	lsrs	r3, r3, #5
 8011e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e88:	441c      	add	r4, r3
 8011e8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011e8e:	2200      	movs	r2, #0
 8011e90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011e94:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8011e98:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8011e9c:	4642      	mov	r2, r8
 8011e9e:	464b      	mov	r3, r9
 8011ea0:	1891      	adds	r1, r2, r2
 8011ea2:	6339      	str	r1, [r7, #48]	; 0x30
 8011ea4:	415b      	adcs	r3, r3
 8011ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8011ea8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011eac:	4641      	mov	r1, r8
 8011eae:	1851      	adds	r1, r2, r1
 8011eb0:	62b9      	str	r1, [r7, #40]	; 0x28
 8011eb2:	4649      	mov	r1, r9
 8011eb4:	414b      	adcs	r3, r1
 8011eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011eb8:	f04f 0200 	mov.w	r2, #0
 8011ebc:	f04f 0300 	mov.w	r3, #0
 8011ec0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8011ec4:	4659      	mov	r1, fp
 8011ec6:	00cb      	lsls	r3, r1, #3
 8011ec8:	4651      	mov	r1, sl
 8011eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011ece:	4651      	mov	r1, sl
 8011ed0:	00ca      	lsls	r2, r1, #3
 8011ed2:	4610      	mov	r0, r2
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	4642      	mov	r2, r8
 8011eda:	189b      	adds	r3, r3, r2
 8011edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011ee0:	464b      	mov	r3, r9
 8011ee2:	460a      	mov	r2, r1
 8011ee4:	eb42 0303 	adc.w	r3, r2, r3
 8011ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011eec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8011ef8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8011efc:	f04f 0200 	mov.w	r2, #0
 8011f00:	f04f 0300 	mov.w	r3, #0
 8011f04:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8011f08:	4649      	mov	r1, r9
 8011f0a:	008b      	lsls	r3, r1, #2
 8011f0c:	4641      	mov	r1, r8
 8011f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011f12:	4641      	mov	r1, r8
 8011f14:	008a      	lsls	r2, r1, #2
 8011f16:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8011f1a:	f7ee fecd 	bl	8000cb8 <__aeabi_uldivmod>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	4b0d      	ldr	r3, [pc, #52]	; (8011f58 <UART_SetConfig+0x770>)
 8011f24:	fba3 1302 	umull	r1, r3, r3, r2
 8011f28:	095b      	lsrs	r3, r3, #5
 8011f2a:	2164      	movs	r1, #100	; 0x64
 8011f2c:	fb01 f303 	mul.w	r3, r1, r3
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	011b      	lsls	r3, r3, #4
 8011f34:	3332      	adds	r3, #50	; 0x32
 8011f36:	4a08      	ldr	r2, [pc, #32]	; (8011f58 <UART_SetConfig+0x770>)
 8011f38:	fba2 2303 	umull	r2, r3, r2, r3
 8011f3c:	095b      	lsrs	r3, r3, #5
 8011f3e:	f003 020f 	and.w	r2, r3, #15
 8011f42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4422      	add	r2, r4
 8011f4a:	609a      	str	r2, [r3, #8]
 8011f4c:	e112      	b.n	8012174 <UART_SetConfig+0x98c>
 8011f4e:	bf00      	nop
 8011f50:	40011000 	.word	0x40011000
 8011f54:	40011400 	.word	0x40011400
 8011f58:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8011f5c:	f7fc f900 	bl	800e160 <HAL_RCC_GetPCLK1Freq>
 8011f60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011f64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8011f6e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8011f72:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8011f76:	4642      	mov	r2, r8
 8011f78:	464b      	mov	r3, r9
 8011f7a:	1891      	adds	r1, r2, r2
 8011f7c:	6239      	str	r1, [r7, #32]
 8011f7e:	415b      	adcs	r3, r3
 8011f80:	627b      	str	r3, [r7, #36]	; 0x24
 8011f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011f86:	4641      	mov	r1, r8
 8011f88:	1854      	adds	r4, r2, r1
 8011f8a:	4649      	mov	r1, r9
 8011f8c:	eb43 0501 	adc.w	r5, r3, r1
 8011f90:	f04f 0200 	mov.w	r2, #0
 8011f94:	f04f 0300 	mov.w	r3, #0
 8011f98:	00eb      	lsls	r3, r5, #3
 8011f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011f9e:	00e2      	lsls	r2, r4, #3
 8011fa0:	4614      	mov	r4, r2
 8011fa2:	461d      	mov	r5, r3
 8011fa4:	4643      	mov	r3, r8
 8011fa6:	18e3      	adds	r3, r4, r3
 8011fa8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8011fac:	464b      	mov	r3, r9
 8011fae:	eb45 0303 	adc.w	r3, r5, r3
 8011fb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011fb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8011fc2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8011fc6:	f04f 0200 	mov.w	r2, #0
 8011fca:	f04f 0300 	mov.w	r3, #0
 8011fce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	008b      	lsls	r3, r1, #2
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011fdc:	4621      	mov	r1, r4
 8011fde:	008a      	lsls	r2, r1, #2
 8011fe0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8011fe4:	f7ee fe68 	bl	8000cb8 <__aeabi_uldivmod>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4b64      	ldr	r3, [pc, #400]	; (8012180 <UART_SetConfig+0x998>)
 8011fee:	fba3 2302 	umull	r2, r3, r3, r2
 8011ff2:	095b      	lsrs	r3, r3, #5
 8011ff4:	011c      	lsls	r4, r3, #4
 8011ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012000:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8012004:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8012008:	4642      	mov	r2, r8
 801200a:	464b      	mov	r3, r9
 801200c:	1891      	adds	r1, r2, r2
 801200e:	61b9      	str	r1, [r7, #24]
 8012010:	415b      	adcs	r3, r3
 8012012:	61fb      	str	r3, [r7, #28]
 8012014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012018:	4641      	mov	r1, r8
 801201a:	1851      	adds	r1, r2, r1
 801201c:	6139      	str	r1, [r7, #16]
 801201e:	4649      	mov	r1, r9
 8012020:	414b      	adcs	r3, r1
 8012022:	617b      	str	r3, [r7, #20]
 8012024:	f04f 0200 	mov.w	r2, #0
 8012028:	f04f 0300 	mov.w	r3, #0
 801202c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012030:	4659      	mov	r1, fp
 8012032:	00cb      	lsls	r3, r1, #3
 8012034:	4651      	mov	r1, sl
 8012036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801203a:	4651      	mov	r1, sl
 801203c:	00ca      	lsls	r2, r1, #3
 801203e:	4610      	mov	r0, r2
 8012040:	4619      	mov	r1, r3
 8012042:	4603      	mov	r3, r0
 8012044:	4642      	mov	r2, r8
 8012046:	189b      	adds	r3, r3, r2
 8012048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801204c:	464b      	mov	r3, r9
 801204e:	460a      	mov	r2, r1
 8012050:	eb42 0303 	adc.w	r3, r2, r3
 8012054:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012058:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012064:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012068:	f04f 0200 	mov.w	r2, #0
 801206c:	f04f 0300 	mov.w	r3, #0
 8012070:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8012074:	4649      	mov	r1, r9
 8012076:	008b      	lsls	r3, r1, #2
 8012078:	4641      	mov	r1, r8
 801207a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801207e:	4641      	mov	r1, r8
 8012080:	008a      	lsls	r2, r1, #2
 8012082:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8012086:	f7ee fe17 	bl	8000cb8 <__aeabi_uldivmod>
 801208a:	4602      	mov	r2, r0
 801208c:	460b      	mov	r3, r1
 801208e:	4b3c      	ldr	r3, [pc, #240]	; (8012180 <UART_SetConfig+0x998>)
 8012090:	fba3 1302 	umull	r1, r3, r3, r2
 8012094:	095b      	lsrs	r3, r3, #5
 8012096:	2164      	movs	r1, #100	; 0x64
 8012098:	fb01 f303 	mul.w	r3, r1, r3
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	011b      	lsls	r3, r3, #4
 80120a0:	3332      	adds	r3, #50	; 0x32
 80120a2:	4a37      	ldr	r2, [pc, #220]	; (8012180 <UART_SetConfig+0x998>)
 80120a4:	fba2 2303 	umull	r2, r3, r2, r3
 80120a8:	095b      	lsrs	r3, r3, #5
 80120aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120ae:	441c      	add	r4, r3
 80120b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80120b4:	2200      	movs	r2, #0
 80120b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80120ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80120be:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80120c2:	4642      	mov	r2, r8
 80120c4:	464b      	mov	r3, r9
 80120c6:	1891      	adds	r1, r2, r2
 80120c8:	60b9      	str	r1, [r7, #8]
 80120ca:	415b      	adcs	r3, r3
 80120cc:	60fb      	str	r3, [r7, #12]
 80120ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80120d2:	4641      	mov	r1, r8
 80120d4:	1851      	adds	r1, r2, r1
 80120d6:	6039      	str	r1, [r7, #0]
 80120d8:	4649      	mov	r1, r9
 80120da:	414b      	adcs	r3, r1
 80120dc:	607b      	str	r3, [r7, #4]
 80120de:	f04f 0200 	mov.w	r2, #0
 80120e2:	f04f 0300 	mov.w	r3, #0
 80120e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80120ea:	4659      	mov	r1, fp
 80120ec:	00cb      	lsls	r3, r1, #3
 80120ee:	4651      	mov	r1, sl
 80120f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80120f4:	4651      	mov	r1, sl
 80120f6:	00ca      	lsls	r2, r1, #3
 80120f8:	4610      	mov	r0, r2
 80120fa:	4619      	mov	r1, r3
 80120fc:	4603      	mov	r3, r0
 80120fe:	4642      	mov	r2, r8
 8012100:	189b      	adds	r3, r3, r2
 8012102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012106:	464b      	mov	r3, r9
 8012108:	460a      	mov	r2, r1
 801210a:	eb42 0303 	adc.w	r3, r2, r3
 801210e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012112:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801211e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012122:	f04f 0200 	mov.w	r2, #0
 8012126:	f04f 0300 	mov.w	r3, #0
 801212a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 801212e:	4649      	mov	r1, r9
 8012130:	008b      	lsls	r3, r1, #2
 8012132:	4641      	mov	r1, r8
 8012134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012138:	4641      	mov	r1, r8
 801213a:	008a      	lsls	r2, r1, #2
 801213c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012140:	f7ee fdba 	bl	8000cb8 <__aeabi_uldivmod>
 8012144:	4602      	mov	r2, r0
 8012146:	460b      	mov	r3, r1
 8012148:	4b0d      	ldr	r3, [pc, #52]	; (8012180 <UART_SetConfig+0x998>)
 801214a:	fba3 1302 	umull	r1, r3, r3, r2
 801214e:	095b      	lsrs	r3, r3, #5
 8012150:	2164      	movs	r1, #100	; 0x64
 8012152:	fb01 f303 	mul.w	r3, r1, r3
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	011b      	lsls	r3, r3, #4
 801215a:	3332      	adds	r3, #50	; 0x32
 801215c:	4a08      	ldr	r2, [pc, #32]	; (8012180 <UART_SetConfig+0x998>)
 801215e:	fba2 2303 	umull	r2, r3, r2, r3
 8012162:	095b      	lsrs	r3, r3, #5
 8012164:	f003 020f 	and.w	r2, r3, #15
 8012168:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	4422      	add	r2, r4
 8012170:	609a      	str	r2, [r3, #8]
}
 8012172:	e7ff      	b.n	8012174 <UART_SetConfig+0x98c>
 8012174:	bf00      	nop
 8012176:	f507 7702 	add.w	r7, r7, #520	; 0x208
 801217a:	46bd      	mov	sp, r7
 801217c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012180:	51eb851f 	.word	0x51eb851f

08012184 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8012184:	b084      	sub	sp, #16
 8012186:	b480      	push	{r7}
 8012188:	b085      	sub	sp, #20
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
 801218e:	f107 001c 	add.w	r0, r7, #28
 8012192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801219a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801219c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801219e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80121a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80121a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80121a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80121a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80121a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80121aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80121ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80121ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80121b0:	68fa      	ldr	r2, [r7, #12]
 80121b2:	4313      	orrs	r3, r2
 80121b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80121be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	431a      	orrs	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3714      	adds	r7, #20
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	b004      	add	sp, #16
 80121d8:	4770      	bx	lr

080121da <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80121da:	b480      	push	{r7}
 80121dc:	b083      	sub	sp, #12
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012208:	2300      	movs	r3, #0
}
 801220a:	4618      	mov	r0, r3
 801220c:	370c      	adds	r7, #12
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr

08012216 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8012216:	b580      	push	{r7, lr}
 8012218:	b082      	sub	sp, #8
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2203      	movs	r2, #3
 8012222:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012224:	2002      	movs	r0, #2
 8012226:	f7f9 fe23 	bl	800be70 <HAL_Delay>
  
  return HAL_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8012234:	b480      	push	{r7}
 8012236:	b083      	sub	sp, #12
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f003 0303 	and.w	r3, r3, #3
}
 8012244:	4618      	mov	r0, r3
 8012246:	370c      	adds	r7, #12
 8012248:	46bd      	mov	sp, r7
 801224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224e:	4770      	bx	lr

08012250 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801226e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012274:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801227a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	4313      	orrs	r3, r2
 8012280:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801228a:	f023 030f 	bic.w	r3, r3, #15
 801228e:	68fa      	ldr	r2, [r7, #12]
 8012290:	431a      	orrs	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8012296:	2300      	movs	r3, #0
}
 8012298:	4618      	mov	r0, r3
 801229a:	3714      	adds	r7, #20
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	691b      	ldr	r3, [r3, #16]
 80122b0:	b2db      	uxtb	r3, r3
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	370c      	adds	r7, #12
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr

080122be <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80122be:	b480      	push	{r7}
 80122c0:	b085      	sub	sp, #20
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	3314      	adds	r3, #20
 80122cc:	461a      	mov	r2, r3
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	4413      	add	r3, r2
 80122d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	681b      	ldr	r3, [r3, #0]
}  
 80122d8:	4618      	mov	r0, r3
 80122da:	3714      	adds	r7, #20
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr

080122e4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	685a      	ldr	r2, [r3, #4]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801230a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012310:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012316:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012318:	68fa      	ldr	r2, [r7, #12]
 801231a:	4313      	orrs	r3, r2
 801231c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012322:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	431a      	orrs	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801232e:	2300      	movs	r3, #0

}
 8012330:	4618      	mov	r0, r3
 8012332:	3714      	adds	r7, #20
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b088      	sub	sp, #32
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801234a:	2310      	movs	r3, #16
 801234c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801234e:	2340      	movs	r3, #64	; 0x40
 8012350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012352:	2300      	movs	r3, #0
 8012354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801235a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801235c:	f107 0308 	add.w	r3, r7, #8
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff ff74 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8012368:	f241 3288 	movw	r2, #5000	; 0x1388
 801236c:	2110      	movs	r1, #16
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 fa40 	bl	80127f4 <SDMMC_GetCmdResp1>
 8012374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012376:	69fb      	ldr	r3, [r7, #28]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3720      	adds	r7, #32
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b088      	sub	sp, #32
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801238e:	2311      	movs	r3, #17
 8012390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012392:	2340      	movs	r3, #64	; 0x40
 8012394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012396:	2300      	movs	r3, #0
 8012398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801239a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801239e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80123a0:	f107 0308 	add.w	r3, r7, #8
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff ff52 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80123ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80123b0:	2111      	movs	r1, #17
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f000 fa1e 	bl	80127f4 <SDMMC_GetCmdResp1>
 80123b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ba:	69fb      	ldr	r3, [r7, #28]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3720      	adds	r7, #32
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b088      	sub	sp, #32
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80123d2:	2312      	movs	r3, #18
 80123d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80123d6:	2340      	movs	r3, #64	; 0x40
 80123d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80123da:	2300      	movs	r3, #0
 80123dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80123de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80123e4:	f107 0308 	add.w	r3, r7, #8
 80123e8:	4619      	mov	r1, r3
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7ff ff30 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80123f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80123f4:	2112      	movs	r1, #18
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 f9fc 	bl	80127f4 <SDMMC_GetCmdResp1>
 80123fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123fe:	69fb      	ldr	r3, [r7, #28]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3720      	adds	r7, #32
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b088      	sub	sp, #32
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012416:	2318      	movs	r3, #24
 8012418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801241a:	2340      	movs	r3, #64	; 0x40
 801241c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801241e:	2300      	movs	r3, #0
 8012420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012428:	f107 0308 	add.w	r3, r7, #8
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7ff ff0e 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012434:	f241 3288 	movw	r2, #5000	; 0x1388
 8012438:	2118      	movs	r1, #24
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 f9da 	bl	80127f4 <SDMMC_GetCmdResp1>
 8012440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012442:	69fb      	ldr	r3, [r7, #28]
}
 8012444:	4618      	mov	r0, r3
 8012446:	3720      	adds	r7, #32
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b088      	sub	sp, #32
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801245a:	2319      	movs	r3, #25
 801245c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801245e:	2340      	movs	r3, #64	; 0x40
 8012460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012462:	2300      	movs	r3, #0
 8012464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801246a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801246c:	f107 0308 	add.w	r3, r7, #8
 8012470:	4619      	mov	r1, r3
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f7ff feec 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012478:	f241 3288 	movw	r2, #5000	; 0x1388
 801247c:	2119      	movs	r1, #25
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 f9b8 	bl	80127f4 <SDMMC_GetCmdResp1>
 8012484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012486:	69fb      	ldr	r3, [r7, #28]
}
 8012488:	4618      	mov	r0, r3
 801248a:	3720      	adds	r7, #32
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b088      	sub	sp, #32
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012498:	2300      	movs	r3, #0
 801249a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801249c:	230c      	movs	r3, #12
 801249e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80124a0:	2340      	movs	r3, #64	; 0x40
 80124a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80124a4:	2300      	movs	r3, #0
 80124a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124ae:	f107 0308 	add.w	r3, r7, #8
 80124b2:	4619      	mov	r1, r3
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f7ff fecb 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80124ba:	4a05      	ldr	r2, [pc, #20]	; (80124d0 <SDMMC_CmdStopTransfer+0x40>)
 80124bc:	210c      	movs	r1, #12
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f000 f998 	bl	80127f4 <SDMMC_GetCmdResp1>
 80124c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124c6:	69fb      	ldr	r3, [r7, #28]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3720      	adds	r7, #32
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	05f5e100 	.word	0x05f5e100

080124d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b08a      	sub	sp, #40	; 0x28
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80124e4:	2307      	movs	r3, #7
 80124e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80124e8:	2340      	movs	r3, #64	; 0x40
 80124ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80124ec:	2300      	movs	r3, #0
 80124ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124f6:	f107 0310 	add.w	r3, r7, #16
 80124fa:	4619      	mov	r1, r3
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7ff fea7 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8012502:	f241 3288 	movw	r2, #5000	; 0x1388
 8012506:	2107      	movs	r1, #7
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f000 f973 	bl	80127f4 <SDMMC_GetCmdResp1>
 801250e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012512:	4618      	mov	r0, r3
 8012514:	3728      	adds	r7, #40	; 0x28
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b088      	sub	sp, #32
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8012522:	2300      	movs	r3, #0
 8012524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012526:	2300      	movs	r3, #0
 8012528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801252a:	2300      	movs	r3, #0
 801252c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801252e:	2300      	movs	r3, #0
 8012530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012536:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012538:	f107 0308 	add.w	r3, r7, #8
 801253c:	4619      	mov	r1, r3
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7ff fe86 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f000 f92d 	bl	80127a4 <SDMMC_GetCmdError>
 801254a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801254c:	69fb      	ldr	r3, [r7, #28]
}
 801254e:	4618      	mov	r0, r3
 8012550:	3720      	adds	r7, #32
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b088      	sub	sp, #32
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801255e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012564:	2308      	movs	r3, #8
 8012566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012568:	2340      	movs	r3, #64	; 0x40
 801256a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801256c:	2300      	movs	r3, #0
 801256e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012576:	f107 0308 	add.w	r3, r7, #8
 801257a:	4619      	mov	r1, r3
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7ff fe67 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 fb16 	bl	8012bb4 <SDMMC_GetCmdResp7>
 8012588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801258a:	69fb      	ldr	r3, [r7, #28]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3720      	adds	r7, #32
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b088      	sub	sp, #32
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80125a2:	2337      	movs	r3, #55	; 0x37
 80125a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80125a6:	2340      	movs	r3, #64	; 0x40
 80125a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125aa:	2300      	movs	r3, #0
 80125ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80125b4:	f107 0308 	add.w	r3, r7, #8
 80125b8:	4619      	mov	r1, r3
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f7ff fe48 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80125c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80125c4:	2137      	movs	r1, #55	; 0x37
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f000 f914 	bl	80127f4 <SDMMC_GetCmdResp1>
 80125cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125ce:	69fb      	ldr	r3, [r7, #28]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3720      	adds	r7, #32
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b088      	sub	sp, #32
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80125e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80125ee:	2329      	movs	r3, #41	; 0x29
 80125f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80125f2:	2340      	movs	r3, #64	; 0x40
 80125f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125f6:	2300      	movs	r3, #0
 80125f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012600:	f107 0308 	add.w	r3, r7, #8
 8012604:	4619      	mov	r1, r3
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7ff fe22 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 fa23 	bl	8012a58 <SDMMC_GetCmdResp3>
 8012612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012614:	69fb      	ldr	r3, [r7, #28]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3720      	adds	r7, #32
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b088      	sub	sp, #32
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801262c:	2306      	movs	r3, #6
 801262e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012630:	2340      	movs	r3, #64	; 0x40
 8012632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012634:	2300      	movs	r3, #0
 8012636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801263c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801263e:	f107 0308 	add.w	r3, r7, #8
 8012642:	4619      	mov	r1, r3
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff fe03 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801264a:	f241 3288 	movw	r2, #5000	; 0x1388
 801264e:	2106      	movs	r1, #6
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f000 f8cf 	bl	80127f4 <SDMMC_GetCmdResp1>
 8012656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012658:	69fb      	ldr	r3, [r7, #28]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3720      	adds	r7, #32
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}

08012662 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8012662:	b580      	push	{r7, lr}
 8012664:	b088      	sub	sp, #32
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801266a:	2300      	movs	r3, #0
 801266c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801266e:	2333      	movs	r3, #51	; 0x33
 8012670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012672:	2340      	movs	r3, #64	; 0x40
 8012674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012676:	2300      	movs	r3, #0
 8012678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801267a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801267e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012680:	f107 0308 	add.w	r3, r7, #8
 8012684:	4619      	mov	r1, r3
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ff fde2 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012690:	2133      	movs	r1, #51	; 0x33
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f000 f8ae 	bl	80127f4 <SDMMC_GetCmdResp1>
 8012698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801269a:	69fb      	ldr	r3, [r7, #28]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3720      	adds	r7, #32
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b088      	sub	sp, #32
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80126ac:	2300      	movs	r3, #0
 80126ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80126b0:	2302      	movs	r3, #2
 80126b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80126b4:	23c0      	movs	r3, #192	; 0xc0
 80126b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80126b8:	2300      	movs	r3, #0
 80126ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80126bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80126c2:	f107 0308 	add.w	r3, r7, #8
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7ff fdc1 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f97c 	bl	80129cc <SDMMC_GetCmdResp2>
 80126d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126d6:	69fb      	ldr	r3, [r7, #28]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3720      	adds	r7, #32
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b088      	sub	sp, #32
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80126ee:	2309      	movs	r3, #9
 80126f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80126f2:	23c0      	movs	r3, #192	; 0xc0
 80126f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80126f6:	2300      	movs	r3, #0
 80126f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80126fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012700:	f107 0308 	add.w	r3, r7, #8
 8012704:	4619      	mov	r1, r3
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff fda2 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 f95d 	bl	80129cc <SDMMC_GetCmdResp2>
 8012712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012714:	69fb      	ldr	r3, [r7, #28]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3720      	adds	r7, #32
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b088      	sub	sp, #32
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012728:	2300      	movs	r3, #0
 801272a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801272c:	2303      	movs	r3, #3
 801272e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012730:	2340      	movs	r3, #64	; 0x40
 8012732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012734:	2300      	movs	r3, #0
 8012736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801273c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801273e:	f107 0308 	add.w	r3, r7, #8
 8012742:	4619      	mov	r1, r3
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f7ff fd83 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801274a:	683a      	ldr	r2, [r7, #0]
 801274c:	2103      	movs	r1, #3
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 f9bc 	bl	8012acc <SDMMC_GetCmdResp6>
 8012754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012756:	69fb      	ldr	r3, [r7, #28]
}
 8012758:	4618      	mov	r0, r3
 801275a:	3720      	adds	r7, #32
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b088      	sub	sp, #32
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801276e:	230d      	movs	r3, #13
 8012770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012772:	2340      	movs	r3, #64	; 0x40
 8012774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012776:	2300      	movs	r3, #0
 8012778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801277a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801277e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012780:	f107 0308 	add.w	r3, r7, #8
 8012784:	4619      	mov	r1, r3
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7ff fd62 	bl	8012250 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012790:	210d      	movs	r1, #13
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 f82e 	bl	80127f4 <SDMMC_GetCmdResp1>
 8012798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801279a:	69fb      	ldr	r3, [r7, #28]
}
 801279c:	4618      	mov	r0, r3
 801279e:	3720      	adds	r7, #32
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80127a4:	b490      	push	{r4, r7}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80127ac:	4b0f      	ldr	r3, [pc, #60]	; (80127ec <SDMMC_GetCmdError+0x48>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4a0f      	ldr	r2, [pc, #60]	; (80127f0 <SDMMC_GetCmdError+0x4c>)
 80127b2:	fba2 2303 	umull	r2, r3, r2, r3
 80127b6:	0a5b      	lsrs	r3, r3, #9
 80127b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80127c0:	4623      	mov	r3, r4
 80127c2:	1e5c      	subs	r4, r3, #1
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d102      	bne.n	80127ce <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127cc:	e009      	b.n	80127e2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d0f2      	beq.n	80127c0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	22c5      	movs	r2, #197	; 0xc5
 80127de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bc90      	pop	{r4, r7}
 80127ea:	4770      	bx	lr
 80127ec:	20000000 	.word	0x20000000
 80127f0:	10624dd3 	.word	0x10624dd3

080127f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80127f4:	b590      	push	{r4, r7, lr}
 80127f6:	b087      	sub	sp, #28
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	460b      	mov	r3, r1
 80127fe:	607a      	str	r2, [r7, #4]
 8012800:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012802:	4b6f      	ldr	r3, [pc, #444]	; (80129c0 <SDMMC_GetCmdResp1+0x1cc>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4a6f      	ldr	r2, [pc, #444]	; (80129c4 <SDMMC_GetCmdResp1+0x1d0>)
 8012808:	fba2 2303 	umull	r2, r3, r2, r3
 801280c:	0a5b      	lsrs	r3, r3, #9
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012814:	4623      	mov	r3, r4
 8012816:	1e5c      	subs	r4, r3, #1
 8012818:	2b00      	cmp	r3, #0
 801281a:	d102      	bne.n	8012822 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801281c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012820:	e0c9      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012826:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801282e:	2b00      	cmp	r3, #0
 8012830:	d0f0      	beq.n	8012814 <SDMMC_GetCmdResp1+0x20>
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1eb      	bne.n	8012814 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012840:	f003 0304 	and.w	r3, r3, #4
 8012844:	2b00      	cmp	r3, #0
 8012846:	d004      	beq.n	8012852 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2204      	movs	r2, #4
 801284c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801284e:	2304      	movs	r3, #4
 8012850:	e0b1      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012856:	f003 0301 	and.w	r3, r3, #1
 801285a:	2b00      	cmp	r3, #0
 801285c:	d004      	beq.n	8012868 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2201      	movs	r2, #1
 8012862:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012864:	2301      	movs	r3, #1
 8012866:	e0a6      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	22c5      	movs	r2, #197	; 0xc5
 801286c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f7ff fd18 	bl	80122a4 <SDIO_GetCommandResponse>
 8012874:	4603      	mov	r3, r0
 8012876:	461a      	mov	r2, r3
 8012878:	7afb      	ldrb	r3, [r7, #11]
 801287a:	4293      	cmp	r3, r2
 801287c:	d001      	beq.n	8012882 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801287e:	2301      	movs	r3, #1
 8012880:	e099      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012882:	2100      	movs	r1, #0
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f7ff fd1a 	bl	80122be <SDIO_GetResponse>
 801288a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801288c:	693a      	ldr	r2, [r7, #16]
 801288e:	4b4e      	ldr	r3, [pc, #312]	; (80129c8 <SDMMC_GetCmdResp1+0x1d4>)
 8012890:	4013      	ands	r3, r2
 8012892:	2b00      	cmp	r3, #0
 8012894:	d101      	bne.n	801289a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8012896:	2300      	movs	r3, #0
 8012898:	e08d      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	2b00      	cmp	r3, #0
 801289e:	da02      	bge.n	80128a6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80128a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80128a4:	e087      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80128b0:	2340      	movs	r3, #64	; 0x40
 80128b2:	e080      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d001      	beq.n	80128c2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80128be:	2380      	movs	r3, #128	; 0x80
 80128c0:	e079      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d002      	beq.n	80128d2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80128cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128d0:	e071      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d002      	beq.n	80128e2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80128dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80128e0:	e069      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d002      	beq.n	80128f2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80128ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128f0:	e061      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d002      	beq.n	8012902 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80128fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012900:	e059      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012908:	2b00      	cmp	r3, #0
 801290a:	d002      	beq.n	8012912 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012910:	e051      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012918:	2b00      	cmp	r3, #0
 801291a:	d002      	beq.n	8012922 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801291c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012920:	e049      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012928:	2b00      	cmp	r3, #0
 801292a:	d002      	beq.n	8012932 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801292c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012930:	e041      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012938:	2b00      	cmp	r3, #0
 801293a:	d002      	beq.n	8012942 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801293c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012940:	e039      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012948:	2b00      	cmp	r3, #0
 801294a:	d002      	beq.n	8012952 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801294c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012950:	e031      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012958:	2b00      	cmp	r3, #0
 801295a:	d002      	beq.n	8012962 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801295c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012960:	e029      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012968:	2b00      	cmp	r3, #0
 801296a:	d002      	beq.n	8012972 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801296c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012970:	e021      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012978:	2b00      	cmp	r3, #0
 801297a:	d002      	beq.n	8012982 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801297c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012980:	e019      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d002      	beq.n	8012992 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801298c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012990:	e011      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012998:	2b00      	cmp	r3, #0
 801299a:	d002      	beq.n	80129a2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801299c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80129a0:	e009      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	f003 0308 	and.w	r3, r3, #8
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d002      	beq.n	80129b2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80129ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80129b0:	e001      	b.n	80129b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80129b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	371c      	adds	r7, #28
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd90      	pop	{r4, r7, pc}
 80129be:	bf00      	nop
 80129c0:	20000000 	.word	0x20000000
 80129c4:	10624dd3 	.word	0x10624dd3
 80129c8:	fdffe008 	.word	0xfdffe008

080129cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80129cc:	b490      	push	{r4, r7}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80129d4:	4b1e      	ldr	r3, [pc, #120]	; (8012a50 <SDMMC_GetCmdResp2+0x84>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4a1e      	ldr	r2, [pc, #120]	; (8012a54 <SDMMC_GetCmdResp2+0x88>)
 80129da:	fba2 2303 	umull	r2, r3, r2, r3
 80129de:	0a5b      	lsrs	r3, r3, #9
 80129e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80129e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80129e8:	4623      	mov	r3, r4
 80129ea:	1e5c      	subs	r4, r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d102      	bne.n	80129f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129f4:	e026      	b.n	8012a44 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d0f0      	beq.n	80129e8 <SDMMC_GetCmdResp2+0x1c>
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d1eb      	bne.n	80129e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a14:	f003 0304 	and.w	r3, r3, #4
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d004      	beq.n	8012a26 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2204      	movs	r2, #4
 8012a20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a22:	2304      	movs	r3, #4
 8012a24:	e00e      	b.n	8012a44 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d004      	beq.n	8012a3c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2201      	movs	r2, #1
 8012a36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a38:	2301      	movs	r3, #1
 8012a3a:	e003      	b.n	8012a44 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	22c5      	movs	r2, #197	; 0xc5
 8012a40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a42:	2300      	movs	r3, #0
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bc90      	pop	{r4, r7}
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	20000000 	.word	0x20000000
 8012a54:	10624dd3 	.word	0x10624dd3

08012a58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8012a58:	b490      	push	{r4, r7}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012a60:	4b18      	ldr	r3, [pc, #96]	; (8012ac4 <SDMMC_GetCmdResp3+0x6c>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a18      	ldr	r2, [pc, #96]	; (8012ac8 <SDMMC_GetCmdResp3+0x70>)
 8012a66:	fba2 2303 	umull	r2, r3, r2, r3
 8012a6a:	0a5b      	lsrs	r3, r3, #9
 8012a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012a74:	4623      	mov	r3, r4
 8012a76:	1e5c      	subs	r4, r3, #1
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d102      	bne.n	8012a82 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a80:	e01b      	b.n	8012aba <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d0f0      	beq.n	8012a74 <SDMMC_GetCmdResp3+0x1c>
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1eb      	bne.n	8012a74 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aa0:	f003 0304 	and.w	r3, r3, #4
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d004      	beq.n	8012ab2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2204      	movs	r2, #4
 8012aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012aae:	2304      	movs	r3, #4
 8012ab0:	e003      	b.n	8012aba <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	22c5      	movs	r2, #197	; 0xc5
 8012ab6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bc90      	pop	{r4, r7}
 8012ac2:	4770      	bx	lr
 8012ac4:	20000000 	.word	0x20000000
 8012ac8:	10624dd3 	.word	0x10624dd3

08012acc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012acc:	b590      	push	{r4, r7, lr}
 8012ace:	b087      	sub	sp, #28
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	607a      	str	r2, [r7, #4]
 8012ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012ada:	4b34      	ldr	r3, [pc, #208]	; (8012bac <SDMMC_GetCmdResp6+0xe0>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	4a34      	ldr	r2, [pc, #208]	; (8012bb0 <SDMMC_GetCmdResp6+0xe4>)
 8012ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8012ae4:	0a5b      	lsrs	r3, r3, #9
 8012ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012aea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012aee:	4623      	mov	r3, r4
 8012af0:	1e5c      	subs	r4, r3, #1
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d102      	bne.n	8012afc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012af6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012afa:	e052      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b00:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d0f0      	beq.n	8012aee <SDMMC_GetCmdResp6+0x22>
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d1eb      	bne.n	8012aee <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b1a:	f003 0304 	and.w	r3, r3, #4
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d004      	beq.n	8012b2c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2204      	movs	r2, #4
 8012b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b28:	2304      	movs	r3, #4
 8012b2a:	e03a      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b30:	f003 0301 	and.w	r3, r3, #1
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d004      	beq.n	8012b42 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b3e:	2301      	movs	r3, #1
 8012b40:	e02f      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	f7ff fbae 	bl	80122a4 <SDIO_GetCommandResponse>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	7afb      	ldrb	r3, [r7, #11]
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d001      	beq.n	8012b56 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b52:	2301      	movs	r3, #1
 8012b54:	e025      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	22c5      	movs	r2, #197	; 0xc5
 8012b5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	68f8      	ldr	r0, [r7, #12]
 8012b60:	f7ff fbad 	bl	80122be <SDIO_GetResponse>
 8012b64:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d106      	bne.n	8012b7e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	0c1b      	lsrs	r3, r3, #16
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	e011      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d002      	beq.n	8012b8e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012b8c:	e009      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d002      	beq.n	8012b9e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b9c:	e001      	b.n	8012ba2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	371c      	adds	r7, #28
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd90      	pop	{r4, r7, pc}
 8012baa:	bf00      	nop
 8012bac:	20000000 	.word	0x20000000
 8012bb0:	10624dd3 	.word	0x10624dd3

08012bb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012bb4:	b490      	push	{r4, r7}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012bbc:	4b21      	ldr	r3, [pc, #132]	; (8012c44 <SDMMC_GetCmdResp7+0x90>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4a21      	ldr	r2, [pc, #132]	; (8012c48 <SDMMC_GetCmdResp7+0x94>)
 8012bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8012bc6:	0a5b      	lsrs	r3, r3, #9
 8012bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bcc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012bd0:	4623      	mov	r3, r4
 8012bd2:	1e5c      	subs	r4, r3, #1
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d102      	bne.n	8012bde <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bdc:	e02c      	b.n	8012c38 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012be2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d0f0      	beq.n	8012bd0 <SDMMC_GetCmdResp7+0x1c>
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1eb      	bne.n	8012bd0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bfc:	f003 0304 	and.w	r3, r3, #4
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d004      	beq.n	8012c0e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2204      	movs	r2, #4
 8012c08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c0a:	2304      	movs	r3, #4
 8012c0c:	e014      	b.n	8012c38 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c12:	f003 0301 	and.w	r3, r3, #1
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d004      	beq.n	8012c24 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c20:	2301      	movs	r3, #1
 8012c22:	e009      	b.n	8012c38 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d002      	beq.n	8012c36 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2240      	movs	r2, #64	; 0x40
 8012c34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012c36:	2300      	movs	r3, #0
  
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3710      	adds	r7, #16
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bc90      	pop	{r4, r7}
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop
 8012c44:	20000000 	.word	0x20000000
 8012c48:	10624dd3 	.word	0x10624dd3

08012c4c <main>:




int main(void)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	af00      	add	r7, sp, #0
  hwInit();
 8012c50:	f7f5 f87a 	bl	8007d48 <hwInit>
  apInit();
 8012c54:	f7ee f9e8 	bl	8001028 <apInit>

  apMain();
 8012c58:	f7ee f9f4 	bl	8001044 <apMain>

  return 0;
 8012c5c:	2300      	movs	r3, #0
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	bd80      	pop	{r7, pc}
	...

08012c64 <__errno>:
 8012c64:	4b01      	ldr	r3, [pc, #4]	; (8012c6c <__errno+0x8>)
 8012c66:	6818      	ldr	r0, [r3, #0]
 8012c68:	4770      	bx	lr
 8012c6a:	bf00      	nop
 8012c6c:	200000c8 	.word	0x200000c8

08012c70 <__libc_init_array>:
 8012c70:	b570      	push	{r4, r5, r6, lr}
 8012c72:	4d0d      	ldr	r5, [pc, #52]	; (8012ca8 <__libc_init_array+0x38>)
 8012c74:	4c0d      	ldr	r4, [pc, #52]	; (8012cac <__libc_init_array+0x3c>)
 8012c76:	1b64      	subs	r4, r4, r5
 8012c78:	10a4      	asrs	r4, r4, #2
 8012c7a:	2600      	movs	r6, #0
 8012c7c:	42a6      	cmp	r6, r4
 8012c7e:	d109      	bne.n	8012c94 <__libc_init_array+0x24>
 8012c80:	4d0b      	ldr	r5, [pc, #44]	; (8012cb0 <__libc_init_array+0x40>)
 8012c82:	4c0c      	ldr	r4, [pc, #48]	; (8012cb4 <__libc_init_array+0x44>)
 8012c84:	f004 fb1c 	bl	80172c0 <_init>
 8012c88:	1b64      	subs	r4, r4, r5
 8012c8a:	10a4      	asrs	r4, r4, #2
 8012c8c:	2600      	movs	r6, #0
 8012c8e:	42a6      	cmp	r6, r4
 8012c90:	d105      	bne.n	8012c9e <__libc_init_array+0x2e>
 8012c92:	bd70      	pop	{r4, r5, r6, pc}
 8012c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c98:	4798      	blx	r3
 8012c9a:	3601      	adds	r6, #1
 8012c9c:	e7ee      	b.n	8012c7c <__libc_init_array+0xc>
 8012c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ca2:	4798      	blx	r3
 8012ca4:	3601      	adds	r6, #1
 8012ca6:	e7f2      	b.n	8012c8e <__libc_init_array+0x1e>
 8012ca8:	08025b1c 	.word	0x08025b1c
 8012cac:	08025b1c 	.word	0x08025b1c
 8012cb0:	08025b1c 	.word	0x08025b1c
 8012cb4:	08025b20 	.word	0x08025b20

08012cb8 <malloc>:
 8012cb8:	4b02      	ldr	r3, [pc, #8]	; (8012cc4 <malloc+0xc>)
 8012cba:	4601      	mov	r1, r0
 8012cbc:	6818      	ldr	r0, [r3, #0]
 8012cbe:	f000 b88d 	b.w	8012ddc <_malloc_r>
 8012cc2:	bf00      	nop
 8012cc4:	200000c8 	.word	0x200000c8

08012cc8 <free>:
 8012cc8:	4b02      	ldr	r3, [pc, #8]	; (8012cd4 <free+0xc>)
 8012cca:	4601      	mov	r1, r0
 8012ccc:	6818      	ldr	r0, [r3, #0]
 8012cce:	f000 b819 	b.w	8012d04 <_free_r>
 8012cd2:	bf00      	nop
 8012cd4:	200000c8 	.word	0x200000c8

08012cd8 <memcpy>:
 8012cd8:	440a      	add	r2, r1
 8012cda:	4291      	cmp	r1, r2
 8012cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ce0:	d100      	bne.n	8012ce4 <memcpy+0xc>
 8012ce2:	4770      	bx	lr
 8012ce4:	b510      	push	{r4, lr}
 8012ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012cee:	4291      	cmp	r1, r2
 8012cf0:	d1f9      	bne.n	8012ce6 <memcpy+0xe>
 8012cf2:	bd10      	pop	{r4, pc}

08012cf4 <memset>:
 8012cf4:	4402      	add	r2, r0
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d100      	bne.n	8012cfe <memset+0xa>
 8012cfc:	4770      	bx	lr
 8012cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8012d02:	e7f9      	b.n	8012cf8 <memset+0x4>

08012d04 <_free_r>:
 8012d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d06:	2900      	cmp	r1, #0
 8012d08:	d044      	beq.n	8012d94 <_free_r+0x90>
 8012d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d0e:	9001      	str	r0, [sp, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f1a1 0404 	sub.w	r4, r1, #4
 8012d16:	bfb8      	it	lt
 8012d18:	18e4      	addlt	r4, r4, r3
 8012d1a:	f003 f993 	bl	8016044 <__malloc_lock>
 8012d1e:	4a1e      	ldr	r2, [pc, #120]	; (8012d98 <_free_r+0x94>)
 8012d20:	9801      	ldr	r0, [sp, #4]
 8012d22:	6813      	ldr	r3, [r2, #0]
 8012d24:	b933      	cbnz	r3, 8012d34 <_free_r+0x30>
 8012d26:	6063      	str	r3, [r4, #4]
 8012d28:	6014      	str	r4, [r2, #0]
 8012d2a:	b003      	add	sp, #12
 8012d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d30:	f003 b98e 	b.w	8016050 <__malloc_unlock>
 8012d34:	42a3      	cmp	r3, r4
 8012d36:	d908      	bls.n	8012d4a <_free_r+0x46>
 8012d38:	6825      	ldr	r5, [r4, #0]
 8012d3a:	1961      	adds	r1, r4, r5
 8012d3c:	428b      	cmp	r3, r1
 8012d3e:	bf01      	itttt	eq
 8012d40:	6819      	ldreq	r1, [r3, #0]
 8012d42:	685b      	ldreq	r3, [r3, #4]
 8012d44:	1949      	addeq	r1, r1, r5
 8012d46:	6021      	streq	r1, [r4, #0]
 8012d48:	e7ed      	b.n	8012d26 <_free_r+0x22>
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	b10b      	cbz	r3, 8012d54 <_free_r+0x50>
 8012d50:	42a3      	cmp	r3, r4
 8012d52:	d9fa      	bls.n	8012d4a <_free_r+0x46>
 8012d54:	6811      	ldr	r1, [r2, #0]
 8012d56:	1855      	adds	r5, r2, r1
 8012d58:	42a5      	cmp	r5, r4
 8012d5a:	d10b      	bne.n	8012d74 <_free_r+0x70>
 8012d5c:	6824      	ldr	r4, [r4, #0]
 8012d5e:	4421      	add	r1, r4
 8012d60:	1854      	adds	r4, r2, r1
 8012d62:	42a3      	cmp	r3, r4
 8012d64:	6011      	str	r1, [r2, #0]
 8012d66:	d1e0      	bne.n	8012d2a <_free_r+0x26>
 8012d68:	681c      	ldr	r4, [r3, #0]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	6053      	str	r3, [r2, #4]
 8012d6e:	4421      	add	r1, r4
 8012d70:	6011      	str	r1, [r2, #0]
 8012d72:	e7da      	b.n	8012d2a <_free_r+0x26>
 8012d74:	d902      	bls.n	8012d7c <_free_r+0x78>
 8012d76:	230c      	movs	r3, #12
 8012d78:	6003      	str	r3, [r0, #0]
 8012d7a:	e7d6      	b.n	8012d2a <_free_r+0x26>
 8012d7c:	6825      	ldr	r5, [r4, #0]
 8012d7e:	1961      	adds	r1, r4, r5
 8012d80:	428b      	cmp	r3, r1
 8012d82:	bf04      	itt	eq
 8012d84:	6819      	ldreq	r1, [r3, #0]
 8012d86:	685b      	ldreq	r3, [r3, #4]
 8012d88:	6063      	str	r3, [r4, #4]
 8012d8a:	bf04      	itt	eq
 8012d8c:	1949      	addeq	r1, r1, r5
 8012d8e:	6021      	streq	r1, [r4, #0]
 8012d90:	6054      	str	r4, [r2, #4]
 8012d92:	e7ca      	b.n	8012d2a <_free_r+0x26>
 8012d94:	b003      	add	sp, #12
 8012d96:	bd30      	pop	{r4, r5, pc}
 8012d98:	2000d064 	.word	0x2000d064

08012d9c <sbrk_aligned>:
 8012d9c:	b570      	push	{r4, r5, r6, lr}
 8012d9e:	4e0e      	ldr	r6, [pc, #56]	; (8012dd8 <sbrk_aligned+0x3c>)
 8012da0:	460c      	mov	r4, r1
 8012da2:	6831      	ldr	r1, [r6, #0]
 8012da4:	4605      	mov	r5, r0
 8012da6:	b911      	cbnz	r1, 8012dae <sbrk_aligned+0x12>
 8012da8:	f000 fcf6 	bl	8013798 <_sbrk_r>
 8012dac:	6030      	str	r0, [r6, #0]
 8012dae:	4621      	mov	r1, r4
 8012db0:	4628      	mov	r0, r5
 8012db2:	f000 fcf1 	bl	8013798 <_sbrk_r>
 8012db6:	1c43      	adds	r3, r0, #1
 8012db8:	d00a      	beq.n	8012dd0 <sbrk_aligned+0x34>
 8012dba:	1cc4      	adds	r4, r0, #3
 8012dbc:	f024 0403 	bic.w	r4, r4, #3
 8012dc0:	42a0      	cmp	r0, r4
 8012dc2:	d007      	beq.n	8012dd4 <sbrk_aligned+0x38>
 8012dc4:	1a21      	subs	r1, r4, r0
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	f000 fce6 	bl	8013798 <_sbrk_r>
 8012dcc:	3001      	adds	r0, #1
 8012dce:	d101      	bne.n	8012dd4 <sbrk_aligned+0x38>
 8012dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	2000d068 	.word	0x2000d068

08012ddc <_malloc_r>:
 8012ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de0:	1ccd      	adds	r5, r1, #3
 8012de2:	f025 0503 	bic.w	r5, r5, #3
 8012de6:	3508      	adds	r5, #8
 8012de8:	2d0c      	cmp	r5, #12
 8012dea:	bf38      	it	cc
 8012dec:	250c      	movcc	r5, #12
 8012dee:	2d00      	cmp	r5, #0
 8012df0:	4607      	mov	r7, r0
 8012df2:	db01      	blt.n	8012df8 <_malloc_r+0x1c>
 8012df4:	42a9      	cmp	r1, r5
 8012df6:	d905      	bls.n	8012e04 <_malloc_r+0x28>
 8012df8:	230c      	movs	r3, #12
 8012dfa:	603b      	str	r3, [r7, #0]
 8012dfc:	2600      	movs	r6, #0
 8012dfe:	4630      	mov	r0, r6
 8012e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e04:	4e2e      	ldr	r6, [pc, #184]	; (8012ec0 <_malloc_r+0xe4>)
 8012e06:	f003 f91d 	bl	8016044 <__malloc_lock>
 8012e0a:	6833      	ldr	r3, [r6, #0]
 8012e0c:	461c      	mov	r4, r3
 8012e0e:	bb34      	cbnz	r4, 8012e5e <_malloc_r+0x82>
 8012e10:	4629      	mov	r1, r5
 8012e12:	4638      	mov	r0, r7
 8012e14:	f7ff ffc2 	bl	8012d9c <sbrk_aligned>
 8012e18:	1c43      	adds	r3, r0, #1
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	d14d      	bne.n	8012eba <_malloc_r+0xde>
 8012e1e:	6834      	ldr	r4, [r6, #0]
 8012e20:	4626      	mov	r6, r4
 8012e22:	2e00      	cmp	r6, #0
 8012e24:	d140      	bne.n	8012ea8 <_malloc_r+0xcc>
 8012e26:	6823      	ldr	r3, [r4, #0]
 8012e28:	4631      	mov	r1, r6
 8012e2a:	4638      	mov	r0, r7
 8012e2c:	eb04 0803 	add.w	r8, r4, r3
 8012e30:	f000 fcb2 	bl	8013798 <_sbrk_r>
 8012e34:	4580      	cmp	r8, r0
 8012e36:	d13a      	bne.n	8012eae <_malloc_r+0xd2>
 8012e38:	6821      	ldr	r1, [r4, #0]
 8012e3a:	3503      	adds	r5, #3
 8012e3c:	1a6d      	subs	r5, r5, r1
 8012e3e:	f025 0503 	bic.w	r5, r5, #3
 8012e42:	3508      	adds	r5, #8
 8012e44:	2d0c      	cmp	r5, #12
 8012e46:	bf38      	it	cc
 8012e48:	250c      	movcc	r5, #12
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	4638      	mov	r0, r7
 8012e4e:	f7ff ffa5 	bl	8012d9c <sbrk_aligned>
 8012e52:	3001      	adds	r0, #1
 8012e54:	d02b      	beq.n	8012eae <_malloc_r+0xd2>
 8012e56:	6823      	ldr	r3, [r4, #0]
 8012e58:	442b      	add	r3, r5
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	e00e      	b.n	8012e7c <_malloc_r+0xa0>
 8012e5e:	6822      	ldr	r2, [r4, #0]
 8012e60:	1b52      	subs	r2, r2, r5
 8012e62:	d41e      	bmi.n	8012ea2 <_malloc_r+0xc6>
 8012e64:	2a0b      	cmp	r2, #11
 8012e66:	d916      	bls.n	8012e96 <_malloc_r+0xba>
 8012e68:	1961      	adds	r1, r4, r5
 8012e6a:	42a3      	cmp	r3, r4
 8012e6c:	6025      	str	r5, [r4, #0]
 8012e6e:	bf18      	it	ne
 8012e70:	6059      	strne	r1, [r3, #4]
 8012e72:	6863      	ldr	r3, [r4, #4]
 8012e74:	bf08      	it	eq
 8012e76:	6031      	streq	r1, [r6, #0]
 8012e78:	5162      	str	r2, [r4, r5]
 8012e7a:	604b      	str	r3, [r1, #4]
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f104 060b 	add.w	r6, r4, #11
 8012e82:	f003 f8e5 	bl	8016050 <__malloc_unlock>
 8012e86:	f026 0607 	bic.w	r6, r6, #7
 8012e8a:	1d23      	adds	r3, r4, #4
 8012e8c:	1af2      	subs	r2, r6, r3
 8012e8e:	d0b6      	beq.n	8012dfe <_malloc_r+0x22>
 8012e90:	1b9b      	subs	r3, r3, r6
 8012e92:	50a3      	str	r3, [r4, r2]
 8012e94:	e7b3      	b.n	8012dfe <_malloc_r+0x22>
 8012e96:	6862      	ldr	r2, [r4, #4]
 8012e98:	42a3      	cmp	r3, r4
 8012e9a:	bf0c      	ite	eq
 8012e9c:	6032      	streq	r2, [r6, #0]
 8012e9e:	605a      	strne	r2, [r3, #4]
 8012ea0:	e7ec      	b.n	8012e7c <_malloc_r+0xa0>
 8012ea2:	4623      	mov	r3, r4
 8012ea4:	6864      	ldr	r4, [r4, #4]
 8012ea6:	e7b2      	b.n	8012e0e <_malloc_r+0x32>
 8012ea8:	4634      	mov	r4, r6
 8012eaa:	6876      	ldr	r6, [r6, #4]
 8012eac:	e7b9      	b.n	8012e22 <_malloc_r+0x46>
 8012eae:	230c      	movs	r3, #12
 8012eb0:	603b      	str	r3, [r7, #0]
 8012eb2:	4638      	mov	r0, r7
 8012eb4:	f003 f8cc 	bl	8016050 <__malloc_unlock>
 8012eb8:	e7a1      	b.n	8012dfe <_malloc_r+0x22>
 8012eba:	6025      	str	r5, [r4, #0]
 8012ebc:	e7de      	b.n	8012e7c <_malloc_r+0xa0>
 8012ebe:	bf00      	nop
 8012ec0:	2000d064 	.word	0x2000d064

08012ec4 <__cvt>:
 8012ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ec8:	ec55 4b10 	vmov	r4, r5, d0
 8012ecc:	2d00      	cmp	r5, #0
 8012ece:	460e      	mov	r6, r1
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	462b      	mov	r3, r5
 8012ed4:	bfbb      	ittet	lt
 8012ed6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012eda:	461d      	movlt	r5, r3
 8012edc:	2300      	movge	r3, #0
 8012ede:	232d      	movlt	r3, #45	; 0x2d
 8012ee0:	700b      	strb	r3, [r1, #0]
 8012ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ee4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012ee8:	4691      	mov	r9, r2
 8012eea:	f023 0820 	bic.w	r8, r3, #32
 8012eee:	bfbc      	itt	lt
 8012ef0:	4622      	movlt	r2, r4
 8012ef2:	4614      	movlt	r4, r2
 8012ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012ef8:	d005      	beq.n	8012f06 <__cvt+0x42>
 8012efa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012efe:	d100      	bne.n	8012f02 <__cvt+0x3e>
 8012f00:	3601      	adds	r6, #1
 8012f02:	2102      	movs	r1, #2
 8012f04:	e000      	b.n	8012f08 <__cvt+0x44>
 8012f06:	2103      	movs	r1, #3
 8012f08:	ab03      	add	r3, sp, #12
 8012f0a:	9301      	str	r3, [sp, #4]
 8012f0c:	ab02      	add	r3, sp, #8
 8012f0e:	9300      	str	r3, [sp, #0]
 8012f10:	ec45 4b10 	vmov	d0, r4, r5
 8012f14:	4653      	mov	r3, sl
 8012f16:	4632      	mov	r2, r6
 8012f18:	f001 fd02 	bl	8014920 <_dtoa_r>
 8012f1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012f20:	4607      	mov	r7, r0
 8012f22:	d102      	bne.n	8012f2a <__cvt+0x66>
 8012f24:	f019 0f01 	tst.w	r9, #1
 8012f28:	d022      	beq.n	8012f70 <__cvt+0xac>
 8012f2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f2e:	eb07 0906 	add.w	r9, r7, r6
 8012f32:	d110      	bne.n	8012f56 <__cvt+0x92>
 8012f34:	783b      	ldrb	r3, [r7, #0]
 8012f36:	2b30      	cmp	r3, #48	; 0x30
 8012f38:	d10a      	bne.n	8012f50 <__cvt+0x8c>
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4629      	mov	r1, r5
 8012f42:	f7ed fdd9 	bl	8000af8 <__aeabi_dcmpeq>
 8012f46:	b918      	cbnz	r0, 8012f50 <__cvt+0x8c>
 8012f48:	f1c6 0601 	rsb	r6, r6, #1
 8012f4c:	f8ca 6000 	str.w	r6, [sl]
 8012f50:	f8da 3000 	ldr.w	r3, [sl]
 8012f54:	4499      	add	r9, r3
 8012f56:	2200      	movs	r2, #0
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	f7ed fdcb 	bl	8000af8 <__aeabi_dcmpeq>
 8012f62:	b108      	cbz	r0, 8012f68 <__cvt+0xa4>
 8012f64:	f8cd 900c 	str.w	r9, [sp, #12]
 8012f68:	2230      	movs	r2, #48	; 0x30
 8012f6a:	9b03      	ldr	r3, [sp, #12]
 8012f6c:	454b      	cmp	r3, r9
 8012f6e:	d307      	bcc.n	8012f80 <__cvt+0xbc>
 8012f70:	9b03      	ldr	r3, [sp, #12]
 8012f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f74:	1bdb      	subs	r3, r3, r7
 8012f76:	4638      	mov	r0, r7
 8012f78:	6013      	str	r3, [r2, #0]
 8012f7a:	b004      	add	sp, #16
 8012f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f80:	1c59      	adds	r1, r3, #1
 8012f82:	9103      	str	r1, [sp, #12]
 8012f84:	701a      	strb	r2, [r3, #0]
 8012f86:	e7f0      	b.n	8012f6a <__cvt+0xa6>

08012f88 <__exponent>:
 8012f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	bfb8      	it	lt
 8012f90:	4249      	neglt	r1, r1
 8012f92:	f803 2b02 	strb.w	r2, [r3], #2
 8012f96:	bfb4      	ite	lt
 8012f98:	222d      	movlt	r2, #45	; 0x2d
 8012f9a:	222b      	movge	r2, #43	; 0x2b
 8012f9c:	2909      	cmp	r1, #9
 8012f9e:	7042      	strb	r2, [r0, #1]
 8012fa0:	dd2a      	ble.n	8012ff8 <__exponent+0x70>
 8012fa2:	f10d 0407 	add.w	r4, sp, #7
 8012fa6:	46a4      	mov	ip, r4
 8012fa8:	270a      	movs	r7, #10
 8012faa:	46a6      	mov	lr, r4
 8012fac:	460a      	mov	r2, r1
 8012fae:	fb91 f6f7 	sdiv	r6, r1, r7
 8012fb2:	fb07 1516 	mls	r5, r7, r6, r1
 8012fb6:	3530      	adds	r5, #48	; 0x30
 8012fb8:	2a63      	cmp	r2, #99	; 0x63
 8012fba:	f104 34ff 	add.w	r4, r4, #4294967295
 8012fbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	dcf1      	bgt.n	8012faa <__exponent+0x22>
 8012fc6:	3130      	adds	r1, #48	; 0x30
 8012fc8:	f1ae 0502 	sub.w	r5, lr, #2
 8012fcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012fd0:	1c44      	adds	r4, r0, #1
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	4561      	cmp	r1, ip
 8012fd6:	d30a      	bcc.n	8012fee <__exponent+0x66>
 8012fd8:	f10d 0209 	add.w	r2, sp, #9
 8012fdc:	eba2 020e 	sub.w	r2, r2, lr
 8012fe0:	4565      	cmp	r5, ip
 8012fe2:	bf88      	it	hi
 8012fe4:	2200      	movhi	r2, #0
 8012fe6:	4413      	add	r3, r2
 8012fe8:	1a18      	subs	r0, r3, r0
 8012fea:	b003      	add	sp, #12
 8012fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ff2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012ff6:	e7ed      	b.n	8012fd4 <__exponent+0x4c>
 8012ff8:	2330      	movs	r3, #48	; 0x30
 8012ffa:	3130      	adds	r1, #48	; 0x30
 8012ffc:	7083      	strb	r3, [r0, #2]
 8012ffe:	70c1      	strb	r1, [r0, #3]
 8013000:	1d03      	adds	r3, r0, #4
 8013002:	e7f1      	b.n	8012fe8 <__exponent+0x60>

08013004 <_printf_float>:
 8013004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013008:	ed2d 8b02 	vpush	{d8}
 801300c:	b08d      	sub	sp, #52	; 0x34
 801300e:	460c      	mov	r4, r1
 8013010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013014:	4616      	mov	r6, r2
 8013016:	461f      	mov	r7, r3
 8013018:	4605      	mov	r5, r0
 801301a:	f002 ff95 	bl	8015f48 <_localeconv_r>
 801301e:	f8d0 a000 	ldr.w	sl, [r0]
 8013022:	4650      	mov	r0, sl
 8013024:	f7ed f8e6 	bl	80001f4 <strlen>
 8013028:	2300      	movs	r3, #0
 801302a:	930a      	str	r3, [sp, #40]	; 0x28
 801302c:	6823      	ldr	r3, [r4, #0]
 801302e:	9305      	str	r3, [sp, #20]
 8013030:	f8d8 3000 	ldr.w	r3, [r8]
 8013034:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013038:	3307      	adds	r3, #7
 801303a:	f023 0307 	bic.w	r3, r3, #7
 801303e:	f103 0208 	add.w	r2, r3, #8
 8013042:	f8c8 2000 	str.w	r2, [r8]
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801304e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013056:	9307      	str	r3, [sp, #28]
 8013058:	f8cd 8018 	str.w	r8, [sp, #24]
 801305c:	ee08 0a10 	vmov	s16, r0
 8013060:	4b9f      	ldr	r3, [pc, #636]	; (80132e0 <_printf_float+0x2dc>)
 8013062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013066:	f04f 32ff 	mov.w	r2, #4294967295
 801306a:	f7ed fd77 	bl	8000b5c <__aeabi_dcmpun>
 801306e:	bb88      	cbnz	r0, 80130d4 <_printf_float+0xd0>
 8013070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013074:	4b9a      	ldr	r3, [pc, #616]	; (80132e0 <_printf_float+0x2dc>)
 8013076:	f04f 32ff 	mov.w	r2, #4294967295
 801307a:	f7ed fd51 	bl	8000b20 <__aeabi_dcmple>
 801307e:	bb48      	cbnz	r0, 80130d4 <_printf_float+0xd0>
 8013080:	2200      	movs	r2, #0
 8013082:	2300      	movs	r3, #0
 8013084:	4640      	mov	r0, r8
 8013086:	4649      	mov	r1, r9
 8013088:	f7ed fd40 	bl	8000b0c <__aeabi_dcmplt>
 801308c:	b110      	cbz	r0, 8013094 <_printf_float+0x90>
 801308e:	232d      	movs	r3, #45	; 0x2d
 8013090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013094:	4b93      	ldr	r3, [pc, #588]	; (80132e4 <_printf_float+0x2e0>)
 8013096:	4894      	ldr	r0, [pc, #592]	; (80132e8 <_printf_float+0x2e4>)
 8013098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801309c:	bf94      	ite	ls
 801309e:	4698      	movls	r8, r3
 80130a0:	4680      	movhi	r8, r0
 80130a2:	2303      	movs	r3, #3
 80130a4:	6123      	str	r3, [r4, #16]
 80130a6:	9b05      	ldr	r3, [sp, #20]
 80130a8:	f023 0204 	bic.w	r2, r3, #4
 80130ac:	6022      	str	r2, [r4, #0]
 80130ae:	f04f 0900 	mov.w	r9, #0
 80130b2:	9700      	str	r7, [sp, #0]
 80130b4:	4633      	mov	r3, r6
 80130b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80130b8:	4621      	mov	r1, r4
 80130ba:	4628      	mov	r0, r5
 80130bc:	f000 f9d8 	bl	8013470 <_printf_common>
 80130c0:	3001      	adds	r0, #1
 80130c2:	f040 8090 	bne.w	80131e6 <_printf_float+0x1e2>
 80130c6:	f04f 30ff 	mov.w	r0, #4294967295
 80130ca:	b00d      	add	sp, #52	; 0x34
 80130cc:	ecbd 8b02 	vpop	{d8}
 80130d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d4:	4642      	mov	r2, r8
 80130d6:	464b      	mov	r3, r9
 80130d8:	4640      	mov	r0, r8
 80130da:	4649      	mov	r1, r9
 80130dc:	f7ed fd3e 	bl	8000b5c <__aeabi_dcmpun>
 80130e0:	b140      	cbz	r0, 80130f4 <_printf_float+0xf0>
 80130e2:	464b      	mov	r3, r9
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	bfbc      	itt	lt
 80130e8:	232d      	movlt	r3, #45	; 0x2d
 80130ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80130ee:	487f      	ldr	r0, [pc, #508]	; (80132ec <_printf_float+0x2e8>)
 80130f0:	4b7f      	ldr	r3, [pc, #508]	; (80132f0 <_printf_float+0x2ec>)
 80130f2:	e7d1      	b.n	8013098 <_printf_float+0x94>
 80130f4:	6863      	ldr	r3, [r4, #4]
 80130f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80130fa:	9206      	str	r2, [sp, #24]
 80130fc:	1c5a      	adds	r2, r3, #1
 80130fe:	d13f      	bne.n	8013180 <_printf_float+0x17c>
 8013100:	2306      	movs	r3, #6
 8013102:	6063      	str	r3, [r4, #4]
 8013104:	9b05      	ldr	r3, [sp, #20]
 8013106:	6861      	ldr	r1, [r4, #4]
 8013108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801310c:	2300      	movs	r3, #0
 801310e:	9303      	str	r3, [sp, #12]
 8013110:	ab0a      	add	r3, sp, #40	; 0x28
 8013112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013116:	ab09      	add	r3, sp, #36	; 0x24
 8013118:	ec49 8b10 	vmov	d0, r8, r9
 801311c:	9300      	str	r3, [sp, #0]
 801311e:	6022      	str	r2, [r4, #0]
 8013120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013124:	4628      	mov	r0, r5
 8013126:	f7ff fecd 	bl	8012ec4 <__cvt>
 801312a:	9b06      	ldr	r3, [sp, #24]
 801312c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801312e:	2b47      	cmp	r3, #71	; 0x47
 8013130:	4680      	mov	r8, r0
 8013132:	d108      	bne.n	8013146 <_printf_float+0x142>
 8013134:	1cc8      	adds	r0, r1, #3
 8013136:	db02      	blt.n	801313e <_printf_float+0x13a>
 8013138:	6863      	ldr	r3, [r4, #4]
 801313a:	4299      	cmp	r1, r3
 801313c:	dd41      	ble.n	80131c2 <_printf_float+0x1be>
 801313e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013142:	fa5f fb8b 	uxtb.w	fp, fp
 8013146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801314a:	d820      	bhi.n	801318e <_printf_float+0x18a>
 801314c:	3901      	subs	r1, #1
 801314e:	465a      	mov	r2, fp
 8013150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013154:	9109      	str	r1, [sp, #36]	; 0x24
 8013156:	f7ff ff17 	bl	8012f88 <__exponent>
 801315a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801315c:	1813      	adds	r3, r2, r0
 801315e:	2a01      	cmp	r2, #1
 8013160:	4681      	mov	r9, r0
 8013162:	6123      	str	r3, [r4, #16]
 8013164:	dc02      	bgt.n	801316c <_printf_float+0x168>
 8013166:	6822      	ldr	r2, [r4, #0]
 8013168:	07d2      	lsls	r2, r2, #31
 801316a:	d501      	bpl.n	8013170 <_printf_float+0x16c>
 801316c:	3301      	adds	r3, #1
 801316e:	6123      	str	r3, [r4, #16]
 8013170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013174:	2b00      	cmp	r3, #0
 8013176:	d09c      	beq.n	80130b2 <_printf_float+0xae>
 8013178:	232d      	movs	r3, #45	; 0x2d
 801317a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801317e:	e798      	b.n	80130b2 <_printf_float+0xae>
 8013180:	9a06      	ldr	r2, [sp, #24]
 8013182:	2a47      	cmp	r2, #71	; 0x47
 8013184:	d1be      	bne.n	8013104 <_printf_float+0x100>
 8013186:	2b00      	cmp	r3, #0
 8013188:	d1bc      	bne.n	8013104 <_printf_float+0x100>
 801318a:	2301      	movs	r3, #1
 801318c:	e7b9      	b.n	8013102 <_printf_float+0xfe>
 801318e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013192:	d118      	bne.n	80131c6 <_printf_float+0x1c2>
 8013194:	2900      	cmp	r1, #0
 8013196:	6863      	ldr	r3, [r4, #4]
 8013198:	dd0b      	ble.n	80131b2 <_printf_float+0x1ae>
 801319a:	6121      	str	r1, [r4, #16]
 801319c:	b913      	cbnz	r3, 80131a4 <_printf_float+0x1a0>
 801319e:	6822      	ldr	r2, [r4, #0]
 80131a0:	07d0      	lsls	r0, r2, #31
 80131a2:	d502      	bpl.n	80131aa <_printf_float+0x1a6>
 80131a4:	3301      	adds	r3, #1
 80131a6:	440b      	add	r3, r1
 80131a8:	6123      	str	r3, [r4, #16]
 80131aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80131ac:	f04f 0900 	mov.w	r9, #0
 80131b0:	e7de      	b.n	8013170 <_printf_float+0x16c>
 80131b2:	b913      	cbnz	r3, 80131ba <_printf_float+0x1b6>
 80131b4:	6822      	ldr	r2, [r4, #0]
 80131b6:	07d2      	lsls	r2, r2, #31
 80131b8:	d501      	bpl.n	80131be <_printf_float+0x1ba>
 80131ba:	3302      	adds	r3, #2
 80131bc:	e7f4      	b.n	80131a8 <_printf_float+0x1a4>
 80131be:	2301      	movs	r3, #1
 80131c0:	e7f2      	b.n	80131a8 <_printf_float+0x1a4>
 80131c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80131c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131c8:	4299      	cmp	r1, r3
 80131ca:	db05      	blt.n	80131d8 <_printf_float+0x1d4>
 80131cc:	6823      	ldr	r3, [r4, #0]
 80131ce:	6121      	str	r1, [r4, #16]
 80131d0:	07d8      	lsls	r0, r3, #31
 80131d2:	d5ea      	bpl.n	80131aa <_printf_float+0x1a6>
 80131d4:	1c4b      	adds	r3, r1, #1
 80131d6:	e7e7      	b.n	80131a8 <_printf_float+0x1a4>
 80131d8:	2900      	cmp	r1, #0
 80131da:	bfd4      	ite	le
 80131dc:	f1c1 0202 	rsble	r2, r1, #2
 80131e0:	2201      	movgt	r2, #1
 80131e2:	4413      	add	r3, r2
 80131e4:	e7e0      	b.n	80131a8 <_printf_float+0x1a4>
 80131e6:	6823      	ldr	r3, [r4, #0]
 80131e8:	055a      	lsls	r2, r3, #21
 80131ea:	d407      	bmi.n	80131fc <_printf_float+0x1f8>
 80131ec:	6923      	ldr	r3, [r4, #16]
 80131ee:	4642      	mov	r2, r8
 80131f0:	4631      	mov	r1, r6
 80131f2:	4628      	mov	r0, r5
 80131f4:	47b8      	blx	r7
 80131f6:	3001      	adds	r0, #1
 80131f8:	d12c      	bne.n	8013254 <_printf_float+0x250>
 80131fa:	e764      	b.n	80130c6 <_printf_float+0xc2>
 80131fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013200:	f240 80e0 	bls.w	80133c4 <_printf_float+0x3c0>
 8013204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013208:	2200      	movs	r2, #0
 801320a:	2300      	movs	r3, #0
 801320c:	f7ed fc74 	bl	8000af8 <__aeabi_dcmpeq>
 8013210:	2800      	cmp	r0, #0
 8013212:	d034      	beq.n	801327e <_printf_float+0x27a>
 8013214:	4a37      	ldr	r2, [pc, #220]	; (80132f4 <_printf_float+0x2f0>)
 8013216:	2301      	movs	r3, #1
 8013218:	4631      	mov	r1, r6
 801321a:	4628      	mov	r0, r5
 801321c:	47b8      	blx	r7
 801321e:	3001      	adds	r0, #1
 8013220:	f43f af51 	beq.w	80130c6 <_printf_float+0xc2>
 8013224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013228:	429a      	cmp	r2, r3
 801322a:	db02      	blt.n	8013232 <_printf_float+0x22e>
 801322c:	6823      	ldr	r3, [r4, #0]
 801322e:	07d8      	lsls	r0, r3, #31
 8013230:	d510      	bpl.n	8013254 <_printf_float+0x250>
 8013232:	ee18 3a10 	vmov	r3, s16
 8013236:	4652      	mov	r2, sl
 8013238:	4631      	mov	r1, r6
 801323a:	4628      	mov	r0, r5
 801323c:	47b8      	blx	r7
 801323e:	3001      	adds	r0, #1
 8013240:	f43f af41 	beq.w	80130c6 <_printf_float+0xc2>
 8013244:	f04f 0800 	mov.w	r8, #0
 8013248:	f104 091a 	add.w	r9, r4, #26
 801324c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801324e:	3b01      	subs	r3, #1
 8013250:	4543      	cmp	r3, r8
 8013252:	dc09      	bgt.n	8013268 <_printf_float+0x264>
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	079b      	lsls	r3, r3, #30
 8013258:	f100 8105 	bmi.w	8013466 <_printf_float+0x462>
 801325c:	68e0      	ldr	r0, [r4, #12]
 801325e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013260:	4298      	cmp	r0, r3
 8013262:	bfb8      	it	lt
 8013264:	4618      	movlt	r0, r3
 8013266:	e730      	b.n	80130ca <_printf_float+0xc6>
 8013268:	2301      	movs	r3, #1
 801326a:	464a      	mov	r2, r9
 801326c:	4631      	mov	r1, r6
 801326e:	4628      	mov	r0, r5
 8013270:	47b8      	blx	r7
 8013272:	3001      	adds	r0, #1
 8013274:	f43f af27 	beq.w	80130c6 <_printf_float+0xc2>
 8013278:	f108 0801 	add.w	r8, r8, #1
 801327c:	e7e6      	b.n	801324c <_printf_float+0x248>
 801327e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013280:	2b00      	cmp	r3, #0
 8013282:	dc39      	bgt.n	80132f8 <_printf_float+0x2f4>
 8013284:	4a1b      	ldr	r2, [pc, #108]	; (80132f4 <_printf_float+0x2f0>)
 8013286:	2301      	movs	r3, #1
 8013288:	4631      	mov	r1, r6
 801328a:	4628      	mov	r0, r5
 801328c:	47b8      	blx	r7
 801328e:	3001      	adds	r0, #1
 8013290:	f43f af19 	beq.w	80130c6 <_printf_float+0xc2>
 8013294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013298:	4313      	orrs	r3, r2
 801329a:	d102      	bne.n	80132a2 <_printf_float+0x29e>
 801329c:	6823      	ldr	r3, [r4, #0]
 801329e:	07d9      	lsls	r1, r3, #31
 80132a0:	d5d8      	bpl.n	8013254 <_printf_float+0x250>
 80132a2:	ee18 3a10 	vmov	r3, s16
 80132a6:	4652      	mov	r2, sl
 80132a8:	4631      	mov	r1, r6
 80132aa:	4628      	mov	r0, r5
 80132ac:	47b8      	blx	r7
 80132ae:	3001      	adds	r0, #1
 80132b0:	f43f af09 	beq.w	80130c6 <_printf_float+0xc2>
 80132b4:	f04f 0900 	mov.w	r9, #0
 80132b8:	f104 0a1a 	add.w	sl, r4, #26
 80132bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132be:	425b      	negs	r3, r3
 80132c0:	454b      	cmp	r3, r9
 80132c2:	dc01      	bgt.n	80132c8 <_printf_float+0x2c4>
 80132c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132c6:	e792      	b.n	80131ee <_printf_float+0x1ea>
 80132c8:	2301      	movs	r3, #1
 80132ca:	4652      	mov	r2, sl
 80132cc:	4631      	mov	r1, r6
 80132ce:	4628      	mov	r0, r5
 80132d0:	47b8      	blx	r7
 80132d2:	3001      	adds	r0, #1
 80132d4:	f43f aef7 	beq.w	80130c6 <_printf_float+0xc2>
 80132d8:	f109 0901 	add.w	r9, r9, #1
 80132dc:	e7ee      	b.n	80132bc <_printf_float+0x2b8>
 80132de:	bf00      	nop
 80132e0:	7fefffff 	.word	0x7fefffff
 80132e4:	08025670 	.word	0x08025670
 80132e8:	08025674 	.word	0x08025674
 80132ec:	0802567c 	.word	0x0802567c
 80132f0:	08025678 	.word	0x08025678
 80132f4:	08025680 	.word	0x08025680
 80132f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132fc:	429a      	cmp	r2, r3
 80132fe:	bfa8      	it	ge
 8013300:	461a      	movge	r2, r3
 8013302:	2a00      	cmp	r2, #0
 8013304:	4691      	mov	r9, r2
 8013306:	dc37      	bgt.n	8013378 <_printf_float+0x374>
 8013308:	f04f 0b00 	mov.w	fp, #0
 801330c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013310:	f104 021a 	add.w	r2, r4, #26
 8013314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013316:	9305      	str	r3, [sp, #20]
 8013318:	eba3 0309 	sub.w	r3, r3, r9
 801331c:	455b      	cmp	r3, fp
 801331e:	dc33      	bgt.n	8013388 <_printf_float+0x384>
 8013320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013324:	429a      	cmp	r2, r3
 8013326:	db3b      	blt.n	80133a0 <_printf_float+0x39c>
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	07da      	lsls	r2, r3, #31
 801332c:	d438      	bmi.n	80133a0 <_printf_float+0x39c>
 801332e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013330:	9a05      	ldr	r2, [sp, #20]
 8013332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013334:	1a9a      	subs	r2, r3, r2
 8013336:	eba3 0901 	sub.w	r9, r3, r1
 801333a:	4591      	cmp	r9, r2
 801333c:	bfa8      	it	ge
 801333e:	4691      	movge	r9, r2
 8013340:	f1b9 0f00 	cmp.w	r9, #0
 8013344:	dc35      	bgt.n	80133b2 <_printf_float+0x3ae>
 8013346:	f04f 0800 	mov.w	r8, #0
 801334a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801334e:	f104 0a1a 	add.w	sl, r4, #26
 8013352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013356:	1a9b      	subs	r3, r3, r2
 8013358:	eba3 0309 	sub.w	r3, r3, r9
 801335c:	4543      	cmp	r3, r8
 801335e:	f77f af79 	ble.w	8013254 <_printf_float+0x250>
 8013362:	2301      	movs	r3, #1
 8013364:	4652      	mov	r2, sl
 8013366:	4631      	mov	r1, r6
 8013368:	4628      	mov	r0, r5
 801336a:	47b8      	blx	r7
 801336c:	3001      	adds	r0, #1
 801336e:	f43f aeaa 	beq.w	80130c6 <_printf_float+0xc2>
 8013372:	f108 0801 	add.w	r8, r8, #1
 8013376:	e7ec      	b.n	8013352 <_printf_float+0x34e>
 8013378:	4613      	mov	r3, r2
 801337a:	4631      	mov	r1, r6
 801337c:	4642      	mov	r2, r8
 801337e:	4628      	mov	r0, r5
 8013380:	47b8      	blx	r7
 8013382:	3001      	adds	r0, #1
 8013384:	d1c0      	bne.n	8013308 <_printf_float+0x304>
 8013386:	e69e      	b.n	80130c6 <_printf_float+0xc2>
 8013388:	2301      	movs	r3, #1
 801338a:	4631      	mov	r1, r6
 801338c:	4628      	mov	r0, r5
 801338e:	9205      	str	r2, [sp, #20]
 8013390:	47b8      	blx	r7
 8013392:	3001      	adds	r0, #1
 8013394:	f43f ae97 	beq.w	80130c6 <_printf_float+0xc2>
 8013398:	9a05      	ldr	r2, [sp, #20]
 801339a:	f10b 0b01 	add.w	fp, fp, #1
 801339e:	e7b9      	b.n	8013314 <_printf_float+0x310>
 80133a0:	ee18 3a10 	vmov	r3, s16
 80133a4:	4652      	mov	r2, sl
 80133a6:	4631      	mov	r1, r6
 80133a8:	4628      	mov	r0, r5
 80133aa:	47b8      	blx	r7
 80133ac:	3001      	adds	r0, #1
 80133ae:	d1be      	bne.n	801332e <_printf_float+0x32a>
 80133b0:	e689      	b.n	80130c6 <_printf_float+0xc2>
 80133b2:	9a05      	ldr	r2, [sp, #20]
 80133b4:	464b      	mov	r3, r9
 80133b6:	4442      	add	r2, r8
 80133b8:	4631      	mov	r1, r6
 80133ba:	4628      	mov	r0, r5
 80133bc:	47b8      	blx	r7
 80133be:	3001      	adds	r0, #1
 80133c0:	d1c1      	bne.n	8013346 <_printf_float+0x342>
 80133c2:	e680      	b.n	80130c6 <_printf_float+0xc2>
 80133c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133c6:	2a01      	cmp	r2, #1
 80133c8:	dc01      	bgt.n	80133ce <_printf_float+0x3ca>
 80133ca:	07db      	lsls	r3, r3, #31
 80133cc:	d538      	bpl.n	8013440 <_printf_float+0x43c>
 80133ce:	2301      	movs	r3, #1
 80133d0:	4642      	mov	r2, r8
 80133d2:	4631      	mov	r1, r6
 80133d4:	4628      	mov	r0, r5
 80133d6:	47b8      	blx	r7
 80133d8:	3001      	adds	r0, #1
 80133da:	f43f ae74 	beq.w	80130c6 <_printf_float+0xc2>
 80133de:	ee18 3a10 	vmov	r3, s16
 80133e2:	4652      	mov	r2, sl
 80133e4:	4631      	mov	r1, r6
 80133e6:	4628      	mov	r0, r5
 80133e8:	47b8      	blx	r7
 80133ea:	3001      	adds	r0, #1
 80133ec:	f43f ae6b 	beq.w	80130c6 <_printf_float+0xc2>
 80133f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80133f4:	2200      	movs	r2, #0
 80133f6:	2300      	movs	r3, #0
 80133f8:	f7ed fb7e 	bl	8000af8 <__aeabi_dcmpeq>
 80133fc:	b9d8      	cbnz	r0, 8013436 <_printf_float+0x432>
 80133fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013400:	f108 0201 	add.w	r2, r8, #1
 8013404:	3b01      	subs	r3, #1
 8013406:	4631      	mov	r1, r6
 8013408:	4628      	mov	r0, r5
 801340a:	47b8      	blx	r7
 801340c:	3001      	adds	r0, #1
 801340e:	d10e      	bne.n	801342e <_printf_float+0x42a>
 8013410:	e659      	b.n	80130c6 <_printf_float+0xc2>
 8013412:	2301      	movs	r3, #1
 8013414:	4652      	mov	r2, sl
 8013416:	4631      	mov	r1, r6
 8013418:	4628      	mov	r0, r5
 801341a:	47b8      	blx	r7
 801341c:	3001      	adds	r0, #1
 801341e:	f43f ae52 	beq.w	80130c6 <_printf_float+0xc2>
 8013422:	f108 0801 	add.w	r8, r8, #1
 8013426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013428:	3b01      	subs	r3, #1
 801342a:	4543      	cmp	r3, r8
 801342c:	dcf1      	bgt.n	8013412 <_printf_float+0x40e>
 801342e:	464b      	mov	r3, r9
 8013430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013434:	e6dc      	b.n	80131f0 <_printf_float+0x1ec>
 8013436:	f04f 0800 	mov.w	r8, #0
 801343a:	f104 0a1a 	add.w	sl, r4, #26
 801343e:	e7f2      	b.n	8013426 <_printf_float+0x422>
 8013440:	2301      	movs	r3, #1
 8013442:	4642      	mov	r2, r8
 8013444:	e7df      	b.n	8013406 <_printf_float+0x402>
 8013446:	2301      	movs	r3, #1
 8013448:	464a      	mov	r2, r9
 801344a:	4631      	mov	r1, r6
 801344c:	4628      	mov	r0, r5
 801344e:	47b8      	blx	r7
 8013450:	3001      	adds	r0, #1
 8013452:	f43f ae38 	beq.w	80130c6 <_printf_float+0xc2>
 8013456:	f108 0801 	add.w	r8, r8, #1
 801345a:	68e3      	ldr	r3, [r4, #12]
 801345c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801345e:	1a5b      	subs	r3, r3, r1
 8013460:	4543      	cmp	r3, r8
 8013462:	dcf0      	bgt.n	8013446 <_printf_float+0x442>
 8013464:	e6fa      	b.n	801325c <_printf_float+0x258>
 8013466:	f04f 0800 	mov.w	r8, #0
 801346a:	f104 0919 	add.w	r9, r4, #25
 801346e:	e7f4      	b.n	801345a <_printf_float+0x456>

08013470 <_printf_common>:
 8013470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013474:	4616      	mov	r6, r2
 8013476:	4699      	mov	r9, r3
 8013478:	688a      	ldr	r2, [r1, #8]
 801347a:	690b      	ldr	r3, [r1, #16]
 801347c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013480:	4293      	cmp	r3, r2
 8013482:	bfb8      	it	lt
 8013484:	4613      	movlt	r3, r2
 8013486:	6033      	str	r3, [r6, #0]
 8013488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801348c:	4607      	mov	r7, r0
 801348e:	460c      	mov	r4, r1
 8013490:	b10a      	cbz	r2, 8013496 <_printf_common+0x26>
 8013492:	3301      	adds	r3, #1
 8013494:	6033      	str	r3, [r6, #0]
 8013496:	6823      	ldr	r3, [r4, #0]
 8013498:	0699      	lsls	r1, r3, #26
 801349a:	bf42      	ittt	mi
 801349c:	6833      	ldrmi	r3, [r6, #0]
 801349e:	3302      	addmi	r3, #2
 80134a0:	6033      	strmi	r3, [r6, #0]
 80134a2:	6825      	ldr	r5, [r4, #0]
 80134a4:	f015 0506 	ands.w	r5, r5, #6
 80134a8:	d106      	bne.n	80134b8 <_printf_common+0x48>
 80134aa:	f104 0a19 	add.w	sl, r4, #25
 80134ae:	68e3      	ldr	r3, [r4, #12]
 80134b0:	6832      	ldr	r2, [r6, #0]
 80134b2:	1a9b      	subs	r3, r3, r2
 80134b4:	42ab      	cmp	r3, r5
 80134b6:	dc26      	bgt.n	8013506 <_printf_common+0x96>
 80134b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80134bc:	1e13      	subs	r3, r2, #0
 80134be:	6822      	ldr	r2, [r4, #0]
 80134c0:	bf18      	it	ne
 80134c2:	2301      	movne	r3, #1
 80134c4:	0692      	lsls	r2, r2, #26
 80134c6:	d42b      	bmi.n	8013520 <_printf_common+0xb0>
 80134c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134cc:	4649      	mov	r1, r9
 80134ce:	4638      	mov	r0, r7
 80134d0:	47c0      	blx	r8
 80134d2:	3001      	adds	r0, #1
 80134d4:	d01e      	beq.n	8013514 <_printf_common+0xa4>
 80134d6:	6823      	ldr	r3, [r4, #0]
 80134d8:	68e5      	ldr	r5, [r4, #12]
 80134da:	6832      	ldr	r2, [r6, #0]
 80134dc:	f003 0306 	and.w	r3, r3, #6
 80134e0:	2b04      	cmp	r3, #4
 80134e2:	bf08      	it	eq
 80134e4:	1aad      	subeq	r5, r5, r2
 80134e6:	68a3      	ldr	r3, [r4, #8]
 80134e8:	6922      	ldr	r2, [r4, #16]
 80134ea:	bf0c      	ite	eq
 80134ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134f0:	2500      	movne	r5, #0
 80134f2:	4293      	cmp	r3, r2
 80134f4:	bfc4      	itt	gt
 80134f6:	1a9b      	subgt	r3, r3, r2
 80134f8:	18ed      	addgt	r5, r5, r3
 80134fa:	2600      	movs	r6, #0
 80134fc:	341a      	adds	r4, #26
 80134fe:	42b5      	cmp	r5, r6
 8013500:	d11a      	bne.n	8013538 <_printf_common+0xc8>
 8013502:	2000      	movs	r0, #0
 8013504:	e008      	b.n	8013518 <_printf_common+0xa8>
 8013506:	2301      	movs	r3, #1
 8013508:	4652      	mov	r2, sl
 801350a:	4649      	mov	r1, r9
 801350c:	4638      	mov	r0, r7
 801350e:	47c0      	blx	r8
 8013510:	3001      	adds	r0, #1
 8013512:	d103      	bne.n	801351c <_printf_common+0xac>
 8013514:	f04f 30ff 	mov.w	r0, #4294967295
 8013518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801351c:	3501      	adds	r5, #1
 801351e:	e7c6      	b.n	80134ae <_printf_common+0x3e>
 8013520:	18e1      	adds	r1, r4, r3
 8013522:	1c5a      	adds	r2, r3, #1
 8013524:	2030      	movs	r0, #48	; 0x30
 8013526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801352a:	4422      	add	r2, r4
 801352c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013534:	3302      	adds	r3, #2
 8013536:	e7c7      	b.n	80134c8 <_printf_common+0x58>
 8013538:	2301      	movs	r3, #1
 801353a:	4622      	mov	r2, r4
 801353c:	4649      	mov	r1, r9
 801353e:	4638      	mov	r0, r7
 8013540:	47c0      	blx	r8
 8013542:	3001      	adds	r0, #1
 8013544:	d0e6      	beq.n	8013514 <_printf_common+0xa4>
 8013546:	3601      	adds	r6, #1
 8013548:	e7d9      	b.n	80134fe <_printf_common+0x8e>
	...

0801354c <_printf_i>:
 801354c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013550:	7e0f      	ldrb	r7, [r1, #24]
 8013552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013554:	2f78      	cmp	r7, #120	; 0x78
 8013556:	4691      	mov	r9, r2
 8013558:	4680      	mov	r8, r0
 801355a:	460c      	mov	r4, r1
 801355c:	469a      	mov	sl, r3
 801355e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013562:	d807      	bhi.n	8013574 <_printf_i+0x28>
 8013564:	2f62      	cmp	r7, #98	; 0x62
 8013566:	d80a      	bhi.n	801357e <_printf_i+0x32>
 8013568:	2f00      	cmp	r7, #0
 801356a:	f000 80d8 	beq.w	801371e <_printf_i+0x1d2>
 801356e:	2f58      	cmp	r7, #88	; 0x58
 8013570:	f000 80a3 	beq.w	80136ba <_printf_i+0x16e>
 8013574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801357c:	e03a      	b.n	80135f4 <_printf_i+0xa8>
 801357e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013582:	2b15      	cmp	r3, #21
 8013584:	d8f6      	bhi.n	8013574 <_printf_i+0x28>
 8013586:	a101      	add	r1, pc, #4	; (adr r1, 801358c <_printf_i+0x40>)
 8013588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801358c:	080135e5 	.word	0x080135e5
 8013590:	080135f9 	.word	0x080135f9
 8013594:	08013575 	.word	0x08013575
 8013598:	08013575 	.word	0x08013575
 801359c:	08013575 	.word	0x08013575
 80135a0:	08013575 	.word	0x08013575
 80135a4:	080135f9 	.word	0x080135f9
 80135a8:	08013575 	.word	0x08013575
 80135ac:	08013575 	.word	0x08013575
 80135b0:	08013575 	.word	0x08013575
 80135b4:	08013575 	.word	0x08013575
 80135b8:	08013705 	.word	0x08013705
 80135bc:	08013629 	.word	0x08013629
 80135c0:	080136e7 	.word	0x080136e7
 80135c4:	08013575 	.word	0x08013575
 80135c8:	08013575 	.word	0x08013575
 80135cc:	08013727 	.word	0x08013727
 80135d0:	08013575 	.word	0x08013575
 80135d4:	08013629 	.word	0x08013629
 80135d8:	08013575 	.word	0x08013575
 80135dc:	08013575 	.word	0x08013575
 80135e0:	080136ef 	.word	0x080136ef
 80135e4:	682b      	ldr	r3, [r5, #0]
 80135e6:	1d1a      	adds	r2, r3, #4
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	602a      	str	r2, [r5, #0]
 80135ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135f4:	2301      	movs	r3, #1
 80135f6:	e0a3      	b.n	8013740 <_printf_i+0x1f4>
 80135f8:	6820      	ldr	r0, [r4, #0]
 80135fa:	6829      	ldr	r1, [r5, #0]
 80135fc:	0606      	lsls	r6, r0, #24
 80135fe:	f101 0304 	add.w	r3, r1, #4
 8013602:	d50a      	bpl.n	801361a <_printf_i+0xce>
 8013604:	680e      	ldr	r6, [r1, #0]
 8013606:	602b      	str	r3, [r5, #0]
 8013608:	2e00      	cmp	r6, #0
 801360a:	da03      	bge.n	8013614 <_printf_i+0xc8>
 801360c:	232d      	movs	r3, #45	; 0x2d
 801360e:	4276      	negs	r6, r6
 8013610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013614:	485e      	ldr	r0, [pc, #376]	; (8013790 <_printf_i+0x244>)
 8013616:	230a      	movs	r3, #10
 8013618:	e019      	b.n	801364e <_printf_i+0x102>
 801361a:	680e      	ldr	r6, [r1, #0]
 801361c:	602b      	str	r3, [r5, #0]
 801361e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013622:	bf18      	it	ne
 8013624:	b236      	sxthne	r6, r6
 8013626:	e7ef      	b.n	8013608 <_printf_i+0xbc>
 8013628:	682b      	ldr	r3, [r5, #0]
 801362a:	6820      	ldr	r0, [r4, #0]
 801362c:	1d19      	adds	r1, r3, #4
 801362e:	6029      	str	r1, [r5, #0]
 8013630:	0601      	lsls	r1, r0, #24
 8013632:	d501      	bpl.n	8013638 <_printf_i+0xec>
 8013634:	681e      	ldr	r6, [r3, #0]
 8013636:	e002      	b.n	801363e <_printf_i+0xf2>
 8013638:	0646      	lsls	r6, r0, #25
 801363a:	d5fb      	bpl.n	8013634 <_printf_i+0xe8>
 801363c:	881e      	ldrh	r6, [r3, #0]
 801363e:	4854      	ldr	r0, [pc, #336]	; (8013790 <_printf_i+0x244>)
 8013640:	2f6f      	cmp	r7, #111	; 0x6f
 8013642:	bf0c      	ite	eq
 8013644:	2308      	moveq	r3, #8
 8013646:	230a      	movne	r3, #10
 8013648:	2100      	movs	r1, #0
 801364a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801364e:	6865      	ldr	r5, [r4, #4]
 8013650:	60a5      	str	r5, [r4, #8]
 8013652:	2d00      	cmp	r5, #0
 8013654:	bfa2      	ittt	ge
 8013656:	6821      	ldrge	r1, [r4, #0]
 8013658:	f021 0104 	bicge.w	r1, r1, #4
 801365c:	6021      	strge	r1, [r4, #0]
 801365e:	b90e      	cbnz	r6, 8013664 <_printf_i+0x118>
 8013660:	2d00      	cmp	r5, #0
 8013662:	d04d      	beq.n	8013700 <_printf_i+0x1b4>
 8013664:	4615      	mov	r5, r2
 8013666:	fbb6 f1f3 	udiv	r1, r6, r3
 801366a:	fb03 6711 	mls	r7, r3, r1, r6
 801366e:	5dc7      	ldrb	r7, [r0, r7]
 8013670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013674:	4637      	mov	r7, r6
 8013676:	42bb      	cmp	r3, r7
 8013678:	460e      	mov	r6, r1
 801367a:	d9f4      	bls.n	8013666 <_printf_i+0x11a>
 801367c:	2b08      	cmp	r3, #8
 801367e:	d10b      	bne.n	8013698 <_printf_i+0x14c>
 8013680:	6823      	ldr	r3, [r4, #0]
 8013682:	07de      	lsls	r6, r3, #31
 8013684:	d508      	bpl.n	8013698 <_printf_i+0x14c>
 8013686:	6923      	ldr	r3, [r4, #16]
 8013688:	6861      	ldr	r1, [r4, #4]
 801368a:	4299      	cmp	r1, r3
 801368c:	bfde      	ittt	le
 801368e:	2330      	movle	r3, #48	; 0x30
 8013690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013698:	1b52      	subs	r2, r2, r5
 801369a:	6122      	str	r2, [r4, #16]
 801369c:	f8cd a000 	str.w	sl, [sp]
 80136a0:	464b      	mov	r3, r9
 80136a2:	aa03      	add	r2, sp, #12
 80136a4:	4621      	mov	r1, r4
 80136a6:	4640      	mov	r0, r8
 80136a8:	f7ff fee2 	bl	8013470 <_printf_common>
 80136ac:	3001      	adds	r0, #1
 80136ae:	d14c      	bne.n	801374a <_printf_i+0x1fe>
 80136b0:	f04f 30ff 	mov.w	r0, #4294967295
 80136b4:	b004      	add	sp, #16
 80136b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ba:	4835      	ldr	r0, [pc, #212]	; (8013790 <_printf_i+0x244>)
 80136bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80136c0:	6829      	ldr	r1, [r5, #0]
 80136c2:	6823      	ldr	r3, [r4, #0]
 80136c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80136c8:	6029      	str	r1, [r5, #0]
 80136ca:	061d      	lsls	r5, r3, #24
 80136cc:	d514      	bpl.n	80136f8 <_printf_i+0x1ac>
 80136ce:	07df      	lsls	r7, r3, #31
 80136d0:	bf44      	itt	mi
 80136d2:	f043 0320 	orrmi.w	r3, r3, #32
 80136d6:	6023      	strmi	r3, [r4, #0]
 80136d8:	b91e      	cbnz	r6, 80136e2 <_printf_i+0x196>
 80136da:	6823      	ldr	r3, [r4, #0]
 80136dc:	f023 0320 	bic.w	r3, r3, #32
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	2310      	movs	r3, #16
 80136e4:	e7b0      	b.n	8013648 <_printf_i+0xfc>
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	f043 0320 	orr.w	r3, r3, #32
 80136ec:	6023      	str	r3, [r4, #0]
 80136ee:	2378      	movs	r3, #120	; 0x78
 80136f0:	4828      	ldr	r0, [pc, #160]	; (8013794 <_printf_i+0x248>)
 80136f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80136f6:	e7e3      	b.n	80136c0 <_printf_i+0x174>
 80136f8:	0659      	lsls	r1, r3, #25
 80136fa:	bf48      	it	mi
 80136fc:	b2b6      	uxthmi	r6, r6
 80136fe:	e7e6      	b.n	80136ce <_printf_i+0x182>
 8013700:	4615      	mov	r5, r2
 8013702:	e7bb      	b.n	801367c <_printf_i+0x130>
 8013704:	682b      	ldr	r3, [r5, #0]
 8013706:	6826      	ldr	r6, [r4, #0]
 8013708:	6961      	ldr	r1, [r4, #20]
 801370a:	1d18      	adds	r0, r3, #4
 801370c:	6028      	str	r0, [r5, #0]
 801370e:	0635      	lsls	r5, r6, #24
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	d501      	bpl.n	8013718 <_printf_i+0x1cc>
 8013714:	6019      	str	r1, [r3, #0]
 8013716:	e002      	b.n	801371e <_printf_i+0x1d2>
 8013718:	0670      	lsls	r0, r6, #25
 801371a:	d5fb      	bpl.n	8013714 <_printf_i+0x1c8>
 801371c:	8019      	strh	r1, [r3, #0]
 801371e:	2300      	movs	r3, #0
 8013720:	6123      	str	r3, [r4, #16]
 8013722:	4615      	mov	r5, r2
 8013724:	e7ba      	b.n	801369c <_printf_i+0x150>
 8013726:	682b      	ldr	r3, [r5, #0]
 8013728:	1d1a      	adds	r2, r3, #4
 801372a:	602a      	str	r2, [r5, #0]
 801372c:	681d      	ldr	r5, [r3, #0]
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	2100      	movs	r1, #0
 8013732:	4628      	mov	r0, r5
 8013734:	f7ec fd6c 	bl	8000210 <memchr>
 8013738:	b108      	cbz	r0, 801373e <_printf_i+0x1f2>
 801373a:	1b40      	subs	r0, r0, r5
 801373c:	6060      	str	r0, [r4, #4]
 801373e:	6863      	ldr	r3, [r4, #4]
 8013740:	6123      	str	r3, [r4, #16]
 8013742:	2300      	movs	r3, #0
 8013744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013748:	e7a8      	b.n	801369c <_printf_i+0x150>
 801374a:	6923      	ldr	r3, [r4, #16]
 801374c:	462a      	mov	r2, r5
 801374e:	4649      	mov	r1, r9
 8013750:	4640      	mov	r0, r8
 8013752:	47d0      	blx	sl
 8013754:	3001      	adds	r0, #1
 8013756:	d0ab      	beq.n	80136b0 <_printf_i+0x164>
 8013758:	6823      	ldr	r3, [r4, #0]
 801375a:	079b      	lsls	r3, r3, #30
 801375c:	d413      	bmi.n	8013786 <_printf_i+0x23a>
 801375e:	68e0      	ldr	r0, [r4, #12]
 8013760:	9b03      	ldr	r3, [sp, #12]
 8013762:	4298      	cmp	r0, r3
 8013764:	bfb8      	it	lt
 8013766:	4618      	movlt	r0, r3
 8013768:	e7a4      	b.n	80136b4 <_printf_i+0x168>
 801376a:	2301      	movs	r3, #1
 801376c:	4632      	mov	r2, r6
 801376e:	4649      	mov	r1, r9
 8013770:	4640      	mov	r0, r8
 8013772:	47d0      	blx	sl
 8013774:	3001      	adds	r0, #1
 8013776:	d09b      	beq.n	80136b0 <_printf_i+0x164>
 8013778:	3501      	adds	r5, #1
 801377a:	68e3      	ldr	r3, [r4, #12]
 801377c:	9903      	ldr	r1, [sp, #12]
 801377e:	1a5b      	subs	r3, r3, r1
 8013780:	42ab      	cmp	r3, r5
 8013782:	dcf2      	bgt.n	801376a <_printf_i+0x21e>
 8013784:	e7eb      	b.n	801375e <_printf_i+0x212>
 8013786:	2500      	movs	r5, #0
 8013788:	f104 0619 	add.w	r6, r4, #25
 801378c:	e7f5      	b.n	801377a <_printf_i+0x22e>
 801378e:	bf00      	nop
 8013790:	08025682 	.word	0x08025682
 8013794:	08025693 	.word	0x08025693

08013798 <_sbrk_r>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	4d06      	ldr	r5, [pc, #24]	; (80137b4 <_sbrk_r+0x1c>)
 801379c:	2300      	movs	r3, #0
 801379e:	4604      	mov	r4, r0
 80137a0:	4608      	mov	r0, r1
 80137a2:	602b      	str	r3, [r5, #0]
 80137a4:	f7ed ff34 	bl	8001610 <_sbrk>
 80137a8:	1c43      	adds	r3, r0, #1
 80137aa:	d102      	bne.n	80137b2 <_sbrk_r+0x1a>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	b103      	cbz	r3, 80137b2 <_sbrk_r+0x1a>
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	bd38      	pop	{r3, r4, r5, pc}
 80137b4:	2000d070 	.word	0x2000d070

080137b8 <strcpy>:
 80137b8:	4603      	mov	r3, r0
 80137ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137be:	f803 2b01 	strb.w	r2, [r3], #1
 80137c2:	2a00      	cmp	r2, #0
 80137c4:	d1f9      	bne.n	80137ba <strcpy+0x2>
 80137c6:	4770      	bx	lr

080137c8 <sulp>:
 80137c8:	b570      	push	{r4, r5, r6, lr}
 80137ca:	4604      	mov	r4, r0
 80137cc:	460d      	mov	r5, r1
 80137ce:	ec45 4b10 	vmov	d0, r4, r5
 80137d2:	4616      	mov	r6, r2
 80137d4:	f002 ffb4 	bl	8016740 <__ulp>
 80137d8:	ec51 0b10 	vmov	r0, r1, d0
 80137dc:	b17e      	cbz	r6, 80137fe <sulp+0x36>
 80137de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80137e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	dd09      	ble.n	80137fe <sulp+0x36>
 80137ea:	051b      	lsls	r3, r3, #20
 80137ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80137f0:	2400      	movs	r4, #0
 80137f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80137f6:	4622      	mov	r2, r4
 80137f8:	462b      	mov	r3, r5
 80137fa:	f7ec ff15 	bl	8000628 <__aeabi_dmul>
 80137fe:	bd70      	pop	{r4, r5, r6, pc}

08013800 <_strtod_l>:
 8013800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013804:	ed2d 8b02 	vpush	{d8}
 8013808:	b09d      	sub	sp, #116	; 0x74
 801380a:	461f      	mov	r7, r3
 801380c:	2300      	movs	r3, #0
 801380e:	9318      	str	r3, [sp, #96]	; 0x60
 8013810:	4ba2      	ldr	r3, [pc, #648]	; (8013a9c <_strtod_l+0x29c>)
 8013812:	9213      	str	r2, [sp, #76]	; 0x4c
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	9305      	str	r3, [sp, #20]
 8013818:	4604      	mov	r4, r0
 801381a:	4618      	mov	r0, r3
 801381c:	4688      	mov	r8, r1
 801381e:	f7ec fce9 	bl	80001f4 <strlen>
 8013822:	f04f 0a00 	mov.w	sl, #0
 8013826:	4605      	mov	r5, r0
 8013828:	f04f 0b00 	mov.w	fp, #0
 801382c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013832:	781a      	ldrb	r2, [r3, #0]
 8013834:	2a2b      	cmp	r2, #43	; 0x2b
 8013836:	d04e      	beq.n	80138d6 <_strtod_l+0xd6>
 8013838:	d83b      	bhi.n	80138b2 <_strtod_l+0xb2>
 801383a:	2a0d      	cmp	r2, #13
 801383c:	d834      	bhi.n	80138a8 <_strtod_l+0xa8>
 801383e:	2a08      	cmp	r2, #8
 8013840:	d834      	bhi.n	80138ac <_strtod_l+0xac>
 8013842:	2a00      	cmp	r2, #0
 8013844:	d03e      	beq.n	80138c4 <_strtod_l+0xc4>
 8013846:	2300      	movs	r3, #0
 8013848:	930a      	str	r3, [sp, #40]	; 0x28
 801384a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801384c:	7833      	ldrb	r3, [r6, #0]
 801384e:	2b30      	cmp	r3, #48	; 0x30
 8013850:	f040 80b0 	bne.w	80139b4 <_strtod_l+0x1b4>
 8013854:	7873      	ldrb	r3, [r6, #1]
 8013856:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801385a:	2b58      	cmp	r3, #88	; 0x58
 801385c:	d168      	bne.n	8013930 <_strtod_l+0x130>
 801385e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013860:	9301      	str	r3, [sp, #4]
 8013862:	ab18      	add	r3, sp, #96	; 0x60
 8013864:	9702      	str	r7, [sp, #8]
 8013866:	9300      	str	r3, [sp, #0]
 8013868:	4a8d      	ldr	r2, [pc, #564]	; (8013aa0 <_strtod_l+0x2a0>)
 801386a:	ab19      	add	r3, sp, #100	; 0x64
 801386c:	a917      	add	r1, sp, #92	; 0x5c
 801386e:	4620      	mov	r0, r4
 8013870:	f002 f862 	bl	8015938 <__gethex>
 8013874:	f010 0707 	ands.w	r7, r0, #7
 8013878:	4605      	mov	r5, r0
 801387a:	d005      	beq.n	8013888 <_strtod_l+0x88>
 801387c:	2f06      	cmp	r7, #6
 801387e:	d12c      	bne.n	80138da <_strtod_l+0xda>
 8013880:	3601      	adds	r6, #1
 8013882:	2300      	movs	r3, #0
 8013884:	9617      	str	r6, [sp, #92]	; 0x5c
 8013886:	930a      	str	r3, [sp, #40]	; 0x28
 8013888:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801388a:	2b00      	cmp	r3, #0
 801388c:	f040 8590 	bne.w	80143b0 <_strtod_l+0xbb0>
 8013890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013892:	b1eb      	cbz	r3, 80138d0 <_strtod_l+0xd0>
 8013894:	4652      	mov	r2, sl
 8013896:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801389a:	ec43 2b10 	vmov	d0, r2, r3
 801389e:	b01d      	add	sp, #116	; 0x74
 80138a0:	ecbd 8b02 	vpop	{d8}
 80138a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a8:	2a20      	cmp	r2, #32
 80138aa:	d1cc      	bne.n	8013846 <_strtod_l+0x46>
 80138ac:	3301      	adds	r3, #1
 80138ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80138b0:	e7be      	b.n	8013830 <_strtod_l+0x30>
 80138b2:	2a2d      	cmp	r2, #45	; 0x2d
 80138b4:	d1c7      	bne.n	8013846 <_strtod_l+0x46>
 80138b6:	2201      	movs	r2, #1
 80138b8:	920a      	str	r2, [sp, #40]	; 0x28
 80138ba:	1c5a      	adds	r2, r3, #1
 80138bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80138be:	785b      	ldrb	r3, [r3, #1]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d1c2      	bne.n	801384a <_strtod_l+0x4a>
 80138c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f040 856e 	bne.w	80143ac <_strtod_l+0xbac>
 80138d0:	4652      	mov	r2, sl
 80138d2:	465b      	mov	r3, fp
 80138d4:	e7e1      	b.n	801389a <_strtod_l+0x9a>
 80138d6:	2200      	movs	r2, #0
 80138d8:	e7ee      	b.n	80138b8 <_strtod_l+0xb8>
 80138da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80138dc:	b13a      	cbz	r2, 80138ee <_strtod_l+0xee>
 80138de:	2135      	movs	r1, #53	; 0x35
 80138e0:	a81a      	add	r0, sp, #104	; 0x68
 80138e2:	f003 f838 	bl	8016956 <__copybits>
 80138e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80138e8:	4620      	mov	r0, r4
 80138ea:	f002 fbf7 	bl	80160dc <_Bfree>
 80138ee:	3f01      	subs	r7, #1
 80138f0:	2f04      	cmp	r7, #4
 80138f2:	d806      	bhi.n	8013902 <_strtod_l+0x102>
 80138f4:	e8df f007 	tbb	[pc, r7]
 80138f8:	1714030a 	.word	0x1714030a
 80138fc:	0a          	.byte	0x0a
 80138fd:	00          	.byte	0x00
 80138fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013902:	0728      	lsls	r0, r5, #28
 8013904:	d5c0      	bpl.n	8013888 <_strtod_l+0x88>
 8013906:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801390a:	e7bd      	b.n	8013888 <_strtod_l+0x88>
 801390c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013910:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013912:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013916:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801391a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801391e:	e7f0      	b.n	8013902 <_strtod_l+0x102>
 8013920:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013aa4 <_strtod_l+0x2a4>
 8013924:	e7ed      	b.n	8013902 <_strtod_l+0x102>
 8013926:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801392a:	f04f 3aff 	mov.w	sl, #4294967295
 801392e:	e7e8      	b.n	8013902 <_strtod_l+0x102>
 8013930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013932:	1c5a      	adds	r2, r3, #1
 8013934:	9217      	str	r2, [sp, #92]	; 0x5c
 8013936:	785b      	ldrb	r3, [r3, #1]
 8013938:	2b30      	cmp	r3, #48	; 0x30
 801393a:	d0f9      	beq.n	8013930 <_strtod_l+0x130>
 801393c:	2b00      	cmp	r3, #0
 801393e:	d0a3      	beq.n	8013888 <_strtod_l+0x88>
 8013940:	2301      	movs	r3, #1
 8013942:	f04f 0900 	mov.w	r9, #0
 8013946:	9304      	str	r3, [sp, #16]
 8013948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801394a:	9308      	str	r3, [sp, #32]
 801394c:	f8cd 901c 	str.w	r9, [sp, #28]
 8013950:	464f      	mov	r7, r9
 8013952:	220a      	movs	r2, #10
 8013954:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013956:	7806      	ldrb	r6, [r0, #0]
 8013958:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801395c:	b2d9      	uxtb	r1, r3
 801395e:	2909      	cmp	r1, #9
 8013960:	d92a      	bls.n	80139b8 <_strtod_l+0x1b8>
 8013962:	9905      	ldr	r1, [sp, #20]
 8013964:	462a      	mov	r2, r5
 8013966:	f003 f9fc 	bl	8016d62 <strncmp>
 801396a:	b398      	cbz	r0, 80139d4 <_strtod_l+0x1d4>
 801396c:	2000      	movs	r0, #0
 801396e:	4632      	mov	r2, r6
 8013970:	463d      	mov	r5, r7
 8013972:	9005      	str	r0, [sp, #20]
 8013974:	4603      	mov	r3, r0
 8013976:	2a65      	cmp	r2, #101	; 0x65
 8013978:	d001      	beq.n	801397e <_strtod_l+0x17e>
 801397a:	2a45      	cmp	r2, #69	; 0x45
 801397c:	d118      	bne.n	80139b0 <_strtod_l+0x1b0>
 801397e:	b91d      	cbnz	r5, 8013988 <_strtod_l+0x188>
 8013980:	9a04      	ldr	r2, [sp, #16]
 8013982:	4302      	orrs	r2, r0
 8013984:	d09e      	beq.n	80138c4 <_strtod_l+0xc4>
 8013986:	2500      	movs	r5, #0
 8013988:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801398c:	f108 0201 	add.w	r2, r8, #1
 8013990:	9217      	str	r2, [sp, #92]	; 0x5c
 8013992:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013996:	2a2b      	cmp	r2, #43	; 0x2b
 8013998:	d075      	beq.n	8013a86 <_strtod_l+0x286>
 801399a:	2a2d      	cmp	r2, #45	; 0x2d
 801399c:	d07b      	beq.n	8013a96 <_strtod_l+0x296>
 801399e:	f04f 0c00 	mov.w	ip, #0
 80139a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80139a6:	2909      	cmp	r1, #9
 80139a8:	f240 8082 	bls.w	8013ab0 <_strtod_l+0x2b0>
 80139ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80139b0:	2600      	movs	r6, #0
 80139b2:	e09d      	b.n	8013af0 <_strtod_l+0x2f0>
 80139b4:	2300      	movs	r3, #0
 80139b6:	e7c4      	b.n	8013942 <_strtod_l+0x142>
 80139b8:	2f08      	cmp	r7, #8
 80139ba:	bfd8      	it	le
 80139bc:	9907      	ldrle	r1, [sp, #28]
 80139be:	f100 0001 	add.w	r0, r0, #1
 80139c2:	bfda      	itte	le
 80139c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80139c8:	9307      	strle	r3, [sp, #28]
 80139ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80139ce:	3701      	adds	r7, #1
 80139d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80139d2:	e7bf      	b.n	8013954 <_strtod_l+0x154>
 80139d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139d6:	195a      	adds	r2, r3, r5
 80139d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80139da:	5d5a      	ldrb	r2, [r3, r5]
 80139dc:	2f00      	cmp	r7, #0
 80139de:	d037      	beq.n	8013a50 <_strtod_l+0x250>
 80139e0:	9005      	str	r0, [sp, #20]
 80139e2:	463d      	mov	r5, r7
 80139e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80139e8:	2b09      	cmp	r3, #9
 80139ea:	d912      	bls.n	8013a12 <_strtod_l+0x212>
 80139ec:	2301      	movs	r3, #1
 80139ee:	e7c2      	b.n	8013976 <_strtod_l+0x176>
 80139f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139f2:	1c5a      	adds	r2, r3, #1
 80139f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80139f6:	785a      	ldrb	r2, [r3, #1]
 80139f8:	3001      	adds	r0, #1
 80139fa:	2a30      	cmp	r2, #48	; 0x30
 80139fc:	d0f8      	beq.n	80139f0 <_strtod_l+0x1f0>
 80139fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013a02:	2b08      	cmp	r3, #8
 8013a04:	f200 84d9 	bhi.w	80143ba <_strtod_l+0xbba>
 8013a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a0a:	9005      	str	r0, [sp, #20]
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	9308      	str	r3, [sp, #32]
 8013a10:	4605      	mov	r5, r0
 8013a12:	3a30      	subs	r2, #48	; 0x30
 8013a14:	f100 0301 	add.w	r3, r0, #1
 8013a18:	d014      	beq.n	8013a44 <_strtod_l+0x244>
 8013a1a:	9905      	ldr	r1, [sp, #20]
 8013a1c:	4419      	add	r1, r3
 8013a1e:	9105      	str	r1, [sp, #20]
 8013a20:	462b      	mov	r3, r5
 8013a22:	eb00 0e05 	add.w	lr, r0, r5
 8013a26:	210a      	movs	r1, #10
 8013a28:	4573      	cmp	r3, lr
 8013a2a:	d113      	bne.n	8013a54 <_strtod_l+0x254>
 8013a2c:	182b      	adds	r3, r5, r0
 8013a2e:	2b08      	cmp	r3, #8
 8013a30:	f105 0501 	add.w	r5, r5, #1
 8013a34:	4405      	add	r5, r0
 8013a36:	dc1c      	bgt.n	8013a72 <_strtod_l+0x272>
 8013a38:	9907      	ldr	r1, [sp, #28]
 8013a3a:	230a      	movs	r3, #10
 8013a3c:	fb03 2301 	mla	r3, r3, r1, r2
 8013a40:	9307      	str	r3, [sp, #28]
 8013a42:	2300      	movs	r3, #0
 8013a44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a46:	1c51      	adds	r1, r2, #1
 8013a48:	9117      	str	r1, [sp, #92]	; 0x5c
 8013a4a:	7852      	ldrb	r2, [r2, #1]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	e7c9      	b.n	80139e4 <_strtod_l+0x1e4>
 8013a50:	4638      	mov	r0, r7
 8013a52:	e7d2      	b.n	80139fa <_strtod_l+0x1fa>
 8013a54:	2b08      	cmp	r3, #8
 8013a56:	dc04      	bgt.n	8013a62 <_strtod_l+0x262>
 8013a58:	9e07      	ldr	r6, [sp, #28]
 8013a5a:	434e      	muls	r6, r1
 8013a5c:	9607      	str	r6, [sp, #28]
 8013a5e:	3301      	adds	r3, #1
 8013a60:	e7e2      	b.n	8013a28 <_strtod_l+0x228>
 8013a62:	f103 0c01 	add.w	ip, r3, #1
 8013a66:	f1bc 0f10 	cmp.w	ip, #16
 8013a6a:	bfd8      	it	le
 8013a6c:	fb01 f909 	mulle.w	r9, r1, r9
 8013a70:	e7f5      	b.n	8013a5e <_strtod_l+0x25e>
 8013a72:	2d10      	cmp	r5, #16
 8013a74:	bfdc      	itt	le
 8013a76:	230a      	movle	r3, #10
 8013a78:	fb03 2909 	mlale	r9, r3, r9, r2
 8013a7c:	e7e1      	b.n	8013a42 <_strtod_l+0x242>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	9305      	str	r3, [sp, #20]
 8013a82:	2301      	movs	r3, #1
 8013a84:	e77c      	b.n	8013980 <_strtod_l+0x180>
 8013a86:	f04f 0c00 	mov.w	ip, #0
 8013a8a:	f108 0202 	add.w	r2, r8, #2
 8013a8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013a90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013a94:	e785      	b.n	80139a2 <_strtod_l+0x1a2>
 8013a96:	f04f 0c01 	mov.w	ip, #1
 8013a9a:	e7f6      	b.n	8013a8a <_strtod_l+0x28a>
 8013a9c:	08025954 	.word	0x08025954
 8013aa0:	080256a4 	.word	0x080256a4
 8013aa4:	7ff00000 	.word	0x7ff00000
 8013aa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013aaa:	1c51      	adds	r1, r2, #1
 8013aac:	9117      	str	r1, [sp, #92]	; 0x5c
 8013aae:	7852      	ldrb	r2, [r2, #1]
 8013ab0:	2a30      	cmp	r2, #48	; 0x30
 8013ab2:	d0f9      	beq.n	8013aa8 <_strtod_l+0x2a8>
 8013ab4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013ab8:	2908      	cmp	r1, #8
 8013aba:	f63f af79 	bhi.w	80139b0 <_strtod_l+0x1b0>
 8013abe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013ac2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013ac4:	9206      	str	r2, [sp, #24]
 8013ac6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013ac8:	1c51      	adds	r1, r2, #1
 8013aca:	9117      	str	r1, [sp, #92]	; 0x5c
 8013acc:	7852      	ldrb	r2, [r2, #1]
 8013ace:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013ad2:	2e09      	cmp	r6, #9
 8013ad4:	d937      	bls.n	8013b46 <_strtod_l+0x346>
 8013ad6:	9e06      	ldr	r6, [sp, #24]
 8013ad8:	1b89      	subs	r1, r1, r6
 8013ada:	2908      	cmp	r1, #8
 8013adc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013ae0:	dc02      	bgt.n	8013ae8 <_strtod_l+0x2e8>
 8013ae2:	4576      	cmp	r6, lr
 8013ae4:	bfa8      	it	ge
 8013ae6:	4676      	movge	r6, lr
 8013ae8:	f1bc 0f00 	cmp.w	ip, #0
 8013aec:	d000      	beq.n	8013af0 <_strtod_l+0x2f0>
 8013aee:	4276      	negs	r6, r6
 8013af0:	2d00      	cmp	r5, #0
 8013af2:	d14d      	bne.n	8013b90 <_strtod_l+0x390>
 8013af4:	9904      	ldr	r1, [sp, #16]
 8013af6:	4301      	orrs	r1, r0
 8013af8:	f47f aec6 	bne.w	8013888 <_strtod_l+0x88>
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f47f aee1 	bne.w	80138c4 <_strtod_l+0xc4>
 8013b02:	2a69      	cmp	r2, #105	; 0x69
 8013b04:	d027      	beq.n	8013b56 <_strtod_l+0x356>
 8013b06:	dc24      	bgt.n	8013b52 <_strtod_l+0x352>
 8013b08:	2a49      	cmp	r2, #73	; 0x49
 8013b0a:	d024      	beq.n	8013b56 <_strtod_l+0x356>
 8013b0c:	2a4e      	cmp	r2, #78	; 0x4e
 8013b0e:	f47f aed9 	bne.w	80138c4 <_strtod_l+0xc4>
 8013b12:	499f      	ldr	r1, [pc, #636]	; (8013d90 <_strtod_l+0x590>)
 8013b14:	a817      	add	r0, sp, #92	; 0x5c
 8013b16:	f002 f967 	bl	8015de8 <__match>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	f43f aed2 	beq.w	80138c4 <_strtod_l+0xc4>
 8013b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	2b28      	cmp	r3, #40	; 0x28
 8013b26:	d12d      	bne.n	8013b84 <_strtod_l+0x384>
 8013b28:	499a      	ldr	r1, [pc, #616]	; (8013d94 <_strtod_l+0x594>)
 8013b2a:	aa1a      	add	r2, sp, #104	; 0x68
 8013b2c:	a817      	add	r0, sp, #92	; 0x5c
 8013b2e:	f002 f96f 	bl	8015e10 <__hexnan>
 8013b32:	2805      	cmp	r0, #5
 8013b34:	d126      	bne.n	8013b84 <_strtod_l+0x384>
 8013b36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013b3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013b40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013b44:	e6a0      	b.n	8013888 <_strtod_l+0x88>
 8013b46:	210a      	movs	r1, #10
 8013b48:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013b4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013b50:	e7b9      	b.n	8013ac6 <_strtod_l+0x2c6>
 8013b52:	2a6e      	cmp	r2, #110	; 0x6e
 8013b54:	e7db      	b.n	8013b0e <_strtod_l+0x30e>
 8013b56:	4990      	ldr	r1, [pc, #576]	; (8013d98 <_strtod_l+0x598>)
 8013b58:	a817      	add	r0, sp, #92	; 0x5c
 8013b5a:	f002 f945 	bl	8015de8 <__match>
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	f43f aeb0 	beq.w	80138c4 <_strtod_l+0xc4>
 8013b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b66:	498d      	ldr	r1, [pc, #564]	; (8013d9c <_strtod_l+0x59c>)
 8013b68:	3b01      	subs	r3, #1
 8013b6a:	a817      	add	r0, sp, #92	; 0x5c
 8013b6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013b6e:	f002 f93b 	bl	8015de8 <__match>
 8013b72:	b910      	cbnz	r0, 8013b7a <_strtod_l+0x37a>
 8013b74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b76:	3301      	adds	r3, #1
 8013b78:	9317      	str	r3, [sp, #92]	; 0x5c
 8013b7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013dac <_strtod_l+0x5ac>
 8013b7e:	f04f 0a00 	mov.w	sl, #0
 8013b82:	e681      	b.n	8013888 <_strtod_l+0x88>
 8013b84:	4886      	ldr	r0, [pc, #536]	; (8013da0 <_strtod_l+0x5a0>)
 8013b86:	f003 f89b 	bl	8016cc0 <nan>
 8013b8a:	ec5b ab10 	vmov	sl, fp, d0
 8013b8e:	e67b      	b.n	8013888 <_strtod_l+0x88>
 8013b90:	9b05      	ldr	r3, [sp, #20]
 8013b92:	9807      	ldr	r0, [sp, #28]
 8013b94:	1af3      	subs	r3, r6, r3
 8013b96:	2f00      	cmp	r7, #0
 8013b98:	bf08      	it	eq
 8013b9a:	462f      	moveq	r7, r5
 8013b9c:	2d10      	cmp	r5, #16
 8013b9e:	9306      	str	r3, [sp, #24]
 8013ba0:	46a8      	mov	r8, r5
 8013ba2:	bfa8      	it	ge
 8013ba4:	f04f 0810 	movge.w	r8, #16
 8013ba8:	f7ec fcc4 	bl	8000534 <__aeabi_ui2d>
 8013bac:	2d09      	cmp	r5, #9
 8013bae:	4682      	mov	sl, r0
 8013bb0:	468b      	mov	fp, r1
 8013bb2:	dd13      	ble.n	8013bdc <_strtod_l+0x3dc>
 8013bb4:	4b7b      	ldr	r3, [pc, #492]	; (8013da4 <_strtod_l+0x5a4>)
 8013bb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013bba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013bbe:	f7ec fd33 	bl	8000628 <__aeabi_dmul>
 8013bc2:	4682      	mov	sl, r0
 8013bc4:	4648      	mov	r0, r9
 8013bc6:	468b      	mov	fp, r1
 8013bc8:	f7ec fcb4 	bl	8000534 <__aeabi_ui2d>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	460b      	mov	r3, r1
 8013bd0:	4650      	mov	r0, sl
 8013bd2:	4659      	mov	r1, fp
 8013bd4:	f7ec fb72 	bl	80002bc <__adddf3>
 8013bd8:	4682      	mov	sl, r0
 8013bda:	468b      	mov	fp, r1
 8013bdc:	2d0f      	cmp	r5, #15
 8013bde:	dc38      	bgt.n	8013c52 <_strtod_l+0x452>
 8013be0:	9b06      	ldr	r3, [sp, #24]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f43f ae50 	beq.w	8013888 <_strtod_l+0x88>
 8013be8:	dd24      	ble.n	8013c34 <_strtod_l+0x434>
 8013bea:	2b16      	cmp	r3, #22
 8013bec:	dc0b      	bgt.n	8013c06 <_strtod_l+0x406>
 8013bee:	496d      	ldr	r1, [pc, #436]	; (8013da4 <_strtod_l+0x5a4>)
 8013bf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bf8:	4652      	mov	r2, sl
 8013bfa:	465b      	mov	r3, fp
 8013bfc:	f7ec fd14 	bl	8000628 <__aeabi_dmul>
 8013c00:	4682      	mov	sl, r0
 8013c02:	468b      	mov	fp, r1
 8013c04:	e640      	b.n	8013888 <_strtod_l+0x88>
 8013c06:	9a06      	ldr	r2, [sp, #24]
 8013c08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	db20      	blt.n	8013c52 <_strtod_l+0x452>
 8013c10:	4c64      	ldr	r4, [pc, #400]	; (8013da4 <_strtod_l+0x5a4>)
 8013c12:	f1c5 050f 	rsb	r5, r5, #15
 8013c16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013c1a:	4652      	mov	r2, sl
 8013c1c:	465b      	mov	r3, fp
 8013c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c22:	f7ec fd01 	bl	8000628 <__aeabi_dmul>
 8013c26:	9b06      	ldr	r3, [sp, #24]
 8013c28:	1b5d      	subs	r5, r3, r5
 8013c2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013c2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013c32:	e7e3      	b.n	8013bfc <_strtod_l+0x3fc>
 8013c34:	9b06      	ldr	r3, [sp, #24]
 8013c36:	3316      	adds	r3, #22
 8013c38:	db0b      	blt.n	8013c52 <_strtod_l+0x452>
 8013c3a:	9b05      	ldr	r3, [sp, #20]
 8013c3c:	1b9e      	subs	r6, r3, r6
 8013c3e:	4b59      	ldr	r3, [pc, #356]	; (8013da4 <_strtod_l+0x5a4>)
 8013c40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013c44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c48:	4650      	mov	r0, sl
 8013c4a:	4659      	mov	r1, fp
 8013c4c:	f7ec fe16 	bl	800087c <__aeabi_ddiv>
 8013c50:	e7d6      	b.n	8013c00 <_strtod_l+0x400>
 8013c52:	9b06      	ldr	r3, [sp, #24]
 8013c54:	eba5 0808 	sub.w	r8, r5, r8
 8013c58:	4498      	add	r8, r3
 8013c5a:	f1b8 0f00 	cmp.w	r8, #0
 8013c5e:	dd74      	ble.n	8013d4a <_strtod_l+0x54a>
 8013c60:	f018 030f 	ands.w	r3, r8, #15
 8013c64:	d00a      	beq.n	8013c7c <_strtod_l+0x47c>
 8013c66:	494f      	ldr	r1, [pc, #316]	; (8013da4 <_strtod_l+0x5a4>)
 8013c68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c6c:	4652      	mov	r2, sl
 8013c6e:	465b      	mov	r3, fp
 8013c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c74:	f7ec fcd8 	bl	8000628 <__aeabi_dmul>
 8013c78:	4682      	mov	sl, r0
 8013c7a:	468b      	mov	fp, r1
 8013c7c:	f038 080f 	bics.w	r8, r8, #15
 8013c80:	d04f      	beq.n	8013d22 <_strtod_l+0x522>
 8013c82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013c86:	dd22      	ble.n	8013cce <_strtod_l+0x4ce>
 8013c88:	2500      	movs	r5, #0
 8013c8a:	462e      	mov	r6, r5
 8013c8c:	9507      	str	r5, [sp, #28]
 8013c8e:	9505      	str	r5, [sp, #20]
 8013c90:	2322      	movs	r3, #34	; 0x22
 8013c92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013dac <_strtod_l+0x5ac>
 8013c96:	6023      	str	r3, [r4, #0]
 8013c98:	f04f 0a00 	mov.w	sl, #0
 8013c9c:	9b07      	ldr	r3, [sp, #28]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	f43f adf2 	beq.w	8013888 <_strtod_l+0x88>
 8013ca4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	f002 fa18 	bl	80160dc <_Bfree>
 8013cac:	9905      	ldr	r1, [sp, #20]
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f002 fa14 	bl	80160dc <_Bfree>
 8013cb4:	4631      	mov	r1, r6
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f002 fa10 	bl	80160dc <_Bfree>
 8013cbc:	9907      	ldr	r1, [sp, #28]
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	f002 fa0c 	bl	80160dc <_Bfree>
 8013cc4:	4629      	mov	r1, r5
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	f002 fa08 	bl	80160dc <_Bfree>
 8013ccc:	e5dc      	b.n	8013888 <_strtod_l+0x88>
 8013cce:	4b36      	ldr	r3, [pc, #216]	; (8013da8 <_strtod_l+0x5a8>)
 8013cd0:	9304      	str	r3, [sp, #16]
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013cd8:	4650      	mov	r0, sl
 8013cda:	4659      	mov	r1, fp
 8013cdc:	4699      	mov	r9, r3
 8013cde:	f1b8 0f01 	cmp.w	r8, #1
 8013ce2:	dc21      	bgt.n	8013d28 <_strtod_l+0x528>
 8013ce4:	b10b      	cbz	r3, 8013cea <_strtod_l+0x4ea>
 8013ce6:	4682      	mov	sl, r0
 8013ce8:	468b      	mov	fp, r1
 8013cea:	4b2f      	ldr	r3, [pc, #188]	; (8013da8 <_strtod_l+0x5a8>)
 8013cec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013cf0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013cf4:	4652      	mov	r2, sl
 8013cf6:	465b      	mov	r3, fp
 8013cf8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013cfc:	f7ec fc94 	bl	8000628 <__aeabi_dmul>
 8013d00:	4b2a      	ldr	r3, [pc, #168]	; (8013dac <_strtod_l+0x5ac>)
 8013d02:	460a      	mov	r2, r1
 8013d04:	400b      	ands	r3, r1
 8013d06:	492a      	ldr	r1, [pc, #168]	; (8013db0 <_strtod_l+0x5b0>)
 8013d08:	428b      	cmp	r3, r1
 8013d0a:	4682      	mov	sl, r0
 8013d0c:	d8bc      	bhi.n	8013c88 <_strtod_l+0x488>
 8013d0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013d12:	428b      	cmp	r3, r1
 8013d14:	bf86      	itte	hi
 8013d16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013db4 <_strtod_l+0x5b4>
 8013d1a:	f04f 3aff 	movhi.w	sl, #4294967295
 8013d1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013d22:	2300      	movs	r3, #0
 8013d24:	9304      	str	r3, [sp, #16]
 8013d26:	e084      	b.n	8013e32 <_strtod_l+0x632>
 8013d28:	f018 0f01 	tst.w	r8, #1
 8013d2c:	d005      	beq.n	8013d3a <_strtod_l+0x53a>
 8013d2e:	9b04      	ldr	r3, [sp, #16]
 8013d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d34:	f7ec fc78 	bl	8000628 <__aeabi_dmul>
 8013d38:	2301      	movs	r3, #1
 8013d3a:	9a04      	ldr	r2, [sp, #16]
 8013d3c:	3208      	adds	r2, #8
 8013d3e:	f109 0901 	add.w	r9, r9, #1
 8013d42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013d46:	9204      	str	r2, [sp, #16]
 8013d48:	e7c9      	b.n	8013cde <_strtod_l+0x4de>
 8013d4a:	d0ea      	beq.n	8013d22 <_strtod_l+0x522>
 8013d4c:	f1c8 0800 	rsb	r8, r8, #0
 8013d50:	f018 020f 	ands.w	r2, r8, #15
 8013d54:	d00a      	beq.n	8013d6c <_strtod_l+0x56c>
 8013d56:	4b13      	ldr	r3, [pc, #76]	; (8013da4 <_strtod_l+0x5a4>)
 8013d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d5c:	4650      	mov	r0, sl
 8013d5e:	4659      	mov	r1, fp
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	f7ec fd8a 	bl	800087c <__aeabi_ddiv>
 8013d68:	4682      	mov	sl, r0
 8013d6a:	468b      	mov	fp, r1
 8013d6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013d70:	d0d7      	beq.n	8013d22 <_strtod_l+0x522>
 8013d72:	f1b8 0f1f 	cmp.w	r8, #31
 8013d76:	dd1f      	ble.n	8013db8 <_strtod_l+0x5b8>
 8013d78:	2500      	movs	r5, #0
 8013d7a:	462e      	mov	r6, r5
 8013d7c:	9507      	str	r5, [sp, #28]
 8013d7e:	9505      	str	r5, [sp, #20]
 8013d80:	2322      	movs	r3, #34	; 0x22
 8013d82:	f04f 0a00 	mov.w	sl, #0
 8013d86:	f04f 0b00 	mov.w	fp, #0
 8013d8a:	6023      	str	r3, [r4, #0]
 8013d8c:	e786      	b.n	8013c9c <_strtod_l+0x49c>
 8013d8e:	bf00      	nop
 8013d90:	0802567d 	.word	0x0802567d
 8013d94:	080256b8 	.word	0x080256b8
 8013d98:	08025675 	.word	0x08025675
 8013d9c:	080257fc 	.word	0x080257fc
 8013da0:	08025b10 	.word	0x08025b10
 8013da4:	080259f0 	.word	0x080259f0
 8013da8:	080259c8 	.word	0x080259c8
 8013dac:	7ff00000 	.word	0x7ff00000
 8013db0:	7ca00000 	.word	0x7ca00000
 8013db4:	7fefffff 	.word	0x7fefffff
 8013db8:	f018 0310 	ands.w	r3, r8, #16
 8013dbc:	bf18      	it	ne
 8013dbe:	236a      	movne	r3, #106	; 0x6a
 8013dc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014170 <_strtod_l+0x970>
 8013dc4:	9304      	str	r3, [sp, #16]
 8013dc6:	4650      	mov	r0, sl
 8013dc8:	4659      	mov	r1, fp
 8013dca:	2300      	movs	r3, #0
 8013dcc:	f018 0f01 	tst.w	r8, #1
 8013dd0:	d004      	beq.n	8013ddc <_strtod_l+0x5dc>
 8013dd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013dd6:	f7ec fc27 	bl	8000628 <__aeabi_dmul>
 8013dda:	2301      	movs	r3, #1
 8013ddc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013de0:	f109 0908 	add.w	r9, r9, #8
 8013de4:	d1f2      	bne.n	8013dcc <_strtod_l+0x5cc>
 8013de6:	b10b      	cbz	r3, 8013dec <_strtod_l+0x5ec>
 8013de8:	4682      	mov	sl, r0
 8013dea:	468b      	mov	fp, r1
 8013dec:	9b04      	ldr	r3, [sp, #16]
 8013dee:	b1c3      	cbz	r3, 8013e22 <_strtod_l+0x622>
 8013df0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013df4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	4659      	mov	r1, fp
 8013dfc:	dd11      	ble.n	8013e22 <_strtod_l+0x622>
 8013dfe:	2b1f      	cmp	r3, #31
 8013e00:	f340 8124 	ble.w	801404c <_strtod_l+0x84c>
 8013e04:	2b34      	cmp	r3, #52	; 0x34
 8013e06:	bfde      	ittt	le
 8013e08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013e0c:	f04f 33ff 	movle.w	r3, #4294967295
 8013e10:	fa03 f202 	lslle.w	r2, r3, r2
 8013e14:	f04f 0a00 	mov.w	sl, #0
 8013e18:	bfcc      	ite	gt
 8013e1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013e1e:	ea02 0b01 	andle.w	fp, r2, r1
 8013e22:	2200      	movs	r2, #0
 8013e24:	2300      	movs	r3, #0
 8013e26:	4650      	mov	r0, sl
 8013e28:	4659      	mov	r1, fp
 8013e2a:	f7ec fe65 	bl	8000af8 <__aeabi_dcmpeq>
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	d1a2      	bne.n	8013d78 <_strtod_l+0x578>
 8013e32:	9b07      	ldr	r3, [sp, #28]
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	9908      	ldr	r1, [sp, #32]
 8013e38:	462b      	mov	r3, r5
 8013e3a:	463a      	mov	r2, r7
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f002 f9b5 	bl	80161ac <__s2b>
 8013e42:	9007      	str	r0, [sp, #28]
 8013e44:	2800      	cmp	r0, #0
 8013e46:	f43f af1f 	beq.w	8013c88 <_strtod_l+0x488>
 8013e4a:	9b05      	ldr	r3, [sp, #20]
 8013e4c:	1b9e      	subs	r6, r3, r6
 8013e4e:	9b06      	ldr	r3, [sp, #24]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	bfb4      	ite	lt
 8013e54:	4633      	movlt	r3, r6
 8013e56:	2300      	movge	r3, #0
 8013e58:	930c      	str	r3, [sp, #48]	; 0x30
 8013e5a:	9b06      	ldr	r3, [sp, #24]
 8013e5c:	2500      	movs	r5, #0
 8013e5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e62:	9312      	str	r3, [sp, #72]	; 0x48
 8013e64:	462e      	mov	r6, r5
 8013e66:	9b07      	ldr	r3, [sp, #28]
 8013e68:	4620      	mov	r0, r4
 8013e6a:	6859      	ldr	r1, [r3, #4]
 8013e6c:	f002 f8f6 	bl	801605c <_Balloc>
 8013e70:	9005      	str	r0, [sp, #20]
 8013e72:	2800      	cmp	r0, #0
 8013e74:	f43f af0c 	beq.w	8013c90 <_strtod_l+0x490>
 8013e78:	9b07      	ldr	r3, [sp, #28]
 8013e7a:	691a      	ldr	r2, [r3, #16]
 8013e7c:	3202      	adds	r2, #2
 8013e7e:	f103 010c 	add.w	r1, r3, #12
 8013e82:	0092      	lsls	r2, r2, #2
 8013e84:	300c      	adds	r0, #12
 8013e86:	f7fe ff27 	bl	8012cd8 <memcpy>
 8013e8a:	ec4b ab10 	vmov	d0, sl, fp
 8013e8e:	aa1a      	add	r2, sp, #104	; 0x68
 8013e90:	a919      	add	r1, sp, #100	; 0x64
 8013e92:	4620      	mov	r0, r4
 8013e94:	f002 fcd0 	bl	8016838 <__d2b>
 8013e98:	ec4b ab18 	vmov	d8, sl, fp
 8013e9c:	9018      	str	r0, [sp, #96]	; 0x60
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	f43f aef6 	beq.w	8013c90 <_strtod_l+0x490>
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	f002 fa1a 	bl	80162e0 <__i2b>
 8013eac:	4606      	mov	r6, r0
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	f43f aeee 	beq.w	8013c90 <_strtod_l+0x490>
 8013eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013eb6:	9904      	ldr	r1, [sp, #16]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	bfab      	itete	ge
 8013ebc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013ebe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013ec0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013ec2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013ec6:	bfac      	ite	ge
 8013ec8:	eb03 0902 	addge.w	r9, r3, r2
 8013ecc:	1ad7      	sublt	r7, r2, r3
 8013ece:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013ed0:	eba3 0801 	sub.w	r8, r3, r1
 8013ed4:	4490      	add	r8, r2
 8013ed6:	4ba1      	ldr	r3, [pc, #644]	; (801415c <_strtod_l+0x95c>)
 8013ed8:	f108 38ff 	add.w	r8, r8, #4294967295
 8013edc:	4598      	cmp	r8, r3
 8013ede:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013ee2:	f280 80c7 	bge.w	8014074 <_strtod_l+0x874>
 8013ee6:	eba3 0308 	sub.w	r3, r3, r8
 8013eea:	2b1f      	cmp	r3, #31
 8013eec:	eba2 0203 	sub.w	r2, r2, r3
 8013ef0:	f04f 0101 	mov.w	r1, #1
 8013ef4:	f300 80b1 	bgt.w	801405a <_strtod_l+0x85a>
 8013ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8013efc:	930d      	str	r3, [sp, #52]	; 0x34
 8013efe:	2300      	movs	r3, #0
 8013f00:	9308      	str	r3, [sp, #32]
 8013f02:	eb09 0802 	add.w	r8, r9, r2
 8013f06:	9b04      	ldr	r3, [sp, #16]
 8013f08:	45c1      	cmp	r9, r8
 8013f0a:	4417      	add	r7, r2
 8013f0c:	441f      	add	r7, r3
 8013f0e:	464b      	mov	r3, r9
 8013f10:	bfa8      	it	ge
 8013f12:	4643      	movge	r3, r8
 8013f14:	42bb      	cmp	r3, r7
 8013f16:	bfa8      	it	ge
 8013f18:	463b      	movge	r3, r7
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bfc2      	ittt	gt
 8013f1e:	eba8 0803 	subgt.w	r8, r8, r3
 8013f22:	1aff      	subgt	r7, r7, r3
 8013f24:	eba9 0903 	subgt.w	r9, r9, r3
 8013f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	dd17      	ble.n	8013f5e <_strtod_l+0x75e>
 8013f2e:	4631      	mov	r1, r6
 8013f30:	461a      	mov	r2, r3
 8013f32:	4620      	mov	r0, r4
 8013f34:	f002 fa94 	bl	8016460 <__pow5mult>
 8013f38:	4606      	mov	r6, r0
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	f43f aea8 	beq.w	8013c90 <_strtod_l+0x490>
 8013f40:	4601      	mov	r1, r0
 8013f42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013f44:	4620      	mov	r0, r4
 8013f46:	f002 f9e1 	bl	801630c <__multiply>
 8013f4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	f43f ae9f 	beq.w	8013c90 <_strtod_l+0x490>
 8013f52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013f54:	4620      	mov	r0, r4
 8013f56:	f002 f8c1 	bl	80160dc <_Bfree>
 8013f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f5c:	9318      	str	r3, [sp, #96]	; 0x60
 8013f5e:	f1b8 0f00 	cmp.w	r8, #0
 8013f62:	f300 808c 	bgt.w	801407e <_strtod_l+0x87e>
 8013f66:	9b06      	ldr	r3, [sp, #24]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	dd08      	ble.n	8013f7e <_strtod_l+0x77e>
 8013f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f6e:	9905      	ldr	r1, [sp, #20]
 8013f70:	4620      	mov	r0, r4
 8013f72:	f002 fa75 	bl	8016460 <__pow5mult>
 8013f76:	9005      	str	r0, [sp, #20]
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	f43f ae89 	beq.w	8013c90 <_strtod_l+0x490>
 8013f7e:	2f00      	cmp	r7, #0
 8013f80:	dd08      	ble.n	8013f94 <_strtod_l+0x794>
 8013f82:	9905      	ldr	r1, [sp, #20]
 8013f84:	463a      	mov	r2, r7
 8013f86:	4620      	mov	r0, r4
 8013f88:	f002 fac4 	bl	8016514 <__lshift>
 8013f8c:	9005      	str	r0, [sp, #20]
 8013f8e:	2800      	cmp	r0, #0
 8013f90:	f43f ae7e 	beq.w	8013c90 <_strtod_l+0x490>
 8013f94:	f1b9 0f00 	cmp.w	r9, #0
 8013f98:	dd08      	ble.n	8013fac <_strtod_l+0x7ac>
 8013f9a:	4631      	mov	r1, r6
 8013f9c:	464a      	mov	r2, r9
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f002 fab8 	bl	8016514 <__lshift>
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	2800      	cmp	r0, #0
 8013fa8:	f43f ae72 	beq.w	8013c90 <_strtod_l+0x490>
 8013fac:	9a05      	ldr	r2, [sp, #20]
 8013fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f002 fb3b 	bl	801662c <__mdiff>
 8013fb6:	4605      	mov	r5, r0
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	f43f ae69 	beq.w	8013c90 <_strtod_l+0x490>
 8013fbe:	68c3      	ldr	r3, [r0, #12]
 8013fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	60c3      	str	r3, [r0, #12]
 8013fc6:	4631      	mov	r1, r6
 8013fc8:	f002 fb14 	bl	80165f4 <__mcmp>
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	da60      	bge.n	8014092 <_strtod_l+0x892>
 8013fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fd2:	ea53 030a 	orrs.w	r3, r3, sl
 8013fd6:	f040 8082 	bne.w	80140de <_strtod_l+0x8de>
 8013fda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d17d      	bne.n	80140de <_strtod_l+0x8de>
 8013fe2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013fe6:	0d1b      	lsrs	r3, r3, #20
 8013fe8:	051b      	lsls	r3, r3, #20
 8013fea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013fee:	d976      	bls.n	80140de <_strtod_l+0x8de>
 8013ff0:	696b      	ldr	r3, [r5, #20]
 8013ff2:	b913      	cbnz	r3, 8013ffa <_strtod_l+0x7fa>
 8013ff4:	692b      	ldr	r3, [r5, #16]
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	dd71      	ble.n	80140de <_strtod_l+0x8de>
 8013ffa:	4629      	mov	r1, r5
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	4620      	mov	r0, r4
 8014000:	f002 fa88 	bl	8016514 <__lshift>
 8014004:	4631      	mov	r1, r6
 8014006:	4605      	mov	r5, r0
 8014008:	f002 faf4 	bl	80165f4 <__mcmp>
 801400c:	2800      	cmp	r0, #0
 801400e:	dd66      	ble.n	80140de <_strtod_l+0x8de>
 8014010:	9904      	ldr	r1, [sp, #16]
 8014012:	4a53      	ldr	r2, [pc, #332]	; (8014160 <_strtod_l+0x960>)
 8014014:	465b      	mov	r3, fp
 8014016:	2900      	cmp	r1, #0
 8014018:	f000 8081 	beq.w	801411e <_strtod_l+0x91e>
 801401c:	ea02 010b 	and.w	r1, r2, fp
 8014020:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014024:	dc7b      	bgt.n	801411e <_strtod_l+0x91e>
 8014026:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801402a:	f77f aea9 	ble.w	8013d80 <_strtod_l+0x580>
 801402e:	4b4d      	ldr	r3, [pc, #308]	; (8014164 <_strtod_l+0x964>)
 8014030:	4650      	mov	r0, sl
 8014032:	4659      	mov	r1, fp
 8014034:	2200      	movs	r2, #0
 8014036:	f7ec faf7 	bl	8000628 <__aeabi_dmul>
 801403a:	460b      	mov	r3, r1
 801403c:	4303      	orrs	r3, r0
 801403e:	bf08      	it	eq
 8014040:	2322      	moveq	r3, #34	; 0x22
 8014042:	4682      	mov	sl, r0
 8014044:	468b      	mov	fp, r1
 8014046:	bf08      	it	eq
 8014048:	6023      	streq	r3, [r4, #0]
 801404a:	e62b      	b.n	8013ca4 <_strtod_l+0x4a4>
 801404c:	f04f 32ff 	mov.w	r2, #4294967295
 8014050:	fa02 f303 	lsl.w	r3, r2, r3
 8014054:	ea03 0a0a 	and.w	sl, r3, sl
 8014058:	e6e3      	b.n	8013e22 <_strtod_l+0x622>
 801405a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801405e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014062:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014066:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801406a:	fa01 f308 	lsl.w	r3, r1, r8
 801406e:	9308      	str	r3, [sp, #32]
 8014070:	910d      	str	r1, [sp, #52]	; 0x34
 8014072:	e746      	b.n	8013f02 <_strtod_l+0x702>
 8014074:	2300      	movs	r3, #0
 8014076:	9308      	str	r3, [sp, #32]
 8014078:	2301      	movs	r3, #1
 801407a:	930d      	str	r3, [sp, #52]	; 0x34
 801407c:	e741      	b.n	8013f02 <_strtod_l+0x702>
 801407e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014080:	4642      	mov	r2, r8
 8014082:	4620      	mov	r0, r4
 8014084:	f002 fa46 	bl	8016514 <__lshift>
 8014088:	9018      	str	r0, [sp, #96]	; 0x60
 801408a:	2800      	cmp	r0, #0
 801408c:	f47f af6b 	bne.w	8013f66 <_strtod_l+0x766>
 8014090:	e5fe      	b.n	8013c90 <_strtod_l+0x490>
 8014092:	465f      	mov	r7, fp
 8014094:	d16e      	bne.n	8014174 <_strtod_l+0x974>
 8014096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014098:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801409c:	b342      	cbz	r2, 80140f0 <_strtod_l+0x8f0>
 801409e:	4a32      	ldr	r2, [pc, #200]	; (8014168 <_strtod_l+0x968>)
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d128      	bne.n	80140f6 <_strtod_l+0x8f6>
 80140a4:	9b04      	ldr	r3, [sp, #16]
 80140a6:	4651      	mov	r1, sl
 80140a8:	b1eb      	cbz	r3, 80140e6 <_strtod_l+0x8e6>
 80140aa:	4b2d      	ldr	r3, [pc, #180]	; (8014160 <_strtod_l+0x960>)
 80140ac:	403b      	ands	r3, r7
 80140ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80140b2:	f04f 32ff 	mov.w	r2, #4294967295
 80140b6:	d819      	bhi.n	80140ec <_strtod_l+0x8ec>
 80140b8:	0d1b      	lsrs	r3, r3, #20
 80140ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80140be:	fa02 f303 	lsl.w	r3, r2, r3
 80140c2:	4299      	cmp	r1, r3
 80140c4:	d117      	bne.n	80140f6 <_strtod_l+0x8f6>
 80140c6:	4b29      	ldr	r3, [pc, #164]	; (801416c <_strtod_l+0x96c>)
 80140c8:	429f      	cmp	r7, r3
 80140ca:	d102      	bne.n	80140d2 <_strtod_l+0x8d2>
 80140cc:	3101      	adds	r1, #1
 80140ce:	f43f addf 	beq.w	8013c90 <_strtod_l+0x490>
 80140d2:	4b23      	ldr	r3, [pc, #140]	; (8014160 <_strtod_l+0x960>)
 80140d4:	403b      	ands	r3, r7
 80140d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80140da:	f04f 0a00 	mov.w	sl, #0
 80140de:	9b04      	ldr	r3, [sp, #16]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d1a4      	bne.n	801402e <_strtod_l+0x82e>
 80140e4:	e5de      	b.n	8013ca4 <_strtod_l+0x4a4>
 80140e6:	f04f 33ff 	mov.w	r3, #4294967295
 80140ea:	e7ea      	b.n	80140c2 <_strtod_l+0x8c2>
 80140ec:	4613      	mov	r3, r2
 80140ee:	e7e8      	b.n	80140c2 <_strtod_l+0x8c2>
 80140f0:	ea53 030a 	orrs.w	r3, r3, sl
 80140f4:	d08c      	beq.n	8014010 <_strtod_l+0x810>
 80140f6:	9b08      	ldr	r3, [sp, #32]
 80140f8:	b1db      	cbz	r3, 8014132 <_strtod_l+0x932>
 80140fa:	423b      	tst	r3, r7
 80140fc:	d0ef      	beq.n	80140de <_strtod_l+0x8de>
 80140fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014100:	9a04      	ldr	r2, [sp, #16]
 8014102:	4650      	mov	r0, sl
 8014104:	4659      	mov	r1, fp
 8014106:	b1c3      	cbz	r3, 801413a <_strtod_l+0x93a>
 8014108:	f7ff fb5e 	bl	80137c8 <sulp>
 801410c:	4602      	mov	r2, r0
 801410e:	460b      	mov	r3, r1
 8014110:	ec51 0b18 	vmov	r0, r1, d8
 8014114:	f7ec f8d2 	bl	80002bc <__adddf3>
 8014118:	4682      	mov	sl, r0
 801411a:	468b      	mov	fp, r1
 801411c:	e7df      	b.n	80140de <_strtod_l+0x8de>
 801411e:	4013      	ands	r3, r2
 8014120:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014124:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014128:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801412c:	f04f 3aff 	mov.w	sl, #4294967295
 8014130:	e7d5      	b.n	80140de <_strtod_l+0x8de>
 8014132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014134:	ea13 0f0a 	tst.w	r3, sl
 8014138:	e7e0      	b.n	80140fc <_strtod_l+0x8fc>
 801413a:	f7ff fb45 	bl	80137c8 <sulp>
 801413e:	4602      	mov	r2, r0
 8014140:	460b      	mov	r3, r1
 8014142:	ec51 0b18 	vmov	r0, r1, d8
 8014146:	f7ec f8b7 	bl	80002b8 <__aeabi_dsub>
 801414a:	2200      	movs	r2, #0
 801414c:	2300      	movs	r3, #0
 801414e:	4682      	mov	sl, r0
 8014150:	468b      	mov	fp, r1
 8014152:	f7ec fcd1 	bl	8000af8 <__aeabi_dcmpeq>
 8014156:	2800      	cmp	r0, #0
 8014158:	d0c1      	beq.n	80140de <_strtod_l+0x8de>
 801415a:	e611      	b.n	8013d80 <_strtod_l+0x580>
 801415c:	fffffc02 	.word	0xfffffc02
 8014160:	7ff00000 	.word	0x7ff00000
 8014164:	39500000 	.word	0x39500000
 8014168:	000fffff 	.word	0x000fffff
 801416c:	7fefffff 	.word	0x7fefffff
 8014170:	080256d0 	.word	0x080256d0
 8014174:	4631      	mov	r1, r6
 8014176:	4628      	mov	r0, r5
 8014178:	f002 fbba 	bl	80168f0 <__ratio>
 801417c:	ec59 8b10 	vmov	r8, r9, d0
 8014180:	ee10 0a10 	vmov	r0, s0
 8014184:	2200      	movs	r2, #0
 8014186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801418a:	4649      	mov	r1, r9
 801418c:	f7ec fcc8 	bl	8000b20 <__aeabi_dcmple>
 8014190:	2800      	cmp	r0, #0
 8014192:	d07a      	beq.n	801428a <_strtod_l+0xa8a>
 8014194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014196:	2b00      	cmp	r3, #0
 8014198:	d04a      	beq.n	8014230 <_strtod_l+0xa30>
 801419a:	4b95      	ldr	r3, [pc, #596]	; (80143f0 <_strtod_l+0xbf0>)
 801419c:	2200      	movs	r2, #0
 801419e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80141a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80143f0 <_strtod_l+0xbf0>
 80141a6:	f04f 0800 	mov.w	r8, #0
 80141aa:	4b92      	ldr	r3, [pc, #584]	; (80143f4 <_strtod_l+0xbf4>)
 80141ac:	403b      	ands	r3, r7
 80141ae:	930d      	str	r3, [sp, #52]	; 0x34
 80141b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141b2:	4b91      	ldr	r3, [pc, #580]	; (80143f8 <_strtod_l+0xbf8>)
 80141b4:	429a      	cmp	r2, r3
 80141b6:	f040 80b0 	bne.w	801431a <_strtod_l+0xb1a>
 80141ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80141be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80141c2:	ec4b ab10 	vmov	d0, sl, fp
 80141c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80141ca:	f002 fab9 	bl	8016740 <__ulp>
 80141ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80141d2:	ec53 2b10 	vmov	r2, r3, d0
 80141d6:	f7ec fa27 	bl	8000628 <__aeabi_dmul>
 80141da:	4652      	mov	r2, sl
 80141dc:	465b      	mov	r3, fp
 80141de:	f7ec f86d 	bl	80002bc <__adddf3>
 80141e2:	460b      	mov	r3, r1
 80141e4:	4983      	ldr	r1, [pc, #524]	; (80143f4 <_strtod_l+0xbf4>)
 80141e6:	4a85      	ldr	r2, [pc, #532]	; (80143fc <_strtod_l+0xbfc>)
 80141e8:	4019      	ands	r1, r3
 80141ea:	4291      	cmp	r1, r2
 80141ec:	4682      	mov	sl, r0
 80141ee:	d960      	bls.n	80142b2 <_strtod_l+0xab2>
 80141f0:	ee18 3a90 	vmov	r3, s17
 80141f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d104      	bne.n	8014206 <_strtod_l+0xa06>
 80141fc:	ee18 3a10 	vmov	r3, s16
 8014200:	3301      	adds	r3, #1
 8014202:	f43f ad45 	beq.w	8013c90 <_strtod_l+0x490>
 8014206:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014408 <_strtod_l+0xc08>
 801420a:	f04f 3aff 	mov.w	sl, #4294967295
 801420e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014210:	4620      	mov	r0, r4
 8014212:	f001 ff63 	bl	80160dc <_Bfree>
 8014216:	9905      	ldr	r1, [sp, #20]
 8014218:	4620      	mov	r0, r4
 801421a:	f001 ff5f 	bl	80160dc <_Bfree>
 801421e:	4631      	mov	r1, r6
 8014220:	4620      	mov	r0, r4
 8014222:	f001 ff5b 	bl	80160dc <_Bfree>
 8014226:	4629      	mov	r1, r5
 8014228:	4620      	mov	r0, r4
 801422a:	f001 ff57 	bl	80160dc <_Bfree>
 801422e:	e61a      	b.n	8013e66 <_strtod_l+0x666>
 8014230:	f1ba 0f00 	cmp.w	sl, #0
 8014234:	d11b      	bne.n	801426e <_strtod_l+0xa6e>
 8014236:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801423a:	b9f3      	cbnz	r3, 801427a <_strtod_l+0xa7a>
 801423c:	4b6c      	ldr	r3, [pc, #432]	; (80143f0 <_strtod_l+0xbf0>)
 801423e:	2200      	movs	r2, #0
 8014240:	4640      	mov	r0, r8
 8014242:	4649      	mov	r1, r9
 8014244:	f7ec fc62 	bl	8000b0c <__aeabi_dcmplt>
 8014248:	b9d0      	cbnz	r0, 8014280 <_strtod_l+0xa80>
 801424a:	4640      	mov	r0, r8
 801424c:	4649      	mov	r1, r9
 801424e:	4b6c      	ldr	r3, [pc, #432]	; (8014400 <_strtod_l+0xc00>)
 8014250:	2200      	movs	r2, #0
 8014252:	f7ec f9e9 	bl	8000628 <__aeabi_dmul>
 8014256:	4680      	mov	r8, r0
 8014258:	4689      	mov	r9, r1
 801425a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801425e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014262:	9315      	str	r3, [sp, #84]	; 0x54
 8014264:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014268:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801426c:	e79d      	b.n	80141aa <_strtod_l+0x9aa>
 801426e:	f1ba 0f01 	cmp.w	sl, #1
 8014272:	d102      	bne.n	801427a <_strtod_l+0xa7a>
 8014274:	2f00      	cmp	r7, #0
 8014276:	f43f ad83 	beq.w	8013d80 <_strtod_l+0x580>
 801427a:	4b62      	ldr	r3, [pc, #392]	; (8014404 <_strtod_l+0xc04>)
 801427c:	2200      	movs	r2, #0
 801427e:	e78e      	b.n	801419e <_strtod_l+0x99e>
 8014280:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014400 <_strtod_l+0xc00>
 8014284:	f04f 0800 	mov.w	r8, #0
 8014288:	e7e7      	b.n	801425a <_strtod_l+0xa5a>
 801428a:	4b5d      	ldr	r3, [pc, #372]	; (8014400 <_strtod_l+0xc00>)
 801428c:	4640      	mov	r0, r8
 801428e:	4649      	mov	r1, r9
 8014290:	2200      	movs	r2, #0
 8014292:	f7ec f9c9 	bl	8000628 <__aeabi_dmul>
 8014296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014298:	4680      	mov	r8, r0
 801429a:	4689      	mov	r9, r1
 801429c:	b933      	cbnz	r3, 80142ac <_strtod_l+0xaac>
 801429e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142a2:	900e      	str	r0, [sp, #56]	; 0x38
 80142a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80142a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142aa:	e7dd      	b.n	8014268 <_strtod_l+0xa68>
 80142ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80142b0:	e7f9      	b.n	80142a6 <_strtod_l+0xaa6>
 80142b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80142b6:	9b04      	ldr	r3, [sp, #16]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1a8      	bne.n	801420e <_strtod_l+0xa0e>
 80142bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142c2:	0d1b      	lsrs	r3, r3, #20
 80142c4:	051b      	lsls	r3, r3, #20
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d1a1      	bne.n	801420e <_strtod_l+0xa0e>
 80142ca:	4640      	mov	r0, r8
 80142cc:	4649      	mov	r1, r9
 80142ce:	f7ec fd0b 	bl	8000ce8 <__aeabi_d2lz>
 80142d2:	f7ec f97b 	bl	80005cc <__aeabi_l2d>
 80142d6:	4602      	mov	r2, r0
 80142d8:	460b      	mov	r3, r1
 80142da:	4640      	mov	r0, r8
 80142dc:	4649      	mov	r1, r9
 80142de:	f7eb ffeb 	bl	80002b8 <__aeabi_dsub>
 80142e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142e8:	ea43 030a 	orr.w	r3, r3, sl
 80142ec:	4313      	orrs	r3, r2
 80142ee:	4680      	mov	r8, r0
 80142f0:	4689      	mov	r9, r1
 80142f2:	d055      	beq.n	80143a0 <_strtod_l+0xba0>
 80142f4:	a336      	add	r3, pc, #216	; (adr r3, 80143d0 <_strtod_l+0xbd0>)
 80142f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fa:	f7ec fc07 	bl	8000b0c <__aeabi_dcmplt>
 80142fe:	2800      	cmp	r0, #0
 8014300:	f47f acd0 	bne.w	8013ca4 <_strtod_l+0x4a4>
 8014304:	a334      	add	r3, pc, #208	; (adr r3, 80143d8 <_strtod_l+0xbd8>)
 8014306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430a:	4640      	mov	r0, r8
 801430c:	4649      	mov	r1, r9
 801430e:	f7ec fc1b 	bl	8000b48 <__aeabi_dcmpgt>
 8014312:	2800      	cmp	r0, #0
 8014314:	f43f af7b 	beq.w	801420e <_strtod_l+0xa0e>
 8014318:	e4c4      	b.n	8013ca4 <_strtod_l+0x4a4>
 801431a:	9b04      	ldr	r3, [sp, #16]
 801431c:	b333      	cbz	r3, 801436c <_strtod_l+0xb6c>
 801431e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014320:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014324:	d822      	bhi.n	801436c <_strtod_l+0xb6c>
 8014326:	a32e      	add	r3, pc, #184	; (adr r3, 80143e0 <_strtod_l+0xbe0>)
 8014328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432c:	4640      	mov	r0, r8
 801432e:	4649      	mov	r1, r9
 8014330:	f7ec fbf6 	bl	8000b20 <__aeabi_dcmple>
 8014334:	b1a0      	cbz	r0, 8014360 <_strtod_l+0xb60>
 8014336:	4649      	mov	r1, r9
 8014338:	4640      	mov	r0, r8
 801433a:	f7ec fc4d 	bl	8000bd8 <__aeabi_d2uiz>
 801433e:	2801      	cmp	r0, #1
 8014340:	bf38      	it	cc
 8014342:	2001      	movcc	r0, #1
 8014344:	f7ec f8f6 	bl	8000534 <__aeabi_ui2d>
 8014348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801434a:	4680      	mov	r8, r0
 801434c:	4689      	mov	r9, r1
 801434e:	bb23      	cbnz	r3, 801439a <_strtod_l+0xb9a>
 8014350:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014354:	9010      	str	r0, [sp, #64]	; 0x40
 8014356:	9311      	str	r3, [sp, #68]	; 0x44
 8014358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801435c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014364:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014368:	1a9b      	subs	r3, r3, r2
 801436a:	9309      	str	r3, [sp, #36]	; 0x24
 801436c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014370:	eeb0 0a48 	vmov.f32	s0, s16
 8014374:	eef0 0a68 	vmov.f32	s1, s17
 8014378:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801437c:	f002 f9e0 	bl	8016740 <__ulp>
 8014380:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014384:	ec53 2b10 	vmov	r2, r3, d0
 8014388:	f7ec f94e 	bl	8000628 <__aeabi_dmul>
 801438c:	ec53 2b18 	vmov	r2, r3, d8
 8014390:	f7eb ff94 	bl	80002bc <__adddf3>
 8014394:	4682      	mov	sl, r0
 8014396:	468b      	mov	fp, r1
 8014398:	e78d      	b.n	80142b6 <_strtod_l+0xab6>
 801439a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801439e:	e7db      	b.n	8014358 <_strtod_l+0xb58>
 80143a0:	a311      	add	r3, pc, #68	; (adr r3, 80143e8 <_strtod_l+0xbe8>)
 80143a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a6:	f7ec fbb1 	bl	8000b0c <__aeabi_dcmplt>
 80143aa:	e7b2      	b.n	8014312 <_strtod_l+0xb12>
 80143ac:	2300      	movs	r3, #0
 80143ae:	930a      	str	r3, [sp, #40]	; 0x28
 80143b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80143b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143b4:	6013      	str	r3, [r2, #0]
 80143b6:	f7ff ba6b 	b.w	8013890 <_strtod_l+0x90>
 80143ba:	2a65      	cmp	r2, #101	; 0x65
 80143bc:	f43f ab5f 	beq.w	8013a7e <_strtod_l+0x27e>
 80143c0:	2a45      	cmp	r2, #69	; 0x45
 80143c2:	f43f ab5c 	beq.w	8013a7e <_strtod_l+0x27e>
 80143c6:	2301      	movs	r3, #1
 80143c8:	f7ff bb94 	b.w	8013af4 <_strtod_l+0x2f4>
 80143cc:	f3af 8000 	nop.w
 80143d0:	94a03595 	.word	0x94a03595
 80143d4:	3fdfffff 	.word	0x3fdfffff
 80143d8:	35afe535 	.word	0x35afe535
 80143dc:	3fe00000 	.word	0x3fe00000
 80143e0:	ffc00000 	.word	0xffc00000
 80143e4:	41dfffff 	.word	0x41dfffff
 80143e8:	94a03595 	.word	0x94a03595
 80143ec:	3fcfffff 	.word	0x3fcfffff
 80143f0:	3ff00000 	.word	0x3ff00000
 80143f4:	7ff00000 	.word	0x7ff00000
 80143f8:	7fe00000 	.word	0x7fe00000
 80143fc:	7c9fffff 	.word	0x7c9fffff
 8014400:	3fe00000 	.word	0x3fe00000
 8014404:	bff00000 	.word	0xbff00000
 8014408:	7fefffff 	.word	0x7fefffff

0801440c <strtof>:
 801440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014410:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80144c0 <strtof+0xb4>
 8014414:	4b26      	ldr	r3, [pc, #152]	; (80144b0 <strtof+0xa4>)
 8014416:	460a      	mov	r2, r1
 8014418:	ed2d 8b02 	vpush	{d8}
 801441c:	4601      	mov	r1, r0
 801441e:	f8d8 0000 	ldr.w	r0, [r8]
 8014422:	f7ff f9ed 	bl	8013800 <_strtod_l>
 8014426:	ec55 4b10 	vmov	r4, r5, d0
 801442a:	ee10 2a10 	vmov	r2, s0
 801442e:	ee10 0a10 	vmov	r0, s0
 8014432:	462b      	mov	r3, r5
 8014434:	4629      	mov	r1, r5
 8014436:	f7ec fb91 	bl	8000b5c <__aeabi_dcmpun>
 801443a:	b190      	cbz	r0, 8014462 <strtof+0x56>
 801443c:	2d00      	cmp	r5, #0
 801443e:	481d      	ldr	r0, [pc, #116]	; (80144b4 <strtof+0xa8>)
 8014440:	da09      	bge.n	8014456 <strtof+0x4a>
 8014442:	f002 fc45 	bl	8016cd0 <nanf>
 8014446:	eeb1 8a40 	vneg.f32	s16, s0
 801444a:	eeb0 0a48 	vmov.f32	s0, s16
 801444e:	ecbd 8b02 	vpop	{d8}
 8014452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014456:	ecbd 8b02 	vpop	{d8}
 801445a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801445e:	f002 bc37 	b.w	8016cd0 <nanf>
 8014462:	4620      	mov	r0, r4
 8014464:	4629      	mov	r1, r5
 8014466:	f7ec fbd7 	bl	8000c18 <__aeabi_d2f>
 801446a:	ee08 0a10 	vmov	s16, r0
 801446e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80144b8 <strtof+0xac>
 8014472:	eeb0 7ac8 	vabs.f32	s14, s16
 8014476:	eeb4 7a67 	vcmp.f32	s14, s15
 801447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801447e:	dde4      	ble.n	801444a <strtof+0x3e>
 8014480:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014484:	4b0d      	ldr	r3, [pc, #52]	; (80144bc <strtof+0xb0>)
 8014486:	f04f 32ff 	mov.w	r2, #4294967295
 801448a:	4620      	mov	r0, r4
 801448c:	4639      	mov	r1, r7
 801448e:	f7ec fb65 	bl	8000b5c <__aeabi_dcmpun>
 8014492:	b940      	cbnz	r0, 80144a6 <strtof+0x9a>
 8014494:	4b09      	ldr	r3, [pc, #36]	; (80144bc <strtof+0xb0>)
 8014496:	f04f 32ff 	mov.w	r2, #4294967295
 801449a:	4620      	mov	r0, r4
 801449c:	4639      	mov	r1, r7
 801449e:	f7ec fb3f 	bl	8000b20 <__aeabi_dcmple>
 80144a2:	2800      	cmp	r0, #0
 80144a4:	d0d1      	beq.n	801444a <strtof+0x3e>
 80144a6:	f8d8 3000 	ldr.w	r3, [r8]
 80144aa:	2222      	movs	r2, #34	; 0x22
 80144ac:	601a      	str	r2, [r3, #0]
 80144ae:	e7cc      	b.n	801444a <strtof+0x3e>
 80144b0:	20000130 	.word	0x20000130
 80144b4:	08025b10 	.word	0x08025b10
 80144b8:	7f7fffff 	.word	0x7f7fffff
 80144bc:	7fefffff 	.word	0x7fefffff
 80144c0:	200000c8 	.word	0x200000c8

080144c4 <__strtok_r>:
 80144c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144c6:	b908      	cbnz	r0, 80144cc <__strtok_r+0x8>
 80144c8:	6810      	ldr	r0, [r2, #0]
 80144ca:	b188      	cbz	r0, 80144f0 <__strtok_r+0x2c>
 80144cc:	4604      	mov	r4, r0
 80144ce:	4620      	mov	r0, r4
 80144d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80144d4:	460f      	mov	r7, r1
 80144d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80144da:	b91e      	cbnz	r6, 80144e4 <__strtok_r+0x20>
 80144dc:	b965      	cbnz	r5, 80144f8 <__strtok_r+0x34>
 80144de:	6015      	str	r5, [r2, #0]
 80144e0:	4628      	mov	r0, r5
 80144e2:	e005      	b.n	80144f0 <__strtok_r+0x2c>
 80144e4:	42b5      	cmp	r5, r6
 80144e6:	d1f6      	bne.n	80144d6 <__strtok_r+0x12>
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1f0      	bne.n	80144ce <__strtok_r+0xa>
 80144ec:	6014      	str	r4, [r2, #0]
 80144ee:	7003      	strb	r3, [r0, #0]
 80144f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f2:	461c      	mov	r4, r3
 80144f4:	e00c      	b.n	8014510 <__strtok_r+0x4c>
 80144f6:	b915      	cbnz	r5, 80144fe <__strtok_r+0x3a>
 80144f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80144fc:	460e      	mov	r6, r1
 80144fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014502:	42ab      	cmp	r3, r5
 8014504:	d1f7      	bne.n	80144f6 <__strtok_r+0x32>
 8014506:	2b00      	cmp	r3, #0
 8014508:	d0f3      	beq.n	80144f2 <__strtok_r+0x2e>
 801450a:	2300      	movs	r3, #0
 801450c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014510:	6014      	str	r4, [r2, #0]
 8014512:	e7ed      	b.n	80144f0 <__strtok_r+0x2c>

08014514 <strtok_r>:
 8014514:	2301      	movs	r3, #1
 8014516:	f7ff bfd5 	b.w	80144c4 <__strtok_r>
	...

0801451c <_strtoul_l.constprop.0>:
 801451c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014520:	4f36      	ldr	r7, [pc, #216]	; (80145fc <_strtoul_l.constprop.0+0xe0>)
 8014522:	4686      	mov	lr, r0
 8014524:	460d      	mov	r5, r1
 8014526:	4628      	mov	r0, r5
 8014528:	f815 4b01 	ldrb.w	r4, [r5], #1
 801452c:	5de6      	ldrb	r6, [r4, r7]
 801452e:	f016 0608 	ands.w	r6, r6, #8
 8014532:	d1f8      	bne.n	8014526 <_strtoul_l.constprop.0+0xa>
 8014534:	2c2d      	cmp	r4, #45	; 0x2d
 8014536:	d12f      	bne.n	8014598 <_strtoul_l.constprop.0+0x7c>
 8014538:	782c      	ldrb	r4, [r5, #0]
 801453a:	2601      	movs	r6, #1
 801453c:	1c85      	adds	r5, r0, #2
 801453e:	2b00      	cmp	r3, #0
 8014540:	d057      	beq.n	80145f2 <_strtoul_l.constprop.0+0xd6>
 8014542:	2b10      	cmp	r3, #16
 8014544:	d109      	bne.n	801455a <_strtoul_l.constprop.0+0x3e>
 8014546:	2c30      	cmp	r4, #48	; 0x30
 8014548:	d107      	bne.n	801455a <_strtoul_l.constprop.0+0x3e>
 801454a:	7828      	ldrb	r0, [r5, #0]
 801454c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014550:	2858      	cmp	r0, #88	; 0x58
 8014552:	d149      	bne.n	80145e8 <_strtoul_l.constprop.0+0xcc>
 8014554:	786c      	ldrb	r4, [r5, #1]
 8014556:	2310      	movs	r3, #16
 8014558:	3502      	adds	r5, #2
 801455a:	f04f 38ff 	mov.w	r8, #4294967295
 801455e:	2700      	movs	r7, #0
 8014560:	fbb8 f8f3 	udiv	r8, r8, r3
 8014564:	fb03 f908 	mul.w	r9, r3, r8
 8014568:	ea6f 0909 	mvn.w	r9, r9
 801456c:	4638      	mov	r0, r7
 801456e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014572:	f1bc 0f09 	cmp.w	ip, #9
 8014576:	d814      	bhi.n	80145a2 <_strtoul_l.constprop.0+0x86>
 8014578:	4664      	mov	r4, ip
 801457a:	42a3      	cmp	r3, r4
 801457c:	dd22      	ble.n	80145c4 <_strtoul_l.constprop.0+0xa8>
 801457e:	2f00      	cmp	r7, #0
 8014580:	db1d      	blt.n	80145be <_strtoul_l.constprop.0+0xa2>
 8014582:	4580      	cmp	r8, r0
 8014584:	d31b      	bcc.n	80145be <_strtoul_l.constprop.0+0xa2>
 8014586:	d101      	bne.n	801458c <_strtoul_l.constprop.0+0x70>
 8014588:	45a1      	cmp	r9, r4
 801458a:	db18      	blt.n	80145be <_strtoul_l.constprop.0+0xa2>
 801458c:	fb00 4003 	mla	r0, r0, r3, r4
 8014590:	2701      	movs	r7, #1
 8014592:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014596:	e7ea      	b.n	801456e <_strtoul_l.constprop.0+0x52>
 8014598:	2c2b      	cmp	r4, #43	; 0x2b
 801459a:	bf04      	itt	eq
 801459c:	782c      	ldrbeq	r4, [r5, #0]
 801459e:	1c85      	addeq	r5, r0, #2
 80145a0:	e7cd      	b.n	801453e <_strtoul_l.constprop.0+0x22>
 80145a2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80145a6:	f1bc 0f19 	cmp.w	ip, #25
 80145aa:	d801      	bhi.n	80145b0 <_strtoul_l.constprop.0+0x94>
 80145ac:	3c37      	subs	r4, #55	; 0x37
 80145ae:	e7e4      	b.n	801457a <_strtoul_l.constprop.0+0x5e>
 80145b0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80145b4:	f1bc 0f19 	cmp.w	ip, #25
 80145b8:	d804      	bhi.n	80145c4 <_strtoul_l.constprop.0+0xa8>
 80145ba:	3c57      	subs	r4, #87	; 0x57
 80145bc:	e7dd      	b.n	801457a <_strtoul_l.constprop.0+0x5e>
 80145be:	f04f 37ff 	mov.w	r7, #4294967295
 80145c2:	e7e6      	b.n	8014592 <_strtoul_l.constprop.0+0x76>
 80145c4:	2f00      	cmp	r7, #0
 80145c6:	da07      	bge.n	80145d8 <_strtoul_l.constprop.0+0xbc>
 80145c8:	2322      	movs	r3, #34	; 0x22
 80145ca:	f8ce 3000 	str.w	r3, [lr]
 80145ce:	f04f 30ff 	mov.w	r0, #4294967295
 80145d2:	b932      	cbnz	r2, 80145e2 <_strtoul_l.constprop.0+0xc6>
 80145d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145d8:	b106      	cbz	r6, 80145dc <_strtoul_l.constprop.0+0xc0>
 80145da:	4240      	negs	r0, r0
 80145dc:	2a00      	cmp	r2, #0
 80145de:	d0f9      	beq.n	80145d4 <_strtoul_l.constprop.0+0xb8>
 80145e0:	b107      	cbz	r7, 80145e4 <_strtoul_l.constprop.0+0xc8>
 80145e2:	1e69      	subs	r1, r5, #1
 80145e4:	6011      	str	r1, [r2, #0]
 80145e6:	e7f5      	b.n	80145d4 <_strtoul_l.constprop.0+0xb8>
 80145e8:	2430      	movs	r4, #48	; 0x30
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d1b5      	bne.n	801455a <_strtoul_l.constprop.0+0x3e>
 80145ee:	2308      	movs	r3, #8
 80145f0:	e7b3      	b.n	801455a <_strtoul_l.constprop.0+0x3e>
 80145f2:	2c30      	cmp	r4, #48	; 0x30
 80145f4:	d0a9      	beq.n	801454a <_strtoul_l.constprop.0+0x2e>
 80145f6:	230a      	movs	r3, #10
 80145f8:	e7af      	b.n	801455a <_strtoul_l.constprop.0+0x3e>
 80145fa:	bf00      	nop
 80145fc:	080256f9 	.word	0x080256f9

08014600 <strtoul>:
 8014600:	4613      	mov	r3, r2
 8014602:	460a      	mov	r2, r1
 8014604:	4601      	mov	r1, r0
 8014606:	4802      	ldr	r0, [pc, #8]	; (8014610 <strtoul+0x10>)
 8014608:	6800      	ldr	r0, [r0, #0]
 801460a:	f7ff bf87 	b.w	801451c <_strtoul_l.constprop.0>
 801460e:	bf00      	nop
 8014610:	200000c8 	.word	0x200000c8

08014614 <_vsniprintf_r>:
 8014614:	b530      	push	{r4, r5, lr}
 8014616:	4614      	mov	r4, r2
 8014618:	2c00      	cmp	r4, #0
 801461a:	b09b      	sub	sp, #108	; 0x6c
 801461c:	4605      	mov	r5, r0
 801461e:	461a      	mov	r2, r3
 8014620:	da05      	bge.n	801462e <_vsniprintf_r+0x1a>
 8014622:	238b      	movs	r3, #139	; 0x8b
 8014624:	6003      	str	r3, [r0, #0]
 8014626:	f04f 30ff 	mov.w	r0, #4294967295
 801462a:	b01b      	add	sp, #108	; 0x6c
 801462c:	bd30      	pop	{r4, r5, pc}
 801462e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014632:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014636:	bf14      	ite	ne
 8014638:	f104 33ff 	addne.w	r3, r4, #4294967295
 801463c:	4623      	moveq	r3, r4
 801463e:	9302      	str	r3, [sp, #8]
 8014640:	9305      	str	r3, [sp, #20]
 8014642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014646:	9100      	str	r1, [sp, #0]
 8014648:	9104      	str	r1, [sp, #16]
 801464a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801464e:	4669      	mov	r1, sp
 8014650:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014652:	f002 fa35 	bl	8016ac0 <_svfiprintf_r>
 8014656:	1c43      	adds	r3, r0, #1
 8014658:	bfbc      	itt	lt
 801465a:	238b      	movlt	r3, #139	; 0x8b
 801465c:	602b      	strlt	r3, [r5, #0]
 801465e:	2c00      	cmp	r4, #0
 8014660:	d0e3      	beq.n	801462a <_vsniprintf_r+0x16>
 8014662:	9b00      	ldr	r3, [sp, #0]
 8014664:	2200      	movs	r2, #0
 8014666:	701a      	strb	r2, [r3, #0]
 8014668:	e7df      	b.n	801462a <_vsniprintf_r+0x16>
	...

0801466c <vsniprintf>:
 801466c:	b507      	push	{r0, r1, r2, lr}
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	4613      	mov	r3, r2
 8014672:	460a      	mov	r2, r1
 8014674:	4601      	mov	r1, r0
 8014676:	4803      	ldr	r0, [pc, #12]	; (8014684 <vsniprintf+0x18>)
 8014678:	6800      	ldr	r0, [r0, #0]
 801467a:	f7ff ffcb 	bl	8014614 <_vsniprintf_r>
 801467e:	b003      	add	sp, #12
 8014680:	f85d fb04 	ldr.w	pc, [sp], #4
 8014684:	200000c8 	.word	0x200000c8

08014688 <__swbuf_r>:
 8014688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801468a:	460e      	mov	r6, r1
 801468c:	4614      	mov	r4, r2
 801468e:	4605      	mov	r5, r0
 8014690:	b118      	cbz	r0, 801469a <__swbuf_r+0x12>
 8014692:	6983      	ldr	r3, [r0, #24]
 8014694:	b90b      	cbnz	r3, 801469a <__swbuf_r+0x12>
 8014696:	f001 f84b 	bl	8015730 <__sinit>
 801469a:	4b21      	ldr	r3, [pc, #132]	; (8014720 <__swbuf_r+0x98>)
 801469c:	429c      	cmp	r4, r3
 801469e:	d12b      	bne.n	80146f8 <__swbuf_r+0x70>
 80146a0:	686c      	ldr	r4, [r5, #4]
 80146a2:	69a3      	ldr	r3, [r4, #24]
 80146a4:	60a3      	str	r3, [r4, #8]
 80146a6:	89a3      	ldrh	r3, [r4, #12]
 80146a8:	071a      	lsls	r2, r3, #28
 80146aa:	d52f      	bpl.n	801470c <__swbuf_r+0x84>
 80146ac:	6923      	ldr	r3, [r4, #16]
 80146ae:	b36b      	cbz	r3, 801470c <__swbuf_r+0x84>
 80146b0:	6923      	ldr	r3, [r4, #16]
 80146b2:	6820      	ldr	r0, [r4, #0]
 80146b4:	1ac0      	subs	r0, r0, r3
 80146b6:	6963      	ldr	r3, [r4, #20]
 80146b8:	b2f6      	uxtb	r6, r6
 80146ba:	4283      	cmp	r3, r0
 80146bc:	4637      	mov	r7, r6
 80146be:	dc04      	bgt.n	80146ca <__swbuf_r+0x42>
 80146c0:	4621      	mov	r1, r4
 80146c2:	4628      	mov	r0, r5
 80146c4:	f000 ffa0 	bl	8015608 <_fflush_r>
 80146c8:	bb30      	cbnz	r0, 8014718 <__swbuf_r+0x90>
 80146ca:	68a3      	ldr	r3, [r4, #8]
 80146cc:	3b01      	subs	r3, #1
 80146ce:	60a3      	str	r3, [r4, #8]
 80146d0:	6823      	ldr	r3, [r4, #0]
 80146d2:	1c5a      	adds	r2, r3, #1
 80146d4:	6022      	str	r2, [r4, #0]
 80146d6:	701e      	strb	r6, [r3, #0]
 80146d8:	6963      	ldr	r3, [r4, #20]
 80146da:	3001      	adds	r0, #1
 80146dc:	4283      	cmp	r3, r0
 80146de:	d004      	beq.n	80146ea <__swbuf_r+0x62>
 80146e0:	89a3      	ldrh	r3, [r4, #12]
 80146e2:	07db      	lsls	r3, r3, #31
 80146e4:	d506      	bpl.n	80146f4 <__swbuf_r+0x6c>
 80146e6:	2e0a      	cmp	r6, #10
 80146e8:	d104      	bne.n	80146f4 <__swbuf_r+0x6c>
 80146ea:	4621      	mov	r1, r4
 80146ec:	4628      	mov	r0, r5
 80146ee:	f000 ff8b 	bl	8015608 <_fflush_r>
 80146f2:	b988      	cbnz	r0, 8014718 <__swbuf_r+0x90>
 80146f4:	4638      	mov	r0, r7
 80146f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146f8:	4b0a      	ldr	r3, [pc, #40]	; (8014724 <__swbuf_r+0x9c>)
 80146fa:	429c      	cmp	r4, r3
 80146fc:	d101      	bne.n	8014702 <__swbuf_r+0x7a>
 80146fe:	68ac      	ldr	r4, [r5, #8]
 8014700:	e7cf      	b.n	80146a2 <__swbuf_r+0x1a>
 8014702:	4b09      	ldr	r3, [pc, #36]	; (8014728 <__swbuf_r+0xa0>)
 8014704:	429c      	cmp	r4, r3
 8014706:	bf08      	it	eq
 8014708:	68ec      	ldreq	r4, [r5, #12]
 801470a:	e7ca      	b.n	80146a2 <__swbuf_r+0x1a>
 801470c:	4621      	mov	r1, r4
 801470e:	4628      	mov	r0, r5
 8014710:	f000 f80c 	bl	801472c <__swsetup_r>
 8014714:	2800      	cmp	r0, #0
 8014716:	d0cb      	beq.n	80146b0 <__swbuf_r+0x28>
 8014718:	f04f 37ff 	mov.w	r7, #4294967295
 801471c:	e7ea      	b.n	80146f4 <__swbuf_r+0x6c>
 801471e:	bf00      	nop
 8014720:	080258ac 	.word	0x080258ac
 8014724:	080258cc 	.word	0x080258cc
 8014728:	0802588c 	.word	0x0802588c

0801472c <__swsetup_r>:
 801472c:	4b32      	ldr	r3, [pc, #200]	; (80147f8 <__swsetup_r+0xcc>)
 801472e:	b570      	push	{r4, r5, r6, lr}
 8014730:	681d      	ldr	r5, [r3, #0]
 8014732:	4606      	mov	r6, r0
 8014734:	460c      	mov	r4, r1
 8014736:	b125      	cbz	r5, 8014742 <__swsetup_r+0x16>
 8014738:	69ab      	ldr	r3, [r5, #24]
 801473a:	b913      	cbnz	r3, 8014742 <__swsetup_r+0x16>
 801473c:	4628      	mov	r0, r5
 801473e:	f000 fff7 	bl	8015730 <__sinit>
 8014742:	4b2e      	ldr	r3, [pc, #184]	; (80147fc <__swsetup_r+0xd0>)
 8014744:	429c      	cmp	r4, r3
 8014746:	d10f      	bne.n	8014768 <__swsetup_r+0x3c>
 8014748:	686c      	ldr	r4, [r5, #4]
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014750:	0719      	lsls	r1, r3, #28
 8014752:	d42c      	bmi.n	80147ae <__swsetup_r+0x82>
 8014754:	06dd      	lsls	r5, r3, #27
 8014756:	d411      	bmi.n	801477c <__swsetup_r+0x50>
 8014758:	2309      	movs	r3, #9
 801475a:	6033      	str	r3, [r6, #0]
 801475c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014760:	81a3      	strh	r3, [r4, #12]
 8014762:	f04f 30ff 	mov.w	r0, #4294967295
 8014766:	e03e      	b.n	80147e6 <__swsetup_r+0xba>
 8014768:	4b25      	ldr	r3, [pc, #148]	; (8014800 <__swsetup_r+0xd4>)
 801476a:	429c      	cmp	r4, r3
 801476c:	d101      	bne.n	8014772 <__swsetup_r+0x46>
 801476e:	68ac      	ldr	r4, [r5, #8]
 8014770:	e7eb      	b.n	801474a <__swsetup_r+0x1e>
 8014772:	4b24      	ldr	r3, [pc, #144]	; (8014804 <__swsetup_r+0xd8>)
 8014774:	429c      	cmp	r4, r3
 8014776:	bf08      	it	eq
 8014778:	68ec      	ldreq	r4, [r5, #12]
 801477a:	e7e6      	b.n	801474a <__swsetup_r+0x1e>
 801477c:	0758      	lsls	r0, r3, #29
 801477e:	d512      	bpl.n	80147a6 <__swsetup_r+0x7a>
 8014780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014782:	b141      	cbz	r1, 8014796 <__swsetup_r+0x6a>
 8014784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014788:	4299      	cmp	r1, r3
 801478a:	d002      	beq.n	8014792 <__swsetup_r+0x66>
 801478c:	4630      	mov	r0, r6
 801478e:	f7fe fab9 	bl	8012d04 <_free_r>
 8014792:	2300      	movs	r3, #0
 8014794:	6363      	str	r3, [r4, #52]	; 0x34
 8014796:	89a3      	ldrh	r3, [r4, #12]
 8014798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801479c:	81a3      	strh	r3, [r4, #12]
 801479e:	2300      	movs	r3, #0
 80147a0:	6063      	str	r3, [r4, #4]
 80147a2:	6923      	ldr	r3, [r4, #16]
 80147a4:	6023      	str	r3, [r4, #0]
 80147a6:	89a3      	ldrh	r3, [r4, #12]
 80147a8:	f043 0308 	orr.w	r3, r3, #8
 80147ac:	81a3      	strh	r3, [r4, #12]
 80147ae:	6923      	ldr	r3, [r4, #16]
 80147b0:	b94b      	cbnz	r3, 80147c6 <__swsetup_r+0x9a>
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147bc:	d003      	beq.n	80147c6 <__swsetup_r+0x9a>
 80147be:	4621      	mov	r1, r4
 80147c0:	4630      	mov	r0, r6
 80147c2:	f001 fbed 	bl	8015fa0 <__smakebuf_r>
 80147c6:	89a0      	ldrh	r0, [r4, #12]
 80147c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80147cc:	f010 0301 	ands.w	r3, r0, #1
 80147d0:	d00a      	beq.n	80147e8 <__swsetup_r+0xbc>
 80147d2:	2300      	movs	r3, #0
 80147d4:	60a3      	str	r3, [r4, #8]
 80147d6:	6963      	ldr	r3, [r4, #20]
 80147d8:	425b      	negs	r3, r3
 80147da:	61a3      	str	r3, [r4, #24]
 80147dc:	6923      	ldr	r3, [r4, #16]
 80147de:	b943      	cbnz	r3, 80147f2 <__swsetup_r+0xc6>
 80147e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80147e4:	d1ba      	bne.n	801475c <__swsetup_r+0x30>
 80147e6:	bd70      	pop	{r4, r5, r6, pc}
 80147e8:	0781      	lsls	r1, r0, #30
 80147ea:	bf58      	it	pl
 80147ec:	6963      	ldrpl	r3, [r4, #20]
 80147ee:	60a3      	str	r3, [r4, #8]
 80147f0:	e7f4      	b.n	80147dc <__swsetup_r+0xb0>
 80147f2:	2000      	movs	r0, #0
 80147f4:	e7f7      	b.n	80147e6 <__swsetup_r+0xba>
 80147f6:	bf00      	nop
 80147f8:	200000c8 	.word	0x200000c8
 80147fc:	080258ac 	.word	0x080258ac
 8014800:	080258cc 	.word	0x080258cc
 8014804:	0802588c 	.word	0x0802588c

08014808 <quorem>:
 8014808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801480c:	6903      	ldr	r3, [r0, #16]
 801480e:	690c      	ldr	r4, [r1, #16]
 8014810:	42a3      	cmp	r3, r4
 8014812:	4607      	mov	r7, r0
 8014814:	f2c0 8081 	blt.w	801491a <quorem+0x112>
 8014818:	3c01      	subs	r4, #1
 801481a:	f101 0814 	add.w	r8, r1, #20
 801481e:	f100 0514 	add.w	r5, r0, #20
 8014822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014826:	9301      	str	r3, [sp, #4]
 8014828:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801482c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014830:	3301      	adds	r3, #1
 8014832:	429a      	cmp	r2, r3
 8014834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801483c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014840:	d331      	bcc.n	80148a6 <quorem+0x9e>
 8014842:	f04f 0e00 	mov.w	lr, #0
 8014846:	4640      	mov	r0, r8
 8014848:	46ac      	mov	ip, r5
 801484a:	46f2      	mov	sl, lr
 801484c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014850:	b293      	uxth	r3, r2
 8014852:	fb06 e303 	mla	r3, r6, r3, lr
 8014856:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801485a:	b29b      	uxth	r3, r3
 801485c:	ebaa 0303 	sub.w	r3, sl, r3
 8014860:	f8dc a000 	ldr.w	sl, [ip]
 8014864:	0c12      	lsrs	r2, r2, #16
 8014866:	fa13 f38a 	uxtah	r3, r3, sl
 801486a:	fb06 e202 	mla	r2, r6, r2, lr
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	9b00      	ldr	r3, [sp, #0]
 8014872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014876:	b292      	uxth	r2, r2
 8014878:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801487c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014880:	f8bd 3000 	ldrh.w	r3, [sp]
 8014884:	4581      	cmp	r9, r0
 8014886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801488a:	f84c 3b04 	str.w	r3, [ip], #4
 801488e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014892:	d2db      	bcs.n	801484c <quorem+0x44>
 8014894:	f855 300b 	ldr.w	r3, [r5, fp]
 8014898:	b92b      	cbnz	r3, 80148a6 <quorem+0x9e>
 801489a:	9b01      	ldr	r3, [sp, #4]
 801489c:	3b04      	subs	r3, #4
 801489e:	429d      	cmp	r5, r3
 80148a0:	461a      	mov	r2, r3
 80148a2:	d32e      	bcc.n	8014902 <quorem+0xfa>
 80148a4:	613c      	str	r4, [r7, #16]
 80148a6:	4638      	mov	r0, r7
 80148a8:	f001 fea4 	bl	80165f4 <__mcmp>
 80148ac:	2800      	cmp	r0, #0
 80148ae:	db24      	blt.n	80148fa <quorem+0xf2>
 80148b0:	3601      	adds	r6, #1
 80148b2:	4628      	mov	r0, r5
 80148b4:	f04f 0c00 	mov.w	ip, #0
 80148b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80148bc:	f8d0 e000 	ldr.w	lr, [r0]
 80148c0:	b293      	uxth	r3, r2
 80148c2:	ebac 0303 	sub.w	r3, ip, r3
 80148c6:	0c12      	lsrs	r2, r2, #16
 80148c8:	fa13 f38e 	uxtah	r3, r3, lr
 80148cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80148d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148da:	45c1      	cmp	r9, r8
 80148dc:	f840 3b04 	str.w	r3, [r0], #4
 80148e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80148e4:	d2e8      	bcs.n	80148b8 <quorem+0xb0>
 80148e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80148ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80148ee:	b922      	cbnz	r2, 80148fa <quorem+0xf2>
 80148f0:	3b04      	subs	r3, #4
 80148f2:	429d      	cmp	r5, r3
 80148f4:	461a      	mov	r2, r3
 80148f6:	d30a      	bcc.n	801490e <quorem+0x106>
 80148f8:	613c      	str	r4, [r7, #16]
 80148fa:	4630      	mov	r0, r6
 80148fc:	b003      	add	sp, #12
 80148fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014902:	6812      	ldr	r2, [r2, #0]
 8014904:	3b04      	subs	r3, #4
 8014906:	2a00      	cmp	r2, #0
 8014908:	d1cc      	bne.n	80148a4 <quorem+0x9c>
 801490a:	3c01      	subs	r4, #1
 801490c:	e7c7      	b.n	801489e <quorem+0x96>
 801490e:	6812      	ldr	r2, [r2, #0]
 8014910:	3b04      	subs	r3, #4
 8014912:	2a00      	cmp	r2, #0
 8014914:	d1f0      	bne.n	80148f8 <quorem+0xf0>
 8014916:	3c01      	subs	r4, #1
 8014918:	e7eb      	b.n	80148f2 <quorem+0xea>
 801491a:	2000      	movs	r0, #0
 801491c:	e7ee      	b.n	80148fc <quorem+0xf4>
	...

08014920 <_dtoa_r>:
 8014920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	ed2d 8b04 	vpush	{d8-d9}
 8014928:	ec57 6b10 	vmov	r6, r7, d0
 801492c:	b093      	sub	sp, #76	; 0x4c
 801492e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014934:	9106      	str	r1, [sp, #24]
 8014936:	ee10 aa10 	vmov	sl, s0
 801493a:	4604      	mov	r4, r0
 801493c:	9209      	str	r2, [sp, #36]	; 0x24
 801493e:	930c      	str	r3, [sp, #48]	; 0x30
 8014940:	46bb      	mov	fp, r7
 8014942:	b975      	cbnz	r5, 8014962 <_dtoa_r+0x42>
 8014944:	2010      	movs	r0, #16
 8014946:	f7fe f9b7 	bl	8012cb8 <malloc>
 801494a:	4602      	mov	r2, r0
 801494c:	6260      	str	r0, [r4, #36]	; 0x24
 801494e:	b920      	cbnz	r0, 801495a <_dtoa_r+0x3a>
 8014950:	4ba7      	ldr	r3, [pc, #668]	; (8014bf0 <_dtoa_r+0x2d0>)
 8014952:	21ea      	movs	r1, #234	; 0xea
 8014954:	48a7      	ldr	r0, [pc, #668]	; (8014bf4 <_dtoa_r+0x2d4>)
 8014956:	f002 fa37 	bl	8016dc8 <__assert_func>
 801495a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801495e:	6005      	str	r5, [r0, #0]
 8014960:	60c5      	str	r5, [r0, #12]
 8014962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014964:	6819      	ldr	r1, [r3, #0]
 8014966:	b151      	cbz	r1, 801497e <_dtoa_r+0x5e>
 8014968:	685a      	ldr	r2, [r3, #4]
 801496a:	604a      	str	r2, [r1, #4]
 801496c:	2301      	movs	r3, #1
 801496e:	4093      	lsls	r3, r2
 8014970:	608b      	str	r3, [r1, #8]
 8014972:	4620      	mov	r0, r4
 8014974:	f001 fbb2 	bl	80160dc <_Bfree>
 8014978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	1e3b      	subs	r3, r7, #0
 8014980:	bfaa      	itet	ge
 8014982:	2300      	movge	r3, #0
 8014984:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014988:	f8c8 3000 	strge.w	r3, [r8]
 801498c:	4b9a      	ldr	r3, [pc, #616]	; (8014bf8 <_dtoa_r+0x2d8>)
 801498e:	bfbc      	itt	lt
 8014990:	2201      	movlt	r2, #1
 8014992:	f8c8 2000 	strlt.w	r2, [r8]
 8014996:	ea33 030b 	bics.w	r3, r3, fp
 801499a:	d11b      	bne.n	80149d4 <_dtoa_r+0xb4>
 801499c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801499e:	f242 730f 	movw	r3, #9999	; 0x270f
 80149a2:	6013      	str	r3, [r2, #0]
 80149a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149a8:	4333      	orrs	r3, r6
 80149aa:	f000 8592 	beq.w	80154d2 <_dtoa_r+0xbb2>
 80149ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149b0:	b963      	cbnz	r3, 80149cc <_dtoa_r+0xac>
 80149b2:	4b92      	ldr	r3, [pc, #584]	; (8014bfc <_dtoa_r+0x2dc>)
 80149b4:	e022      	b.n	80149fc <_dtoa_r+0xdc>
 80149b6:	4b92      	ldr	r3, [pc, #584]	; (8014c00 <_dtoa_r+0x2e0>)
 80149b8:	9301      	str	r3, [sp, #4]
 80149ba:	3308      	adds	r3, #8
 80149bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149be:	6013      	str	r3, [r2, #0]
 80149c0:	9801      	ldr	r0, [sp, #4]
 80149c2:	b013      	add	sp, #76	; 0x4c
 80149c4:	ecbd 8b04 	vpop	{d8-d9}
 80149c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149cc:	4b8b      	ldr	r3, [pc, #556]	; (8014bfc <_dtoa_r+0x2dc>)
 80149ce:	9301      	str	r3, [sp, #4]
 80149d0:	3303      	adds	r3, #3
 80149d2:	e7f3      	b.n	80149bc <_dtoa_r+0x9c>
 80149d4:	2200      	movs	r2, #0
 80149d6:	2300      	movs	r3, #0
 80149d8:	4650      	mov	r0, sl
 80149da:	4659      	mov	r1, fp
 80149dc:	f7ec f88c 	bl	8000af8 <__aeabi_dcmpeq>
 80149e0:	ec4b ab19 	vmov	d9, sl, fp
 80149e4:	4680      	mov	r8, r0
 80149e6:	b158      	cbz	r0, 8014a00 <_dtoa_r+0xe0>
 80149e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149ea:	2301      	movs	r3, #1
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f000 856b 	beq.w	80154cc <_dtoa_r+0xbac>
 80149f6:	4883      	ldr	r0, [pc, #524]	; (8014c04 <_dtoa_r+0x2e4>)
 80149f8:	6018      	str	r0, [r3, #0]
 80149fa:	1e43      	subs	r3, r0, #1
 80149fc:	9301      	str	r3, [sp, #4]
 80149fe:	e7df      	b.n	80149c0 <_dtoa_r+0xa0>
 8014a00:	ec4b ab10 	vmov	d0, sl, fp
 8014a04:	aa10      	add	r2, sp, #64	; 0x40
 8014a06:	a911      	add	r1, sp, #68	; 0x44
 8014a08:	4620      	mov	r0, r4
 8014a0a:	f001 ff15 	bl	8016838 <__d2b>
 8014a0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014a12:	ee08 0a10 	vmov	s16, r0
 8014a16:	2d00      	cmp	r5, #0
 8014a18:	f000 8084 	beq.w	8014b24 <_dtoa_r+0x204>
 8014a1c:	ee19 3a90 	vmov	r3, s19
 8014a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014a28:	4656      	mov	r6, sl
 8014a2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014a32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014a36:	4b74      	ldr	r3, [pc, #464]	; (8014c08 <_dtoa_r+0x2e8>)
 8014a38:	2200      	movs	r2, #0
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	4639      	mov	r1, r7
 8014a3e:	f7eb fc3b 	bl	80002b8 <__aeabi_dsub>
 8014a42:	a365      	add	r3, pc, #404	; (adr r3, 8014bd8 <_dtoa_r+0x2b8>)
 8014a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a48:	f7eb fdee 	bl	8000628 <__aeabi_dmul>
 8014a4c:	a364      	add	r3, pc, #400	; (adr r3, 8014be0 <_dtoa_r+0x2c0>)
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	f7eb fc33 	bl	80002bc <__adddf3>
 8014a56:	4606      	mov	r6, r0
 8014a58:	4628      	mov	r0, r5
 8014a5a:	460f      	mov	r7, r1
 8014a5c:	f7eb fd7a 	bl	8000554 <__aeabi_i2d>
 8014a60:	a361      	add	r3, pc, #388	; (adr r3, 8014be8 <_dtoa_r+0x2c8>)
 8014a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a66:	f7eb fddf 	bl	8000628 <__aeabi_dmul>
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	4630      	mov	r0, r6
 8014a70:	4639      	mov	r1, r7
 8014a72:	f7eb fc23 	bl	80002bc <__adddf3>
 8014a76:	4606      	mov	r6, r0
 8014a78:	460f      	mov	r7, r1
 8014a7a:	f7ec f885 	bl	8000b88 <__aeabi_d2iz>
 8014a7e:	2200      	movs	r2, #0
 8014a80:	9000      	str	r0, [sp, #0]
 8014a82:	2300      	movs	r3, #0
 8014a84:	4630      	mov	r0, r6
 8014a86:	4639      	mov	r1, r7
 8014a88:	f7ec f840 	bl	8000b0c <__aeabi_dcmplt>
 8014a8c:	b150      	cbz	r0, 8014aa4 <_dtoa_r+0x184>
 8014a8e:	9800      	ldr	r0, [sp, #0]
 8014a90:	f7eb fd60 	bl	8000554 <__aeabi_i2d>
 8014a94:	4632      	mov	r2, r6
 8014a96:	463b      	mov	r3, r7
 8014a98:	f7ec f82e 	bl	8000af8 <__aeabi_dcmpeq>
 8014a9c:	b910      	cbnz	r0, 8014aa4 <_dtoa_r+0x184>
 8014a9e:	9b00      	ldr	r3, [sp, #0]
 8014aa0:	3b01      	subs	r3, #1
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	9b00      	ldr	r3, [sp, #0]
 8014aa6:	2b16      	cmp	r3, #22
 8014aa8:	d85a      	bhi.n	8014b60 <_dtoa_r+0x240>
 8014aaa:	9a00      	ldr	r2, [sp, #0]
 8014aac:	4b57      	ldr	r3, [pc, #348]	; (8014c0c <_dtoa_r+0x2ec>)
 8014aae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab6:	ec51 0b19 	vmov	r0, r1, d9
 8014aba:	f7ec f827 	bl	8000b0c <__aeabi_dcmplt>
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	d050      	beq.n	8014b64 <_dtoa_r+0x244>
 8014ac2:	9b00      	ldr	r3, [sp, #0]
 8014ac4:	3b01      	subs	r3, #1
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	2300      	movs	r3, #0
 8014aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8014acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ace:	1b5d      	subs	r5, r3, r5
 8014ad0:	1e6b      	subs	r3, r5, #1
 8014ad2:	9305      	str	r3, [sp, #20]
 8014ad4:	bf45      	ittet	mi
 8014ad6:	f1c5 0301 	rsbmi	r3, r5, #1
 8014ada:	9304      	strmi	r3, [sp, #16]
 8014adc:	2300      	movpl	r3, #0
 8014ade:	2300      	movmi	r3, #0
 8014ae0:	bf4c      	ite	mi
 8014ae2:	9305      	strmi	r3, [sp, #20]
 8014ae4:	9304      	strpl	r3, [sp, #16]
 8014ae6:	9b00      	ldr	r3, [sp, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	db3d      	blt.n	8014b68 <_dtoa_r+0x248>
 8014aec:	9b05      	ldr	r3, [sp, #20]
 8014aee:	9a00      	ldr	r2, [sp, #0]
 8014af0:	920a      	str	r2, [sp, #40]	; 0x28
 8014af2:	4413      	add	r3, r2
 8014af4:	9305      	str	r3, [sp, #20]
 8014af6:	2300      	movs	r3, #0
 8014af8:	9307      	str	r3, [sp, #28]
 8014afa:	9b06      	ldr	r3, [sp, #24]
 8014afc:	2b09      	cmp	r3, #9
 8014afe:	f200 8089 	bhi.w	8014c14 <_dtoa_r+0x2f4>
 8014b02:	2b05      	cmp	r3, #5
 8014b04:	bfc4      	itt	gt
 8014b06:	3b04      	subgt	r3, #4
 8014b08:	9306      	strgt	r3, [sp, #24]
 8014b0a:	9b06      	ldr	r3, [sp, #24]
 8014b0c:	f1a3 0302 	sub.w	r3, r3, #2
 8014b10:	bfcc      	ite	gt
 8014b12:	2500      	movgt	r5, #0
 8014b14:	2501      	movle	r5, #1
 8014b16:	2b03      	cmp	r3, #3
 8014b18:	f200 8087 	bhi.w	8014c2a <_dtoa_r+0x30a>
 8014b1c:	e8df f003 	tbb	[pc, r3]
 8014b20:	59383a2d 	.word	0x59383a2d
 8014b24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014b28:	441d      	add	r5, r3
 8014b2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014b2e:	2b20      	cmp	r3, #32
 8014b30:	bfc1      	itttt	gt
 8014b32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014b36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014b3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8014b3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014b42:	bfda      	itte	le
 8014b44:	f1c3 0320 	rsble	r3, r3, #32
 8014b48:	fa06 f003 	lslle.w	r0, r6, r3
 8014b4c:	4318      	orrgt	r0, r3
 8014b4e:	f7eb fcf1 	bl	8000534 <__aeabi_ui2d>
 8014b52:	2301      	movs	r3, #1
 8014b54:	4606      	mov	r6, r0
 8014b56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014b5a:	3d01      	subs	r5, #1
 8014b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8014b5e:	e76a      	b.n	8014a36 <_dtoa_r+0x116>
 8014b60:	2301      	movs	r3, #1
 8014b62:	e7b2      	b.n	8014aca <_dtoa_r+0x1aa>
 8014b64:	900b      	str	r0, [sp, #44]	; 0x2c
 8014b66:	e7b1      	b.n	8014acc <_dtoa_r+0x1ac>
 8014b68:	9b04      	ldr	r3, [sp, #16]
 8014b6a:	9a00      	ldr	r2, [sp, #0]
 8014b6c:	1a9b      	subs	r3, r3, r2
 8014b6e:	9304      	str	r3, [sp, #16]
 8014b70:	4253      	negs	r3, r2
 8014b72:	9307      	str	r3, [sp, #28]
 8014b74:	2300      	movs	r3, #0
 8014b76:	930a      	str	r3, [sp, #40]	; 0x28
 8014b78:	e7bf      	b.n	8014afa <_dtoa_r+0x1da>
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	9308      	str	r3, [sp, #32]
 8014b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	dc55      	bgt.n	8014c30 <_dtoa_r+0x310>
 8014b84:	2301      	movs	r3, #1
 8014b86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8014b8e:	e00c      	b.n	8014baa <_dtoa_r+0x28a>
 8014b90:	2301      	movs	r3, #1
 8014b92:	e7f3      	b.n	8014b7c <_dtoa_r+0x25c>
 8014b94:	2300      	movs	r3, #0
 8014b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b98:	9308      	str	r3, [sp, #32]
 8014b9a:	9b00      	ldr	r3, [sp, #0]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	9302      	str	r3, [sp, #8]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	9303      	str	r3, [sp, #12]
 8014ba6:	bfb8      	it	lt
 8014ba8:	2301      	movlt	r3, #1
 8014baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014bac:	2200      	movs	r2, #0
 8014bae:	6042      	str	r2, [r0, #4]
 8014bb0:	2204      	movs	r2, #4
 8014bb2:	f102 0614 	add.w	r6, r2, #20
 8014bb6:	429e      	cmp	r6, r3
 8014bb8:	6841      	ldr	r1, [r0, #4]
 8014bba:	d93d      	bls.n	8014c38 <_dtoa_r+0x318>
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f001 fa4d 	bl	801605c <_Balloc>
 8014bc2:	9001      	str	r0, [sp, #4]
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d13b      	bne.n	8014c40 <_dtoa_r+0x320>
 8014bc8:	4b11      	ldr	r3, [pc, #68]	; (8014c10 <_dtoa_r+0x2f0>)
 8014bca:	4602      	mov	r2, r0
 8014bcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014bd0:	e6c0      	b.n	8014954 <_dtoa_r+0x34>
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	e7df      	b.n	8014b96 <_dtoa_r+0x276>
 8014bd6:	bf00      	nop
 8014bd8:	636f4361 	.word	0x636f4361
 8014bdc:	3fd287a7 	.word	0x3fd287a7
 8014be0:	8b60c8b3 	.word	0x8b60c8b3
 8014be4:	3fc68a28 	.word	0x3fc68a28
 8014be8:	509f79fb 	.word	0x509f79fb
 8014bec:	3fd34413 	.word	0x3fd34413
 8014bf0:	08025806 	.word	0x08025806
 8014bf4:	0802581d 	.word	0x0802581d
 8014bf8:	7ff00000 	.word	0x7ff00000
 8014bfc:	08025802 	.word	0x08025802
 8014c00:	080257f9 	.word	0x080257f9
 8014c04:	08025681 	.word	0x08025681
 8014c08:	3ff80000 	.word	0x3ff80000
 8014c0c:	080259f0 	.word	0x080259f0
 8014c10:	08025878 	.word	0x08025878
 8014c14:	2501      	movs	r5, #1
 8014c16:	2300      	movs	r3, #0
 8014c18:	9306      	str	r3, [sp, #24]
 8014c1a:	9508      	str	r5, [sp, #32]
 8014c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c24:	2200      	movs	r2, #0
 8014c26:	2312      	movs	r3, #18
 8014c28:	e7b0      	b.n	8014b8c <_dtoa_r+0x26c>
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	9308      	str	r3, [sp, #32]
 8014c2e:	e7f5      	b.n	8014c1c <_dtoa_r+0x2fc>
 8014c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c36:	e7b8      	b.n	8014baa <_dtoa_r+0x28a>
 8014c38:	3101      	adds	r1, #1
 8014c3a:	6041      	str	r1, [r0, #4]
 8014c3c:	0052      	lsls	r2, r2, #1
 8014c3e:	e7b8      	b.n	8014bb2 <_dtoa_r+0x292>
 8014c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c42:	9a01      	ldr	r2, [sp, #4]
 8014c44:	601a      	str	r2, [r3, #0]
 8014c46:	9b03      	ldr	r3, [sp, #12]
 8014c48:	2b0e      	cmp	r3, #14
 8014c4a:	f200 809d 	bhi.w	8014d88 <_dtoa_r+0x468>
 8014c4e:	2d00      	cmp	r5, #0
 8014c50:	f000 809a 	beq.w	8014d88 <_dtoa_r+0x468>
 8014c54:	9b00      	ldr	r3, [sp, #0]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	dd32      	ble.n	8014cc0 <_dtoa_r+0x3a0>
 8014c5a:	4ab7      	ldr	r2, [pc, #732]	; (8014f38 <_dtoa_r+0x618>)
 8014c5c:	f003 030f 	and.w	r3, r3, #15
 8014c60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014c64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c68:	9b00      	ldr	r3, [sp, #0]
 8014c6a:	05d8      	lsls	r0, r3, #23
 8014c6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014c70:	d516      	bpl.n	8014ca0 <_dtoa_r+0x380>
 8014c72:	4bb2      	ldr	r3, [pc, #712]	; (8014f3c <_dtoa_r+0x61c>)
 8014c74:	ec51 0b19 	vmov	r0, r1, d9
 8014c78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c7c:	f7eb fdfe 	bl	800087c <__aeabi_ddiv>
 8014c80:	f007 070f 	and.w	r7, r7, #15
 8014c84:	4682      	mov	sl, r0
 8014c86:	468b      	mov	fp, r1
 8014c88:	2503      	movs	r5, #3
 8014c8a:	4eac      	ldr	r6, [pc, #688]	; (8014f3c <_dtoa_r+0x61c>)
 8014c8c:	b957      	cbnz	r7, 8014ca4 <_dtoa_r+0x384>
 8014c8e:	4642      	mov	r2, r8
 8014c90:	464b      	mov	r3, r9
 8014c92:	4650      	mov	r0, sl
 8014c94:	4659      	mov	r1, fp
 8014c96:	f7eb fdf1 	bl	800087c <__aeabi_ddiv>
 8014c9a:	4682      	mov	sl, r0
 8014c9c:	468b      	mov	fp, r1
 8014c9e:	e028      	b.n	8014cf2 <_dtoa_r+0x3d2>
 8014ca0:	2502      	movs	r5, #2
 8014ca2:	e7f2      	b.n	8014c8a <_dtoa_r+0x36a>
 8014ca4:	07f9      	lsls	r1, r7, #31
 8014ca6:	d508      	bpl.n	8014cba <_dtoa_r+0x39a>
 8014ca8:	4640      	mov	r0, r8
 8014caa:	4649      	mov	r1, r9
 8014cac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014cb0:	f7eb fcba 	bl	8000628 <__aeabi_dmul>
 8014cb4:	3501      	adds	r5, #1
 8014cb6:	4680      	mov	r8, r0
 8014cb8:	4689      	mov	r9, r1
 8014cba:	107f      	asrs	r7, r7, #1
 8014cbc:	3608      	adds	r6, #8
 8014cbe:	e7e5      	b.n	8014c8c <_dtoa_r+0x36c>
 8014cc0:	f000 809b 	beq.w	8014dfa <_dtoa_r+0x4da>
 8014cc4:	9b00      	ldr	r3, [sp, #0]
 8014cc6:	4f9d      	ldr	r7, [pc, #628]	; (8014f3c <_dtoa_r+0x61c>)
 8014cc8:	425e      	negs	r6, r3
 8014cca:	4b9b      	ldr	r3, [pc, #620]	; (8014f38 <_dtoa_r+0x618>)
 8014ccc:	f006 020f 	and.w	r2, r6, #15
 8014cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd8:	ec51 0b19 	vmov	r0, r1, d9
 8014cdc:	f7eb fca4 	bl	8000628 <__aeabi_dmul>
 8014ce0:	1136      	asrs	r6, r6, #4
 8014ce2:	4682      	mov	sl, r0
 8014ce4:	468b      	mov	fp, r1
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	2502      	movs	r5, #2
 8014cea:	2e00      	cmp	r6, #0
 8014cec:	d17a      	bne.n	8014de4 <_dtoa_r+0x4c4>
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d1d3      	bne.n	8014c9a <_dtoa_r+0x37a>
 8014cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f000 8082 	beq.w	8014dfe <_dtoa_r+0x4de>
 8014cfa:	4b91      	ldr	r3, [pc, #580]	; (8014f40 <_dtoa_r+0x620>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	4650      	mov	r0, sl
 8014d00:	4659      	mov	r1, fp
 8014d02:	f7eb ff03 	bl	8000b0c <__aeabi_dcmplt>
 8014d06:	2800      	cmp	r0, #0
 8014d08:	d079      	beq.n	8014dfe <_dtoa_r+0x4de>
 8014d0a:	9b03      	ldr	r3, [sp, #12]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d076      	beq.n	8014dfe <_dtoa_r+0x4de>
 8014d10:	9b02      	ldr	r3, [sp, #8]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	dd36      	ble.n	8014d84 <_dtoa_r+0x464>
 8014d16:	9b00      	ldr	r3, [sp, #0]
 8014d18:	4650      	mov	r0, sl
 8014d1a:	4659      	mov	r1, fp
 8014d1c:	1e5f      	subs	r7, r3, #1
 8014d1e:	2200      	movs	r2, #0
 8014d20:	4b88      	ldr	r3, [pc, #544]	; (8014f44 <_dtoa_r+0x624>)
 8014d22:	f7eb fc81 	bl	8000628 <__aeabi_dmul>
 8014d26:	9e02      	ldr	r6, [sp, #8]
 8014d28:	4682      	mov	sl, r0
 8014d2a:	468b      	mov	fp, r1
 8014d2c:	3501      	adds	r5, #1
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f7eb fc10 	bl	8000554 <__aeabi_i2d>
 8014d34:	4652      	mov	r2, sl
 8014d36:	465b      	mov	r3, fp
 8014d38:	f7eb fc76 	bl	8000628 <__aeabi_dmul>
 8014d3c:	4b82      	ldr	r3, [pc, #520]	; (8014f48 <_dtoa_r+0x628>)
 8014d3e:	2200      	movs	r2, #0
 8014d40:	f7eb fabc 	bl	80002bc <__adddf3>
 8014d44:	46d0      	mov	r8, sl
 8014d46:	46d9      	mov	r9, fp
 8014d48:	4682      	mov	sl, r0
 8014d4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014d4e:	2e00      	cmp	r6, #0
 8014d50:	d158      	bne.n	8014e04 <_dtoa_r+0x4e4>
 8014d52:	4b7e      	ldr	r3, [pc, #504]	; (8014f4c <_dtoa_r+0x62c>)
 8014d54:	2200      	movs	r2, #0
 8014d56:	4640      	mov	r0, r8
 8014d58:	4649      	mov	r1, r9
 8014d5a:	f7eb faad 	bl	80002b8 <__aeabi_dsub>
 8014d5e:	4652      	mov	r2, sl
 8014d60:	465b      	mov	r3, fp
 8014d62:	4680      	mov	r8, r0
 8014d64:	4689      	mov	r9, r1
 8014d66:	f7eb feef 	bl	8000b48 <__aeabi_dcmpgt>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f040 8295 	bne.w	801529a <_dtoa_r+0x97a>
 8014d70:	4652      	mov	r2, sl
 8014d72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014d76:	4640      	mov	r0, r8
 8014d78:	4649      	mov	r1, r9
 8014d7a:	f7eb fec7 	bl	8000b0c <__aeabi_dcmplt>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	f040 8289 	bne.w	8015296 <_dtoa_r+0x976>
 8014d84:	ec5b ab19 	vmov	sl, fp, d9
 8014d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	f2c0 8148 	blt.w	8015020 <_dtoa_r+0x700>
 8014d90:	9a00      	ldr	r2, [sp, #0]
 8014d92:	2a0e      	cmp	r2, #14
 8014d94:	f300 8144 	bgt.w	8015020 <_dtoa_r+0x700>
 8014d98:	4b67      	ldr	r3, [pc, #412]	; (8014f38 <_dtoa_r+0x618>)
 8014d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	f280 80d5 	bge.w	8014f54 <_dtoa_r+0x634>
 8014daa:	9b03      	ldr	r3, [sp, #12]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f300 80d1 	bgt.w	8014f54 <_dtoa_r+0x634>
 8014db2:	f040 826f 	bne.w	8015294 <_dtoa_r+0x974>
 8014db6:	4b65      	ldr	r3, [pc, #404]	; (8014f4c <_dtoa_r+0x62c>)
 8014db8:	2200      	movs	r2, #0
 8014dba:	4640      	mov	r0, r8
 8014dbc:	4649      	mov	r1, r9
 8014dbe:	f7eb fc33 	bl	8000628 <__aeabi_dmul>
 8014dc2:	4652      	mov	r2, sl
 8014dc4:	465b      	mov	r3, fp
 8014dc6:	f7eb feb5 	bl	8000b34 <__aeabi_dcmpge>
 8014dca:	9e03      	ldr	r6, [sp, #12]
 8014dcc:	4637      	mov	r7, r6
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	f040 8245 	bne.w	801525e <_dtoa_r+0x93e>
 8014dd4:	9d01      	ldr	r5, [sp, #4]
 8014dd6:	2331      	movs	r3, #49	; 0x31
 8014dd8:	f805 3b01 	strb.w	r3, [r5], #1
 8014ddc:	9b00      	ldr	r3, [sp, #0]
 8014dde:	3301      	adds	r3, #1
 8014de0:	9300      	str	r3, [sp, #0]
 8014de2:	e240      	b.n	8015266 <_dtoa_r+0x946>
 8014de4:	07f2      	lsls	r2, r6, #31
 8014de6:	d505      	bpl.n	8014df4 <_dtoa_r+0x4d4>
 8014de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014dec:	f7eb fc1c 	bl	8000628 <__aeabi_dmul>
 8014df0:	3501      	adds	r5, #1
 8014df2:	2301      	movs	r3, #1
 8014df4:	1076      	asrs	r6, r6, #1
 8014df6:	3708      	adds	r7, #8
 8014df8:	e777      	b.n	8014cea <_dtoa_r+0x3ca>
 8014dfa:	2502      	movs	r5, #2
 8014dfc:	e779      	b.n	8014cf2 <_dtoa_r+0x3d2>
 8014dfe:	9f00      	ldr	r7, [sp, #0]
 8014e00:	9e03      	ldr	r6, [sp, #12]
 8014e02:	e794      	b.n	8014d2e <_dtoa_r+0x40e>
 8014e04:	9901      	ldr	r1, [sp, #4]
 8014e06:	4b4c      	ldr	r3, [pc, #304]	; (8014f38 <_dtoa_r+0x618>)
 8014e08:	4431      	add	r1, r6
 8014e0a:	910d      	str	r1, [sp, #52]	; 0x34
 8014e0c:	9908      	ldr	r1, [sp, #32]
 8014e0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014e12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014e16:	2900      	cmp	r1, #0
 8014e18:	d043      	beq.n	8014ea2 <_dtoa_r+0x582>
 8014e1a:	494d      	ldr	r1, [pc, #308]	; (8014f50 <_dtoa_r+0x630>)
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	f7eb fd2d 	bl	800087c <__aeabi_ddiv>
 8014e22:	4652      	mov	r2, sl
 8014e24:	465b      	mov	r3, fp
 8014e26:	f7eb fa47 	bl	80002b8 <__aeabi_dsub>
 8014e2a:	9d01      	ldr	r5, [sp, #4]
 8014e2c:	4682      	mov	sl, r0
 8014e2e:	468b      	mov	fp, r1
 8014e30:	4649      	mov	r1, r9
 8014e32:	4640      	mov	r0, r8
 8014e34:	f7eb fea8 	bl	8000b88 <__aeabi_d2iz>
 8014e38:	4606      	mov	r6, r0
 8014e3a:	f7eb fb8b 	bl	8000554 <__aeabi_i2d>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	460b      	mov	r3, r1
 8014e42:	4640      	mov	r0, r8
 8014e44:	4649      	mov	r1, r9
 8014e46:	f7eb fa37 	bl	80002b8 <__aeabi_dsub>
 8014e4a:	3630      	adds	r6, #48	; 0x30
 8014e4c:	f805 6b01 	strb.w	r6, [r5], #1
 8014e50:	4652      	mov	r2, sl
 8014e52:	465b      	mov	r3, fp
 8014e54:	4680      	mov	r8, r0
 8014e56:	4689      	mov	r9, r1
 8014e58:	f7eb fe58 	bl	8000b0c <__aeabi_dcmplt>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d163      	bne.n	8014f28 <_dtoa_r+0x608>
 8014e60:	4642      	mov	r2, r8
 8014e62:	464b      	mov	r3, r9
 8014e64:	4936      	ldr	r1, [pc, #216]	; (8014f40 <_dtoa_r+0x620>)
 8014e66:	2000      	movs	r0, #0
 8014e68:	f7eb fa26 	bl	80002b8 <__aeabi_dsub>
 8014e6c:	4652      	mov	r2, sl
 8014e6e:	465b      	mov	r3, fp
 8014e70:	f7eb fe4c 	bl	8000b0c <__aeabi_dcmplt>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	f040 80b5 	bne.w	8014fe4 <_dtoa_r+0x6c4>
 8014e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e7c:	429d      	cmp	r5, r3
 8014e7e:	d081      	beq.n	8014d84 <_dtoa_r+0x464>
 8014e80:	4b30      	ldr	r3, [pc, #192]	; (8014f44 <_dtoa_r+0x624>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	4650      	mov	r0, sl
 8014e86:	4659      	mov	r1, fp
 8014e88:	f7eb fbce 	bl	8000628 <__aeabi_dmul>
 8014e8c:	4b2d      	ldr	r3, [pc, #180]	; (8014f44 <_dtoa_r+0x624>)
 8014e8e:	4682      	mov	sl, r0
 8014e90:	468b      	mov	fp, r1
 8014e92:	4640      	mov	r0, r8
 8014e94:	4649      	mov	r1, r9
 8014e96:	2200      	movs	r2, #0
 8014e98:	f7eb fbc6 	bl	8000628 <__aeabi_dmul>
 8014e9c:	4680      	mov	r8, r0
 8014e9e:	4689      	mov	r9, r1
 8014ea0:	e7c6      	b.n	8014e30 <_dtoa_r+0x510>
 8014ea2:	4650      	mov	r0, sl
 8014ea4:	4659      	mov	r1, fp
 8014ea6:	f7eb fbbf 	bl	8000628 <__aeabi_dmul>
 8014eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eac:	9d01      	ldr	r5, [sp, #4]
 8014eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8014eb0:	4682      	mov	sl, r0
 8014eb2:	468b      	mov	fp, r1
 8014eb4:	4649      	mov	r1, r9
 8014eb6:	4640      	mov	r0, r8
 8014eb8:	f7eb fe66 	bl	8000b88 <__aeabi_d2iz>
 8014ebc:	4606      	mov	r6, r0
 8014ebe:	f7eb fb49 	bl	8000554 <__aeabi_i2d>
 8014ec2:	3630      	adds	r6, #48	; 0x30
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4640      	mov	r0, r8
 8014eca:	4649      	mov	r1, r9
 8014ecc:	f7eb f9f4 	bl	80002b8 <__aeabi_dsub>
 8014ed0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ed6:	429d      	cmp	r5, r3
 8014ed8:	4680      	mov	r8, r0
 8014eda:	4689      	mov	r9, r1
 8014edc:	f04f 0200 	mov.w	r2, #0
 8014ee0:	d124      	bne.n	8014f2c <_dtoa_r+0x60c>
 8014ee2:	4b1b      	ldr	r3, [pc, #108]	; (8014f50 <_dtoa_r+0x630>)
 8014ee4:	4650      	mov	r0, sl
 8014ee6:	4659      	mov	r1, fp
 8014ee8:	f7eb f9e8 	bl	80002bc <__adddf3>
 8014eec:	4602      	mov	r2, r0
 8014eee:	460b      	mov	r3, r1
 8014ef0:	4640      	mov	r0, r8
 8014ef2:	4649      	mov	r1, r9
 8014ef4:	f7eb fe28 	bl	8000b48 <__aeabi_dcmpgt>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d173      	bne.n	8014fe4 <_dtoa_r+0x6c4>
 8014efc:	4652      	mov	r2, sl
 8014efe:	465b      	mov	r3, fp
 8014f00:	4913      	ldr	r1, [pc, #76]	; (8014f50 <_dtoa_r+0x630>)
 8014f02:	2000      	movs	r0, #0
 8014f04:	f7eb f9d8 	bl	80002b8 <__aeabi_dsub>
 8014f08:	4602      	mov	r2, r0
 8014f0a:	460b      	mov	r3, r1
 8014f0c:	4640      	mov	r0, r8
 8014f0e:	4649      	mov	r1, r9
 8014f10:	f7eb fdfc 	bl	8000b0c <__aeabi_dcmplt>
 8014f14:	2800      	cmp	r0, #0
 8014f16:	f43f af35 	beq.w	8014d84 <_dtoa_r+0x464>
 8014f1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014f1c:	1e6b      	subs	r3, r5, #1
 8014f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f24:	2b30      	cmp	r3, #48	; 0x30
 8014f26:	d0f8      	beq.n	8014f1a <_dtoa_r+0x5fa>
 8014f28:	9700      	str	r7, [sp, #0]
 8014f2a:	e049      	b.n	8014fc0 <_dtoa_r+0x6a0>
 8014f2c:	4b05      	ldr	r3, [pc, #20]	; (8014f44 <_dtoa_r+0x624>)
 8014f2e:	f7eb fb7b 	bl	8000628 <__aeabi_dmul>
 8014f32:	4680      	mov	r8, r0
 8014f34:	4689      	mov	r9, r1
 8014f36:	e7bd      	b.n	8014eb4 <_dtoa_r+0x594>
 8014f38:	080259f0 	.word	0x080259f0
 8014f3c:	080259c8 	.word	0x080259c8
 8014f40:	3ff00000 	.word	0x3ff00000
 8014f44:	40240000 	.word	0x40240000
 8014f48:	401c0000 	.word	0x401c0000
 8014f4c:	40140000 	.word	0x40140000
 8014f50:	3fe00000 	.word	0x3fe00000
 8014f54:	9d01      	ldr	r5, [sp, #4]
 8014f56:	4656      	mov	r6, sl
 8014f58:	465f      	mov	r7, fp
 8014f5a:	4642      	mov	r2, r8
 8014f5c:	464b      	mov	r3, r9
 8014f5e:	4630      	mov	r0, r6
 8014f60:	4639      	mov	r1, r7
 8014f62:	f7eb fc8b 	bl	800087c <__aeabi_ddiv>
 8014f66:	f7eb fe0f 	bl	8000b88 <__aeabi_d2iz>
 8014f6a:	4682      	mov	sl, r0
 8014f6c:	f7eb faf2 	bl	8000554 <__aeabi_i2d>
 8014f70:	4642      	mov	r2, r8
 8014f72:	464b      	mov	r3, r9
 8014f74:	f7eb fb58 	bl	8000628 <__aeabi_dmul>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	4630      	mov	r0, r6
 8014f7e:	4639      	mov	r1, r7
 8014f80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014f84:	f7eb f998 	bl	80002b8 <__aeabi_dsub>
 8014f88:	f805 6b01 	strb.w	r6, [r5], #1
 8014f8c:	9e01      	ldr	r6, [sp, #4]
 8014f8e:	9f03      	ldr	r7, [sp, #12]
 8014f90:	1bae      	subs	r6, r5, r6
 8014f92:	42b7      	cmp	r7, r6
 8014f94:	4602      	mov	r2, r0
 8014f96:	460b      	mov	r3, r1
 8014f98:	d135      	bne.n	8015006 <_dtoa_r+0x6e6>
 8014f9a:	f7eb f98f 	bl	80002bc <__adddf3>
 8014f9e:	4642      	mov	r2, r8
 8014fa0:	464b      	mov	r3, r9
 8014fa2:	4606      	mov	r6, r0
 8014fa4:	460f      	mov	r7, r1
 8014fa6:	f7eb fdcf 	bl	8000b48 <__aeabi_dcmpgt>
 8014faa:	b9d0      	cbnz	r0, 8014fe2 <_dtoa_r+0x6c2>
 8014fac:	4642      	mov	r2, r8
 8014fae:	464b      	mov	r3, r9
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	4639      	mov	r1, r7
 8014fb4:	f7eb fda0 	bl	8000af8 <__aeabi_dcmpeq>
 8014fb8:	b110      	cbz	r0, 8014fc0 <_dtoa_r+0x6a0>
 8014fba:	f01a 0f01 	tst.w	sl, #1
 8014fbe:	d110      	bne.n	8014fe2 <_dtoa_r+0x6c2>
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	ee18 1a10 	vmov	r1, s16
 8014fc6:	f001 f889 	bl	80160dc <_Bfree>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	9800      	ldr	r0, [sp, #0]
 8014fce:	702b      	strb	r3, [r5, #0]
 8014fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd2:	3001      	adds	r0, #1
 8014fd4:	6018      	str	r0, [r3, #0]
 8014fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f43f acf1 	beq.w	80149c0 <_dtoa_r+0xa0>
 8014fde:	601d      	str	r5, [r3, #0]
 8014fe0:	e4ee      	b.n	80149c0 <_dtoa_r+0xa0>
 8014fe2:	9f00      	ldr	r7, [sp, #0]
 8014fe4:	462b      	mov	r3, r5
 8014fe6:	461d      	mov	r5, r3
 8014fe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fec:	2a39      	cmp	r2, #57	; 0x39
 8014fee:	d106      	bne.n	8014ffe <_dtoa_r+0x6de>
 8014ff0:	9a01      	ldr	r2, [sp, #4]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d1f7      	bne.n	8014fe6 <_dtoa_r+0x6c6>
 8014ff6:	9901      	ldr	r1, [sp, #4]
 8014ff8:	2230      	movs	r2, #48	; 0x30
 8014ffa:	3701      	adds	r7, #1
 8014ffc:	700a      	strb	r2, [r1, #0]
 8014ffe:	781a      	ldrb	r2, [r3, #0]
 8015000:	3201      	adds	r2, #1
 8015002:	701a      	strb	r2, [r3, #0]
 8015004:	e790      	b.n	8014f28 <_dtoa_r+0x608>
 8015006:	4ba6      	ldr	r3, [pc, #664]	; (80152a0 <_dtoa_r+0x980>)
 8015008:	2200      	movs	r2, #0
 801500a:	f7eb fb0d 	bl	8000628 <__aeabi_dmul>
 801500e:	2200      	movs	r2, #0
 8015010:	2300      	movs	r3, #0
 8015012:	4606      	mov	r6, r0
 8015014:	460f      	mov	r7, r1
 8015016:	f7eb fd6f 	bl	8000af8 <__aeabi_dcmpeq>
 801501a:	2800      	cmp	r0, #0
 801501c:	d09d      	beq.n	8014f5a <_dtoa_r+0x63a>
 801501e:	e7cf      	b.n	8014fc0 <_dtoa_r+0x6a0>
 8015020:	9a08      	ldr	r2, [sp, #32]
 8015022:	2a00      	cmp	r2, #0
 8015024:	f000 80d7 	beq.w	80151d6 <_dtoa_r+0x8b6>
 8015028:	9a06      	ldr	r2, [sp, #24]
 801502a:	2a01      	cmp	r2, #1
 801502c:	f300 80ba 	bgt.w	80151a4 <_dtoa_r+0x884>
 8015030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015032:	2a00      	cmp	r2, #0
 8015034:	f000 80b2 	beq.w	801519c <_dtoa_r+0x87c>
 8015038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801503c:	9e07      	ldr	r6, [sp, #28]
 801503e:	9d04      	ldr	r5, [sp, #16]
 8015040:	9a04      	ldr	r2, [sp, #16]
 8015042:	441a      	add	r2, r3
 8015044:	9204      	str	r2, [sp, #16]
 8015046:	9a05      	ldr	r2, [sp, #20]
 8015048:	2101      	movs	r1, #1
 801504a:	441a      	add	r2, r3
 801504c:	4620      	mov	r0, r4
 801504e:	9205      	str	r2, [sp, #20]
 8015050:	f001 f946 	bl	80162e0 <__i2b>
 8015054:	4607      	mov	r7, r0
 8015056:	2d00      	cmp	r5, #0
 8015058:	dd0c      	ble.n	8015074 <_dtoa_r+0x754>
 801505a:	9b05      	ldr	r3, [sp, #20]
 801505c:	2b00      	cmp	r3, #0
 801505e:	dd09      	ble.n	8015074 <_dtoa_r+0x754>
 8015060:	42ab      	cmp	r3, r5
 8015062:	9a04      	ldr	r2, [sp, #16]
 8015064:	bfa8      	it	ge
 8015066:	462b      	movge	r3, r5
 8015068:	1ad2      	subs	r2, r2, r3
 801506a:	9204      	str	r2, [sp, #16]
 801506c:	9a05      	ldr	r2, [sp, #20]
 801506e:	1aed      	subs	r5, r5, r3
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	9305      	str	r3, [sp, #20]
 8015074:	9b07      	ldr	r3, [sp, #28]
 8015076:	b31b      	cbz	r3, 80150c0 <_dtoa_r+0x7a0>
 8015078:	9b08      	ldr	r3, [sp, #32]
 801507a:	2b00      	cmp	r3, #0
 801507c:	f000 80af 	beq.w	80151de <_dtoa_r+0x8be>
 8015080:	2e00      	cmp	r6, #0
 8015082:	dd13      	ble.n	80150ac <_dtoa_r+0x78c>
 8015084:	4639      	mov	r1, r7
 8015086:	4632      	mov	r2, r6
 8015088:	4620      	mov	r0, r4
 801508a:	f001 f9e9 	bl	8016460 <__pow5mult>
 801508e:	ee18 2a10 	vmov	r2, s16
 8015092:	4601      	mov	r1, r0
 8015094:	4607      	mov	r7, r0
 8015096:	4620      	mov	r0, r4
 8015098:	f001 f938 	bl	801630c <__multiply>
 801509c:	ee18 1a10 	vmov	r1, s16
 80150a0:	4680      	mov	r8, r0
 80150a2:	4620      	mov	r0, r4
 80150a4:	f001 f81a 	bl	80160dc <_Bfree>
 80150a8:	ee08 8a10 	vmov	s16, r8
 80150ac:	9b07      	ldr	r3, [sp, #28]
 80150ae:	1b9a      	subs	r2, r3, r6
 80150b0:	d006      	beq.n	80150c0 <_dtoa_r+0x7a0>
 80150b2:	ee18 1a10 	vmov	r1, s16
 80150b6:	4620      	mov	r0, r4
 80150b8:	f001 f9d2 	bl	8016460 <__pow5mult>
 80150bc:	ee08 0a10 	vmov	s16, r0
 80150c0:	2101      	movs	r1, #1
 80150c2:	4620      	mov	r0, r4
 80150c4:	f001 f90c 	bl	80162e0 <__i2b>
 80150c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	4606      	mov	r6, r0
 80150ce:	f340 8088 	ble.w	80151e2 <_dtoa_r+0x8c2>
 80150d2:	461a      	mov	r2, r3
 80150d4:	4601      	mov	r1, r0
 80150d6:	4620      	mov	r0, r4
 80150d8:	f001 f9c2 	bl	8016460 <__pow5mult>
 80150dc:	9b06      	ldr	r3, [sp, #24]
 80150de:	2b01      	cmp	r3, #1
 80150e0:	4606      	mov	r6, r0
 80150e2:	f340 8081 	ble.w	80151e8 <_dtoa_r+0x8c8>
 80150e6:	f04f 0800 	mov.w	r8, #0
 80150ea:	6933      	ldr	r3, [r6, #16]
 80150ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80150f0:	6918      	ldr	r0, [r3, #16]
 80150f2:	f001 f8a5 	bl	8016240 <__hi0bits>
 80150f6:	f1c0 0020 	rsb	r0, r0, #32
 80150fa:	9b05      	ldr	r3, [sp, #20]
 80150fc:	4418      	add	r0, r3
 80150fe:	f010 001f 	ands.w	r0, r0, #31
 8015102:	f000 8092 	beq.w	801522a <_dtoa_r+0x90a>
 8015106:	f1c0 0320 	rsb	r3, r0, #32
 801510a:	2b04      	cmp	r3, #4
 801510c:	f340 808a 	ble.w	8015224 <_dtoa_r+0x904>
 8015110:	f1c0 001c 	rsb	r0, r0, #28
 8015114:	9b04      	ldr	r3, [sp, #16]
 8015116:	4403      	add	r3, r0
 8015118:	9304      	str	r3, [sp, #16]
 801511a:	9b05      	ldr	r3, [sp, #20]
 801511c:	4403      	add	r3, r0
 801511e:	4405      	add	r5, r0
 8015120:	9305      	str	r3, [sp, #20]
 8015122:	9b04      	ldr	r3, [sp, #16]
 8015124:	2b00      	cmp	r3, #0
 8015126:	dd07      	ble.n	8015138 <_dtoa_r+0x818>
 8015128:	ee18 1a10 	vmov	r1, s16
 801512c:	461a      	mov	r2, r3
 801512e:	4620      	mov	r0, r4
 8015130:	f001 f9f0 	bl	8016514 <__lshift>
 8015134:	ee08 0a10 	vmov	s16, r0
 8015138:	9b05      	ldr	r3, [sp, #20]
 801513a:	2b00      	cmp	r3, #0
 801513c:	dd05      	ble.n	801514a <_dtoa_r+0x82a>
 801513e:	4631      	mov	r1, r6
 8015140:	461a      	mov	r2, r3
 8015142:	4620      	mov	r0, r4
 8015144:	f001 f9e6 	bl	8016514 <__lshift>
 8015148:	4606      	mov	r6, r0
 801514a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801514c:	2b00      	cmp	r3, #0
 801514e:	d06e      	beq.n	801522e <_dtoa_r+0x90e>
 8015150:	ee18 0a10 	vmov	r0, s16
 8015154:	4631      	mov	r1, r6
 8015156:	f001 fa4d 	bl	80165f4 <__mcmp>
 801515a:	2800      	cmp	r0, #0
 801515c:	da67      	bge.n	801522e <_dtoa_r+0x90e>
 801515e:	9b00      	ldr	r3, [sp, #0]
 8015160:	3b01      	subs	r3, #1
 8015162:	ee18 1a10 	vmov	r1, s16
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	220a      	movs	r2, #10
 801516a:	2300      	movs	r3, #0
 801516c:	4620      	mov	r0, r4
 801516e:	f000 ffd7 	bl	8016120 <__multadd>
 8015172:	9b08      	ldr	r3, [sp, #32]
 8015174:	ee08 0a10 	vmov	s16, r0
 8015178:	2b00      	cmp	r3, #0
 801517a:	f000 81b1 	beq.w	80154e0 <_dtoa_r+0xbc0>
 801517e:	2300      	movs	r3, #0
 8015180:	4639      	mov	r1, r7
 8015182:	220a      	movs	r2, #10
 8015184:	4620      	mov	r0, r4
 8015186:	f000 ffcb 	bl	8016120 <__multadd>
 801518a:	9b02      	ldr	r3, [sp, #8]
 801518c:	2b00      	cmp	r3, #0
 801518e:	4607      	mov	r7, r0
 8015190:	f300 808e 	bgt.w	80152b0 <_dtoa_r+0x990>
 8015194:	9b06      	ldr	r3, [sp, #24]
 8015196:	2b02      	cmp	r3, #2
 8015198:	dc51      	bgt.n	801523e <_dtoa_r+0x91e>
 801519a:	e089      	b.n	80152b0 <_dtoa_r+0x990>
 801519c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801519e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80151a2:	e74b      	b.n	801503c <_dtoa_r+0x71c>
 80151a4:	9b03      	ldr	r3, [sp, #12]
 80151a6:	1e5e      	subs	r6, r3, #1
 80151a8:	9b07      	ldr	r3, [sp, #28]
 80151aa:	42b3      	cmp	r3, r6
 80151ac:	bfbf      	itttt	lt
 80151ae:	9b07      	ldrlt	r3, [sp, #28]
 80151b0:	9607      	strlt	r6, [sp, #28]
 80151b2:	1af2      	sublt	r2, r6, r3
 80151b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80151b6:	bfb6      	itet	lt
 80151b8:	189b      	addlt	r3, r3, r2
 80151ba:	1b9e      	subge	r6, r3, r6
 80151bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80151be:	9b03      	ldr	r3, [sp, #12]
 80151c0:	bfb8      	it	lt
 80151c2:	2600      	movlt	r6, #0
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	bfb7      	itett	lt
 80151c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80151cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80151d0:	1a9d      	sublt	r5, r3, r2
 80151d2:	2300      	movlt	r3, #0
 80151d4:	e734      	b.n	8015040 <_dtoa_r+0x720>
 80151d6:	9e07      	ldr	r6, [sp, #28]
 80151d8:	9d04      	ldr	r5, [sp, #16]
 80151da:	9f08      	ldr	r7, [sp, #32]
 80151dc:	e73b      	b.n	8015056 <_dtoa_r+0x736>
 80151de:	9a07      	ldr	r2, [sp, #28]
 80151e0:	e767      	b.n	80150b2 <_dtoa_r+0x792>
 80151e2:	9b06      	ldr	r3, [sp, #24]
 80151e4:	2b01      	cmp	r3, #1
 80151e6:	dc18      	bgt.n	801521a <_dtoa_r+0x8fa>
 80151e8:	f1ba 0f00 	cmp.w	sl, #0
 80151ec:	d115      	bne.n	801521a <_dtoa_r+0x8fa>
 80151ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80151f2:	b993      	cbnz	r3, 801521a <_dtoa_r+0x8fa>
 80151f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80151f8:	0d1b      	lsrs	r3, r3, #20
 80151fa:	051b      	lsls	r3, r3, #20
 80151fc:	b183      	cbz	r3, 8015220 <_dtoa_r+0x900>
 80151fe:	9b04      	ldr	r3, [sp, #16]
 8015200:	3301      	adds	r3, #1
 8015202:	9304      	str	r3, [sp, #16]
 8015204:	9b05      	ldr	r3, [sp, #20]
 8015206:	3301      	adds	r3, #1
 8015208:	9305      	str	r3, [sp, #20]
 801520a:	f04f 0801 	mov.w	r8, #1
 801520e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015210:	2b00      	cmp	r3, #0
 8015212:	f47f af6a 	bne.w	80150ea <_dtoa_r+0x7ca>
 8015216:	2001      	movs	r0, #1
 8015218:	e76f      	b.n	80150fa <_dtoa_r+0x7da>
 801521a:	f04f 0800 	mov.w	r8, #0
 801521e:	e7f6      	b.n	801520e <_dtoa_r+0x8ee>
 8015220:	4698      	mov	r8, r3
 8015222:	e7f4      	b.n	801520e <_dtoa_r+0x8ee>
 8015224:	f43f af7d 	beq.w	8015122 <_dtoa_r+0x802>
 8015228:	4618      	mov	r0, r3
 801522a:	301c      	adds	r0, #28
 801522c:	e772      	b.n	8015114 <_dtoa_r+0x7f4>
 801522e:	9b03      	ldr	r3, [sp, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	dc37      	bgt.n	80152a4 <_dtoa_r+0x984>
 8015234:	9b06      	ldr	r3, [sp, #24]
 8015236:	2b02      	cmp	r3, #2
 8015238:	dd34      	ble.n	80152a4 <_dtoa_r+0x984>
 801523a:	9b03      	ldr	r3, [sp, #12]
 801523c:	9302      	str	r3, [sp, #8]
 801523e:	9b02      	ldr	r3, [sp, #8]
 8015240:	b96b      	cbnz	r3, 801525e <_dtoa_r+0x93e>
 8015242:	4631      	mov	r1, r6
 8015244:	2205      	movs	r2, #5
 8015246:	4620      	mov	r0, r4
 8015248:	f000 ff6a 	bl	8016120 <__multadd>
 801524c:	4601      	mov	r1, r0
 801524e:	4606      	mov	r6, r0
 8015250:	ee18 0a10 	vmov	r0, s16
 8015254:	f001 f9ce 	bl	80165f4 <__mcmp>
 8015258:	2800      	cmp	r0, #0
 801525a:	f73f adbb 	bgt.w	8014dd4 <_dtoa_r+0x4b4>
 801525e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015260:	9d01      	ldr	r5, [sp, #4]
 8015262:	43db      	mvns	r3, r3
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	f04f 0800 	mov.w	r8, #0
 801526a:	4631      	mov	r1, r6
 801526c:	4620      	mov	r0, r4
 801526e:	f000 ff35 	bl	80160dc <_Bfree>
 8015272:	2f00      	cmp	r7, #0
 8015274:	f43f aea4 	beq.w	8014fc0 <_dtoa_r+0x6a0>
 8015278:	f1b8 0f00 	cmp.w	r8, #0
 801527c:	d005      	beq.n	801528a <_dtoa_r+0x96a>
 801527e:	45b8      	cmp	r8, r7
 8015280:	d003      	beq.n	801528a <_dtoa_r+0x96a>
 8015282:	4641      	mov	r1, r8
 8015284:	4620      	mov	r0, r4
 8015286:	f000 ff29 	bl	80160dc <_Bfree>
 801528a:	4639      	mov	r1, r7
 801528c:	4620      	mov	r0, r4
 801528e:	f000 ff25 	bl	80160dc <_Bfree>
 8015292:	e695      	b.n	8014fc0 <_dtoa_r+0x6a0>
 8015294:	2600      	movs	r6, #0
 8015296:	4637      	mov	r7, r6
 8015298:	e7e1      	b.n	801525e <_dtoa_r+0x93e>
 801529a:	9700      	str	r7, [sp, #0]
 801529c:	4637      	mov	r7, r6
 801529e:	e599      	b.n	8014dd4 <_dtoa_r+0x4b4>
 80152a0:	40240000 	.word	0x40240000
 80152a4:	9b08      	ldr	r3, [sp, #32]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	f000 80ca 	beq.w	8015440 <_dtoa_r+0xb20>
 80152ac:	9b03      	ldr	r3, [sp, #12]
 80152ae:	9302      	str	r3, [sp, #8]
 80152b0:	2d00      	cmp	r5, #0
 80152b2:	dd05      	ble.n	80152c0 <_dtoa_r+0x9a0>
 80152b4:	4639      	mov	r1, r7
 80152b6:	462a      	mov	r2, r5
 80152b8:	4620      	mov	r0, r4
 80152ba:	f001 f92b 	bl	8016514 <__lshift>
 80152be:	4607      	mov	r7, r0
 80152c0:	f1b8 0f00 	cmp.w	r8, #0
 80152c4:	d05b      	beq.n	801537e <_dtoa_r+0xa5e>
 80152c6:	6879      	ldr	r1, [r7, #4]
 80152c8:	4620      	mov	r0, r4
 80152ca:	f000 fec7 	bl	801605c <_Balloc>
 80152ce:	4605      	mov	r5, r0
 80152d0:	b928      	cbnz	r0, 80152de <_dtoa_r+0x9be>
 80152d2:	4b87      	ldr	r3, [pc, #540]	; (80154f0 <_dtoa_r+0xbd0>)
 80152d4:	4602      	mov	r2, r0
 80152d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80152da:	f7ff bb3b 	b.w	8014954 <_dtoa_r+0x34>
 80152de:	693a      	ldr	r2, [r7, #16]
 80152e0:	3202      	adds	r2, #2
 80152e2:	0092      	lsls	r2, r2, #2
 80152e4:	f107 010c 	add.w	r1, r7, #12
 80152e8:	300c      	adds	r0, #12
 80152ea:	f7fd fcf5 	bl	8012cd8 <memcpy>
 80152ee:	2201      	movs	r2, #1
 80152f0:	4629      	mov	r1, r5
 80152f2:	4620      	mov	r0, r4
 80152f4:	f001 f90e 	bl	8016514 <__lshift>
 80152f8:	9b01      	ldr	r3, [sp, #4]
 80152fa:	f103 0901 	add.w	r9, r3, #1
 80152fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015302:	4413      	add	r3, r2
 8015304:	9305      	str	r3, [sp, #20]
 8015306:	f00a 0301 	and.w	r3, sl, #1
 801530a:	46b8      	mov	r8, r7
 801530c:	9304      	str	r3, [sp, #16]
 801530e:	4607      	mov	r7, r0
 8015310:	4631      	mov	r1, r6
 8015312:	ee18 0a10 	vmov	r0, s16
 8015316:	f7ff fa77 	bl	8014808 <quorem>
 801531a:	4641      	mov	r1, r8
 801531c:	9002      	str	r0, [sp, #8]
 801531e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015322:	ee18 0a10 	vmov	r0, s16
 8015326:	f001 f965 	bl	80165f4 <__mcmp>
 801532a:	463a      	mov	r2, r7
 801532c:	9003      	str	r0, [sp, #12]
 801532e:	4631      	mov	r1, r6
 8015330:	4620      	mov	r0, r4
 8015332:	f001 f97b 	bl	801662c <__mdiff>
 8015336:	68c2      	ldr	r2, [r0, #12]
 8015338:	f109 3bff 	add.w	fp, r9, #4294967295
 801533c:	4605      	mov	r5, r0
 801533e:	bb02      	cbnz	r2, 8015382 <_dtoa_r+0xa62>
 8015340:	4601      	mov	r1, r0
 8015342:	ee18 0a10 	vmov	r0, s16
 8015346:	f001 f955 	bl	80165f4 <__mcmp>
 801534a:	4602      	mov	r2, r0
 801534c:	4629      	mov	r1, r5
 801534e:	4620      	mov	r0, r4
 8015350:	9207      	str	r2, [sp, #28]
 8015352:	f000 fec3 	bl	80160dc <_Bfree>
 8015356:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801535a:	ea43 0102 	orr.w	r1, r3, r2
 801535e:	9b04      	ldr	r3, [sp, #16]
 8015360:	430b      	orrs	r3, r1
 8015362:	464d      	mov	r5, r9
 8015364:	d10f      	bne.n	8015386 <_dtoa_r+0xa66>
 8015366:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801536a:	d02a      	beq.n	80153c2 <_dtoa_r+0xaa2>
 801536c:	9b03      	ldr	r3, [sp, #12]
 801536e:	2b00      	cmp	r3, #0
 8015370:	dd02      	ble.n	8015378 <_dtoa_r+0xa58>
 8015372:	9b02      	ldr	r3, [sp, #8]
 8015374:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015378:	f88b a000 	strb.w	sl, [fp]
 801537c:	e775      	b.n	801526a <_dtoa_r+0x94a>
 801537e:	4638      	mov	r0, r7
 8015380:	e7ba      	b.n	80152f8 <_dtoa_r+0x9d8>
 8015382:	2201      	movs	r2, #1
 8015384:	e7e2      	b.n	801534c <_dtoa_r+0xa2c>
 8015386:	9b03      	ldr	r3, [sp, #12]
 8015388:	2b00      	cmp	r3, #0
 801538a:	db04      	blt.n	8015396 <_dtoa_r+0xa76>
 801538c:	9906      	ldr	r1, [sp, #24]
 801538e:	430b      	orrs	r3, r1
 8015390:	9904      	ldr	r1, [sp, #16]
 8015392:	430b      	orrs	r3, r1
 8015394:	d122      	bne.n	80153dc <_dtoa_r+0xabc>
 8015396:	2a00      	cmp	r2, #0
 8015398:	ddee      	ble.n	8015378 <_dtoa_r+0xa58>
 801539a:	ee18 1a10 	vmov	r1, s16
 801539e:	2201      	movs	r2, #1
 80153a0:	4620      	mov	r0, r4
 80153a2:	f001 f8b7 	bl	8016514 <__lshift>
 80153a6:	4631      	mov	r1, r6
 80153a8:	ee08 0a10 	vmov	s16, r0
 80153ac:	f001 f922 	bl	80165f4 <__mcmp>
 80153b0:	2800      	cmp	r0, #0
 80153b2:	dc03      	bgt.n	80153bc <_dtoa_r+0xa9c>
 80153b4:	d1e0      	bne.n	8015378 <_dtoa_r+0xa58>
 80153b6:	f01a 0f01 	tst.w	sl, #1
 80153ba:	d0dd      	beq.n	8015378 <_dtoa_r+0xa58>
 80153bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80153c0:	d1d7      	bne.n	8015372 <_dtoa_r+0xa52>
 80153c2:	2339      	movs	r3, #57	; 0x39
 80153c4:	f88b 3000 	strb.w	r3, [fp]
 80153c8:	462b      	mov	r3, r5
 80153ca:	461d      	mov	r5, r3
 80153cc:	3b01      	subs	r3, #1
 80153ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80153d2:	2a39      	cmp	r2, #57	; 0x39
 80153d4:	d071      	beq.n	80154ba <_dtoa_r+0xb9a>
 80153d6:	3201      	adds	r2, #1
 80153d8:	701a      	strb	r2, [r3, #0]
 80153da:	e746      	b.n	801526a <_dtoa_r+0x94a>
 80153dc:	2a00      	cmp	r2, #0
 80153de:	dd07      	ble.n	80153f0 <_dtoa_r+0xad0>
 80153e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80153e4:	d0ed      	beq.n	80153c2 <_dtoa_r+0xaa2>
 80153e6:	f10a 0301 	add.w	r3, sl, #1
 80153ea:	f88b 3000 	strb.w	r3, [fp]
 80153ee:	e73c      	b.n	801526a <_dtoa_r+0x94a>
 80153f0:	9b05      	ldr	r3, [sp, #20]
 80153f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80153f6:	4599      	cmp	r9, r3
 80153f8:	d047      	beq.n	801548a <_dtoa_r+0xb6a>
 80153fa:	ee18 1a10 	vmov	r1, s16
 80153fe:	2300      	movs	r3, #0
 8015400:	220a      	movs	r2, #10
 8015402:	4620      	mov	r0, r4
 8015404:	f000 fe8c 	bl	8016120 <__multadd>
 8015408:	45b8      	cmp	r8, r7
 801540a:	ee08 0a10 	vmov	s16, r0
 801540e:	f04f 0300 	mov.w	r3, #0
 8015412:	f04f 020a 	mov.w	r2, #10
 8015416:	4641      	mov	r1, r8
 8015418:	4620      	mov	r0, r4
 801541a:	d106      	bne.n	801542a <_dtoa_r+0xb0a>
 801541c:	f000 fe80 	bl	8016120 <__multadd>
 8015420:	4680      	mov	r8, r0
 8015422:	4607      	mov	r7, r0
 8015424:	f109 0901 	add.w	r9, r9, #1
 8015428:	e772      	b.n	8015310 <_dtoa_r+0x9f0>
 801542a:	f000 fe79 	bl	8016120 <__multadd>
 801542e:	4639      	mov	r1, r7
 8015430:	4680      	mov	r8, r0
 8015432:	2300      	movs	r3, #0
 8015434:	220a      	movs	r2, #10
 8015436:	4620      	mov	r0, r4
 8015438:	f000 fe72 	bl	8016120 <__multadd>
 801543c:	4607      	mov	r7, r0
 801543e:	e7f1      	b.n	8015424 <_dtoa_r+0xb04>
 8015440:	9b03      	ldr	r3, [sp, #12]
 8015442:	9302      	str	r3, [sp, #8]
 8015444:	9d01      	ldr	r5, [sp, #4]
 8015446:	ee18 0a10 	vmov	r0, s16
 801544a:	4631      	mov	r1, r6
 801544c:	f7ff f9dc 	bl	8014808 <quorem>
 8015450:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015454:	9b01      	ldr	r3, [sp, #4]
 8015456:	f805 ab01 	strb.w	sl, [r5], #1
 801545a:	1aea      	subs	r2, r5, r3
 801545c:	9b02      	ldr	r3, [sp, #8]
 801545e:	4293      	cmp	r3, r2
 8015460:	dd09      	ble.n	8015476 <_dtoa_r+0xb56>
 8015462:	ee18 1a10 	vmov	r1, s16
 8015466:	2300      	movs	r3, #0
 8015468:	220a      	movs	r2, #10
 801546a:	4620      	mov	r0, r4
 801546c:	f000 fe58 	bl	8016120 <__multadd>
 8015470:	ee08 0a10 	vmov	s16, r0
 8015474:	e7e7      	b.n	8015446 <_dtoa_r+0xb26>
 8015476:	9b02      	ldr	r3, [sp, #8]
 8015478:	2b00      	cmp	r3, #0
 801547a:	bfc8      	it	gt
 801547c:	461d      	movgt	r5, r3
 801547e:	9b01      	ldr	r3, [sp, #4]
 8015480:	bfd8      	it	le
 8015482:	2501      	movle	r5, #1
 8015484:	441d      	add	r5, r3
 8015486:	f04f 0800 	mov.w	r8, #0
 801548a:	ee18 1a10 	vmov	r1, s16
 801548e:	2201      	movs	r2, #1
 8015490:	4620      	mov	r0, r4
 8015492:	f001 f83f 	bl	8016514 <__lshift>
 8015496:	4631      	mov	r1, r6
 8015498:	ee08 0a10 	vmov	s16, r0
 801549c:	f001 f8aa 	bl	80165f4 <__mcmp>
 80154a0:	2800      	cmp	r0, #0
 80154a2:	dc91      	bgt.n	80153c8 <_dtoa_r+0xaa8>
 80154a4:	d102      	bne.n	80154ac <_dtoa_r+0xb8c>
 80154a6:	f01a 0f01 	tst.w	sl, #1
 80154aa:	d18d      	bne.n	80153c8 <_dtoa_r+0xaa8>
 80154ac:	462b      	mov	r3, r5
 80154ae:	461d      	mov	r5, r3
 80154b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80154b4:	2a30      	cmp	r2, #48	; 0x30
 80154b6:	d0fa      	beq.n	80154ae <_dtoa_r+0xb8e>
 80154b8:	e6d7      	b.n	801526a <_dtoa_r+0x94a>
 80154ba:	9a01      	ldr	r2, [sp, #4]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d184      	bne.n	80153ca <_dtoa_r+0xaaa>
 80154c0:	9b00      	ldr	r3, [sp, #0]
 80154c2:	3301      	adds	r3, #1
 80154c4:	9300      	str	r3, [sp, #0]
 80154c6:	2331      	movs	r3, #49	; 0x31
 80154c8:	7013      	strb	r3, [r2, #0]
 80154ca:	e6ce      	b.n	801526a <_dtoa_r+0x94a>
 80154cc:	4b09      	ldr	r3, [pc, #36]	; (80154f4 <_dtoa_r+0xbd4>)
 80154ce:	f7ff ba95 	b.w	80149fc <_dtoa_r+0xdc>
 80154d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f47f aa6e 	bne.w	80149b6 <_dtoa_r+0x96>
 80154da:	4b07      	ldr	r3, [pc, #28]	; (80154f8 <_dtoa_r+0xbd8>)
 80154dc:	f7ff ba8e 	b.w	80149fc <_dtoa_r+0xdc>
 80154e0:	9b02      	ldr	r3, [sp, #8]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	dcae      	bgt.n	8015444 <_dtoa_r+0xb24>
 80154e6:	9b06      	ldr	r3, [sp, #24]
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	f73f aea8 	bgt.w	801523e <_dtoa_r+0x91e>
 80154ee:	e7a9      	b.n	8015444 <_dtoa_r+0xb24>
 80154f0:	08025878 	.word	0x08025878
 80154f4:	08025680 	.word	0x08025680
 80154f8:	080257f9 	.word	0x080257f9

080154fc <__sflush_r>:
 80154fc:	898a      	ldrh	r2, [r1, #12]
 80154fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015502:	4605      	mov	r5, r0
 8015504:	0710      	lsls	r0, r2, #28
 8015506:	460c      	mov	r4, r1
 8015508:	d458      	bmi.n	80155bc <__sflush_r+0xc0>
 801550a:	684b      	ldr	r3, [r1, #4]
 801550c:	2b00      	cmp	r3, #0
 801550e:	dc05      	bgt.n	801551c <__sflush_r+0x20>
 8015510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015512:	2b00      	cmp	r3, #0
 8015514:	dc02      	bgt.n	801551c <__sflush_r+0x20>
 8015516:	2000      	movs	r0, #0
 8015518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801551e:	2e00      	cmp	r6, #0
 8015520:	d0f9      	beq.n	8015516 <__sflush_r+0x1a>
 8015522:	2300      	movs	r3, #0
 8015524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015528:	682f      	ldr	r7, [r5, #0]
 801552a:	602b      	str	r3, [r5, #0]
 801552c:	d032      	beq.n	8015594 <__sflush_r+0x98>
 801552e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015530:	89a3      	ldrh	r3, [r4, #12]
 8015532:	075a      	lsls	r2, r3, #29
 8015534:	d505      	bpl.n	8015542 <__sflush_r+0x46>
 8015536:	6863      	ldr	r3, [r4, #4]
 8015538:	1ac0      	subs	r0, r0, r3
 801553a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801553c:	b10b      	cbz	r3, 8015542 <__sflush_r+0x46>
 801553e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015540:	1ac0      	subs	r0, r0, r3
 8015542:	2300      	movs	r3, #0
 8015544:	4602      	mov	r2, r0
 8015546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015548:	6a21      	ldr	r1, [r4, #32]
 801554a:	4628      	mov	r0, r5
 801554c:	47b0      	blx	r6
 801554e:	1c43      	adds	r3, r0, #1
 8015550:	89a3      	ldrh	r3, [r4, #12]
 8015552:	d106      	bne.n	8015562 <__sflush_r+0x66>
 8015554:	6829      	ldr	r1, [r5, #0]
 8015556:	291d      	cmp	r1, #29
 8015558:	d82c      	bhi.n	80155b4 <__sflush_r+0xb8>
 801555a:	4a2a      	ldr	r2, [pc, #168]	; (8015604 <__sflush_r+0x108>)
 801555c:	40ca      	lsrs	r2, r1
 801555e:	07d6      	lsls	r6, r2, #31
 8015560:	d528      	bpl.n	80155b4 <__sflush_r+0xb8>
 8015562:	2200      	movs	r2, #0
 8015564:	6062      	str	r2, [r4, #4]
 8015566:	04d9      	lsls	r1, r3, #19
 8015568:	6922      	ldr	r2, [r4, #16]
 801556a:	6022      	str	r2, [r4, #0]
 801556c:	d504      	bpl.n	8015578 <__sflush_r+0x7c>
 801556e:	1c42      	adds	r2, r0, #1
 8015570:	d101      	bne.n	8015576 <__sflush_r+0x7a>
 8015572:	682b      	ldr	r3, [r5, #0]
 8015574:	b903      	cbnz	r3, 8015578 <__sflush_r+0x7c>
 8015576:	6560      	str	r0, [r4, #84]	; 0x54
 8015578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801557a:	602f      	str	r7, [r5, #0]
 801557c:	2900      	cmp	r1, #0
 801557e:	d0ca      	beq.n	8015516 <__sflush_r+0x1a>
 8015580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015584:	4299      	cmp	r1, r3
 8015586:	d002      	beq.n	801558e <__sflush_r+0x92>
 8015588:	4628      	mov	r0, r5
 801558a:	f7fd fbbb 	bl	8012d04 <_free_r>
 801558e:	2000      	movs	r0, #0
 8015590:	6360      	str	r0, [r4, #52]	; 0x34
 8015592:	e7c1      	b.n	8015518 <__sflush_r+0x1c>
 8015594:	6a21      	ldr	r1, [r4, #32]
 8015596:	2301      	movs	r3, #1
 8015598:	4628      	mov	r0, r5
 801559a:	47b0      	blx	r6
 801559c:	1c41      	adds	r1, r0, #1
 801559e:	d1c7      	bne.n	8015530 <__sflush_r+0x34>
 80155a0:	682b      	ldr	r3, [r5, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d0c4      	beq.n	8015530 <__sflush_r+0x34>
 80155a6:	2b1d      	cmp	r3, #29
 80155a8:	d001      	beq.n	80155ae <__sflush_r+0xb2>
 80155aa:	2b16      	cmp	r3, #22
 80155ac:	d101      	bne.n	80155b2 <__sflush_r+0xb6>
 80155ae:	602f      	str	r7, [r5, #0]
 80155b0:	e7b1      	b.n	8015516 <__sflush_r+0x1a>
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155b8:	81a3      	strh	r3, [r4, #12]
 80155ba:	e7ad      	b.n	8015518 <__sflush_r+0x1c>
 80155bc:	690f      	ldr	r7, [r1, #16]
 80155be:	2f00      	cmp	r7, #0
 80155c0:	d0a9      	beq.n	8015516 <__sflush_r+0x1a>
 80155c2:	0793      	lsls	r3, r2, #30
 80155c4:	680e      	ldr	r6, [r1, #0]
 80155c6:	bf08      	it	eq
 80155c8:	694b      	ldreq	r3, [r1, #20]
 80155ca:	600f      	str	r7, [r1, #0]
 80155cc:	bf18      	it	ne
 80155ce:	2300      	movne	r3, #0
 80155d0:	eba6 0807 	sub.w	r8, r6, r7
 80155d4:	608b      	str	r3, [r1, #8]
 80155d6:	f1b8 0f00 	cmp.w	r8, #0
 80155da:	dd9c      	ble.n	8015516 <__sflush_r+0x1a>
 80155dc:	6a21      	ldr	r1, [r4, #32]
 80155de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155e0:	4643      	mov	r3, r8
 80155e2:	463a      	mov	r2, r7
 80155e4:	4628      	mov	r0, r5
 80155e6:	47b0      	blx	r6
 80155e8:	2800      	cmp	r0, #0
 80155ea:	dc06      	bgt.n	80155fa <__sflush_r+0xfe>
 80155ec:	89a3      	ldrh	r3, [r4, #12]
 80155ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155f2:	81a3      	strh	r3, [r4, #12]
 80155f4:	f04f 30ff 	mov.w	r0, #4294967295
 80155f8:	e78e      	b.n	8015518 <__sflush_r+0x1c>
 80155fa:	4407      	add	r7, r0
 80155fc:	eba8 0800 	sub.w	r8, r8, r0
 8015600:	e7e9      	b.n	80155d6 <__sflush_r+0xda>
 8015602:	bf00      	nop
 8015604:	20400001 	.word	0x20400001

08015608 <_fflush_r>:
 8015608:	b538      	push	{r3, r4, r5, lr}
 801560a:	690b      	ldr	r3, [r1, #16]
 801560c:	4605      	mov	r5, r0
 801560e:	460c      	mov	r4, r1
 8015610:	b913      	cbnz	r3, 8015618 <_fflush_r+0x10>
 8015612:	2500      	movs	r5, #0
 8015614:	4628      	mov	r0, r5
 8015616:	bd38      	pop	{r3, r4, r5, pc}
 8015618:	b118      	cbz	r0, 8015622 <_fflush_r+0x1a>
 801561a:	6983      	ldr	r3, [r0, #24]
 801561c:	b90b      	cbnz	r3, 8015622 <_fflush_r+0x1a>
 801561e:	f000 f887 	bl	8015730 <__sinit>
 8015622:	4b14      	ldr	r3, [pc, #80]	; (8015674 <_fflush_r+0x6c>)
 8015624:	429c      	cmp	r4, r3
 8015626:	d11b      	bne.n	8015660 <_fflush_r+0x58>
 8015628:	686c      	ldr	r4, [r5, #4]
 801562a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d0ef      	beq.n	8015612 <_fflush_r+0xa>
 8015632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015634:	07d0      	lsls	r0, r2, #31
 8015636:	d404      	bmi.n	8015642 <_fflush_r+0x3a>
 8015638:	0599      	lsls	r1, r3, #22
 801563a:	d402      	bmi.n	8015642 <_fflush_r+0x3a>
 801563c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801563e:	f000 fc88 	bl	8015f52 <__retarget_lock_acquire_recursive>
 8015642:	4628      	mov	r0, r5
 8015644:	4621      	mov	r1, r4
 8015646:	f7ff ff59 	bl	80154fc <__sflush_r>
 801564a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801564c:	07da      	lsls	r2, r3, #31
 801564e:	4605      	mov	r5, r0
 8015650:	d4e0      	bmi.n	8015614 <_fflush_r+0xc>
 8015652:	89a3      	ldrh	r3, [r4, #12]
 8015654:	059b      	lsls	r3, r3, #22
 8015656:	d4dd      	bmi.n	8015614 <_fflush_r+0xc>
 8015658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801565a:	f000 fc7b 	bl	8015f54 <__retarget_lock_release_recursive>
 801565e:	e7d9      	b.n	8015614 <_fflush_r+0xc>
 8015660:	4b05      	ldr	r3, [pc, #20]	; (8015678 <_fflush_r+0x70>)
 8015662:	429c      	cmp	r4, r3
 8015664:	d101      	bne.n	801566a <_fflush_r+0x62>
 8015666:	68ac      	ldr	r4, [r5, #8]
 8015668:	e7df      	b.n	801562a <_fflush_r+0x22>
 801566a:	4b04      	ldr	r3, [pc, #16]	; (801567c <_fflush_r+0x74>)
 801566c:	429c      	cmp	r4, r3
 801566e:	bf08      	it	eq
 8015670:	68ec      	ldreq	r4, [r5, #12]
 8015672:	e7da      	b.n	801562a <_fflush_r+0x22>
 8015674:	080258ac 	.word	0x080258ac
 8015678:	080258cc 	.word	0x080258cc
 801567c:	0802588c 	.word	0x0802588c

08015680 <std>:
 8015680:	2300      	movs	r3, #0
 8015682:	b510      	push	{r4, lr}
 8015684:	4604      	mov	r4, r0
 8015686:	e9c0 3300 	strd	r3, r3, [r0]
 801568a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801568e:	6083      	str	r3, [r0, #8]
 8015690:	8181      	strh	r1, [r0, #12]
 8015692:	6643      	str	r3, [r0, #100]	; 0x64
 8015694:	81c2      	strh	r2, [r0, #14]
 8015696:	6183      	str	r3, [r0, #24]
 8015698:	4619      	mov	r1, r3
 801569a:	2208      	movs	r2, #8
 801569c:	305c      	adds	r0, #92	; 0x5c
 801569e:	f7fd fb29 	bl	8012cf4 <memset>
 80156a2:	4b05      	ldr	r3, [pc, #20]	; (80156b8 <std+0x38>)
 80156a4:	6263      	str	r3, [r4, #36]	; 0x24
 80156a6:	4b05      	ldr	r3, [pc, #20]	; (80156bc <std+0x3c>)
 80156a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80156aa:	4b05      	ldr	r3, [pc, #20]	; (80156c0 <std+0x40>)
 80156ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80156ae:	4b05      	ldr	r3, [pc, #20]	; (80156c4 <std+0x44>)
 80156b0:	6224      	str	r4, [r4, #32]
 80156b2:	6323      	str	r3, [r4, #48]	; 0x30
 80156b4:	bd10      	pop	{r4, pc}
 80156b6:	bf00      	nop
 80156b8:	08016cdd 	.word	0x08016cdd
 80156bc:	08016cff 	.word	0x08016cff
 80156c0:	08016d37 	.word	0x08016d37
 80156c4:	08016d5b 	.word	0x08016d5b

080156c8 <_cleanup_r>:
 80156c8:	4901      	ldr	r1, [pc, #4]	; (80156d0 <_cleanup_r+0x8>)
 80156ca:	f000 b8af 	b.w	801582c <_fwalk_reent>
 80156ce:	bf00      	nop
 80156d0:	08015609 	.word	0x08015609

080156d4 <__sfmoreglue>:
 80156d4:	b570      	push	{r4, r5, r6, lr}
 80156d6:	2268      	movs	r2, #104	; 0x68
 80156d8:	1e4d      	subs	r5, r1, #1
 80156da:	4355      	muls	r5, r2
 80156dc:	460e      	mov	r6, r1
 80156de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80156e2:	f7fd fb7b 	bl	8012ddc <_malloc_r>
 80156e6:	4604      	mov	r4, r0
 80156e8:	b140      	cbz	r0, 80156fc <__sfmoreglue+0x28>
 80156ea:	2100      	movs	r1, #0
 80156ec:	e9c0 1600 	strd	r1, r6, [r0]
 80156f0:	300c      	adds	r0, #12
 80156f2:	60a0      	str	r0, [r4, #8]
 80156f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80156f8:	f7fd fafc 	bl	8012cf4 <memset>
 80156fc:	4620      	mov	r0, r4
 80156fe:	bd70      	pop	{r4, r5, r6, pc}

08015700 <__sfp_lock_acquire>:
 8015700:	4801      	ldr	r0, [pc, #4]	; (8015708 <__sfp_lock_acquire+0x8>)
 8015702:	f000 bc26 	b.w	8015f52 <__retarget_lock_acquire_recursive>
 8015706:	bf00      	nop
 8015708:	2000d06d 	.word	0x2000d06d

0801570c <__sfp_lock_release>:
 801570c:	4801      	ldr	r0, [pc, #4]	; (8015714 <__sfp_lock_release+0x8>)
 801570e:	f000 bc21 	b.w	8015f54 <__retarget_lock_release_recursive>
 8015712:	bf00      	nop
 8015714:	2000d06d 	.word	0x2000d06d

08015718 <__sinit_lock_acquire>:
 8015718:	4801      	ldr	r0, [pc, #4]	; (8015720 <__sinit_lock_acquire+0x8>)
 801571a:	f000 bc1a 	b.w	8015f52 <__retarget_lock_acquire_recursive>
 801571e:	bf00      	nop
 8015720:	2000d06e 	.word	0x2000d06e

08015724 <__sinit_lock_release>:
 8015724:	4801      	ldr	r0, [pc, #4]	; (801572c <__sinit_lock_release+0x8>)
 8015726:	f000 bc15 	b.w	8015f54 <__retarget_lock_release_recursive>
 801572a:	bf00      	nop
 801572c:	2000d06e 	.word	0x2000d06e

08015730 <__sinit>:
 8015730:	b510      	push	{r4, lr}
 8015732:	4604      	mov	r4, r0
 8015734:	f7ff fff0 	bl	8015718 <__sinit_lock_acquire>
 8015738:	69a3      	ldr	r3, [r4, #24]
 801573a:	b11b      	cbz	r3, 8015744 <__sinit+0x14>
 801573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015740:	f7ff bff0 	b.w	8015724 <__sinit_lock_release>
 8015744:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015748:	6523      	str	r3, [r4, #80]	; 0x50
 801574a:	4b13      	ldr	r3, [pc, #76]	; (8015798 <__sinit+0x68>)
 801574c:	4a13      	ldr	r2, [pc, #76]	; (801579c <__sinit+0x6c>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	62a2      	str	r2, [r4, #40]	; 0x28
 8015752:	42a3      	cmp	r3, r4
 8015754:	bf04      	itt	eq
 8015756:	2301      	moveq	r3, #1
 8015758:	61a3      	streq	r3, [r4, #24]
 801575a:	4620      	mov	r0, r4
 801575c:	f000 f820 	bl	80157a0 <__sfp>
 8015760:	6060      	str	r0, [r4, #4]
 8015762:	4620      	mov	r0, r4
 8015764:	f000 f81c 	bl	80157a0 <__sfp>
 8015768:	60a0      	str	r0, [r4, #8]
 801576a:	4620      	mov	r0, r4
 801576c:	f000 f818 	bl	80157a0 <__sfp>
 8015770:	2200      	movs	r2, #0
 8015772:	60e0      	str	r0, [r4, #12]
 8015774:	2104      	movs	r1, #4
 8015776:	6860      	ldr	r0, [r4, #4]
 8015778:	f7ff ff82 	bl	8015680 <std>
 801577c:	68a0      	ldr	r0, [r4, #8]
 801577e:	2201      	movs	r2, #1
 8015780:	2109      	movs	r1, #9
 8015782:	f7ff ff7d 	bl	8015680 <std>
 8015786:	68e0      	ldr	r0, [r4, #12]
 8015788:	2202      	movs	r2, #2
 801578a:	2112      	movs	r1, #18
 801578c:	f7ff ff78 	bl	8015680 <std>
 8015790:	2301      	movs	r3, #1
 8015792:	61a3      	str	r3, [r4, #24]
 8015794:	e7d2      	b.n	801573c <__sinit+0xc>
 8015796:	bf00      	nop
 8015798:	0802566c 	.word	0x0802566c
 801579c:	080156c9 	.word	0x080156c9

080157a0 <__sfp>:
 80157a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157a2:	4607      	mov	r7, r0
 80157a4:	f7ff ffac 	bl	8015700 <__sfp_lock_acquire>
 80157a8:	4b1e      	ldr	r3, [pc, #120]	; (8015824 <__sfp+0x84>)
 80157aa:	681e      	ldr	r6, [r3, #0]
 80157ac:	69b3      	ldr	r3, [r6, #24]
 80157ae:	b913      	cbnz	r3, 80157b6 <__sfp+0x16>
 80157b0:	4630      	mov	r0, r6
 80157b2:	f7ff ffbd 	bl	8015730 <__sinit>
 80157b6:	3648      	adds	r6, #72	; 0x48
 80157b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80157bc:	3b01      	subs	r3, #1
 80157be:	d503      	bpl.n	80157c8 <__sfp+0x28>
 80157c0:	6833      	ldr	r3, [r6, #0]
 80157c2:	b30b      	cbz	r3, 8015808 <__sfp+0x68>
 80157c4:	6836      	ldr	r6, [r6, #0]
 80157c6:	e7f7      	b.n	80157b8 <__sfp+0x18>
 80157c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80157cc:	b9d5      	cbnz	r5, 8015804 <__sfp+0x64>
 80157ce:	4b16      	ldr	r3, [pc, #88]	; (8015828 <__sfp+0x88>)
 80157d0:	60e3      	str	r3, [r4, #12]
 80157d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80157d6:	6665      	str	r5, [r4, #100]	; 0x64
 80157d8:	f000 fbba 	bl	8015f50 <__retarget_lock_init_recursive>
 80157dc:	f7ff ff96 	bl	801570c <__sfp_lock_release>
 80157e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80157e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80157e8:	6025      	str	r5, [r4, #0]
 80157ea:	61a5      	str	r5, [r4, #24]
 80157ec:	2208      	movs	r2, #8
 80157ee:	4629      	mov	r1, r5
 80157f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80157f4:	f7fd fa7e 	bl	8012cf4 <memset>
 80157f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80157fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015800:	4620      	mov	r0, r4
 8015802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015804:	3468      	adds	r4, #104	; 0x68
 8015806:	e7d9      	b.n	80157bc <__sfp+0x1c>
 8015808:	2104      	movs	r1, #4
 801580a:	4638      	mov	r0, r7
 801580c:	f7ff ff62 	bl	80156d4 <__sfmoreglue>
 8015810:	4604      	mov	r4, r0
 8015812:	6030      	str	r0, [r6, #0]
 8015814:	2800      	cmp	r0, #0
 8015816:	d1d5      	bne.n	80157c4 <__sfp+0x24>
 8015818:	f7ff ff78 	bl	801570c <__sfp_lock_release>
 801581c:	230c      	movs	r3, #12
 801581e:	603b      	str	r3, [r7, #0]
 8015820:	e7ee      	b.n	8015800 <__sfp+0x60>
 8015822:	bf00      	nop
 8015824:	0802566c 	.word	0x0802566c
 8015828:	ffff0001 	.word	0xffff0001

0801582c <_fwalk_reent>:
 801582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015830:	4606      	mov	r6, r0
 8015832:	4688      	mov	r8, r1
 8015834:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015838:	2700      	movs	r7, #0
 801583a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801583e:	f1b9 0901 	subs.w	r9, r9, #1
 8015842:	d505      	bpl.n	8015850 <_fwalk_reent+0x24>
 8015844:	6824      	ldr	r4, [r4, #0]
 8015846:	2c00      	cmp	r4, #0
 8015848:	d1f7      	bne.n	801583a <_fwalk_reent+0xe>
 801584a:	4638      	mov	r0, r7
 801584c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015850:	89ab      	ldrh	r3, [r5, #12]
 8015852:	2b01      	cmp	r3, #1
 8015854:	d907      	bls.n	8015866 <_fwalk_reent+0x3a>
 8015856:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801585a:	3301      	adds	r3, #1
 801585c:	d003      	beq.n	8015866 <_fwalk_reent+0x3a>
 801585e:	4629      	mov	r1, r5
 8015860:	4630      	mov	r0, r6
 8015862:	47c0      	blx	r8
 8015864:	4307      	orrs	r7, r0
 8015866:	3568      	adds	r5, #104	; 0x68
 8015868:	e7e9      	b.n	801583e <_fwalk_reent+0x12>

0801586a <rshift>:
 801586a:	6903      	ldr	r3, [r0, #16]
 801586c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015874:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015878:	f100 0414 	add.w	r4, r0, #20
 801587c:	dd45      	ble.n	801590a <rshift+0xa0>
 801587e:	f011 011f 	ands.w	r1, r1, #31
 8015882:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015886:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801588a:	d10c      	bne.n	80158a6 <rshift+0x3c>
 801588c:	f100 0710 	add.w	r7, r0, #16
 8015890:	4629      	mov	r1, r5
 8015892:	42b1      	cmp	r1, r6
 8015894:	d334      	bcc.n	8015900 <rshift+0x96>
 8015896:	1a9b      	subs	r3, r3, r2
 8015898:	009b      	lsls	r3, r3, #2
 801589a:	1eea      	subs	r2, r5, #3
 801589c:	4296      	cmp	r6, r2
 801589e:	bf38      	it	cc
 80158a0:	2300      	movcc	r3, #0
 80158a2:	4423      	add	r3, r4
 80158a4:	e015      	b.n	80158d2 <rshift+0x68>
 80158a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80158aa:	f1c1 0820 	rsb	r8, r1, #32
 80158ae:	40cf      	lsrs	r7, r1
 80158b0:	f105 0e04 	add.w	lr, r5, #4
 80158b4:	46a1      	mov	r9, r4
 80158b6:	4576      	cmp	r6, lr
 80158b8:	46f4      	mov	ip, lr
 80158ba:	d815      	bhi.n	80158e8 <rshift+0x7e>
 80158bc:	1a9a      	subs	r2, r3, r2
 80158be:	0092      	lsls	r2, r2, #2
 80158c0:	3a04      	subs	r2, #4
 80158c2:	3501      	adds	r5, #1
 80158c4:	42ae      	cmp	r6, r5
 80158c6:	bf38      	it	cc
 80158c8:	2200      	movcc	r2, #0
 80158ca:	18a3      	adds	r3, r4, r2
 80158cc:	50a7      	str	r7, [r4, r2]
 80158ce:	b107      	cbz	r7, 80158d2 <rshift+0x68>
 80158d0:	3304      	adds	r3, #4
 80158d2:	1b1a      	subs	r2, r3, r4
 80158d4:	42a3      	cmp	r3, r4
 80158d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80158da:	bf08      	it	eq
 80158dc:	2300      	moveq	r3, #0
 80158de:	6102      	str	r2, [r0, #16]
 80158e0:	bf08      	it	eq
 80158e2:	6143      	streq	r3, [r0, #20]
 80158e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158e8:	f8dc c000 	ldr.w	ip, [ip]
 80158ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80158f0:	ea4c 0707 	orr.w	r7, ip, r7
 80158f4:	f849 7b04 	str.w	r7, [r9], #4
 80158f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80158fc:	40cf      	lsrs	r7, r1
 80158fe:	e7da      	b.n	80158b6 <rshift+0x4c>
 8015900:	f851 cb04 	ldr.w	ip, [r1], #4
 8015904:	f847 cf04 	str.w	ip, [r7, #4]!
 8015908:	e7c3      	b.n	8015892 <rshift+0x28>
 801590a:	4623      	mov	r3, r4
 801590c:	e7e1      	b.n	80158d2 <rshift+0x68>

0801590e <__hexdig_fun>:
 801590e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015912:	2b09      	cmp	r3, #9
 8015914:	d802      	bhi.n	801591c <__hexdig_fun+0xe>
 8015916:	3820      	subs	r0, #32
 8015918:	b2c0      	uxtb	r0, r0
 801591a:	4770      	bx	lr
 801591c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015920:	2b05      	cmp	r3, #5
 8015922:	d801      	bhi.n	8015928 <__hexdig_fun+0x1a>
 8015924:	3847      	subs	r0, #71	; 0x47
 8015926:	e7f7      	b.n	8015918 <__hexdig_fun+0xa>
 8015928:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801592c:	2b05      	cmp	r3, #5
 801592e:	d801      	bhi.n	8015934 <__hexdig_fun+0x26>
 8015930:	3827      	subs	r0, #39	; 0x27
 8015932:	e7f1      	b.n	8015918 <__hexdig_fun+0xa>
 8015934:	2000      	movs	r0, #0
 8015936:	4770      	bx	lr

08015938 <__gethex>:
 8015938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801593c:	ed2d 8b02 	vpush	{d8}
 8015940:	b089      	sub	sp, #36	; 0x24
 8015942:	ee08 0a10 	vmov	s16, r0
 8015946:	9304      	str	r3, [sp, #16]
 8015948:	4bb4      	ldr	r3, [pc, #720]	; (8015c1c <__gethex+0x2e4>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	9301      	str	r3, [sp, #4]
 801594e:	4618      	mov	r0, r3
 8015950:	468b      	mov	fp, r1
 8015952:	4690      	mov	r8, r2
 8015954:	f7ea fc4e 	bl	80001f4 <strlen>
 8015958:	9b01      	ldr	r3, [sp, #4]
 801595a:	f8db 2000 	ldr.w	r2, [fp]
 801595e:	4403      	add	r3, r0
 8015960:	4682      	mov	sl, r0
 8015962:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015966:	9305      	str	r3, [sp, #20]
 8015968:	1c93      	adds	r3, r2, #2
 801596a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801596e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015972:	32fe      	adds	r2, #254	; 0xfe
 8015974:	18d1      	adds	r1, r2, r3
 8015976:	461f      	mov	r7, r3
 8015978:	f813 0b01 	ldrb.w	r0, [r3], #1
 801597c:	9100      	str	r1, [sp, #0]
 801597e:	2830      	cmp	r0, #48	; 0x30
 8015980:	d0f8      	beq.n	8015974 <__gethex+0x3c>
 8015982:	f7ff ffc4 	bl	801590e <__hexdig_fun>
 8015986:	4604      	mov	r4, r0
 8015988:	2800      	cmp	r0, #0
 801598a:	d13a      	bne.n	8015a02 <__gethex+0xca>
 801598c:	9901      	ldr	r1, [sp, #4]
 801598e:	4652      	mov	r2, sl
 8015990:	4638      	mov	r0, r7
 8015992:	f001 f9e6 	bl	8016d62 <strncmp>
 8015996:	4605      	mov	r5, r0
 8015998:	2800      	cmp	r0, #0
 801599a:	d168      	bne.n	8015a6e <__gethex+0x136>
 801599c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80159a0:	eb07 060a 	add.w	r6, r7, sl
 80159a4:	f7ff ffb3 	bl	801590e <__hexdig_fun>
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d062      	beq.n	8015a72 <__gethex+0x13a>
 80159ac:	4633      	mov	r3, r6
 80159ae:	7818      	ldrb	r0, [r3, #0]
 80159b0:	2830      	cmp	r0, #48	; 0x30
 80159b2:	461f      	mov	r7, r3
 80159b4:	f103 0301 	add.w	r3, r3, #1
 80159b8:	d0f9      	beq.n	80159ae <__gethex+0x76>
 80159ba:	f7ff ffa8 	bl	801590e <__hexdig_fun>
 80159be:	2301      	movs	r3, #1
 80159c0:	fab0 f480 	clz	r4, r0
 80159c4:	0964      	lsrs	r4, r4, #5
 80159c6:	4635      	mov	r5, r6
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	463a      	mov	r2, r7
 80159cc:	4616      	mov	r6, r2
 80159ce:	3201      	adds	r2, #1
 80159d0:	7830      	ldrb	r0, [r6, #0]
 80159d2:	f7ff ff9c 	bl	801590e <__hexdig_fun>
 80159d6:	2800      	cmp	r0, #0
 80159d8:	d1f8      	bne.n	80159cc <__gethex+0x94>
 80159da:	9901      	ldr	r1, [sp, #4]
 80159dc:	4652      	mov	r2, sl
 80159de:	4630      	mov	r0, r6
 80159e0:	f001 f9bf 	bl	8016d62 <strncmp>
 80159e4:	b980      	cbnz	r0, 8015a08 <__gethex+0xd0>
 80159e6:	b94d      	cbnz	r5, 80159fc <__gethex+0xc4>
 80159e8:	eb06 050a 	add.w	r5, r6, sl
 80159ec:	462a      	mov	r2, r5
 80159ee:	4616      	mov	r6, r2
 80159f0:	3201      	adds	r2, #1
 80159f2:	7830      	ldrb	r0, [r6, #0]
 80159f4:	f7ff ff8b 	bl	801590e <__hexdig_fun>
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d1f8      	bne.n	80159ee <__gethex+0xb6>
 80159fc:	1bad      	subs	r5, r5, r6
 80159fe:	00ad      	lsls	r5, r5, #2
 8015a00:	e004      	b.n	8015a0c <__gethex+0xd4>
 8015a02:	2400      	movs	r4, #0
 8015a04:	4625      	mov	r5, r4
 8015a06:	e7e0      	b.n	80159ca <__gethex+0x92>
 8015a08:	2d00      	cmp	r5, #0
 8015a0a:	d1f7      	bne.n	80159fc <__gethex+0xc4>
 8015a0c:	7833      	ldrb	r3, [r6, #0]
 8015a0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015a12:	2b50      	cmp	r3, #80	; 0x50
 8015a14:	d13b      	bne.n	8015a8e <__gethex+0x156>
 8015a16:	7873      	ldrb	r3, [r6, #1]
 8015a18:	2b2b      	cmp	r3, #43	; 0x2b
 8015a1a:	d02c      	beq.n	8015a76 <__gethex+0x13e>
 8015a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8015a1e:	d02e      	beq.n	8015a7e <__gethex+0x146>
 8015a20:	1c71      	adds	r1, r6, #1
 8015a22:	f04f 0900 	mov.w	r9, #0
 8015a26:	7808      	ldrb	r0, [r1, #0]
 8015a28:	f7ff ff71 	bl	801590e <__hexdig_fun>
 8015a2c:	1e43      	subs	r3, r0, #1
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	2b18      	cmp	r3, #24
 8015a32:	d82c      	bhi.n	8015a8e <__gethex+0x156>
 8015a34:	f1a0 0210 	sub.w	r2, r0, #16
 8015a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015a3c:	f7ff ff67 	bl	801590e <__hexdig_fun>
 8015a40:	1e43      	subs	r3, r0, #1
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	2b18      	cmp	r3, #24
 8015a46:	d91d      	bls.n	8015a84 <__gethex+0x14c>
 8015a48:	f1b9 0f00 	cmp.w	r9, #0
 8015a4c:	d000      	beq.n	8015a50 <__gethex+0x118>
 8015a4e:	4252      	negs	r2, r2
 8015a50:	4415      	add	r5, r2
 8015a52:	f8cb 1000 	str.w	r1, [fp]
 8015a56:	b1e4      	cbz	r4, 8015a92 <__gethex+0x15a>
 8015a58:	9b00      	ldr	r3, [sp, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	bf14      	ite	ne
 8015a5e:	2700      	movne	r7, #0
 8015a60:	2706      	moveq	r7, #6
 8015a62:	4638      	mov	r0, r7
 8015a64:	b009      	add	sp, #36	; 0x24
 8015a66:	ecbd 8b02 	vpop	{d8}
 8015a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a6e:	463e      	mov	r6, r7
 8015a70:	4625      	mov	r5, r4
 8015a72:	2401      	movs	r4, #1
 8015a74:	e7ca      	b.n	8015a0c <__gethex+0xd4>
 8015a76:	f04f 0900 	mov.w	r9, #0
 8015a7a:	1cb1      	adds	r1, r6, #2
 8015a7c:	e7d3      	b.n	8015a26 <__gethex+0xee>
 8015a7e:	f04f 0901 	mov.w	r9, #1
 8015a82:	e7fa      	b.n	8015a7a <__gethex+0x142>
 8015a84:	230a      	movs	r3, #10
 8015a86:	fb03 0202 	mla	r2, r3, r2, r0
 8015a8a:	3a10      	subs	r2, #16
 8015a8c:	e7d4      	b.n	8015a38 <__gethex+0x100>
 8015a8e:	4631      	mov	r1, r6
 8015a90:	e7df      	b.n	8015a52 <__gethex+0x11a>
 8015a92:	1bf3      	subs	r3, r6, r7
 8015a94:	3b01      	subs	r3, #1
 8015a96:	4621      	mov	r1, r4
 8015a98:	2b07      	cmp	r3, #7
 8015a9a:	dc0b      	bgt.n	8015ab4 <__gethex+0x17c>
 8015a9c:	ee18 0a10 	vmov	r0, s16
 8015aa0:	f000 fadc 	bl	801605c <_Balloc>
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	b940      	cbnz	r0, 8015aba <__gethex+0x182>
 8015aa8:	4b5d      	ldr	r3, [pc, #372]	; (8015c20 <__gethex+0x2e8>)
 8015aaa:	4602      	mov	r2, r0
 8015aac:	21de      	movs	r1, #222	; 0xde
 8015aae:	485d      	ldr	r0, [pc, #372]	; (8015c24 <__gethex+0x2ec>)
 8015ab0:	f001 f98a 	bl	8016dc8 <__assert_func>
 8015ab4:	3101      	adds	r1, #1
 8015ab6:	105b      	asrs	r3, r3, #1
 8015ab8:	e7ee      	b.n	8015a98 <__gethex+0x160>
 8015aba:	f100 0914 	add.w	r9, r0, #20
 8015abe:	f04f 0b00 	mov.w	fp, #0
 8015ac2:	f1ca 0301 	rsb	r3, sl, #1
 8015ac6:	f8cd 9008 	str.w	r9, [sp, #8]
 8015aca:	f8cd b000 	str.w	fp, [sp]
 8015ace:	9306      	str	r3, [sp, #24]
 8015ad0:	42b7      	cmp	r7, r6
 8015ad2:	d340      	bcc.n	8015b56 <__gethex+0x21e>
 8015ad4:	9802      	ldr	r0, [sp, #8]
 8015ad6:	9b00      	ldr	r3, [sp, #0]
 8015ad8:	f840 3b04 	str.w	r3, [r0], #4
 8015adc:	eba0 0009 	sub.w	r0, r0, r9
 8015ae0:	1080      	asrs	r0, r0, #2
 8015ae2:	0146      	lsls	r6, r0, #5
 8015ae4:	6120      	str	r0, [r4, #16]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f000 fbaa 	bl	8016240 <__hi0bits>
 8015aec:	1a30      	subs	r0, r6, r0
 8015aee:	f8d8 6000 	ldr.w	r6, [r8]
 8015af2:	42b0      	cmp	r0, r6
 8015af4:	dd63      	ble.n	8015bbe <__gethex+0x286>
 8015af6:	1b87      	subs	r7, r0, r6
 8015af8:	4639      	mov	r1, r7
 8015afa:	4620      	mov	r0, r4
 8015afc:	f000 ff4e 	bl	801699c <__any_on>
 8015b00:	4682      	mov	sl, r0
 8015b02:	b1a8      	cbz	r0, 8015b30 <__gethex+0x1f8>
 8015b04:	1e7b      	subs	r3, r7, #1
 8015b06:	1159      	asrs	r1, r3, #5
 8015b08:	f003 021f 	and.w	r2, r3, #31
 8015b0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015b10:	f04f 0a01 	mov.w	sl, #1
 8015b14:	fa0a f202 	lsl.w	r2, sl, r2
 8015b18:	420a      	tst	r2, r1
 8015b1a:	d009      	beq.n	8015b30 <__gethex+0x1f8>
 8015b1c:	4553      	cmp	r3, sl
 8015b1e:	dd05      	ble.n	8015b2c <__gethex+0x1f4>
 8015b20:	1eb9      	subs	r1, r7, #2
 8015b22:	4620      	mov	r0, r4
 8015b24:	f000 ff3a 	bl	801699c <__any_on>
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	d145      	bne.n	8015bb8 <__gethex+0x280>
 8015b2c:	f04f 0a02 	mov.w	sl, #2
 8015b30:	4639      	mov	r1, r7
 8015b32:	4620      	mov	r0, r4
 8015b34:	f7ff fe99 	bl	801586a <rshift>
 8015b38:	443d      	add	r5, r7
 8015b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b3e:	42ab      	cmp	r3, r5
 8015b40:	da4c      	bge.n	8015bdc <__gethex+0x2a4>
 8015b42:	ee18 0a10 	vmov	r0, s16
 8015b46:	4621      	mov	r1, r4
 8015b48:	f000 fac8 	bl	80160dc <_Bfree>
 8015b4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b4e:	2300      	movs	r3, #0
 8015b50:	6013      	str	r3, [r2, #0]
 8015b52:	27a3      	movs	r7, #163	; 0xa3
 8015b54:	e785      	b.n	8015a62 <__gethex+0x12a>
 8015b56:	1e73      	subs	r3, r6, #1
 8015b58:	9a05      	ldr	r2, [sp, #20]
 8015b5a:	9303      	str	r3, [sp, #12]
 8015b5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015b60:	4293      	cmp	r3, r2
 8015b62:	d019      	beq.n	8015b98 <__gethex+0x260>
 8015b64:	f1bb 0f20 	cmp.w	fp, #32
 8015b68:	d107      	bne.n	8015b7a <__gethex+0x242>
 8015b6a:	9b02      	ldr	r3, [sp, #8]
 8015b6c:	9a00      	ldr	r2, [sp, #0]
 8015b6e:	f843 2b04 	str.w	r2, [r3], #4
 8015b72:	9302      	str	r3, [sp, #8]
 8015b74:	2300      	movs	r3, #0
 8015b76:	9300      	str	r3, [sp, #0]
 8015b78:	469b      	mov	fp, r3
 8015b7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015b7e:	f7ff fec6 	bl	801590e <__hexdig_fun>
 8015b82:	9b00      	ldr	r3, [sp, #0]
 8015b84:	f000 000f 	and.w	r0, r0, #15
 8015b88:	fa00 f00b 	lsl.w	r0, r0, fp
 8015b8c:	4303      	orrs	r3, r0
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	f10b 0b04 	add.w	fp, fp, #4
 8015b94:	9b03      	ldr	r3, [sp, #12]
 8015b96:	e00d      	b.n	8015bb4 <__gethex+0x27c>
 8015b98:	9b03      	ldr	r3, [sp, #12]
 8015b9a:	9a06      	ldr	r2, [sp, #24]
 8015b9c:	4413      	add	r3, r2
 8015b9e:	42bb      	cmp	r3, r7
 8015ba0:	d3e0      	bcc.n	8015b64 <__gethex+0x22c>
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	9901      	ldr	r1, [sp, #4]
 8015ba6:	9307      	str	r3, [sp, #28]
 8015ba8:	4652      	mov	r2, sl
 8015baa:	f001 f8da 	bl	8016d62 <strncmp>
 8015bae:	9b07      	ldr	r3, [sp, #28]
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d1d7      	bne.n	8015b64 <__gethex+0x22c>
 8015bb4:	461e      	mov	r6, r3
 8015bb6:	e78b      	b.n	8015ad0 <__gethex+0x198>
 8015bb8:	f04f 0a03 	mov.w	sl, #3
 8015bbc:	e7b8      	b.n	8015b30 <__gethex+0x1f8>
 8015bbe:	da0a      	bge.n	8015bd6 <__gethex+0x29e>
 8015bc0:	1a37      	subs	r7, r6, r0
 8015bc2:	4621      	mov	r1, r4
 8015bc4:	ee18 0a10 	vmov	r0, s16
 8015bc8:	463a      	mov	r2, r7
 8015bca:	f000 fca3 	bl	8016514 <__lshift>
 8015bce:	1bed      	subs	r5, r5, r7
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	f100 0914 	add.w	r9, r0, #20
 8015bd6:	f04f 0a00 	mov.w	sl, #0
 8015bda:	e7ae      	b.n	8015b3a <__gethex+0x202>
 8015bdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015be0:	42a8      	cmp	r0, r5
 8015be2:	dd72      	ble.n	8015cca <__gethex+0x392>
 8015be4:	1b45      	subs	r5, r0, r5
 8015be6:	42ae      	cmp	r6, r5
 8015be8:	dc36      	bgt.n	8015c58 <__gethex+0x320>
 8015bea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015bee:	2b02      	cmp	r3, #2
 8015bf0:	d02a      	beq.n	8015c48 <__gethex+0x310>
 8015bf2:	2b03      	cmp	r3, #3
 8015bf4:	d02c      	beq.n	8015c50 <__gethex+0x318>
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d11c      	bne.n	8015c34 <__gethex+0x2fc>
 8015bfa:	42ae      	cmp	r6, r5
 8015bfc:	d11a      	bne.n	8015c34 <__gethex+0x2fc>
 8015bfe:	2e01      	cmp	r6, #1
 8015c00:	d112      	bne.n	8015c28 <__gethex+0x2f0>
 8015c02:	9a04      	ldr	r2, [sp, #16]
 8015c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c08:	6013      	str	r3, [r2, #0]
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	6123      	str	r3, [r4, #16]
 8015c0e:	f8c9 3000 	str.w	r3, [r9]
 8015c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c14:	2762      	movs	r7, #98	; 0x62
 8015c16:	601c      	str	r4, [r3, #0]
 8015c18:	e723      	b.n	8015a62 <__gethex+0x12a>
 8015c1a:	bf00      	nop
 8015c1c:	08025954 	.word	0x08025954
 8015c20:	08025878 	.word	0x08025878
 8015c24:	080258ec 	.word	0x080258ec
 8015c28:	1e71      	subs	r1, r6, #1
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f000 feb6 	bl	801699c <__any_on>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d1e6      	bne.n	8015c02 <__gethex+0x2ca>
 8015c34:	ee18 0a10 	vmov	r0, s16
 8015c38:	4621      	mov	r1, r4
 8015c3a:	f000 fa4f 	bl	80160dc <_Bfree>
 8015c3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c40:	2300      	movs	r3, #0
 8015c42:	6013      	str	r3, [r2, #0]
 8015c44:	2750      	movs	r7, #80	; 0x50
 8015c46:	e70c      	b.n	8015a62 <__gethex+0x12a>
 8015c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d1f2      	bne.n	8015c34 <__gethex+0x2fc>
 8015c4e:	e7d8      	b.n	8015c02 <__gethex+0x2ca>
 8015c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d1d5      	bne.n	8015c02 <__gethex+0x2ca>
 8015c56:	e7ed      	b.n	8015c34 <__gethex+0x2fc>
 8015c58:	1e6f      	subs	r7, r5, #1
 8015c5a:	f1ba 0f00 	cmp.w	sl, #0
 8015c5e:	d131      	bne.n	8015cc4 <__gethex+0x38c>
 8015c60:	b127      	cbz	r7, 8015c6c <__gethex+0x334>
 8015c62:	4639      	mov	r1, r7
 8015c64:	4620      	mov	r0, r4
 8015c66:	f000 fe99 	bl	801699c <__any_on>
 8015c6a:	4682      	mov	sl, r0
 8015c6c:	117b      	asrs	r3, r7, #5
 8015c6e:	2101      	movs	r1, #1
 8015c70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015c74:	f007 071f 	and.w	r7, r7, #31
 8015c78:	fa01 f707 	lsl.w	r7, r1, r7
 8015c7c:	421f      	tst	r7, r3
 8015c7e:	4629      	mov	r1, r5
 8015c80:	4620      	mov	r0, r4
 8015c82:	bf18      	it	ne
 8015c84:	f04a 0a02 	orrne.w	sl, sl, #2
 8015c88:	1b76      	subs	r6, r6, r5
 8015c8a:	f7ff fdee 	bl	801586a <rshift>
 8015c8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c92:	2702      	movs	r7, #2
 8015c94:	f1ba 0f00 	cmp.w	sl, #0
 8015c98:	d048      	beq.n	8015d2c <__gethex+0x3f4>
 8015c9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c9e:	2b02      	cmp	r3, #2
 8015ca0:	d015      	beq.n	8015cce <__gethex+0x396>
 8015ca2:	2b03      	cmp	r3, #3
 8015ca4:	d017      	beq.n	8015cd6 <__gethex+0x39e>
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d109      	bne.n	8015cbe <__gethex+0x386>
 8015caa:	f01a 0f02 	tst.w	sl, #2
 8015cae:	d006      	beq.n	8015cbe <__gethex+0x386>
 8015cb0:	f8d9 0000 	ldr.w	r0, [r9]
 8015cb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8015cb8:	f01a 0f01 	tst.w	sl, #1
 8015cbc:	d10e      	bne.n	8015cdc <__gethex+0x3a4>
 8015cbe:	f047 0710 	orr.w	r7, r7, #16
 8015cc2:	e033      	b.n	8015d2c <__gethex+0x3f4>
 8015cc4:	f04f 0a01 	mov.w	sl, #1
 8015cc8:	e7d0      	b.n	8015c6c <__gethex+0x334>
 8015cca:	2701      	movs	r7, #1
 8015ccc:	e7e2      	b.n	8015c94 <__gethex+0x35c>
 8015cce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cd0:	f1c3 0301 	rsb	r3, r3, #1
 8015cd4:	9315      	str	r3, [sp, #84]	; 0x54
 8015cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d0f0      	beq.n	8015cbe <__gethex+0x386>
 8015cdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ce0:	f104 0314 	add.w	r3, r4, #20
 8015ce4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015ce8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015cec:	f04f 0c00 	mov.w	ip, #0
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015cfa:	d01c      	beq.n	8015d36 <__gethex+0x3fe>
 8015cfc:	3201      	adds	r2, #1
 8015cfe:	6002      	str	r2, [r0, #0]
 8015d00:	2f02      	cmp	r7, #2
 8015d02:	f104 0314 	add.w	r3, r4, #20
 8015d06:	d13f      	bne.n	8015d88 <__gethex+0x450>
 8015d08:	f8d8 2000 	ldr.w	r2, [r8]
 8015d0c:	3a01      	subs	r2, #1
 8015d0e:	42b2      	cmp	r2, r6
 8015d10:	d10a      	bne.n	8015d28 <__gethex+0x3f0>
 8015d12:	1171      	asrs	r1, r6, #5
 8015d14:	2201      	movs	r2, #1
 8015d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d1a:	f006 061f 	and.w	r6, r6, #31
 8015d1e:	fa02 f606 	lsl.w	r6, r2, r6
 8015d22:	421e      	tst	r6, r3
 8015d24:	bf18      	it	ne
 8015d26:	4617      	movne	r7, r2
 8015d28:	f047 0720 	orr.w	r7, r7, #32
 8015d2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d2e:	601c      	str	r4, [r3, #0]
 8015d30:	9b04      	ldr	r3, [sp, #16]
 8015d32:	601d      	str	r5, [r3, #0]
 8015d34:	e695      	b.n	8015a62 <__gethex+0x12a>
 8015d36:	4299      	cmp	r1, r3
 8015d38:	f843 cc04 	str.w	ip, [r3, #-4]
 8015d3c:	d8d8      	bhi.n	8015cf0 <__gethex+0x3b8>
 8015d3e:	68a3      	ldr	r3, [r4, #8]
 8015d40:	459b      	cmp	fp, r3
 8015d42:	db19      	blt.n	8015d78 <__gethex+0x440>
 8015d44:	6861      	ldr	r1, [r4, #4]
 8015d46:	ee18 0a10 	vmov	r0, s16
 8015d4a:	3101      	adds	r1, #1
 8015d4c:	f000 f986 	bl	801605c <_Balloc>
 8015d50:	4681      	mov	r9, r0
 8015d52:	b918      	cbnz	r0, 8015d5c <__gethex+0x424>
 8015d54:	4b1a      	ldr	r3, [pc, #104]	; (8015dc0 <__gethex+0x488>)
 8015d56:	4602      	mov	r2, r0
 8015d58:	2184      	movs	r1, #132	; 0x84
 8015d5a:	e6a8      	b.n	8015aae <__gethex+0x176>
 8015d5c:	6922      	ldr	r2, [r4, #16]
 8015d5e:	3202      	adds	r2, #2
 8015d60:	f104 010c 	add.w	r1, r4, #12
 8015d64:	0092      	lsls	r2, r2, #2
 8015d66:	300c      	adds	r0, #12
 8015d68:	f7fc ffb6 	bl	8012cd8 <memcpy>
 8015d6c:	4621      	mov	r1, r4
 8015d6e:	ee18 0a10 	vmov	r0, s16
 8015d72:	f000 f9b3 	bl	80160dc <_Bfree>
 8015d76:	464c      	mov	r4, r9
 8015d78:	6923      	ldr	r3, [r4, #16]
 8015d7a:	1c5a      	adds	r2, r3, #1
 8015d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d80:	6122      	str	r2, [r4, #16]
 8015d82:	2201      	movs	r2, #1
 8015d84:	615a      	str	r2, [r3, #20]
 8015d86:	e7bb      	b.n	8015d00 <__gethex+0x3c8>
 8015d88:	6922      	ldr	r2, [r4, #16]
 8015d8a:	455a      	cmp	r2, fp
 8015d8c:	dd0b      	ble.n	8015da6 <__gethex+0x46e>
 8015d8e:	2101      	movs	r1, #1
 8015d90:	4620      	mov	r0, r4
 8015d92:	f7ff fd6a 	bl	801586a <rshift>
 8015d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d9a:	3501      	adds	r5, #1
 8015d9c:	42ab      	cmp	r3, r5
 8015d9e:	f6ff aed0 	blt.w	8015b42 <__gethex+0x20a>
 8015da2:	2701      	movs	r7, #1
 8015da4:	e7c0      	b.n	8015d28 <__gethex+0x3f0>
 8015da6:	f016 061f 	ands.w	r6, r6, #31
 8015daa:	d0fa      	beq.n	8015da2 <__gethex+0x46a>
 8015dac:	4453      	add	r3, sl
 8015dae:	f1c6 0620 	rsb	r6, r6, #32
 8015db2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015db6:	f000 fa43 	bl	8016240 <__hi0bits>
 8015dba:	42b0      	cmp	r0, r6
 8015dbc:	dbe7      	blt.n	8015d8e <__gethex+0x456>
 8015dbe:	e7f0      	b.n	8015da2 <__gethex+0x46a>
 8015dc0:	08025878 	.word	0x08025878

08015dc4 <L_shift>:
 8015dc4:	f1c2 0208 	rsb	r2, r2, #8
 8015dc8:	0092      	lsls	r2, r2, #2
 8015dca:	b570      	push	{r4, r5, r6, lr}
 8015dcc:	f1c2 0620 	rsb	r6, r2, #32
 8015dd0:	6843      	ldr	r3, [r0, #4]
 8015dd2:	6804      	ldr	r4, [r0, #0]
 8015dd4:	fa03 f506 	lsl.w	r5, r3, r6
 8015dd8:	432c      	orrs	r4, r5
 8015dda:	40d3      	lsrs	r3, r2
 8015ddc:	6004      	str	r4, [r0, #0]
 8015dde:	f840 3f04 	str.w	r3, [r0, #4]!
 8015de2:	4288      	cmp	r0, r1
 8015de4:	d3f4      	bcc.n	8015dd0 <L_shift+0xc>
 8015de6:	bd70      	pop	{r4, r5, r6, pc}

08015de8 <__match>:
 8015de8:	b530      	push	{r4, r5, lr}
 8015dea:	6803      	ldr	r3, [r0, #0]
 8015dec:	3301      	adds	r3, #1
 8015dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015df2:	b914      	cbnz	r4, 8015dfa <__match+0x12>
 8015df4:	6003      	str	r3, [r0, #0]
 8015df6:	2001      	movs	r0, #1
 8015df8:	bd30      	pop	{r4, r5, pc}
 8015dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015e02:	2d19      	cmp	r5, #25
 8015e04:	bf98      	it	ls
 8015e06:	3220      	addls	r2, #32
 8015e08:	42a2      	cmp	r2, r4
 8015e0a:	d0f0      	beq.n	8015dee <__match+0x6>
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	e7f3      	b.n	8015df8 <__match+0x10>

08015e10 <__hexnan>:
 8015e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e14:	680b      	ldr	r3, [r1, #0]
 8015e16:	115e      	asrs	r6, r3, #5
 8015e18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015e1c:	f013 031f 	ands.w	r3, r3, #31
 8015e20:	b087      	sub	sp, #28
 8015e22:	bf18      	it	ne
 8015e24:	3604      	addne	r6, #4
 8015e26:	2500      	movs	r5, #0
 8015e28:	1f37      	subs	r7, r6, #4
 8015e2a:	4690      	mov	r8, r2
 8015e2c:	6802      	ldr	r2, [r0, #0]
 8015e2e:	9301      	str	r3, [sp, #4]
 8015e30:	4682      	mov	sl, r0
 8015e32:	f846 5c04 	str.w	r5, [r6, #-4]
 8015e36:	46b9      	mov	r9, r7
 8015e38:	463c      	mov	r4, r7
 8015e3a:	9502      	str	r5, [sp, #8]
 8015e3c:	46ab      	mov	fp, r5
 8015e3e:	7851      	ldrb	r1, [r2, #1]
 8015e40:	1c53      	adds	r3, r2, #1
 8015e42:	9303      	str	r3, [sp, #12]
 8015e44:	b341      	cbz	r1, 8015e98 <__hexnan+0x88>
 8015e46:	4608      	mov	r0, r1
 8015e48:	9205      	str	r2, [sp, #20]
 8015e4a:	9104      	str	r1, [sp, #16]
 8015e4c:	f7ff fd5f 	bl	801590e <__hexdig_fun>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d14f      	bne.n	8015ef4 <__hexnan+0xe4>
 8015e54:	9904      	ldr	r1, [sp, #16]
 8015e56:	9a05      	ldr	r2, [sp, #20]
 8015e58:	2920      	cmp	r1, #32
 8015e5a:	d818      	bhi.n	8015e8e <__hexnan+0x7e>
 8015e5c:	9b02      	ldr	r3, [sp, #8]
 8015e5e:	459b      	cmp	fp, r3
 8015e60:	dd13      	ble.n	8015e8a <__hexnan+0x7a>
 8015e62:	454c      	cmp	r4, r9
 8015e64:	d206      	bcs.n	8015e74 <__hexnan+0x64>
 8015e66:	2d07      	cmp	r5, #7
 8015e68:	dc04      	bgt.n	8015e74 <__hexnan+0x64>
 8015e6a:	462a      	mov	r2, r5
 8015e6c:	4649      	mov	r1, r9
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f7ff ffa8 	bl	8015dc4 <L_shift>
 8015e74:	4544      	cmp	r4, r8
 8015e76:	d950      	bls.n	8015f1a <__hexnan+0x10a>
 8015e78:	2300      	movs	r3, #0
 8015e7a:	f1a4 0904 	sub.w	r9, r4, #4
 8015e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e82:	f8cd b008 	str.w	fp, [sp, #8]
 8015e86:	464c      	mov	r4, r9
 8015e88:	461d      	mov	r5, r3
 8015e8a:	9a03      	ldr	r2, [sp, #12]
 8015e8c:	e7d7      	b.n	8015e3e <__hexnan+0x2e>
 8015e8e:	2929      	cmp	r1, #41	; 0x29
 8015e90:	d156      	bne.n	8015f40 <__hexnan+0x130>
 8015e92:	3202      	adds	r2, #2
 8015e94:	f8ca 2000 	str.w	r2, [sl]
 8015e98:	f1bb 0f00 	cmp.w	fp, #0
 8015e9c:	d050      	beq.n	8015f40 <__hexnan+0x130>
 8015e9e:	454c      	cmp	r4, r9
 8015ea0:	d206      	bcs.n	8015eb0 <__hexnan+0xa0>
 8015ea2:	2d07      	cmp	r5, #7
 8015ea4:	dc04      	bgt.n	8015eb0 <__hexnan+0xa0>
 8015ea6:	462a      	mov	r2, r5
 8015ea8:	4649      	mov	r1, r9
 8015eaa:	4620      	mov	r0, r4
 8015eac:	f7ff ff8a 	bl	8015dc4 <L_shift>
 8015eb0:	4544      	cmp	r4, r8
 8015eb2:	d934      	bls.n	8015f1e <__hexnan+0x10e>
 8015eb4:	f1a8 0204 	sub.w	r2, r8, #4
 8015eb8:	4623      	mov	r3, r4
 8015eba:	f853 1b04 	ldr.w	r1, [r3], #4
 8015ebe:	f842 1f04 	str.w	r1, [r2, #4]!
 8015ec2:	429f      	cmp	r7, r3
 8015ec4:	d2f9      	bcs.n	8015eba <__hexnan+0xaa>
 8015ec6:	1b3b      	subs	r3, r7, r4
 8015ec8:	f023 0303 	bic.w	r3, r3, #3
 8015ecc:	3304      	adds	r3, #4
 8015ece:	3401      	adds	r4, #1
 8015ed0:	3e03      	subs	r6, #3
 8015ed2:	42b4      	cmp	r4, r6
 8015ed4:	bf88      	it	hi
 8015ed6:	2304      	movhi	r3, #4
 8015ed8:	4443      	add	r3, r8
 8015eda:	2200      	movs	r2, #0
 8015edc:	f843 2b04 	str.w	r2, [r3], #4
 8015ee0:	429f      	cmp	r7, r3
 8015ee2:	d2fb      	bcs.n	8015edc <__hexnan+0xcc>
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	b91b      	cbnz	r3, 8015ef0 <__hexnan+0xe0>
 8015ee8:	4547      	cmp	r7, r8
 8015eea:	d127      	bne.n	8015f3c <__hexnan+0x12c>
 8015eec:	2301      	movs	r3, #1
 8015eee:	603b      	str	r3, [r7, #0]
 8015ef0:	2005      	movs	r0, #5
 8015ef2:	e026      	b.n	8015f42 <__hexnan+0x132>
 8015ef4:	3501      	adds	r5, #1
 8015ef6:	2d08      	cmp	r5, #8
 8015ef8:	f10b 0b01 	add.w	fp, fp, #1
 8015efc:	dd06      	ble.n	8015f0c <__hexnan+0xfc>
 8015efe:	4544      	cmp	r4, r8
 8015f00:	d9c3      	bls.n	8015e8a <__hexnan+0x7a>
 8015f02:	2300      	movs	r3, #0
 8015f04:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f08:	2501      	movs	r5, #1
 8015f0a:	3c04      	subs	r4, #4
 8015f0c:	6822      	ldr	r2, [r4, #0]
 8015f0e:	f000 000f 	and.w	r0, r0, #15
 8015f12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015f16:	6022      	str	r2, [r4, #0]
 8015f18:	e7b7      	b.n	8015e8a <__hexnan+0x7a>
 8015f1a:	2508      	movs	r5, #8
 8015f1c:	e7b5      	b.n	8015e8a <__hexnan+0x7a>
 8015f1e:	9b01      	ldr	r3, [sp, #4]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d0df      	beq.n	8015ee4 <__hexnan+0xd4>
 8015f24:	f04f 32ff 	mov.w	r2, #4294967295
 8015f28:	f1c3 0320 	rsb	r3, r3, #32
 8015f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8015f30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015f34:	401a      	ands	r2, r3
 8015f36:	f846 2c04 	str.w	r2, [r6, #-4]
 8015f3a:	e7d3      	b.n	8015ee4 <__hexnan+0xd4>
 8015f3c:	3f04      	subs	r7, #4
 8015f3e:	e7d1      	b.n	8015ee4 <__hexnan+0xd4>
 8015f40:	2004      	movs	r0, #4
 8015f42:	b007      	add	sp, #28
 8015f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f48 <_localeconv_r>:
 8015f48:	4800      	ldr	r0, [pc, #0]	; (8015f4c <_localeconv_r+0x4>)
 8015f4a:	4770      	bx	lr
 8015f4c:	20000220 	.word	0x20000220

08015f50 <__retarget_lock_init_recursive>:
 8015f50:	4770      	bx	lr

08015f52 <__retarget_lock_acquire_recursive>:
 8015f52:	4770      	bx	lr

08015f54 <__retarget_lock_release_recursive>:
 8015f54:	4770      	bx	lr

08015f56 <__swhatbuf_r>:
 8015f56:	b570      	push	{r4, r5, r6, lr}
 8015f58:	460e      	mov	r6, r1
 8015f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f5e:	2900      	cmp	r1, #0
 8015f60:	b096      	sub	sp, #88	; 0x58
 8015f62:	4614      	mov	r4, r2
 8015f64:	461d      	mov	r5, r3
 8015f66:	da08      	bge.n	8015f7a <__swhatbuf_r+0x24>
 8015f68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	602a      	str	r2, [r5, #0]
 8015f70:	061a      	lsls	r2, r3, #24
 8015f72:	d410      	bmi.n	8015f96 <__swhatbuf_r+0x40>
 8015f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f78:	e00e      	b.n	8015f98 <__swhatbuf_r+0x42>
 8015f7a:	466a      	mov	r2, sp
 8015f7c:	f000 ff64 	bl	8016e48 <_fstat_r>
 8015f80:	2800      	cmp	r0, #0
 8015f82:	dbf1      	blt.n	8015f68 <__swhatbuf_r+0x12>
 8015f84:	9a01      	ldr	r2, [sp, #4]
 8015f86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f8e:	425a      	negs	r2, r3
 8015f90:	415a      	adcs	r2, r3
 8015f92:	602a      	str	r2, [r5, #0]
 8015f94:	e7ee      	b.n	8015f74 <__swhatbuf_r+0x1e>
 8015f96:	2340      	movs	r3, #64	; 0x40
 8015f98:	2000      	movs	r0, #0
 8015f9a:	6023      	str	r3, [r4, #0]
 8015f9c:	b016      	add	sp, #88	; 0x58
 8015f9e:	bd70      	pop	{r4, r5, r6, pc}

08015fa0 <__smakebuf_r>:
 8015fa0:	898b      	ldrh	r3, [r1, #12]
 8015fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015fa4:	079d      	lsls	r5, r3, #30
 8015fa6:	4606      	mov	r6, r0
 8015fa8:	460c      	mov	r4, r1
 8015faa:	d507      	bpl.n	8015fbc <__smakebuf_r+0x1c>
 8015fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015fb0:	6023      	str	r3, [r4, #0]
 8015fb2:	6123      	str	r3, [r4, #16]
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	6163      	str	r3, [r4, #20]
 8015fb8:	b002      	add	sp, #8
 8015fba:	bd70      	pop	{r4, r5, r6, pc}
 8015fbc:	ab01      	add	r3, sp, #4
 8015fbe:	466a      	mov	r2, sp
 8015fc0:	f7ff ffc9 	bl	8015f56 <__swhatbuf_r>
 8015fc4:	9900      	ldr	r1, [sp, #0]
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	4630      	mov	r0, r6
 8015fca:	f7fc ff07 	bl	8012ddc <_malloc_r>
 8015fce:	b948      	cbnz	r0, 8015fe4 <__smakebuf_r+0x44>
 8015fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fd4:	059a      	lsls	r2, r3, #22
 8015fd6:	d4ef      	bmi.n	8015fb8 <__smakebuf_r+0x18>
 8015fd8:	f023 0303 	bic.w	r3, r3, #3
 8015fdc:	f043 0302 	orr.w	r3, r3, #2
 8015fe0:	81a3      	strh	r3, [r4, #12]
 8015fe2:	e7e3      	b.n	8015fac <__smakebuf_r+0xc>
 8015fe4:	4b0d      	ldr	r3, [pc, #52]	; (801601c <__smakebuf_r+0x7c>)
 8015fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015fe8:	89a3      	ldrh	r3, [r4, #12]
 8015fea:	6020      	str	r0, [r4, #0]
 8015fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ff0:	81a3      	strh	r3, [r4, #12]
 8015ff2:	9b00      	ldr	r3, [sp, #0]
 8015ff4:	6163      	str	r3, [r4, #20]
 8015ff6:	9b01      	ldr	r3, [sp, #4]
 8015ff8:	6120      	str	r0, [r4, #16]
 8015ffa:	b15b      	cbz	r3, 8016014 <__smakebuf_r+0x74>
 8015ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016000:	4630      	mov	r0, r6
 8016002:	f000 ff33 	bl	8016e6c <_isatty_r>
 8016006:	b128      	cbz	r0, 8016014 <__smakebuf_r+0x74>
 8016008:	89a3      	ldrh	r3, [r4, #12]
 801600a:	f023 0303 	bic.w	r3, r3, #3
 801600e:	f043 0301 	orr.w	r3, r3, #1
 8016012:	81a3      	strh	r3, [r4, #12]
 8016014:	89a0      	ldrh	r0, [r4, #12]
 8016016:	4305      	orrs	r5, r0
 8016018:	81a5      	strh	r5, [r4, #12]
 801601a:	e7cd      	b.n	8015fb8 <__smakebuf_r+0x18>
 801601c:	080156c9 	.word	0x080156c9

08016020 <__ascii_mbtowc>:
 8016020:	b082      	sub	sp, #8
 8016022:	b901      	cbnz	r1, 8016026 <__ascii_mbtowc+0x6>
 8016024:	a901      	add	r1, sp, #4
 8016026:	b142      	cbz	r2, 801603a <__ascii_mbtowc+0x1a>
 8016028:	b14b      	cbz	r3, 801603e <__ascii_mbtowc+0x1e>
 801602a:	7813      	ldrb	r3, [r2, #0]
 801602c:	600b      	str	r3, [r1, #0]
 801602e:	7812      	ldrb	r2, [r2, #0]
 8016030:	1e10      	subs	r0, r2, #0
 8016032:	bf18      	it	ne
 8016034:	2001      	movne	r0, #1
 8016036:	b002      	add	sp, #8
 8016038:	4770      	bx	lr
 801603a:	4610      	mov	r0, r2
 801603c:	e7fb      	b.n	8016036 <__ascii_mbtowc+0x16>
 801603e:	f06f 0001 	mvn.w	r0, #1
 8016042:	e7f8      	b.n	8016036 <__ascii_mbtowc+0x16>

08016044 <__malloc_lock>:
 8016044:	4801      	ldr	r0, [pc, #4]	; (801604c <__malloc_lock+0x8>)
 8016046:	f7ff bf84 	b.w	8015f52 <__retarget_lock_acquire_recursive>
 801604a:	bf00      	nop
 801604c:	2000d06c 	.word	0x2000d06c

08016050 <__malloc_unlock>:
 8016050:	4801      	ldr	r0, [pc, #4]	; (8016058 <__malloc_unlock+0x8>)
 8016052:	f7ff bf7f 	b.w	8015f54 <__retarget_lock_release_recursive>
 8016056:	bf00      	nop
 8016058:	2000d06c 	.word	0x2000d06c

0801605c <_Balloc>:
 801605c:	b570      	push	{r4, r5, r6, lr}
 801605e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016060:	4604      	mov	r4, r0
 8016062:	460d      	mov	r5, r1
 8016064:	b976      	cbnz	r6, 8016084 <_Balloc+0x28>
 8016066:	2010      	movs	r0, #16
 8016068:	f7fc fe26 	bl	8012cb8 <malloc>
 801606c:	4602      	mov	r2, r0
 801606e:	6260      	str	r0, [r4, #36]	; 0x24
 8016070:	b920      	cbnz	r0, 801607c <_Balloc+0x20>
 8016072:	4b18      	ldr	r3, [pc, #96]	; (80160d4 <_Balloc+0x78>)
 8016074:	4818      	ldr	r0, [pc, #96]	; (80160d8 <_Balloc+0x7c>)
 8016076:	2166      	movs	r1, #102	; 0x66
 8016078:	f000 fea6 	bl	8016dc8 <__assert_func>
 801607c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016080:	6006      	str	r6, [r0, #0]
 8016082:	60c6      	str	r6, [r0, #12]
 8016084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016086:	68f3      	ldr	r3, [r6, #12]
 8016088:	b183      	cbz	r3, 80160ac <_Balloc+0x50>
 801608a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801608c:	68db      	ldr	r3, [r3, #12]
 801608e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016092:	b9b8      	cbnz	r0, 80160c4 <_Balloc+0x68>
 8016094:	2101      	movs	r1, #1
 8016096:	fa01 f605 	lsl.w	r6, r1, r5
 801609a:	1d72      	adds	r2, r6, #5
 801609c:	0092      	lsls	r2, r2, #2
 801609e:	4620      	mov	r0, r4
 80160a0:	f000 fc9d 	bl	80169de <_calloc_r>
 80160a4:	b160      	cbz	r0, 80160c0 <_Balloc+0x64>
 80160a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80160aa:	e00e      	b.n	80160ca <_Balloc+0x6e>
 80160ac:	2221      	movs	r2, #33	; 0x21
 80160ae:	2104      	movs	r1, #4
 80160b0:	4620      	mov	r0, r4
 80160b2:	f000 fc94 	bl	80169de <_calloc_r>
 80160b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160b8:	60f0      	str	r0, [r6, #12]
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d1e4      	bne.n	801608a <_Balloc+0x2e>
 80160c0:	2000      	movs	r0, #0
 80160c2:	bd70      	pop	{r4, r5, r6, pc}
 80160c4:	6802      	ldr	r2, [r0, #0]
 80160c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160ca:	2300      	movs	r3, #0
 80160cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160d0:	e7f7      	b.n	80160c2 <_Balloc+0x66>
 80160d2:	bf00      	nop
 80160d4:	08025806 	.word	0x08025806
 80160d8:	08025968 	.word	0x08025968

080160dc <_Bfree>:
 80160dc:	b570      	push	{r4, r5, r6, lr}
 80160de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80160e0:	4605      	mov	r5, r0
 80160e2:	460c      	mov	r4, r1
 80160e4:	b976      	cbnz	r6, 8016104 <_Bfree+0x28>
 80160e6:	2010      	movs	r0, #16
 80160e8:	f7fc fde6 	bl	8012cb8 <malloc>
 80160ec:	4602      	mov	r2, r0
 80160ee:	6268      	str	r0, [r5, #36]	; 0x24
 80160f0:	b920      	cbnz	r0, 80160fc <_Bfree+0x20>
 80160f2:	4b09      	ldr	r3, [pc, #36]	; (8016118 <_Bfree+0x3c>)
 80160f4:	4809      	ldr	r0, [pc, #36]	; (801611c <_Bfree+0x40>)
 80160f6:	218a      	movs	r1, #138	; 0x8a
 80160f8:	f000 fe66 	bl	8016dc8 <__assert_func>
 80160fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016100:	6006      	str	r6, [r0, #0]
 8016102:	60c6      	str	r6, [r0, #12]
 8016104:	b13c      	cbz	r4, 8016116 <_Bfree+0x3a>
 8016106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016108:	6862      	ldr	r2, [r4, #4]
 801610a:	68db      	ldr	r3, [r3, #12]
 801610c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016110:	6021      	str	r1, [r4, #0]
 8016112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016116:	bd70      	pop	{r4, r5, r6, pc}
 8016118:	08025806 	.word	0x08025806
 801611c:	08025968 	.word	0x08025968

08016120 <__multadd>:
 8016120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016124:	690d      	ldr	r5, [r1, #16]
 8016126:	4607      	mov	r7, r0
 8016128:	460c      	mov	r4, r1
 801612a:	461e      	mov	r6, r3
 801612c:	f101 0c14 	add.w	ip, r1, #20
 8016130:	2000      	movs	r0, #0
 8016132:	f8dc 3000 	ldr.w	r3, [ip]
 8016136:	b299      	uxth	r1, r3
 8016138:	fb02 6101 	mla	r1, r2, r1, r6
 801613c:	0c1e      	lsrs	r6, r3, #16
 801613e:	0c0b      	lsrs	r3, r1, #16
 8016140:	fb02 3306 	mla	r3, r2, r6, r3
 8016144:	b289      	uxth	r1, r1
 8016146:	3001      	adds	r0, #1
 8016148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801614c:	4285      	cmp	r5, r0
 801614e:	f84c 1b04 	str.w	r1, [ip], #4
 8016152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016156:	dcec      	bgt.n	8016132 <__multadd+0x12>
 8016158:	b30e      	cbz	r6, 801619e <__multadd+0x7e>
 801615a:	68a3      	ldr	r3, [r4, #8]
 801615c:	42ab      	cmp	r3, r5
 801615e:	dc19      	bgt.n	8016194 <__multadd+0x74>
 8016160:	6861      	ldr	r1, [r4, #4]
 8016162:	4638      	mov	r0, r7
 8016164:	3101      	adds	r1, #1
 8016166:	f7ff ff79 	bl	801605c <_Balloc>
 801616a:	4680      	mov	r8, r0
 801616c:	b928      	cbnz	r0, 801617a <__multadd+0x5a>
 801616e:	4602      	mov	r2, r0
 8016170:	4b0c      	ldr	r3, [pc, #48]	; (80161a4 <__multadd+0x84>)
 8016172:	480d      	ldr	r0, [pc, #52]	; (80161a8 <__multadd+0x88>)
 8016174:	21b5      	movs	r1, #181	; 0xb5
 8016176:	f000 fe27 	bl	8016dc8 <__assert_func>
 801617a:	6922      	ldr	r2, [r4, #16]
 801617c:	3202      	adds	r2, #2
 801617e:	f104 010c 	add.w	r1, r4, #12
 8016182:	0092      	lsls	r2, r2, #2
 8016184:	300c      	adds	r0, #12
 8016186:	f7fc fda7 	bl	8012cd8 <memcpy>
 801618a:	4621      	mov	r1, r4
 801618c:	4638      	mov	r0, r7
 801618e:	f7ff ffa5 	bl	80160dc <_Bfree>
 8016192:	4644      	mov	r4, r8
 8016194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016198:	3501      	adds	r5, #1
 801619a:	615e      	str	r6, [r3, #20]
 801619c:	6125      	str	r5, [r4, #16]
 801619e:	4620      	mov	r0, r4
 80161a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a4:	08025878 	.word	0x08025878
 80161a8:	08025968 	.word	0x08025968

080161ac <__s2b>:
 80161ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161b0:	460c      	mov	r4, r1
 80161b2:	4615      	mov	r5, r2
 80161b4:	461f      	mov	r7, r3
 80161b6:	2209      	movs	r2, #9
 80161b8:	3308      	adds	r3, #8
 80161ba:	4606      	mov	r6, r0
 80161bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80161c0:	2100      	movs	r1, #0
 80161c2:	2201      	movs	r2, #1
 80161c4:	429a      	cmp	r2, r3
 80161c6:	db09      	blt.n	80161dc <__s2b+0x30>
 80161c8:	4630      	mov	r0, r6
 80161ca:	f7ff ff47 	bl	801605c <_Balloc>
 80161ce:	b940      	cbnz	r0, 80161e2 <__s2b+0x36>
 80161d0:	4602      	mov	r2, r0
 80161d2:	4b19      	ldr	r3, [pc, #100]	; (8016238 <__s2b+0x8c>)
 80161d4:	4819      	ldr	r0, [pc, #100]	; (801623c <__s2b+0x90>)
 80161d6:	21ce      	movs	r1, #206	; 0xce
 80161d8:	f000 fdf6 	bl	8016dc8 <__assert_func>
 80161dc:	0052      	lsls	r2, r2, #1
 80161de:	3101      	adds	r1, #1
 80161e0:	e7f0      	b.n	80161c4 <__s2b+0x18>
 80161e2:	9b08      	ldr	r3, [sp, #32]
 80161e4:	6143      	str	r3, [r0, #20]
 80161e6:	2d09      	cmp	r5, #9
 80161e8:	f04f 0301 	mov.w	r3, #1
 80161ec:	6103      	str	r3, [r0, #16]
 80161ee:	dd16      	ble.n	801621e <__s2b+0x72>
 80161f0:	f104 0909 	add.w	r9, r4, #9
 80161f4:	46c8      	mov	r8, r9
 80161f6:	442c      	add	r4, r5
 80161f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80161fc:	4601      	mov	r1, r0
 80161fe:	3b30      	subs	r3, #48	; 0x30
 8016200:	220a      	movs	r2, #10
 8016202:	4630      	mov	r0, r6
 8016204:	f7ff ff8c 	bl	8016120 <__multadd>
 8016208:	45a0      	cmp	r8, r4
 801620a:	d1f5      	bne.n	80161f8 <__s2b+0x4c>
 801620c:	f1a5 0408 	sub.w	r4, r5, #8
 8016210:	444c      	add	r4, r9
 8016212:	1b2d      	subs	r5, r5, r4
 8016214:	1963      	adds	r3, r4, r5
 8016216:	42bb      	cmp	r3, r7
 8016218:	db04      	blt.n	8016224 <__s2b+0x78>
 801621a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801621e:	340a      	adds	r4, #10
 8016220:	2509      	movs	r5, #9
 8016222:	e7f6      	b.n	8016212 <__s2b+0x66>
 8016224:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016228:	4601      	mov	r1, r0
 801622a:	3b30      	subs	r3, #48	; 0x30
 801622c:	220a      	movs	r2, #10
 801622e:	4630      	mov	r0, r6
 8016230:	f7ff ff76 	bl	8016120 <__multadd>
 8016234:	e7ee      	b.n	8016214 <__s2b+0x68>
 8016236:	bf00      	nop
 8016238:	08025878 	.word	0x08025878
 801623c:	08025968 	.word	0x08025968

08016240 <__hi0bits>:
 8016240:	0c03      	lsrs	r3, r0, #16
 8016242:	041b      	lsls	r3, r3, #16
 8016244:	b9d3      	cbnz	r3, 801627c <__hi0bits+0x3c>
 8016246:	0400      	lsls	r0, r0, #16
 8016248:	2310      	movs	r3, #16
 801624a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801624e:	bf04      	itt	eq
 8016250:	0200      	lsleq	r0, r0, #8
 8016252:	3308      	addeq	r3, #8
 8016254:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016258:	bf04      	itt	eq
 801625a:	0100      	lsleq	r0, r0, #4
 801625c:	3304      	addeq	r3, #4
 801625e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016262:	bf04      	itt	eq
 8016264:	0080      	lsleq	r0, r0, #2
 8016266:	3302      	addeq	r3, #2
 8016268:	2800      	cmp	r0, #0
 801626a:	db05      	blt.n	8016278 <__hi0bits+0x38>
 801626c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016270:	f103 0301 	add.w	r3, r3, #1
 8016274:	bf08      	it	eq
 8016276:	2320      	moveq	r3, #32
 8016278:	4618      	mov	r0, r3
 801627a:	4770      	bx	lr
 801627c:	2300      	movs	r3, #0
 801627e:	e7e4      	b.n	801624a <__hi0bits+0xa>

08016280 <__lo0bits>:
 8016280:	6803      	ldr	r3, [r0, #0]
 8016282:	f013 0207 	ands.w	r2, r3, #7
 8016286:	4601      	mov	r1, r0
 8016288:	d00b      	beq.n	80162a2 <__lo0bits+0x22>
 801628a:	07da      	lsls	r2, r3, #31
 801628c:	d423      	bmi.n	80162d6 <__lo0bits+0x56>
 801628e:	0798      	lsls	r0, r3, #30
 8016290:	bf49      	itett	mi
 8016292:	085b      	lsrmi	r3, r3, #1
 8016294:	089b      	lsrpl	r3, r3, #2
 8016296:	2001      	movmi	r0, #1
 8016298:	600b      	strmi	r3, [r1, #0]
 801629a:	bf5c      	itt	pl
 801629c:	600b      	strpl	r3, [r1, #0]
 801629e:	2002      	movpl	r0, #2
 80162a0:	4770      	bx	lr
 80162a2:	b298      	uxth	r0, r3
 80162a4:	b9a8      	cbnz	r0, 80162d2 <__lo0bits+0x52>
 80162a6:	0c1b      	lsrs	r3, r3, #16
 80162a8:	2010      	movs	r0, #16
 80162aa:	b2da      	uxtb	r2, r3
 80162ac:	b90a      	cbnz	r2, 80162b2 <__lo0bits+0x32>
 80162ae:	3008      	adds	r0, #8
 80162b0:	0a1b      	lsrs	r3, r3, #8
 80162b2:	071a      	lsls	r2, r3, #28
 80162b4:	bf04      	itt	eq
 80162b6:	091b      	lsreq	r3, r3, #4
 80162b8:	3004      	addeq	r0, #4
 80162ba:	079a      	lsls	r2, r3, #30
 80162bc:	bf04      	itt	eq
 80162be:	089b      	lsreq	r3, r3, #2
 80162c0:	3002      	addeq	r0, #2
 80162c2:	07da      	lsls	r2, r3, #31
 80162c4:	d403      	bmi.n	80162ce <__lo0bits+0x4e>
 80162c6:	085b      	lsrs	r3, r3, #1
 80162c8:	f100 0001 	add.w	r0, r0, #1
 80162cc:	d005      	beq.n	80162da <__lo0bits+0x5a>
 80162ce:	600b      	str	r3, [r1, #0]
 80162d0:	4770      	bx	lr
 80162d2:	4610      	mov	r0, r2
 80162d4:	e7e9      	b.n	80162aa <__lo0bits+0x2a>
 80162d6:	2000      	movs	r0, #0
 80162d8:	4770      	bx	lr
 80162da:	2020      	movs	r0, #32
 80162dc:	4770      	bx	lr
	...

080162e0 <__i2b>:
 80162e0:	b510      	push	{r4, lr}
 80162e2:	460c      	mov	r4, r1
 80162e4:	2101      	movs	r1, #1
 80162e6:	f7ff feb9 	bl	801605c <_Balloc>
 80162ea:	4602      	mov	r2, r0
 80162ec:	b928      	cbnz	r0, 80162fa <__i2b+0x1a>
 80162ee:	4b05      	ldr	r3, [pc, #20]	; (8016304 <__i2b+0x24>)
 80162f0:	4805      	ldr	r0, [pc, #20]	; (8016308 <__i2b+0x28>)
 80162f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80162f6:	f000 fd67 	bl	8016dc8 <__assert_func>
 80162fa:	2301      	movs	r3, #1
 80162fc:	6144      	str	r4, [r0, #20]
 80162fe:	6103      	str	r3, [r0, #16]
 8016300:	bd10      	pop	{r4, pc}
 8016302:	bf00      	nop
 8016304:	08025878 	.word	0x08025878
 8016308:	08025968 	.word	0x08025968

0801630c <__multiply>:
 801630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016310:	4691      	mov	r9, r2
 8016312:	690a      	ldr	r2, [r1, #16]
 8016314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016318:	429a      	cmp	r2, r3
 801631a:	bfb8      	it	lt
 801631c:	460b      	movlt	r3, r1
 801631e:	460c      	mov	r4, r1
 8016320:	bfbc      	itt	lt
 8016322:	464c      	movlt	r4, r9
 8016324:	4699      	movlt	r9, r3
 8016326:	6927      	ldr	r7, [r4, #16]
 8016328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801632c:	68a3      	ldr	r3, [r4, #8]
 801632e:	6861      	ldr	r1, [r4, #4]
 8016330:	eb07 060a 	add.w	r6, r7, sl
 8016334:	42b3      	cmp	r3, r6
 8016336:	b085      	sub	sp, #20
 8016338:	bfb8      	it	lt
 801633a:	3101      	addlt	r1, #1
 801633c:	f7ff fe8e 	bl	801605c <_Balloc>
 8016340:	b930      	cbnz	r0, 8016350 <__multiply+0x44>
 8016342:	4602      	mov	r2, r0
 8016344:	4b44      	ldr	r3, [pc, #272]	; (8016458 <__multiply+0x14c>)
 8016346:	4845      	ldr	r0, [pc, #276]	; (801645c <__multiply+0x150>)
 8016348:	f240 115d 	movw	r1, #349	; 0x15d
 801634c:	f000 fd3c 	bl	8016dc8 <__assert_func>
 8016350:	f100 0514 	add.w	r5, r0, #20
 8016354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016358:	462b      	mov	r3, r5
 801635a:	2200      	movs	r2, #0
 801635c:	4543      	cmp	r3, r8
 801635e:	d321      	bcc.n	80163a4 <__multiply+0x98>
 8016360:	f104 0314 	add.w	r3, r4, #20
 8016364:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016368:	f109 0314 	add.w	r3, r9, #20
 801636c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016370:	9202      	str	r2, [sp, #8]
 8016372:	1b3a      	subs	r2, r7, r4
 8016374:	3a15      	subs	r2, #21
 8016376:	f022 0203 	bic.w	r2, r2, #3
 801637a:	3204      	adds	r2, #4
 801637c:	f104 0115 	add.w	r1, r4, #21
 8016380:	428f      	cmp	r7, r1
 8016382:	bf38      	it	cc
 8016384:	2204      	movcc	r2, #4
 8016386:	9201      	str	r2, [sp, #4]
 8016388:	9a02      	ldr	r2, [sp, #8]
 801638a:	9303      	str	r3, [sp, #12]
 801638c:	429a      	cmp	r2, r3
 801638e:	d80c      	bhi.n	80163aa <__multiply+0x9e>
 8016390:	2e00      	cmp	r6, #0
 8016392:	dd03      	ble.n	801639c <__multiply+0x90>
 8016394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016398:	2b00      	cmp	r3, #0
 801639a:	d05a      	beq.n	8016452 <__multiply+0x146>
 801639c:	6106      	str	r6, [r0, #16]
 801639e:	b005      	add	sp, #20
 80163a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a4:	f843 2b04 	str.w	r2, [r3], #4
 80163a8:	e7d8      	b.n	801635c <__multiply+0x50>
 80163aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80163ae:	f1ba 0f00 	cmp.w	sl, #0
 80163b2:	d024      	beq.n	80163fe <__multiply+0xf2>
 80163b4:	f104 0e14 	add.w	lr, r4, #20
 80163b8:	46a9      	mov	r9, r5
 80163ba:	f04f 0c00 	mov.w	ip, #0
 80163be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80163c2:	f8d9 1000 	ldr.w	r1, [r9]
 80163c6:	fa1f fb82 	uxth.w	fp, r2
 80163ca:	b289      	uxth	r1, r1
 80163cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80163d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80163d4:	f8d9 2000 	ldr.w	r2, [r9]
 80163d8:	4461      	add	r1, ip
 80163da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80163de:	fb0a c20b 	mla	r2, sl, fp, ip
 80163e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80163e6:	b289      	uxth	r1, r1
 80163e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80163ec:	4577      	cmp	r7, lr
 80163ee:	f849 1b04 	str.w	r1, [r9], #4
 80163f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80163f6:	d8e2      	bhi.n	80163be <__multiply+0xb2>
 80163f8:	9a01      	ldr	r2, [sp, #4]
 80163fa:	f845 c002 	str.w	ip, [r5, r2]
 80163fe:	9a03      	ldr	r2, [sp, #12]
 8016400:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016404:	3304      	adds	r3, #4
 8016406:	f1b9 0f00 	cmp.w	r9, #0
 801640a:	d020      	beq.n	801644e <__multiply+0x142>
 801640c:	6829      	ldr	r1, [r5, #0]
 801640e:	f104 0c14 	add.w	ip, r4, #20
 8016412:	46ae      	mov	lr, r5
 8016414:	f04f 0a00 	mov.w	sl, #0
 8016418:	f8bc b000 	ldrh.w	fp, [ip]
 801641c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016420:	fb09 220b 	mla	r2, r9, fp, r2
 8016424:	4492      	add	sl, r2
 8016426:	b289      	uxth	r1, r1
 8016428:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801642c:	f84e 1b04 	str.w	r1, [lr], #4
 8016430:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016434:	f8be 1000 	ldrh.w	r1, [lr]
 8016438:	0c12      	lsrs	r2, r2, #16
 801643a:	fb09 1102 	mla	r1, r9, r2, r1
 801643e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016442:	4567      	cmp	r7, ip
 8016444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016448:	d8e6      	bhi.n	8016418 <__multiply+0x10c>
 801644a:	9a01      	ldr	r2, [sp, #4]
 801644c:	50a9      	str	r1, [r5, r2]
 801644e:	3504      	adds	r5, #4
 8016450:	e79a      	b.n	8016388 <__multiply+0x7c>
 8016452:	3e01      	subs	r6, #1
 8016454:	e79c      	b.n	8016390 <__multiply+0x84>
 8016456:	bf00      	nop
 8016458:	08025878 	.word	0x08025878
 801645c:	08025968 	.word	0x08025968

08016460 <__pow5mult>:
 8016460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016464:	4615      	mov	r5, r2
 8016466:	f012 0203 	ands.w	r2, r2, #3
 801646a:	4606      	mov	r6, r0
 801646c:	460f      	mov	r7, r1
 801646e:	d007      	beq.n	8016480 <__pow5mult+0x20>
 8016470:	4c25      	ldr	r4, [pc, #148]	; (8016508 <__pow5mult+0xa8>)
 8016472:	3a01      	subs	r2, #1
 8016474:	2300      	movs	r3, #0
 8016476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801647a:	f7ff fe51 	bl	8016120 <__multadd>
 801647e:	4607      	mov	r7, r0
 8016480:	10ad      	asrs	r5, r5, #2
 8016482:	d03d      	beq.n	8016500 <__pow5mult+0xa0>
 8016484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016486:	b97c      	cbnz	r4, 80164a8 <__pow5mult+0x48>
 8016488:	2010      	movs	r0, #16
 801648a:	f7fc fc15 	bl	8012cb8 <malloc>
 801648e:	4602      	mov	r2, r0
 8016490:	6270      	str	r0, [r6, #36]	; 0x24
 8016492:	b928      	cbnz	r0, 80164a0 <__pow5mult+0x40>
 8016494:	4b1d      	ldr	r3, [pc, #116]	; (801650c <__pow5mult+0xac>)
 8016496:	481e      	ldr	r0, [pc, #120]	; (8016510 <__pow5mult+0xb0>)
 8016498:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801649c:	f000 fc94 	bl	8016dc8 <__assert_func>
 80164a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80164a4:	6004      	str	r4, [r0, #0]
 80164a6:	60c4      	str	r4, [r0, #12]
 80164a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80164ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80164b0:	b94c      	cbnz	r4, 80164c6 <__pow5mult+0x66>
 80164b2:	f240 2171 	movw	r1, #625	; 0x271
 80164b6:	4630      	mov	r0, r6
 80164b8:	f7ff ff12 	bl	80162e0 <__i2b>
 80164bc:	2300      	movs	r3, #0
 80164be:	f8c8 0008 	str.w	r0, [r8, #8]
 80164c2:	4604      	mov	r4, r0
 80164c4:	6003      	str	r3, [r0, #0]
 80164c6:	f04f 0900 	mov.w	r9, #0
 80164ca:	07eb      	lsls	r3, r5, #31
 80164cc:	d50a      	bpl.n	80164e4 <__pow5mult+0x84>
 80164ce:	4639      	mov	r1, r7
 80164d0:	4622      	mov	r2, r4
 80164d2:	4630      	mov	r0, r6
 80164d4:	f7ff ff1a 	bl	801630c <__multiply>
 80164d8:	4639      	mov	r1, r7
 80164da:	4680      	mov	r8, r0
 80164dc:	4630      	mov	r0, r6
 80164de:	f7ff fdfd 	bl	80160dc <_Bfree>
 80164e2:	4647      	mov	r7, r8
 80164e4:	106d      	asrs	r5, r5, #1
 80164e6:	d00b      	beq.n	8016500 <__pow5mult+0xa0>
 80164e8:	6820      	ldr	r0, [r4, #0]
 80164ea:	b938      	cbnz	r0, 80164fc <__pow5mult+0x9c>
 80164ec:	4622      	mov	r2, r4
 80164ee:	4621      	mov	r1, r4
 80164f0:	4630      	mov	r0, r6
 80164f2:	f7ff ff0b 	bl	801630c <__multiply>
 80164f6:	6020      	str	r0, [r4, #0]
 80164f8:	f8c0 9000 	str.w	r9, [r0]
 80164fc:	4604      	mov	r4, r0
 80164fe:	e7e4      	b.n	80164ca <__pow5mult+0x6a>
 8016500:	4638      	mov	r0, r7
 8016502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016506:	bf00      	nop
 8016508:	08025ab8 	.word	0x08025ab8
 801650c:	08025806 	.word	0x08025806
 8016510:	08025968 	.word	0x08025968

08016514 <__lshift>:
 8016514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016518:	460c      	mov	r4, r1
 801651a:	6849      	ldr	r1, [r1, #4]
 801651c:	6923      	ldr	r3, [r4, #16]
 801651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016522:	68a3      	ldr	r3, [r4, #8]
 8016524:	4607      	mov	r7, r0
 8016526:	4691      	mov	r9, r2
 8016528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801652c:	f108 0601 	add.w	r6, r8, #1
 8016530:	42b3      	cmp	r3, r6
 8016532:	db0b      	blt.n	801654c <__lshift+0x38>
 8016534:	4638      	mov	r0, r7
 8016536:	f7ff fd91 	bl	801605c <_Balloc>
 801653a:	4605      	mov	r5, r0
 801653c:	b948      	cbnz	r0, 8016552 <__lshift+0x3e>
 801653e:	4602      	mov	r2, r0
 8016540:	4b2a      	ldr	r3, [pc, #168]	; (80165ec <__lshift+0xd8>)
 8016542:	482b      	ldr	r0, [pc, #172]	; (80165f0 <__lshift+0xdc>)
 8016544:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016548:	f000 fc3e 	bl	8016dc8 <__assert_func>
 801654c:	3101      	adds	r1, #1
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	e7ee      	b.n	8016530 <__lshift+0x1c>
 8016552:	2300      	movs	r3, #0
 8016554:	f100 0114 	add.w	r1, r0, #20
 8016558:	f100 0210 	add.w	r2, r0, #16
 801655c:	4618      	mov	r0, r3
 801655e:	4553      	cmp	r3, sl
 8016560:	db37      	blt.n	80165d2 <__lshift+0xbe>
 8016562:	6920      	ldr	r0, [r4, #16]
 8016564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016568:	f104 0314 	add.w	r3, r4, #20
 801656c:	f019 091f 	ands.w	r9, r9, #31
 8016570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016574:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016578:	d02f      	beq.n	80165da <__lshift+0xc6>
 801657a:	f1c9 0e20 	rsb	lr, r9, #32
 801657e:	468a      	mov	sl, r1
 8016580:	f04f 0c00 	mov.w	ip, #0
 8016584:	681a      	ldr	r2, [r3, #0]
 8016586:	fa02 f209 	lsl.w	r2, r2, r9
 801658a:	ea42 020c 	orr.w	r2, r2, ip
 801658e:	f84a 2b04 	str.w	r2, [sl], #4
 8016592:	f853 2b04 	ldr.w	r2, [r3], #4
 8016596:	4298      	cmp	r0, r3
 8016598:	fa22 fc0e 	lsr.w	ip, r2, lr
 801659c:	d8f2      	bhi.n	8016584 <__lshift+0x70>
 801659e:	1b03      	subs	r3, r0, r4
 80165a0:	3b15      	subs	r3, #21
 80165a2:	f023 0303 	bic.w	r3, r3, #3
 80165a6:	3304      	adds	r3, #4
 80165a8:	f104 0215 	add.w	r2, r4, #21
 80165ac:	4290      	cmp	r0, r2
 80165ae:	bf38      	it	cc
 80165b0:	2304      	movcc	r3, #4
 80165b2:	f841 c003 	str.w	ip, [r1, r3]
 80165b6:	f1bc 0f00 	cmp.w	ip, #0
 80165ba:	d001      	beq.n	80165c0 <__lshift+0xac>
 80165bc:	f108 0602 	add.w	r6, r8, #2
 80165c0:	3e01      	subs	r6, #1
 80165c2:	4638      	mov	r0, r7
 80165c4:	612e      	str	r6, [r5, #16]
 80165c6:	4621      	mov	r1, r4
 80165c8:	f7ff fd88 	bl	80160dc <_Bfree>
 80165cc:	4628      	mov	r0, r5
 80165ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80165d6:	3301      	adds	r3, #1
 80165d8:	e7c1      	b.n	801655e <__lshift+0x4a>
 80165da:	3904      	subs	r1, #4
 80165dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80165e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80165e4:	4298      	cmp	r0, r3
 80165e6:	d8f9      	bhi.n	80165dc <__lshift+0xc8>
 80165e8:	e7ea      	b.n	80165c0 <__lshift+0xac>
 80165ea:	bf00      	nop
 80165ec:	08025878 	.word	0x08025878
 80165f0:	08025968 	.word	0x08025968

080165f4 <__mcmp>:
 80165f4:	b530      	push	{r4, r5, lr}
 80165f6:	6902      	ldr	r2, [r0, #16]
 80165f8:	690c      	ldr	r4, [r1, #16]
 80165fa:	1b12      	subs	r2, r2, r4
 80165fc:	d10e      	bne.n	801661c <__mcmp+0x28>
 80165fe:	f100 0314 	add.w	r3, r0, #20
 8016602:	3114      	adds	r1, #20
 8016604:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016608:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801660c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016610:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016614:	42a5      	cmp	r5, r4
 8016616:	d003      	beq.n	8016620 <__mcmp+0x2c>
 8016618:	d305      	bcc.n	8016626 <__mcmp+0x32>
 801661a:	2201      	movs	r2, #1
 801661c:	4610      	mov	r0, r2
 801661e:	bd30      	pop	{r4, r5, pc}
 8016620:	4283      	cmp	r3, r0
 8016622:	d3f3      	bcc.n	801660c <__mcmp+0x18>
 8016624:	e7fa      	b.n	801661c <__mcmp+0x28>
 8016626:	f04f 32ff 	mov.w	r2, #4294967295
 801662a:	e7f7      	b.n	801661c <__mcmp+0x28>

0801662c <__mdiff>:
 801662c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	460c      	mov	r4, r1
 8016632:	4606      	mov	r6, r0
 8016634:	4611      	mov	r1, r2
 8016636:	4620      	mov	r0, r4
 8016638:	4690      	mov	r8, r2
 801663a:	f7ff ffdb 	bl	80165f4 <__mcmp>
 801663e:	1e05      	subs	r5, r0, #0
 8016640:	d110      	bne.n	8016664 <__mdiff+0x38>
 8016642:	4629      	mov	r1, r5
 8016644:	4630      	mov	r0, r6
 8016646:	f7ff fd09 	bl	801605c <_Balloc>
 801664a:	b930      	cbnz	r0, 801665a <__mdiff+0x2e>
 801664c:	4b3a      	ldr	r3, [pc, #232]	; (8016738 <__mdiff+0x10c>)
 801664e:	4602      	mov	r2, r0
 8016650:	f240 2132 	movw	r1, #562	; 0x232
 8016654:	4839      	ldr	r0, [pc, #228]	; (801673c <__mdiff+0x110>)
 8016656:	f000 fbb7 	bl	8016dc8 <__assert_func>
 801665a:	2301      	movs	r3, #1
 801665c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016664:	bfa4      	itt	ge
 8016666:	4643      	movge	r3, r8
 8016668:	46a0      	movge	r8, r4
 801666a:	4630      	mov	r0, r6
 801666c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016670:	bfa6      	itte	ge
 8016672:	461c      	movge	r4, r3
 8016674:	2500      	movge	r5, #0
 8016676:	2501      	movlt	r5, #1
 8016678:	f7ff fcf0 	bl	801605c <_Balloc>
 801667c:	b920      	cbnz	r0, 8016688 <__mdiff+0x5c>
 801667e:	4b2e      	ldr	r3, [pc, #184]	; (8016738 <__mdiff+0x10c>)
 8016680:	4602      	mov	r2, r0
 8016682:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016686:	e7e5      	b.n	8016654 <__mdiff+0x28>
 8016688:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801668c:	6926      	ldr	r6, [r4, #16]
 801668e:	60c5      	str	r5, [r0, #12]
 8016690:	f104 0914 	add.w	r9, r4, #20
 8016694:	f108 0514 	add.w	r5, r8, #20
 8016698:	f100 0e14 	add.w	lr, r0, #20
 801669c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80166a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80166a4:	f108 0210 	add.w	r2, r8, #16
 80166a8:	46f2      	mov	sl, lr
 80166aa:	2100      	movs	r1, #0
 80166ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80166b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80166b4:	fa1f f883 	uxth.w	r8, r3
 80166b8:	fa11 f18b 	uxtah	r1, r1, fp
 80166bc:	0c1b      	lsrs	r3, r3, #16
 80166be:	eba1 0808 	sub.w	r8, r1, r8
 80166c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80166c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80166ca:	fa1f f888 	uxth.w	r8, r8
 80166ce:	1419      	asrs	r1, r3, #16
 80166d0:	454e      	cmp	r6, r9
 80166d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80166d6:	f84a 3b04 	str.w	r3, [sl], #4
 80166da:	d8e7      	bhi.n	80166ac <__mdiff+0x80>
 80166dc:	1b33      	subs	r3, r6, r4
 80166de:	3b15      	subs	r3, #21
 80166e0:	f023 0303 	bic.w	r3, r3, #3
 80166e4:	3304      	adds	r3, #4
 80166e6:	3415      	adds	r4, #21
 80166e8:	42a6      	cmp	r6, r4
 80166ea:	bf38      	it	cc
 80166ec:	2304      	movcc	r3, #4
 80166ee:	441d      	add	r5, r3
 80166f0:	4473      	add	r3, lr
 80166f2:	469e      	mov	lr, r3
 80166f4:	462e      	mov	r6, r5
 80166f6:	4566      	cmp	r6, ip
 80166f8:	d30e      	bcc.n	8016718 <__mdiff+0xec>
 80166fa:	f10c 0203 	add.w	r2, ip, #3
 80166fe:	1b52      	subs	r2, r2, r5
 8016700:	f022 0203 	bic.w	r2, r2, #3
 8016704:	3d03      	subs	r5, #3
 8016706:	45ac      	cmp	ip, r5
 8016708:	bf38      	it	cc
 801670a:	2200      	movcc	r2, #0
 801670c:	441a      	add	r2, r3
 801670e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016712:	b17b      	cbz	r3, 8016734 <__mdiff+0x108>
 8016714:	6107      	str	r7, [r0, #16]
 8016716:	e7a3      	b.n	8016660 <__mdiff+0x34>
 8016718:	f856 8b04 	ldr.w	r8, [r6], #4
 801671c:	fa11 f288 	uxtah	r2, r1, r8
 8016720:	1414      	asrs	r4, r2, #16
 8016722:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016726:	b292      	uxth	r2, r2
 8016728:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801672c:	f84e 2b04 	str.w	r2, [lr], #4
 8016730:	1421      	asrs	r1, r4, #16
 8016732:	e7e0      	b.n	80166f6 <__mdiff+0xca>
 8016734:	3f01      	subs	r7, #1
 8016736:	e7ea      	b.n	801670e <__mdiff+0xe2>
 8016738:	08025878 	.word	0x08025878
 801673c:	08025968 	.word	0x08025968

08016740 <__ulp>:
 8016740:	b082      	sub	sp, #8
 8016742:	ed8d 0b00 	vstr	d0, [sp]
 8016746:	9b01      	ldr	r3, [sp, #4]
 8016748:	4912      	ldr	r1, [pc, #72]	; (8016794 <__ulp+0x54>)
 801674a:	4019      	ands	r1, r3
 801674c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016750:	2900      	cmp	r1, #0
 8016752:	dd05      	ble.n	8016760 <__ulp+0x20>
 8016754:	2200      	movs	r2, #0
 8016756:	460b      	mov	r3, r1
 8016758:	ec43 2b10 	vmov	d0, r2, r3
 801675c:	b002      	add	sp, #8
 801675e:	4770      	bx	lr
 8016760:	4249      	negs	r1, r1
 8016762:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016766:	ea4f 5021 	mov.w	r0, r1, asr #20
 801676a:	f04f 0200 	mov.w	r2, #0
 801676e:	f04f 0300 	mov.w	r3, #0
 8016772:	da04      	bge.n	801677e <__ulp+0x3e>
 8016774:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016778:	fa41 f300 	asr.w	r3, r1, r0
 801677c:	e7ec      	b.n	8016758 <__ulp+0x18>
 801677e:	f1a0 0114 	sub.w	r1, r0, #20
 8016782:	291e      	cmp	r1, #30
 8016784:	bfda      	itte	le
 8016786:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801678a:	fa20 f101 	lsrle.w	r1, r0, r1
 801678e:	2101      	movgt	r1, #1
 8016790:	460a      	mov	r2, r1
 8016792:	e7e1      	b.n	8016758 <__ulp+0x18>
 8016794:	7ff00000 	.word	0x7ff00000

08016798 <__b2d>:
 8016798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679a:	6905      	ldr	r5, [r0, #16]
 801679c:	f100 0714 	add.w	r7, r0, #20
 80167a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80167a4:	1f2e      	subs	r6, r5, #4
 80167a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80167aa:	4620      	mov	r0, r4
 80167ac:	f7ff fd48 	bl	8016240 <__hi0bits>
 80167b0:	f1c0 0320 	rsb	r3, r0, #32
 80167b4:	280a      	cmp	r0, #10
 80167b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016834 <__b2d+0x9c>
 80167ba:	600b      	str	r3, [r1, #0]
 80167bc:	dc14      	bgt.n	80167e8 <__b2d+0x50>
 80167be:	f1c0 0e0b 	rsb	lr, r0, #11
 80167c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80167c6:	42b7      	cmp	r7, r6
 80167c8:	ea41 030c 	orr.w	r3, r1, ip
 80167cc:	bf34      	ite	cc
 80167ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167d2:	2100      	movcs	r1, #0
 80167d4:	3015      	adds	r0, #21
 80167d6:	fa04 f000 	lsl.w	r0, r4, r0
 80167da:	fa21 f10e 	lsr.w	r1, r1, lr
 80167de:	ea40 0201 	orr.w	r2, r0, r1
 80167e2:	ec43 2b10 	vmov	d0, r2, r3
 80167e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167e8:	42b7      	cmp	r7, r6
 80167ea:	bf3a      	itte	cc
 80167ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80167f4:	2100      	movcs	r1, #0
 80167f6:	380b      	subs	r0, #11
 80167f8:	d017      	beq.n	801682a <__b2d+0x92>
 80167fa:	f1c0 0c20 	rsb	ip, r0, #32
 80167fe:	fa04 f500 	lsl.w	r5, r4, r0
 8016802:	42be      	cmp	r6, r7
 8016804:	fa21 f40c 	lsr.w	r4, r1, ip
 8016808:	ea45 0504 	orr.w	r5, r5, r4
 801680c:	bf8c      	ite	hi
 801680e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016812:	2400      	movls	r4, #0
 8016814:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016818:	fa01 f000 	lsl.w	r0, r1, r0
 801681c:	fa24 f40c 	lsr.w	r4, r4, ip
 8016820:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016824:	ea40 0204 	orr.w	r2, r0, r4
 8016828:	e7db      	b.n	80167e2 <__b2d+0x4a>
 801682a:	ea44 030c 	orr.w	r3, r4, ip
 801682e:	460a      	mov	r2, r1
 8016830:	e7d7      	b.n	80167e2 <__b2d+0x4a>
 8016832:	bf00      	nop
 8016834:	3ff00000 	.word	0x3ff00000

08016838 <__d2b>:
 8016838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801683c:	4689      	mov	r9, r1
 801683e:	2101      	movs	r1, #1
 8016840:	ec57 6b10 	vmov	r6, r7, d0
 8016844:	4690      	mov	r8, r2
 8016846:	f7ff fc09 	bl	801605c <_Balloc>
 801684a:	4604      	mov	r4, r0
 801684c:	b930      	cbnz	r0, 801685c <__d2b+0x24>
 801684e:	4602      	mov	r2, r0
 8016850:	4b25      	ldr	r3, [pc, #148]	; (80168e8 <__d2b+0xb0>)
 8016852:	4826      	ldr	r0, [pc, #152]	; (80168ec <__d2b+0xb4>)
 8016854:	f240 310a 	movw	r1, #778	; 0x30a
 8016858:	f000 fab6 	bl	8016dc8 <__assert_func>
 801685c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016864:	bb35      	cbnz	r5, 80168b4 <__d2b+0x7c>
 8016866:	2e00      	cmp	r6, #0
 8016868:	9301      	str	r3, [sp, #4]
 801686a:	d028      	beq.n	80168be <__d2b+0x86>
 801686c:	4668      	mov	r0, sp
 801686e:	9600      	str	r6, [sp, #0]
 8016870:	f7ff fd06 	bl	8016280 <__lo0bits>
 8016874:	9900      	ldr	r1, [sp, #0]
 8016876:	b300      	cbz	r0, 80168ba <__d2b+0x82>
 8016878:	9a01      	ldr	r2, [sp, #4]
 801687a:	f1c0 0320 	rsb	r3, r0, #32
 801687e:	fa02 f303 	lsl.w	r3, r2, r3
 8016882:	430b      	orrs	r3, r1
 8016884:	40c2      	lsrs	r2, r0
 8016886:	6163      	str	r3, [r4, #20]
 8016888:	9201      	str	r2, [sp, #4]
 801688a:	9b01      	ldr	r3, [sp, #4]
 801688c:	61a3      	str	r3, [r4, #24]
 801688e:	2b00      	cmp	r3, #0
 8016890:	bf14      	ite	ne
 8016892:	2202      	movne	r2, #2
 8016894:	2201      	moveq	r2, #1
 8016896:	6122      	str	r2, [r4, #16]
 8016898:	b1d5      	cbz	r5, 80168d0 <__d2b+0x98>
 801689a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801689e:	4405      	add	r5, r0
 80168a0:	f8c9 5000 	str.w	r5, [r9]
 80168a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80168a8:	f8c8 0000 	str.w	r0, [r8]
 80168ac:	4620      	mov	r0, r4
 80168ae:	b003      	add	sp, #12
 80168b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168b8:	e7d5      	b.n	8016866 <__d2b+0x2e>
 80168ba:	6161      	str	r1, [r4, #20]
 80168bc:	e7e5      	b.n	801688a <__d2b+0x52>
 80168be:	a801      	add	r0, sp, #4
 80168c0:	f7ff fcde 	bl	8016280 <__lo0bits>
 80168c4:	9b01      	ldr	r3, [sp, #4]
 80168c6:	6163      	str	r3, [r4, #20]
 80168c8:	2201      	movs	r2, #1
 80168ca:	6122      	str	r2, [r4, #16]
 80168cc:	3020      	adds	r0, #32
 80168ce:	e7e3      	b.n	8016898 <__d2b+0x60>
 80168d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80168d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80168d8:	f8c9 0000 	str.w	r0, [r9]
 80168dc:	6918      	ldr	r0, [r3, #16]
 80168de:	f7ff fcaf 	bl	8016240 <__hi0bits>
 80168e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80168e6:	e7df      	b.n	80168a8 <__d2b+0x70>
 80168e8:	08025878 	.word	0x08025878
 80168ec:	08025968 	.word	0x08025968

080168f0 <__ratio>:
 80168f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f4:	4688      	mov	r8, r1
 80168f6:	4669      	mov	r1, sp
 80168f8:	4681      	mov	r9, r0
 80168fa:	f7ff ff4d 	bl	8016798 <__b2d>
 80168fe:	a901      	add	r1, sp, #4
 8016900:	4640      	mov	r0, r8
 8016902:	ec55 4b10 	vmov	r4, r5, d0
 8016906:	f7ff ff47 	bl	8016798 <__b2d>
 801690a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801690e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016912:	eba3 0c02 	sub.w	ip, r3, r2
 8016916:	e9dd 3200 	ldrd	r3, r2, [sp]
 801691a:	1a9b      	subs	r3, r3, r2
 801691c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016920:	ec51 0b10 	vmov	r0, r1, d0
 8016924:	2b00      	cmp	r3, #0
 8016926:	bfd6      	itet	le
 8016928:	460a      	movle	r2, r1
 801692a:	462a      	movgt	r2, r5
 801692c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016930:	468b      	mov	fp, r1
 8016932:	462f      	mov	r7, r5
 8016934:	bfd4      	ite	le
 8016936:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801693a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801693e:	4620      	mov	r0, r4
 8016940:	ee10 2a10 	vmov	r2, s0
 8016944:	465b      	mov	r3, fp
 8016946:	4639      	mov	r1, r7
 8016948:	f7e9 ff98 	bl	800087c <__aeabi_ddiv>
 801694c:	ec41 0b10 	vmov	d0, r0, r1
 8016950:	b003      	add	sp, #12
 8016952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016956 <__copybits>:
 8016956:	3901      	subs	r1, #1
 8016958:	b570      	push	{r4, r5, r6, lr}
 801695a:	1149      	asrs	r1, r1, #5
 801695c:	6914      	ldr	r4, [r2, #16]
 801695e:	3101      	adds	r1, #1
 8016960:	f102 0314 	add.w	r3, r2, #20
 8016964:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016968:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801696c:	1f05      	subs	r5, r0, #4
 801696e:	42a3      	cmp	r3, r4
 8016970:	d30c      	bcc.n	801698c <__copybits+0x36>
 8016972:	1aa3      	subs	r3, r4, r2
 8016974:	3b11      	subs	r3, #17
 8016976:	f023 0303 	bic.w	r3, r3, #3
 801697a:	3211      	adds	r2, #17
 801697c:	42a2      	cmp	r2, r4
 801697e:	bf88      	it	hi
 8016980:	2300      	movhi	r3, #0
 8016982:	4418      	add	r0, r3
 8016984:	2300      	movs	r3, #0
 8016986:	4288      	cmp	r0, r1
 8016988:	d305      	bcc.n	8016996 <__copybits+0x40>
 801698a:	bd70      	pop	{r4, r5, r6, pc}
 801698c:	f853 6b04 	ldr.w	r6, [r3], #4
 8016990:	f845 6f04 	str.w	r6, [r5, #4]!
 8016994:	e7eb      	b.n	801696e <__copybits+0x18>
 8016996:	f840 3b04 	str.w	r3, [r0], #4
 801699a:	e7f4      	b.n	8016986 <__copybits+0x30>

0801699c <__any_on>:
 801699c:	f100 0214 	add.w	r2, r0, #20
 80169a0:	6900      	ldr	r0, [r0, #16]
 80169a2:	114b      	asrs	r3, r1, #5
 80169a4:	4298      	cmp	r0, r3
 80169a6:	b510      	push	{r4, lr}
 80169a8:	db11      	blt.n	80169ce <__any_on+0x32>
 80169aa:	dd0a      	ble.n	80169c2 <__any_on+0x26>
 80169ac:	f011 011f 	ands.w	r1, r1, #31
 80169b0:	d007      	beq.n	80169c2 <__any_on+0x26>
 80169b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80169b6:	fa24 f001 	lsr.w	r0, r4, r1
 80169ba:	fa00 f101 	lsl.w	r1, r0, r1
 80169be:	428c      	cmp	r4, r1
 80169c0:	d10b      	bne.n	80169da <__any_on+0x3e>
 80169c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80169c6:	4293      	cmp	r3, r2
 80169c8:	d803      	bhi.n	80169d2 <__any_on+0x36>
 80169ca:	2000      	movs	r0, #0
 80169cc:	bd10      	pop	{r4, pc}
 80169ce:	4603      	mov	r3, r0
 80169d0:	e7f7      	b.n	80169c2 <__any_on+0x26>
 80169d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80169d6:	2900      	cmp	r1, #0
 80169d8:	d0f5      	beq.n	80169c6 <__any_on+0x2a>
 80169da:	2001      	movs	r0, #1
 80169dc:	e7f6      	b.n	80169cc <__any_on+0x30>

080169de <_calloc_r>:
 80169de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169e0:	fba1 2402 	umull	r2, r4, r1, r2
 80169e4:	b94c      	cbnz	r4, 80169fa <_calloc_r+0x1c>
 80169e6:	4611      	mov	r1, r2
 80169e8:	9201      	str	r2, [sp, #4]
 80169ea:	f7fc f9f7 	bl	8012ddc <_malloc_r>
 80169ee:	9a01      	ldr	r2, [sp, #4]
 80169f0:	4605      	mov	r5, r0
 80169f2:	b930      	cbnz	r0, 8016a02 <_calloc_r+0x24>
 80169f4:	4628      	mov	r0, r5
 80169f6:	b003      	add	sp, #12
 80169f8:	bd30      	pop	{r4, r5, pc}
 80169fa:	220c      	movs	r2, #12
 80169fc:	6002      	str	r2, [r0, #0]
 80169fe:	2500      	movs	r5, #0
 8016a00:	e7f8      	b.n	80169f4 <_calloc_r+0x16>
 8016a02:	4621      	mov	r1, r4
 8016a04:	f7fc f976 	bl	8012cf4 <memset>
 8016a08:	e7f4      	b.n	80169f4 <_calloc_r+0x16>

08016a0a <__ssputs_r>:
 8016a0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a0e:	688e      	ldr	r6, [r1, #8]
 8016a10:	429e      	cmp	r6, r3
 8016a12:	4682      	mov	sl, r0
 8016a14:	460c      	mov	r4, r1
 8016a16:	4690      	mov	r8, r2
 8016a18:	461f      	mov	r7, r3
 8016a1a:	d838      	bhi.n	8016a8e <__ssputs_r+0x84>
 8016a1c:	898a      	ldrh	r2, [r1, #12]
 8016a1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a22:	d032      	beq.n	8016a8a <__ssputs_r+0x80>
 8016a24:	6825      	ldr	r5, [r4, #0]
 8016a26:	6909      	ldr	r1, [r1, #16]
 8016a28:	eba5 0901 	sub.w	r9, r5, r1
 8016a2c:	6965      	ldr	r5, [r4, #20]
 8016a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a36:	3301      	adds	r3, #1
 8016a38:	444b      	add	r3, r9
 8016a3a:	106d      	asrs	r5, r5, #1
 8016a3c:	429d      	cmp	r5, r3
 8016a3e:	bf38      	it	cc
 8016a40:	461d      	movcc	r5, r3
 8016a42:	0553      	lsls	r3, r2, #21
 8016a44:	d531      	bpl.n	8016aaa <__ssputs_r+0xa0>
 8016a46:	4629      	mov	r1, r5
 8016a48:	f7fc f9c8 	bl	8012ddc <_malloc_r>
 8016a4c:	4606      	mov	r6, r0
 8016a4e:	b950      	cbnz	r0, 8016a66 <__ssputs_r+0x5c>
 8016a50:	230c      	movs	r3, #12
 8016a52:	f8ca 3000 	str.w	r3, [sl]
 8016a56:	89a3      	ldrh	r3, [r4, #12]
 8016a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a5c:	81a3      	strh	r3, [r4, #12]
 8016a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a66:	6921      	ldr	r1, [r4, #16]
 8016a68:	464a      	mov	r2, r9
 8016a6a:	f7fc f935 	bl	8012cd8 <memcpy>
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a78:	81a3      	strh	r3, [r4, #12]
 8016a7a:	6126      	str	r6, [r4, #16]
 8016a7c:	6165      	str	r5, [r4, #20]
 8016a7e:	444e      	add	r6, r9
 8016a80:	eba5 0509 	sub.w	r5, r5, r9
 8016a84:	6026      	str	r6, [r4, #0]
 8016a86:	60a5      	str	r5, [r4, #8]
 8016a88:	463e      	mov	r6, r7
 8016a8a:	42be      	cmp	r6, r7
 8016a8c:	d900      	bls.n	8016a90 <__ssputs_r+0x86>
 8016a8e:	463e      	mov	r6, r7
 8016a90:	6820      	ldr	r0, [r4, #0]
 8016a92:	4632      	mov	r2, r6
 8016a94:	4641      	mov	r1, r8
 8016a96:	f000 fa0b 	bl	8016eb0 <memmove>
 8016a9a:	68a3      	ldr	r3, [r4, #8]
 8016a9c:	1b9b      	subs	r3, r3, r6
 8016a9e:	60a3      	str	r3, [r4, #8]
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	4433      	add	r3, r6
 8016aa4:	6023      	str	r3, [r4, #0]
 8016aa6:	2000      	movs	r0, #0
 8016aa8:	e7db      	b.n	8016a62 <__ssputs_r+0x58>
 8016aaa:	462a      	mov	r2, r5
 8016aac:	f000 fa1a 	bl	8016ee4 <_realloc_r>
 8016ab0:	4606      	mov	r6, r0
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d1e1      	bne.n	8016a7a <__ssputs_r+0x70>
 8016ab6:	6921      	ldr	r1, [r4, #16]
 8016ab8:	4650      	mov	r0, sl
 8016aba:	f7fc f923 	bl	8012d04 <_free_r>
 8016abe:	e7c7      	b.n	8016a50 <__ssputs_r+0x46>

08016ac0 <_svfiprintf_r>:
 8016ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac4:	4698      	mov	r8, r3
 8016ac6:	898b      	ldrh	r3, [r1, #12]
 8016ac8:	061b      	lsls	r3, r3, #24
 8016aca:	b09d      	sub	sp, #116	; 0x74
 8016acc:	4607      	mov	r7, r0
 8016ace:	460d      	mov	r5, r1
 8016ad0:	4614      	mov	r4, r2
 8016ad2:	d50e      	bpl.n	8016af2 <_svfiprintf_r+0x32>
 8016ad4:	690b      	ldr	r3, [r1, #16]
 8016ad6:	b963      	cbnz	r3, 8016af2 <_svfiprintf_r+0x32>
 8016ad8:	2140      	movs	r1, #64	; 0x40
 8016ada:	f7fc f97f 	bl	8012ddc <_malloc_r>
 8016ade:	6028      	str	r0, [r5, #0]
 8016ae0:	6128      	str	r0, [r5, #16]
 8016ae2:	b920      	cbnz	r0, 8016aee <_svfiprintf_r+0x2e>
 8016ae4:	230c      	movs	r3, #12
 8016ae6:	603b      	str	r3, [r7, #0]
 8016ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8016aec:	e0d1      	b.n	8016c92 <_svfiprintf_r+0x1d2>
 8016aee:	2340      	movs	r3, #64	; 0x40
 8016af0:	616b      	str	r3, [r5, #20]
 8016af2:	2300      	movs	r3, #0
 8016af4:	9309      	str	r3, [sp, #36]	; 0x24
 8016af6:	2320      	movs	r3, #32
 8016af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b00:	2330      	movs	r3, #48	; 0x30
 8016b02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016cac <_svfiprintf_r+0x1ec>
 8016b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b0a:	f04f 0901 	mov.w	r9, #1
 8016b0e:	4623      	mov	r3, r4
 8016b10:	469a      	mov	sl, r3
 8016b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b16:	b10a      	cbz	r2, 8016b1c <_svfiprintf_r+0x5c>
 8016b18:	2a25      	cmp	r2, #37	; 0x25
 8016b1a:	d1f9      	bne.n	8016b10 <_svfiprintf_r+0x50>
 8016b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8016b20:	d00b      	beq.n	8016b3a <_svfiprintf_r+0x7a>
 8016b22:	465b      	mov	r3, fp
 8016b24:	4622      	mov	r2, r4
 8016b26:	4629      	mov	r1, r5
 8016b28:	4638      	mov	r0, r7
 8016b2a:	f7ff ff6e 	bl	8016a0a <__ssputs_r>
 8016b2e:	3001      	adds	r0, #1
 8016b30:	f000 80aa 	beq.w	8016c88 <_svfiprintf_r+0x1c8>
 8016b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b36:	445a      	add	r2, fp
 8016b38:	9209      	str	r2, [sp, #36]	; 0x24
 8016b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	f000 80a2 	beq.w	8016c88 <_svfiprintf_r+0x1c8>
 8016b44:	2300      	movs	r3, #0
 8016b46:	f04f 32ff 	mov.w	r2, #4294967295
 8016b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b4e:	f10a 0a01 	add.w	sl, sl, #1
 8016b52:	9304      	str	r3, [sp, #16]
 8016b54:	9307      	str	r3, [sp, #28]
 8016b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8016b5c:	4654      	mov	r4, sl
 8016b5e:	2205      	movs	r2, #5
 8016b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b64:	4851      	ldr	r0, [pc, #324]	; (8016cac <_svfiprintf_r+0x1ec>)
 8016b66:	f7e9 fb53 	bl	8000210 <memchr>
 8016b6a:	9a04      	ldr	r2, [sp, #16]
 8016b6c:	b9d8      	cbnz	r0, 8016ba6 <_svfiprintf_r+0xe6>
 8016b6e:	06d0      	lsls	r0, r2, #27
 8016b70:	bf44      	itt	mi
 8016b72:	2320      	movmi	r3, #32
 8016b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b78:	0711      	lsls	r1, r2, #28
 8016b7a:	bf44      	itt	mi
 8016b7c:	232b      	movmi	r3, #43	; 0x2b
 8016b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b82:	f89a 3000 	ldrb.w	r3, [sl]
 8016b86:	2b2a      	cmp	r3, #42	; 0x2a
 8016b88:	d015      	beq.n	8016bb6 <_svfiprintf_r+0xf6>
 8016b8a:	9a07      	ldr	r2, [sp, #28]
 8016b8c:	4654      	mov	r4, sl
 8016b8e:	2000      	movs	r0, #0
 8016b90:	f04f 0c0a 	mov.w	ip, #10
 8016b94:	4621      	mov	r1, r4
 8016b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b9a:	3b30      	subs	r3, #48	; 0x30
 8016b9c:	2b09      	cmp	r3, #9
 8016b9e:	d94e      	bls.n	8016c3e <_svfiprintf_r+0x17e>
 8016ba0:	b1b0      	cbz	r0, 8016bd0 <_svfiprintf_r+0x110>
 8016ba2:	9207      	str	r2, [sp, #28]
 8016ba4:	e014      	b.n	8016bd0 <_svfiprintf_r+0x110>
 8016ba6:	eba0 0308 	sub.w	r3, r0, r8
 8016baa:	fa09 f303 	lsl.w	r3, r9, r3
 8016bae:	4313      	orrs	r3, r2
 8016bb0:	9304      	str	r3, [sp, #16]
 8016bb2:	46a2      	mov	sl, r4
 8016bb4:	e7d2      	b.n	8016b5c <_svfiprintf_r+0x9c>
 8016bb6:	9b03      	ldr	r3, [sp, #12]
 8016bb8:	1d19      	adds	r1, r3, #4
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	9103      	str	r1, [sp, #12]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	bfbb      	ittet	lt
 8016bc2:	425b      	neglt	r3, r3
 8016bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8016bc8:	9307      	strge	r3, [sp, #28]
 8016bca:	9307      	strlt	r3, [sp, #28]
 8016bcc:	bfb8      	it	lt
 8016bce:	9204      	strlt	r2, [sp, #16]
 8016bd0:	7823      	ldrb	r3, [r4, #0]
 8016bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8016bd4:	d10c      	bne.n	8016bf0 <_svfiprintf_r+0x130>
 8016bd6:	7863      	ldrb	r3, [r4, #1]
 8016bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8016bda:	d135      	bne.n	8016c48 <_svfiprintf_r+0x188>
 8016bdc:	9b03      	ldr	r3, [sp, #12]
 8016bde:	1d1a      	adds	r2, r3, #4
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	9203      	str	r2, [sp, #12]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	bfb8      	it	lt
 8016be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016bec:	3402      	adds	r4, #2
 8016bee:	9305      	str	r3, [sp, #20]
 8016bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016cbc <_svfiprintf_r+0x1fc>
 8016bf4:	7821      	ldrb	r1, [r4, #0]
 8016bf6:	2203      	movs	r2, #3
 8016bf8:	4650      	mov	r0, sl
 8016bfa:	f7e9 fb09 	bl	8000210 <memchr>
 8016bfe:	b140      	cbz	r0, 8016c12 <_svfiprintf_r+0x152>
 8016c00:	2340      	movs	r3, #64	; 0x40
 8016c02:	eba0 000a 	sub.w	r0, r0, sl
 8016c06:	fa03 f000 	lsl.w	r0, r3, r0
 8016c0a:	9b04      	ldr	r3, [sp, #16]
 8016c0c:	4303      	orrs	r3, r0
 8016c0e:	3401      	adds	r4, #1
 8016c10:	9304      	str	r3, [sp, #16]
 8016c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c16:	4826      	ldr	r0, [pc, #152]	; (8016cb0 <_svfiprintf_r+0x1f0>)
 8016c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c1c:	2206      	movs	r2, #6
 8016c1e:	f7e9 faf7 	bl	8000210 <memchr>
 8016c22:	2800      	cmp	r0, #0
 8016c24:	d038      	beq.n	8016c98 <_svfiprintf_r+0x1d8>
 8016c26:	4b23      	ldr	r3, [pc, #140]	; (8016cb4 <_svfiprintf_r+0x1f4>)
 8016c28:	bb1b      	cbnz	r3, 8016c72 <_svfiprintf_r+0x1b2>
 8016c2a:	9b03      	ldr	r3, [sp, #12]
 8016c2c:	3307      	adds	r3, #7
 8016c2e:	f023 0307 	bic.w	r3, r3, #7
 8016c32:	3308      	adds	r3, #8
 8016c34:	9303      	str	r3, [sp, #12]
 8016c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c38:	4433      	add	r3, r6
 8016c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c3c:	e767      	b.n	8016b0e <_svfiprintf_r+0x4e>
 8016c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c42:	460c      	mov	r4, r1
 8016c44:	2001      	movs	r0, #1
 8016c46:	e7a5      	b.n	8016b94 <_svfiprintf_r+0xd4>
 8016c48:	2300      	movs	r3, #0
 8016c4a:	3401      	adds	r4, #1
 8016c4c:	9305      	str	r3, [sp, #20]
 8016c4e:	4619      	mov	r1, r3
 8016c50:	f04f 0c0a 	mov.w	ip, #10
 8016c54:	4620      	mov	r0, r4
 8016c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c5a:	3a30      	subs	r2, #48	; 0x30
 8016c5c:	2a09      	cmp	r2, #9
 8016c5e:	d903      	bls.n	8016c68 <_svfiprintf_r+0x1a8>
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d0c5      	beq.n	8016bf0 <_svfiprintf_r+0x130>
 8016c64:	9105      	str	r1, [sp, #20]
 8016c66:	e7c3      	b.n	8016bf0 <_svfiprintf_r+0x130>
 8016c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c6c:	4604      	mov	r4, r0
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e7f0      	b.n	8016c54 <_svfiprintf_r+0x194>
 8016c72:	ab03      	add	r3, sp, #12
 8016c74:	9300      	str	r3, [sp, #0]
 8016c76:	462a      	mov	r2, r5
 8016c78:	4b0f      	ldr	r3, [pc, #60]	; (8016cb8 <_svfiprintf_r+0x1f8>)
 8016c7a:	a904      	add	r1, sp, #16
 8016c7c:	4638      	mov	r0, r7
 8016c7e:	f7fc f9c1 	bl	8013004 <_printf_float>
 8016c82:	1c42      	adds	r2, r0, #1
 8016c84:	4606      	mov	r6, r0
 8016c86:	d1d6      	bne.n	8016c36 <_svfiprintf_r+0x176>
 8016c88:	89ab      	ldrh	r3, [r5, #12]
 8016c8a:	065b      	lsls	r3, r3, #25
 8016c8c:	f53f af2c 	bmi.w	8016ae8 <_svfiprintf_r+0x28>
 8016c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c92:	b01d      	add	sp, #116	; 0x74
 8016c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c98:	ab03      	add	r3, sp, #12
 8016c9a:	9300      	str	r3, [sp, #0]
 8016c9c:	462a      	mov	r2, r5
 8016c9e:	4b06      	ldr	r3, [pc, #24]	; (8016cb8 <_svfiprintf_r+0x1f8>)
 8016ca0:	a904      	add	r1, sp, #16
 8016ca2:	4638      	mov	r0, r7
 8016ca4:	f7fc fc52 	bl	801354c <_printf_i>
 8016ca8:	e7eb      	b.n	8016c82 <_svfiprintf_r+0x1c2>
 8016caa:	bf00      	nop
 8016cac:	08025ac4 	.word	0x08025ac4
 8016cb0:	08025ace 	.word	0x08025ace
 8016cb4:	08013005 	.word	0x08013005
 8016cb8:	08016a0b 	.word	0x08016a0b
 8016cbc:	08025aca 	.word	0x08025aca

08016cc0 <nan>:
 8016cc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016cc8 <nan+0x8>
 8016cc4:	4770      	bx	lr
 8016cc6:	bf00      	nop
 8016cc8:	00000000 	.word	0x00000000
 8016ccc:	7ff80000 	.word	0x7ff80000

08016cd0 <nanf>:
 8016cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016cd8 <nanf+0x8>
 8016cd4:	4770      	bx	lr
 8016cd6:	bf00      	nop
 8016cd8:	7fc00000 	.word	0x7fc00000

08016cdc <__sread>:
 8016cdc:	b510      	push	{r4, lr}
 8016cde:	460c      	mov	r4, r1
 8016ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ce4:	f000 fa86 	bl	80171f4 <_read_r>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	bfab      	itete	ge
 8016cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016cee:	89a3      	ldrhlt	r3, [r4, #12]
 8016cf0:	181b      	addge	r3, r3, r0
 8016cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016cf6:	bfac      	ite	ge
 8016cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016cfa:	81a3      	strhlt	r3, [r4, #12]
 8016cfc:	bd10      	pop	{r4, pc}

08016cfe <__swrite>:
 8016cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d02:	461f      	mov	r7, r3
 8016d04:	898b      	ldrh	r3, [r1, #12]
 8016d06:	05db      	lsls	r3, r3, #23
 8016d08:	4605      	mov	r5, r0
 8016d0a:	460c      	mov	r4, r1
 8016d0c:	4616      	mov	r6, r2
 8016d0e:	d505      	bpl.n	8016d1c <__swrite+0x1e>
 8016d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d14:	2302      	movs	r3, #2
 8016d16:	2200      	movs	r2, #0
 8016d18:	f000 f8b8 	bl	8016e8c <_lseek_r>
 8016d1c:	89a3      	ldrh	r3, [r4, #12]
 8016d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d26:	81a3      	strh	r3, [r4, #12]
 8016d28:	4632      	mov	r2, r6
 8016d2a:	463b      	mov	r3, r7
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d32:	f000 b837 	b.w	8016da4 <_write_r>

08016d36 <__sseek>:
 8016d36:	b510      	push	{r4, lr}
 8016d38:	460c      	mov	r4, r1
 8016d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d3e:	f000 f8a5 	bl	8016e8c <_lseek_r>
 8016d42:	1c43      	adds	r3, r0, #1
 8016d44:	89a3      	ldrh	r3, [r4, #12]
 8016d46:	bf15      	itete	ne
 8016d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8016d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d52:	81a3      	strheq	r3, [r4, #12]
 8016d54:	bf18      	it	ne
 8016d56:	81a3      	strhne	r3, [r4, #12]
 8016d58:	bd10      	pop	{r4, pc}

08016d5a <__sclose>:
 8016d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d5e:	f000 b851 	b.w	8016e04 <_close_r>

08016d62 <strncmp>:
 8016d62:	b510      	push	{r4, lr}
 8016d64:	b17a      	cbz	r2, 8016d86 <strncmp+0x24>
 8016d66:	4603      	mov	r3, r0
 8016d68:	3901      	subs	r1, #1
 8016d6a:	1884      	adds	r4, r0, r2
 8016d6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016d70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016d74:	4290      	cmp	r0, r2
 8016d76:	d101      	bne.n	8016d7c <strncmp+0x1a>
 8016d78:	42a3      	cmp	r3, r4
 8016d7a:	d101      	bne.n	8016d80 <strncmp+0x1e>
 8016d7c:	1a80      	subs	r0, r0, r2
 8016d7e:	bd10      	pop	{r4, pc}
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d1f3      	bne.n	8016d6c <strncmp+0xa>
 8016d84:	e7fa      	b.n	8016d7c <strncmp+0x1a>
 8016d86:	4610      	mov	r0, r2
 8016d88:	e7f9      	b.n	8016d7e <strncmp+0x1c>

08016d8a <__ascii_wctomb>:
 8016d8a:	b149      	cbz	r1, 8016da0 <__ascii_wctomb+0x16>
 8016d8c:	2aff      	cmp	r2, #255	; 0xff
 8016d8e:	bf85      	ittet	hi
 8016d90:	238a      	movhi	r3, #138	; 0x8a
 8016d92:	6003      	strhi	r3, [r0, #0]
 8016d94:	700a      	strbls	r2, [r1, #0]
 8016d96:	f04f 30ff 	movhi.w	r0, #4294967295
 8016d9a:	bf98      	it	ls
 8016d9c:	2001      	movls	r0, #1
 8016d9e:	4770      	bx	lr
 8016da0:	4608      	mov	r0, r1
 8016da2:	4770      	bx	lr

08016da4 <_write_r>:
 8016da4:	b538      	push	{r3, r4, r5, lr}
 8016da6:	4d07      	ldr	r5, [pc, #28]	; (8016dc4 <_write_r+0x20>)
 8016da8:	4604      	mov	r4, r0
 8016daa:	4608      	mov	r0, r1
 8016dac:	4611      	mov	r1, r2
 8016dae:	2200      	movs	r2, #0
 8016db0:	602a      	str	r2, [r5, #0]
 8016db2:	461a      	mov	r2, r3
 8016db4:	f7ea fbdb 	bl	800156e <_write>
 8016db8:	1c43      	adds	r3, r0, #1
 8016dba:	d102      	bne.n	8016dc2 <_write_r+0x1e>
 8016dbc:	682b      	ldr	r3, [r5, #0]
 8016dbe:	b103      	cbz	r3, 8016dc2 <_write_r+0x1e>
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	bd38      	pop	{r3, r4, r5, pc}
 8016dc4:	2000d070 	.word	0x2000d070

08016dc8 <__assert_func>:
 8016dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016dca:	4614      	mov	r4, r2
 8016dcc:	461a      	mov	r2, r3
 8016dce:	4b09      	ldr	r3, [pc, #36]	; (8016df4 <__assert_func+0x2c>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	4605      	mov	r5, r0
 8016dd4:	68d8      	ldr	r0, [r3, #12]
 8016dd6:	b14c      	cbz	r4, 8016dec <__assert_func+0x24>
 8016dd8:	4b07      	ldr	r3, [pc, #28]	; (8016df8 <__assert_func+0x30>)
 8016dda:	9100      	str	r1, [sp, #0]
 8016ddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016de0:	4906      	ldr	r1, [pc, #24]	; (8016dfc <__assert_func+0x34>)
 8016de2:	462b      	mov	r3, r5
 8016de4:	f000 f81e 	bl	8016e24 <fiprintf>
 8016de8:	f000 fa16 	bl	8017218 <abort>
 8016dec:	4b04      	ldr	r3, [pc, #16]	; (8016e00 <__assert_func+0x38>)
 8016dee:	461c      	mov	r4, r3
 8016df0:	e7f3      	b.n	8016dda <__assert_func+0x12>
 8016df2:	bf00      	nop
 8016df4:	200000c8 	.word	0x200000c8
 8016df8:	08025ad5 	.word	0x08025ad5
 8016dfc:	08025ae2 	.word	0x08025ae2
 8016e00:	08025b10 	.word	0x08025b10

08016e04 <_close_r>:
 8016e04:	b538      	push	{r3, r4, r5, lr}
 8016e06:	4d06      	ldr	r5, [pc, #24]	; (8016e20 <_close_r+0x1c>)
 8016e08:	2300      	movs	r3, #0
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	4608      	mov	r0, r1
 8016e0e:	602b      	str	r3, [r5, #0]
 8016e10:	f7ea fbc9 	bl	80015a6 <_close>
 8016e14:	1c43      	adds	r3, r0, #1
 8016e16:	d102      	bne.n	8016e1e <_close_r+0x1a>
 8016e18:	682b      	ldr	r3, [r5, #0]
 8016e1a:	b103      	cbz	r3, 8016e1e <_close_r+0x1a>
 8016e1c:	6023      	str	r3, [r4, #0]
 8016e1e:	bd38      	pop	{r3, r4, r5, pc}
 8016e20:	2000d070 	.word	0x2000d070

08016e24 <fiprintf>:
 8016e24:	b40e      	push	{r1, r2, r3}
 8016e26:	b503      	push	{r0, r1, lr}
 8016e28:	4601      	mov	r1, r0
 8016e2a:	ab03      	add	r3, sp, #12
 8016e2c:	4805      	ldr	r0, [pc, #20]	; (8016e44 <fiprintf+0x20>)
 8016e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e32:	6800      	ldr	r0, [r0, #0]
 8016e34:	9301      	str	r3, [sp, #4]
 8016e36:	f000 f8ad 	bl	8016f94 <_vfiprintf_r>
 8016e3a:	b002      	add	sp, #8
 8016e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e40:	b003      	add	sp, #12
 8016e42:	4770      	bx	lr
 8016e44:	200000c8 	.word	0x200000c8

08016e48 <_fstat_r>:
 8016e48:	b538      	push	{r3, r4, r5, lr}
 8016e4a:	4d07      	ldr	r5, [pc, #28]	; (8016e68 <_fstat_r+0x20>)
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	4604      	mov	r4, r0
 8016e50:	4608      	mov	r0, r1
 8016e52:	4611      	mov	r1, r2
 8016e54:	602b      	str	r3, [r5, #0]
 8016e56:	f7ea fbb2 	bl	80015be <_fstat>
 8016e5a:	1c43      	adds	r3, r0, #1
 8016e5c:	d102      	bne.n	8016e64 <_fstat_r+0x1c>
 8016e5e:	682b      	ldr	r3, [r5, #0]
 8016e60:	b103      	cbz	r3, 8016e64 <_fstat_r+0x1c>
 8016e62:	6023      	str	r3, [r4, #0]
 8016e64:	bd38      	pop	{r3, r4, r5, pc}
 8016e66:	bf00      	nop
 8016e68:	2000d070 	.word	0x2000d070

08016e6c <_isatty_r>:
 8016e6c:	b538      	push	{r3, r4, r5, lr}
 8016e6e:	4d06      	ldr	r5, [pc, #24]	; (8016e88 <_isatty_r+0x1c>)
 8016e70:	2300      	movs	r3, #0
 8016e72:	4604      	mov	r4, r0
 8016e74:	4608      	mov	r0, r1
 8016e76:	602b      	str	r3, [r5, #0]
 8016e78:	f7ea fbb1 	bl	80015de <_isatty>
 8016e7c:	1c43      	adds	r3, r0, #1
 8016e7e:	d102      	bne.n	8016e86 <_isatty_r+0x1a>
 8016e80:	682b      	ldr	r3, [r5, #0]
 8016e82:	b103      	cbz	r3, 8016e86 <_isatty_r+0x1a>
 8016e84:	6023      	str	r3, [r4, #0]
 8016e86:	bd38      	pop	{r3, r4, r5, pc}
 8016e88:	2000d070 	.word	0x2000d070

08016e8c <_lseek_r>:
 8016e8c:	b538      	push	{r3, r4, r5, lr}
 8016e8e:	4d07      	ldr	r5, [pc, #28]	; (8016eac <_lseek_r+0x20>)
 8016e90:	4604      	mov	r4, r0
 8016e92:	4608      	mov	r0, r1
 8016e94:	4611      	mov	r1, r2
 8016e96:	2200      	movs	r2, #0
 8016e98:	602a      	str	r2, [r5, #0]
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	f7ea fbaa 	bl	80015f4 <_lseek>
 8016ea0:	1c43      	adds	r3, r0, #1
 8016ea2:	d102      	bne.n	8016eaa <_lseek_r+0x1e>
 8016ea4:	682b      	ldr	r3, [r5, #0]
 8016ea6:	b103      	cbz	r3, 8016eaa <_lseek_r+0x1e>
 8016ea8:	6023      	str	r3, [r4, #0]
 8016eaa:	bd38      	pop	{r3, r4, r5, pc}
 8016eac:	2000d070 	.word	0x2000d070

08016eb0 <memmove>:
 8016eb0:	4288      	cmp	r0, r1
 8016eb2:	b510      	push	{r4, lr}
 8016eb4:	eb01 0402 	add.w	r4, r1, r2
 8016eb8:	d902      	bls.n	8016ec0 <memmove+0x10>
 8016eba:	4284      	cmp	r4, r0
 8016ebc:	4623      	mov	r3, r4
 8016ebe:	d807      	bhi.n	8016ed0 <memmove+0x20>
 8016ec0:	1e43      	subs	r3, r0, #1
 8016ec2:	42a1      	cmp	r1, r4
 8016ec4:	d008      	beq.n	8016ed8 <memmove+0x28>
 8016ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ece:	e7f8      	b.n	8016ec2 <memmove+0x12>
 8016ed0:	4402      	add	r2, r0
 8016ed2:	4601      	mov	r1, r0
 8016ed4:	428a      	cmp	r2, r1
 8016ed6:	d100      	bne.n	8016eda <memmove+0x2a>
 8016ed8:	bd10      	pop	{r4, pc}
 8016eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ee2:	e7f7      	b.n	8016ed4 <memmove+0x24>

08016ee4 <_realloc_r>:
 8016ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ee8:	4680      	mov	r8, r0
 8016eea:	4614      	mov	r4, r2
 8016eec:	460e      	mov	r6, r1
 8016eee:	b921      	cbnz	r1, 8016efa <_realloc_r+0x16>
 8016ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef4:	4611      	mov	r1, r2
 8016ef6:	f7fb bf71 	b.w	8012ddc <_malloc_r>
 8016efa:	b92a      	cbnz	r2, 8016f08 <_realloc_r+0x24>
 8016efc:	f7fb ff02 	bl	8012d04 <_free_r>
 8016f00:	4625      	mov	r5, r4
 8016f02:	4628      	mov	r0, r5
 8016f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f08:	f000 f98d 	bl	8017226 <_malloc_usable_size_r>
 8016f0c:	4284      	cmp	r4, r0
 8016f0e:	4607      	mov	r7, r0
 8016f10:	d802      	bhi.n	8016f18 <_realloc_r+0x34>
 8016f12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016f16:	d812      	bhi.n	8016f3e <_realloc_r+0x5a>
 8016f18:	4621      	mov	r1, r4
 8016f1a:	4640      	mov	r0, r8
 8016f1c:	f7fb ff5e 	bl	8012ddc <_malloc_r>
 8016f20:	4605      	mov	r5, r0
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d0ed      	beq.n	8016f02 <_realloc_r+0x1e>
 8016f26:	42bc      	cmp	r4, r7
 8016f28:	4622      	mov	r2, r4
 8016f2a:	4631      	mov	r1, r6
 8016f2c:	bf28      	it	cs
 8016f2e:	463a      	movcs	r2, r7
 8016f30:	f7fb fed2 	bl	8012cd8 <memcpy>
 8016f34:	4631      	mov	r1, r6
 8016f36:	4640      	mov	r0, r8
 8016f38:	f7fb fee4 	bl	8012d04 <_free_r>
 8016f3c:	e7e1      	b.n	8016f02 <_realloc_r+0x1e>
 8016f3e:	4635      	mov	r5, r6
 8016f40:	e7df      	b.n	8016f02 <_realloc_r+0x1e>

08016f42 <__sfputc_r>:
 8016f42:	6893      	ldr	r3, [r2, #8]
 8016f44:	3b01      	subs	r3, #1
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	b410      	push	{r4}
 8016f4a:	6093      	str	r3, [r2, #8]
 8016f4c:	da08      	bge.n	8016f60 <__sfputc_r+0x1e>
 8016f4e:	6994      	ldr	r4, [r2, #24]
 8016f50:	42a3      	cmp	r3, r4
 8016f52:	db01      	blt.n	8016f58 <__sfputc_r+0x16>
 8016f54:	290a      	cmp	r1, #10
 8016f56:	d103      	bne.n	8016f60 <__sfputc_r+0x1e>
 8016f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f5c:	f7fd bb94 	b.w	8014688 <__swbuf_r>
 8016f60:	6813      	ldr	r3, [r2, #0]
 8016f62:	1c58      	adds	r0, r3, #1
 8016f64:	6010      	str	r0, [r2, #0]
 8016f66:	7019      	strb	r1, [r3, #0]
 8016f68:	4608      	mov	r0, r1
 8016f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f6e:	4770      	bx	lr

08016f70 <__sfputs_r>:
 8016f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f72:	4606      	mov	r6, r0
 8016f74:	460f      	mov	r7, r1
 8016f76:	4614      	mov	r4, r2
 8016f78:	18d5      	adds	r5, r2, r3
 8016f7a:	42ac      	cmp	r4, r5
 8016f7c:	d101      	bne.n	8016f82 <__sfputs_r+0x12>
 8016f7e:	2000      	movs	r0, #0
 8016f80:	e007      	b.n	8016f92 <__sfputs_r+0x22>
 8016f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f86:	463a      	mov	r2, r7
 8016f88:	4630      	mov	r0, r6
 8016f8a:	f7ff ffda 	bl	8016f42 <__sfputc_r>
 8016f8e:	1c43      	adds	r3, r0, #1
 8016f90:	d1f3      	bne.n	8016f7a <__sfputs_r+0xa>
 8016f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016f94 <_vfiprintf_r>:
 8016f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f98:	460d      	mov	r5, r1
 8016f9a:	b09d      	sub	sp, #116	; 0x74
 8016f9c:	4614      	mov	r4, r2
 8016f9e:	4698      	mov	r8, r3
 8016fa0:	4606      	mov	r6, r0
 8016fa2:	b118      	cbz	r0, 8016fac <_vfiprintf_r+0x18>
 8016fa4:	6983      	ldr	r3, [r0, #24]
 8016fa6:	b90b      	cbnz	r3, 8016fac <_vfiprintf_r+0x18>
 8016fa8:	f7fe fbc2 	bl	8015730 <__sinit>
 8016fac:	4b89      	ldr	r3, [pc, #548]	; (80171d4 <_vfiprintf_r+0x240>)
 8016fae:	429d      	cmp	r5, r3
 8016fb0:	d11b      	bne.n	8016fea <_vfiprintf_r+0x56>
 8016fb2:	6875      	ldr	r5, [r6, #4]
 8016fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016fb6:	07d9      	lsls	r1, r3, #31
 8016fb8:	d405      	bmi.n	8016fc6 <_vfiprintf_r+0x32>
 8016fba:	89ab      	ldrh	r3, [r5, #12]
 8016fbc:	059a      	lsls	r2, r3, #22
 8016fbe:	d402      	bmi.n	8016fc6 <_vfiprintf_r+0x32>
 8016fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016fc2:	f7fe ffc6 	bl	8015f52 <__retarget_lock_acquire_recursive>
 8016fc6:	89ab      	ldrh	r3, [r5, #12]
 8016fc8:	071b      	lsls	r3, r3, #28
 8016fca:	d501      	bpl.n	8016fd0 <_vfiprintf_r+0x3c>
 8016fcc:	692b      	ldr	r3, [r5, #16]
 8016fce:	b9eb      	cbnz	r3, 801700c <_vfiprintf_r+0x78>
 8016fd0:	4629      	mov	r1, r5
 8016fd2:	4630      	mov	r0, r6
 8016fd4:	f7fd fbaa 	bl	801472c <__swsetup_r>
 8016fd8:	b1c0      	cbz	r0, 801700c <_vfiprintf_r+0x78>
 8016fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016fdc:	07dc      	lsls	r4, r3, #31
 8016fde:	d50e      	bpl.n	8016ffe <_vfiprintf_r+0x6a>
 8016fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fe4:	b01d      	add	sp, #116	; 0x74
 8016fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fea:	4b7b      	ldr	r3, [pc, #492]	; (80171d8 <_vfiprintf_r+0x244>)
 8016fec:	429d      	cmp	r5, r3
 8016fee:	d101      	bne.n	8016ff4 <_vfiprintf_r+0x60>
 8016ff0:	68b5      	ldr	r5, [r6, #8]
 8016ff2:	e7df      	b.n	8016fb4 <_vfiprintf_r+0x20>
 8016ff4:	4b79      	ldr	r3, [pc, #484]	; (80171dc <_vfiprintf_r+0x248>)
 8016ff6:	429d      	cmp	r5, r3
 8016ff8:	bf08      	it	eq
 8016ffa:	68f5      	ldreq	r5, [r6, #12]
 8016ffc:	e7da      	b.n	8016fb4 <_vfiprintf_r+0x20>
 8016ffe:	89ab      	ldrh	r3, [r5, #12]
 8017000:	0598      	lsls	r0, r3, #22
 8017002:	d4ed      	bmi.n	8016fe0 <_vfiprintf_r+0x4c>
 8017004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017006:	f7fe ffa5 	bl	8015f54 <__retarget_lock_release_recursive>
 801700a:	e7e9      	b.n	8016fe0 <_vfiprintf_r+0x4c>
 801700c:	2300      	movs	r3, #0
 801700e:	9309      	str	r3, [sp, #36]	; 0x24
 8017010:	2320      	movs	r3, #32
 8017012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017016:	f8cd 800c 	str.w	r8, [sp, #12]
 801701a:	2330      	movs	r3, #48	; 0x30
 801701c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80171e0 <_vfiprintf_r+0x24c>
 8017020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017024:	f04f 0901 	mov.w	r9, #1
 8017028:	4623      	mov	r3, r4
 801702a:	469a      	mov	sl, r3
 801702c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017030:	b10a      	cbz	r2, 8017036 <_vfiprintf_r+0xa2>
 8017032:	2a25      	cmp	r2, #37	; 0x25
 8017034:	d1f9      	bne.n	801702a <_vfiprintf_r+0x96>
 8017036:	ebba 0b04 	subs.w	fp, sl, r4
 801703a:	d00b      	beq.n	8017054 <_vfiprintf_r+0xc0>
 801703c:	465b      	mov	r3, fp
 801703e:	4622      	mov	r2, r4
 8017040:	4629      	mov	r1, r5
 8017042:	4630      	mov	r0, r6
 8017044:	f7ff ff94 	bl	8016f70 <__sfputs_r>
 8017048:	3001      	adds	r0, #1
 801704a:	f000 80aa 	beq.w	80171a2 <_vfiprintf_r+0x20e>
 801704e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017050:	445a      	add	r2, fp
 8017052:	9209      	str	r2, [sp, #36]	; 0x24
 8017054:	f89a 3000 	ldrb.w	r3, [sl]
 8017058:	2b00      	cmp	r3, #0
 801705a:	f000 80a2 	beq.w	80171a2 <_vfiprintf_r+0x20e>
 801705e:	2300      	movs	r3, #0
 8017060:	f04f 32ff 	mov.w	r2, #4294967295
 8017064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017068:	f10a 0a01 	add.w	sl, sl, #1
 801706c:	9304      	str	r3, [sp, #16]
 801706e:	9307      	str	r3, [sp, #28]
 8017070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017074:	931a      	str	r3, [sp, #104]	; 0x68
 8017076:	4654      	mov	r4, sl
 8017078:	2205      	movs	r2, #5
 801707a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801707e:	4858      	ldr	r0, [pc, #352]	; (80171e0 <_vfiprintf_r+0x24c>)
 8017080:	f7e9 f8c6 	bl	8000210 <memchr>
 8017084:	9a04      	ldr	r2, [sp, #16]
 8017086:	b9d8      	cbnz	r0, 80170c0 <_vfiprintf_r+0x12c>
 8017088:	06d1      	lsls	r1, r2, #27
 801708a:	bf44      	itt	mi
 801708c:	2320      	movmi	r3, #32
 801708e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017092:	0713      	lsls	r3, r2, #28
 8017094:	bf44      	itt	mi
 8017096:	232b      	movmi	r3, #43	; 0x2b
 8017098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801709c:	f89a 3000 	ldrb.w	r3, [sl]
 80170a0:	2b2a      	cmp	r3, #42	; 0x2a
 80170a2:	d015      	beq.n	80170d0 <_vfiprintf_r+0x13c>
 80170a4:	9a07      	ldr	r2, [sp, #28]
 80170a6:	4654      	mov	r4, sl
 80170a8:	2000      	movs	r0, #0
 80170aa:	f04f 0c0a 	mov.w	ip, #10
 80170ae:	4621      	mov	r1, r4
 80170b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170b4:	3b30      	subs	r3, #48	; 0x30
 80170b6:	2b09      	cmp	r3, #9
 80170b8:	d94e      	bls.n	8017158 <_vfiprintf_r+0x1c4>
 80170ba:	b1b0      	cbz	r0, 80170ea <_vfiprintf_r+0x156>
 80170bc:	9207      	str	r2, [sp, #28]
 80170be:	e014      	b.n	80170ea <_vfiprintf_r+0x156>
 80170c0:	eba0 0308 	sub.w	r3, r0, r8
 80170c4:	fa09 f303 	lsl.w	r3, r9, r3
 80170c8:	4313      	orrs	r3, r2
 80170ca:	9304      	str	r3, [sp, #16]
 80170cc:	46a2      	mov	sl, r4
 80170ce:	e7d2      	b.n	8017076 <_vfiprintf_r+0xe2>
 80170d0:	9b03      	ldr	r3, [sp, #12]
 80170d2:	1d19      	adds	r1, r3, #4
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	9103      	str	r1, [sp, #12]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	bfbb      	ittet	lt
 80170dc:	425b      	neglt	r3, r3
 80170de:	f042 0202 	orrlt.w	r2, r2, #2
 80170e2:	9307      	strge	r3, [sp, #28]
 80170e4:	9307      	strlt	r3, [sp, #28]
 80170e6:	bfb8      	it	lt
 80170e8:	9204      	strlt	r2, [sp, #16]
 80170ea:	7823      	ldrb	r3, [r4, #0]
 80170ec:	2b2e      	cmp	r3, #46	; 0x2e
 80170ee:	d10c      	bne.n	801710a <_vfiprintf_r+0x176>
 80170f0:	7863      	ldrb	r3, [r4, #1]
 80170f2:	2b2a      	cmp	r3, #42	; 0x2a
 80170f4:	d135      	bne.n	8017162 <_vfiprintf_r+0x1ce>
 80170f6:	9b03      	ldr	r3, [sp, #12]
 80170f8:	1d1a      	adds	r2, r3, #4
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	9203      	str	r2, [sp, #12]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	bfb8      	it	lt
 8017102:	f04f 33ff 	movlt.w	r3, #4294967295
 8017106:	3402      	adds	r4, #2
 8017108:	9305      	str	r3, [sp, #20]
 801710a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80171f0 <_vfiprintf_r+0x25c>
 801710e:	7821      	ldrb	r1, [r4, #0]
 8017110:	2203      	movs	r2, #3
 8017112:	4650      	mov	r0, sl
 8017114:	f7e9 f87c 	bl	8000210 <memchr>
 8017118:	b140      	cbz	r0, 801712c <_vfiprintf_r+0x198>
 801711a:	2340      	movs	r3, #64	; 0x40
 801711c:	eba0 000a 	sub.w	r0, r0, sl
 8017120:	fa03 f000 	lsl.w	r0, r3, r0
 8017124:	9b04      	ldr	r3, [sp, #16]
 8017126:	4303      	orrs	r3, r0
 8017128:	3401      	adds	r4, #1
 801712a:	9304      	str	r3, [sp, #16]
 801712c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017130:	482c      	ldr	r0, [pc, #176]	; (80171e4 <_vfiprintf_r+0x250>)
 8017132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017136:	2206      	movs	r2, #6
 8017138:	f7e9 f86a 	bl	8000210 <memchr>
 801713c:	2800      	cmp	r0, #0
 801713e:	d03f      	beq.n	80171c0 <_vfiprintf_r+0x22c>
 8017140:	4b29      	ldr	r3, [pc, #164]	; (80171e8 <_vfiprintf_r+0x254>)
 8017142:	bb1b      	cbnz	r3, 801718c <_vfiprintf_r+0x1f8>
 8017144:	9b03      	ldr	r3, [sp, #12]
 8017146:	3307      	adds	r3, #7
 8017148:	f023 0307 	bic.w	r3, r3, #7
 801714c:	3308      	adds	r3, #8
 801714e:	9303      	str	r3, [sp, #12]
 8017150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017152:	443b      	add	r3, r7
 8017154:	9309      	str	r3, [sp, #36]	; 0x24
 8017156:	e767      	b.n	8017028 <_vfiprintf_r+0x94>
 8017158:	fb0c 3202 	mla	r2, ip, r2, r3
 801715c:	460c      	mov	r4, r1
 801715e:	2001      	movs	r0, #1
 8017160:	e7a5      	b.n	80170ae <_vfiprintf_r+0x11a>
 8017162:	2300      	movs	r3, #0
 8017164:	3401      	adds	r4, #1
 8017166:	9305      	str	r3, [sp, #20]
 8017168:	4619      	mov	r1, r3
 801716a:	f04f 0c0a 	mov.w	ip, #10
 801716e:	4620      	mov	r0, r4
 8017170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017174:	3a30      	subs	r2, #48	; 0x30
 8017176:	2a09      	cmp	r2, #9
 8017178:	d903      	bls.n	8017182 <_vfiprintf_r+0x1ee>
 801717a:	2b00      	cmp	r3, #0
 801717c:	d0c5      	beq.n	801710a <_vfiprintf_r+0x176>
 801717e:	9105      	str	r1, [sp, #20]
 8017180:	e7c3      	b.n	801710a <_vfiprintf_r+0x176>
 8017182:	fb0c 2101 	mla	r1, ip, r1, r2
 8017186:	4604      	mov	r4, r0
 8017188:	2301      	movs	r3, #1
 801718a:	e7f0      	b.n	801716e <_vfiprintf_r+0x1da>
 801718c:	ab03      	add	r3, sp, #12
 801718e:	9300      	str	r3, [sp, #0]
 8017190:	462a      	mov	r2, r5
 8017192:	4b16      	ldr	r3, [pc, #88]	; (80171ec <_vfiprintf_r+0x258>)
 8017194:	a904      	add	r1, sp, #16
 8017196:	4630      	mov	r0, r6
 8017198:	f7fb ff34 	bl	8013004 <_printf_float>
 801719c:	4607      	mov	r7, r0
 801719e:	1c78      	adds	r0, r7, #1
 80171a0:	d1d6      	bne.n	8017150 <_vfiprintf_r+0x1bc>
 80171a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171a4:	07d9      	lsls	r1, r3, #31
 80171a6:	d405      	bmi.n	80171b4 <_vfiprintf_r+0x220>
 80171a8:	89ab      	ldrh	r3, [r5, #12]
 80171aa:	059a      	lsls	r2, r3, #22
 80171ac:	d402      	bmi.n	80171b4 <_vfiprintf_r+0x220>
 80171ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80171b0:	f7fe fed0 	bl	8015f54 <__retarget_lock_release_recursive>
 80171b4:	89ab      	ldrh	r3, [r5, #12]
 80171b6:	065b      	lsls	r3, r3, #25
 80171b8:	f53f af12 	bmi.w	8016fe0 <_vfiprintf_r+0x4c>
 80171bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171be:	e711      	b.n	8016fe4 <_vfiprintf_r+0x50>
 80171c0:	ab03      	add	r3, sp, #12
 80171c2:	9300      	str	r3, [sp, #0]
 80171c4:	462a      	mov	r2, r5
 80171c6:	4b09      	ldr	r3, [pc, #36]	; (80171ec <_vfiprintf_r+0x258>)
 80171c8:	a904      	add	r1, sp, #16
 80171ca:	4630      	mov	r0, r6
 80171cc:	f7fc f9be 	bl	801354c <_printf_i>
 80171d0:	e7e4      	b.n	801719c <_vfiprintf_r+0x208>
 80171d2:	bf00      	nop
 80171d4:	080258ac 	.word	0x080258ac
 80171d8:	080258cc 	.word	0x080258cc
 80171dc:	0802588c 	.word	0x0802588c
 80171e0:	08025ac4 	.word	0x08025ac4
 80171e4:	08025ace 	.word	0x08025ace
 80171e8:	08013005 	.word	0x08013005
 80171ec:	08016f71 	.word	0x08016f71
 80171f0:	08025aca 	.word	0x08025aca

080171f4 <_read_r>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4d07      	ldr	r5, [pc, #28]	; (8017214 <_read_r+0x20>)
 80171f8:	4604      	mov	r4, r0
 80171fa:	4608      	mov	r0, r1
 80171fc:	4611      	mov	r1, r2
 80171fe:	2200      	movs	r2, #0
 8017200:	602a      	str	r2, [r5, #0]
 8017202:	461a      	mov	r2, r3
 8017204:	f7ea f996 	bl	8001534 <_read>
 8017208:	1c43      	adds	r3, r0, #1
 801720a:	d102      	bne.n	8017212 <_read_r+0x1e>
 801720c:	682b      	ldr	r3, [r5, #0]
 801720e:	b103      	cbz	r3, 8017212 <_read_r+0x1e>
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	bd38      	pop	{r3, r4, r5, pc}
 8017214:	2000d070 	.word	0x2000d070

08017218 <abort>:
 8017218:	b508      	push	{r3, lr}
 801721a:	2006      	movs	r0, #6
 801721c:	f000 f834 	bl	8017288 <raise>
 8017220:	2001      	movs	r0, #1
 8017222:	f7ea f97d 	bl	8001520 <_exit>

08017226 <_malloc_usable_size_r>:
 8017226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801722a:	1f18      	subs	r0, r3, #4
 801722c:	2b00      	cmp	r3, #0
 801722e:	bfbc      	itt	lt
 8017230:	580b      	ldrlt	r3, [r1, r0]
 8017232:	18c0      	addlt	r0, r0, r3
 8017234:	4770      	bx	lr

08017236 <_raise_r>:
 8017236:	291f      	cmp	r1, #31
 8017238:	b538      	push	{r3, r4, r5, lr}
 801723a:	4604      	mov	r4, r0
 801723c:	460d      	mov	r5, r1
 801723e:	d904      	bls.n	801724a <_raise_r+0x14>
 8017240:	2316      	movs	r3, #22
 8017242:	6003      	str	r3, [r0, #0]
 8017244:	f04f 30ff 	mov.w	r0, #4294967295
 8017248:	bd38      	pop	{r3, r4, r5, pc}
 801724a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801724c:	b112      	cbz	r2, 8017254 <_raise_r+0x1e>
 801724e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017252:	b94b      	cbnz	r3, 8017268 <_raise_r+0x32>
 8017254:	4620      	mov	r0, r4
 8017256:	f000 f831 	bl	80172bc <_getpid_r>
 801725a:	462a      	mov	r2, r5
 801725c:	4601      	mov	r1, r0
 801725e:	4620      	mov	r0, r4
 8017260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017264:	f000 b818 	b.w	8017298 <_kill_r>
 8017268:	2b01      	cmp	r3, #1
 801726a:	d00a      	beq.n	8017282 <_raise_r+0x4c>
 801726c:	1c59      	adds	r1, r3, #1
 801726e:	d103      	bne.n	8017278 <_raise_r+0x42>
 8017270:	2316      	movs	r3, #22
 8017272:	6003      	str	r3, [r0, #0]
 8017274:	2001      	movs	r0, #1
 8017276:	e7e7      	b.n	8017248 <_raise_r+0x12>
 8017278:	2400      	movs	r4, #0
 801727a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801727e:	4628      	mov	r0, r5
 8017280:	4798      	blx	r3
 8017282:	2000      	movs	r0, #0
 8017284:	e7e0      	b.n	8017248 <_raise_r+0x12>
	...

08017288 <raise>:
 8017288:	4b02      	ldr	r3, [pc, #8]	; (8017294 <raise+0xc>)
 801728a:	4601      	mov	r1, r0
 801728c:	6818      	ldr	r0, [r3, #0]
 801728e:	f7ff bfd2 	b.w	8017236 <_raise_r>
 8017292:	bf00      	nop
 8017294:	200000c8 	.word	0x200000c8

08017298 <_kill_r>:
 8017298:	b538      	push	{r3, r4, r5, lr}
 801729a:	4d07      	ldr	r5, [pc, #28]	; (80172b8 <_kill_r+0x20>)
 801729c:	2300      	movs	r3, #0
 801729e:	4604      	mov	r4, r0
 80172a0:	4608      	mov	r0, r1
 80172a2:	4611      	mov	r1, r2
 80172a4:	602b      	str	r3, [r5, #0]
 80172a6:	f7ea f92b 	bl	8001500 <_kill>
 80172aa:	1c43      	adds	r3, r0, #1
 80172ac:	d102      	bne.n	80172b4 <_kill_r+0x1c>
 80172ae:	682b      	ldr	r3, [r5, #0]
 80172b0:	b103      	cbz	r3, 80172b4 <_kill_r+0x1c>
 80172b2:	6023      	str	r3, [r4, #0]
 80172b4:	bd38      	pop	{r3, r4, r5, pc}
 80172b6:	bf00      	nop
 80172b8:	2000d070 	.word	0x2000d070

080172bc <_getpid_r>:
 80172bc:	f7ea b918 	b.w	80014f0 <_getpid>

080172c0 <_init>:
 80172c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172c2:	bf00      	nop
 80172c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172c6:	bc08      	pop	{r3}
 80172c8:	469e      	mov	lr, r3
 80172ca:	4770      	bx	lr

080172cc <_fini>:
 80172cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ce:	bf00      	nop
 80172d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172d2:	bc08      	pop	{r3}
 80172d4:	469e      	mov	lr, r3
 80172d6:	4770      	bx	lr


Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c8  080027c8  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027d0  080027d0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000028  08002800  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002800  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c737  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002234  00000000  00000000  0002c78f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000670  00000000  00000000  0002e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001793f  00000000  00000000  0002f590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aab6  00000000  00000000  00046ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000838fc  00000000  00000000  00051985  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5281  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000162c  00000000  00000000  000d52fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002740 	.word	0x08002740

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08002740 	.word	0x08002740

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <apInit>:
void lcdMain(void);



void apInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
//  cliOpen(_DEF_UART1, 57600);
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <apMain>:

void apMain(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
  uint32_t pre_time;


  pre_time = millis();
 80004ec:	f000 f846 	bl	800057c <millis>
 80004f0:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 500)
 80004f2:	f000 f843 	bl	800057c <millis>
 80004f6:	4602      	mov	r2, r0
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000500:	d302      	bcc.n	8000508 <apMain+0x22>
    {
      pre_time = millis();
 8000502:	f000 f83b 	bl	800057c <millis>
 8000506:	6078      	str	r0, [r7, #4]
      //ledToggle(_DEF_LED1);
    }

    Ds18b20_ManualConvert();
 8000508:	f000 fab0 	bl	8000a6c <Ds18b20_ManualConvert>

    if(buttonGetPressed(_DEF_BUTTON1))
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f9b3 	bl	8000878 <buttonGetPressed>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d003      	beq.n	8000520 <apMain+0x3a>
    {
    	ledOn(_DEF_LED1);
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fe7f 	bl	800121c <ledOn>
 800051e:	e7e8      	b.n	80004f2 <apMain+0xc>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fe9b 	bl	800125c <ledOff>
    if (millis()-pre_time >= 500)
 8000526:	e7e4      	b.n	80004f2 <apMain+0xc>

08000528 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  HAL_Init();
 800052e:	f001 f98d 	bl	800184c <HAL_Init>
  SystemClock_Config();
 8000532:	f000 f82b 	bl	800058c <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <bspInit+0x50>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <bspInit+0x50>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <bspInit+0x50>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <bspInit+0x50>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <bspInit+0x50>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <bspInit+0x50>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800

0800057c <millis>:
  HAL_Delay(ms);
#endif
}

uint32_t millis(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000580:	f001 f9ca 	bl	8001918 <HAL_GetTick>
 8000584:	4603      	mov	r3, r0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f8c8 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fc49 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f81e 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2103      	movs	r1, #3
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fea3 	bl	8002388 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 f808 	bl	800065c <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000662:	e7fe      	b.n	8000662 <Error_Handler+0x6>

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_MspInit+0x4c>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <HAL_MspInit+0x4c>)
 8000674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_MspInit+0x4c>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_MspInit+0x4c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f001 f8f6 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <SystemInit+0x28>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <SystemInit+0x28>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SystemInit+0x28>)
 800071e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000722:	609a      	str	r2, [r3, #8]
#endif
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800076c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800073a:	e003      	b.n	8000744 <LoopCopyDataInit>

0800073c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800073e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000742:	3104      	adds	r1, #4

08000744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800074c:	d3f6      	bcc.n	800073c <CopyDataInit>
  ldr  r2, =_sbss
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000750:	e002      	b.n	8000758 <LoopFillZerobss>

08000752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000754:	f842 3b04 	str.w	r3, [r2], #4

08000758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800075c:	d3f9      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800075e:	f7ff ffd3 	bl	8000708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000762:	f001 ffc1 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000766:	f001 ffb3 	bl	80026d0 <main>
  bx  lr    
 800076a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800076c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000770:	080027d8 	.word	0x080027d8
  ldr  r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000778:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 800077c:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8000780:	20000074 	.word	0x20000074

08000784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC_IRQHandler>
	...

08000788 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <DWT_Delay_Init+0x58>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <DWT_Delay_Init+0x58>)
 8000792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000796:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <DWT_Delay_Init+0x58>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <DWT_Delay_Init+0x58>)
 800079e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <DWT_Delay_Init+0x5c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <DWT_Delay_Init+0x5c>)
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <DWT_Delay_Init+0x5c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <DWT_Delay_Init+0x5c>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <DWT_Delay_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80007c2:	bf00      	nop
     __ASM volatile ("NOP");
 80007c4:	bf00      	nop
     __ASM volatile ("NOP");
 80007c6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <DWT_Delay_Init+0x5c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80007d0:	2300      	movs	r3, #0
 80007d2:	e000      	b.n	80007d6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80007d4:	2301      	movs	r3, #1
  }
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000edf0 	.word	0xe000edf0
 80007e4:	e0001000 	.word	0xe0001000

080007e8 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  bool ret = true;
 80007ee:	2301      	movs	r3, #1
 80007f0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <buttonInit+0x88>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <buttonInit+0x88>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <buttonInit+0x88>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	e019      	b.n	800085e <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 800082a:	4912      	ldr	r1, [pc, #72]	; (8000874 <buttonInit+0x8c>)
 800082c:	69fa      	ldr	r2, [r7, #28]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	3304      	adds	r3, #4
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <buttonInit+0x8c>)
 8000840:	69fa      	ldr	r2, [r7, #28]
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f974 	bl	8001b40 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	3301      	adds	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	2b00      	cmp	r3, #0
 8000862:	dde2      	ble.n	800082a <buttonInit+0x42>

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
#endif

  return ret;
 8000864:	7efb      	ldrb	r3, [r7, #27]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	20000004 	.word	0x20000004

08000878 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4a35      	ldr	r2, [pc, #212]	; (8000968 <buttonGetPressed+0xf0>)
 8000892:	4413      	add	r3, r2
 8000894:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <buttonGetPressed+0x28>
  {
    return false;
 800089c:	2300      	movs	r3, #0
 800089e:	e05f      	b.n	8000960 <buttonGetPressed+0xe8>
  }

  switch(button->State)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	7adb      	ldrb	r3, [r3, #11]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <buttonGetPressed+0x36>
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d016      	beq.n	80008da <buttonGetPressed+0x62>
 80008ac:	e057      	b.n	800095e <buttonGetPressed+0xe6>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	4619      	mov	r1, r3
 80008ba:	4610      	mov	r0, r2
 80008bc:	f001 fac2 	bl	8001e44 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	7a1b      	ldrb	r3, [r3, #8]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d147      	bne.n	800095c <buttonGetPressed+0xe4>
  		  {
  			  button->State = BUTTON_Pressed;
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	2201      	movs	r2, #1
 80008d0:	72da      	strb	r2, [r3, #11]
  			  button->PinState = GPIO_PIN_SET;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2201      	movs	r2, #1
 80008d6:	725a      	strb	r2, [r3, #9]
  		  }
  		  break;
 80008d8:	e040      	b.n	800095c <buttonGetPressed+0xe4>

  	  case BUTTON_Pressed:
		  if(button->PinState != button->LastPinState)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	7a5a      	ldrb	r2, [r3, #9]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	7a9b      	ldrb	r3, [r3, #10]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d004      	beq.n	80008f0 <buttonGetPressed+0x78>
		  {
			  button->lastDebounceTime = millis();
 80008e6:	f7ff fe49 	bl	800057c <millis>
 80008ea:	4602      	mov	r2, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60da      	str	r2, [r3, #12]
		  }
		  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80008f0:	f7ff fe44 	bl	800057c <millis>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	1ad2      	subs	r2, r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d926      	bls.n	8000952 <buttonGetPressed+0xda>
		  {
			  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	4610      	mov	r0, r2
 8000912:	f001 fa97 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	7a1b      	ldrb	r3, [r3, #8]
 800091e:	429a      	cmp	r2, r3
 8000920:	d10a      	bne.n	8000938 <buttonGetPressed+0xc0>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2201      	movs	r2, #1
 8000926:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	7a5b      	ldrb	r3, [r3, #9]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e00c      	b.n	8000952 <buttonGetPressed+0xda>
	  		  }
			  else
			  {
				  button->State = BUTTON_IDLE;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2200      	movs	r2, #0
 800093c:	72da      	strb	r2, [r3, #11]
				  button->PinState = GPIO_PIN_RESET;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2200      	movs	r2, #0
 8000942:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	7a5b      	ldrb	r3, [r3, #9]
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
			  }
		  }
		  button->LastPinState = button->PinState;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	7a5a      	ldrb	r2, [r3, #9]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	729a      	strb	r2, [r3, #10]
		  break;
 800095a:	e000      	b.n	800095e <buttonGetPressed+0xe6>
  		  break;
 800095c:	bf00      	nop
  }
  return ret;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000004 	.word	0x20000004

0800096c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8000972:	2305      	movs	r3, #5
 8000974:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8000976:	2201      	movs	r2, #1
 8000978:	4937      	ldr	r1, [pc, #220]	; (8000a58 <Ds18b20_Init+0xec>)
 800097a:	4838      	ldr	r0, [pc, #224]	; (8000a5c <Ds18b20_Init+0xf0>)
 800097c:	f000 fd01 	bl	8001382 <OneWire_Init>
		TempSensorCount = 0;
 8000980:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <Ds18b20_Init+0xf4>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8000986:	e002      	b.n	800098e <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f000 ffd1 	bl	8001930 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800098e:	f000 ffc3 	bl	8001918 <HAL_GetTick>
 8000992:	4602      	mov	r2, r0
 8000994:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000998:	429a      	cmp	r2, r3
 800099a:	d9f5      	bls.n	8000988 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800099c:	482f      	ldr	r0, [pc, #188]	; (8000a5c <Ds18b20_Init+0xf0>)
 800099e:	f000 fddd 	bl	800155c <OneWire_First>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <Ds18b20_Init+0xf8>)
 80009a8:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80009aa:	e019      	b.n	80009e0 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f000 ffbf 	bl	8001930 <HAL_Delay>
			TempSensorCount++;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <Ds18b20_Init+0xf4>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <Ds18b20_Init+0xf4>)
 80009bc:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <Ds18b20_Init+0xf4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <Ds18b20_Init+0xfc>)
 80009c8:	4413      	add	r3, r2
 80009ca:	4619      	mov	r1, r3
 80009cc:	4823      	ldr	r0, [pc, #140]	; (8000a5c <Ds18b20_Init+0xf0>)
 80009ce:	f000 fed9 	bl	8001784 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <Ds18b20_Init+0xf0>)
 80009d4:	f000 fdd2 	bl	800157c <OneWire_Next>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <Ds18b20_Init+0xf8>)
 80009de:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <Ds18b20_Init+0xf8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e1      	bne.n	80009ac <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <Ds18b20_Init+0xf4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d106      	bne.n	80009fe <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1bc      	bne.n	8000976 <Ds18b20_Init+0xa>
 80009fc:	e000      	b.n	8000a00 <Ds18b20_Init+0x94>
			break;
 80009fe:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <Ds18b20_Init+0x9e>
		return false;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e022      	b.n	8000a50 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	e019      	b.n	8000a44 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f000 ff8d 	bl	8001930 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <Ds18b20_Init+0xfc>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	220c      	movs	r2, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <Ds18b20_Init+0xf0>)
 8000a24:	f000 f9a8 	bl	8000d78 <DS18B20_SetResolution>
		HAL_Delay(50);
 8000a28:	2032      	movs	r0, #50	; 0x32
 8000a2a:	f000 ff81 	bl	8001930 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <Ds18b20_Init+0xfc>)
 8000a34:	4413      	add	r3, r2
 8000a36:	4619      	mov	r1, r3
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <Ds18b20_Init+0xf0>)
 8000a3a:	f000 fa36 	bl	8000eaa <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	3301      	adds	r3, #1
 8000a42:	71bb      	strb	r3, [r7, #6]
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <Ds18b20_Init+0xf4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d3e0      	bcc.n	8000a10 <Ds18b20_Init+0xa4>
	}
	return true;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	2000005c 	.word	0x2000005c
 8000a60:	20000044 	.word	0x20000044
 8000a64:	20000048 	.word	0x20000048
 8000a68:	2000004c 	.word	0x2000004c

08000a6c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool	Ds18b20_ManualConvert(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <Ds18b20_ManualConvert+0xd4>)
 8000a74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a78:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000a7a:	4832      	ldr	r0, [pc, #200]	; (8000b44 <Ds18b20_ManualConvert+0xd8>)
 8000a7c:	f000 f868 	bl	8000b50 <DS18B20_StartAll>
	HAL_Delay(100);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f000 ff55 	bl	8001930 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8000a86:	e00c      	b.n	8000aa2 <Ds18b20_ManualConvert+0x36>
	{
		HAL_Delay(10);
 8000a88:	200a      	movs	r0, #10
 8000a8a:	f000 ff51 	bl	8001930 <HAL_Delay>
		Ds18b20Timeout-=1;
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <Ds18b20_ManualConvert+0xd4>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <Ds18b20_ManualConvert+0xd4>)
 8000a98:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <Ds18b20_ManualConvert+0xd4>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <Ds18b20_ManualConvert+0x44>
	while (!DS18B20_AllDone(&OneWire))
 8000aa2:	4828      	ldr	r0, [pc, #160]	; (8000b44 <Ds18b20_ManualConvert+0xd8>)
 8000aa4:	f000 fa5c 	bl	8000f60 <DS18B20_AllDone>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0ec      	beq.n	8000a88 <Ds18b20_ManualConvert+0x1c>
 8000aae:	e000      	b.n	8000ab2 <Ds18b20_ManualConvert+0x46>
			break;
 8000ab0:	bf00      	nop
	}
	if(Ds18b20Timeout>0)
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <Ds18b20_ManualConvert+0xd4>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d024      	beq.n	8000b04 <Ds18b20_ManualConvert+0x98>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e01b      	b.n	8000af8 <Ds18b20_ManualConvert+0x8c>
		{
			HAL_Delay(100);
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f000 ff35 	bl	8001930 <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <Ds18b20_ManualConvert+0xdc>)
 8000acc:	1899      	adds	r1, r3, r2
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <Ds18b20_ManualConvert+0xdc>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	79fc      	ldrb	r4, [r7, #7]
 8000ada:	461a      	mov	r2, r3
 8000adc:	4819      	ldr	r0, [pc, #100]	; (8000b44 <Ds18b20_ManualConvert+0xd8>)
 8000ade:	f000 f84b 	bl	8000b78 <DS18B20_Read>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <Ds18b20_ManualConvert+0xdc>)
 8000ae8:	0123      	lsls	r3, r4, #4
 8000aea:	4413      	add	r3, r2
 8000aec:	330c      	adds	r3, #12
 8000aee:	460a      	mov	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	3301      	adds	r3, #1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <Ds18b20_ManualConvert+0xe0>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3de      	bcc.n	8000ac0 <Ds18b20_ManualConvert+0x54>
 8000b02:	e011      	b.n	8000b28 <Ds18b20_ManualConvert+0xbc>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	71bb      	strb	r3, [r7, #6]
 8000b08:	e009      	b.n	8000b1e <Ds18b20_ManualConvert+0xb2>
			ds18b20[i].DataIsValid = false;
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <Ds18b20_ManualConvert+0xdc>)
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	4413      	add	r3, r2
 8000b12:	330c      	adds	r3, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <Ds18b20_ManualConvert+0xe0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	79ba      	ldrb	r2, [r7, #6]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d3f0      	bcc.n	8000b0a <Ds18b20_ManualConvert+0x9e>
	}
	if(Ds18b20Timeout==0)
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <Ds18b20_ManualConvert+0xd4>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <Ds18b20_ManualConvert+0xc8>
		return false;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e000      	b.n	8000b36 <Ds18b20_ManualConvert+0xca>
	else
		return true;
 8000b34:	2301      	movs	r3, #1
	#endif
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000046 	.word	0x20000046
 8000b44:	2000005c 	.word	0x2000005c
 8000b48:	2000004c 	.word	0x2000004c
 8000b4c:	20000044 	.word	0x20000044

08000b50 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fc3b 	bl	80013d4 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000b5e:	21cc      	movs	r1, #204	; 0xcc
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fcbd 	bl	80014e0 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000b66:	2144      	movs	r1, #68	; 0x44
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 fcb9 	bl	80014e0 <OneWire_WriteByte>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	; 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000b8e:	68b8      	ldr	r0, [r7, #8]
 8000b90:	f000 f97a 	bl	8000e88 <DS18B20_Is>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <DS18B20_Read+0x26>
		return false;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e0e1      	b.n	8000d62 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 fc74 	bl	800148c <OneWire_ReadBit>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e0d9      	b.n	8000d62 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 fc10 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f000 fdc6 	bl	8001748 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000bbc:	21be      	movs	r1, #190	; 0xbe
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f000 fc8e 	bl	80014e0 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	77fb      	strb	r3, [r7, #31]
 8000bc8:	e00d      	b.n	8000be6 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8000bca:	7ffc      	ldrb	r4, [r7, #31]
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f000 fca4 	bl	800151a <OneWire_ReadByte>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	4423      	add	r3, r4
 8000bdc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8000be0:	7ffb      	ldrb	r3, [r7, #31]
 8000be2:	3301      	adds	r3, #1
 8000be4:	77fb      	strb	r3, [r7, #31]
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d9ee      	bls.n	8000bca <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fde2 	bl	80017bc <OneWire_CRC8>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8000bfc:	7f3b      	ldrb	r3, [r7, #28]
 8000bfe:	7fba      	ldrb	r2, [r7, #30]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d001      	beq.n	8000c08 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	e0ac      	b.n	8000d62 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8000c08:	7d3b      	ldrb	r3, [r7, #20]
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	7d7b      	ldrb	r3, [r7, #21]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 fbdb 	bl	80013d4 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8000c1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	da05      	bge.n	8000c32 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8000c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c28:	425b      	negs	r3, r3
 8000c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8000c32:	7e3b      	ldrb	r3, [r7, #24]
 8000c34:	115b      	asrs	r3, r3, #5
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3309      	adds	r3, #9
 8000c40:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8000c42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000c5a:	b25a      	sxtb	r2, r3
 8000c5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c60:	4313      	orrs	r3, r2
 8000c62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8000c66:	7f7b      	ldrb	r3, [r7, #29]
 8000c68:	3b09      	subs	r3, #9
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d858      	bhi.n	8000d20 <DS18B20_Read+0x1a8>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <DS18B20_Read+0xfc>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000cad 	.word	0x08000cad
 8000c7c:	08000cd5 	.word	0x08000cd5
 8000c80:	08000cfd 	.word	0x08000cfd
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8000c84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c96:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000c9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca6:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8000caa:	e03e      	b.n	8000d2a <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8000cac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbe:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000cc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cc6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cce:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8000cd2:	e02a      	b.n	8000d2a <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8000cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8000cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cee:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf6:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8000cfa:	e016      	b.n	8000d2a <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8000cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8000d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d12:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000d6c <DS18B20_Read+0x1f4>
 8000d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1a:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8000d1e:	e004      	b.n	8000d2a <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <DS18B20_Read+0x1f8>)
 8000d22:	623b      	str	r3, [r7, #32]
			digit = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8000d2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d36:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3e:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8000d42:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8000d4a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000d74 <DS18B20_Read+0x1fc>
 8000d4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d56:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a3a      	ldr	r2, [r7, #32]
 8000d5e:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	372c      	adds	r7, #44	; 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	3d800000 	.word	0x3d800000
 8000d70:	437f0000 	.word	0x437f0000
 8000d74:	00000000 	.word	0x00000000

08000d78 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8000d86:	68b8      	ldr	r0, [r7, #8]
 8000d88:	f000 f87e 	bl	8000e88 <DS18B20_Is>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <DS18B20_SetResolution+0x1e>
		return 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e074      	b.n	8000e80 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 fb1c 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 fcd2 	bl	8001748 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000da4:	21be      	movs	r1, #190	; 0xbe
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 fb9a 	bl	80014e0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 fbb4 	bl	800151a <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 fbb1 	bl	800151a <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 fbae 	bl	800151a <OneWire_ReadByte>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 fba9 	bl	800151a <OneWire_ReadByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 fba4 	bl	800151a <OneWire_ReadByte>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b09      	cmp	r3, #9
 8000dda:	d108      	bne.n	8000dee <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000de2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	f023 0320 	bic.w	r3, r3, #32
 8000dea:	75fb      	strb	r3, [r7, #23]
 8000dec:	e022      	b.n	8000e34 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b0a      	cmp	r3, #10
 8000df2:	d108      	bne.n	8000e06 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dfa:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	75fb      	strb	r3, [r7, #23]
 8000e04:	e016      	b.n	8000e34 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b0b      	cmp	r3, #11
 8000e0a:	d108      	bne.n	8000e1e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e12:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	f023 0320 	bic.w	r3, r3, #32
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	e00a      	b.n	8000e34 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d107      	bne.n	8000e34 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	f043 0320 	orr.w	r3, r3, #32
 8000e32:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 facd 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f000 fc83 	bl	8001748 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000e42:	214e      	movs	r1, #78	; 0x4e
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f000 fb4b 	bl	80014e0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 fb46 	bl	80014e0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	4619      	mov	r1, r3
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 fb41 	bl	80014e0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	4619      	mov	r1, r3
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 fb3c 	bl	80014e0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f000 fab3 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f000 fc69 	bl	8001748 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000e76:	2148      	movs	r1, #72	; 0x48
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 fb31 	bl	80014e0 <OneWire_WriteByte>

	return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b28      	cmp	r3, #40	; 0x28
 8000e96:	d101      	bne.n	8000e9c <DS18B20_Is+0x14>
		return 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <DS18B20_Is+0x16>

	return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f7ff ffe7 	bl	8000e88 <DS18B20_Is>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e049      	b.n	8000f58 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fa85 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 fc3b 	bl	8001748 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000ed2:	21be      	movs	r1, #190	; 0xbe
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fb03 	bl	80014e0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fb1d 	bl	800151a <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fb1a 	bl	800151a <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fb17 	bl	800151a <OneWire_ReadByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fb12 	bl	800151a <OneWire_ReadByte>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fb0d 	bl	800151a <OneWire_ReadByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	737b      	strb	r3, [r7, #13]

	th = 125;
 8000f04:	237d      	movs	r3, #125	; 0x7d
 8000f06:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000f08:	23c9      	movs	r3, #201	; 0xc9
 8000f0a:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 fa61 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fc17 	bl	8001748 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000f1a:	214e      	movs	r1, #78	; 0x4e
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 fadf 	bl	80014e0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fada 	bl	80014e0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 fad5 	bl	80014e0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000f36:	7b7b      	ldrb	r3, [r7, #13]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fad0 	bl	80014e0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fa47 	bl	80013d4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fbfd 	bl	8001748 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000f4e:	2148      	movs	r1, #72	; 0x48
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fac5 	bl	80014e0 <OneWire_WriteByte>

	return 1;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fa8f 	bl	800148c <OneWire_ReadBit>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <gpioInit>:
#endif



bool gpioInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  bool ret = true;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <gpioInit+0x98>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a21      	ldr	r2, [pc, #132]	; (8001010 <gpioInit+0x98>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <gpioInit+0x98>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <gpioInit+0x98>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <gpioInit+0x98>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <gpioInit+0x98>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e01e      	b.n	8000ffe <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	b2d8      	uxtb	r0, r3
 8000fc4:	4913      	ldr	r1, [pc, #76]	; (8001014 <gpioInit+0x9c>)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f000 f81e 	bl	8001018 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b2d8      	uxtb	r0, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <gpioInit+0x9c>)
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	330b      	adds	r3, #11
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f000 f878 	bl	80010e8 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b07      	cmp	r3, #7
 8001002:	dddd      	ble.n	8000fc0 <gpioInit+0x48>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
#endif

  return ret;
 8001004:	7afb      	ldrb	r3, [r7, #11]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	08002768 	.word	0x08002768

08001018 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8001028:	2301      	movs	r3, #1
 800102a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d901      	bls.n	8001046 <gpioPinMode+0x2e>
  {
    return false;
 8001042:	2300      	movs	r3, #0
 8001044:	e049      	b.n	80010da <gpioPinMode+0xc2>
  }

  switch(mode)
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d82d      	bhi.n	80010a8 <gpioPinMode+0x90>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <gpioPinMode+0x3c>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001077 	.word	0x08001077
 800105c:	08001081 	.word	0x08001081
 8001060:	0800108b 	.word	0x0800108b
 8001064:	08001095 	.word	0x08001095
 8001068:	0800109f 	.word	0x0800109f
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
      break;
 8001074:	e018      	b.n	80010a8 <gpioPinMode+0x90>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
      break;
 800107e:	e013      	b.n	80010a8 <gpioPinMode+0x90>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
      break;
 8001088:	e00e      	b.n	80010a8 <gpioPinMode+0x90>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
      break;
 8001092:	e009      	b.n	80010a8 <gpioPinMode+0x90>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
      break;
 800109c:	e004      	b.n	80010a8 <gpioPinMode+0x90>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010a2:	2302      	movs	r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
      break;
 80010a6:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80010a8:	79fa      	ldrb	r2, [r7, #7]
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <gpioPinMode+0xcc>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4909      	ldr	r1, [pc, #36]	; (80010e4 <gpioPinMode+0xcc>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f107 0208 	add.w	r2, r7, #8
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd34 	bl	8001b40 <HAL_GPIO_Init>

  return ret;
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	08002768 	.word	0x08002768

080010e8 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b07      	cmp	r3, #7
 80010fc:	d842      	bhi.n	8001184 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01f      	beq.n	8001144 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	4921      	ldr	r1, [pc, #132]	; (800118c <gpioPinWrite+0xa4>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	491d      	ldr	r1, [pc, #116]	; (800118c <gpioPinWrite+0xa4>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3304      	adds	r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29c      	uxth	r4, r3
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	4918      	ldr	r1, [pc, #96]	; (800118c <gpioPinWrite+0xa4>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	3309      	adds	r3, #9
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f000 fe99 	bl	8001e74 <HAL_GPIO_WritePin>
 8001142:	e020      	b.n	8001186 <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	4911      	ldr	r1, [pc, #68]	; (800118c <gpioPinWrite+0xa4>)
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <gpioPinWrite+0xa4>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29c      	uxth	r4, r3
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <gpioPinWrite+0xa4>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	330a      	adds	r3, #10
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4621      	mov	r1, r4
 800117e:	f000 fe79 	bl	8001e74 <HAL_GPIO_WritePin>
 8001182:	e000      	b.n	8001186 <gpioPinWrite+0x9e>
    return;
 8001184:	bf00      	nop
  }
}
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	08002768 	.word	0x08002768

08001190 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
  bool ret = true;
 8001196:	2301      	movs	r3, #1
 8001198:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <ledInit+0x84>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <ledInit+0x84>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <ledInit+0x84>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	e016      	b.n	8001204 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <ledInit+0x88>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80011e2:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <ledInit+0x88>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011ea:	1d3a      	adds	r2, r7, #4
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fca6 	bl	8001b40 <HAL_GPIO_Init>

    ledOff(i);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f82f 	bl	800125c <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	dde5      	ble.n	80011d6 <ledInit+0x46>

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
#endif

  return ret;
 800120a:	7efb      	ldrb	r3, [r7, #27]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	20000018 	.word	0x20000018

0800121c <ledOn>:

void ledOn(uint8_t ch)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d111      	bne.n	8001250 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <ledOn+0x3c>)
 8001230:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <ledOn+0x3c>)
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	8899      	ldrh	r1, [r3, #4]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4a05      	ldr	r2, [pc, #20]	; (8001258 <ledOn+0x3c>)
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	799b      	ldrb	r3, [r3, #6]
 8001248:	461a      	mov	r2, r3
 800124a:	f000 fe13 	bl	8001e74 <HAL_GPIO_WritePin>
 800124e:	e000      	b.n	8001252 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8001250:	bf00      	nop
}
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000018 	.word	0x20000018

0800125c <ledOff>:

void ledOff(uint8_t ch)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <ledOff+0x3c>)
 8001270:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <ledOff+0x3c>)
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	8899      	ldrh	r1, [r3, #4]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <ledOff+0x3c>)
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	79db      	ldrb	r3, [r3, #7]
 8001288:	461a      	mov	r2, r3
 800128a:	f000 fdf3 	bl	8001e74 <HAL_GPIO_WritePin>
 800128e:	e000      	b.n	8001292 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8001290:	bf00      	nop
}
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000018 	.word	0x20000018

0800129c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <DWT_Delay_us+0x3c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80012aa:	f001 fa05 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <DWT_Delay_us+0x40>)
 80012b2:	fba3 2302 	umull	r2, r3, r3, r2
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80012c0:	bf00      	nop
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <DWT_Delay_us+0x3c>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad2      	subs	r2, r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3f8      	bcc.n	80012c2 <DWT_Delay_us+0x26>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	e0001000 	.word	0xe0001000
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	619a      	str	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	889a      	ldrh	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b088      	sub	sp, #32
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f107 020c 	add.w	r2, r7, #12
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fbfc 	bl	8001b40 <HAL_GPIO_Init>
}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001358:	2311      	movs	r3, #17
 800135a:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	889b      	ldrh	r3, [r3, #4]
 8001368:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fbe3 	bl	8001b40 <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff ffd7 	bl	8001350 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ffac 	bl	8001300 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ac:	f7ff ff76 	bl	800129c <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ff95 	bl	80012e0 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 80013b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ba:	f7ff ff6f 	bl	800129c <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff ff9e 	bl	8001300 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 80013c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c8:	f7ff ff68 	bl	800129c <DWT_Delay_us>
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff7f 	bl	80012e0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb4 	bl	8001350 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 80013e8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80013ec:	f7ff ff56 	bl	800129c <DWT_Delay_us>
	DWT_Delay_us(20);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f7ff ff53 	bl	800129c <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff91 	bl	800131e <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 80013fc:	2046      	movs	r0, #70	; 0x46
 80013fe:	f7ff ff4d 	bl	800129c <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	4619      	mov	r1, r3
 800140c:	4610      	mov	r0, r2
 800140e:	f000 fd19 	bl	8001e44 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8001416:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800141a:	f7ff ff3f 	bl	800129c <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d012      	beq.n	8001460 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff50 	bl	80012e0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff85 	bl	8001350 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f7ff ff28 	bl	800129c <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff66 	bl	800131e <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8001452:	2037      	movs	r0, #55	; 0x37
 8001454:	f7ff ff22 	bl	800129c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff60 	bl	800131e <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 800145e:	e011      	b.n	8001484 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff3d 	bl	80012e0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff72 	bl	8001350 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 800146c:	2041      	movs	r0, #65	; 0x41
 800146e:	f7ff ff15 	bl	800129c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff53 	bl	800131e <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8001478:	2005      	movs	r0, #5
 800147a:	f7ff ff0f 	bl	800129c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4d 	bl	800131e <ONEWIRE_INPUT>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff21 	bl	80012e0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff56 	bl	8001350 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff fef9 	bl	800129c <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff37 	bl	800131e <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f7ff fef3 	bl	800129c <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f000 fcbf 	bl	8001e44 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 80014d0:	2032      	movs	r0, #50	; 0x32
 80014d2:	f7ff fee3 	bl	800129c <DWT_Delay_us>

	/* Return bit value */
	return bit;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80014ec:	2308      	movs	r3, #8
 80014ee:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80014f0:	e00a      	b.n	8001508 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff93 	bl	8001428 <OneWire_WriteBit>
		byte >>= 1;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	1e5a      	subs	r2, r3, #1
 800150c:	73fa      	strb	r2, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ef      	bne.n	80014f2 <OneWire_WriteByte+0x12>
	}
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001522:	2308      	movs	r3, #8
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800152a:	e00d      	b.n	8001548 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffaa 	bl	800148c <OneWire_ReadBit>
 8001538:	4603      	mov	r3, r0
 800153a:	01db      	lsls	r3, r3, #7
 800153c:	b25a      	sxtb	r2, r3
 800153e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001542:	4313      	orrs	r3, r2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	73fa      	strb	r2, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ec      	bne.n	800152c <OneWire_ReadByte+0x12>
	}

	return byte;
 8001552:	7bbb      	ldrb	r3, [r7, #14]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f816 	bl	8001596 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800156a:	21f0      	movs	r1, #240	; 0xf0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f825 	bl	80015bc <OneWire_Search>
 8001572:	4603      	mov	r3, r0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8001584:	21f0      	movs	r1, #240	; 0xf0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f818 	bl	80015bc <OneWire_Search>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	71da      	strb	r2, [r3, #7]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7a1b      	ldrb	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 809a 	bne.w	800171a <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fef4 	bl	80013d4 <OneWire_Reset>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00a      	beq.n	8001608 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	71da      	strb	r2, [r3, #7]
			return 0;
 8001604:	2300      	movs	r3, #0
 8001606:	e09b      	b.n	8001740 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff67 	bl	80014e0 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff3a 	bl	800148c <OneWire_ReadBit>
 8001618:	4603      	mov	r3, r0
 800161a:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff35 	bl	800148c <OneWire_ReadBit>
 8001622:	4603      	mov	r3, r0
 8001624:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001626:	7a7b      	ldrb	r3, [r7, #9]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <OneWire_Search+0x76>
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d064      	beq.n	80016fc <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8001632:	7a7a      	ldrb	r2, [r7, #9]
 8001634:	7a3b      	ldrb	r3, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d002      	beq.n	8001640 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 800163a:	7a7b      	ldrb	r3, [r7, #9]
 800163c:	72bb      	strb	r3, [r7, #10]
 800163e:	e026      	b.n	800168e <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	799b      	ldrb	r3, [r3, #6]
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	429a      	cmp	r2, r3
 8001648:	d20d      	bcs.n	8001666 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	7a5a      	ldrb	r2, [r3, #9]
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	4013      	ands	r3, r2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf14      	ite	ne
 800165c:	2301      	movne	r3, #1
 800165e:	2300      	moveq	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	72bb      	strb	r3, [r7, #10]
 8001664:	e008      	b.n	8001678 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	799b      	ldrb	r3, [r3, #6]
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	429a      	cmp	r2, r3
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8001678:	7abb      	ldrb	r3, [r7, #10]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d107      	bne.n	800168e <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	2b08      	cmp	r3, #8
 8001686:	d802      	bhi.n	800168e <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7bba      	ldrb	r2, [r7, #14]
 800168c:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800168e:	7abb      	ldrb	r3, [r7, #10]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10c      	bne.n	80016ae <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8001694:	7b7b      	ldrb	r3, [r7, #13]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	7a59      	ldrb	r1, [r3, #9]
 800169c:	7b7b      	ldrb	r3, [r7, #13]
 800169e:	7afa      	ldrb	r2, [r7, #11]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	b2d1      	uxtb	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	460a      	mov	r2, r1
 80016aa:	725a      	strb	r2, [r3, #9]
 80016ac:	e010      	b.n	80016d0 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80016ae:	7b7b      	ldrb	r3, [r7, #13]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	7a5b      	ldrb	r3, [r3, #9]
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016bc:	43db      	mvns	r3, r3
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	7b7b      	ldrb	r3, [r7, #13]
 80016c6:	b2d1      	uxtb	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	460a      	mov	r2, r1
 80016ce:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80016d0:	7abb      	ldrb	r3, [r7, #10]
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fea7 	bl	8001428 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3301      	adds	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d104      	bne.n	80016f6 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	3301      	adds	r3, #1
 80016f0:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	2b07      	cmp	r3, #7
 80016fa:	d98a      	bls.n	8001612 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b40      	cmp	r3, #64	; 0x40
 8001700:	d90b      	bls.n	800171a <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7bba      	ldrb	r2, [r7, #14]
 8001706:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	799b      	ldrb	r3, [r3, #6]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <OneWire_Search+0x16c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7a5b      	ldrb	r3, [r3, #9]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10a      	bne.n	800173e <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800173e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001752:	2155      	movs	r1, #85	; 0x55
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fec3 	bl	80014e0 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e00a      	b.n	8001776 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff feb8 	bl	80014e0 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b07      	cmp	r3, #7
 800177a:	d9f1      	bls.n	8001760 <OneWire_SelectWithPointer+0x18>
	}
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e00a      	b.n	80017aa <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	6839      	ldr	r1, [r7, #0]
 800179a:	440b      	add	r3, r1
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	440a      	add	r2, r1
 80017a0:	7a52      	ldrb	r2, [r2, #9]
 80017a2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	3301      	adds	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b07      	cmp	r3, #7
 80017ae:	d9f1      	bls.n	8001794 <OneWire_GetFullROM+0x10>
	}
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 80017cc:	e022      	b.n	8001814 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017d8:	2308      	movs	r3, #8
 80017da:	737b      	strb	r3, [r7, #13]
 80017dc:	e017      	b.n	800180e <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	7bbb      	ldrb	r3, [r7, #14]
 80017e2:	4053      	eors	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80017fe:	43db      	mvns	r3, r3
 8001800:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	3b01      	subs	r3, #1
 800180c:	737b      	strb	r3, [r7, #13]
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e4      	bne.n	80017de <OneWire_CRC8+0x22>
	while (len--) {
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	70fa      	strb	r2, [r7, #3]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1d7      	bne.n	80017ce <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <hwInit>:




void hwInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  bspInit();
 8001830:	f7fe fe7a 	bl	8000528 <bspInit>

//  cliInit();
  DWT_Delay_Init();
 8001834:	f7fe ffa8 	bl	8000788 <DWT_Delay_Init>
  ledInit();
 8001838:	f7ff fcaa 	bl	8001190 <ledInit>
  buttonInit();
 800183c:	f7fe ffd4 	bl	80007e8 <buttonInit>
  gpioInit();
 8001840:	f7ff fb9a 	bl	8000f78 <gpioInit>
  Ds18b20_Init();
 8001844:	f7ff f892 	bl	800096c <Ds18b20_Init>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f92f 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7fe fef0 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f939 	bl	8001b26 <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 f90f 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000024 	.word	0x20000024
 80018ec:	20000020 	.word	0x20000020

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000024 	.word	0x20000024
 8001914:	20000070 	.word	0x20000070

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000070 	.word	0x20000070

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_Delay+0x40>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000024 	.word	0x20000024

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff47 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff5c 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffb0 	bl	8001a94 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e159      	b.n	8001e10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8148 	bne.w	8001e0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d00b      	beq.n	8001b9a <HAL_GPIO_Init+0x5a>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8e:	2b11      	cmp	r3, #17
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d130      	bne.n	8001bfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0xfc>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80a2 	beq.w	8001e0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b56      	ldr	r3, [pc, #344]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a55      	ldr	r2, [pc, #340]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d019      	beq.n	8001d42 <HAL_GPIO_Init+0x202>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x1fe>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_GPIO_Init+0x2f4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a45      	ldr	r2, [pc, #276]	; (8001e38 <HAL_GPIO_Init+0x2f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x1f6>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a44      	ldr	r2, [pc, #272]	; (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x1f2>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e008      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d32:	2307      	movs	r3, #7
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d36:	2303      	movs	r3, #3
 8001d38:	e004      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d42:	2300      	movs	r3, #0
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f002 0203 	and.w	r2, r2, #3
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d54:	4934      	ldr	r1, [pc, #208]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d86:	4a2e      	ldr	r2, [pc, #184]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	f67f aea2 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3724      	adds	r7, #36	; 0x24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020c00 	.word	0x40020c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e25b      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	4ba3      	ldr	r3, [pc, #652]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4ba0      	ldr	r3, [pc, #640]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b9d      	ldr	r3, [pc, #628]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e236      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b91      	ldr	r3, [pc, #580]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a90      	ldr	r2, [pc, #576]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a87      	ldr	r2, [pc, #540]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a83      	ldr	r2, [pc, #524]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fcda 	bl	8001918 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fcd6 	bl	8001918 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1fb      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fcc6 	bl	8001918 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fcc2 	bl	8001918 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1e7      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1bb      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4952      	ldr	r1, [pc, #328]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fc7b 	bl	8001918 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fc77 	bl	8001918 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e19c      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4940      	ldr	r1, [pc, #256]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fc5a 	bl	8001918 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fc56 	bl	8001918 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e17b      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d030      	beq.n	80020f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff fc3a 	bl	8001918 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fc36 	bl	8001918 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e15b      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
 80020c6:	e015      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fc23 	bl	8001918 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff fc1f 	bl	8001918 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e144      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a0 	beq.w	8002242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d121      	bne.n	8002182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff fbe5 	bl	8001918 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e011      	b.n	8002176 <HAL_RCC_OscConfig+0x2ce>
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	42470000 	.word	0x42470000
 800215c:	42470e80 	.word	0x42470e80
 8002160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7ff fbd8 	bl	8001918 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0fd      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b81      	ldr	r3, [pc, #516]	; (800237c <HAL_RCC_OscConfig+0x4d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a7c      	ldr	r2, [pc, #496]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x32a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x312>
 80021a0:	4b77      	ldr	r3, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a76      	ldr	r2, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a73      	ldr	r2, [pc, #460]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x32a>
 80021ba:	4b71      	ldr	r3, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a70      	ldr	r2, [pc, #448]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a6d      	ldr	r2, [pc, #436]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fb9d 	bl	8001918 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fb99 	bl	8001918 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0bc      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x33a>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff fb87 	bl	8001918 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff fb83 	bl	8001918 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0a6      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a51      	ldr	r2, [pc, #324]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8092 	beq.w	8002370 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d05c      	beq.n	8002312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d141      	bne.n	80022e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x4dc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fb57 	bl	8001918 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff fb53 	bl	8001918 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e078      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	3b01      	subs	r3, #1
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	4933      	ldr	r1, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x4dc>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb2c 	bl	8001918 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff fb28 	bl	8001918 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04d      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x41c>
 80022e2:	e045      	b.n	8002370 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x4dc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fb15 	bl	8001918 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff fb11 	bl	8001918 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e036      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x44a>
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e029      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	429a      	cmp	r2, r3
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d115      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000
 8002380:	40023800 	.word	0x40023800
 8002384:	42470060 	.word	0x42470060

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7ff fa4e 	bl	8001918 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7ff fa4a 	bl	8001918 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4601      	mov	r1, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	fa21 f303 	lsr.w	r3, r1, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f9ae 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08002758 	.word	0x08002758
 800254c:	20000000 	.word	0x20000000
 8002550:	20000020 	.word	0x20000020

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d007      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x32>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d008      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x38>
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 808d 	bne.w	800269a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002582:	60bb      	str	r3, [r7, #8]
       break;
 8002584:	e08c      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002588:	60bb      	str	r3, [r7, #8]
      break;
 800258a:	e089      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002594:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d023      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	ea03 0501 	and.w	r5, r3, r1
 80025b8:	ea04 0602 	and.w	r6, r4, r2
 80025bc:	4a3d      	ldr	r2, [pc, #244]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025be:	fb02 f106 	mul.w	r1, r2, r6
 80025c2:	2200      	movs	r2, #0
 80025c4:	fb02 f205 	mul.w	r2, r2, r5
 80025c8:	440a      	add	r2, r1
 80025ca:	493a      	ldr	r1, [pc, #232]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025cc:	fba5 0101 	umull	r0, r1, r5, r1
 80025d0:	1853      	adds	r3, r2, r1
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f04f 0400 	mov.w	r4, #0
 80025da:	461a      	mov	r2, r3
 80025dc:	4623      	mov	r3, r4
 80025de:	f7fd fdfb 	bl	80001d8 <__aeabi_uldivmod>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e049      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	ea03 0501 	and.w	r5, r3, r1
 8002600:	ea04 0602 	and.w	r6, r4, r2
 8002604:	4629      	mov	r1, r5
 8002606:	4632      	mov	r2, r6
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	f04f 0400 	mov.w	r4, #0
 8002610:	0154      	lsls	r4, r2, #5
 8002612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002616:	014b      	lsls	r3, r1, #5
 8002618:	4619      	mov	r1, r3
 800261a:	4622      	mov	r2, r4
 800261c:	1b49      	subs	r1, r1, r5
 800261e:	eb62 0206 	sbc.w	r2, r2, r6
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	f04f 0400 	mov.w	r4, #0
 800262a:	0194      	lsls	r4, r2, #6
 800262c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002630:	018b      	lsls	r3, r1, #6
 8002632:	1a5b      	subs	r3, r3, r1
 8002634:	eb64 0402 	sbc.w	r4, r4, r2
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	00e2      	lsls	r2, r4, #3
 8002642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002646:	00d9      	lsls	r1, r3, #3
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	195b      	adds	r3, r3, r5
 800264e:	eb44 0406 	adc.w	r4, r4, r6
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	02a2      	lsls	r2, r4, #10
 800265c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002660:	0299      	lsls	r1, r3, #10
 8002662:	460b      	mov	r3, r1
 8002664:	4614      	mov	r4, r2
 8002666:	4618      	mov	r0, r3
 8002668:	4621      	mov	r1, r4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 0400 	mov.w	r4, #0
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	f7fd fdb0 	bl	80001d8 <__aeabi_uldivmod>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	3301      	adds	r3, #1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	60bb      	str	r3, [r7, #8]
      break;
 8002698:	e002      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a0:	68bb      	ldr	r3, [r7, #8]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000

080026d0 <main>:




int main(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  hwInit();
 80026d4:	f7ff f8aa 	bl	800182c <hwInit>
  apInit();
 80026d8:	f7fd fefe 	bl	80004d8 <apInit>

  apMain();
 80026dc:	f7fd ff03 	bl	80004e6 <apMain>

  return 0;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	4e0d      	ldr	r6, [pc, #52]	; (8002720 <__libc_init_array+0x38>)
 80026ec:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026ee:	1ba4      	subs	r4, r4, r6
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	2500      	movs	r5, #0
 80026f4:	42a5      	cmp	r5, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	4e0b      	ldr	r6, [pc, #44]	; (8002728 <__libc_init_array+0x40>)
 80026fa:	4c0c      	ldr	r4, [pc, #48]	; (800272c <__libc_init_array+0x44>)
 80026fc:	f000 f820 	bl	8002740 <_init>
 8002700:	1ba4      	subs	r4, r4, r6
 8002702:	10a4      	asrs	r4, r4, #2
 8002704:	2500      	movs	r5, #0
 8002706:	42a5      	cmp	r5, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002710:	4798      	blx	r3
 8002712:	3501      	adds	r5, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800271a:	4798      	blx	r3
 800271c:	3501      	adds	r5, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	080027d0 	.word	0x080027d0
 8002724:	080027d0 	.word	0x080027d0
 8002728:	080027d0 	.word	0x080027d0
 800272c:	080027d4 	.word	0x080027d4

08002730 <memset>:
 8002730:	4402      	add	r2, r0
 8002732:	4603      	mov	r3, r0
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	f803 1b01 	strb.w	r1, [r3], #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <_init>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr

0800274c <_fini>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr


Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a1c  08004a1c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a24  08004a24  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000094  08004ac0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08004ac0  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a8b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037e8  00000000  00000000  00036b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  0003a338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  0003b138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019b36  00000000  00000000  0003bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001177a  00000000  00000000  000558c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088f99  00000000  00000000  00067040  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000effd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000f0054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004800 	.word	0x08004800

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08004800 	.word	0x08004800

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <apInit>:
void lcdMain(void);



void apInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//  cliOpen(_DEF_UART1, 57600);
	LCD_CLEAR();
 8000584:	f000 fcc3 	bl	8000f0e <LCD_CLEAR>
	LCD_XY(6, 0); LCD_PUTS((char *)"AQUARIUM");
 8000588:	2100      	movs	r1, #0
 800058a:	2006      	movs	r0, #6
 800058c:	f000 fc8c 	bl	8000ea8 <LCD_XY>
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <apInit+0x1c>)
 8000592:	f000 fcc6 	bl	8000f22 <LCD_PUTS>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	08004818 	.word	0x08004818

080005a0 <apMain>:

void apMain(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  uint32_t pre_time;


  pre_time = millis();
 80005a6:	f000 f87c 	bl	80006a2 <millis>
 80005aa:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 500)
 80005ac:	f000 f879 	bl	80006a2 <millis>
 80005b0:	4602      	mov	r2, r0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ba:	d302      	bcc.n	80005c2 <apMain+0x22>
    {
      pre_time = millis();
 80005bc:	f000 f871 	bl	80006a2 <millis>
 80005c0:	6078      	str	r0, [r7, #4]
      //ledToggle(_DEF_LED1);
    }

    Ds18b20_ManualConvert();
 80005c2:	f000 fe41 	bl	8001248 <Ds18b20_ManualConvert>

    LCD_XY(1, 1); LCD_PUTS((char *)"Water_Temp : ");
 80005c6:	2101      	movs	r1, #1
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fc6d 	bl	8000ea8 <LCD_XY>
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <apMain+0x8c>)
 80005d0:	f000 fca7 	bl	8000f22 <LCD_PUTS>
    LCD_XY(13, 1); output_TEMP(ds18b20[0].Temperature*10);
 80005d4:	2101      	movs	r1, #1
 80005d6:	200d      	movs	r0, #13
 80005d8:	f000 fc66 	bl	8000ea8 <LCD_XY>
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <apMain+0x90>)
 80005de:	edd3 7a02 	vldr	s15, [r3, #8]
 80005e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80005e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	f000 fcad 	bl	8000f4c <output_TEMP>
    LCD_XY(18, 1); LCD_print_SC(223);
 80005f2:	2101      	movs	r1, #1
 80005f4:	2012      	movs	r0, #18
 80005f6:	f000 fc57 	bl	8000ea8 <LCD_XY>
 80005fa:	20df      	movs	r0, #223	; 0xdf
 80005fc:	f000 fc0c 	bl	8000e18 <LCD_print_SC>
    LCD_XY(4, 3); LCD_PUTS((char *)"I LOVE YUJIN");
 8000600:	2103      	movs	r1, #3
 8000602:	2004      	movs	r0, #4
 8000604:	f000 fc50 	bl	8000ea8 <LCD_XY>
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <apMain+0x94>)
 800060a:	f000 fc8a 	bl	8000f22 <LCD_PUTS>
    if(buttonGetPressed(_DEF_BUTTON1))
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fa4c 	bl	8000aac <buttonGetPressed>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <apMain+0x82>
    {
    	ledOn(_DEF_LED1);
 800061a:	2000      	movs	r0, #0
 800061c:	f001 fae4 	bl	8001be8 <ledOn>
 8000620:	e7c4      	b.n	80005ac <apMain+0xc>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8000622:	2000      	movs	r0, #0
 8000624:	f001 fb00 	bl	8001c28 <ledOff>
    if (millis()-pre_time >= 500)
 8000628:	e7c0      	b.n	80005ac <apMain+0xc>
 800062a:	bf00      	nop
 800062c:	08004824 	.word	0x08004824
 8000630:	20000518 	.word	0x20000518
 8000634:	08004834 	.word	0x08004834

08000638 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  HAL_Init();
 800063e:	f001 ff21 	bl	8002484 <HAL_Init>
  SystemClock_Config();
 8000642:	f000 f835 	bl	80006b0 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <bspInit+0x50>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <bspInit+0x50>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <bspInit+0x50>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <bspInit+0x50>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <bspInit+0x50>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <bspInit+0x50>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <delay>:

void delay(uint32_t ms)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f001 ff67 	bl	8002568 <HAL_Delay>
#endif
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <millis>:

uint32_t millis(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006a6:	f001 ff53 	bl	8002550 <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fc77 	bl	8003fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <SystemClock_Config+0xc8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <SystemClock_Config+0xcc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fbc5 	bl	8002ec4 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 f81e 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2103      	movs	r1, #3
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fe1f 	bl	80033a4 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800076c:	f000 f808 	bl	8000780 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000786:	e7fe      	b.n	8000786 <Error_Handler+0x6>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <HAL_MspInit+0x4c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f001 fe80 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <SPI1_IRQHandler+0x10>)
 8000832:	f002 ff5b 	bl	80036ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000550 	.word	0x20000550

08000840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <USART1_IRQHandler+0x10>)
 8000846:	f003 f8ff 	bl	8003a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200006c8 	.word	0x200006c8

08000854 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <DMA2_Stream2_IRQHandler+0x10>)
 800085a:	f001 ffdb 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000668 	.word	0x20000668

08000868 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <DMA2_Stream3_IRQHandler+0x10>)
 800086e:	f001 ffd1 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200005a8 	.word	0x200005a8

0800087c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <DMA2_Stream7_IRQHandler+0x10>)
 8000882:	f001 ffc7 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000608 	.word	0x20000608

08000890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <_sbrk+0x5c>)
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <_sbrk+0x60>)
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <_sbrk+0x64>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <_sbrk+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d207      	bcs.n	80008d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c0:	f003 fb42 	bl	8003f48 <__errno>
 80008c4:	4602      	mov	r2, r0
 80008c6:	230c      	movs	r3, #12
 80008c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	e009      	b.n	80008e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <_sbrk+0x64>)
 80008e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20020000 	.word	0x20020000
 80008f0:	00000400 	.word	0x00000400
 80008f4:	200000b0 	.word	0x200000b0
 80008f8:	20000710 	.word	0x20000710

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SystemInit+0x28>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SystemInit+0x28>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SystemInit+0x28>)
 8000912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000916:	609a      	str	r2, [r3, #8]
#endif
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800092c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800092e:	e003      	b.n	8000938 <LoopCopyDataInit>

08000930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000936:	3104      	adds	r1, #4

08000938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800093c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000940:	d3f6      	bcc.n	8000930 <CopyDataInit>
  ldr  r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000944:	e002      	b.n	800094c <LoopFillZerobss>

08000946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000948:	f842 3b04 	str.w	r3, [r2], #4

0800094c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000950:	d3f9      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000952:	f7ff ffd3 	bl	80008fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f003 fafd 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f003 faea 	bl	8003f32 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000960:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000964:	08004a2c 	.word	0x08004a2c
  ldr  r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800096c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000970:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000974:	20000710 	.word	0x20000710

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>

0800097a <qbufferAvailable>:

  return ret;
}

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	6892      	ldr	r2, [r2, #8]
 8000990:	fbb3 f1f2 	udiv	r1, r3, r2
 8000994:	fb02 f201 	mul.w	r2, r2, r1
 8000998:	1a9b      	subs	r3, r3, r2
 800099a:	60fb      	str	r3, [r7, #12]

  return ret;
 800099c:	68fb      	ldr	r3, [r7, #12]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <DWT_Delay_Init+0x58>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <DWT_Delay_Init+0x58>)
 80009b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009ba:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <DWT_Delay_Init+0x58>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <DWT_Delay_Init+0x58>)
 80009c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009c6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <DWT_Delay_Init+0x5c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <DWT_Delay_Init+0x5c>)
 80009ce:	f023 0301 	bic.w	r3, r3, #1
 80009d2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <DWT_Delay_Init+0x5c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <DWT_Delay_Init+0x5c>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <DWT_Delay_Init+0x5c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80009e6:	bf00      	nop
     __ASM volatile ("NOP");
 80009e8:	bf00      	nop
     __ASM volatile ("NOP");
 80009ea:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <DWT_Delay_Init+0x5c>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80009f4:	2300      	movs	r3, #0
 80009f6:	e000      	b.n	80009fa <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80009f8:	2301      	movs	r3, #1
  }
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000edf0 	.word	0xe000edf0
 8000a08:	e0001000 	.word	0xe0001000

08000a0c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
  bool ret = true;
 8000a12:	2301      	movs	r3, #1
 8000a14:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <buttonInit+0x90>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <buttonInit+0x90>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <buttonInit+0x90>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	e019      	b.n	8000a82 <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8000a4e:	4914      	ldr	r1, [pc, #80]	; (8000aa0 <buttonInit+0x94>)
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8000a62:	490f      	ldr	r1, [pc, #60]	; (8000aa0 <buttonInit+0x94>)
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	440b      	add	r3, r1
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1d3a      	adds	r2, r7, #4
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f856 	bl	8002b28 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dde2      	ble.n	8000a4e <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <buttonInit+0x98>)
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <buttonInit+0x9c>)
 8000a8c:	f000 fb12 	bl	80010b4 <cliAdd>
#endif

  return ret;
 8000a90:	7efb      	ldrb	r3, [r7, #27]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	08000ba1 	.word	0x08000ba1
 8000aa8:	08004844 	.word	0x08004844

08000aac <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4a35      	ldr	r2, [pc, #212]	; (8000b9c <buttonGetPressed+0xf0>)
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <buttonGetPressed+0x28>
  {
    return false;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e05f      	b.n	8000b94 <buttonGetPressed+0xe8>
  }

  switch(button->State)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	7adb      	ldrb	r3, [r3, #11]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <buttonGetPressed+0x36>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d016      	beq.n	8000b0e <buttonGetPressed+0x62>
 8000ae0:	e057      	b.n	8000b92 <buttonGetPressed+0xe6>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	4610      	mov	r0, r2
 8000af0:	f002 f99c 	bl	8002e2c <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	7a1b      	ldrb	r3, [r3, #8]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d147      	bne.n	8000b90 <buttonGetPressed+0xe4>
  		  {
  			  button->State = BUTTON_Pressed;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2201      	movs	r2, #1
 8000b04:	72da      	strb	r2, [r3, #11]
  			  button->PinState = GPIO_PIN_SET;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	725a      	strb	r2, [r3, #9]
  		  }
  		  break;
 8000b0c:	e040      	b.n	8000b90 <buttonGetPressed+0xe4>

  	  case BUTTON_Pressed:
		  if(button->PinState != button->LastPinState)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	7a5a      	ldrb	r2, [r3, #9]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	7a9b      	ldrb	r3, [r3, #10]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d004      	beq.n	8000b24 <buttonGetPressed+0x78>
		  {
			  button->lastDebounceTime = millis();
 8000b1a:	f7ff fdc2 	bl	80006a2 <millis>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60da      	str	r2, [r3, #12]
		  }
		  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8000b24:	f7ff fdbd 	bl	80006a2 <millis>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	1ad2      	subs	r2, r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d926      	bls.n	8000b86 <buttonGetPressed+0xda>
		  {
			  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	4610      	mov	r0, r2
 8000b46:	f002 f971 	bl	8002e2c <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	7a1b      	ldrb	r3, [r3, #8]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d10a      	bne.n	8000b6c <buttonGetPressed+0xc0>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	7a5b      	ldrb	r3, [r3, #9]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e00c      	b.n	8000b86 <buttonGetPressed+0xda>
	  		  }
			  else
			  {
				  button->State = BUTTON_IDLE;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	72da      	strb	r2, [r3, #11]
				  button->PinState = GPIO_PIN_RESET;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2200      	movs	r2, #0
 8000b76:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	7a5b      	ldrb	r3, [r3, #9]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf14      	ite	ne
 8000b80:	2301      	movne	r3, #1
 8000b82:	2300      	moveq	r3, #0
 8000b84:	73fb      	strb	r3, [r7, #15]
			  }
		  }
		  button->LastPinState = button->PinState;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	7a5a      	ldrb	r2, [r3, #9]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	729a      	strb	r2, [r3, #10]
		  break;
 8000b8e:	e000      	b.n	8000b92 <buttonGetPressed+0xe6>
  		  break;
 8000b90:	bf00      	nop
  }
  return ret;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d128      	bne.n	8000c06 <cliButton+0x66>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4919      	ldr	r1, [pc, #100]	; (8000c20 <cliButton+0x80>)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	4798      	blx	r3
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d020      	beq.n	8000c06 <cliButton+0x66>
  {
    while(cliKeepLoop())
 8000bc4:	e018      	b.n	8000bf8 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e00c      	b.n	8000be6 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff6b 	bl	8000aac <buttonGetPressed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4812      	ldr	r0, [pc, #72]	; (8000c24 <cliButton+0x84>)
 8000bdc:	f000 f9fc 	bl	8000fd8 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	ddef      	ble.n	8000bcc <cliButton+0x2c>
      }
      cliPrintf("\n");
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <cliButton+0x88>)
 8000bee:	f000 f9f3 	bl	8000fd8 <cliPrintf>

      delay(100);
 8000bf2:	2064      	movs	r0, #100	; 0x64
 8000bf4:	f7ff fd4a 	bl	800068c <delay>
    while(cliKeepLoop())
 8000bf8:	f000 fa46 	bl	8001088 <cliKeepLoop>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1e1      	bne.n	8000bc6 <cliButton+0x26>
    }

    ret = true;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	f083 0301 	eor.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <cliButton+0x8c>)
 8000c14:	f000 f9e0 	bl	8000fd8 <cliPrintf>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	0800484c 	.word	0x0800484c
 8000c24:	08004854 	.word	0x08004854
 8000c28:	08004858 	.word	0x08004858
 8000c2c:	0800485c 	.word	0x0800485c

08000c30 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <DWT_Delay_us+0x3c>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c3e:	f002 fd49 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8000c42:	4602      	mov	r2, r0
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <DWT_Delay_us+0x40>)
 8000c46:	fba3 2302 	umull	r2, r3, r3, r2
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000c54:	bf00      	nop
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <DWT_Delay_us+0x3c>)
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	1ad2      	subs	r2, r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3f8      	bcc.n	8000c56 <DWT_Delay_us+0x26>
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	e0001000 	.word	0xe0001000
 8000c70:	431bde83 	.word	0x431bde83

08000c74 <digit100>:
uint32_t Data_pin[4] = {GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_12};  // MSBFIRST
// RS-B7, R/W-B9, EN-B8, D4-B12, D5-B13, D6-B14, D7-B15

char digit10000(uint16_t v) {return '0' + v / 10000;}
char digit1000(uint16_t v) {return '0' + v / 1000 - (v/10000) * 10;}
char digit100(uint16_t v) {return '0' + v / 100 - (v/1000) * 10;}
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <digit100+0x48>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <digit100+0x4c>)
 8000c90:	fba1 1303 	umull	r1, r3, r1, r3
 8000c94:	099b      	lsrs	r3, r3, #6
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	0149      	lsls	r1, r1, #5
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	0089      	lsls	r1, r1, #2
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4413      	add	r3, r2
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3330      	adds	r3, #48	; 0x30
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	51eb851f 	.word	0x51eb851f
 8000cc0:	10624dd3 	.word	0x10624dd3

08000cc4 <digit10>:
char digit10(uint16_t v) {return '0' + v / 10 - (v/100) * 10;}
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <digit10+0x48>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	490c      	ldr	r1, [pc, #48]	; (8000d10 <digit10+0x4c>)
 8000ce0:	fba1 1303 	umull	r1, r3, r1, r3
 8000ce4:	095b      	lsrs	r3, r3, #5
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	0149      	lsls	r1, r1, #5
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	0089      	lsls	r1, r1, #2
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	3330      	adds	r3, #48	; 0x30
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	cccccccd 	.word	0xcccccccd
 8000d10:	51eb851f 	.word	0x51eb851f

08000d14 <digit1>:
char digit1(uint16_t v) {return '0' + v - (v/10) * 10;}
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	490b      	ldr	r1, [pc, #44]	; (8000d54 <digit1+0x40>)
 8000d26:	fba1 1303 	umull	r1, r3, r1, r3
 8000d2a:	08db      	lsrs	r3, r3, #3
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	0149      	lsls	r1, r1, #5
 8000d34:	1ac9      	subs	r1, r1, r3
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3330      	adds	r3, #48	; 0x30
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	cccccccd 	.word	0xcccccccd

08000d58 <EN_PULSE>:

void EN_PULSE(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	EN_H;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <EN_PULSE+0x2c>)
 8000d64:	f002 f87a 	bl	8002e5c <HAL_GPIO_WritePin>
	DWT_Delay_us(50);//250
 8000d68:	2032      	movs	r0, #50	; 0x32
 8000d6a:	f7ff ff61 	bl	8000c30 <DWT_Delay_us>
	EN_L;
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <EN_PULSE+0x2c>)
 8000d76:	f002 f871 	bl	8002e5c <HAL_GPIO_WritePin>
	DWT_Delay_us(50);
 8000d7a:	2032      	movs	r0, #50	; 0x32
 8000d7c:	f7ff ff58 	bl	8000c30 <DWT_Delay_us>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020400 	.word	0x40020400

08000d88 <write_4bit>:

void write_4bit(uint8_t data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = 0xF0000000|((data&0x0F)<<12);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <write_4bit+0x24>)
 8000d9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000d9e:	6193      	str	r3, [r2, #24]
	EN_PULSE();
 8000da0:	f7ff ffda 	bl	8000d58 <EN_PULSE>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020400 	.word	0x40020400

08000db0 <LCD_CMD>:
  //GPIOB->CRH = (GPIOB->CRH & 0x0000FFFF)|(0x22220000);

	return temp;
}

void LCD_CMD(char cmd) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  RS_L;
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	4808      	ldr	r0, [pc, #32]	; (8000de0 <LCD_CMD+0x30>)
 8000dc0:	f002 f84c 	bl	8002e5c <HAL_GPIO_WritePin>
	//while(LCD_readCMD() == 0x80)
	write_4bit(cmd>>4);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffdc 	bl	8000d88 <write_4bit>
	//while(LCD_readCMD() == 0x80)
	write_4bit(cmd);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffd8 	bl	8000d88 <write_4bit>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40020400 	.word	0x40020400

08000de4 <LCD_DATA>:

void LCD_DATA(char data) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  RS_H;
 8000dee:	2201      	movs	r2, #1
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <LCD_DATA+0x30>)
 8000df4:	f002 f832 	bl	8002e5c <HAL_GPIO_WritePin>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data>>4);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffc2 	bl	8000d88 <write_4bit>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffbe 	bl	8000d88 <write_4bit>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40020400 	.word	0x40020400

08000e18 <LCD_print_SC>:
	write_4bit(data>>4);
	//while(LCD_readCMD() == 0x80)
	write_4bit(data);
}

void LCD_print_SC(uint8_t data) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  RS_H;
 8000e22:	2201      	movs	r2, #1
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <LCD_print_SC+0x30>)
 8000e28:	f002 f818 	bl	8002e5c <HAL_GPIO_WritePin>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data>>4);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ffa8 	bl	8000d88 <write_4bit>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffa4 	bl	8000d88 <write_4bit>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020400 	.word	0x40020400

08000e4c <LCD_INIT>:
{
	LCD_CMD(0x0C);
}

void LCD_INIT(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
   HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f001 fb89 	bl	8002568 <HAL_Delay>
   LCD_CMD(0x03); HAL_Delay(45);// 4 bits, 2 line, 5x8 font
 8000e56:	2003      	movs	r0, #3
 8000e58:	f7ff ffaa 	bl	8000db0 <LCD_CMD>
 8000e5c:	202d      	movs	r0, #45	; 0x2d
 8000e5e:	f001 fb83 	bl	8002568 <HAL_Delay>
   LCD_CMD(0x03); HAL_Delay(45);
 8000e62:	2003      	movs	r0, #3
 8000e64:	f7ff ffa4 	bl	8000db0 <LCD_CMD>
 8000e68:	202d      	movs	r0, #45	; 0x2d
 8000e6a:	f001 fb7d 	bl	8002568 <HAL_Delay>
   LCD_CMD(0x03); HAL_Delay(45);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f7ff ff9e 	bl	8000db0 <LCD_CMD>
 8000e74:	202d      	movs	r0, #45	; 0x2d
 8000e76:	f001 fb77 	bl	8002568 <HAL_Delay>
   LCD_CMD(0x02); HAL_Delay(100);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff ff98 	bl	8000db0 <LCD_CMD>
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f001 fb71 	bl	8002568 <HAL_Delay>
   LCD_CMD(0x28);//4bit mode, 5x8Dot, 2Line
 8000e86:	2028      	movs	r0, #40	; 0x28
 8000e88:	f7ff ff92 	bl	8000db0 <LCD_CMD>
   LCD_CMD(0x0C);//Display on
 8000e8c:	200c      	movs	r0, #12
 8000e8e:	f7ff ff8f 	bl	8000db0 <LCD_CMD>
   LCD_CMD(0x06);//font direction left
 8000e92:	2006      	movs	r0, #6
 8000e94:	f7ff ff8c 	bl	8000db0 <LCD_CMD>
   LCD_CMD(0x01);//Display Clear
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff89 	bl	8000db0 <LCD_CMD>
   HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f001 fb62 	bl	8002568 <HAL_Delay>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LCD_XY>:

void LCD_XY(char x, char y) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
  if     (y==0) LCD_CMD(0x80 + x);
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <LCD_XY+0x24>
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3b80      	subs	r3, #128	; 0x80
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff73 	bl	8000db0 <LCD_CMD>
  else if(y==1) LCD_CMD(0xC0 + x);
  else if(y==2) LCD_CMD(0x94 + x);
  else if(y==3) LCD_CMD(0xD4 + x);
}
 8000eca:	e01c      	b.n	8000f06 <LCD_XY+0x5e>
  else if(y==1) LCD_CMD(0xC0 + x);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d106      	bne.n	8000ee0 <LCD_XY+0x38>
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b40      	subs	r3, #64	; 0x40
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff69 	bl	8000db0 <LCD_CMD>
}
 8000ede:	e012      	b.n	8000f06 <LCD_XY+0x5e>
  else if(y==2) LCD_CMD(0x94 + x);
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d106      	bne.n	8000ef4 <LCD_XY+0x4c>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	3b6c      	subs	r3, #108	; 0x6c
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <LCD_CMD>
}
 8000ef2:	e008      	b.n	8000f06 <LCD_XY+0x5e>
  else if(y==3) LCD_CMD(0xD4 + x);
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d105      	bne.n	8000f06 <LCD_XY+0x5e>
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	3b2c      	subs	r3, #44	; 0x2c
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff55 	bl	8000db0 <LCD_CMD>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <LCD_CLEAR>:

void LCD_CLEAR(void) { LCD_CMD(0x01); HAL_Delay(3); }
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff ff4c 	bl	8000db0 <LCD_CMD>
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f001 fb25 	bl	8002568 <HAL_Delay>
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <LCD_PUTS>:

void LCD_PUTS(char *str) { while(*str) LCD_DATA(*str++); }
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	e006      	b.n	8000f3a <LCD_PUTS+0x18>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff55 	bl	8000de4 <LCD_DATA>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f4      	bne.n	8000f2c <LCD_PUTS+0xa>
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <output_TEMP>:
  line[12] = '0' + v              - (v/10)         * 10;
  LCD_PUTS(line);
}

void output_TEMP(float temp)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0a01 	vstr	s0, [r7, #4]
	static char line[5] = "---.-";
    //                      01234
	if(temp < 0)
 8000f56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	d503      	bpl.n	8000f6c <output_TEMP+0x20>
	{
		line[0] = '-';
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <output_TEMP+0x88>)
 8000f66:	222d      	movs	r2, #45	; 0x2d
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e002      	b.n	8000f72 <output_TEMP+0x26>
	}else
	{
		line[0] = ' ';
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <output_TEMP+0x88>)
 8000f6e:	2220      	movs	r2, #32
 8000f70:	701a      	strb	r2, [r3, #0]
	}

	line[1] = digit100(temp);
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7a:	ee17 3a90 	vmov	r3, s15
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe77 	bl	8000c74 <digit100>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <output_TEMP+0x88>)
 8000f8c:	705a      	strb	r2, [r3, #1]
	line[2] = digit10(temp);
 8000f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f96:	ee17 3a90 	vmov	r3, s15
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe91 	bl	8000cc4 <digit10>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <output_TEMP+0x88>)
 8000fa8:	709a      	strb	r2, [r3, #2]
    line[4] = digit1(temp);
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb2:	ee17 3a90 	vmov	r3, s15
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff feab 	bl	8000d14 <digit1>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <output_TEMP+0x88>)
 8000fc4:	711a      	strb	r2, [r3, #4]
	LCD_PUTS(line);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <output_TEMP+0x88>)
 8000fc8:	f7ff ffab 	bl	8000f22 <LCD_PUTS>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000018 	.word	0x20000018

08000fd8 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8000fd8:	b40f      	push	{r0, r1, r2, r3}
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <cliPrintf+0x44>)
 8000fe8:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f103 0011 	add.w	r0, r3, #17
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	f003 f818 	bl	800402c <vsniprintf>
 8000ffc:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	7818      	ldrb	r0, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3311      	adds	r3, #17
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	4619      	mov	r1, r3
 800100a:	f001 f9bd 	bl	8002388 <uartWrite>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001018:	b004      	add	sp, #16
 800101a:	4770      	bx	lr
 800101c:	200000d0 	.word	0x200000d0

08001020 <cliToUpper>:

void cliToUpper(char *str)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	81fb      	strh	r3, [r7, #14]
 800102c:	e018      	b.n	8001060 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d014      	beq.n	8001068 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	2b60      	cmp	r3, #96	; 0x60
 8001042:	d905      	bls.n	8001050 <cliToUpper+0x30>
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	2b7a      	cmp	r3, #122	; 0x7a
 8001048:	d802      	bhi.n	8001050 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800104a:	7b7b      	ldrb	r3, [r7, #13]
 800104c:	3b20      	subs	r3, #32
 800104e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001050:	89fb      	ldrh	r3, [r7, #14]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	7b7a      	ldrb	r2, [r7, #13]
 8001058:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	3301      	adds	r3, #1
 800105e:	81fb      	strh	r3, [r7, #14]
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d9e3      	bls.n	800102e <cliToUpper+0xe>
 8001066:	e000      	b.n	800106a <cliToUpper+0x4a>
      break;
 8001068:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	2b10      	cmp	r3, #16
 800106e:	d105      	bne.n	800107c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	3b01      	subs	r3, #1
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
  }
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <cliKeepLoop>:

  return ret;
}

bool cliKeepLoop(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <cliKeepLoop+0x28>)
 8001090:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f930 	bl	80022fc <uartAvailable>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <cliKeepLoop+0x1e>
  {
    return true;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80010a6:	2300      	movs	r3, #0
  }
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000d0 	.word	0x200000d0

080010b4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <cliAdd+0x90>)
 80010c4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d901      	bls.n	80010d4 <cliAdd+0x20>
  {
    return false;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e032      	b.n	800113a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80010da:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80010dc:	89fa      	ldrh	r2, [r7, #14]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	3304      	adds	r3, #4
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 ff65 	bl	8003fc2 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80010f8:	89fa      	ldrh	r2, [r7, #14]
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800110e:	89fa      	ldrh	r2, [r7, #14]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4413      	add	r3, r2
 8001120:	3304      	adds	r3, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff7c 	bl	8001020 <cliToUpper>

  p_cli->cmd_count++;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800112e:	3301      	adds	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8001138:	7dfb      	ldrb	r3, [r7, #23]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000d0 	.word	0x200000d0

08001148 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 800114e:	2305      	movs	r3, #5
 8001150:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8001152:	2201      	movs	r2, #1
 8001154:	4937      	ldr	r1, [pc, #220]	; (8001234 <Ds18b20_Init+0xec>)
 8001156:	4838      	ldr	r0, [pc, #224]	; (8001238 <Ds18b20_Init+0xf0>)
 8001158:	f000 fe65 	bl	8001e26 <OneWire_Init>
		TempSensorCount = 0;
 800115c:	4b37      	ldr	r3, [pc, #220]	; (800123c <Ds18b20_Init+0xf4>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8001162:	e002      	b.n	800116a <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f001 f9ff 	bl	8002568 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800116a:	f001 f9f1 	bl	8002550 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001174:	429a      	cmp	r2, r3
 8001176:	d9f5      	bls.n	8001164 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8001178:	482f      	ldr	r0, [pc, #188]	; (8001238 <Ds18b20_Init+0xf0>)
 800117a:	f000 ff41 	bl	8002000 <OneWire_First>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <Ds18b20_Init+0xf8>)
 8001184:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8001186:	e019      	b.n	80011bc <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f001 f9ed 	bl	8002568 <HAL_Delay>
			TempSensorCount++;
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <Ds18b20_Init+0xf4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <Ds18b20_Init+0xf4>)
 8001198:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <Ds18b20_Init+0xf4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4a28      	ldr	r2, [pc, #160]	; (8001244 <Ds18b20_Init+0xfc>)
 80011a4:	4413      	add	r3, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	4823      	ldr	r0, [pc, #140]	; (8001238 <Ds18b20_Init+0xf0>)
 80011aa:	f001 f83d 	bl	8002228 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80011ae:	4822      	ldr	r0, [pc, #136]	; (8001238 <Ds18b20_Init+0xf0>)
 80011b0:	f000 ff36 	bl	8002020 <OneWire_Next>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <Ds18b20_Init+0xf8>)
 80011ba:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <Ds18b20_Init+0xf8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e1      	bne.n	8001188 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <Ds18b20_Init+0xf4>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d106      	bne.n	80011da <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1bc      	bne.n	8001152 <Ds18b20_Init+0xa>
 80011d8:	e000      	b.n	80011dc <Ds18b20_Init+0x94>
			break;
 80011da:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <Ds18b20_Init+0x9e>
		return false;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e022      	b.n	800122c <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	71bb      	strb	r3, [r7, #6]
 80011ea:	e019      	b.n	8001220 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f001 f9bb 	bl	8002568 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <Ds18b20_Init+0xfc>)
 80011f8:	4413      	add	r3, r2
 80011fa:	220c      	movs	r2, #12
 80011fc:	4619      	mov	r1, r3
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <Ds18b20_Init+0xf0>)
 8001200:	f000 f9a8 	bl	8001554 <DS18B20_SetResolution>
		HAL_Delay(50);
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f001 f9af 	bl	8002568 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <Ds18b20_Init+0xfc>)
 8001210:	4413      	add	r3, r2
 8001212:	4619      	mov	r1, r3
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <Ds18b20_Init+0xf0>)
 8001216:	f000 fa36 	bl	8001686 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	3301      	adds	r3, #1
 800121e:	71bb      	strb	r3, [r7, #6]
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <Ds18b20_Init+0xf4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	79ba      	ldrb	r2, [r7, #6]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3e0      	bcc.n	80011ec <Ds18b20_Init+0xa4>
	}
	return true;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020400 	.word	0x40020400
 8001238:	20000528 	.word	0x20000528
 800123c:	200000b4 	.word	0x200000b4
 8001240:	20000514 	.word	0x20000514
 8001244:	20000518 	.word	0x20000518

08001248 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool	Ds18b20_ManualConvert(void)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <Ds18b20_ManualConvert+0xd4>)
 8001250:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001254:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8001256:	4832      	ldr	r0, [pc, #200]	; (8001320 <Ds18b20_ManualConvert+0xd8>)
 8001258:	f000 f868 	bl	800132c <DS18B20_StartAll>
	HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	; 0x64
 800125e:	f001 f983 	bl	8002568 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8001262:	e00c      	b.n	800127e <Ds18b20_ManualConvert+0x36>
	{
		HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f001 f97f 	bl	8002568 <HAL_Delay>
		Ds18b20Timeout-=1;
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <Ds18b20_ManualConvert+0xd4>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <Ds18b20_ManualConvert+0xd4>)
 8001274:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <Ds18b20_ManualConvert+0xd4>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <Ds18b20_ManualConvert+0x44>
	while (!DS18B20_AllDone(&OneWire))
 800127e:	4828      	ldr	r0, [pc, #160]	; (8001320 <Ds18b20_ManualConvert+0xd8>)
 8001280:	f000 fa5c 	bl	800173c <DS18B20_AllDone>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0ec      	beq.n	8001264 <Ds18b20_ManualConvert+0x1c>
 800128a:	e000      	b.n	800128e <Ds18b20_ManualConvert+0x46>
			break;
 800128c:	bf00      	nop
	}
	if(Ds18b20Timeout>0)
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <Ds18b20_ManualConvert+0xd4>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d024      	beq.n	80012e0 <Ds18b20_ManualConvert+0x98>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e01b      	b.n	80012d4 <Ds18b20_ManualConvert+0x8c>
		{
			HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f001 f963 	bl	8002568 <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <Ds18b20_ManualConvert+0xdc>)
 80012a8:	1899      	adds	r1, r3, r2
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	3308      	adds	r3, #8
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <Ds18b20_ManualConvert+0xdc>)
 80012b2:	4413      	add	r3, r2
 80012b4:	79fc      	ldrb	r4, [r7, #7]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4819      	ldr	r0, [pc, #100]	; (8001320 <Ds18b20_ManualConvert+0xd8>)
 80012ba:	f000 f84b 	bl	8001354 <DS18B20_Read>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <Ds18b20_ManualConvert+0xdc>)
 80012c4:	0123      	lsls	r3, r4, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	330c      	adds	r3, #12
 80012ca:	460a      	mov	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	3301      	adds	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <Ds18b20_ManualConvert+0xe0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3de      	bcc.n	800129c <Ds18b20_ManualConvert+0x54>
 80012de:	e011      	b.n	8001304 <Ds18b20_ManualConvert+0xbc>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	71bb      	strb	r3, [r7, #6]
 80012e4:	e009      	b.n	80012fa <Ds18b20_ManualConvert+0xb2>
			ds18b20[i].DataIsValid = false;
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <Ds18b20_ManualConvert+0xdc>)
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	330c      	adds	r3, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	3301      	adds	r3, #1
 80012f8:	71bb      	strb	r3, [r7, #6]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <Ds18b20_ManualConvert+0xe0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	79ba      	ldrb	r2, [r7, #6]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3f0      	bcc.n	80012e6 <Ds18b20_ManualConvert+0x9e>
	}
	if(Ds18b20Timeout==0)
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <Ds18b20_ManualConvert+0xd4>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <Ds18b20_ManualConvert+0xc8>
		return false;
 800130c:	2300      	movs	r3, #0
 800130e:	e000      	b.n	8001312 <Ds18b20_ManualConvert+0xca>
	else
		return true;
 8001310:	2301      	movs	r3, #1
	#endif
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	200000b6 	.word	0x200000b6
 8001320:	20000528 	.word	0x20000528
 8001324:	20000518 	.word	0x20000518
 8001328:	200000b4 	.word	0x200000b4

0800132c <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fd9f 	bl	8001e78 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800133a:	21cc      	movs	r1, #204	; 0xcc
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fe21 	bl	8001f84 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001342:	2144      	movs	r1, #68	; 0x44
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fe1d 	bl	8001f84 <OneWire_WriteByte>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f000 f97a 	bl	8001664 <DS18B20_Is>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <DS18B20_Read+0x26>
		return false;
 8001376:	2300      	movs	r3, #0
 8001378:	e0e1      	b.n	800153e <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 fdd8 	bl	8001f30 <OneWire_ReadBit>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8001386:	2300      	movs	r3, #0
 8001388:	e0d9      	b.n	800153e <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fd74 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 ff2a 	bl	80021ec <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001398:	21be      	movs	r1, #190	; 0xbe
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fdf2 	bl	8001f84 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	77fb      	strb	r3, [r7, #31]
 80013a4:	e00d      	b.n	80013c2 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80013a6:	7ffc      	ldrb	r4, [r7, #31]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 fe08 	bl	8001fbe <OneWire_ReadByte>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4423      	add	r3, r4
 80013b8:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	3301      	adds	r3, #1
 80013c0:	77fb      	strb	r3, [r7, #31]
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d9ee      	bls.n	80013a6 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2108      	movs	r1, #8
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 ff46 	bl	8002260 <OneWire_CRC8>
 80013d4:	4603      	mov	r3, r0
 80013d6:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 80013d8:	7f3b      	ldrb	r3, [r7, #28]
 80013da:	7fba      	ldrb	r2, [r7, #30]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e0ac      	b.n	800153e <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80013e4:	7d3b      	ldrb	r3, [r7, #20]
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7d7b      	ldrb	r3, [r7, #21]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 fd3f 	bl	8001e78 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80013fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da05      	bge.n	800140e <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001404:	425b      	negs	r3, r3
 8001406:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800140e:	7e3b      	ldrb	r3, [r7, #24]
 8001410:	115b      	asrs	r3, r3, #5
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	3309      	adds	r3, #9
 800141c:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 800141e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	b29b      	uxth	r3, r3
 8001424:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8001428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b25b      	sxtb	r3, r3
 8001432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001436:	b25a      	sxtb	r2, r3
 8001438:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800143c:	4313      	orrs	r3, r2
 800143e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8001442:	7f7b      	ldrb	r3, [r7, #29]
 8001444:	3b09      	subs	r3, #9
 8001446:	2b03      	cmp	r3, #3
 8001448:	d858      	bhi.n	80014fc <DS18B20_Read+0x1a8>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <DS18B20_Read+0xfc>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	08001461 	.word	0x08001461
 8001454:	08001489 	.word	0x08001489
 8001458:	080014b1 	.word	0x080014b1
 800145c:	080014d9 	.word	0x080014d9
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8001460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001462:	08db      	lsrs	r3, r3, #3
 8001464:	b29b      	uxth	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001476:	edd7 7a08 	vldr	s15, [r7, #32]
 800147a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8001486:	e03e      	b.n	8001506 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800149e:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 80014ae:	e02a      	b.n	8001506 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 80014b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80014c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ca:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80014d6:	e016      	b.n	8001506 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 80014d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80014ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001548 <DS18B20_Read+0x1f4>
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 80014fa:	e004      	b.n	8001506 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <DS18B20_Read+0x1f8>)
 80014fe:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8001506:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001512:	ed97 7a08 	vldr	s14, [r7, #32]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 800151e:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8001526:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001550 <DS18B20_Read+0x1fc>
 800152a:	edd7 7a08 	vldr	s15, [r7, #32]
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	372c      	adds	r7, #44	; 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	3d800000 	.word	0x3d800000
 800154c:	437f0000 	.word	0x437f0000
 8001550:	00000000 	.word	0x00000000

08001554 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8001562:	68b8      	ldr	r0, [r7, #8]
 8001564:	f000 f87e 	bl	8001664 <DS18B20_Is>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <DS18B20_SetResolution+0x1e>
		return 0;
 800156e:	2300      	movs	r3, #0
 8001570:	e074      	b.n	800165c <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 fc80 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fe36 	bl	80021ec <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001580:	21be      	movs	r1, #190	; 0xbe
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 fcfe 	bl	8001f84 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fd18 	bl	8001fbe <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 fd15 	bl	8001fbe <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 fd12 	bl	8001fbe <OneWire_ReadByte>
 800159a:	4603      	mov	r3, r0
 800159c:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fd0d 	bl	8001fbe <OneWire_ReadByte>
 80015a4:	4603      	mov	r3, r0
 80015a6:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fd08 	bl	8001fbe <OneWire_ReadByte>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	d108      	bne.n	80015ca <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015be:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	f023 0320 	bic.w	r3, r3, #32
 80015c6:	75fb      	strb	r3, [r7, #23]
 80015c8:	e022      	b.n	8001610 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d108      	bne.n	80015e2 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015d6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	f043 0320 	orr.w	r3, r3, #32
 80015de:	75fb      	strb	r3, [r7, #23]
 80015e0:	e016      	b.n	8001610 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b0b      	cmp	r3, #11
 80015e6:	d108      	bne.n	80015fa <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ee:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	f023 0320 	bic.w	r3, r3, #32
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	e00a      	b.n	8001610 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d107      	bne.n	8001610 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001606:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fc31 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fde7 	bl	80021ec <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800161e:	214e      	movs	r1, #78	; 0x4e
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fcaf 	bl	8001f84 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001626:	7dbb      	ldrb	r3, [r7, #22]
 8001628:	4619      	mov	r1, r3
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 fcaa 	bl	8001f84 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001630:	7d7b      	ldrb	r3, [r7, #21]
 8001632:	4619      	mov	r1, r3
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fca5 	bl	8001f84 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	4619      	mov	r1, r3
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fca0 	bl	8001f84 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 fc17 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fdcd 	bl	80021ec <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001652:	2148      	movs	r1, #72	; 0x48
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fc95 	bl	8001f84 <OneWire_WriteByte>

	return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b28      	cmp	r3, #40	; 0x28
 8001672:	d101      	bne.n	8001678 <DS18B20_Is+0x14>
		return 1;
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <DS18B20_Is+0x16>

	return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff ffe7 	bl	8001664 <DS18B20_Is>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800169c:	2300      	movs	r3, #0
 800169e:	e049      	b.n	8001734 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fbe9 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fd9f 	bl	80021ec <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80016ae:	21be      	movs	r1, #190	; 0xbe
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fc67 	bl	8001f84 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fc81 	bl	8001fbe <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fc7e 	bl	8001fbe <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fc7b 	bl	8001fbe <OneWire_ReadByte>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fc76 	bl	8001fbe <OneWire_ReadByte>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fc71 	bl	8001fbe <OneWire_ReadByte>
 80016dc:	4603      	mov	r3, r0
 80016de:	737b      	strb	r3, [r7, #13]

	th = 125;
 80016e0:	237d      	movs	r3, #125	; 0x7d
 80016e2:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 80016e4:	23c9      	movs	r3, #201	; 0xc9
 80016e6:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fbc5 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80016ee:	6839      	ldr	r1, [r7, #0]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fd7b 	bl	80021ec <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80016f6:	214e      	movs	r1, #78	; 0x4e
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fc43 	bl	8001f84 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fc3e 	bl	8001f84 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fc39 	bl	8001f84 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001712:	7b7b      	ldrb	r3, [r7, #13]
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fc34 	bl	8001f84 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fbab 	bl	8001e78 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fd61 	bl	80021ec <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800172a:	2148      	movs	r1, #72	; 0x48
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fc29 	bl	8001f84 <OneWire_WriteByte>

	return 1;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fbf3 	bl	8001f30 <OneWire_ReadBit>
 800174a:	4603      	mov	r3, r0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <gpioInit>:
#endif



bool gpioInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
  bool ret = true;
 800175a:	2301      	movs	r3, #1
 800175c:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <gpioInit+0xa0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <gpioInit+0xa0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <gpioInit+0xa0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <gpioInit+0xa0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <gpioInit+0xa0>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <gpioInit+0xa0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e01e      	b.n	80017da <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	b2d8      	uxtb	r0, r3
 80017a0:	4915      	ldr	r1, [pc, #84]	; (80017f8 <gpioInit+0xa4>)
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3308      	adds	r3, #8
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4619      	mov	r1, r3
 80017b4:	f000 f826 	bl	8001804 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <gpioInit+0xa4>)
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	330b      	adds	r3, #11
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	f000 f880 	bl	80018d4 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b0e      	cmp	r3, #14
 80017de:	dddd      	ble.n	800179c <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <gpioInit+0xa8>)
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <gpioInit+0xac>)
 80017e4:	f7ff fc66 	bl	80010b4 <cliAdd>
#endif

  return ret;
 80017e8:	7afb      	ldrb	r3, [r7, #11]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	08004934 	.word	0x08004934
 80017fc:	080019ed 	.word	0x080019ed
 8001800:	0800486c 	.word	0x0800486c

08001804 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	460a      	mov	r2, r1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8001814:	2301      	movs	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b0e      	cmp	r3, #14
 800182c:	d901      	bls.n	8001832 <gpioPinMode+0x2e>
  {
    return false;
 800182e:	2300      	movs	r3, #0
 8001830:	e049      	b.n	80018c6 <gpioPinMode+0xc2>
  }

  switch(mode)
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d82d      	bhi.n	8001894 <gpioPinMode+0x90>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <gpioPinMode+0x3c>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001859 	.word	0x08001859
 8001844:	08001863 	.word	0x08001863
 8001848:	0800186d 	.word	0x0800186d
 800184c:	08001877 	.word	0x08001877
 8001850:	08001881 	.word	0x08001881
 8001854:	0800188b 	.word	0x0800188b
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
      break;
 8001860:	e018      	b.n	8001894 <gpioPinMode+0x90>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001866:	2301      	movs	r3, #1
 8001868:	613b      	str	r3, [r7, #16]
      break;
 800186a:	e013      	b.n	8001894 <gpioPinMode+0x90>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
      break;
 8001874:	e00e      	b.n	8001894 <gpioPinMode+0x90>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
      break;
 800187e:	e009      	b.n	8001894 <gpioPinMode+0x90>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
      break;
 8001888:	e004      	b.n	8001894 <gpioPinMode+0x90>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800188e:	2302      	movs	r3, #2
 8001890:	613b      	str	r3, [r7, #16]
      break;
 8001892:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8001894:	79fa      	ldrb	r2, [r7, #7]
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <gpioPinMode+0xcc>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	4909      	ldr	r1, [pc, #36]	; (80018d0 <gpioPinMode+0xcc>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f107 0208 	add.w	r2, r7, #8
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 f932 	bl	8002b28 <HAL_GPIO_Init>

  return ret;
 80018c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	08004934 	.word	0x08004934

080018d4 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b0e      	cmp	r3, #14
 80018e8:	d842      	bhi.n	8001970 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01f      	beq.n	8001930 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	4921      	ldr	r1, [pc, #132]	; (8001978 <gpioPinWrite+0xa4>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	491d      	ldr	r1, [pc, #116]	; (8001978 <gpioPinWrite+0xa4>)
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29c      	uxth	r4, r3
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	4918      	ldr	r1, [pc, #96]	; (8001978 <gpioPinWrite+0xa4>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3309      	adds	r3, #9
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4621      	mov	r1, r4
 800192a:	f001 fa97 	bl	8002e5c <HAL_GPIO_WritePin>
 800192e:	e020      	b.n	8001972 <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8001930:	79fa      	ldrb	r2, [r7, #7]
 8001932:	4911      	ldr	r1, [pc, #68]	; (8001978 <gpioPinWrite+0xa4>)
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	79fa      	ldrb	r2, [r7, #7]
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <gpioPinWrite+0xa4>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3304      	adds	r3, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29c      	uxth	r4, r3
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <gpioPinWrite+0xa4>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	330a      	adds	r3, #10
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4621      	mov	r1, r4
 800196a:	f001 fa77 	bl	8002e5c <HAL_GPIO_WritePin>
 800196e:	e000      	b.n	8001972 <gpioPinWrite+0x9e>
    return;
 8001970:	bf00      	nop
  }
}
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	08004934 	.word	0x08004934

0800197c <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b0e      	cmp	r3, #14
 800198e:	d901      	bls.n	8001994 <gpioPinRead+0x18>
  {
    return false;
 8001990:	2300      	movs	r3, #0
 8001992:	e024      	b.n	80019de <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	4914      	ldr	r1, [pc, #80]	; (80019e8 <gpioPinRead+0x6c>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	4910      	ldr	r1, [pc, #64]	; (80019e8 <gpioPinRead+0x6c>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3304      	adds	r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	f001 fa37 	bl	8002e2c <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	4618      	mov	r0, r3
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	4908      	ldr	r1, [pc, #32]	; (80019e8 <gpioPinRead+0x6c>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3309      	adds	r3, #9
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4298      	cmp	r0, r3
 80019d6:	d101      	bne.n	80019dc <gpioPinRead+0x60>
  {
    ret = true;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	08004934 	.word	0x08004934

080019ec <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80019f4:	2300      	movs	r3, #0
 80019f6:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d128      	bne.n	8001a52 <cliGpio+0x66>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	4947      	ldr	r1, [pc, #284]	; (8001b24 <cliGpio+0x138>)
 8001a06:	2000      	movs	r0, #0
 8001a08:	4798      	blx	r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8001a10:	e018      	b.n	8001a44 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e00c      	b.n	8001a32 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffad 	bl	800197c <gpioPinRead>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4840      	ldr	r0, [pc, #256]	; (8001b28 <cliGpio+0x13c>)
 8001a28:	f7ff fad6 	bl	8000fd8 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b0e      	cmp	r3, #14
 8001a36:	ddef      	ble.n	8001a18 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8001a38:	483c      	ldr	r0, [pc, #240]	; (8001b2c <cliGpio+0x140>)
 8001a3a:	f7ff facd 	bl	8000fd8 <cliPrintf>
      delay(100);
 8001a3e:	2064      	movs	r0, #100	; 0x64
 8001a40:	f7fe fe24 	bl	800068c <delay>
    while(cliKeepLoop())
 8001a44:	f7ff fb20 	bl	8001088 <cliKeepLoop>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1e1      	bne.n	8001a12 <cliGpio+0x26>
    }
    ret = true;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <cliGpio+0xb6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4934      	ldr	r1, [pc, #208]	; (8001b30 <cliGpio+0x144>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2001      	movs	r0, #1
 8001a70:	4798      	blx	r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8001a76:	e00d      	b.n	8001a94 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001a78:	7bfc      	ldrb	r4, [r7, #15]
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff7d 	bl	800197c <gpioPinRead>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4621      	mov	r1, r4
 8001a88:	482a      	ldr	r0, [pc, #168]	; (8001b34 <cliGpio+0x148>)
 8001a8a:	f7ff faa5 	bl	8000fd8 <cliPrintf>
      delay(100);
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f7fe fdfc 	bl	800068c <delay>
    while(cliKeepLoop())
 8001a94:	f7ff faf8 	bl	8001088 <cliKeepLoop>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ec      	bne.n	8001a78 <cliGpio+0x8c>
    }

    ret = true;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d126      	bne.n	8001af8 <cliGpio+0x10c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4922      	ldr	r1, [pc, #136]	; (8001b38 <cliGpio+0x14c>)
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	4798      	blx	r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01e      	beq.n	8001af8 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2001      	movs	r0, #1
 8001ac0:	4798      	blx	r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2002      	movs	r0, #2
 8001acc:	4798      	blx	r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8001ad2:	7b7b      	ldrb	r3, [r7, #13]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	7bbb      	ldrb	r3, [r7, #14]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fef6 	bl	80018d4 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	7b7a      	ldrb	r2, [r7, #13]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4813      	ldr	r0, [pc, #76]	; (8001b3c <cliGpio+0x150>)
 8001af0:	f7ff fa72 	bl	8000fd8 <cliPrintf>
    ret = true;
 8001af4:	2301      	movs	r3, #1
 8001af6:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <cliGpio+0x154>)
 8001b06:	f7ff fa67 	bl	8000fd8 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8001b0a:	210e      	movs	r1, #14
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <cliGpio+0x158>)
 8001b0e:	f7ff fa63 	bl	8000fd8 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8001b12:	210e      	movs	r1, #14
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <cliGpio+0x15c>)
 8001b16:	f7ff fa5f 	bl	8000fd8 <cliPrintf>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	08004874 	.word	0x08004874
 8001b28:	0800487c 	.word	0x0800487c
 8001b2c:	08004880 	.word	0x08004880
 8001b30:	08004884 	.word	0x08004884
 8001b34:	0800488c 	.word	0x0800488c
 8001b38:	080048a0 	.word	0x080048a0
 8001b3c:	080048a8 	.word	0x080048a8
 8001b40:	080048bc 	.word	0x080048bc
 8001b44:	080048c8 	.word	0x080048c8
 8001b48:	080048dc 	.word	0x080048dc

08001b4c <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
  bool ret = true;
 8001b52:	2301      	movs	r3, #1
 8001b54:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <ledInit+0x8c>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <ledInit+0x8c>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6313      	str	r3, [r2, #48]	; 0x30
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <ledInit+0x8c>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e016      	b.n	8001bc0 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <ledInit+0x90>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	889b      	ldrh	r3, [r3, #4]
 8001b9c:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <ledInit+0x90>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ba6:	1d3a      	adds	r2, r7, #4
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 ffbc 	bl	8002b28 <HAL_GPIO_Init>

    ledOff(i);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f837 	bl	8001c28 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dde5      	ble.n	8001b92 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8001bc6:	4906      	ldr	r1, [pc, #24]	; (8001be0 <ledInit+0x94>)
 8001bc8:	4806      	ldr	r0, [pc, #24]	; (8001be4 <ledInit+0x98>)
 8001bca:	f7ff fa73 	bl	80010b4 <cliAdd>
#endif

  return ret;
 8001bce:	7efb      	ldrb	r3, [r7, #27]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	20000020 	.word	0x20000020
 8001be0:	08001ca1 	.word	0x08001ca1
 8001be4:	080048f8 	.word	0x080048f8

08001be8 <ledOn>:

void ledOn(uint8_t ch)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d111      	bne.n	8001c1c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <ledOn+0x3c>)
 8001bfc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <ledOn+0x3c>)
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	8899      	ldrh	r1, [r3, #4]
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <ledOn+0x3c>)
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	799b      	ldrb	r3, [r3, #6]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f001 f921 	bl	8002e5c <HAL_GPIO_WritePin>
 8001c1a:	e000      	b.n	8001c1e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8001c1c:	bf00      	nop
}
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000020 	.word	0x20000020

08001c28 <ledOff>:

void ledOff(uint8_t ch)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d111      	bne.n	8001c5c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <ledOff+0x3c>)
 8001c3c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <ledOff+0x3c>)
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	8899      	ldrh	r1, [r3, #4]
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <ledOff+0x3c>)
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	79db      	ldrb	r3, [r3, #7]
 8001c54:	461a      	mov	r2, r3
 8001c56:	f001 f901 	bl	8002e5c <HAL_GPIO_WritePin>
 8001c5a:	e000      	b.n	8001c5e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8001c5c:	bf00      	nop
}
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000020 	.word	0x20000020

08001c68 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10c      	bne.n	8001c92 <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <ledToggle+0x34>)
 8001c7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <ledToggle+0x34>)
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	889b      	ldrh	r3, [r3, #4]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f001 f8ff 	bl	8002e8e <HAL_GPIO_TogglePin>
 8001c90:	e000      	b.n	8001c94 <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 8001c92:	bf00      	nop
}
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000020 	.word	0x20000020

08001ca0 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d133      	bne.n	8001d1c <cliLed+0x7c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	491f      	ldr	r1, [pc, #124]	; (8001d38 <cliLed+0x98>)
 8001cba:	2000      	movs	r0, #0
 8001cbc:	4798      	blx	r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02b      	beq.n	8001d1c <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2001      	movs	r0, #1
 8001cca:	4798      	blx	r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	4798      	blx	r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8001cdc:	7dbb      	ldrb	r3, [r7, #22]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <cliLed+0x48>
    {
      led_ch--;
 8001ce2:	7dbb      	ldrb	r3, [r7, #22]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8001ce8:	f7fe fcdb 	bl	80006a2 <millis>
 8001cec:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8001cee:	e00e      	b.n	8001d0e <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8001cf0:	f7fe fcd7 	bl	80006a2 <millis>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d806      	bhi.n	8001d0e <cliLed+0x6e>
      {
        pre_time = millis();
 8001d00:	f7fe fccf 	bl	80006a2 <millis>
 8001d04:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8001d06:	7dbb      	ldrb	r3, [r7, #22]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffad 	bl	8001c68 <ledToggle>
    while(cliKeepLoop())
 8001d0e:	f7ff f9bb 	bl	8001088 <cliKeepLoop>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1eb      	bne.n	8001cf0 <cliLed+0x50>
      }
    }

    ret = true;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	f083 0301 	eor.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <cliLed+0x9c>)
 8001d2c:	f7ff f954 	bl	8000fd8 <cliPrintf>
  }
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	080048fc 	.word	0x080048fc
 8001d3c:	08004904 	.word	0x08004904

08001d40 <DWT_Delay_us>:
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <DWT_Delay_us+0x3c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001d4e:	f001 fcc1 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <DWT_Delay_us+0x40>)
 8001d56:	fba3 2302 	umull	r2, r3, r3, r2
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001d64:	bf00      	nop
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <DWT_Delay_us+0x3c>)
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad2      	subs	r2, r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d3f8      	bcc.n	8001d66 <DWT_Delay_us+0x26>
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	e0001000 	.word	0xe0001000
 8001d80:	431bde83 	.word	0x431bde83

08001d84 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	619a      	str	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	889a      	ldrh	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b088      	sub	sp, #32
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f107 020c 	add.w	r2, r7, #12
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fe9e 	bl	8002b28 <HAL_GPIO_Init>
}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001dfc:	2311      	movs	r3, #17
 8001dfe:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e04:	2302      	movs	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	889b      	ldrh	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fe85 	bl	8002b28 <HAL_GPIO_Init>

}
 8001e1e:	bf00      	nop
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff ffd7 	bl	8001df4 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff ffac 	bl	8001da4 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8001e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e50:	f7ff ff76 	bl	8001d40 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff ff95 	bl	8001d84 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8001e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e5e:	f7ff ff6f 	bl	8001d40 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff ff9e 	bl	8001da4 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8001e68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e6c:	f7ff ff68 	bl	8001d40 <DWT_Delay_us>
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff7f 	bl	8001d84 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffb4 	bl	8001df4 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8001e8c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001e90:	f7ff ff56 	bl	8001d40 <DWT_Delay_us>
	DWT_Delay_us(20);
 8001e94:	2014      	movs	r0, #20
 8001e96:	f7ff ff53 	bl	8001d40 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff91 	bl	8001dc2 <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8001ea0:	2046      	movs	r0, #70	; 0x46
 8001ea2:	f7ff ff4d 	bl	8001d40 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	889b      	ldrh	r3, [r3, #4]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f000 ffbb 	bl	8002e2c <HAL_GPIO_ReadPin>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8001eba:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001ebe:	f7ff ff3f 	bl	8001d40 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff50 	bl	8001d84 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff85 	bl	8001df4 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8001eea:	200a      	movs	r0, #10
 8001eec:	f7ff ff28 	bl	8001d40 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff66 	bl	8001dc2 <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8001ef6:	2037      	movs	r0, #55	; 0x37
 8001ef8:	f7ff ff22 	bl	8001d40 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff60 	bl	8001dc2 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8001f02:	e011      	b.n	8001f28 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff3d 	bl	8001d84 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff72 	bl	8001df4 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8001f10:	2041      	movs	r0, #65	; 0x41
 8001f12:	f7ff ff15 	bl	8001d40 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff53 	bl	8001dc2 <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8001f1c:	2005      	movs	r0, #5
 8001f1e:	f7ff ff0f 	bl	8001d40 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff4d 	bl	8001dc2 <ONEWIRE_INPUT>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff21 	bl	8001d84 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff56 	bl	8001df4 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f7ff fef9 	bl	8001d40 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff37 	bl	8001dc2 <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8001f54:	200a      	movs	r0, #10
 8001f56:	f7ff fef3 	bl	8001d40 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	889b      	ldrh	r3, [r3, #4]
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 ff61 	bl	8002e2c <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8001f74:	2032      	movs	r0, #50	; 0x32
 8001f76:	f7ff fee3 	bl	8001d40 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001f90:	2308      	movs	r3, #8
 8001f92:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8001f94:	e00a      	b.n	8001fac <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff93 	bl	8001ecc <OneWire_WriteBit>
		byte >>= 1;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	73fa      	strb	r2, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ef      	bne.n	8001f96 <OneWire_WriteByte+0x12>
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001fce:	e00d      	b.n	8001fec <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffaa 	bl	8001f30 <OneWire_ReadBit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	b25a      	sxtb	r2, r3
 8001fe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	73fa      	strb	r2, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ec      	bne.n	8001fd0 <OneWire_ReadByte+0x12>
	}

	return byte;
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f816 	bl	800203a <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800200e:	21f0      	movs	r1, #240	; 0xf0
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f825 	bl	8002060 <OneWire_Search>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002028:	21f0      	movs	r1, #240	; 0xf0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f818 	bl	8002060 <OneWire_Search>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	71da      	strb	r2, [r3, #7]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7a1b      	ldrb	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 809a 	bne.w	80021be <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fef4 	bl	8001e78 <OneWire_Reset>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	71da      	strb	r2, [r3, #7]
			return 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e09b      	b.n	80021e4 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff67 	bl	8001f84 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff3a 	bl	8001f30 <OneWire_ReadBit>
 80020bc:	4603      	mov	r3, r0
 80020be:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff35 	bl	8001f30 <OneWire_ReadBit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80020ca:	7a7b      	ldrb	r3, [r7, #9]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <OneWire_Search+0x76>
 80020d0:	7a3b      	ldrb	r3, [r7, #8]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d064      	beq.n	80021a0 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80020d6:	7a7a      	ldrb	r2, [r7, #9]
 80020d8:	7a3b      	ldrb	r3, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d002      	beq.n	80020e4 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80020de:	7a7b      	ldrb	r3, [r7, #9]
 80020e0:	72bb      	strb	r3, [r7, #10]
 80020e2:	e026      	b.n	8002132 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	799b      	ldrb	r3, [r3, #6]
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d20d      	bcs.n	800210a <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	7a5a      	ldrb	r2, [r3, #9]
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	72bb      	strb	r3, [r7, #10]
 8002108:	e008      	b.n	800211c <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	429a      	cmp	r2, r3
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 800211c:	7abb      	ldrb	r3, [r7, #10]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8002126:	7bbb      	ldrb	r3, [r7, #14]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d802      	bhi.n	8002132 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7bba      	ldrb	r2, [r7, #14]
 8002130:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8002132:	7abb      	ldrb	r3, [r7, #10]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10c      	bne.n	8002152 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002138:	7b7b      	ldrb	r3, [r7, #13]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	7a59      	ldrb	r1, [r3, #9]
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	7afa      	ldrb	r2, [r7, #11]
 8002144:	430a      	orrs	r2, r1
 8002146:	b2d1      	uxtb	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	460a      	mov	r2, r1
 800214e:	725a      	strb	r2, [r3, #9]
 8002150:	e010      	b.n	8002174 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	7a5b      	ldrb	r3, [r3, #9]
 800215a:	b25a      	sxtb	r2, r3
 800215c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002160:	43db      	mvns	r3, r3
 8002162:	b25b      	sxtb	r3, r3
 8002164:	4013      	ands	r3, r2
 8002166:	b25a      	sxtb	r2, r3
 8002168:	7b7b      	ldrb	r3, [r7, #13]
 800216a:	b2d1      	uxtb	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4413      	add	r3, r2
 8002170:	460a      	mov	r2, r1
 8002172:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8002174:	7abb      	ldrb	r3, [r7, #10]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fea7 	bl	8001ecc <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	3301      	adds	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8002184:	7afb      	ldrb	r3, [r7, #11]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	3301      	adds	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 800219a:	7b7b      	ldrb	r3, [r7, #13]
 800219c:	2b07      	cmp	r3, #7
 800219e:	d98a      	bls.n	80020b6 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d90b      	bls.n	80021be <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7bba      	ldrb	r2, [r7, #14]
 80021aa:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	799b      	ldrb	r3, [r3, #6]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80021be:	7b3b      	ldrb	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <OneWire_Search+0x16c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7a5b      	ldrb	r3, [r3, #9]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80021e2:	7b3b      	ldrb	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80021f6:	2155      	movs	r1, #85	; 0x55
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fec3 	bl	8001f84 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e00a      	b.n	800221a <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff feb8 	bl	8001f84 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	3301      	adds	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9f1      	bls.n	8002204 <OneWire_SelectWithPointer+0x18>
	}
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e00a      	b.n	800224e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	440b      	add	r3, r1
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	440a      	add	r2, r1
 8002244:	7a52      	ldrb	r2, [r2, #9]
 8002246:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	3301      	adds	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b07      	cmp	r3, #7
 8002252:	d9f1      	bls.n	8002238 <OneWire_GetFullROM+0x10>
	}
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8002270:	e022      	b.n	80022b8 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800227c:	2308      	movs	r3, #8
 800227e:	737b      	strb	r3, [r7, #13]
 8002280:	e017      	b.n	80022b2 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	7bbb      	ldrb	r3, [r7, #14]
 8002286:	4053      	eors	r3, r2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8002296:	7b3b      	ldrb	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80022a2:	43db      	mvns	r3, r3
 80022a4:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80022a6:	7bbb      	ldrb	r3, [r7, #14]
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80022ac:	7b7b      	ldrb	r3, [r7, #13]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	737b      	strb	r3, [r7, #13]
 80022b2:	7b7b      	ldrb	r3, [r7, #13]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e4      	bne.n	8002282 <OneWire_CRC8+0x22>
	while (len--) {
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	70fa      	strb	r2, [r7, #3]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1d7      	bne.n	8002272 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_SPI_ErrorCallback>:
}



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_SPI_ErrorCallback+0x28>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d102      	bne.n	80022ec <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_SPI_ErrorCallback+0x28>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	709a      	strb	r2, [r3, #2]
  }
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	2000053c 	.word	0x2000053c

080022fc <uartAvailable>:

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <uartAvailable+0x1a>
 8002310:	2b01      	cmp	r3, #1
 8002312:	d018      	beq.n	8002346 <uartAvailable+0x4a>
 8002314:	e02f      	b.n	8002376 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <uartAvailable+0x84>)
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	3308      	adds	r3, #8
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <uartAvailable+0x88>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	1a8a      	subs	r2, r1, r2
 800232c:	4914      	ldr	r1, [pc, #80]	; (8002380 <uartAvailable+0x84>)
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <uartAvailable+0x84>)
 800233a:	4413      	add	r3, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fb1c 	bl	800097a <qbufferAvailable>
 8002342:	60f8      	str	r0, [r7, #12]
      break;
 8002344:	e017      	b.n	8002376 <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <uartAvailable+0x84>)
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	3308      	adds	r3, #8
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <uartAvailable+0x88>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	1a8a      	subs	r2, r1, r2
 800235c:	4908      	ldr	r1, [pc, #32]	; (8002380 <uartAvailable+0x84>)
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	440b      	add	r3, r1
 8002362:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4a05      	ldr	r2, [pc, #20]	; (8002380 <uartAvailable+0x84>)
 800236a:	4413      	add	r3, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fb04 	bl	800097a <qbufferAvailable>
 8002372:	60f8      	str	r0, [r7, #12]
      break;
 8002374:	bf00      	nop
  }

  return ret;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200000b8 	.word	0x200000b8
 8002384:	20000668 	.word	0x20000668

08002388 <uartWrite>:

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <uartWrite+0xa8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a23      	ldr	r2, [pc, #140]	; (8002430 <uartWrite+0xa8>)
 80023a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <uartWrite+0xa8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	203a      	movs	r0, #58	; 0x3a
 80023bc:	f000 f9d1 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023c0:	203a      	movs	r0, #58	; 0x3a
 80023c2:	f000 f9ea 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2046      	movs	r0, #70	; 0x46
 80023cc:	f000 f9c9 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80023d0:	2046      	movs	r0, #70	; 0x46
 80023d2:	f000 f9e2 	bl	800279a <HAL_NVIC_EnableIRQ>


  switch(ch)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <uartWrite+0x5a>
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d00f      	beq.n	8002400 <uartWrite+0x78>
 80023e0:	e020      	b.n	8002424 <uartWrite+0x9c>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	2364      	movs	r3, #100	; 0x64
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <uartWrite+0xac>)
 80023ec:	f001 fa92 	bl	8003914 <HAL_UART_Transmit>
 80023f0:	4603      	mov	r3, r0
 80023f2:	76fb      	strb	r3, [r7, #27]
        if (status == HAL_OK)
 80023f4:	7efb      	ldrb	r3, [r7, #27]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d111      	bne.n	800241e <uartWrite+0x96>
        {
          ret = length;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	61fb      	str	r3, [r7, #28]
        }
      break;
 80023fe:	e00e      	b.n	800241e <uartWrite+0x96>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	b29a      	uxth	r2, r3
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	480a      	ldr	r0, [pc, #40]	; (8002434 <uartWrite+0xac>)
 800240a:	f001 fa83 	bl	8003914 <HAL_UART_Transmit>
 800240e:	4603      	mov	r3, r0
 8002410:	76fb      	strb	r3, [r7, #27]
      if (status == HAL_OK)
 8002412:	7efb      	ldrb	r3, [r7, #27]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <uartWrite+0x9a>
      {
        ret = length;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800241c:	e001      	b.n	8002422 <uartWrite+0x9a>
      break;
 800241e:	bf00      	nop
 8002420:	e000      	b.n	8002424 <uartWrite+0x9c>
      break;
 8002422:	bf00      	nop
  }

  return ret;
 8002424:	69fb      	ldr	r3, [r7, #28]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	200006c8 	.word	0x200006c8

08002438 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <hwInit>:




void hwInit(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  bspInit();
 8002464:	f7fe f8e8 	bl	8000638 <bspInit>

//  cliInit();
  DWT_Delay_Init();
 8002468:	f7fe faa0 	bl	80009ac <DWT_Delay_Init>
  ledInit();
 800246c:	f7ff fb6e 	bl	8001b4c <ledInit>
  buttonInit();
 8002470:	f7fe facc 	bl	8000a0c <buttonInit>
  gpioInit();
 8002474:	f7ff f96e 	bl	8001754 <gpioInit>
  Ds18b20_Init();
 8002478:	f7fe fe66 	bl	8001148 <Ds18b20_Init>
  LCD_INIT();
 800247c:	f7fe fce6 	bl	8000e4c <LCD_INIT>
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_Init+0x40>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_Init+0x40>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_Init+0x40>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 f94d 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f000 f808 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b8:	f7fe f966 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f965 	bl	80027b6 <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 f92d 	bl	8002762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000000 	.word	0x20000000
 8002520:	2000002c 	.word	0x2000002c
 8002524:	20000028 	.word	0x20000028

08002528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x20>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x24>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_IncTick+0x24>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000002c 	.word	0x2000002c
 800254c:	20000708 	.word	0x20000708

08002550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetTick+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000708 	.word	0x20000708

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff ffee 	bl	8002550 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_Delay+0x40>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffde 	bl	8002550 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000002c 	.word	0x2000002c

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff3e 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff8e 	bl	80026a0 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff31 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e00c      	b.n	8002806 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2205      	movs	r2, #5
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_DMA_IRQHandler+0x258>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a92      	ldr	r2, [pc, #584]	; (8002a70 <HAL_DMA_IRQHandler+0x25c>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	2208      	movs	r2, #8
 8002840:	409a      	lsls	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2208      	movs	r2, #8
 800286e:	409a      	lsls	r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2204      	movs	r2, #4
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2204      	movs	r2, #4
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0204 	orr.w	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2210      	movs	r2, #16
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d043      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d03c      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2210      	movs	r2, #16
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d024      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e01f      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e016      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0208 	bic.w	r2, r2, #8
 8002972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2220      	movs	r2, #32
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 808e 	beq.w	8002ab2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8086 	beq.w	8002ab2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2220      	movs	r2, #32
 80029ac:	409a      	lsls	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d136      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0216 	bic.w	r2, r2, #22
 80029cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_DMA_IRQHandler+0x1da>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0208 	bic.w	r2, r2, #8
 80029fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	223f      	movs	r2, #63	; 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07d      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
        }
        return;
 8002a2a:	e078      	b.n	8002b1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01c      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d108      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d030      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e02b      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d027      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e022      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d032      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d022      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d307      	bcc.n	8002afa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f2      	bne.n	8002ade <HAL_DMA_IRQHandler+0x2ca>
 8002af8:	e000      	b.n	8002afc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002afa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b1e:	bf00      	nop
    }
  }
}
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e159      	b.n	8002df8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f040 8148 	bne.w	8002df2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d00b      	beq.n	8002b82 <HAL_GPIO_Init+0x5a>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b76:	2b11      	cmp	r3, #17
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d130      	bne.n	8002be4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0201 	and.w	r2, r3, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0xfc>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b12      	cmp	r3, #18
 8002c22:	d123      	bne.n	8002c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	220f      	movs	r2, #15
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0203 	and.w	r2, r3, #3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a2 	beq.w	8002df2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbe:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cca:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a48      	ldr	r2, [pc, #288]	; (8002e14 <HAL_GPIO_Init+0x2ec>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x202>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_GPIO_Init+0x2f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x1fe>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a46      	ldr	r2, [pc, #280]	; (8002e1c <HAL_GPIO_Init+0x2f4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_GPIO_Init+0x2f8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x1f6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a44      	ldr	r2, [pc, #272]	; (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x1f2>
 8002d16:	2304      	movs	r3, #4
 8002d18:	e008      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e004      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e002      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f002 0203 	and.w	r2, r2, #3
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	4093      	lsls	r3, r2
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d3c:	4934      	ldr	r1, [pc, #208]	; (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	3302      	adds	r3, #2
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d74:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	f67f aea2 	bls.w	8002b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	3724      	adds	r7, #36	; 0x24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d104      	bne.n	8002eb2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	041a      	lsls	r2, r3, #16
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e25b      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d075      	beq.n	8002fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee2:	4ba3      	ldr	r3, [pc, #652]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d00c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4ba0      	ldr	r3, [pc, #640]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d112      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b9d      	ldr	r3, [pc, #628]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	4b99      	ldr	r3, [pc, #612]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05b      	beq.n	8002fcc <HAL_RCC_OscConfig+0x108>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d157      	bne.n	8002fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e236      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d106      	bne.n	8002f38 <HAL_RCC_OscConfig+0x74>
 8002f2a:	4b91      	ldr	r3, [pc, #580]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a90      	ldr	r2, [pc, #576]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e01d      	b.n	8002f74 <HAL_RCC_OscConfig+0xb0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x98>
 8002f42:	4b8b      	ldr	r3, [pc, #556]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b88      	ldr	r3, [pc, #544]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a87      	ldr	r2, [pc, #540]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0xb0>
 8002f5c:	4b84      	ldr	r3, [pc, #528]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a83      	ldr	r2, [pc, #524]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b81      	ldr	r3, [pc, #516]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a80      	ldr	r2, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff fae8 	bl	8002550 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7ff fae4 	bl	8002550 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1fb      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b76      	ldr	r3, [pc, #472]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0xc0>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff fad4 	bl	8002550 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7ff fad0 	bl	8002550 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1e7      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0xe8>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d063      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fda:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d11c      	bne.n	800302c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	4b5c      	ldr	r3, [pc, #368]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x152>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e1bb      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b56      	ldr	r3, [pc, #344]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4952      	ldr	r1, [pc, #328]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	e03a      	b.n	80030a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_OscConfig+0x2b0>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7ff fa89 	bl	8002550 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003042:	f7ff fa85 	bl	8002550 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e19c      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4940      	ldr	r1, [pc, #256]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
 8003074:	e015      	b.n	80030a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_OscConfig+0x2b0>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7ff fa68 	bl	8002550 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003084:	f7ff fa64 	bl	8002550 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e17b      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d030      	beq.n	8003110 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x2b4>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7ff fa48 	bl	8002550 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c4:	f7ff fa44 	bl	8002550 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e15b      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x200>
 80030e2:	e015      	b.n	8003110 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e4:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_OscConfig+0x2b4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7ff fa31 	bl	8002550 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f2:	f7ff fa2d 	bl	8002550 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e144      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a0 	beq.w	800325e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x2b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d121      	bne.n	800319e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_RCC_OscConfig+0x2b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <HAL_RCC_OscConfig+0x2b8>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7ff f9f3 	bl	8002550 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e011      	b.n	8003192 <HAL_RCC_OscConfig+0x2ce>
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	42470000 	.word	0x42470000
 8003178:	42470e80 	.word	0x42470e80
 800317c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7ff f9e6 	bl	8002550 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0fd      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
 80031a6:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a7c      	ldr	r2, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	e01c      	b.n	80031ee <HAL_RCC_OscConfig+0x32a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x312>
 80031bc:	4b77      	ldr	r3, [pc, #476]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a76      	ldr	r2, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	4b74      	ldr	r3, [pc, #464]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a73      	ldr	r2, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	e00b      	b.n	80031ee <HAL_RCC_OscConfig+0x32a>
 80031d6:	4b71      	ldr	r3, [pc, #452]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a70      	ldr	r2, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	4b6e      	ldr	r3, [pc, #440]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a6d      	ldr	r2, [pc, #436]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d015      	beq.n	8003222 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7ff f9ab 	bl	8002550 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7ff f9a7 	bl	8002550 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0bc      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ee      	beq.n	80031fe <HAL_RCC_OscConfig+0x33a>
 8003220:	e014      	b.n	800324c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7ff f995 	bl	8002550 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7ff f991 	bl	8002550 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0a6      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003240:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ee      	bne.n	800322a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003252:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a51      	ldr	r2, [pc, #324]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 8003258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8092 	beq.w	800338c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003268:	4b4c      	ldr	r3, [pc, #304]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d05c      	beq.n	800332e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d141      	bne.n	8003300 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <HAL_RCC_OscConfig+0x4dc>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7ff f965 	bl	8002550 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328a:	f7ff f961 	bl	8002550 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e078      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329c:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	019b      	lsls	r3, r3, #6
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	3b01      	subs	r3, #1
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	061b      	lsls	r3, r3, #24
 80032cc:	4933      	ldr	r1, [pc, #204]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d2:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <HAL_RCC_OscConfig+0x4dc>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7ff f93a 	bl	8002550 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e0:	f7ff f936 	bl	8002550 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04d      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x41c>
 80032fe:	e045      	b.n	800338c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_RCC_OscConfig+0x4dc>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7ff f923 	bl	8002550 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7ff f91f 	bl	8002550 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e036      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003320:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x44a>
 800332c:	e02e      	b.n	800338c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e029      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <HAL_RCC_OscConfig+0x4d8>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	429a      	cmp	r2, r3
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d115      	bne.n	8003388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d10d      	bne.n	8003388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40007000 	.word	0x40007000
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470060 	.word	0x42470060

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cc      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d90c      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d044      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d119      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e067      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4934      	ldr	r1, [pc, #208]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7ff f85c 	bl	8002550 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7ff f858 	bl	8002550 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20c      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	fa21 f303 	lsr.w	r3, r1, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe ffbc 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	08004924 	.word	0x08004924
 8003568:	20000000 	.word	0x20000000
 800356c:	20000028 	.word	0x20000028

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	2300      	movs	r3, #0
 8003580:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003586:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b04      	cmp	r3, #4
 8003590:	d007      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32>
 8003592:	2b08      	cmp	r3, #8
 8003594:	d008      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x38>
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 808d 	bne.w	80036b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800359e:	60bb      	str	r3, [r7, #8]
       break;
 80035a0:	e08c      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a2:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a4:	60bb      	str	r3, [r7, #8]
      break;
 80035a6:	e089      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a8:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b2:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d023      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	ea03 0501 	and.w	r5, r3, r1
 80035d4:	ea04 0602 	and.w	r6, r4, r2
 80035d8:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035da:	fb02 f106 	mul.w	r1, r2, r6
 80035de:	2200      	movs	r2, #0
 80035e0:	fb02 f205 	mul.w	r2, r2, r5
 80035e4:	440a      	add	r2, r1
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035e8:	fba5 0101 	umull	r0, r1, r5, r1
 80035ec:	1853      	adds	r3, r2, r1
 80035ee:	4619      	mov	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	461a      	mov	r2, r3
 80035f8:	4623      	mov	r3, r4
 80035fa:	f7fc fe41 	bl	8000280 <__aeabi_uldivmod>
 80035fe:	4603      	mov	r3, r0
 8003600:	460c      	mov	r4, r1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e049      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	f04f 0400 	mov.w	r4, #0
 8003610:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	ea03 0501 	and.w	r5, r3, r1
 800361c:	ea04 0602 	and.w	r6, r4, r2
 8003620:	4629      	mov	r1, r5
 8003622:	4632      	mov	r2, r6
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	0154      	lsls	r4, r2, #5
 800362e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003632:	014b      	lsls	r3, r1, #5
 8003634:	4619      	mov	r1, r3
 8003636:	4622      	mov	r2, r4
 8003638:	1b49      	subs	r1, r1, r5
 800363a:	eb62 0206 	sbc.w	r2, r2, r6
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	0194      	lsls	r4, r2, #6
 8003648:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800364c:	018b      	lsls	r3, r1, #6
 800364e:	1a5b      	subs	r3, r3, r1
 8003650:	eb64 0402 	sbc.w	r4, r4, r2
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	00e2      	lsls	r2, r4, #3
 800365e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003662:	00d9      	lsls	r1, r3, #3
 8003664:	460b      	mov	r3, r1
 8003666:	4614      	mov	r4, r2
 8003668:	195b      	adds	r3, r3, r5
 800366a:	eb44 0406 	adc.w	r4, r4, r6
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	02a2      	lsls	r2, r4, #10
 8003678:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800367c:	0299      	lsls	r1, r3, #10
 800367e:	460b      	mov	r3, r1
 8003680:	4614      	mov	r4, r2
 8003682:	4618      	mov	r0, r3
 8003684:	4621      	mov	r1, r4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	461a      	mov	r2, r3
 800368e:	4623      	mov	r3, r4
 8003690:	f7fc fdf6 	bl	8000280 <__aeabi_uldivmod>
 8003694:	4603      	mov	r3, r0
 8003696:	460c      	mov	r4, r1
 8003698:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	3301      	adds	r3, #1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	60bb      	str	r3, [r7, #8]
      break;
 80036b4:	e002      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80036b8:	60bb      	str	r3, [r7, #8]
      break;
 80036ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036bc:	68bb      	ldr	r3, [r7, #8]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	017d7840 	.word	0x017d7840

080036d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
    return;
 800372e:	e0d8      	b.n	80038e2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_SPI_IRQHandler+0x66>
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	09db      	lsrs	r3, r3, #7
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
    return;
 8003750:	e0c7      	b.n	80038e2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_SPI_IRQHandler+0x8c>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80b5 	beq.w	80038e2 <HAL_SPI_IRQHandler+0x1f6>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80ae 	beq.w	80038e2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b03      	cmp	r3, #3
 800379c:	d011      	beq.n	80037c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f043 0204 	orr.w	r2, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	e00b      	b.n	80037da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]
        return;
 80037d8:	e083      	b.n	80038e2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d014      	beq.n	8003810 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0208 	orr.w	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	2b00      	cmp	r3, #0
 800383c:	d050      	beq.n	80038e0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800384c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_SPI_IRQHandler+0x17e>
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d034      	beq.n	80038d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0203 	bic.w	r2, r2, #3
 8003878:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d011      	beq.n	80038a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <HAL_SPI_IRQHandler+0x1fc>)
 8003888:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe ff9d 	bl	80027ce <HAL_DMA_Abort_IT>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_SPI_IRQHandler+0x1fc>)
 80038b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ff87 	bl	80027ce <HAL_DMA_Abort_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80038d2:	e003      	b.n	80038dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fe fcfb 	bl	80022d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038da:	e000      	b.n	80038de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80038dc:	bf00      	nop
    return;
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
  }
}
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	080038ed 	.word	0x080038ed

080038ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7fe fce2 	bl	80022d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	f040 8083 	bne.w	8003a3c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_UART_Transmit+0x2e>
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07b      	b.n	8003a3e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_UART_Transmit+0x40>
 8003950:	2302      	movs	r3, #2
 8003952:	e074      	b.n	8003a3e <HAL_UART_Transmit+0x12a>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2221      	movs	r2, #33	; 0x21
 8003966:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800396a:	f7fe fdf1 	bl	8002550 <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003984:	e042      	b.n	8003a0c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	d122      	bne.n	80039e4 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f957 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e042      	b.n	8003a3e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ca:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3302      	adds	r3, #2
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	e017      	b.n	8003a0c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3301      	adds	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	e013      	b.n	8003a0c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f934 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e01f      	b.n	8003a3e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	60ba      	str	r2, [r7, #8]
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1b7      	bne.n	8003986 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f91b 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x52>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9cc 	bl	8003e30 <UART_Receive_IT>
      return;
 8003a98:	e0d1      	b.n	8003c3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80b0 	beq.w	8003c02 <HAL_UART_IRQHandler+0x1ba>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x70>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a5 	beq.w	8003c02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x90>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_UART_IRQHandler+0xb0>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	f043 0202 	orr.w	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_UART_IRQHandler+0xd0>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	f043 0204 	orr.w	r2, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00f      	beq.n	8003b42 <HAL_UART_IRQHandler+0xfa>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_UART_IRQHandler+0xee>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	f043 0208 	orr.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d078      	beq.n	8003c3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_UART_IRQHandler+0x11c>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f966 	bl	8003e30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_UART_IRQHandler+0x144>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d031      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8af 	bl	8003cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d123      	bne.n	8003be8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <HAL_UART_IRQHandler+0x1fc>)
 8003bbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fe02 	bl	80027ce <HAL_DMA_Abort_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bde:	e00e      	b.n	8003bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fe fc29 	bl	8002438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be6:	e00a      	b.n	8003bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fe fc25 	bl	8002438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bee:	e006      	b.n	8003bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fe fc21 	bl	8002438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bfc:	e01e      	b.n	8003c3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfe:	bf00      	nop
    return;
 8003c00:	e01c      	b.n	8003c3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1d6>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f89c 	bl	8003d54 <UART_Transmit_IT>
    return;
 8003c1c:	e00f      	b.n	8003c3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_UART_IRQHandler+0x1f6>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8e4 	bl	8003e00 <UART_EndTransmit_IT>
    return;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c3c:	bf00      	nop
  }
}
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08003d2d 	.word	0x08003d2d

08003c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	e02c      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d028      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c7c:	f7fe fc68 	bl	8002550 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d21d      	bcs.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e00f      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d0c3      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7fe fb76 	bl	8002438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b21      	cmp	r3, #33	; 0x21
 8003d66:	d144      	bne.n	8003df2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d11a      	bne.n	8003da8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	1c9a      	adds	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	621a      	str	r2, [r3, #32]
 8003d9a:	e00e      	b.n	8003dba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]
 8003da6:	e008      	b.n	8003dba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	1c59      	adds	r1, r3, #1
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6211      	str	r1, [r2, #32]
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ddc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff11 	bl	8003c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b22      	cmp	r3, #34	; 0x22
 8003e42:	d171      	bne.n	8003f28 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d123      	bne.n	8003e96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10e      	bne.n	8003e7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	1c9a      	adds	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
 8003e78:	e029      	b.n	8003ece <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
 8003e94:	e01b      	b.n	8003ece <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6858      	ldr	r0, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6291      	str	r1, [r2, #40]	; 0x28
 8003eae:	b2c2      	uxtb	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e00c      	b.n	8003ece <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	1c58      	adds	r0, r3, #1
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	6288      	str	r0, [r1, #40]	; 0x28
 8003ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4619      	mov	r1, r3
 8003edc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d120      	bne.n	8003f24 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0220 	bic.w	r2, r2, #32
 8003ef0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe fa96 	bl	800244c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e002      	b.n	8003f2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <main>:




int main(void)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	af00      	add	r7, sp, #0
  hwInit();
 8003f36:	f7fe fa93 	bl	8002460 <hwInit>
  apInit();
 8003f3a:	f7fc fb21 	bl	8000580 <apInit>

  apMain();
 8003f3e:	f7fc fb2f 	bl	80005a0 <apMain>

  return 0;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	; (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000030 	.word	0x20000030

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4e0d      	ldr	r6, [pc, #52]	; (8003f8c <__libc_init_array+0x38>)
 8003f58:	4c0d      	ldr	r4, [pc, #52]	; (8003f90 <__libc_init_array+0x3c>)
 8003f5a:	1ba4      	subs	r4, r4, r6
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	2500      	movs	r5, #0
 8003f60:	42a5      	cmp	r5, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	4e0b      	ldr	r6, [pc, #44]	; (8003f94 <__libc_init_array+0x40>)
 8003f66:	4c0c      	ldr	r4, [pc, #48]	; (8003f98 <__libc_init_array+0x44>)
 8003f68:	f000 fc4a 	bl	8004800 <_init>
 8003f6c:	1ba4      	subs	r4, r4, r6
 8003f6e:	10a4      	asrs	r4, r4, #2
 8003f70:	2500      	movs	r5, #0
 8003f72:	42a5      	cmp	r5, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f7c:	4798      	blx	r3
 8003f7e:	3501      	adds	r5, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f86:	4798      	blx	r3
 8003f88:	3501      	adds	r5, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	08004a24 	.word	0x08004a24
 8003f90:	08004a24 	.word	0x08004a24
 8003f94:	08004a24 	.word	0x08004a24
 8003f98:	08004a28 	.word	0x08004a28

08003f9c <memcpy>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	1e43      	subs	r3, r0, #1
 8003fa0:	440a      	add	r2, r1
 8003fa2:	4291      	cmp	r1, r2
 8003fa4:	d100      	bne.n	8003fa8 <memcpy+0xc>
 8003fa6:	bd10      	pop	{r4, pc}
 8003fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fb0:	e7f7      	b.n	8003fa2 <memcpy+0x6>

08003fb2 <memset>:
 8003fb2:	4402      	add	r2, r0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d100      	bne.n	8003fbc <memset+0xa>
 8003fba:	4770      	bx	lr
 8003fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc0:	e7f9      	b.n	8003fb6 <memset+0x4>

08003fc2 <strcpy>:
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc8:	f803 2b01 	strb.w	r2, [r3], #1
 8003fcc:	2a00      	cmp	r2, #0
 8003fce:	d1f9      	bne.n	8003fc4 <strcpy+0x2>
 8003fd0:	4770      	bx	lr

08003fd2 <_vsniprintf_r>:
 8003fd2:	b530      	push	{r4, r5, lr}
 8003fd4:	1e14      	subs	r4, r2, #0
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	b09b      	sub	sp, #108	; 0x6c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	da05      	bge.n	8003fea <_vsniprintf_r+0x18>
 8003fde:	238b      	movs	r3, #139	; 0x8b
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe6:	b01b      	add	sp, #108	; 0x6c
 8003fe8:	bd30      	pop	{r4, r5, pc}
 8003fea:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003fee:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003ff2:	bf14      	ite	ne
 8003ff4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ff8:	4623      	moveq	r3, r4
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004002:	9100      	str	r1, [sp, #0]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	f8ad 300e 	strh.w	r3, [sp, #14]
 800400a:	4602      	mov	r2, r0
 800400c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800400e:	4669      	mov	r1, sp
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f8cd 	bl	80041b0 <_svfiprintf_r>
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	bfbc      	itt	lt
 800401a:	238b      	movlt	r3, #139	; 0x8b
 800401c:	602b      	strlt	r3, [r5, #0]
 800401e:	2c00      	cmp	r4, #0
 8004020:	d0e1      	beq.n	8003fe6 <_vsniprintf_r+0x14>
 8004022:	9b00      	ldr	r3, [sp, #0]
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e7dd      	b.n	8003fe6 <_vsniprintf_r+0x14>
	...

0800402c <vsniprintf>:
 800402c:	b507      	push	{r0, r1, r2, lr}
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	460a      	mov	r2, r1
 8004034:	4601      	mov	r1, r0
 8004036:	4803      	ldr	r0, [pc, #12]	; (8004044 <vsniprintf+0x18>)
 8004038:	6800      	ldr	r0, [r0, #0]
 800403a:	f7ff ffca 	bl	8003fd2 <_vsniprintf_r>
 800403e:	b003      	add	sp, #12
 8004040:	f85d fb04 	ldr.w	pc, [sp], #4
 8004044:	20000030 	.word	0x20000030

08004048 <_malloc_r>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	1ccd      	adds	r5, r1, #3
 800404c:	f025 0503 	bic.w	r5, r5, #3
 8004050:	3508      	adds	r5, #8
 8004052:	2d0c      	cmp	r5, #12
 8004054:	bf38      	it	cc
 8004056:	250c      	movcc	r5, #12
 8004058:	2d00      	cmp	r5, #0
 800405a:	4606      	mov	r6, r0
 800405c:	db01      	blt.n	8004062 <_malloc_r+0x1a>
 800405e:	42a9      	cmp	r1, r5
 8004060:	d903      	bls.n	800406a <_malloc_r+0x22>
 8004062:	230c      	movs	r3, #12
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	2000      	movs	r0, #0
 8004068:	bd70      	pop	{r4, r5, r6, pc}
 800406a:	f000 fb4a 	bl	8004702 <__malloc_lock>
 800406e:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <_malloc_r+0xac>)
 8004070:	6814      	ldr	r4, [r2, #0]
 8004072:	4621      	mov	r1, r4
 8004074:	b991      	cbnz	r1, 800409c <_malloc_r+0x54>
 8004076:	4c20      	ldr	r4, [pc, #128]	; (80040f8 <_malloc_r+0xb0>)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	b91b      	cbnz	r3, 8004084 <_malloc_r+0x3c>
 800407c:	4630      	mov	r0, r6
 800407e:	f000 fb17 	bl	80046b0 <_sbrk_r>
 8004082:	6020      	str	r0, [r4, #0]
 8004084:	4629      	mov	r1, r5
 8004086:	4630      	mov	r0, r6
 8004088:	f000 fb12 	bl	80046b0 <_sbrk_r>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d124      	bne.n	80040da <_malloc_r+0x92>
 8004090:	230c      	movs	r3, #12
 8004092:	6033      	str	r3, [r6, #0]
 8004094:	4630      	mov	r0, r6
 8004096:	f000 fb35 	bl	8004704 <__malloc_unlock>
 800409a:	e7e4      	b.n	8004066 <_malloc_r+0x1e>
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	1b5b      	subs	r3, r3, r5
 80040a0:	d418      	bmi.n	80040d4 <_malloc_r+0x8c>
 80040a2:	2b0b      	cmp	r3, #11
 80040a4:	d90f      	bls.n	80040c6 <_malloc_r+0x7e>
 80040a6:	600b      	str	r3, [r1, #0]
 80040a8:	50cd      	str	r5, [r1, r3]
 80040aa:	18cc      	adds	r4, r1, r3
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 fb29 	bl	8004704 <__malloc_unlock>
 80040b2:	f104 000b 	add.w	r0, r4, #11
 80040b6:	1d23      	adds	r3, r4, #4
 80040b8:	f020 0007 	bic.w	r0, r0, #7
 80040bc:	1ac3      	subs	r3, r0, r3
 80040be:	d0d3      	beq.n	8004068 <_malloc_r+0x20>
 80040c0:	425a      	negs	r2, r3
 80040c2:	50e2      	str	r2, [r4, r3]
 80040c4:	e7d0      	b.n	8004068 <_malloc_r+0x20>
 80040c6:	428c      	cmp	r4, r1
 80040c8:	684b      	ldr	r3, [r1, #4]
 80040ca:	bf16      	itet	ne
 80040cc:	6063      	strne	r3, [r4, #4]
 80040ce:	6013      	streq	r3, [r2, #0]
 80040d0:	460c      	movne	r4, r1
 80040d2:	e7eb      	b.n	80040ac <_malloc_r+0x64>
 80040d4:	460c      	mov	r4, r1
 80040d6:	6849      	ldr	r1, [r1, #4]
 80040d8:	e7cc      	b.n	8004074 <_malloc_r+0x2c>
 80040da:	1cc4      	adds	r4, r0, #3
 80040dc:	f024 0403 	bic.w	r4, r4, #3
 80040e0:	42a0      	cmp	r0, r4
 80040e2:	d005      	beq.n	80040f0 <_malloc_r+0xa8>
 80040e4:	1a21      	subs	r1, r4, r0
 80040e6:	4630      	mov	r0, r6
 80040e8:	f000 fae2 	bl	80046b0 <_sbrk_r>
 80040ec:	3001      	adds	r0, #1
 80040ee:	d0cf      	beq.n	8004090 <_malloc_r+0x48>
 80040f0:	6025      	str	r5, [r4, #0]
 80040f2:	e7db      	b.n	80040ac <_malloc_r+0x64>
 80040f4:	200000c8 	.word	0x200000c8
 80040f8:	200000cc 	.word	0x200000cc

080040fc <__ssputs_r>:
 80040fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004100:	688e      	ldr	r6, [r1, #8]
 8004102:	429e      	cmp	r6, r3
 8004104:	4682      	mov	sl, r0
 8004106:	460c      	mov	r4, r1
 8004108:	4690      	mov	r8, r2
 800410a:	4699      	mov	r9, r3
 800410c:	d837      	bhi.n	800417e <__ssputs_r+0x82>
 800410e:	898a      	ldrh	r2, [r1, #12]
 8004110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004114:	d031      	beq.n	800417a <__ssputs_r+0x7e>
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	6909      	ldr	r1, [r1, #16]
 800411a:	1a6f      	subs	r7, r5, r1
 800411c:	6965      	ldr	r5, [r4, #20]
 800411e:	2302      	movs	r3, #2
 8004120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004124:	fb95 f5f3 	sdiv	r5, r5, r3
 8004128:	f109 0301 	add.w	r3, r9, #1
 800412c:	443b      	add	r3, r7
 800412e:	429d      	cmp	r5, r3
 8004130:	bf38      	it	cc
 8004132:	461d      	movcc	r5, r3
 8004134:	0553      	lsls	r3, r2, #21
 8004136:	d530      	bpl.n	800419a <__ssputs_r+0x9e>
 8004138:	4629      	mov	r1, r5
 800413a:	f7ff ff85 	bl	8004048 <_malloc_r>
 800413e:	4606      	mov	r6, r0
 8004140:	b950      	cbnz	r0, 8004158 <__ssputs_r+0x5c>
 8004142:	230c      	movs	r3, #12
 8004144:	f8ca 3000 	str.w	r3, [sl]
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004158:	463a      	mov	r2, r7
 800415a:	6921      	ldr	r1, [r4, #16]
 800415c:	f7ff ff1e 	bl	8003f9c <memcpy>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	6126      	str	r6, [r4, #16]
 800416e:	6165      	str	r5, [r4, #20]
 8004170:	443e      	add	r6, r7
 8004172:	1bed      	subs	r5, r5, r7
 8004174:	6026      	str	r6, [r4, #0]
 8004176:	60a5      	str	r5, [r4, #8]
 8004178:	464e      	mov	r6, r9
 800417a:	454e      	cmp	r6, r9
 800417c:	d900      	bls.n	8004180 <__ssputs_r+0x84>
 800417e:	464e      	mov	r6, r9
 8004180:	4632      	mov	r2, r6
 8004182:	4641      	mov	r1, r8
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	f000 faa3 	bl	80046d0 <memmove>
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	1b9b      	subs	r3, r3, r6
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	441e      	add	r6, r3
 8004194:	6026      	str	r6, [r4, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	e7dc      	b.n	8004154 <__ssputs_r+0x58>
 800419a:	462a      	mov	r2, r5
 800419c:	f000 fb02 	bl	80047a4 <_realloc_r>
 80041a0:	4606      	mov	r6, r0
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d1e2      	bne.n	800416c <__ssputs_r+0x70>
 80041a6:	6921      	ldr	r1, [r4, #16]
 80041a8:	4650      	mov	r0, sl
 80041aa:	f000 faad 	bl	8004708 <_free_r>
 80041ae:	e7c8      	b.n	8004142 <__ssputs_r+0x46>

080041b0 <_svfiprintf_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	461d      	mov	r5, r3
 80041b6:	898b      	ldrh	r3, [r1, #12]
 80041b8:	061f      	lsls	r7, r3, #24
 80041ba:	b09d      	sub	sp, #116	; 0x74
 80041bc:	4680      	mov	r8, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	4616      	mov	r6, r2
 80041c2:	d50f      	bpl.n	80041e4 <_svfiprintf_r+0x34>
 80041c4:	690b      	ldr	r3, [r1, #16]
 80041c6:	b96b      	cbnz	r3, 80041e4 <_svfiprintf_r+0x34>
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	f7ff ff3d 	bl	8004048 <_malloc_r>
 80041ce:	6020      	str	r0, [r4, #0]
 80041d0:	6120      	str	r0, [r4, #16]
 80041d2:	b928      	cbnz	r0, 80041e0 <_svfiprintf_r+0x30>
 80041d4:	230c      	movs	r3, #12
 80041d6:	f8c8 3000 	str.w	r3, [r8]
 80041da:	f04f 30ff 	mov.w	r0, #4294967295
 80041de:	e0c8      	b.n	8004372 <_svfiprintf_r+0x1c2>
 80041e0:	2340      	movs	r3, #64	; 0x40
 80041e2:	6163      	str	r3, [r4, #20]
 80041e4:	2300      	movs	r3, #0
 80041e6:	9309      	str	r3, [sp, #36]	; 0x24
 80041e8:	2320      	movs	r3, #32
 80041ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041ee:	2330      	movs	r3, #48	; 0x30
 80041f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041f4:	9503      	str	r5, [sp, #12]
 80041f6:	f04f 0b01 	mov.w	fp, #1
 80041fa:	4637      	mov	r7, r6
 80041fc:	463d      	mov	r5, r7
 80041fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004202:	b10b      	cbz	r3, 8004208 <_svfiprintf_r+0x58>
 8004204:	2b25      	cmp	r3, #37	; 0x25
 8004206:	d13e      	bne.n	8004286 <_svfiprintf_r+0xd6>
 8004208:	ebb7 0a06 	subs.w	sl, r7, r6
 800420c:	d00b      	beq.n	8004226 <_svfiprintf_r+0x76>
 800420e:	4653      	mov	r3, sl
 8004210:	4632      	mov	r2, r6
 8004212:	4621      	mov	r1, r4
 8004214:	4640      	mov	r0, r8
 8004216:	f7ff ff71 	bl	80040fc <__ssputs_r>
 800421a:	3001      	adds	r0, #1
 800421c:	f000 80a4 	beq.w	8004368 <_svfiprintf_r+0x1b8>
 8004220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004222:	4453      	add	r3, sl
 8004224:	9309      	str	r3, [sp, #36]	; 0x24
 8004226:	783b      	ldrb	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 809d 	beq.w	8004368 <_svfiprintf_r+0x1b8>
 800422e:	2300      	movs	r3, #0
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	9307      	str	r3, [sp, #28]
 800423c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004240:	931a      	str	r3, [sp, #104]	; 0x68
 8004242:	462f      	mov	r7, r5
 8004244:	2205      	movs	r2, #5
 8004246:	f817 1b01 	ldrb.w	r1, [r7], #1
 800424a:	4850      	ldr	r0, [pc, #320]	; (800438c <_svfiprintf_r+0x1dc>)
 800424c:	f7fb ffc8 	bl	80001e0 <memchr>
 8004250:	9b04      	ldr	r3, [sp, #16]
 8004252:	b9d0      	cbnz	r0, 800428a <_svfiprintf_r+0xda>
 8004254:	06d9      	lsls	r1, r3, #27
 8004256:	bf44      	itt	mi
 8004258:	2220      	movmi	r2, #32
 800425a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800425e:	071a      	lsls	r2, r3, #28
 8004260:	bf44      	itt	mi
 8004262:	222b      	movmi	r2, #43	; 0x2b
 8004264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004268:	782a      	ldrb	r2, [r5, #0]
 800426a:	2a2a      	cmp	r2, #42	; 0x2a
 800426c:	d015      	beq.n	800429a <_svfiprintf_r+0xea>
 800426e:	9a07      	ldr	r2, [sp, #28]
 8004270:	462f      	mov	r7, r5
 8004272:	2000      	movs	r0, #0
 8004274:	250a      	movs	r5, #10
 8004276:	4639      	mov	r1, r7
 8004278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800427c:	3b30      	subs	r3, #48	; 0x30
 800427e:	2b09      	cmp	r3, #9
 8004280:	d94d      	bls.n	800431e <_svfiprintf_r+0x16e>
 8004282:	b1b8      	cbz	r0, 80042b4 <_svfiprintf_r+0x104>
 8004284:	e00f      	b.n	80042a6 <_svfiprintf_r+0xf6>
 8004286:	462f      	mov	r7, r5
 8004288:	e7b8      	b.n	80041fc <_svfiprintf_r+0x4c>
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <_svfiprintf_r+0x1dc>)
 800428c:	1a80      	subs	r0, r0, r2
 800428e:	fa0b f000 	lsl.w	r0, fp, r0
 8004292:	4318      	orrs	r0, r3
 8004294:	9004      	str	r0, [sp, #16]
 8004296:	463d      	mov	r5, r7
 8004298:	e7d3      	b.n	8004242 <_svfiprintf_r+0x92>
 800429a:	9a03      	ldr	r2, [sp, #12]
 800429c:	1d11      	adds	r1, r2, #4
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	9103      	str	r1, [sp, #12]
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	db01      	blt.n	80042aa <_svfiprintf_r+0xfa>
 80042a6:	9207      	str	r2, [sp, #28]
 80042a8:	e004      	b.n	80042b4 <_svfiprintf_r+0x104>
 80042aa:	4252      	negs	r2, r2
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	9207      	str	r2, [sp, #28]
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	783b      	ldrb	r3, [r7, #0]
 80042b6:	2b2e      	cmp	r3, #46	; 0x2e
 80042b8:	d10c      	bne.n	80042d4 <_svfiprintf_r+0x124>
 80042ba:	787b      	ldrb	r3, [r7, #1]
 80042bc:	2b2a      	cmp	r3, #42	; 0x2a
 80042be:	d133      	bne.n	8004328 <_svfiprintf_r+0x178>
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	9203      	str	r2, [sp, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bfb8      	it	lt
 80042cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d0:	3702      	adds	r7, #2
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	4d2e      	ldr	r5, [pc, #184]	; (8004390 <_svfiprintf_r+0x1e0>)
 80042d6:	7839      	ldrb	r1, [r7, #0]
 80042d8:	2203      	movs	r2, #3
 80042da:	4628      	mov	r0, r5
 80042dc:	f7fb ff80 	bl	80001e0 <memchr>
 80042e0:	b138      	cbz	r0, 80042f2 <_svfiprintf_r+0x142>
 80042e2:	2340      	movs	r3, #64	; 0x40
 80042e4:	1b40      	subs	r0, r0, r5
 80042e6:	fa03 f000 	lsl.w	r0, r3, r0
 80042ea:	9b04      	ldr	r3, [sp, #16]
 80042ec:	4303      	orrs	r3, r0
 80042ee:	3701      	adds	r7, #1
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	7839      	ldrb	r1, [r7, #0]
 80042f4:	4827      	ldr	r0, [pc, #156]	; (8004394 <_svfiprintf_r+0x1e4>)
 80042f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042fa:	2206      	movs	r2, #6
 80042fc:	1c7e      	adds	r6, r7, #1
 80042fe:	f7fb ff6f 	bl	80001e0 <memchr>
 8004302:	2800      	cmp	r0, #0
 8004304:	d038      	beq.n	8004378 <_svfiprintf_r+0x1c8>
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <_svfiprintf_r+0x1e8>)
 8004308:	bb13      	cbnz	r3, 8004350 <_svfiprintf_r+0x1a0>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	3307      	adds	r3, #7
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	3308      	adds	r3, #8
 8004314:	9303      	str	r3, [sp, #12]
 8004316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004318:	444b      	add	r3, r9
 800431a:	9309      	str	r3, [sp, #36]	; 0x24
 800431c:	e76d      	b.n	80041fa <_svfiprintf_r+0x4a>
 800431e:	fb05 3202 	mla	r2, r5, r2, r3
 8004322:	2001      	movs	r0, #1
 8004324:	460f      	mov	r7, r1
 8004326:	e7a6      	b.n	8004276 <_svfiprintf_r+0xc6>
 8004328:	2300      	movs	r3, #0
 800432a:	3701      	adds	r7, #1
 800432c:	9305      	str	r3, [sp, #20]
 800432e:	4619      	mov	r1, r3
 8004330:	250a      	movs	r5, #10
 8004332:	4638      	mov	r0, r7
 8004334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004338:	3a30      	subs	r2, #48	; 0x30
 800433a:	2a09      	cmp	r2, #9
 800433c:	d903      	bls.n	8004346 <_svfiprintf_r+0x196>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0c8      	beq.n	80042d4 <_svfiprintf_r+0x124>
 8004342:	9105      	str	r1, [sp, #20]
 8004344:	e7c6      	b.n	80042d4 <_svfiprintf_r+0x124>
 8004346:	fb05 2101 	mla	r1, r5, r1, r2
 800434a:	2301      	movs	r3, #1
 800434c:	4607      	mov	r7, r0
 800434e:	e7f0      	b.n	8004332 <_svfiprintf_r+0x182>
 8004350:	ab03      	add	r3, sp, #12
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4622      	mov	r2, r4
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <_svfiprintf_r+0x1ec>)
 8004358:	a904      	add	r1, sp, #16
 800435a:	4640      	mov	r0, r8
 800435c:	f3af 8000 	nop.w
 8004360:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004364:	4681      	mov	r9, r0
 8004366:	d1d6      	bne.n	8004316 <_svfiprintf_r+0x166>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	065b      	lsls	r3, r3, #25
 800436c:	f53f af35 	bmi.w	80041da <_svfiprintf_r+0x2a>
 8004370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004372:	b01d      	add	sp, #116	; 0x74
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004378:	ab03      	add	r3, sp, #12
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4622      	mov	r2, r4
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <_svfiprintf_r+0x1ec>)
 8004380:	a904      	add	r1, sp, #16
 8004382:	4640      	mov	r0, r8
 8004384:	f000 f882 	bl	800448c <_printf_i>
 8004388:	e7ea      	b.n	8004360 <_svfiprintf_r+0x1b0>
 800438a:	bf00      	nop
 800438c:	080049e8 	.word	0x080049e8
 8004390:	080049ee 	.word	0x080049ee
 8004394:	080049f2 	.word	0x080049f2
 8004398:	00000000 	.word	0x00000000
 800439c:	080040fd 	.word	0x080040fd

080043a0 <_printf_common>:
 80043a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	4691      	mov	r9, r2
 80043a6:	461f      	mov	r7, r3
 80043a8:	688a      	ldr	r2, [r1, #8]
 80043aa:	690b      	ldr	r3, [r1, #16]
 80043ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfb8      	it	lt
 80043b4:	4613      	movlt	r3, r2
 80043b6:	f8c9 3000 	str.w	r3, [r9]
 80043ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043be:	4606      	mov	r6, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	b112      	cbz	r2, 80043ca <_printf_common+0x2a>
 80043c4:	3301      	adds	r3, #1
 80043c6:	f8c9 3000 	str.w	r3, [r9]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0699      	lsls	r1, r3, #26
 80043ce:	bf42      	ittt	mi
 80043d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043d4:	3302      	addmi	r3, #2
 80043d6:	f8c9 3000 	strmi.w	r3, [r9]
 80043da:	6825      	ldr	r5, [r4, #0]
 80043dc:	f015 0506 	ands.w	r5, r5, #6
 80043e0:	d107      	bne.n	80043f2 <_printf_common+0x52>
 80043e2:	f104 0a19 	add.w	sl, r4, #25
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	f8d9 2000 	ldr.w	r2, [r9]
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	dc28      	bgt.n	8004444 <_printf_common+0xa4>
 80043f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	3300      	adds	r3, #0
 80043fa:	bf18      	it	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	0692      	lsls	r2, r2, #26
 8004400:	d42d      	bmi.n	800445e <_printf_common+0xbe>
 8004402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004406:	4639      	mov	r1, r7
 8004408:	4630      	mov	r0, r6
 800440a:	47c0      	blx	r8
 800440c:	3001      	adds	r0, #1
 800440e:	d020      	beq.n	8004452 <_printf_common+0xb2>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	68e5      	ldr	r5, [r4, #12]
 8004414:	f8d9 2000 	ldr.w	r2, [r9]
 8004418:	f003 0306 	and.w	r3, r3, #6
 800441c:	2b04      	cmp	r3, #4
 800441e:	bf08      	it	eq
 8004420:	1aad      	subeq	r5, r5, r2
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	6922      	ldr	r2, [r4, #16]
 8004426:	bf0c      	ite	eq
 8004428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800442c:	2500      	movne	r5, #0
 800442e:	4293      	cmp	r3, r2
 8004430:	bfc4      	itt	gt
 8004432:	1a9b      	subgt	r3, r3, r2
 8004434:	18ed      	addgt	r5, r5, r3
 8004436:	f04f 0900 	mov.w	r9, #0
 800443a:	341a      	adds	r4, #26
 800443c:	454d      	cmp	r5, r9
 800443e:	d11a      	bne.n	8004476 <_printf_common+0xd6>
 8004440:	2000      	movs	r0, #0
 8004442:	e008      	b.n	8004456 <_printf_common+0xb6>
 8004444:	2301      	movs	r3, #1
 8004446:	4652      	mov	r2, sl
 8004448:	4639      	mov	r1, r7
 800444a:	4630      	mov	r0, r6
 800444c:	47c0      	blx	r8
 800444e:	3001      	adds	r0, #1
 8004450:	d103      	bne.n	800445a <_printf_common+0xba>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	3501      	adds	r5, #1
 800445c:	e7c3      	b.n	80043e6 <_printf_common+0x46>
 800445e:	18e1      	adds	r1, r4, r3
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	2030      	movs	r0, #48	; 0x30
 8004464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004468:	4422      	add	r2, r4
 800446a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800446e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004472:	3302      	adds	r3, #2
 8004474:	e7c5      	b.n	8004402 <_printf_common+0x62>
 8004476:	2301      	movs	r3, #1
 8004478:	4622      	mov	r2, r4
 800447a:	4639      	mov	r1, r7
 800447c:	4630      	mov	r0, r6
 800447e:	47c0      	blx	r8
 8004480:	3001      	adds	r0, #1
 8004482:	d0e6      	beq.n	8004452 <_printf_common+0xb2>
 8004484:	f109 0901 	add.w	r9, r9, #1
 8004488:	e7d8      	b.n	800443c <_printf_common+0x9c>
	...

0800448c <_printf_i>:
 800448c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004490:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004494:	460c      	mov	r4, r1
 8004496:	7e09      	ldrb	r1, [r1, #24]
 8004498:	b085      	sub	sp, #20
 800449a:	296e      	cmp	r1, #110	; 0x6e
 800449c:	4617      	mov	r7, r2
 800449e:	4606      	mov	r6, r0
 80044a0:	4698      	mov	r8, r3
 80044a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044a4:	f000 80b3 	beq.w	800460e <_printf_i+0x182>
 80044a8:	d822      	bhi.n	80044f0 <_printf_i+0x64>
 80044aa:	2963      	cmp	r1, #99	; 0x63
 80044ac:	d036      	beq.n	800451c <_printf_i+0x90>
 80044ae:	d80a      	bhi.n	80044c6 <_printf_i+0x3a>
 80044b0:	2900      	cmp	r1, #0
 80044b2:	f000 80b9 	beq.w	8004628 <_printf_i+0x19c>
 80044b6:	2958      	cmp	r1, #88	; 0x58
 80044b8:	f000 8083 	beq.w	80045c2 <_printf_i+0x136>
 80044bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044c4:	e032      	b.n	800452c <_printf_i+0xa0>
 80044c6:	2964      	cmp	r1, #100	; 0x64
 80044c8:	d001      	beq.n	80044ce <_printf_i+0x42>
 80044ca:	2969      	cmp	r1, #105	; 0x69
 80044cc:	d1f6      	bne.n	80044bc <_printf_i+0x30>
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	6813      	ldr	r3, [r2, #0]
 80044d2:	0605      	lsls	r5, r0, #24
 80044d4:	f103 0104 	add.w	r1, r3, #4
 80044d8:	d52a      	bpl.n	8004530 <_printf_i+0xa4>
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da03      	bge.n	80044ea <_printf_i+0x5e>
 80044e2:	222d      	movs	r2, #45	; 0x2d
 80044e4:	425b      	negs	r3, r3
 80044e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044ea:	486f      	ldr	r0, [pc, #444]	; (80046a8 <_printf_i+0x21c>)
 80044ec:	220a      	movs	r2, #10
 80044ee:	e039      	b.n	8004564 <_printf_i+0xd8>
 80044f0:	2973      	cmp	r1, #115	; 0x73
 80044f2:	f000 809d 	beq.w	8004630 <_printf_i+0x1a4>
 80044f6:	d808      	bhi.n	800450a <_printf_i+0x7e>
 80044f8:	296f      	cmp	r1, #111	; 0x6f
 80044fa:	d020      	beq.n	800453e <_printf_i+0xb2>
 80044fc:	2970      	cmp	r1, #112	; 0x70
 80044fe:	d1dd      	bne.n	80044bc <_printf_i+0x30>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	f043 0320 	orr.w	r3, r3, #32
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	e003      	b.n	8004512 <_printf_i+0x86>
 800450a:	2975      	cmp	r1, #117	; 0x75
 800450c:	d017      	beq.n	800453e <_printf_i+0xb2>
 800450e:	2978      	cmp	r1, #120	; 0x78
 8004510:	d1d4      	bne.n	80044bc <_printf_i+0x30>
 8004512:	2378      	movs	r3, #120	; 0x78
 8004514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004518:	4864      	ldr	r0, [pc, #400]	; (80046ac <_printf_i+0x220>)
 800451a:	e055      	b.n	80045c8 <_printf_i+0x13c>
 800451c:	6813      	ldr	r3, [r2, #0]
 800451e:	1d19      	adds	r1, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6011      	str	r1, [r2, #0]
 8004524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800452c:	2301      	movs	r3, #1
 800452e:	e08c      	b.n	800464a <_printf_i+0x1be>
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6011      	str	r1, [r2, #0]
 8004534:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004538:	bf18      	it	ne
 800453a:	b21b      	sxthne	r3, r3
 800453c:	e7cf      	b.n	80044de <_printf_i+0x52>
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	6825      	ldr	r5, [r4, #0]
 8004542:	1d18      	adds	r0, r3, #4
 8004544:	6010      	str	r0, [r2, #0]
 8004546:	0628      	lsls	r0, r5, #24
 8004548:	d501      	bpl.n	800454e <_printf_i+0xc2>
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	e002      	b.n	8004554 <_printf_i+0xc8>
 800454e:	0668      	lsls	r0, r5, #25
 8004550:	d5fb      	bpl.n	800454a <_printf_i+0xbe>
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	4854      	ldr	r0, [pc, #336]	; (80046a8 <_printf_i+0x21c>)
 8004556:	296f      	cmp	r1, #111	; 0x6f
 8004558:	bf14      	ite	ne
 800455a:	220a      	movne	r2, #10
 800455c:	2208      	moveq	r2, #8
 800455e:	2100      	movs	r1, #0
 8004560:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004564:	6865      	ldr	r5, [r4, #4]
 8004566:	60a5      	str	r5, [r4, #8]
 8004568:	2d00      	cmp	r5, #0
 800456a:	f2c0 8095 	blt.w	8004698 <_printf_i+0x20c>
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	f021 0104 	bic.w	r1, r1, #4
 8004574:	6021      	str	r1, [r4, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d13d      	bne.n	80045f6 <_printf_i+0x16a>
 800457a:	2d00      	cmp	r5, #0
 800457c:	f040 808e 	bne.w	800469c <_printf_i+0x210>
 8004580:	4665      	mov	r5, ip
 8004582:	2a08      	cmp	r2, #8
 8004584:	d10b      	bne.n	800459e <_printf_i+0x112>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	07db      	lsls	r3, r3, #31
 800458a:	d508      	bpl.n	800459e <_printf_i+0x112>
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	bfde      	ittt	le
 8004594:	2330      	movle	r3, #48	; 0x30
 8004596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800459a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800459e:	ebac 0305 	sub.w	r3, ip, r5
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	f8cd 8000 	str.w	r8, [sp]
 80045a8:	463b      	mov	r3, r7
 80045aa:	aa03      	add	r2, sp, #12
 80045ac:	4621      	mov	r1, r4
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff fef6 	bl	80043a0 <_printf_common>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d14d      	bne.n	8004654 <_printf_i+0x1c8>
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	b005      	add	sp, #20
 80045be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045c2:	4839      	ldr	r0, [pc, #228]	; (80046a8 <_printf_i+0x21c>)
 80045c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045c8:	6813      	ldr	r3, [r2, #0]
 80045ca:	6821      	ldr	r1, [r4, #0]
 80045cc:	1d1d      	adds	r5, r3, #4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6015      	str	r5, [r2, #0]
 80045d2:	060a      	lsls	r2, r1, #24
 80045d4:	d50b      	bpl.n	80045ee <_printf_i+0x162>
 80045d6:	07ca      	lsls	r2, r1, #31
 80045d8:	bf44      	itt	mi
 80045da:	f041 0120 	orrmi.w	r1, r1, #32
 80045de:	6021      	strmi	r1, [r4, #0]
 80045e0:	b91b      	cbnz	r3, 80045ea <_printf_i+0x15e>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	f022 0220 	bic.w	r2, r2, #32
 80045e8:	6022      	str	r2, [r4, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	e7b7      	b.n	800455e <_printf_i+0xd2>
 80045ee:	064d      	lsls	r5, r1, #25
 80045f0:	bf48      	it	mi
 80045f2:	b29b      	uxthmi	r3, r3
 80045f4:	e7ef      	b.n	80045d6 <_printf_i+0x14a>
 80045f6:	4665      	mov	r5, ip
 80045f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80045fc:	fb02 3311 	mls	r3, r2, r1, r3
 8004600:	5cc3      	ldrb	r3, [r0, r3]
 8004602:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004606:	460b      	mov	r3, r1
 8004608:	2900      	cmp	r1, #0
 800460a:	d1f5      	bne.n	80045f8 <_printf_i+0x16c>
 800460c:	e7b9      	b.n	8004582 <_printf_i+0xf6>
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	6825      	ldr	r5, [r4, #0]
 8004612:	6961      	ldr	r1, [r4, #20]
 8004614:	1d18      	adds	r0, r3, #4
 8004616:	6010      	str	r0, [r2, #0]
 8004618:	0628      	lsls	r0, r5, #24
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	d501      	bpl.n	8004622 <_printf_i+0x196>
 800461e:	6019      	str	r1, [r3, #0]
 8004620:	e002      	b.n	8004628 <_printf_i+0x19c>
 8004622:	066a      	lsls	r2, r5, #25
 8004624:	d5fb      	bpl.n	800461e <_printf_i+0x192>
 8004626:	8019      	strh	r1, [r3, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	4665      	mov	r5, ip
 800462e:	e7b9      	b.n	80045a4 <_printf_i+0x118>
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	1d19      	adds	r1, r3, #4
 8004634:	6011      	str	r1, [r2, #0]
 8004636:	681d      	ldr	r5, [r3, #0]
 8004638:	6862      	ldr	r2, [r4, #4]
 800463a:	2100      	movs	r1, #0
 800463c:	4628      	mov	r0, r5
 800463e:	f7fb fdcf 	bl	80001e0 <memchr>
 8004642:	b108      	cbz	r0, 8004648 <_printf_i+0x1bc>
 8004644:	1b40      	subs	r0, r0, r5
 8004646:	6060      	str	r0, [r4, #4]
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	2300      	movs	r3, #0
 800464e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004652:	e7a7      	b.n	80045a4 <_printf_i+0x118>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	462a      	mov	r2, r5
 8004658:	4639      	mov	r1, r7
 800465a:	4630      	mov	r0, r6
 800465c:	47c0      	blx	r8
 800465e:	3001      	adds	r0, #1
 8004660:	d0aa      	beq.n	80045b8 <_printf_i+0x12c>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	079b      	lsls	r3, r3, #30
 8004666:	d413      	bmi.n	8004690 <_printf_i+0x204>
 8004668:	68e0      	ldr	r0, [r4, #12]
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	4298      	cmp	r0, r3
 800466e:	bfb8      	it	lt
 8004670:	4618      	movlt	r0, r3
 8004672:	e7a3      	b.n	80045bc <_printf_i+0x130>
 8004674:	2301      	movs	r3, #1
 8004676:	464a      	mov	r2, r9
 8004678:	4639      	mov	r1, r7
 800467a:	4630      	mov	r0, r6
 800467c:	47c0      	blx	r8
 800467e:	3001      	adds	r0, #1
 8004680:	d09a      	beq.n	80045b8 <_printf_i+0x12c>
 8004682:	3501      	adds	r5, #1
 8004684:	68e3      	ldr	r3, [r4, #12]
 8004686:	9a03      	ldr	r2, [sp, #12]
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	42ab      	cmp	r3, r5
 800468c:	dcf2      	bgt.n	8004674 <_printf_i+0x1e8>
 800468e:	e7eb      	b.n	8004668 <_printf_i+0x1dc>
 8004690:	2500      	movs	r5, #0
 8004692:	f104 0919 	add.w	r9, r4, #25
 8004696:	e7f5      	b.n	8004684 <_printf_i+0x1f8>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1ac      	bne.n	80045f6 <_printf_i+0x16a>
 800469c:	7803      	ldrb	r3, [r0, #0]
 800469e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a6:	e76c      	b.n	8004582 <_printf_i+0xf6>
 80046a8:	080049f9 	.word	0x080049f9
 80046ac:	08004a0a 	.word	0x08004a0a

080046b0 <_sbrk_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4c06      	ldr	r4, [pc, #24]	; (80046cc <_sbrk_r+0x1c>)
 80046b4:	2300      	movs	r3, #0
 80046b6:	4605      	mov	r5, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	f7fc f8e8 	bl	8000890 <_sbrk>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_sbrk_r+0x1a>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_sbrk_r+0x1a>
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	2000070c 	.word	0x2000070c

080046d0 <memmove>:
 80046d0:	4288      	cmp	r0, r1
 80046d2:	b510      	push	{r4, lr}
 80046d4:	eb01 0302 	add.w	r3, r1, r2
 80046d8:	d807      	bhi.n	80046ea <memmove+0x1a>
 80046da:	1e42      	subs	r2, r0, #1
 80046dc:	4299      	cmp	r1, r3
 80046de:	d00a      	beq.n	80046f6 <memmove+0x26>
 80046e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046e8:	e7f8      	b.n	80046dc <memmove+0xc>
 80046ea:	4283      	cmp	r3, r0
 80046ec:	d9f5      	bls.n	80046da <memmove+0xa>
 80046ee:	1881      	adds	r1, r0, r2
 80046f0:	1ad2      	subs	r2, r2, r3
 80046f2:	42d3      	cmn	r3, r2
 80046f4:	d100      	bne.n	80046f8 <memmove+0x28>
 80046f6:	bd10      	pop	{r4, pc}
 80046f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004700:	e7f7      	b.n	80046f2 <memmove+0x22>

08004702 <__malloc_lock>:
 8004702:	4770      	bx	lr

08004704 <__malloc_unlock>:
 8004704:	4770      	bx	lr
	...

08004708 <_free_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4605      	mov	r5, r0
 800470c:	2900      	cmp	r1, #0
 800470e:	d045      	beq.n	800479c <_free_r+0x94>
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f0c      	subs	r4, r1, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfb8      	it	lt
 800471a:	18e4      	addlt	r4, r4, r3
 800471c:	f7ff fff1 	bl	8004702 <__malloc_lock>
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <_free_r+0x98>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	4610      	mov	r0, r2
 8004726:	b933      	cbnz	r3, 8004736 <_free_r+0x2e>
 8004728:	6063      	str	r3, [r4, #4]
 800472a:	6014      	str	r4, [r2, #0]
 800472c:	4628      	mov	r0, r5
 800472e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004732:	f7ff bfe7 	b.w	8004704 <__malloc_unlock>
 8004736:	42a3      	cmp	r3, r4
 8004738:	d90c      	bls.n	8004754 <_free_r+0x4c>
 800473a:	6821      	ldr	r1, [r4, #0]
 800473c:	1862      	adds	r2, r4, r1
 800473e:	4293      	cmp	r3, r2
 8004740:	bf04      	itt	eq
 8004742:	681a      	ldreq	r2, [r3, #0]
 8004744:	685b      	ldreq	r3, [r3, #4]
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	bf04      	itt	eq
 800474a:	1852      	addeq	r2, r2, r1
 800474c:	6022      	streq	r2, [r4, #0]
 800474e:	6004      	str	r4, [r0, #0]
 8004750:	e7ec      	b.n	800472c <_free_r+0x24>
 8004752:	4613      	mov	r3, r2
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	b10a      	cbz	r2, 800475c <_free_r+0x54>
 8004758:	42a2      	cmp	r2, r4
 800475a:	d9fa      	bls.n	8004752 <_free_r+0x4a>
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	1858      	adds	r0, r3, r1
 8004760:	42a0      	cmp	r0, r4
 8004762:	d10b      	bne.n	800477c <_free_r+0x74>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	4401      	add	r1, r0
 8004768:	1858      	adds	r0, r3, r1
 800476a:	4282      	cmp	r2, r0
 800476c:	6019      	str	r1, [r3, #0]
 800476e:	d1dd      	bne.n	800472c <_free_r+0x24>
 8004770:	6810      	ldr	r0, [r2, #0]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	4401      	add	r1, r0
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	e7d7      	b.n	800472c <_free_r+0x24>
 800477c:	d902      	bls.n	8004784 <_free_r+0x7c>
 800477e:	230c      	movs	r3, #12
 8004780:	602b      	str	r3, [r5, #0]
 8004782:	e7d3      	b.n	800472c <_free_r+0x24>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	1821      	adds	r1, r4, r0
 8004788:	428a      	cmp	r2, r1
 800478a:	bf04      	itt	eq
 800478c:	6811      	ldreq	r1, [r2, #0]
 800478e:	6852      	ldreq	r2, [r2, #4]
 8004790:	6062      	str	r2, [r4, #4]
 8004792:	bf04      	itt	eq
 8004794:	1809      	addeq	r1, r1, r0
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	605c      	str	r4, [r3, #4]
 800479a:	e7c7      	b.n	800472c <_free_r+0x24>
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	200000c8 	.word	0x200000c8

080047a4 <_realloc_r>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	4607      	mov	r7, r0
 80047a8:	4614      	mov	r4, r2
 80047aa:	460e      	mov	r6, r1
 80047ac:	b921      	cbnz	r1, 80047b8 <_realloc_r+0x14>
 80047ae:	4611      	mov	r1, r2
 80047b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047b4:	f7ff bc48 	b.w	8004048 <_malloc_r>
 80047b8:	b922      	cbnz	r2, 80047c4 <_realloc_r+0x20>
 80047ba:	f7ff ffa5 	bl	8004708 <_free_r>
 80047be:	4625      	mov	r5, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c4:	f000 f814 	bl	80047f0 <_malloc_usable_size_r>
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d20f      	bcs.n	80047ec <_realloc_r+0x48>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4638      	mov	r0, r7
 80047d0:	f7ff fc3a 	bl	8004048 <_malloc_r>
 80047d4:	4605      	mov	r5, r0
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d0f2      	beq.n	80047c0 <_realloc_r+0x1c>
 80047da:	4631      	mov	r1, r6
 80047dc:	4622      	mov	r2, r4
 80047de:	f7ff fbdd 	bl	8003f9c <memcpy>
 80047e2:	4631      	mov	r1, r6
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff ff8f 	bl	8004708 <_free_r>
 80047ea:	e7e9      	b.n	80047c0 <_realloc_r+0x1c>
 80047ec:	4635      	mov	r5, r6
 80047ee:	e7e7      	b.n	80047c0 <_realloc_r+0x1c>

080047f0 <_malloc_usable_size_r>:
 80047f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f4:	1f18      	subs	r0, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfbc      	itt	lt
 80047fa:	580b      	ldrlt	r3, [r1, r0]
 80047fc:	18c0      	addlt	r0, r0, r3
 80047fe:	4770      	bx	lr

08004800 <_init>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr

0800480c <_fini>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

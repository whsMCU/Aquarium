
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e814  08017240  08017240  00027240  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025a54  08025a54  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08025a54  08025a54  00035a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025a5c  08025a5c  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025a5c  08025a5c  00035a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025a60  08025a60  00035a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08025a64  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cdb0  200002c0  08025d00  000402c0  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  2000d070  08025d00  0004d070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021367  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f92  00000000  00000000  00061633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  000675c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  00069508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002175a  00000000  00000000  0006b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f3f1  00000000  00000000  0008c862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef62  00000000  00000000  000bbc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015abb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093dc  00000000  00000000  0015ac08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080171f0 	.word	0x080171f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	080171f0 	.word	0x080171f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <apInit>:
void lcdMain(void);
void sensorMain(void);
void buttonMain(void);

void apInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 800102c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fd93 	bl	8001b5c <cliOpen>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}

0800103a <apMain>:

void apMain(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8001040:	f000 f955 	bl	80012ee <millis>
 8001044:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8001046:	f000 f952 	bl	80012ee <millis>
 800104a:	4602      	mov	r2, r0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001054:	d302      	bcc.n	800105c <apMain+0x22>
    {
      pre_time = millis();
 8001056:	f000 f94a 	bl	80012ee <millis>
 800105a:	6078      	str	r0, [r7, #4]

    }

    sensorMain();
 800105c:	f000 f807 	bl	800106e <sensorMain>
    buttonMain();
 8001060:	f000 f80f 	bl	8001082 <buttonMain>

    cliMain();
 8001064:	f000 fe32 	bl	8001ccc <cliMain>
    lcdMain();
 8001068:	f000 f844 	bl	80010f4 <lcdMain>
    if (millis()-pre_time >= 1000)
 800106c:	e7eb      	b.n	8001046 <apMain+0xc>

0800106e <sensorMain>:
  }
}

void sensorMain(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 8001072:	f001 fcf9 	bl	8002a68 <Ds18b20_ManualConvert>
    Sonar_measure();
 8001076:	f004 fd0f 	bl	8005a98 <Sonar_measure>
    tds_measure();
 800107a:	f005 f9d5 	bl	8006428 <tds_measure>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <buttonMain>:

void buttonMain(void)
{
 8001082:	b598      	push	{r3, r4, r7, lr}
 8001084:	af00      	add	r7, sp, #0
	if(buttonGetPressed(USER_BTN)|buttonGetPressed(MENU_BTN)|buttonGetPressed(UP_BTN)|buttonGetPressed(DOWN_BTN)|buttonGetPressed(SEL_BTN))
 8001086:	2000      	movs	r0, #0
 8001088:	f000 fc64 	bl	8001954 <buttonGetPressed>
 800108c:	4603      	mov	r3, r0
 800108e:	461c      	mov	r4, r3
 8001090:	2001      	movs	r0, #1
 8001092:	f000 fc5f 	bl	8001954 <buttonGetPressed>
 8001096:	4603      	mov	r3, r0
 8001098:	4323      	orrs	r3, r4
 800109a:	b2dc      	uxtb	r4, r3
 800109c:	2002      	movs	r0, #2
 800109e:	f000 fc59 	bl	8001954 <buttonGetPressed>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4323      	orrs	r3, r4
 80010a6:	b2dc      	uxtb	r4, r3
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 fc53 	bl	8001954 <buttonGetPressed>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4323      	orrs	r3, r4
 80010b2:	b2dc      	uxtb	r4, r3
 80010b4:	2004      	movs	r0, #4
 80010b6:	f000 fc4d 	bl	8001954 <buttonGetPressed>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4323      	orrs	r3, r4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <buttonMain+0x4a>
	{
		ledOn(_DEF_LED1);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f003 fb5b 	bl	8004780 <ledOn>
 80010ca:	e002      	b.n	80010d2 <buttonMain+0x50>
	}
	else
	{
		ledOff(_DEF_LED1);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f003 fb77 	bl	80047c0 <ledOff>
	}

	if(buttonGetPressed(SEL_BTN))
 80010d2:	2004      	movs	r0, #4
 80010d4:	f000 fc3e 	bl	8001954 <buttonGetPressed>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <buttonMain+0x66>
	{
		gpioPinWrite(BUZZER, SET);
 80010de:	2101      	movs	r1, #1
 80010e0:	2008      	movs	r0, #8
 80010e2:	f002 fa67 	bl	80035b4 <gpioPinWrite>
	}
	else
	{
		gpioPinWrite(BUZZER, RESET);
	}
}
 80010e6:	e003      	b.n	80010f0 <buttonMain+0x6e>
		gpioPinWrite(BUZZER, RESET);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2008      	movs	r0, #8
 80010ec:	f002 fa62 	bl	80035b4 <gpioPinWrite>
}
 80010f0:	bf00      	nop
 80010f2:	bd98      	pop	{r3, r4, r7, pc}

080010f4 <lcdMain>:

void lcdMain(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 80010fa:	f002 fc21 	bl	8003940 <lcdIsInit>
 80010fe:	4603      	mov	r3, r0
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80a2 	bne.w	8001250 <lcdMain+0x15c>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 800110c:	f002 fe42 	bl	8003d94 <lcdDrawAvailable>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 809d 	beq.w	8001252 <lcdMain+0x15e>
  {
      lcdClearBuffer(black);
 8001118:	2000      	movs	r0, #0
 800111a:	f002 fc4f 	bl	80039bc <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 800111e:	2003      	movs	r0, #3
 8001120:	f003 fa16 	bl	8004550 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[풍경채 아쿠아리움]");
 8001124:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <lcdMain+0x164>)
 8001126:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800112a:	2100      	movs	r1, #0
 800112c:	2000      	movs	r0, #0
 800112e:	f003 f83f 	bl	80041b0 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8001132:	f002 fe17 	bl	8003d64 <lcdGetFps>
 8001136:	4603      	mov	r3, r0
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <lcdMain+0x168>)
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	2110      	movs	r1, #16
 8001142:	2000      	movs	r0, #0
 8001144:	f003 f834 	bl	80041b0 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8001148:	f002 fe18 	bl	8003d7c <lcdGetFpsTime>
 800114c:	4603      	mov	r3, r0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <lcdMain+0x16c>)
 8001152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001156:	2120      	movs	r1, #32
 8001158:	2000      	movs	r0, #0
 800115a:	f003 f829 	bl	80041b0 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 800115e:	f000 f8c6 	bl	80012ee <millis>
 8001162:	4603      	mov	r3, r0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <lcdMain+0x16c>)
 8001168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116c:	2130      	movs	r1, #48	; 0x30
 800116e:	2000      	movs	r0, #0
 8001170:	f003 f81e 	bl	80041b0 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2305      	movs	r3, #5
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2311      	movs	r3, #17
 8001180:	2234      	movs	r2, #52	; 0x34
 8001182:	2110      	movs	r1, #16
 8001184:	2046      	movs	r0, #70	; 0x46
 8001186:	f002 fcc1 	bl	8003b0c <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, red);
 800118a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2305      	movs	r3, #5
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	230f      	movs	r3, #15
 8001196:	2232      	movs	r2, #50	; 0x32
 8001198:	2111      	movs	r1, #17
 800119a:	2047      	movs	r0, #71	; 0x47
 800119c:	f002 fdb0 	bl	8003d00 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f003 f9d5 	bl	8004550 <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <lcdMain+0x170>)
 80011a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ac:	2115      	movs	r1, #21
 80011ae:	204b      	movs	r0, #75	; 0x4b
 80011b0:	f002 fffe 	bl	80041b0 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f003 f9cb 	bl	8004550 <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3.1f 도" , ds18b20[0].Temperature);
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <lcdMain+0x174>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9da 	bl	8000578 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	e9cd 2300 	strd	r2, r3, [sp]
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <lcdMain+0x178>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	2000      	movs	r0, #0
 80011d6:	f002 ffeb 	bl	80041b0 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <lcdMain+0x17c>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a25      	ldr	r2, [pc, #148]	; (8001274 <lcdMain+0x180>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <lcdMain+0x184>)
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	2150      	movs	r1, #80	; 0x50
 80011f0:	2000      	movs	r0, #0
 80011f2:	f002 ffdd 	bl	80041b0 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4.1f ppm" , tds_tbl[0].filter_tdsValue);
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <lcdMain+0x188>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9bc 	bl	8000578 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	e9cd 2300 	strd	r2, r3, [sp]
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <lcdMain+0x18c>)
 800120a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120e:	2160      	movs	r1, #96	; 0x60
 8001210:	2000      	movs	r0, #0
 8001212:	f002 ffcd 	bl	80041b0 <lcdPrintf>
      //lcdDrawBufferImage(50, 20, 50, 50, TEST);

      lcdDrawFillRect( 0, 118, 10, 10, red);
 8001216:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	230a      	movs	r3, #10
 800121e:	220a      	movs	r2, #10
 8001220:	2176      	movs	r1, #118	; 0x76
 8001222:	2000      	movs	r0, #0
 8001224:	f002 ff3e 	bl	80040a4 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 8001228:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	230a      	movs	r3, #10
 8001230:	220a      	movs	r2, #10
 8001232:	2176      	movs	r1, #118	; 0x76
 8001234:	200a      	movs	r0, #10
 8001236:	f002 ff35 	bl	80040a4 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 800123a:	231f      	movs	r3, #31
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	230a      	movs	r3, #10
 8001240:	220a      	movs	r2, #10
 8001242:	2176      	movs	r1, #118	; 0x76
 8001244:	2014      	movs	r0, #20
 8001246:	f002 ff2d 	bl	80040a4 <lcdDrawFillRect>


      lcdRequestDraw();
 800124a:	f002 fdb9 	bl	8003dc0 <lcdRequestDraw>
 800124e:	e000      	b.n	8001252 <lcdMain+0x15e>
    return;
 8001250:	bf00      	nop
  }
}
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	08017240 	.word	0x08017240
 800125c:	0801725c 	.word	0x0801725c
 8001260:	08017264 	.word	0x08017264
 8001264:	0801726c 	.word	0x0801726c
 8001268:	20000724 	.word	0x20000724
 800126c:	08017274 	.word	0x08017274
 8001270:	2000cbe8 	.word	0x2000cbe8
 8001274:	cccccccd 	.word	0xcccccccd
 8001278:	0801728c 	.word	0x0801728c
 800127c:	2000cd9c 	.word	0x2000cd9c
 8001280:	080172a0 	.word	0x080172a0

08001284 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  HAL_Init();
 800128a:	f00a fd17 	bl	800bcbc <HAL_Init>
  SystemClock_Config();
 800128e:	f000 f835 	bl	80012fc <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <bspInit+0x50>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <bspInit+0x50>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <bspInit+0x50>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <bspInit+0x50>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <bspInit+0x50>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <bspInit+0x50>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <delay>:

void delay(uint32_t ms)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f00a fd5d 	bl	800bda0 <HAL_Delay>
#endif
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <millis>:

uint32_t millis(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012f2:	f00a fd49 	bl	800bd88 <HAL_GetTick>
 80012f6:	4603      	mov	r3, r0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f011 fc8a 	bl	8012c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <SystemClock_Config+0xc8>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <SystemClock_Config+0xc8>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <SystemClock_Config+0xc8>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <SystemClock_Config+0xcc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <SystemClock_Config+0xcc>)
 8001346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <SystemClock_Config+0xcc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800136c:	2319      	movs	r3, #25
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001370:	23c0      	movs	r3, #192	; 0xc0
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001378:	2304      	movs	r3, #4
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f00c fa5f 	bl	800d844 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800138c:	f000 f81e 	bl	80013cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2103      	movs	r1, #3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00c fcb7 	bl	800dd20 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b8:	f000 f808 	bl	80013cc <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3750      	adds	r7, #80	; 0x50
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <Error_Handler+0x8>
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_MspInit+0x4c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_MspInit+0x4c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f00a fc74 	bl	800bd60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <ADC_IRQHandler+0x10>)
 8001482:	f00a fcf4 	bl	800be6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000ccf4 	.word	0x2000ccf4

08001490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM3_IRQHandler+0x10>)
 8001496:	f00e ff1b 	bl	80102d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000cba8 	.word	0x2000cba8

080014a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <SPI1_IRQHandler+0x10>)
 80014aa:	f00e fbfd 	bl	800fca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000cc3c 	.word	0x2000cc3c

080014b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <USART1_IRQHandler+0x10>)
 80014be:	f00f fe09 	bl	80110d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000cef8 	.word	0x2000cef8

080014cc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <SDIO_IRQHandler+0x10>)
 80014d2:	f00d f86f 	bl	800e5b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000ca64 	.word	0x2000ca64

080014e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA2_Stream0_IRQHandler+0x10>)
 80014e6:	f00b fc83 	bl	800cdf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000cd3c 	.word	0x2000cd3c

080014f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA2_Stream2_IRQHandler+0x10>)
 80014fa:	f00b fc79 	bl	800cdf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000cf98 	.word	0x2000cf98

08001508 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA2_Stream3_IRQHandler+0x10>)
 800150e:	f00b fc6f 	bl	800cdf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000cb48 	.word	0x2000cb48

0800151c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA2_Stream5_IRQHandler+0x10>)
 8001522:	f00b fc65 	bl	800cdf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000cc94 	.word	0x2000cc94

08001530 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA2_Stream6_IRQHandler+0x10>)
 8001536:	f00b fc5b 	bl	800cdf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000cae8 	.word	0x2000cae8

08001544 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <DMA2_Stream7_IRQHandler+0x10>)
 800154a:	f00b fc51 	bl	800cdf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000cf38 	.word	0x2000cf38

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001572:	f011 fb0f 	bl	8012b94 <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
	return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800159a:	e7fe      	b.n	800159a <_exit+0x12>

0800159c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
	}

return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
	}
	return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	605a      	str	r2, [r3, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f011 fa74 	bl	8012b94 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20020000 	.word	0x20020000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200002dc 	.word	0x200002dc
 80016e0:	2000d070 	.word	0x2000d070

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <SystemInit+0x28>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <SystemInit+0x28>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <SystemInit+0x28>)
 80016fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001714:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001726:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
  ldr  r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800172e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001736:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173a:	f7ff ffd3 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f011 fa2f 	bl	8012ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f011 fa1b 	bl	8012b7c <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800174c:	08025a64 	.word	0x08025a64
  ldr  r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001754:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 8001758:	200002c0 	.word	0x200002c0
  ldr  r3, = _ebss
 800175c:	2000d070 	.word	0x2000d070

08001760 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <DMA1_Stream0_IRQHandler>

08001762 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001762:	b480      	push	{r7}
 8001764:	b087      	sub	sp, #28
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	60da      	str	r2, [r3, #12]

  return ret;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
}
 800178c:	4618      	mov	r0, r3
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80017a4:	2301      	movs	r3, #1
 80017a6:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	e026      	b.n	80017fc <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	441a      	add	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	440b      	add	r3, r1
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d00c      	beq.n	80017f0 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	6892      	ldr	r2, [r2, #8]
 80017e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	1a9a      	subs	r2, r3, r2
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	e002      	b.n	80017f6 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
      break;
 80017f4:	e006      	b.n	8001804 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3301      	adds	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8d4      	bhi.n	80017ae <qbufferRead+0x16>
    }
  }

  return ret;
 8001804:	7dfb      	ldrb	r3, [r7, #23]
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6892      	ldr	r2, [r2, #8]
 8001828:	fbb3 f1f2 	udiv	r1, r3, r2
 800182c:	fb01 f202 	mul.w	r2, r1, r2
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

  return ret;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <DWT_Delay_Init+0x58>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <DWT_Delay_Init+0x58>)
 800184e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001852:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <DWT_Delay_Init+0x58>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a10      	ldr	r2, [pc, #64]	; (800189c <DWT_Delay_Init+0x58>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <DWT_Delay_Init+0x5c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <DWT_Delay_Init+0x5c>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <DWT_Delay_Init+0x5c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <DWT_Delay_Init+0x5c>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <DWT_Delay_Init+0x5c>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800187e:	bf00      	nop
     __ASM volatile ("NOP");
 8001880:	bf00      	nop
     __ASM volatile ("NOP");
 8001882:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <DWT_Delay_Init+0x5c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001890:	2301      	movs	r3, #1
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000edf0 	.word	0xe000edf0
 80018a0:	e0001000 	.word	0xe0001000

080018a4 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
  bool ret = true;
 80018aa:	2301      	movs	r3, #1
 80018ac:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <buttonInit+0xa0>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <buttonInit+0xa0>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <buttonInit+0xa0>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e023      	b.n	800192a <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 80018e2:	4919      	ldr	r1, [pc, #100]	; (8001948 <buttonInit+0xa4>)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3304      	adds	r3, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 80018f6:	4914      	ldr	r1, [pc, #80]	; (8001948 <buttonInit+0xa4>)
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3308      	adds	r3, #8
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 800190a:	490f      	ldr	r1, [pc, #60]	; (8001948 <buttonInit+0xa4>)
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1d3a      	adds	r2, r7, #4
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f00b fcdc 	bl	800d2dc <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3301      	adds	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b04      	cmp	r3, #4
 800192e:	ddd8      	ble.n	80018e2 <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001930:	4906      	ldr	r1, [pc, #24]	; (800194c <buttonInit+0xa8>)
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <buttonInit+0xac>)
 8001934:	f000 feec 	bl	8002710 <cliAdd>
#endif

  return ret;
 8001938:	7efb      	ldrb	r3, [r7, #27]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	20000004 	.word	0x20000004
 800194c:	08001a35 	.word	0x08001a35
 8001950:	080172b0 	.word	0x080172b0

08001954 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <buttonGetPressed+0xdc>)
 800196e:	4413      	add	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d901      	bls.n	800197c <buttonGetPressed+0x28>
  {
    return false;
 8001978:	2300      	movs	r3, #0
 800197a:	e054      	b.n	8001a26 <buttonGetPressed+0xd2>
  }

  switch(button->State)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	7b9b      	ldrb	r3, [r3, #14]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <buttonGetPressed+0x36>
 8001984:	2b01      	cmp	r3, #1
 8001986:	d018      	beq.n	80019ba <buttonGetPressed+0x66>
 8001988:	e04c      	b.n	8001a24 <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f00b ff08 	bl	800d7ac <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d13a      	bne.n	8001a1e <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 80019a8:	f7ff fca1 	bl	80012ee <millis>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	615a      	str	r2, [r3, #20]
  			  button->State = BUTTON_Pressed;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2201      	movs	r2, #1
 80019b6:	739a      	strb	r2, [r3, #14]
  		  }
  		  break;
 80019b8:	e031      	b.n	8001a1e <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f00b fef0 	bl	800d7ac <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d114      	bne.n	8001a02 <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80019d8:	f7ff fc89 	bl	80012ee <millis>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	1ad2      	subs	r2, r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d91a      	bls.n	8001a22 <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2201      	movs	r2, #1
 80019f0:	735a      	strb	r2, [r3, #13]
				  ret = button->PinState;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	7b5b      	ldrb	r3, [r3, #13]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8001a00:	e00f      	b.n	8001a22 <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2200      	movs	r2, #0
 8001a06:	739a      	strb	r2, [r3, #14]
			  button->PinState = GPIO_PIN_RESET;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	735a      	strb	r2, [r3, #13]
			  ret = button->PinState;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
		  break;
 8001a1c:	e001      	b.n	8001a22 <buttonGetPressed+0xce>
  		  break;
 8001a1e:	bf00      	nop
 8001a20:	e000      	b.n	8001a24 <buttonGetPressed+0xd0>
		  break;
 8001a22:	bf00      	nop
  }
  return ret;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000004 	.word	0x20000004

08001a34 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d128      	bne.n	8001a9a <cliButton+0x66>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4919      	ldr	r1, [pc, #100]	; (8001ab4 <cliButton+0x80>)
 8001a4e:	2000      	movs	r0, #0
 8001a50:	4798      	blx	r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001a58:	e018      	b.n	8001a8c <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	e00c      	b.n	8001a7a <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff75 	bl	8001954 <buttonGetPressed>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <cliButton+0x84>)
 8001a70:	f000 fd3e 	bl	80024f0 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3301      	adds	r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	ddef      	ble.n	8001a60 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <cliButton+0x88>)
 8001a82:	f000 fd35 	bl	80024f0 <cliPrintf>

      delay(100);
 8001a86:	2064      	movs	r0, #100	; 0x64
 8001a88:	f7ff fc26 	bl	80012d8 <delay>
    while(cliKeepLoop())
 8001a8c:	f000 fe2a 	bl	80026e4 <cliKeepLoop>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e1      	bne.n	8001a5a <cliButton+0x26>
    }

    ret = true;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <cliButton+0x78>
  {
    cliPrintf("button show\n");
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <cliButton+0x8c>)
 8001aa8:	f000 fd22 	bl	80024f0 <cliPrintf>
  }
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	080172b8 	.word	0x080172b8
 8001ab8:	080172c0 	.word	0x080172c0
 8001abc:	080172c4 	.word	0x080172c4
 8001ac0:	080172c8 	.word	0x080172c8

08001ac4 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <cliInit+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <cliInit+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <cliInit+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <cliInit+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <cliInit+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <cliInit+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <cliInit+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <cliInit+0x74>)
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <cliInit+0x78>)
 8001afe:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <cliInit+0x74>)
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <cliInit+0x7c>)
 8001b06:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <cliInit+0x74>)
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <cliInit+0x80>)
 8001b0e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <cliInit+0x74>)
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <cliInit+0x84>)
 8001b16:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <cliInit+0x74>)
 8001b1c:	f000 fb5e 	bl	80021dc <cliLineClean>


  cliAdd("help", cliShowList);
 8001b20:	490a      	ldr	r1, [pc, #40]	; (8001b4c <cliInit+0x88>)
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <cliInit+0x8c>)
 8001b24:	f000 fdf4 	bl	8002710 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001b28:	490a      	ldr	r1, [pc, #40]	; (8001b54 <cliInit+0x90>)
 8001b2a:	480b      	ldr	r0, [pc, #44]	; (8001b58 <cliInit+0x94>)
 8001b2c:	f000 fdf0 	bl	8002710 <cliAdd>

  return true;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002e0 	.word	0x200002e0
 8001b3c:	080025a1 	.word	0x080025a1
 8001b40:	080025f1 	.word	0x080025f1
 8001b44:	08002649 	.word	0x08002649
 8001b48:	08002691 	.word	0x08002691
 8001b4c:	080027a5 	.word	0x080027a5
 8001b50:	080172d8 	.word	0x080172d8
 8001b54:	08002815 	.word	0x08002815
 8001b58:	080172e0 	.word	0x080172e0

08001b5c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <cliOpen+0x38>)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <cliOpen+0x38>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fe37 	bl	80067ec <uartOpen>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <cliOpen+0x38>)
 8001b84:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <cliOpen+0x38>)
 8001b88:	7a1b      	ldrb	r3, [r3, #8]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200002e0 	.word	0x200002e0

08001b98 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <cliShowLog+0xdc>)
 8001ba2:	7a5b      	ldrb	r3, [r3, #9]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d061      	beq.n	8001c6c <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7a98      	ldrb	r0, [r3, #10]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4930      	ldr	r1, [pc, #192]	; (8001c78 <cliShowLog+0xe0>)
 8001bb6:	f004 ffcf 	bl	8006b58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7a98      	ldrb	r0, [r3, #10]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	492d      	ldr	r1, [pc, #180]	; (8001c7c <cliShowLog+0xe4>)
 8001bc8:	f004 ffc6 	bl	8006b58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7a98      	ldrb	r0, [r3, #10]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4929      	ldr	r1, [pc, #164]	; (8001c80 <cliShowLog+0xe8>)
 8001bda:	f004 ffbd 	bl	8006b58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a98      	ldrb	r0, [r3, #10]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001be8:	461a      	mov	r2, r3
 8001bea:	4926      	ldr	r1, [pc, #152]	; (8001c84 <cliShowLog+0xec>)
 8001bec:	f004 ffb4 	bl	8006b58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7a98      	ldrb	r0, [r3, #10]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4922      	ldr	r1, [pc, #136]	; (8001c88 <cliShowLog+0xf0>)
 8001bfe:	f004 ffab 	bl	8006b58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7a98      	ldrb	r0, [r3, #10]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	491f      	ldr	r1, [pc, #124]	; (8001c8c <cliShowLog+0xf4>)
 8001c10:	f004 ffa2 	bl	8006b58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7a98      	ldrb	r0, [r3, #10]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c1e:	461a      	mov	r2, r3
 8001c20:	491b      	ldr	r1, [pc, #108]	; (8001c90 <cliShowLog+0xf8>)
 8001c22:	f004 ff99 	bl	8006b58 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e012      	b.n	8001c52 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7a98      	ldrb	r0, [r3, #10]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4613      	mov	r3, r2
 8001c34:	015b      	lsls	r3, r3, #5
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4913      	ldr	r1, [pc, #76]	; (8001c94 <cliShowLog+0xfc>)
 8001c48:	f004 ff86 	bl	8006b58 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	dbe5      	blt.n	8001c2c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7a9b      	ldrb	r3, [r3, #10]
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <cliShowLog+0x100>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 ff76 	bl	8006b58 <uartPrintf>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200002e0 	.word	0x200002e0
 8001c78:	080172e4 	.word	0x080172e4
 8001c7c:	080172f4 	.word	0x080172f4
 8001c80:	08017304 	.word	0x08017304
 8001c84:	08017314 	.word	0x08017314
 8001c88:	08017324 	.word	0x08017324
 8001c8c:	08017334 	.word	0x08017334
 8001c90:	08017344 	.word	0x08017344
 8001c94:	08017354 	.word	0x08017354
 8001c98:	08017364 	.word	0x08017364

08001c9c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4906      	ldr	r1, [pc, #24]	; (8001cc4 <cliShowPrompt+0x28>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 ff54 	bl	8006b58 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <cliShowPrompt+0x2c>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 ff4e 	bl	8006b58 <uartPrintf>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	08017368 	.word	0x08017368
 8001cc8:	0801736c 	.word	0x0801736c

08001ccc <cliMain>:

bool cliMain(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <cliMain+0x40>)
 8001cd2:	7a1b      	ldrb	r3, [r3, #8]
 8001cd4:	f083 0301 	eor.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <cliMain+0x16>
  {
    return false;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e012      	b.n	8001d08 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <cliMain+0x40>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fe92 	bl	8006a10 <uartAvailable>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <cliMain+0x40>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fed0 	bl	8006a9c <uartRead>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <cliMain+0x40>)
 8001d02:	f000 f805 	bl	8001d10 <cliUpdate>
  }

  return true;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200002e0 	.word	0x200002e0

08001d10 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001d28:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7c1b      	ldrb	r3, [r3, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8168 	bne.w	8002004 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	2b7f      	cmp	r3, #127	; 0x7f
 8001d38:	d02a      	beq.n	8001d90 <cliUpdate+0x80>
 8001d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d3c:	f300 80da 	bgt.w	8001ef4 <cliUpdate+0x1e4>
 8001d40:	2b1b      	cmp	r3, #27
 8001d42:	d021      	beq.n	8001d88 <cliUpdate+0x78>
 8001d44:	2b1b      	cmp	r3, #27
 8001d46:	f300 80d5 	bgt.w	8001ef4 <cliUpdate+0x1e4>
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d062      	beq.n	8001e14 <cliUpdate+0x104>
 8001d4e:	2b0d      	cmp	r3, #13
 8001d50:	f040 80d0 	bne.w	8001ef4 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fa56 	bl	8002210 <cliLineAdd>
          cliRunCmd(p_cli);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fb21 	bl	80023ac <cliRunCmd>
        }

        line->count = 0;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff8b 	bl	8001c9c <cliShowPrompt>
        break;
 8001d86:	e144      	b.n	8002012 <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	741a      	strb	r2, [r3, #16]
        break;
 8001d8e:	e140      	b.n	8002012 <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f080 8133 	bcs.w	8002008 <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001db2:	2301      	movs	r3, #1
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db6:	e013      	b.n	8001de0 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	441a      	add	r2, r3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	440b      	add	r3, r1
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	69f9      	ldr	r1, [r7, #28]
 8001dd4:	5c89      	ldrb	r1, [r1, r2]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	3301      	adds	r3, #1
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de0:	7efb      	ldrb	r3, [r7, #27]
 8001de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbe7      	blt.n	8001db8 <cliUpdate+0xa8>
          }

          line->count--;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dfe:	461a      	mov	r2, r3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	498e      	ldr	r1, [pc, #568]	; (8002044 <cliUpdate+0x334>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 fea3 	bl	8006b58 <uartPrintf>
        }
        break;
 8001e12:	e0f9      	b.n	8002008 <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d055      	beq.n	8001eca <cliUpdate+0x1ba>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d050      	beq.n	8001eca <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10e      	bne.n	8001e56 <cliUpdate+0x146>
          {
            line->count--;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e4e:	461a      	mov	r2, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d231      	bcs.n	8001eca <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7a:	e013      	b.n	8001ea4 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e82:	461a      	mov	r2, r3
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	441a      	add	r2, r3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	440b      	add	r3, r1
 8001e94:	3b01      	subs	r3, #1
 8001e96:	69f9      	ldr	r1, [r7, #28]
 8001e98:	5c89      	ldrb	r1, [r1, r2]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea4:	7ebb      	ldrb	r3, [r7, #26]
 8001ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbe7      	blt.n	8001e7c <cliUpdate+0x16c>
            }

            line->count--;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 809b 	beq.w	800200c <cliUpdate+0x2fc>
        {
          line->cursor--;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4957      	ldr	r1, [pc, #348]	; (8002048 <cliUpdate+0x338>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fe33 	bl	8006b58 <uartPrintf>
        }
        break;
 8001ef2:	e08b      	b.n	800200c <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001efa:	3301      	adds	r3, #1
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f280 8084 	bge.w	8002010 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d124      	bne.n	8001f62 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	1cf9      	adds	r1, r7, #3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fde1 	bl	8006ae8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	78f9      	ldrb	r1, [r7, #3]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d24e      	bcs.n	8002010 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e013      	b.n	8001fb0 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1acb      	subs	r3, r1, r3
 8001fa2:	69f9      	ldr	r1, [r7, #28]
 8001fa4:	5c89      	ldrb	r1, [r1, r2]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	7e7b      	ldrb	r3, [r7, #25]
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbe7      	blt.n	8001f88 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	78f9      	ldrb	r1, [r7, #3]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fec:	461a      	mov	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4914      	ldr	r1, [pc, #80]	; (800204c <cliUpdate+0x33c>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fdab 	bl	8006b58 <uartPrintf>
          }
        }
        break;
 8002002:	e005      	b.n	8002010 <cliUpdate+0x300>
    }
  }
 8002004:	bf00      	nop
 8002006:	e004      	b.n	8002012 <cliUpdate+0x302>
        break;
 8002008:	bf00      	nop
 800200a:	e002      	b.n	8002012 <cliUpdate+0x302>
        break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <cliUpdate+0x302>
        break;
 8002010:	bf00      	nop

  switch(p_cli->state)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7c1b      	ldrb	r3, [r3, #16]
 8002016:	3b01      	subs	r3, #1
 8002018:	2b03      	cmp	r3, #3
 800201a:	f200 80d2 	bhi.w	80021c2 <cliUpdate+0x4b2>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <cliUpdate+0x314>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002035 	.word	0x08002035
 8002028:	0800203d 	.word	0x0800203d
 800202c:	08002051 	.word	0x08002051
 8002030:	080021b9 	.word	0x080021b9
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	741a      	strb	r2, [r3, #16]
      break;
 800203a:	e0c2      	b.n	80021c2 <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	741a      	strb	r2, [r3, #16]
      break;
 8002042:	e0be      	b.n	80021c2 <cliUpdate+0x4b2>
 8002044:	08017374 	.word	0x08017374
 8002048:	0801737c 	.word	0x0801737c
 800204c:	08017384 	.word	0x08017384

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	2b44      	cmp	r3, #68	; 0x44
 800205a:	d11a      	bne.n	8002092 <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	2b00      	cmp	r3, #0
 8002064:	d015      	beq.n	8002092 <cliUpdate+0x382>
        {
          line->cursor--;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206c:	3b01      	subs	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8002076:	231b      	movs	r3, #27
 8002078:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800207a:	235b      	movs	r3, #91	; 0x5b
 800207c:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	f107 010c 	add.w	r1, r7, #12
 800208a:	2203      	movs	r2, #3
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fd2b 	bl	8006ae8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	2b43      	cmp	r3, #67	; 0x43
 8002096:	d11d      	bne.n	80020d4 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->count)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d215      	bcs.n	80020d4 <cliUpdate+0x3c4>
        {
          line->cursor++;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 80020b8:	231b      	movs	r3, #27
 80020ba:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80020bc:	235b      	movs	r3, #91	; 0x5b
 80020be:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f107 010c 	add.w	r1, r7, #12
 80020cc:	2203      	movs	r2, #3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 fd0a 	bl	8006ae8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	2b41      	cmp	r3, #65	; 0x41
 80020d8:	d10c      	bne.n	80020f4 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 80020da:	2101      	movs	r1, #1
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8db 	bl	8002298 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f004 fd32 	bl	8006b58 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	2b42      	cmp	r3, #66	; 0x42
 80020f8:	d10c      	bne.n	8002114 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8cb 	bl	8002298 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f004 fd22 	bl	8006b58 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b31      	cmp	r3, #49	; 0x31
 8002118:	d10f      	bne.n	800213a <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7818      	ldrb	r0, [r3, #0]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002124:	461a      	mov	r2, r3
 8002126:	492b      	ldr	r1, [pc, #172]	; (80021d4 <cliUpdate+0x4c4>)
 8002128:	f004 fd16 	bl	8006b58 <uartPrintf>
        line->cursor = 0;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b34      	cmp	r3, #52	; 0x34
 800213e:	d13f      	bne.n	80021c0 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800214c:	429a      	cmp	r2, r3
 800214e:	d210      	bcs.n	8002172 <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002156:	b29a      	uxth	r2, r3
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215e:	b29b      	uxth	r3, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	8afa      	ldrh	r2, [r7, #22]
 800216a:	491b      	ldr	r1, [pc, #108]	; (80021d8 <cliUpdate+0x4c8>)
 800216c:	4618      	mov	r0, r3
 800216e:	f004 fcf3 	bl	8006b58 <uartPrintf>
        }
        if (line->cursor > line->count)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800217e:	429a      	cmp	r2, r3
 8002180:	d910      	bls.n	80021a4 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b29a      	uxth	r2, r3
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002190:	b29b      	uxth	r3, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	8afa      	ldrh	r2, [r7, #22]
 800219c:	490d      	ldr	r1, [pc, #52]	; (80021d4 <cliUpdate+0x4c4>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fcda 	bl	8006b58 <uartPrintf>
        }
        line->cursor = line->count;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2204      	movs	r2, #4
 80021b4:	741a      	strb	r2, [r3, #16]
      }
      break;
 80021b6:	e003      	b.n	80021c0 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	741a      	strb	r2, [r3, #16]
      break;
 80021be:	e000      	b.n	80021c2 <cliUpdate+0x4b2>
      break;
 80021c0:	bf00      	nop
  }



  cliShowLog(p_cli);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fce8 	bl	8001b98 <cliShowLog>

  return ret;
 80021c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3730      	adds	r7, #48	; 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	08017390 	.word	0x08017390
 80021d8:	08017398 	.word	0x08017398

080021dc <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	223f      	movs	r2, #63	; 0x3f
 80021f8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800221e:	461a      	mov	r2, r3
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	015b      	lsls	r3, r3, #5
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	440b      	add	r3, r1
 800222e:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4610      	mov	r0, r2
 8002236:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800223a:	2243      	movs	r2, #67	; 0x43
 800223c:	4619      	mov	r1, r3
 800223e:	f010 fce3 	bl	8012c08 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002248:	2b03      	cmp	r3, #3
 800224a:	d807      	bhi.n	800225c <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002262:	b25a      	sxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002270:	3301      	adds	r3, #1
 8002272:	425a      	negs	r2, r3
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	bf58      	it	pl
 800227e:	4253      	negpl	r3, r2
 8002280:	b2da      	uxtb	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d076      	beq.n	800239c <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7818      	ldrb	r0, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80022c2:	461a      	mov	r2, r3
 80022c4:	4937      	ldr	r1, [pc, #220]	; (80023a4 <cliLineChange+0x10c>)
 80022c6:	f004 fc47 	bl	8006b58 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7818      	ldrb	r0, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80022de:	461a      	mov	r2, r3
 80022e0:	4931      	ldr	r1, [pc, #196]	; (80023a8 <cliLineChange+0x110>)
 80022e2:	f004 fc39 	bl	8006b58 <uartPrintf>
  }


  if (key_up == true)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d125      	bne.n	800233a <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800230c:	461a      	mov	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002314:	4413      	add	r3, r2
 8002316:	3b01      	subs	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800231e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002322:	fb01 f202 	mul.w	r2, r1, r2
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	b25a      	sxtb	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e013      	b.n	8002362 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002340:	3301      	adds	r3, #1
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002348:	fb93 f1f2 	sdiv	r1, r3, r2
 800234c:	fb01 f202 	mul.w	r2, r1, r2
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	b25a      	sxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002360:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	4413      	add	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	4403      	add	r3, r0
 8002374:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002378:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 800237c:	4611      	mov	r1, r2
 800237e:	2243      	movs	r2, #67	; 0x43
 8002380:	4618      	mov	r0, r3
 8002382:	f010 fc41 	bl	8012c08 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800239a:	e000      	b.n	800239e <cliLineChange+0x106>
    return;
 800239c:	bf00      	nop
}
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	08017390 	.word	0x08017390
 80023a8:	080173a0 	.word	0x080173a0

080023ac <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80023b4:	2300      	movs	r3, #0
 80023b6:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f851 	bl	8002460 <cliParseArgs>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d046      	beq.n	8002452 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80023c4:	4825      	ldr	r0, [pc, #148]	; (800245c <cliRunCmd+0xb0>)
 80023c6:	f000 f893 	bl	80024f0 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f8b1 	bl	8002538 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e033      	b.n	8002444 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	3304      	adds	r3, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fd fef2 	bl	80001e0 <strcmp>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8002438:	4610      	mov	r0, r2
 800243a:	4798      	blx	r3
        break;
 800243c:	e009      	b.n	8002452 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3301      	adds	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4293      	cmp	r3, r2
 8002450:	dbc4      	blt.n	80023dc <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002452:	7afb      	ldrb	r3, [r7, #11]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	080173a8 	.word	0x080173a8

08002460 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002468:	2300      	movs	r3, #0
 800246a:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800247e:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8002486:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8002488:	8afb      	ldrh	r3, [r7, #22]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <cliParseArgs+0x8c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	4619      	mov	r1, r3
 800249e:	6938      	ldr	r0, [r7, #16]
 80024a0:	f011 ffd0 	bl	8014444 <strtok_r>
 80024a4:	61b8      	str	r0, [r7, #24]
 80024a6:	e010      	b.n	80024ca <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80024a8:	8afb      	ldrh	r3, [r7, #22]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	82fa      	strh	r2, [r7, #22]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <cliParseArgs+0x8c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f107 0208 	add.w	r2, r7, #8
 80024c0:	4619      	mov	r1, r3
 80024c2:	2000      	movs	r0, #0
 80024c4:	f011 ffbe 	bl	8014444 <strtok_r>
 80024c8:	61b8      	str	r0, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1eb      	bne.n	80024a8 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8afa      	ldrh	r2, [r7, #22]
 80024d4:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80024d8:	8afb      	ldrh	r3, [r7, #22]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <cliParseArgs+0x82>
  {
    ret = true;
 80024de:	2301      	movs	r3, #1
 80024e0:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000007c 	.word	0x2000007c

080024f0 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80024f0:	b40f      	push	{r0, r1, r2, r3}
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <cliPrintf+0x44>)
 8002500:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f103 0011 	add.w	r0, r3, #17
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002510:	f012 f844 	bl	801459c <vsniprintf>
 8002514:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	7818      	ldrb	r0, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3311      	adds	r3, #17
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4619      	mov	r1, r3
 8002522:	f004 fae1 	bl	8006ae8 <uartWrite>
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002530:	b004      	add	sp, #16
 8002532:	4770      	bx	lr
 8002534:	200002e0 	.word	0x200002e0

08002538 <cliToUpper>:

void cliToUpper(char *str)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	81fb      	strh	r3, [r7, #14]
 8002544:	e018      	b.n	8002578 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d014      	beq.n	8002580 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	2b60      	cmp	r3, #96	; 0x60
 800255a:	d905      	bls.n	8002568 <cliToUpper+0x30>
 800255c:	7b7b      	ldrb	r3, [r7, #13]
 800255e:	2b7a      	cmp	r3, #122	; 0x7a
 8002560:	d802      	bhi.n	8002568 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002562:	7b7b      	ldrb	r3, [r7, #13]
 8002564:	3b20      	subs	r3, #32
 8002566:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	7b7a      	ldrb	r2, [r7, #13]
 8002570:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	3301      	adds	r3, #1
 8002576:	81fb      	strh	r3, [r7, #14]
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	2b0f      	cmp	r3, #15
 800257c:	d9e3      	bls.n	8002546 <cliToUpper+0xe>
 800257e:	e000      	b.n	8002582 <cliToUpper+0x4a>
      break;
 8002580:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	2b10      	cmp	r3, #16
 8002586:	d105      	bne.n	8002594 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002588:	89fb      	ldrh	r3, [r7, #14]
 800258a:	3b01      	subs	r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  }
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <cliArgsGetData+0x4c>)
 80025b0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80025bc:	429a      	cmp	r2, r3
 80025be:	d301      	bcc.n	80025c4 <cliArgsGetData+0x24>
  {
    return 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e00e      	b.n	80025e2 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f011 ffaa 	bl	8014530 <strtoul>
 80025dc:	4603      	mov	r3, r0
 80025de:	60fb      	str	r3, [r7, #12]

  return ret;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200002e0 	.word	0x200002e0

080025f0 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <cliArgsGetFloat+0x54>)
 8002602:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	b29a      	uxth	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800260e:	429a      	cmp	r2, r3
 8002610:	d302      	bcc.n	8002618 <cliArgsGetFloat+0x28>
  {
    return 0;
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e00d      	b.n	8002634 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f011 fe87 	bl	801433c <strtof>
 800262e:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eeb0 0a67 	vmov.f32	s0, s15
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200002e0 	.word	0x200002e0

08002648 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <cliArgsGetStr+0x44>)
 8002658:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	b29a      	uxth	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002664:	429a      	cmp	r2, r3
 8002666:	d301      	bcc.n	800266c <cliArgsGetStr+0x24>
  {
    return 0;
 8002668:	2300      	movs	r3, #0
 800266a:	e008      	b.n	800267e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  return ret;
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200002e0 	.word	0x200002e0

08002690 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <cliArgsIsStr+0x50>)
 80026a2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d301      	bcc.n	80026b6 <cliArgsIsStr+0x26>
  {
    return 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e010      	b.n	80026d8 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	f7fd fd8a 	bl	80001e0 <strcmp>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <cliArgsIsStr+0x46>
  {
    ret = true;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200002e0 	.word	0x200002e0

080026e4 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <cliKeepLoop+0x28>)
 80026ec:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f98c 	bl	8006a10 <uartAvailable>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <cliKeepLoop+0x1e>
  {
    return true;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002702:	2300      	movs	r3, #0
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200002e0 	.word	0x200002e0

08002710 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <cliAdd+0x90>)
 8002720:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d901      	bls.n	8002730 <cliAdd+0x20>
  {
    return false;
 800272c:	2300      	movs	r3, #0
 800272e:	e032      	b.n	8002796 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002736:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f010 ffca 	bl	80136e8 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002754:	89fa      	ldrh	r2, [r7, #14]
 8002756:	6939      	ldr	r1, [r7, #16]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800276a:	89fa      	ldrh	r2, [r7, #14]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff feda 	bl	8002538 <cliToUpper>

  p_cli->cmd_count++;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800278a:	3301      	adds	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002794:	7dfb      	ldrb	r3, [r7, #23]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200002e0 	.word	0x200002e0

080027a4 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <cliShowList+0x60>)
 80027ae:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80027b0:	4815      	ldr	r0, [pc, #84]	; (8002808 <cliShowList+0x64>)
 80027b2:	f7ff fe9d 	bl	80024f0 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80027b6:	4815      	ldr	r0, [pc, #84]	; (800280c <cliShowList+0x68>)
 80027b8:	f7ff fe9a 	bl	80024f0 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e012      	b.n	80027e8 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fe8a 	bl	80024f0 <cliPrintf>
    cliPrintf("\r\n");
 80027dc:	480a      	ldr	r0, [pc, #40]	; (8002808 <cliShowList+0x64>)
 80027de:	f7ff fe87 	bl	80024f0 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	dbe5      	blt.n	80027c2 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80027f6:	4806      	ldr	r0, [pc, #24]	; (8002810 <cliShowList+0x6c>)
 80027f8:	f7ff fe7a 	bl	80024f0 <cliPrintf>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200002e0 	.word	0x200002e0
 8002808:	080173a8 	.word	0x080173a8
 800280c:	080173ac 	.word	0x080173ac
 8002810:	080173cc 	.word	0x080173cc

08002814 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800281c:	2310      	movs	r3, #16
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002834:	4840      	ldr	r0, [pc, #256]	; (8002938 <cliMemoryDump+0x124>)
 8002836:	f7ff fe5b 	bl	80024f0 <cliPrintf>
 800283a:	e07a      	b.n	8002932 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b01      	cmp	r3, #1
 8002840:	dd09      	ble.n	8002856 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	3304      	adds	r3, #4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f011 fe6f 	bl	8014530 <strtoul>
 8002852:	4603      	mov	r3, r0
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f011 fe66 	bl	8014530 <strtoul>
 8002864:	4603      	mov	r3, r0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800286c:	4833      	ldr	r0, [pc, #204]	; (800293c <cliMemoryDump+0x128>)
 800286e:	f7ff fe3f 	bl	80024f0 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	e058      	b.n	800292a <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	4619      	mov	r1, r3
 8002886:	482e      	ldr	r0, [pc, #184]	; (8002940 <cliMemoryDump+0x12c>)
 8002888:	f7ff fe32 	bl	80024f0 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	482c      	ldr	r0, [pc, #176]	; (8002944 <cliMemoryDump+0x130>)
 8002894:	f7ff fe2c 	bl	80024f0 <cliPrintf>

    if ((idx%4) == 3)
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	425a      	negs	r2, r3
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	f002 0203 	and.w	r2, r2, #3
 80028a4:	bf58      	it	pl
 80028a6:	4253      	negpl	r3, r2
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d138      	bne.n	800291e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80028ac:	4826      	ldr	r0, [pc, #152]	; (8002948 <cliMemoryDump+0x134>)
 80028ae:	f7ff fe1f 	bl	80024f0 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
 80028b6:	e02c      	b.n	8002912 <cliMemoryDump+0xfe>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80028bc:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	e01d      	b.n	8002900 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80028c4:	f107 020c 	add.w	r2, r7, #12
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b1f      	cmp	r3, #31
 80028d0:	d910      	bls.n	80028f4 <cliMemoryDump+0xe0>
 80028d2:	f107 020c 	add.w	r2, r7, #12
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b7e      	cmp	r3, #126	; 0x7e
 80028de:	d809      	bhi.n	80028f4 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80028e0:	f107 020c 	add.w	r2, r7, #12
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4817      	ldr	r0, [pc, #92]	; (800294c <cliMemoryDump+0x138>)
 80028ee:	f7ff fdff 	bl	80024f0 <cliPrintf>
 80028f2:	e002      	b.n	80028fa <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80028f4:	4816      	ldr	r0, [pc, #88]	; (8002950 <cliMemoryDump+0x13c>)
 80028f6:	f7ff fdfb 	bl	80024f0 <cliPrintf>
        for (i=0;i<4;i++)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b03      	cmp	r3, #3
 8002904:	ddde      	ble.n	80028c4 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3304      	adds	r3, #4
 800290a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	3301      	adds	r3, #1
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2b03      	cmp	r3, #3
 8002916:	ddcf      	ble.n	80028b8 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002918:	480e      	ldr	r0, [pc, #56]	; (8002954 <cliMemoryDump+0x140>)
 800291a:	f7ff fde9 	bl	80024f0 <cliPrintf>
    }
    addr++;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3304      	adds	r3, #4
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	3301      	adds	r3, #1
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	429a      	cmp	r2, r3
 8002930:	dba2      	blt.n	8002878 <cliMemoryDump+0x64>
  }
}
 8002932:	3730      	adds	r7, #48	; 0x30
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	080173ec 	.word	0x080173ec
 800293c:	08017400 	.word	0x08017400
 8002940:	08017408 	.word	0x08017408
 8002944:	08017414 	.word	0x08017414
 8002948:	0801741c 	.word	0x0801741c
 800294c:	08017420 	.word	0x08017420
 8002950:	08017424 	.word	0x08017424
 8002954:	08017428 	.word	0x08017428

08002958 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 800295e:	2305      	movs	r3, #5
 8002960:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8002962:	2201      	movs	r2, #1
 8002964:	4939      	ldr	r1, [pc, #228]	; (8002a4c <Ds18b20_Init+0xf4>)
 8002966:	483a      	ldr	r0, [pc, #232]	; (8002a50 <Ds18b20_Init+0xf8>)
 8002968:	f002 f9a7 	bl	8004cba <OneWire_Init>
		TempSensorCount = 0;
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <Ds18b20_Init+0xfc>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8002972:	e002      	b.n	800297a <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	f009 fa13 	bl	800bda0 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800297a:	f009 fa05 	bl	800bd88 <HAL_GetTick>
 800297e:	4603      	mov	r3, r0
 8002980:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002984:	4293      	cmp	r3, r2
 8002986:	d9f5      	bls.n	8002974 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8002988:	4831      	ldr	r0, [pc, #196]	; (8002a50 <Ds18b20_Init+0xf8>)
 800298a:	f002 fa84 	bl	8004e96 <OneWire_First>
 800298e:	4603      	mov	r3, r0
 8002990:	461a      	mov	r2, r3
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <Ds18b20_Init+0x100>)
 8002994:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002996:	e019      	b.n	80029cc <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8002998:	2064      	movs	r0, #100	; 0x64
 800299a:	f009 fa01 	bl	800bda0 <HAL_Delay>
			TempSensorCount++;
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <Ds18b20_Init+0xfc>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <Ds18b20_Init+0xfc>)
 80029a8:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <Ds18b20_Init+0xfc>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <Ds18b20_Init+0x104>)
 80029b4:	4413      	add	r3, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	4825      	ldr	r0, [pc, #148]	; (8002a50 <Ds18b20_Init+0xf8>)
 80029ba:	f002 fb81 	bl	80050c0 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80029be:	4824      	ldr	r0, [pc, #144]	; (8002a50 <Ds18b20_Init+0xf8>)
 80029c0:	f002 fa79 	bl	8004eb6 <OneWire_Next>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <Ds18b20_Init+0x100>)
 80029ca:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <Ds18b20_Init+0x100>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e1      	bne.n	8002998 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <Ds18b20_Init+0xfc>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	3b01      	subs	r3, #1
 80029e0:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1bc      	bne.n	8002962 <Ds18b20_Init+0xa>
 80029e8:	e000      	b.n	80029ec <Ds18b20_Init+0x94>
			break;
 80029ea:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <Ds18b20_Init+0x9e>
		return false;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e026      	b.n	8002a44 <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	71bb      	strb	r3, [r7, #6]
 80029fa:	e019      	b.n	8002a30 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80029fc:	2032      	movs	r0, #50	; 0x32
 80029fe:	f009 f9cf 	bl	800bda0 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <Ds18b20_Init+0x104>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4810      	ldr	r0, [pc, #64]	; (8002a50 <Ds18b20_Init+0xf8>)
 8002a10:	f000 f9cc 	bl	8002dac <DS18B20_SetResolution>
		HAL_Delay(50);
 8002a14:	2032      	movs	r0, #50	; 0x32
 8002a16:	f009 f9c3 	bl	800bda0 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002a1a:	79bb      	ldrb	r3, [r7, #6]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <Ds18b20_Init+0x104>)
 8002a20:	4413      	add	r3, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	480a      	ldr	r0, [pc, #40]	; (8002a50 <Ds18b20_Init+0xf8>)
 8002a26:	f000 fa5a 	bl	8002ede <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002a2a:	79bb      	ldrb	r3, [r7, #6]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	71bb      	strb	r3, [r7, #6]
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <Ds18b20_Init+0xfc>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	79ba      	ldrb	r2, [r7, #6]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3e0      	bcc.n	80029fc <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 8002a3a:	4909      	ldr	r1, [pc, #36]	; (8002a60 <Ds18b20_Init+0x108>)
 8002a3c:	4809      	ldr	r0, [pc, #36]	; (8002a64 <Ds18b20_Init+0x10c>)
 8002a3e:	f7ff fe67 	bl	8002710 <cliAdd>
	#endif

	return true;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	20000734 	.word	0x20000734
 8002a54:	20000749 	.word	0x20000749
 8002a58:	20000748 	.word	0x20000748
 8002a5c:	20000724 	.word	0x20000724
 8002a60:	08002fad 	.word	0x08002fad
 8002a64:	08017438 	.word	0x08017438

08002a68 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <Ds18b20_ManualConvert+0x104>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <Ds18b20_ManualConvert+0x14>
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d013      	beq.n	8002aa2 <Ds18b20_ManualConvert+0x3a>
 8002a7a:	e072      	b.n	8002b62 <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <Ds18b20_ManualConvert+0x108>)
 8002a7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a82:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8002a84:	483b      	ldr	r0, [pc, #236]	; (8002b74 <Ds18b20_ManualConvert+0x10c>)
 8002a86:	f000 f87d 	bl	8002b84 <DS18B20_StartAll>
	  		  pre_time = millis();
 8002a8a:	f7fe fc30 	bl	80012ee <millis>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a39      	ldr	r2, [pc, #228]	; (8002b78 <Ds18b20_ManualConvert+0x110>)
 8002a92:	6013      	str	r3, [r2, #0]
	  		  state++;
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <Ds18b20_ManualConvert+0x104>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <Ds18b20_ManualConvert+0x104>)
 8002a9e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002aa0:	e05f      	b.n	8002b62 <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8002aa2:	f7fe fc24 	bl	80012ee <millis>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <Ds18b20_ManualConvert+0x110>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	d956      	bls.n	8002b60 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8002ab2:	4830      	ldr	r0, [pc, #192]	; (8002b74 <Ds18b20_ManualConvert+0x10c>)
 8002ab4:	f000 fa6e 	bl	8002f94 <DS18B20_AllDone>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d112      	bne.n	8002ae4 <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 8002abe:	f7fe fc16 	bl	80012ee <millis>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <Ds18b20_ManualConvert+0x110>)
 8002ac6:	6013      	str	r3, [r2, #0]
					Ds18b20Timeout-=1;
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <Ds18b20_ManualConvert+0x108>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <Ds18b20_ManualConvert+0x108>)
 8002ad2:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <Ds18b20_ManualConvert+0x108>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d141      	bne.n	8002b60 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <Ds18b20_ManualConvert+0x104>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
						break;
 8002ae2:	e03e      	b.n	8002b62 <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <Ds18b20_ManualConvert+0x108>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d024      	beq.n	8002b36 <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	e01b      	b.n	8002b2a <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <Ds18b20_ManualConvert+0x114>)
 8002af8:	1899      	adds	r1, r3, r2
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3308      	adds	r3, #8
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <Ds18b20_ManualConvert+0x114>)
 8002b02:	4413      	add	r3, r2
 8002b04:	79fc      	ldrb	r4, [r7, #7]
 8002b06:	461a      	mov	r2, r3
 8002b08:	481a      	ldr	r0, [pc, #104]	; (8002b74 <Ds18b20_ManualConvert+0x10c>)
 8002b0a:	f000 f84f 	bl	8002bac <DS18B20_Read>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <Ds18b20_ManualConvert+0x114>)
 8002b14:	0123      	lsls	r3, r4, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	330c      	adds	r3, #12
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <Ds18b20_ManualConvert+0x104>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	3301      	adds	r3, #1
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <Ds18b20_ManualConvert+0x118>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	79fa      	ldrb	r2, [r7, #7]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d3de      	bcc.n	8002af2 <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8002b34:	e014      	b.n	8002b60 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	71bb      	strb	r3, [r7, #6]
 8002b3a:	e00c      	b.n	8002b56 <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <Ds18b20_ManualConvert+0x114>)
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	4413      	add	r3, r2
 8002b44:	330c      	adds	r3, #12
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <Ds18b20_ManualConvert+0x104>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b50:	79bb      	ldrb	r3, [r7, #6]
 8002b52:	3301      	adds	r3, #1
 8002b54:	71bb      	strb	r3, [r7, #6]
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <Ds18b20_ManualConvert+0x118>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	79ba      	ldrb	r2, [r7, #6]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d3ed      	bcc.n	8002b3c <Ds18b20_ManualConvert+0xd4>
			  break;
 8002b60:	bf00      	nop
	  }
	#endif
	  return true;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd90      	pop	{r4, r7, pc}
 8002b6c:	2000074c 	.word	0x2000074c
 8002b70:	2000074a 	.word	0x2000074a
 8002b74:	20000734 	.word	0x20000734
 8002b78:	20000750 	.word	0x20000750
 8002b7c:	20000724 	.word	0x20000724
 8002b80:	20000749 	.word	0x20000749

08002b84 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f002 f8bd 	bl	8004d0c <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002b92:	21cc      	movs	r1, #204	; 0xcc
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f002 f93f 	bl	8004e18 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002b9a:	2144      	movs	r1, #68	; 0x44
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f002 f93b 	bl	8004e18 <OneWire_WriteByte>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b08b      	sub	sp, #44	; 0x2c
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8002bc2:	68b8      	ldr	r0, [r7, #8]
 8002bc4:	f000 f97a 	bl	8002ebc <DS18B20_Is>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <DS18B20_Read+0x26>
		return false;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e0e1      	b.n	8002d96 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f002 f8f6 	bl	8004dc4 <OneWire_ReadBit>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e0d9      	b.n	8002d96 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f002 f892 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f002 fa49 	bl	8005082 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002bf0:	21be      	movs	r1, #190	; 0xbe
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f002 f910 	bl	8004e18 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e00d      	b.n	8002c1a <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002bfe:	7ffc      	ldrb	r4, [r7, #31]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f002 f927 	bl	8004e54 <OneWire_ReadByte>
 8002c06:	4603      	mov	r3, r0
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002c0e:	443b      	add	r3, r7
 8002c10:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002c14:	7ffb      	ldrb	r3, [r7, #31]
 8002c16:	3301      	adds	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	7ffb      	ldrb	r3, [r7, #31]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d9ee      	bls.n	8002bfe <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2108      	movs	r1, #8
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fa67 	bl	80050fa <OneWire_CRC8>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002c30:	7f3b      	ldrb	r3, [r7, #28]
 8002c32:	7fba      	ldrb	r2, [r7, #30]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e0ac      	b.n	8002d96 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002c3c:	7d3b      	ldrb	r3, [r7, #20]
 8002c3e:	b21a      	sxth	r2, r3
 8002c40:	7d7b      	ldrb	r3, [r7, #21]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f002 f85d 	bl	8004d0c <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002c52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da05      	bge.n	8002c66 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c5c:	425b      	negs	r3, r3
 8002c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002c66:	7e3b      	ldrb	r3, [r7, #24]
 8002c68:	115b      	asrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3309      	adds	r3, #9
 8002c74:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c8e:	b25a      	sxtb	r2, r3
 8002c90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002c9a:	7f7b      	ldrb	r3, [r7, #29]
 8002c9c:	3b09      	subs	r3, #9
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d858      	bhi.n	8002d54 <DS18B20_Read+0x1a8>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <DS18B20_Read+0xfc>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002d09 	.word	0x08002d09
 8002cb4:	08002d31 	.word	0x08002d31
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cba:	08db      	lsrs	r3, r3, #3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002cce:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cda:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002cde:	e03e      	b.n	8002d5e <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002cf6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cfa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d02:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d06:	e02a      	b.n	8002d5e <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002d08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002d1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d22:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d2e:	e016      	b.n	8002d5e <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002d42:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d46:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002da0 <DS18B20_Read+0x1f4>
 8002d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4e:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d52:	e004      	b.n	8002d5e <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <DS18B20_Read+0x1f8>)
 8002d56:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002d5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d6a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d72:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002d76:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002d7e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002da8 <DS18B20_Read+0x1fc>
 8002d82:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8a:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002d94:	2301      	movs	r3, #1
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	372c      	adds	r7, #44	; 0x2c
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	3d800000 	.word	0x3d800000
 8002da4:	437f0000 	.word	0x437f0000
 8002da8:	00000000 	.word	0x00000000

08002dac <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002dba:	68b8      	ldr	r0, [r7, #8]
 8002dbc:	f000 f87e 	bl	8002ebc <DS18B20_Is>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <DS18B20_SetResolution+0x1e>
		return 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e074      	b.n	8002eb4 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f001 ff9e 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f002 f955 	bl	8005082 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002dd8:	21be      	movs	r1, #190	; 0xbe
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f002 f81c 	bl	8004e18 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f002 f837 	bl	8004e54 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f002 f834 	bl	8004e54 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f002 f831 	bl	8004e54 <OneWire_ReadByte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f002 f82c 	bl	8004e54 <OneWire_ReadByte>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f002 f827 	bl	8004e54 <OneWire_ReadByte>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d108      	bne.n	8002e22 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e16:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	f023 0320 	bic.w	r3, r3, #32
 8002e1e:	75fb      	strb	r3, [r7, #23]
 8002e20:	e022      	b.n	8002e68 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b0a      	cmp	r3, #10
 8002e26:	d108      	bne.n	8002e3a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	75fb      	strb	r3, [r7, #23]
 8002e38:	e016      	b.n	8002e68 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d108      	bne.n	8002e52 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e46:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	f023 0320 	bic.w	r3, r3, #32
 8002e4e:	75fb      	strb	r3, [r7, #23]
 8002e50:	e00a      	b.n	8002e68 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d107      	bne.n	8002e68 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f001 ff4f 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f002 f906 	bl	8005082 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002e76:	214e      	movs	r1, #78	; 0x4e
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f001 ffcd 	bl	8004e18 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002e7e:	7dbb      	ldrb	r3, [r7, #22]
 8002e80:	4619      	mov	r1, r3
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 ffc8 	bl	8004e18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002e88:	7d7b      	ldrb	r3, [r7, #21]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f001 ffc3 	bl	8004e18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	4619      	mov	r1, r3
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f001 ffbe 	bl	8004e18 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f001 ff35 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f002 f8ec 	bl	8005082 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002eaa:	2148      	movs	r1, #72	; 0x48
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f001 ffb3 	bl	8004e18 <OneWire_WriteByte>

	return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b28      	cmp	r3, #40	; 0x28
 8002eca:	d101      	bne.n	8002ed0 <DS18B20_Is+0x14>
		return 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <DS18B20_Is+0x16>

	return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002ee8:	6838      	ldr	r0, [r7, #0]
 8002eea:	f7ff ffe7 	bl	8002ebc <DS18B20_Is>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e049      	b.n	8002f8c <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f001 ff07 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002efe:	6839      	ldr	r1, [r7, #0]
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f002 f8be 	bl	8005082 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002f06:	21be      	movs	r1, #190	; 0xbe
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f001 ff85 	bl	8004e18 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f001 ffa0 	bl	8004e54 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 ff9d 	bl	8004e54 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f001 ff9a 	bl	8004e54 <OneWire_ReadByte>
 8002f20:	4603      	mov	r3, r0
 8002f22:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 ff95 	bl	8004e54 <OneWire_ReadByte>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f001 ff90 	bl	8004e54 <OneWire_ReadByte>
 8002f34:	4603      	mov	r3, r0
 8002f36:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002f38:	237d      	movs	r3, #125	; 0x7d
 8002f3a:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002f3c:	23c9      	movs	r3, #201	; 0xc9
 8002f3e:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 fee3 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f46:	6839      	ldr	r1, [r7, #0]
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f002 f89a 	bl	8005082 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002f4e:	214e      	movs	r1, #78	; 0x4e
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f001 ff61 	bl	8004e18 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f001 ff5c 	bl	8004e18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 ff57 	bl	8004e18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002f6a:	7b7b      	ldrb	r3, [r7, #13]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 ff52 	bl	8004e18 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f001 fec9 	bl	8004d0c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f002 f880 	bl	8005082 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f82:	2148      	movs	r1, #72	; 0x48
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f001 ff47 	bl	8004e18 <OneWire_WriteByte>

	return 1;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f001 ff11 	bl	8004dc4 <OneWire_ReadBit>
 8002fa2:	4603      	mov	r3, r0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d11b      	bne.n	8002ff8 <cliDS18B20+0x4c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4913      	ldr	r1, [pc, #76]	; (8003014 <cliDS18B20+0x68>)
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	4798      	blx	r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <cliDS18B20+0x4c>
  {

	  while(cliKeepLoop())
 8002fd0:	e00b      	b.n	8002fea <cliDS18B20+0x3e>
	  {
		  Ds18b20_ManualConvert();
 8002fd2:	f7ff fd49 	bl	8002a68 <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <cliDS18B20+0x6c>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd facc 	bl	8000578 <__aeabi_f2d>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <cliDS18B20+0x70>)
 8002fe6:	f7ff fa83 	bl	80024f0 <cliPrintf>
	  while(cliKeepLoop())
 8002fea:	f7ff fb7b 	bl	80026e4 <cliKeepLoop>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ee      	bne.n	8002fd2 <cliDS18B20+0x26>
	  }
    ret = true;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	f083 0301 	eor.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <cliDS18B20+0x5e>
  {
    cliPrintf("DS18B20 test\n");
 8003004:	4806      	ldr	r0, [pc, #24]	; (8003020 <cliDS18B20+0x74>)
 8003006:	f7ff fa73 	bl	80024f0 <cliPrintf>
  }
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08017440 	.word	0x08017440
 8003018:	20000724 	.word	0x20000724
 800301c:	08017448 	.word	0x08017448
 8003020:	08017460 	.word	0x08017460

08003024 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
  bool ret = true;
 800302a:	2301      	movs	r3, #1
 800302c:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800302e:	490d      	ldr	r1, [pc, #52]	; (8003064 <fatfsInit+0x40>)
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <fatfsInit+0x44>)
 8003032:	f008 fd57 	bl	800bae4 <FATFS_LinkDriver>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800303c:	2200      	movs	r2, #0
 800303e:	4909      	ldr	r1, [pc, #36]	; (8003064 <fatfsInit+0x40>)
 8003040:	480a      	ldr	r0, [pc, #40]	; (800306c <fatfsInit+0x48>)
 8003042:	f007 f949 	bl	800a2d8 <f_mount>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <fatfsInit+0x2e>
    {
      is_init = true;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <fatfsInit+0x4c>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <fatfsInit+0x50>)
 8003054:	4808      	ldr	r0, [pc, #32]	; (8003078 <fatfsInit+0x54>)
 8003056:	f7ff fb5b 	bl	8002710 <cliAdd>
#endif

  return ret;
 800305a:	79fb      	ldrb	r3, [r7, #7]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	2000098c 	.word	0x2000098c
 8003068:	08017930 	.word	0x08017930
 800306c:	20000758 	.word	0x20000758
 8003070:	20000754 	.word	0x20000754
 8003074:	08003151 	.word	0x08003151
 8003078:	08017470 	.word	0x08017470

0800307c <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b0d6      	sub	sp, #344	; 0x158
 8003080:	af00      	add	r7, sp, #0
 8003082:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003086:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800308a:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 800308c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003090:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003094:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	4610      	mov	r0, r2
 800309c:	f008 f895 	bl	800b1ca <f_opendir>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 80030a6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d144      	bne.n	8003138 <fatfsDir+0xbc>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80030ae:	f107 0208 	add.w	r2, r7, #8
 80030b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f008 f92f 	bl	800b31c <f_readdir>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80030c4:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d130      	bne.n	800312e <fatfsDir+0xb2>
 80030cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80030d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030d4:	7d9b      	ldrb	r3, [r3, #22]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d029      	beq.n	800312e <fatfsDir+0xb2>
      if (fno.fattrib & AM_DIR)
 80030da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80030de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030e2:	7a1b      	ldrb	r3, [r3, #8]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <fatfsDir+0x8a>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	f103 0216 	add.w	r2, r3, #22
 80030f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80030f8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	4812      	ldr	r0, [pc, #72]	; (8003148 <fatfsDir+0xcc>)
 8003100:	f7ff f9f6 	bl	80024f0 <cliPrintf>
 8003104:	e7d3      	b.n	80030ae <fatfsDir+0x32>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8003106:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800310a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	f103 0216 	add.w	r2, r3, #22
 800311a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800311e:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 8003122:	4603      	mov	r3, r0
 8003124:	6809      	ldr	r1, [r1, #0]
 8003126:	4809      	ldr	r0, [pc, #36]	; (800314c <fatfsDir+0xd0>)
 8003128:	f7ff f9e2 	bl	80024f0 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800312c:	e7bf      	b.n	80030ae <fatfsDir+0x32>
      }
    }
    f_closedir(&dir);
 800312e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003132:	4618      	mov	r0, r3
 8003134:	f008 f8cc 	bl	800b2d0 <f_closedir>
  }

  return res;
 8003138:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 800313c:	4618      	mov	r0, r3
 800313e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08017478 	.word	0x08017478
 800314c:	08017484 	.word	0x08017484

08003150 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8003156:	af00      	add	r7, sp, #0
 8003158:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800315c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003160:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8003168:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800316c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d14d      	bne.n	8003214 <cliFatfs+0xc4>
 8003178:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800317c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4990      	ldr	r1, [pc, #576]	; (80033c8 <cliFatfs+0x278>)
 8003186:	2000      	movs	r0, #0
 8003188:	4798      	blx	r3
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d041      	beq.n	8003214 <cliFatfs+0xc4>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8003190:	4b8e      	ldr	r3, [pc, #568]	; (80033cc <cliFatfs+0x27c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	488e      	ldr	r0, [pc, #568]	; (80033d0 <cliFatfs+0x280>)
 8003198:	f7ff f9aa 	bl	80024f0 <cliPrintf>

    if (is_init == true)
 800319c:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <cliFatfs+0x27c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d034      	beq.n	800320e <cliFatfs+0xbe>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 80031a4:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80031a8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80031ac:	4619      	mov	r1, r3
 80031ae:	4889      	ldr	r0, [pc, #548]	; (80033d4 <cliFatfs+0x284>)
 80031b0:	f008 f901 	bl	800b3b6 <f_getfree>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 80031ba:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11f      	bne.n	8003202 <cliFatfs+0xb2>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 80031c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	3b02      	subs	r3, #2
 80031ca:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80031ce:	8952      	ldrh	r2, [r2, #10]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 80031d8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80031dc:	895b      	ldrh	r3, [r3, #10]
 80031de:	461a      	mov	r2, r3
 80031e0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 80031ec:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80031f0:	0859      	lsrs	r1, r3, #1
 80031f2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	461a      	mov	r2, r3
 80031fa:	4877      	ldr	r0, [pc, #476]	; (80033d8 <cliFatfs+0x288>)
 80031fc:	f7ff f978 	bl	80024f0 <cliPrintf>
 8003200:	e005      	b.n	800320e <cliFatfs+0xbe>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8003202:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8003206:	4619      	mov	r1, r3
 8003208:	4874      	ldr	r0, [pc, #464]	; (80033dc <cliFatfs+0x28c>)
 800320a:	f7ff f971 	bl	80024f0 <cliPrintf>
       }
    }

    ret = true;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8003214:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003218:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d11e      	bne.n	8003262 <cliFatfs+0x112>
 8003224:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003228:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	496b      	ldr	r1, [pc, #428]	; (80033e0 <cliFatfs+0x290>)
 8003232:	2000      	movs	r0, #0
 8003234:	4798      	blx	r3
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d012      	beq.n	8003262 <cliFatfs+0x112>
  {
    FRESULT res;

    res = fatfsDir("/");
 800323c:	4869      	ldr	r0, [pc, #420]	; (80033e4 <cliFatfs+0x294>)
 800323e:	f7ff ff1d 	bl	800307c <fatfsDir>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 8003248:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <cliFatfs+0x10c>
    {
      cliPrintf(" err : %d\n", res);
 8003250:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003254:	4619      	mov	r1, r3
 8003256:	4861      	ldr	r0, [pc, #388]	; (80033dc <cliFatfs+0x28c>)
 8003258:	f7ff f94a 	bl	80024f0 <cliPrintf>
    }

    ret = true;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003262:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003266:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 8095 	bne.w	800339e <cliFatfs+0x24e>
 8003274:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003278:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4959      	ldr	r1, [pc, #356]	; (80033e8 <cliFatfs+0x298>)
 8003282:	2000      	movs	r0, #0
 8003284:	4798      	blx	r3
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8088 	beq.w	800339e <cliFatfs+0x24e>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 800328e:	f7fe f82e 	bl	80012ee <millis>
 8003292:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	220b      	movs	r2, #11
 800329c:	4953      	ldr	r1, [pc, #332]	; (80033ec <cliFatfs+0x29c>)
 800329e:	4618      	mov	r0, r3
 80032a0:	f007 f860 	bl	800a364 <f_open>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 80032aa:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d165      	bne.n	800337e <cliFatfs+0x22e>
    {
      f_printf(&log_file, "test1, ");
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	494e      	ldr	r1, [pc, #312]	; (80033f0 <cliFatfs+0x2a0>)
 80032b8:	4618      	mov	r0, r3
 80032ba:	f008 f9a9 	bl	800b610 <f_printf>
      f_printf(&log_file, "test2, ");
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	494c      	ldr	r1, [pc, #304]	; (80033f4 <cliFatfs+0x2a4>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f008 f9a3 	bl	800b610 <f_printf>
      f_printf(&log_file, "test3, ");
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	494a      	ldr	r1, [pc, #296]	; (80033f8 <cliFatfs+0x2a8>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f008 f99d 	bl	800b610 <f_printf>
      f_printf(&log_file, ", ");
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	4948      	ldr	r1, [pc, #288]	; (80033fc <cliFatfs+0x2ac>)
 80032dc:	4618      	mov	r0, r3
 80032de:	f008 f997 	bl	800b610 <f_printf>
      f_printf(&log_file, "\n");
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	4946      	ldr	r1, [pc, #280]	; (8003400 <cliFatfs+0x2b0>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f008 f991 	bl	800b610 <f_printf>

      for (int i=0; i<8; i++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80032f4:	e00c      	b.n	8003310 <cliFatfs+0x1c0>
      {
        f_printf(&log_file, "%d \n", i);
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80032fe:	4941      	ldr	r1, [pc, #260]	; (8003404 <cliFatfs+0x2b4>)
 8003300:	4618      	mov	r0, r3
 8003302:	f008 f985 	bl	800b610 <f_printf>
      for (int i=0; i<8; i++)
 8003306:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800330a:	3301      	adds	r3, #1
 800330c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003310:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003314:	2b07      	cmp	r3, #7
 8003316:	ddee      	ble.n	80032f6 <cliFatfs+0x1a6>
      }

      f_rewind(&log_file);
 8003318:	f107 0308 	add.w	r3, r7, #8
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f007 fd4a 	bl	800adb8 <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8003324:	e01c      	b.n	8003360 <cliFatfs+0x210>
      {
        len = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 800332c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003330:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8003334:	f107 0008 	add.w	r0, r7, #8
 8003338:	2201      	movs	r2, #1
 800333a:	f007 f9e1 	bl	800a700 <f_read>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 8003344:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <cliFatfs+0x21c>
        {
          break;
        }
        if (len == 0)
 800334c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <cliFatfs+0x220>
        {
          break;
        }

        cliPrintf("%c", data);
 8003354:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8003358:	4619      	mov	r1, r3
 800335a:	482b      	ldr	r0, [pc, #172]	; (8003408 <cliFatfs+0x2b8>)
 800335c:	f7ff f8c8 	bl	80024f0 <cliPrintf>
      while(cliKeepLoop())
 8003360:	f7ff f9c0 	bl	80026e4 <cliKeepLoop>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1dd      	bne.n	8003326 <cliFatfs+0x1d6>
 800336a:	e002      	b.n	8003372 <cliFatfs+0x222>
          break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <cliFatfs+0x222>
          break;
 8003370:	bf00      	nop
      }

      f_close(&log_file);
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f007 fcf4 	bl	800ad64 <f_close>
 800337c:	e002      	b.n	8003384 <cliFatfs+0x234>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 800337e:	4823      	ldr	r0, [pc, #140]	; (800340c <cliFatfs+0x2bc>)
 8003380:	f7ff f8b6 	bl	80024f0 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8003384:	f7fd ffb3 	bl	80012ee <millis>
 8003388:	4602      	mov	r2, r0
 800338a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	4619      	mov	r1, r3
 8003392:	481f      	ldr	r0, [pc, #124]	; (8003410 <cliFatfs+0x2c0>)
 8003394:	f7ff f8ac 	bl	80024f0 <cliPrintf>

    ret = true;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 800339e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80033a2:	f083 0301 	eor.w	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <cliFatfs+0x26e>
  {
    cliPrintf("fatfs info\n");
 80033ac:	4819      	ldr	r0, [pc, #100]	; (8003414 <cliFatfs+0x2c4>)
 80033ae:	f7ff f89f 	bl	80024f0 <cliPrintf>
    cliPrintf("fatfs dir\n");
 80033b2:	4819      	ldr	r0, [pc, #100]	; (8003418 <cliFatfs+0x2c8>)
 80033b4:	f7ff f89c 	bl	80024f0 <cliPrintf>
    cliPrintf("fatfs test\n");
 80033b8:	4818      	ldr	r0, [pc, #96]	; (800341c <cliFatfs+0x2cc>)
 80033ba:	f7ff f899 	bl	80024f0 <cliPrintf>
  }
}
 80033be:	bf00      	nop
 80033c0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	08017498 	.word	0x08017498
 80033cc:	20000754 	.word	0x20000754
 80033d0:	080174a0 	.word	0x080174a0
 80033d4:	080174b4 	.word	0x080174b4
 80033d8:	080174b8 	.word	0x080174b8
 80033dc:	080174ec 	.word	0x080174ec
 80033e0:	080174f8 	.word	0x080174f8
 80033e4:	080174fc 	.word	0x080174fc
 80033e8:	08017500 	.word	0x08017500
 80033ec:	08017508 	.word	0x08017508
 80033f0:	08017510 	.word	0x08017510
 80033f4:	08017518 	.word	0x08017518
 80033f8:	08017520 	.word	0x08017520
 80033fc:	08017528 	.word	0x08017528
 8003400:	0801752c 	.word	0x0801752c
 8003404:	08017530 	.word	0x08017530
 8003408:	08017538 	.word	0x08017538
 800340c:	0801753c 	.word	0x0801753c
 8003410:	0801754c 	.word	0x0801754c
 8003414:	08017554 	.word	0x08017554
 8003418:	08017560 	.word	0x08017560
 800341c:	0801756c 	.word	0x0801756c

08003420 <gpioInit>:
#endif



bool gpioInit(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
  bool ret = true;
 8003426:	2301      	movs	r3, #1
 8003428:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <gpioInit+0xa0>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <gpioInit+0xa0>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <gpioInit+0xa0>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <gpioInit+0xa0>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <gpioInit+0xa0>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <gpioInit+0xa0>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	e01e      	b.n	80034a6 <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	b2d8      	uxtb	r0, r3
 800346c:	4915      	ldr	r1, [pc, #84]	; (80034c4 <gpioInit+0xa4>)
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3308      	adds	r3, #8
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	f000 f826 	bl	80034d0 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	b2d8      	uxtb	r0, r3
 8003488:	490e      	ldr	r1, [pc, #56]	; (80034c4 <gpioInit+0xa4>)
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	330b      	adds	r3, #11
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	f000 f88a 	bl	80035b4 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	dddd      	ble.n	8003468 <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 80034ac:	4906      	ldr	r1, [pc, #24]	; (80034c8 <gpioInit+0xa8>)
 80034ae:	4807      	ldr	r0, [pc, #28]	; (80034cc <gpioInit+0xac>)
 80034b0:	f7ff f92e 	bl	8002710 <cliAdd>
#endif

  return ret;
 80034b4:	7afb      	ldrb	r3, [r7, #11]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08017848 	.word	0x08017848
 80034c8:	080036c9 	.word	0x080036c9
 80034cc:	08017578 	.word	0x08017578

080034d0 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	460a      	mov	r2, r1
 80034da:	71fb      	strb	r3, [r7, #7]
 80034dc:	4613      	mov	r3, r2
 80034de:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d901      	bls.n	80034fe <gpioPinMode+0x2e>
  {
    return false;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e054      	b.n	80035a8 <gpioPinMode+0xd8>
  }

  switch(mode)
 80034fe:	79bb      	ldrb	r3, [r7, #6]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d838      	bhi.n	8003576 <gpioPinMode+0xa6>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <gpioPinMode+0x3c>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003529 	.word	0x08003529
 8003510:	08003533 	.word	0x08003533
 8003514:	0800353d 	.word	0x0800353d
 8003518:	08003547 	.word	0x08003547
 800351c:	08003551 	.word	0x08003551
 8003520:	0800355b 	.word	0x0800355b
 8003524:	08003565 	.word	0x08003565
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
      break;
 8003530:	e021      	b.n	8003576 <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003536:	2301      	movs	r3, #1
 8003538:	613b      	str	r3, [r7, #16]
      break;
 800353a:	e01c      	b.n	8003576 <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003540:	2302      	movs	r3, #2
 8003542:	613b      	str	r3, [r7, #16]
      break;
 8003544:	e017      	b.n	8003576 <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003546:	2301      	movs	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	e012      	b.n	8003576 <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003550:	2301      	movs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003554:	2301      	movs	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
      break;
 8003558:	e00d      	b.n	8003576 <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355a:	2301      	movs	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800355e:	2302      	movs	r3, #2
 8003560:	613b      	str	r3, [r7, #16]
      break;
 8003562:	e008      	b.n	8003576 <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003570:	2302      	movs	r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
      break;
 8003574:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8003576:	79fa      	ldrb	r2, [r7, #7]
 8003578:	490d      	ldr	r1, [pc, #52]	; (80035b0 <gpioPinMode+0xe0>)
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3304      	adds	r3, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800358a:	79fa      	ldrb	r2, [r7, #7]
 800358c:	4908      	ldr	r1, [pc, #32]	; (80035b0 <gpioPinMode+0xe0>)
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f107 0208 	add.w	r2, r7, #8
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f009 fe9b 	bl	800d2dc <HAL_GPIO_Init>

  return ret;
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08017848 	.word	0x08017848

080035b4 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	460a      	mov	r2, r1
 80035be:	71fb      	strb	r3, [r7, #7]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d840      	bhi.n	800364c <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 80035ca:	79bb      	ldrb	r3, [r7, #6]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01e      	beq.n	800360e <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80035d0:	79fa      	ldrb	r2, [r7, #7]
 80035d2:	4920      	ldr	r1, [pc, #128]	; (8003654 <gpioPinWrite+0xa0>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	79fa      	ldrb	r2, [r7, #7]
 80035e2:	491c      	ldr	r1, [pc, #112]	; (8003654 <gpioPinWrite+0xa0>)
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3304      	adds	r3, #4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	b299      	uxth	r1, r3
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	4c17      	ldr	r4, [pc, #92]	; (8003654 <gpioPinWrite+0xa0>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4423      	add	r3, r4
 8003602:	3309      	adds	r3, #9
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	f00a f8e8 	bl	800d7dc <HAL_GPIO_WritePin>
 800360c:	e01f      	b.n	800364e <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800360e:	79fa      	ldrb	r2, [r7, #7]
 8003610:	4910      	ldr	r1, [pc, #64]	; (8003654 <gpioPinWrite+0xa0>)
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	79fa      	ldrb	r2, [r7, #7]
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <gpioPinWrite+0xa0>)
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3304      	adds	r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	b299      	uxth	r1, r3
 8003632:	79fa      	ldrb	r2, [r7, #7]
 8003634:	4c07      	ldr	r4, [pc, #28]	; (8003654 <gpioPinWrite+0xa0>)
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4423      	add	r3, r4
 8003640:	330a      	adds	r3, #10
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	f00a f8c9 	bl	800d7dc <HAL_GPIO_WritePin>
 800364a:	e000      	b.n	800364e <gpioPinWrite+0x9a>
    return;
 800364c:	bf00      	nop
  }
}
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}
 8003654:	08017848 	.word	0x08017848

08003658 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d901      	bls.n	8003670 <gpioPinRead+0x18>
  {
    return false;
 800366c:	2300      	movs	r3, #0
 800366e:	e024      	b.n	80036ba <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003670:	79fa      	ldrb	r2, [r7, #7]
 8003672:	4914      	ldr	r1, [pc, #80]	; (80036c4 <gpioPinRead+0x6c>)
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	79fa      	ldrb	r2, [r7, #7]
 8003682:	4910      	ldr	r1, [pc, #64]	; (80036c4 <gpioPinRead+0x6c>)
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3304      	adds	r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	4619      	mov	r1, r3
 8003696:	f00a f889 	bl	800d7ac <HAL_GPIO_ReadPin>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	79fa      	ldrb	r2, [r7, #7]
 80036a0:	4908      	ldr	r1, [pc, #32]	; (80036c4 <gpioPinRead+0x6c>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3309      	adds	r3, #9
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	4298      	cmp	r0, r3
 80036b2:	d101      	bne.n	80036b8 <gpioPinRead+0x60>
  {
    ret = true;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	08017848 	.word	0x08017848

080036c8 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d128      	bne.n	800372e <cliGpio+0x66>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4947      	ldr	r1, [pc, #284]	; (8003800 <cliGpio+0x138>)
 80036e2:	2000      	movs	r0, #0
 80036e4:	4798      	blx	r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <cliGpio+0x66>
  {
    while(cliKeepLoop())
 80036ec:	e018      	b.n	8003720 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	e00c      	b.n	800370e <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ffad 	bl	8003658 <gpioPinRead>
 80036fe:	4603      	mov	r3, r0
 8003700:	4619      	mov	r1, r3
 8003702:	4840      	ldr	r0, [pc, #256]	; (8003804 <cliGpio+0x13c>)
 8003704:	f7fe fef4 	bl	80024f0 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3301      	adds	r3, #1
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	ddef      	ble.n	80036f4 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8003714:	483c      	ldr	r0, [pc, #240]	; (8003808 <cliGpio+0x140>)
 8003716:	f7fe feeb 	bl	80024f0 <cliPrintf>
      delay(100);
 800371a:	2064      	movs	r0, #100	; 0x64
 800371c:	f7fd fddc 	bl	80012d8 <delay>
    while(cliKeepLoop())
 8003720:	f7fe ffe0 	bl	80026e4 <cliKeepLoop>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e1      	bne.n	80036ee <cliGpio+0x26>
    }
    ret = true;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d123      	bne.n	800377e <cliGpio+0xb6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4934      	ldr	r1, [pc, #208]	; (800380c <cliGpio+0x144>)
 800373c:	2000      	movs	r0, #0
 800373e:	4798      	blx	r3
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01b      	beq.n	800377e <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2001      	movs	r0, #1
 800374c:	4798      	blx	r3
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8003752:	e00d      	b.n	8003770 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003754:	7bfc      	ldrb	r4, [r7, #15]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff7d 	bl	8003658 <gpioPinRead>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	4621      	mov	r1, r4
 8003764:	482a      	ldr	r0, [pc, #168]	; (8003810 <cliGpio+0x148>)
 8003766:	f7fe fec3 	bl	80024f0 <cliPrintf>
      delay(100);
 800376a:	2064      	movs	r0, #100	; 0x64
 800376c:	f7fd fdb4 	bl	80012d8 <delay>
    while(cliKeepLoop())
 8003770:	f7fe ffb8 	bl	80026e4 <cliKeepLoop>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ec      	bne.n	8003754 <cliGpio+0x8c>
    }

    ret = true;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d126      	bne.n	80037d4 <cliGpio+0x10c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4922      	ldr	r1, [pc, #136]	; (8003814 <cliGpio+0x14c>)
 800378c:	2000      	movs	r0, #0
 800378e:	4798      	blx	r3
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2001      	movs	r0, #1
 800379c:	4798      	blx	r3
 800379e:	4603      	mov	r3, r0
 80037a0:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2002      	movs	r0, #2
 80037a8:	4798      	blx	r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 80037ae:	7b7b      	ldrb	r3, [r7, #13]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fef8 	bl	80035b4 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	7b7a      	ldrb	r2, [r7, #13]
 80037c8:	4619      	mov	r1, r3
 80037ca:	4813      	ldr	r0, [pc, #76]	; (8003818 <cliGpio+0x150>)
 80037cc:	f7fe fe90 	bl	80024f0 <cliPrintf>
    ret = true;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	f083 0301 	eor.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 80037e0:	480e      	ldr	r0, [pc, #56]	; (800381c <cliGpio+0x154>)
 80037e2:	f7fe fe85 	bl	80024f0 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 80037e6:	210c      	movs	r1, #12
 80037e8:	480d      	ldr	r0, [pc, #52]	; (8003820 <cliGpio+0x158>)
 80037ea:	f7fe fe81 	bl	80024f0 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 80037ee:	210c      	movs	r1, #12
 80037f0:	480c      	ldr	r0, [pc, #48]	; (8003824 <cliGpio+0x15c>)
 80037f2:	f7fe fe7d 	bl	80024f0 <cliPrintf>
  }
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	08017580 	.word	0x08017580
 8003804:	08017588 	.word	0x08017588
 8003808:	0801758c 	.word	0x0801758c
 800380c:	08017590 	.word	0x08017590
 8003810:	08017598 	.word	0x08017598
 8003814:	080175ac 	.word	0x080175ac
 8003818:	080175b4 	.word	0x080175b4
 800381c:	080175c8 	.word	0x080175c8
 8003820:	080175d4 	.word	0x080175d4
 8003824:	080175e8 	.word	0x080175e8

08003828 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 800382c:	f7fd fd5f 	bl	80012ee <millis>
 8003830:	4602      	mov	r2, r0
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <TransferDoneISR+0x40>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	4a0c      	ldr	r2, [pc, #48]	; (800386c <TransferDoneISR+0x44>)
 800383a:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 800383c:	f7fd fd57 	bl	80012ee <millis>
 8003840:	4603      	mov	r3, r0
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <TransferDoneISR+0x40>)
 8003844:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <TransferDoneISR+0x44>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <TransferDoneISR+0x44>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <TransferDoneISR+0x48>)
 800385c:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <TransferDoneISR+0x4c>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200009b0 	.word	0x200009b0
 800386c:	200009b4 	.word	0x200009b4
 8003870:	200009b8 	.word	0x200009b8
 8003874:	200009ae 	.word	0x200009ae

08003878 <lcdInit>:


bool lcdInit(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af02      	add	r7, sp, #8
  backlight_value = 100;
 800387e:	4b27      	ldr	r3, [pc, #156]	; (800391c <lcdInit+0xa4>)
 8003880:	2264      	movs	r2, #100	; 0x64
 8003882:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8003884:	f003 ff20 	bl	80076c8 <st7735Init>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <lcdInit+0xa8>)
 800388e:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8003890:	4824      	ldr	r0, [pc, #144]	; (8003924 <lcdInit+0xac>)
 8003892:	f003 ff25 	bl	80076e0 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <lcdInit+0xac>)
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4823      	ldr	r0, [pc, #140]	; (8003928 <lcdInit+0xb0>)
 800389c:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	e007      	b.n	80038b4 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 80038a4:	4a21      	ldr	r2, [pc, #132]	; (800392c <lcdInit+0xb4>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2100      	movs	r1, #0
 80038aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3301      	adds	r3, #1
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80038ba:	dbf3      	blt.n	80038a4 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 80038bc:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80038c0:	2100      	movs	r1, #0
 80038c2:	481a      	ldr	r0, [pc, #104]	; (800392c <lcdInit+0xb4>)
 80038c4:	f00f f9ae 	bl	8012c24 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <lcdInit+0xb8>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	035b      	lsls	r3, r3, #13
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <lcdInit+0xb4>)
 80038d8:	4413      	add	r3, r2
 80038da:	4a16      	ldr	r2, [pc, #88]	; (8003934 <lcdInit+0xbc>)
 80038dc:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	22a0      	movs	r2, #160	; 0xa0
 80038e6:	2100      	movs	r1, #0
 80038e8:	2000      	movs	r0, #0
 80038ea:	f000 fbdb 	bl	80040a4 <lcdDrawFillRect>
  lcdUpdateDraw();
 80038ee:	f000 fa9f 	bl	8003e30 <lcdUpdateDraw>

  lcdSetBackLight(100);
 80038f2:	2064      	movs	r0, #100	; 0x64
 80038f4:	f000 f830 	bl	8003958 <lcdSetBackLight>


  if (is_init != true)
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <lcdInit+0xa8>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	f083 0301 	eor.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <lcdInit+0x92>
  {
    return false;
 8003906:	2300      	movs	r3, #0
 8003908:	e004      	b.n	8003914 <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 800390a:	490b      	ldr	r1, [pc, #44]	; (8003938 <lcdInit+0xc0>)
 800390c:	480b      	ldr	r0, [pc, #44]	; (800393c <lcdInit+0xc4>)
 800390e:	f7fe feff 	bl	8002710 <cliAdd>
#endif

  return true;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000080 	.word	0x20000080
 8003920:	200009ac 	.word	0x200009ac
 8003924:	20000990 	.word	0x20000990
 8003928:	08003829 	.word	0x08003829
 800392c:	200009c0 	.word	0x200009c0
 8003930:	200009ad 	.word	0x200009ad
 8003934:	200009bc 	.word	0x200009bc
 8003938:	08004571 	.word	0x08004571
 800393c:	080178e4 	.word	0x080178e4

08003940 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return is_init;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <lcdIsInit+0x14>)
 8003946:	781b      	ldrb	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200009ac 	.word	0x200009ac

08003958 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b64      	cmp	r3, #100	; 0x64
 8003966:	bf28      	it	cs
 8003968:	2364      	movcs	r3, #100	; 0x64
 800396a:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <lcdSetBackLight+0x48>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	79fa      	ldrb	r2, [r7, #7]
 8003972:	429a      	cmp	r2, r3
 8003974:	d002      	beq.n	800397c <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <lcdSetBackLight+0x48>)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <lcdSetBackLight+0x48>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8003984:	2101      	movs	r1, #1
 8003986:	2001      	movs	r0, #1
 8003988:	f7ff fe14 	bl	80035b4 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 800398c:	e003      	b.n	8003996 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 800398e:	2100      	movs	r1, #0
 8003990:	2001      	movs	r0, #1
 8003992:	f7ff fe0f 	bl	80035b4 <gpioPinWrite>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000080 	.word	0x20000080

080039a4 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <lcdDrawPixel+0x14>)
 80039a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80039b0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	200009bc 	.word	0x200009bc

080039bc <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 80039bc:	b510      	push	{r4, lr}
 80039be:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 80039c0:	f000 fa62 	bl	8003e88 <lcdGetFrameBuffer>
 80039c4:	f500 411f 	add.w	r1, r0, #40704	; 0x9f00

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 80039c8:	b2a2      	uxth	r2, r4
 80039ca:	1e83      	subs	r3, r0, #2
 80039cc:	31fe      	adds	r1, #254	; 0xfe
 80039ce:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 80039d2:	428b      	cmp	r3, r1
 80039d4:	d1fb      	bne.n	80039ce <lcdClearBuffer+0x12>
  }
}
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 80039d8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80039dc:	4616      	mov	r6, r2
 80039de:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
  int32_t x     = 0;

  while (x < r)
 80039e0:	2e00      	cmp	r6, #0
{
 80039e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -2 * r;
 80039e4:	ebc6 7bc6 	rsb	fp, r6, r6, lsl #31
  while (x < r)
 80039e8:	f340 808d 	ble.w	8003b06 <lcdDrawCircleHelper+0x12e>
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 80039ec:	fa1f f981 	uxth.w	r9, r1
 80039f0:	f003 0104 	and.w	r1, r3, #4
 80039f4:	9103      	str	r1, [sp, #12]
 80039f6:	f003 0102 	and.w	r1, r3, #2
 80039fa:	9101      	str	r1, [sp, #4]
 80039fc:	f003 0108 	and.w	r1, r3, #8
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	f1c6 0401 	rsb	r4, r6, #1
 8003a08:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8003a0c:	fa1f f880 	uxth.w	r8, r0
 8003a10:	9102      	str	r1, [sp, #8]
 8003a12:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8003a14:	2500      	movs	r5, #0
 8003a16:	e00a      	b.n	8003a2e <lcdDrawCircleHelper+0x56>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8003a18:	9b01      	ldr	r3, [sp, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d12c      	bne.n	8003a78 <lcdDrawCircleHelper+0xa0>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8003a1e:	9b02      	ldr	r3, [sp, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d141      	bne.n	8003aa8 <lcdDrawCircleHelper+0xd0>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8003a24:	9b04      	ldr	r3, [sp, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d156      	bne.n	8003ad8 <lcdDrawCircleHelper+0x100>
  while (x < r)
 8003a2a:	42ae      	cmp	r6, r5
 8003a2c:	dd6b      	ble.n	8003b06 <lcdDrawCircleHelper+0x12e>
    if (f >= 0)
 8003a2e:	2c00      	cmp	r4, #0
 8003a30:	db03      	blt.n	8003a3a <lcdDrawCircleHelper+0x62>
      ddF_y += 2;
 8003a32:	f10b 0b02 	add.w	fp, fp, #2
      r--;
 8003a36:	3e01      	subs	r6, #1
      f     += ddF_y;
 8003a38:	445c      	add	r4, fp
    x++;
 8003a3a:	3501      	adds	r5, #1
    if (cornername & 0x4)
 8003a3c:	9b03      	ldr	r3, [sp, #12]
    f     += ddF_x;
 8003a3e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003a42:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0e7      	beq.n	8003a18 <lcdDrawCircleHelper+0x40>
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003a48:	b2b3      	uxth	r3, r6
 8003a4a:	fa1f fa85 	uxth.w	sl, r5
 8003a4e:	eb09 0103 	add.w	r1, r9, r3
 8003a52:	eb08 000a 	add.w	r0, r8, sl
 8003a56:	b289      	uxth	r1, r1
 8003a58:	b280      	uxth	r0, r0
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	f7ff ffa2 	bl	80039a4 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 8003a60:	9b05      	ldr	r3, [sp, #20]
 8003a62:	eb09 010a 	add.w	r1, r9, sl
 8003a66:	eb08 0003 	add.w	r0, r8, r3
 8003a6a:	b289      	uxth	r1, r1
 8003a6c:	b280      	uxth	r0, r0
 8003a6e:	f7ff ff99 	bl	80039a4 <lcdDrawPixel>
    if (cornername & 0x2)
 8003a72:	9b01      	ldr	r3, [sp, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0d2      	beq.n	8003a1e <lcdDrawCircleHelper+0x46>
      lcdDrawPixel(x0 + x, y0 - r, color);
 8003a78:	b2b3      	uxth	r3, r6
 8003a7a:	fa1f fa85 	uxth.w	sl, r5
 8003a7e:	eba9 0103 	sub.w	r1, r9, r3
 8003a82:	eb08 000a 	add.w	r0, r8, sl
 8003a86:	b289      	uxth	r1, r1
 8003a88:	b280      	uxth	r0, r0
 8003a8a:	9305      	str	r3, [sp, #20]
 8003a8c:	f7ff ff8a 	bl	80039a4 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003a90:	9b05      	ldr	r3, [sp, #20]
 8003a92:	eba9 010a 	sub.w	r1, r9, sl
 8003a96:	eb08 0003 	add.w	r0, r8, r3
 8003a9a:	b289      	uxth	r1, r1
 8003a9c:	b280      	uxth	r0, r0
 8003a9e:	f7ff ff81 	bl	80039a4 <lcdDrawPixel>
    if (cornername & 0x8)
 8003aa2:	9b02      	ldr	r3, [sp, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0bd      	beq.n	8003a24 <lcdDrawCircleHelper+0x4c>
 8003aa8:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 - r, y0 + x, color);
 8003aaa:	fa1f fa86 	uxth.w	sl, r6
 8003aae:	eb09 0103 	add.w	r1, r9, r3
 8003ab2:	eba8 000a 	sub.w	r0, r8, sl
 8003ab6:	b289      	uxth	r1, r1
 8003ab8:	b280      	uxth	r0, r0
 8003aba:	9305      	str	r3, [sp, #20]
 8003abc:	f7ff ff72 	bl	80039a4 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003ac0:	9b05      	ldr	r3, [sp, #20]
 8003ac2:	eb0a 0109 	add.w	r1, sl, r9
 8003ac6:	eba8 0003 	sub.w	r0, r8, r3
 8003aca:	b289      	uxth	r1, r1
 8003acc:	b280      	uxth	r0, r0
 8003ace:	f7ff ff69 	bl	80039a4 <lcdDrawPixel>
    if (cornername & 0x1)
 8003ad2:	9b04      	ldr	r3, [sp, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0a8      	beq.n	8003a2a <lcdDrawCircleHelper+0x52>
 8003ad8:	b2ab      	uxth	r3, r5
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 8003ada:	fa1f fa86 	uxth.w	sl, r6
 8003ade:	eba9 0103 	sub.w	r1, r9, r3
 8003ae2:	eba8 000a 	sub.w	r0, r8, sl
 8003ae6:	b289      	uxth	r1, r1
 8003ae8:	b280      	uxth	r0, r0
 8003aea:	9305      	str	r3, [sp, #20]
 8003aec:	f7ff ff5a 	bl	80039a4 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 8003af0:	9b05      	ldr	r3, [sp, #20]
 8003af2:	eba9 010a 	sub.w	r1, r9, sl
 8003af6:	eba8 0003 	sub.w	r0, r8, r3
 8003afa:	b289      	uxth	r1, r1
 8003afc:	b280      	uxth	r0, r0
 8003afe:	f7ff ff51 	bl	80039a4 <lcdDrawPixel>
  while (x < r)
 8003b02:	42ae      	cmp	r6, r5
 8003b04:	dc93      	bgt.n	8003a2e <lcdDrawCircleHelper+0x56>
    }
  }
}
 8003b06:	b006      	add	sp, #24
 8003b08:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003b0c <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003b0c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003b10:	b08a      	sub	sp, #40	; 0x28
 8003b12:	4694      	mov	ip, r2
 8003b14:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b16:	f8cd c00c 	str.w	ip, [sp, #12]
 8003b1a:	fa1f f886 	uxth.w	r8, r6
 8003b1e:	ea4f 0248 	mov.w	r2, r8, lsl #1
{
 8003b22:	460c      	mov	r4, r1
 8003b24:	b291      	uxth	r1, r2
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b26:	f8bd 200c 	ldrh.w	r2, [sp, #12]
{
 8003b2a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003b2e:	4605      	mov	r5, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b30:	b280      	uxth	r0, r0
 8003b32:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8003b36:	9005      	str	r0, [sp, #20]
 8003b38:	1a52      	subs	r2, r2, r1
 8003b3a:	4440      	add	r0, r8
{
 8003b3c:	4699      	mov	r9, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003b3e:	b200      	sxth	r0, r0
 8003b40:	fa1f f38a 	uxth.w	r3, sl
 8003b44:	b212      	sxth	r2, r2
 8003b46:	b221      	sxth	r1, r4
 8003b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b4c:	9004      	str	r0, [sp, #16]
 8003b4e:	f000 fa83 	bl	8004058 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003b52:	9804      	ldr	r0, [sp, #16]
 8003b54:	f8cd 9010 	str.w	r9, [sp, #16]
 8003b58:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 8003b5c:	9a08      	ldr	r2, [sp, #32]
 8003b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b60:	9308      	str	r3, [sp, #32]
 8003b62:	fa1f fb84 	uxth.w	fp, r4
 8003b66:	f109 31ff 	add.w	r1, r9, #4294967295
 8003b6a:	4459      	add	r1, fp
 8003b6c:	b209      	sxth	r1, r1
 8003b6e:	f000 fa73 	bl	8004058 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8003b72:	9b07      	ldr	r3, [sp, #28]
 8003b74:	eb08 010b 	add.w	r1, r8, fp
 8003b78:	eba9 0203 	sub.w	r2, r9, r3
 8003b7c:	9b08      	ldr	r3, [sp, #32]
 8003b7e:	b209      	sxth	r1, r1
 8003b80:	b212      	sxth	r2, r2
 8003b82:	b228      	sxth	r0, r5
 8003b84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b88:	9107      	str	r1, [sp, #28]
 8003b8a:	f000 fa3f 	bl	800400c <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003b8e:	9a06      	ldr	r2, [sp, #24]
 8003b90:	9b05      	ldr	r3, [sp, #20]
 8003b92:	9907      	ldr	r1, [sp, #28]
 8003b94:	1e50      	subs	r0, r2, #1
 8003b96:	4418      	add	r0, r3

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003b98:	eb05 0806 	add.w	r8, r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003b9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ba0:	b200      	sxth	r0, r0
 8003ba2:	f000 fa33 	bl	800400c <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003ba6:	1931      	adds	r1, r6, r4
 8003ba8:	4632      	mov	r2, r6
 8003baa:	4640      	mov	r0, r8
 8003bac:	f8cd a000 	str.w	sl, [sp]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	9105      	str	r1, [sp, #20]
 8003bb4:	f7ff ff10 	bl	80039d8 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003bb8:	9803      	ldr	r0, [sp, #12]
 8003bba:	9905      	ldr	r1, [sp, #20]
 8003bbc:	f8cd a000 	str.w	sl, [sp]
 8003bc0:	4428      	add	r0, r5
 8003bc2:	1b80      	subs	r0, r0, r6
 8003bc4:	3801      	subs	r0, #1
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	2302      	movs	r3, #2
 8003bca:	9003      	str	r0, [sp, #12]
 8003bcc:	f7ff ff04 	bl	80039d8 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8003bd0:	9904      	ldr	r1, [sp, #16]
 8003bd2:	9803      	ldr	r0, [sp, #12]
 8003bd4:	f8cd a000 	str.w	sl, [sp]
 8003bd8:	4421      	add	r1, r4
 8003bda:	1b89      	subs	r1, r1, r6
 8003bdc:	3901      	subs	r1, #1
 8003bde:	4632      	mov	r2, r6
 8003be0:	2304      	movs	r3, #4
 8003be2:	9103      	str	r1, [sp, #12]
 8003be4:	f7ff fef8 	bl	80039d8 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8003bee:	2308      	movs	r3, #8
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	4640      	mov	r0, r8
}
 8003bf4:	b00a      	add	sp, #40	; 0x28
 8003bf6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8003bfa:	f7ff beed 	b.w	80039d8 <lcdDrawCircleHelper>
 8003bfe:	bf00      	nop

08003c00 <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 8003c00:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003c04:	4690      	mov	r8, r2
 8003c06:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8003c08:	f1c8 0a00 	rsb	sl, r8, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 8003c0c:	f1b8 0f00 	cmp.w	r8, #0
{
 8003c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 8003c12:	ebaa 0a08 	sub.w	sl, sl, r8
  while (y < r)
 8003c16:	dd6f      	ble.n	8003cf8 <lcdDrawFillCircleHelper+0xf8>
 8003c18:	3201      	adds	r2, #1
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	1c95      	adds	r5, r2, #2
 8003c1e:	9204      	str	r2, [sp, #16]
 8003c20:	f003 0201 	and.w	r2, r3, #1
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	9302      	str	r3, [sp, #8]
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c2c:	9203      	str	r2, [sp, #12]
 8003c2e:	b280      	uxth	r0, r0
 8003c30:	b289      	uxth	r1, r1
 8003c32:	f1c8 0401 	rsb	r4, r8, #1
 8003c36:	9000      	str	r0, [sp, #0]
 8003c38:	9101      	str	r1, [sp, #4]
 8003c3a:	b2ad      	uxth	r5, r5
  int32_t y     = 0;
 8003c3c:	2600      	movs	r6, #0
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	e006      	b.n	8003c50 <lcdDrawFillCircleHelper+0x50>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8003c42:	9a02      	ldr	r2, [sp, #8]
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d133      	bne.n	8003cb0 <lcdDrawFillCircleHelper+0xb0>
  while (y < r)
 8003c48:	3502      	adds	r5, #2
 8003c4a:	45b0      	cmp	r8, r6
 8003c4c:	b2ad      	uxth	r5, r5
 8003c4e:	dd53      	ble.n	8003cf8 <lcdDrawFillCircleHelper+0xf8>
    if (f >= 0)
 8003c50:	2c00      	cmp	r4, #0
    y++;
 8003c52:	f106 0601 	add.w	r6, r6, #1
    if (f >= 0)
 8003c56:	db04      	blt.n	8003c62 <lcdDrawFillCircleHelper+0x62>
      ddF_y += 2;
 8003c58:	f10a 0a02 	add.w	sl, sl, #2
      r--;
 8003c5c:	f108 38ff 	add.w	r8, r8, #4294967295
      f     += ddF_y;
 8003c60:	4454      	add	r4, sl
    if (cornername & 0x1)
 8003c62:	9a03      	ldr	r2, [sp, #12]
    f     += ddF_x;
 8003c64:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8003c68:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	d0e9      	beq.n	8003c42 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003c6e:	9a04      	ldr	r2, [sp, #16]
 8003c70:	9901      	ldr	r1, [sp, #4]
 8003c72:	9800      	ldr	r0, [sp, #0]
 8003c74:	9305      	str	r3, [sp, #20]
 8003c76:	fa1f f988 	uxth.w	r9, r8
 8003c7a:	fa1f fb86 	uxth.w	fp, r6
 8003c7e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8003c82:	4459      	add	r1, fp
 8003c84:	eba0 0009 	sub.w	r0, r0, r9
 8003c88:	b212      	sxth	r2, r2
 8003c8a:	b209      	sxth	r1, r1
 8003c8c:	b200      	sxth	r0, r0
 8003c8e:	f000 f9e3 	bl	8004058 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003c92:	9901      	ldr	r1, [sp, #4]
 8003c94:	9800      	ldr	r0, [sp, #0]
 8003c96:	9b05      	ldr	r3, [sp, #20]
 8003c98:	4449      	add	r1, r9
 8003c9a:	eba0 000b 	sub.w	r0, r0, fp
 8003c9e:	b22a      	sxth	r2, r5
 8003ca0:	b209      	sxth	r1, r1
 8003ca2:	b200      	sxth	r0, r0
 8003ca4:	f000 f9d8 	bl	8004058 <lcdDrawHLine>
    if (cornername & 0x2)
 8003ca8:	9a02      	ldr	r2, [sp, #8]
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003caa:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2)
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d0cb      	beq.n	8003c48 <lcdDrawFillCircleHelper+0x48>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8003cb0:	9a04      	ldr	r2, [sp, #16]
 8003cb2:	9901      	ldr	r1, [sp, #4]
 8003cb4:	9800      	ldr	r0, [sp, #0]
 8003cb6:	9305      	str	r3, [sp, #20]
 8003cb8:	fa1f f988 	uxth.w	r9, r8
 8003cbc:	fa1f fb86 	uxth.w	fp, r6
 8003cc0:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8003cc4:	eba1 010b 	sub.w	r1, r1, fp
 8003cc8:	eba0 0009 	sub.w	r0, r0, r9
 8003ccc:	b212      	sxth	r2, r2
 8003cce:	b209      	sxth	r1, r1
 8003cd0:	b200      	sxth	r0, r0
 8003cd2:	f000 f9c1 	bl	8004058 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003cd6:	9901      	ldr	r1, [sp, #4]
 8003cd8:	9800      	ldr	r0, [sp, #0]
 8003cda:	9b05      	ldr	r3, [sp, #20]
 8003cdc:	eba1 0109 	sub.w	r1, r1, r9
 8003ce0:	eba0 000b 	sub.w	r0, r0, fp
 8003ce4:	b22a      	sxth	r2, r5
 8003ce6:	b209      	sxth	r1, r1
 8003ce8:	b200      	sxth	r0, r0
 8003cea:	f000 f9b5 	bl	8004058 <lcdDrawHLine>
  while (y < r)
 8003cee:	3502      	adds	r5, #2
 8003cf0:	45b0      	cmp	r8, r6
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003cf2:	9b05      	ldr	r3, [sp, #20]
  while (y < r)
 8003cf4:	b2ad      	uxth	r5, r5
 8003cf6:	dcab      	bgt.n	8003c50 <lcdDrawFillCircleHelper+0x50>
    }
  }
}
 8003cf8:	b006      	add	sp, #24
 8003cfa:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop

08003d00 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003d00:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003d04:	b085      	sub	sp, #20
 8003d06:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8003d0a:	4688      	mov	r8, r1
 8003d0c:	4614      	mov	r4, r2
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d0e:	b2b1      	uxth	r1, r6
 8003d10:	fa1f f289 	uxth.w	r2, r9
{
 8003d14:	461d      	mov	r5, r3
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d16:	9200      	str	r2, [sp, #0]
 8003d18:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003d1c:	b222      	sxth	r2, r4
 8003d1e:	4441      	add	r1, r8

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d20:	eba4 0446 	sub.w	r4, r4, r6, lsl #1
 8003d24:	4445      	add	r5, r8
{
 8003d26:	4682      	mov	sl, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d28:	3c01      	subs	r4, #1
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	b209      	sxth	r1, r1
 8003d2e:	b200      	sxth	r0, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d30:	1bad      	subs	r5, r5, r6
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003d32:	f000 f9b7 	bl	80040a4 <lcdDrawFillRect>
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003d36:	eb0a 0006 	add.w	r0, sl, r6
 8003d3a:	1e69      	subs	r1, r5, #1
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	e9cd 4900 	strd	r4, r9, [sp]
 8003d42:	2301      	movs	r3, #1
 8003d44:	9003      	str	r0, [sp, #12]
 8003d46:	f7ff ff5b 	bl	8003c00 <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003d4a:	9803      	ldr	r0, [sp, #12]
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	4632      	mov	r2, r6
 8003d50:	eb08 0106 	add.w	r1, r8, r6
 8003d54:	e9cd 490c 	strd	r4, r9, [sp, #48]	; 0x30
}
 8003d58:	b005      	add	sp, #20
 8003d5a:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003d5e:	f7ff bf4f 	b.w	8003c00 <lcdDrawFillCircleHelper>
 8003d62:	bf00      	nop

08003d64 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return fps_count;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <lcdGetFps+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	200009b8 	.word	0x200009b8

08003d7c <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return fps_time;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <lcdGetFpsTime+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	200009b4 	.word	0x200009b4

08003d94 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <lcdDrawAvailable+0x28>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f083 0301 	eor.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	200009ae 	.word	0x200009ae

08003dc0 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8003dc0:	b598      	push	{r3, r4, r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  if (is_init != true)
 8003dc4:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <lcdRequestDraw+0x5c>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f083 0301 	eor.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <lcdRequestDraw+0x16>
  {
    return false;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e020      	b.n	8003e18 <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <lcdRequestDraw+0x60>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <lcdRequestDraw+0x22>
  {
    return false;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e01a      	b.n	8003e18 <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <lcdRequestDraw+0x64>)
 8003de4:	689c      	ldr	r4, [r3, #8]
 8003de6:	237f      	movs	r3, #127	; 0x7f
 8003de8:	229f      	movs	r2, #159	; 0x9f
 8003dea:	2100      	movs	r1, #0
 8003dec:	2000      	movs	r0, #0
 8003dee:	47a0      	blx	r4

  lcd_request_draw = true;
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <lcdRequestDraw+0x60>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <lcdRequestDraw+0x64>)
 8003df8:	699c      	ldr	r4, [r3, #24]
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <lcdRequestDraw+0x68>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	035b      	lsls	r3, r3, #13
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <lcdRequestDraw+0x6c>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003e12:	4618      	mov	r0, r3
 8003e14:	47a0      	blx	r4

  return true;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd98      	pop	{r3, r4, r7, pc}
 8003e1c:	200009ac 	.word	0x200009ac
 8003e20:	200009ae 	.word	0x200009ae
 8003e24:	20000990 	.word	0x20000990
 8003e28:	200009ad 	.word	0x200009ad
 8003e2c:	200009c0 	.word	0x200009c0

08003e30 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <lcdUpdateDraw+0x54>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	f083 0301 	eor.w	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d118      	bne.n	8003e76 <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003e44:	f7ff ffbc 	bl	8003dc0 <lcdRequestDraw>

  pre_time = millis();
 8003e48:	f7fd fa51 	bl	80012ee <millis>
 8003e4c:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003e4e:	e009      	b.n	8003e64 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003e50:	2001      	movs	r0, #1
 8003e52:	f7fd fa41 	bl	80012d8 <delay>
    if (millis()-pre_time >= 100)
 8003e56:	f7fd fa4a 	bl	80012ee <millis>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b63      	cmp	r3, #99	; 0x63
 8003e62:	d80a      	bhi.n	8003e7a <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003e64:	f7ff ff96 	bl	8003d94 <lcdDrawAvailable>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ed      	bne.n	8003e50 <lcdUpdateDraw+0x20>
 8003e74:	e002      	b.n	8003e7c <lcdUpdateDraw+0x4c>
    return;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <lcdUpdateDraw+0x4c>
    {
      break;
 8003e7a:	bf00      	nop
    }
  }
}
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200009ac 	.word	0x200009ac

08003e88 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <lcdGetFrameBuffer+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	200009bc 	.word	0x200009bc

08003ea0 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	80fb      	strh	r3, [r7, #6]
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80bb      	strh	r3, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	807b      	strh	r3, [r7, #2]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003ebe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003ec2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003ecc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003ed0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed8:	1acb      	subs	r3, r1, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bfb8      	it	lt
 8003ede:	425b      	neglt	r3, r3
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	bfcc      	ite	gt
 8003ee4:	2301      	movgt	r3, #1
 8003ee6:	2300      	movle	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8003eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da01      	bge.n	8003ef8 <lcdDrawLine+0x58>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8003ef8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	da01      	bge.n	8003f04 <lcdDrawLine+0x64>
 8003f00:	2300      	movs	r3, #0
 8003f02:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8003f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da01      	bge.n	8003f10 <lcdDrawLine+0x70>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8003f10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da01      	bge.n	8003f1c <lcdDrawLine+0x7c>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003f1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	833b      	strh	r3, [r7, #24]
 8003f28:	88bb      	ldrh	r3, [r7, #4]
 8003f2a:	80fb      	strh	r3, [r7, #6]
 8003f2c:	8b3b      	ldrh	r3, [r7, #24]
 8003f2e:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	82fb      	strh	r3, [r7, #22]
 8003f34:	883b      	ldrh	r3, [r7, #0]
 8003f36:	807b      	strh	r3, [r7, #2]
 8003f38:	8afb      	ldrh	r3, [r7, #22]
 8003f3a:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003f3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	dd0b      	ble.n	8003f60 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	82bb      	strh	r3, [r7, #20]
 8003f4c:	887b      	ldrh	r3, [r7, #2]
 8003f4e:	80fb      	strh	r3, [r7, #6]
 8003f50:	8abb      	ldrh	r3, [r7, #20]
 8003f52:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003f54:	88bb      	ldrh	r3, [r7, #4]
 8003f56:	827b      	strh	r3, [r7, #18]
 8003f58:	883b      	ldrh	r3, [r7, #0]
 8003f5a:	80bb      	strh	r3, [r7, #4]
 8003f5c:	8a7b      	ldrh	r3, [r7, #18]
 8003f5e:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8003f6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bfb8      	it	lt
 8003f78:	425b      	neglt	r3, r3
 8003f7a:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003f7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f80:	0fda      	lsrs	r2, r3, #31
 8003f82:	4413      	add	r3, r2
 8003f84:	105b      	asrs	r3, r3, #1
 8003f86:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8003f88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	da02      	bge.n	8003f9a <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8003f94:	2301      	movs	r3, #1
 8003f96:	83bb      	strh	r3, [r7, #28]
 8003f98:	e02d      	b.n	8003ff6 <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8003f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f9e:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003fa0:	e029      	b.n	8003ff6 <lcdDrawLine+0x156>
  {
    if (steep)
 8003fa2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8003faa:	88bb      	ldrh	r3, [r7, #4]
 8003fac:	88f9      	ldrh	r1, [r7, #6]
 8003fae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fcf7 	bl	80039a4 <lcdDrawPixel>
 8003fb6:	e005      	b.n	8003fc4 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	88b9      	ldrh	r1, [r7, #4]
 8003fbc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fcf0 	bl	80039a4 <lcdDrawPixel>
    }
    err -= dy;
 8003fc4:	8bfa      	ldrh	r2, [r7, #30]
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8003fce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da09      	bge.n	8003fea <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8003fd6:	88ba      	ldrh	r2, [r7, #4]
 8003fd8:	8bbb      	ldrh	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8003fe0:	8bfa      	ldrh	r2, [r7, #30]
 8003fe2:	8a3b      	ldrh	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8003fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	80fb      	strh	r3, [r7, #6]
 8003ff6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ffa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	ddcf      	ble.n	8003fa2 <lcdDrawLine+0x102>
    }
  }
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	3724      	adds	r7, #36	; 0x24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd90      	pop	{r4, r7, pc}

0800400c <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b085      	sub	sp, #20
 8004010:	af02      	add	r7, sp, #8
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4623      	mov	r3, r4
 800401c:	80fb      	strh	r3, [r7, #6]
 800401e:	4603      	mov	r3, r0
 8004020:	80bb      	strh	r3, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	807b      	strh	r3, [r7, #2]
 8004026:	4613      	mov	r3, r2
 8004028:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 800402a:	88ba      	ldrh	r2, [r7, #4]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4413      	add	r3, r2
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	b21c      	sxth	r4, r3
 8004038:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800403c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004040:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004044:	883b      	ldrh	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4623      	mov	r3, r4
 800404a:	f7ff ff29 	bl	8003ea0 <lcdDrawLine>
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bd90      	pop	{r4, r7, pc}
 8004056:	bf00      	nop

08004058 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b085      	sub	sp, #20
 800405c:	af02      	add	r7, sp, #8
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	461a      	mov	r2, r3
 8004066:	4623      	mov	r3, r4
 8004068:	80fb      	strh	r3, [r7, #6]
 800406a:	4603      	mov	r3, r0
 800406c:	80bb      	strh	r3, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	807b      	strh	r3, [r7, #2]
 8004072:	4613      	mov	r3, r2
 8004074:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	4413      	add	r3, r2
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	b21a      	sxth	r2, r3
 8004084:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004088:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800408c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004090:	883b      	ldrh	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4623      	mov	r3, r4
 8004096:	f7ff ff03 	bl	8003ea0 <lcdDrawLine>
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	bf00      	nop

080040a4 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4604      	mov	r4, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4623      	mov	r3, r4
 80040b4:	80fb      	strh	r3, [r7, #6]
 80040b6:	4603      	mov	r3, r0
 80040b8:	80bb      	strh	r3, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
 80040be:	4613      	mov	r3, r2
 80040c0:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	81fb      	strh	r3, [r7, #14]
 80040c6:	e00e      	b.n	80040e6 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 80040c8:	8c3b      	ldrh	r3, [r7, #32]
 80040ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040d2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80040d6:	f7ff ff99 	bl	800400c <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 80040da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3301      	adds	r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	81fb      	strh	r3, [r7, #14]
 80040e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80040ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80040ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040f2:	440b      	add	r3, r1
 80040f4:	429a      	cmp	r2, r3
 80040f6:	dbe7      	blt.n	80040c8 <lcdDrawFillRect+0x24>
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}
 8004102:	bf00      	nop

08004104 <lcdDrawBufferImage>:
    if((y + h - 1) >= LCD_HEIGHT) return;

    lcd.setWindow(x, y, x+w-1, y+h-1);
    lcd.sendBuffer((uint8_t *)data, sizeof(uint16_t)*w*h, 10);
}
void lcdDrawBufferImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4623      	mov	r3, r4
 8004114:	80fb      	strh	r3, [r7, #6]
 8004116:	4603      	mov	r3, r0
 8004118:	80bb      	strh	r3, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	807b      	strh	r3, [r7, #2]
 800411e:	4613      	mov	r3, r2
 8004120:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b9f      	cmp	r3, #159	; 0x9f
 8004126:	d83b      	bhi.n	80041a0 <lcdDrawBufferImage+0x9c>
 8004128:	88bb      	ldrh	r3, [r7, #4]
 800412a:	2b7f      	cmp	r3, #127	; 0x7f
 800412c:	d838      	bhi.n	80041a0 <lcdDrawBufferImage+0x9c>
    if((x + w - 1) >= LCD_WIDTH) return;
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	4413      	add	r3, r2
 8004134:	2ba0      	cmp	r3, #160	; 0xa0
 8004136:	dc35      	bgt.n	80041a4 <lcdDrawBufferImage+0xa0>
    if((y + h - 1) >= LCD_HEIGHT) return;
 8004138:	88ba      	ldrh	r2, [r7, #4]
 800413a:	883b      	ldrh	r3, [r7, #0]
 800413c:	4413      	add	r3, r2
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	dc32      	bgt.n	80041a8 <lcdDrawBufferImage+0xa4>

    uint16_t pixel_cnt = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	81fb      	strh	r3, [r7, #14]

    for (int16_t i=y; i<y+h; i++)
 8004146:	88bb      	ldrh	r3, [r7, #4]
 8004148:	81bb      	strh	r3, [r7, #12]
 800414a:	e021      	b.n	8004190 <lcdDrawBufferImage+0x8c>
    {
		for (int16_t j=x; j<x+w; j++)
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	817b      	strh	r3, [r7, #10]
 8004150:	e011      	b.n	8004176 <lcdDrawBufferImage+0x72>
		{
			lcdDrawPixel(j, i, data[pixel_cnt++]);
 8004152:	8978      	ldrh	r0, [r7, #10]
 8004154:	89b9      	ldrh	r1, [r7, #12]
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	81fa      	strh	r2, [r7, #14]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	6a3a      	ldr	r2, [r7, #32]
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	f7ff fc1d 	bl	80039a4 <lcdDrawPixel>
		for (int16_t j=x; j<x+w; j++)
 800416a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800416e:	b29b      	uxth	r3, r3
 8004170:	3301      	adds	r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800417a:	88f9      	ldrh	r1, [r7, #6]
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	440b      	add	r3, r1
 8004180:	429a      	cmp	r2, r3
 8004182:	dbe6      	blt.n	8004152 <lcdDrawBufferImage+0x4e>
    for (int16_t i=y; i<y+h; i++)
 8004184:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004188:	b29b      	uxth	r3, r3
 800418a:	3301      	adds	r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	81bb      	strh	r3, [r7, #12]
 8004190:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004194:	88b9      	ldrh	r1, [r7, #4]
 8004196:	883b      	ldrh	r3, [r7, #0]
 8004198:	440b      	add	r3, r1
 800419a:	429a      	cmp	r2, r3
 800419c:	dbd6      	blt.n	800414c <lcdDrawBufferImage+0x48>
 800419e:	e004      	b.n	80041aa <lcdDrawBufferImage+0xa6>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 80041a0:	bf00      	nop
 80041a2:	e002      	b.n	80041aa <lcdDrawBufferImage+0xa6>
    if((x + w - 1) >= LCD_WIDTH) return;
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <lcdDrawBufferImage+0xa6>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80041a8:	bf00      	nop
		}
    }
}
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 80041b0:	b408      	push	{r3}
 80041b2:	b590      	push	{r4, r7, lr}
 80041b4:	b0d8      	sub	sp, #352	; 0x160
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041c0:	6018      	str	r0, [r3, #0]
 80041c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041c6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041ca:	6019      	str	r1, [r3, #0]
 80041cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041d0:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80041d4:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 80041d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80041da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 80041de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 80041ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80041f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80041f4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80041f8:	21ff      	movs	r1, #255	; 0xff
 80041fa:	f010 f9cf 	bl	801459c <vsniprintf>
 80041fe:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8004202:	4b80      	ldr	r3, [pc, #512]	; (8004404 <lcdPrintf+0x254>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	4b7f      	ldr	r3, [pc, #508]	; (8004408 <lcdPrintf+0x258>)
 800420a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d072      	beq.n	80042fa <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800421a:	e067      	b.n	80042ec <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 800421c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004220:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8004224:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004228:	4413      	add	r3, r2
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	4b75      	ldr	r3, [pc, #468]	; (8004404 <lcdPrintf+0x254>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	4619      	mov	r1, r3
 8004232:	4b75      	ldr	r3, [pc, #468]	; (8004408 <lcdPrintf+0x258>)
 8004234:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004238:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800423c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8004240:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004244:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8004248:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800424c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4623      	mov	r3, r4
 8004256:	6809      	ldr	r1, [r1, #0]
 8004258:	6800      	ldr	r0, [r0, #0]
 800425a:	f000 f92d 	bl	80044b8 <disEngFont>

      Size_Char = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8004264:	4b67      	ldr	r3, [pc, #412]	; (8004404 <lcdPrintf+0x254>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <lcdPrintf+0x258>)
 800426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <lcdPrintf+0x254>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	4b62      	ldr	r3, [pc, #392]	; (8004408 <lcdPrintf+0x258>)
 800427e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8004288:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800428c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004290:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004294:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8004298:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800429c:	6809      	ldr	r1, [r1, #0]
 800429e:	440a      	add	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80042a2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80042a6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	2ba0      	cmp	r3, #160	; 0xa0
 80042b4:	dd13      	ble.n	80042de <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 80042b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042be:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80042c2:	601a      	str	r2, [r3, #0]
        y += font_height;
 80042c4:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80042c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042d0:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80042d4:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80042d8:	6809      	ldr	r1, [r1, #0]
 80042da:	440a      	add	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 80042de:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80042e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042e6:	4413      	add	r3, r2
 80042e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80042ec:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80042f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80042f4:	429a      	cmp	r2, r3
 80042f6:	db91      	blt.n	800421c <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 80042f8:	e07b      	b.n	80043f2 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004300:	e06f      	b.n	80043e2 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8004302:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004306:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800430a:	4413      	add	r3, r2
 800430c:	f107 0214 	add.w	r2, r7, #20
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f002 fee6 	bl	80070e4 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8004318:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800431c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	f107 0214 	add.w	r2, r7, #20
 8004326:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800432a:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 800432e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8004332:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8004336:	6809      	ldr	r1, [r1, #0]
 8004338:	6800      	ldr	r0, [r0, #0]
 800433a:	f000 f867 	bl	800440c <disHanFont>
      Size_Char = FontBuf.Size_Char;
 800433e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004342:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004346:	885b      	ldrh	r3, [r3, #2]
 8004348:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 800434c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004350:	2b01      	cmp	r3, #1
 8004352:	dd0e      	ble.n	8004372 <lcdPrintf+0x1c2>
        font_width = 16;
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 800435a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800435e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004362:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004366:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	3210      	adds	r2, #16
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e00d      	b.n	800438e <lcdPrintf+0x1de>
        font_width = 8;
 8004372:	2308      	movs	r3, #8
 8004374:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8004378:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800437c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004380:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004384:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	3208      	adds	r2, #8
 800438c:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 800438e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004392:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004396:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4413      	add	r3, r2
 800439e:	2ba0      	cmp	r3, #160	; 0xa0
 80043a0:	dd11      	ble.n	80043c6 <lcdPrintf+0x216>
        x  = x_Pre;
 80043a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043aa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80043ae:	601a      	str	r2, [r3, #0]
        y += 16;
 80043b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043b8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80043bc:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	3210      	adds	r2, #16
 80043c4:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80043c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043ce:	889b      	ldrh	r3, [r3, #4]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d00d      	beq.n	80043f0 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 80043d4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80043d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043dc:	4413      	add	r3, r2
 80043de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043e2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80043e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80043ea:	429a      	cmp	r2, r3
 80043ec:	db89      	blt.n	8004302 <lcdPrintf+0x152>
}
 80043ee:	e000      	b.n	80043f2 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80043f0:	bf00      	nop
}
 80043f2:	bf00      	nop
 80043f4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80043fe:	b001      	add	sp, #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000081 	.word	0x20000081
 8004408:	20000084 	.word	0x20000084

0800440c <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	885b      	ldrh	r3, [r3, #2]
 800441e:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8004420:	8b3b      	ldrh	r3, [r7, #24]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <disHanFont+0x1e>
  {
    FontSize = 2;
 8004426:	2302      	movs	r3, #2
 8004428:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 800442a:	2300      	movs	r3, #0
 800442c:	83fb      	strh	r3, [r7, #30]
 800442e:	e03a      	b.n	80044a6 <disHanFont+0x9a>
  {
    index_x = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004434:	2300      	movs	r3, #0
 8004436:	83bb      	strh	r3, [r7, #28]
 8004438:	e02e      	b.n	8004498 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 800443a:	8bfb      	ldrh	r3, [r7, #30]
 800443c:	8b3a      	ldrh	r2, [r7, #24]
 800443e:	fb03 f202 	mul.w	r2, r3, r2
 8004442:	8bbb      	ldrh	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	799b      	ldrb	r3, [r3, #6]
 800444c:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 800444e:	2300      	movs	r3, #0
 8004450:	837b      	strh	r3, [r7, #26]
 8004452:	e01b      	b.n	800448c <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8004454:	7d7a      	ldrb	r2, [r7, #21]
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	b29a      	uxth	r2, r3
 8004468:	8afb      	ldrh	r3, [r7, #22]
 800446a:	4413      	add	r3, r2
 800446c:	b298      	uxth	r0, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	b29a      	uxth	r2, r3
 8004472:	8bfb      	ldrh	r3, [r7, #30]
 8004474:	4413      	add	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	887a      	ldrh	r2, [r7, #2]
 800447a:	4619      	mov	r1, r3
 800447c:	f7ff fa92 	bl	80039a4 <lcdDrawPixel>
        }
        index_x++;
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	3301      	adds	r3, #1
 8004484:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8004486:	8b7b      	ldrh	r3, [r7, #26]
 8004488:	3301      	adds	r3, #1
 800448a:	837b      	strh	r3, [r7, #26]
 800448c:	8b7b      	ldrh	r3, [r7, #26]
 800448e:	2b07      	cmp	r3, #7
 8004490:	d9e0      	bls.n	8004454 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004492:	8bbb      	ldrh	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	83bb      	strh	r3, [r7, #28]
 8004498:	8bba      	ldrh	r2, [r7, #28]
 800449a:	8b3b      	ldrh	r3, [r7, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3cc      	bcc.n	800443a <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80044a0:	8bfb      	ldrh	r3, [r7, #30]
 80044a2:	3301      	adds	r3, #1
 80044a4:	83fb      	strh	r3, [r7, #30]
 80044a6:	8bfb      	ldrh	r3, [r7, #30]
 80044a8:	2b0f      	cmp	r3, #15
 80044aa:	d9c1      	bls.n	8004430 <disHanFont+0x24>
      }
    }
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop

080044b8 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e035      	b.n	800453a <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	3b20      	subs	r3, #32
 80044d6:	6839      	ldr	r1, [r7, #0]
 80044d8:	7849      	ldrb	r1, [r1, #1]
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4619      	mov	r1, r3
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	440b      	add	r3, r1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	e01a      	b.n	8004528 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00f      	beq.n	8004522 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	b29a      	uxth	r2, r3
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	b29b      	uxth	r3, r3
 800450a:	4413      	add	r3, r2
 800450c:	b298      	uxth	r0, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	b29a      	uxth	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	b29b      	uxth	r3, r3
 8004516:	4413      	add	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800451c:	4619      	mov	r1, r3
 800451e:	f7ff fa41 	bl	80039a4 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3301      	adds	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4293      	cmp	r3, r2
 8004532:	d3de      	bcc.n	80044f2 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	3301      	adds	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	461a      	mov	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4293      	cmp	r3, r2
 8004544:	d3c3      	bcc.n	80044ce <disEngFont+0x16>
      }
    }
  }
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 800455a:	4a04      	ldr	r2, [pc, #16]	; (800456c <lcdSetFont+0x1c>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	7013      	strb	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000081 	.word	0x20000081

08004570 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d163      	bne.n	800464c <cliLcd+0xdc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	494e      	ldr	r1, [pc, #312]	; (80046c4 <cliLcd+0x154>)
 800458a:	2000      	movs	r0, #0
 800458c:	4798      	blx	r3
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 8004594:	2003      	movs	r0, #3
 8004596:	f7ff ffdb 	bl	8004550 <lcdSetFont>

    while(cliKeepLoop())
 800459a:	e04b      	b.n	8004634 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 800459c:	f7ff fbfa 	bl	8003d94 <lcdDrawAvailable>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d046      	beq.n	8004634 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7ff fa08 	bl	80039bc <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <cliLcd+0x158>)
 80045ae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80045b2:	2100      	movs	r1, #0
 80045b4:	2019      	movs	r0, #25
 80045b6:	f7ff fdfb 	bl	80041b0 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 80045ba:	f7ff fbd3 	bl	8003d64 <lcdGetFps>
 80045be:	4603      	mov	r3, r0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4b42      	ldr	r3, [pc, #264]	; (80046cc <cliLcd+0x15c>)
 80045c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c8:	2110      	movs	r1, #16
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7ff fdf0 	bl	80041b0 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 80045d0:	f7ff fbd4 	bl	8003d7c <lcdGetFpsTime>
 80045d4:	4603      	mov	r3, r0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4b3d      	ldr	r3, [pc, #244]	; (80046d0 <cliLcd+0x160>)
 80045da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045de:	2120      	movs	r1, #32
 80045e0:	2000      	movs	r0, #0
 80045e2:	f7ff fde5 	bl	80041b0 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 80045e6:	f7fc fe82 	bl	80012ee <millis>
 80045ea:	4603      	mov	r3, r0
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <cliLcd+0x160>)
 80045f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f4:	2130      	movs	r1, #48	; 0x30
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7ff fdda 	bl	80041b0 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 80045fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	230a      	movs	r3, #10
 8004604:	220a      	movs	r2, #10
 8004606:	2146      	movs	r1, #70	; 0x46
 8004608:	2000      	movs	r0, #0
 800460a:	f7ff fd4b 	bl	80040a4 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 800460e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	230a      	movs	r3, #10
 8004616:	220a      	movs	r2, #10
 8004618:	2146      	movs	r1, #70	; 0x46
 800461a:	200a      	movs	r0, #10
 800461c:	f7ff fd42 	bl	80040a4 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8004620:	231f      	movs	r3, #31
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	230a      	movs	r3, #10
 8004626:	220a      	movs	r2, #10
 8004628:	2146      	movs	r1, #70	; 0x46
 800462a:	2014      	movs	r0, #20
 800462c:	f7ff fd3a 	bl	80040a4 <lcdDrawFillRect>

        lcdRequestDraw();
 8004630:	f7ff fbc6 	bl	8003dc0 <lcdRequestDraw>
    while(cliKeepLoop())
 8004634:	f7fe f856 	bl	80026e4 <cliKeepLoop>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ae      	bne.n	800459c <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 800463e:	2000      	movs	r0, #0
 8004640:	f7ff f9bc 	bl	80039bc <lcdClearBuffer>
    lcdUpdateDraw();
 8004644:	f7ff fbf4 	bl	8003e30 <lcdUpdateDraw>

    ret = true;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d126      	bne.n	80046a2 <cliLcd+0x132>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	491e      	ldr	r1, [pc, #120]	; (80046d4 <cliLcd+0x164>)
 800465a:	2000      	movs	r0, #0
 800465c:	4798      	blx	r3
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01e      	beq.n	80046a2 <cliLcd+0x132>
  {
	  lcdClearBuffer(black);
 8004664:	2000      	movs	r0, #0
 8004666:	f7ff f9a9 	bl	80039bc <lcdClearBuffer>
	  lcdUpdateDraw();
 800466a:	f7ff fbe1 	bl	8003e30 <lcdUpdateDraw>
	  while(cliKeepLoop())
 800466e:	e00c      	b.n	800468a <cliLcd+0x11a>
	  {
		  static bool blink = 0;
		  blink = get_blink();
 8004670:	f002 fc12 	bl	8006e98 <get_blink>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <cliLcd+0x168>)
 800467a:	701a      	strb	r2, [r3, #0]
		  draw_fan_status(0, 0, blink);
 800467c:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <cliLcd+0x168>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	2100      	movs	r1, #0
 8004684:	2000      	movs	r0, #0
 8004686:	f002 fbbb 	bl	8006e00 <draw_fan_status>
	  while(cliKeepLoop())
 800468a:	f7fe f82b 	bl	80026e4 <cliKeepLoop>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ed      	bne.n	8004670 <cliLcd+0x100>
	  }
	  lcdClearBuffer(black);
 8004694:	2000      	movs	r0, #0
 8004696:	f7ff f991 	bl	80039bc <lcdClearBuffer>
	  lcdUpdateDraw();
 800469a:	f7ff fbc9 	bl	8003e30 <lcdUpdateDraw>

	  ret = true;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	f083 0301 	eor.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <cliLcd+0x14a>
  {
    cliPrintf("lcd test\n");
 80046ae:	480b      	ldr	r0, [pc, #44]	; (80046dc <cliLcd+0x16c>)
 80046b0:	f7fd ff1e 	bl	80024f0 <cliPrintf>
    cliPrintf("lcd image\n");
 80046b4:	480a      	ldr	r0, [pc, #40]	; (80046e0 <cliLcd+0x170>)
 80046b6:	f7fd ff1b 	bl	80024f0 <cliPrintf>
  }
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	080178e8 	.word	0x080178e8
 80046c8:	080178f0 	.word	0x080178f0
 80046cc:	08017900 	.word	0x08017900
 80046d0:	08017908 	.word	0x08017908
 80046d4:	08017910 	.word	0x08017910
 80046d8:	2000a9c0 	.word	0x2000a9c0
 80046dc:	08017918 	.word	0x08017918
 80046e0:	08017924 	.word	0x08017924

080046e4 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
  bool ret = true;
 80046ea:	2301      	movs	r3, #1
 80046ec:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <ledInit+0x8c>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <ledInit+0x8c>)
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	6313      	str	r3, [r2, #48]	; 0x30
 800470c:	4b18      	ldr	r3, [pc, #96]	; (8004770 <ledInit+0x8c>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004718:	2301      	movs	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e016      	b.n	8004758 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <ledInit+0x90>)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	889b      	ldrh	r3, [r3, #4]
 8004734:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8004736:	4a0f      	ldr	r2, [pc, #60]	; (8004774 <ledInit+0x90>)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800473e:	1d3a      	adds	r2, r7, #4
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f008 fdca 	bl	800d2dc <HAL_GPIO_Init>

    ledOff(i);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f837 	bl	80047c0 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	dde5      	ble.n	800472a <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 800475e:	4906      	ldr	r1, [pc, #24]	; (8004778 <ledInit+0x94>)
 8004760:	4806      	ldr	r0, [pc, #24]	; (800477c <ledInit+0x98>)
 8004762:	f7fd ffd5 	bl	8002710 <cliAdd>
#endif

  return ret;
 8004766:	7efb      	ldrb	r3, [r7, #27]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	20000094 	.word	0x20000094
 8004778:	08004839 	.word	0x08004839
 800477c:	08017604 	.word	0x08017604

08004780 <ledOn>:

void ledOn(uint8_t ch)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d111      	bne.n	80047b4 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <ledOn+0x3c>)
 8004794:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	4a08      	ldr	r2, [pc, #32]	; (80047bc <ledOn+0x3c>)
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	8899      	ldrh	r1, [r3, #4]
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	4a05      	ldr	r2, [pc, #20]	; (80047bc <ledOn+0x3c>)
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	799b      	ldrb	r3, [r3, #6]
 80047ac:	461a      	mov	r2, r3
 80047ae:	f009 f815 	bl	800d7dc <HAL_GPIO_WritePin>
 80047b2:	e000      	b.n	80047b6 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 80047b4:	bf00      	nop
}
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000094 	.word	0x20000094

080047c0 <ledOff>:

void ledOff(uint8_t ch)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d111      	bne.n	80047f4 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <ledOff+0x3c>)
 80047d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <ledOff+0x3c>)
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	8899      	ldrh	r1, [r3, #4]
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	4a05      	ldr	r2, [pc, #20]	; (80047fc <ledOff+0x3c>)
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	79db      	ldrb	r3, [r3, #7]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f008 fff5 	bl	800d7dc <HAL_GPIO_WritePin>
 80047f2:	e000      	b.n	80047f6 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80047f4:	bf00      	nop
}
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000094 	.word	0x20000094

08004800 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10d      	bne.n	800482c <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <ledToggle+0x34>)
 8004814:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	4906      	ldr	r1, [pc, #24]	; (8004834 <ledToggle+0x34>)
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	440b      	add	r3, r1
 8004820:	889b      	ldrh	r3, [r3, #4]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f008 fff2 	bl	800d80e <HAL_GPIO_TogglePin>
 800482a:	e000      	b.n	800482e <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 800482c:	bf00      	nop
}
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000094 	.word	0x20000094

08004838 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004840:	2300      	movs	r3, #0
 8004842:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d133      	bne.n	80048b4 <cliLed+0x7c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	491f      	ldr	r1, [pc, #124]	; (80048d0 <cliLed+0x98>)
 8004852:	2000      	movs	r0, #0
 8004854:	4798      	blx	r3
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d02b      	beq.n	80048b4 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2001      	movs	r0, #1
 8004862:	4798      	blx	r3
 8004864:	4603      	mov	r3, r0
 8004866:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2002      	movs	r0, #2
 800486e:	4798      	blx	r3
 8004870:	4603      	mov	r3, r0
 8004872:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8004874:	7dbb      	ldrb	r3, [r7, #22]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <cliLed+0x48>
    {
      led_ch--;
 800487a:	7dbb      	ldrb	r3, [r7, #22]
 800487c:	3b01      	subs	r3, #1
 800487e:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8004880:	f7fc fd35 	bl	80012ee <millis>
 8004884:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8004886:	e00e      	b.n	80048a6 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8004888:	f7fc fd31 	bl	80012ee <millis>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	429a      	cmp	r2, r3
 8004896:	d806      	bhi.n	80048a6 <cliLed+0x6e>
      {
        pre_time = millis();
 8004898:	f7fc fd29 	bl	80012ee <millis>
 800489c:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 800489e:	7dbb      	ldrb	r3, [r7, #22]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ffad 	bl	8004800 <ledToggle>
    while(cliKeepLoop())
 80048a6:	f7fd ff1d 	bl	80026e4 <cliKeepLoop>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1eb      	bne.n	8004888 <cliLed+0x50>
      }
    }

    ret = true;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	f083 0301 	eor.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 80048c0:	2101      	movs	r1, #1
 80048c2:	4804      	ldr	r0, [pc, #16]	; (80048d4 <cliLed+0x9c>)
 80048c4:	f7fd fe14 	bl	80024f0 <cliPrintf>
  }
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	08017608 	.word	0x08017608
 80048d4:	08017610 	.word	0x08017610

080048d8 <menuInit>:

void menu_manual(menu_args_t *args);


bool menuInit(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
	menu_node.node = 1;
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <menuInit+0x64>)
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
	menu_node.main = 0;
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <menuInit+0x64>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	705a      	strb	r2, [r3, #1]
	menu_node.layer = 0;
 80048e8:	4b14      	ldr	r3, [pc, #80]	; (800493c <menuInit+0x64>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	709a      	strb	r2, [r3, #2]
	menu_node.menu_count = 0;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <menuInit+0x64>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	70da      	strb	r2, [r3, #3]
	menu_node.menu_args.getData  = menuArgsGetData;
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <menuInit+0x64>)
 80048f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <menuInit+0x68>)
 80048fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	menu_node.menu_args.getFloat = menuArgsGetFloat;
 8004902:	4b0e      	ldr	r3, [pc, #56]	; (800493c <menuInit+0x64>)
 8004904:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004908:	461a      	mov	r2, r3
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <menuInit+0x6c>)
 800490c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	menu_node.menu_args.getStr   = menuArgsGetStr;
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <menuInit+0x64>)
 8004912:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004916:	461a      	mov	r2, r3
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <menuInit+0x70>)
 800491a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	menu_node.menu_args.isStr    = menuArgsIsStr;
 800491e:	4b07      	ldr	r3, [pc, #28]	; (800493c <menuInit+0x64>)
 8004920:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004924:	461a      	mov	r2, r3
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <menuInit+0x74>)
 8004928:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	menuAdd("manual", 0, menu_manual);
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <menuInit+0x78>)
 800492e:	2100      	movs	r1, #0
 8004930:	4808      	ldr	r0, [pc, #32]	; (8004954 <menuInit+0x7c>)
 8004932:	f000 f8f9 	bl	8004b28 <menuAdd>

	return true;
 8004936:	2301      	movs	r3, #1
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	2000a9c4 	.word	0x2000a9c4
 8004940:	080049c5 	.word	0x080049c5
 8004944:	08004a1d 	.word	0x08004a1d
 8004948:	08004a7d 	.word	0x08004a7d
 800494c:	08004acd 	.word	0x08004acd
 8004950:	08004bb5 	.word	0x08004bb5
 8004954:	08017630 	.word	0x08017630

08004958 <menu_strToUpper>:

  return ret;
}

void menu_strToUpper(char *str)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<MENU_NAME_MAX; i++)
 8004960:	2300      	movs	r3, #0
 8004962:	81fb      	strh	r3, [r7, #14]
 8004964:	e018      	b.n	8004998 <menu_strToUpper+0x40>
  {
    str_ch = str[i];
 8004966:	89fb      	ldrh	r3, [r7, #14]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8004970:	7b7b      	ldrb	r3, [r7, #13]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d014      	beq.n	80049a0 <menu_strToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8004976:	7b7b      	ldrb	r3, [r7, #13]
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d905      	bls.n	8004988 <menu_strToUpper+0x30>
 800497c:	7b7b      	ldrb	r3, [r7, #13]
 800497e:	2b7a      	cmp	r3, #122	; 0x7a
 8004980:	d802      	bhi.n	8004988 <menu_strToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8004982:	7b7b      	ldrb	r3, [r7, #13]
 8004984:	3b20      	subs	r3, #32
 8004986:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8004988:	89fb      	ldrh	r3, [r7, #14]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	7b7a      	ldrb	r2, [r7, #13]
 8004990:	701a      	strb	r2, [r3, #0]
  for (i=0; i<MENU_NAME_MAX; i++)
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	3301      	adds	r3, #1
 8004996:	81fb      	strh	r3, [r7, #14]
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	2bff      	cmp	r3, #255	; 0xff
 800499c:	d9e3      	bls.n	8004966 <menu_strToUpper+0xe>
 800499e:	e000      	b.n	80049a2 <menu_strToUpper+0x4a>
      break;
 80049a0:	bf00      	nop
  }

  if (i == MENU_NAME_MAX)
 80049a2:	89fb      	ldrh	r3, [r7, #14]
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d105      	bne.n	80049b6 <menu_strToUpper+0x5e>
  {
    str[i-1] = 0;
 80049aa:	89fb      	ldrh	r3, [r7, #14]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
  }
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <menuArgsGetData>:


int32_t menuArgsGetData(uint8_t index)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <menuArgsGetData+0x54>)
 80049d4:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d301      	bcc.n	80049ec <menuArgsGetData+0x28>
  {
    return 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e010      	b.n	8004a0e <menuArgsGetData+0x4a>
  }

  ret = (int32_t)strtoul((const char * ) p_menu->menu_args.argv[index], (char **)NULL, (int) 0);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f00f fd94 	bl	8014530 <strtoul>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	60fb      	str	r3, [r7, #12]

  return ret;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	2000a9c4 	.word	0x2000a9c4

08004a1c <menuArgsGetFloat>:

float menuArgsGetFloat(uint8_t index)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <menuArgsGetFloat+0x5c>)
 8004a2e:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a3a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <menuArgsGetFloat+0x2c>
  {
    return 0;
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e00f      	b.n	8004a68 <menuArgsGetFloat+0x4c>
  }

  ret = (float)strtof((const char * ) p_menu->menu_args.argv[index], (char **)NULL);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f00f fc6d 	bl	801433c <strtof>
 8004a62:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000a9c4 	.word	0x2000a9c4

08004a7c <menuArgsGetStr>:

char *menuArgsGetStr(uint8_t index)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <menuArgsGetStr+0x4c>)
 8004a8c:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a98:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d301      	bcc.n	8004aa4 <menuArgsGetStr+0x28>
  {
    return 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e00a      	b.n	8004aba <menuArgsGetStr+0x3e>
  }

  ret = p_menu->menu_args.argv[index];
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]

  return ret;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	2000a9c4 	.word	0x2000a9c4

08004acc <menuArgsIsStr>:

bool menuArgsIsStr(uint8_t index, char *p_str)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
  menu_t *p_menu = &menu_node;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <menuArgsIsStr+0x58>)
 8004ade:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004aea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d301      	bcc.n	8004af6 <menuArgsIsStr+0x2a>
  {
    return 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e012      	b.n	8004b1c <menuArgsIsStr+0x50>
  }

  if(strcmp(p_str, p_menu->menu_args.argv[index]) == 0)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f7fb fb68 	bl	80001e0 <strcmp>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <menuArgsIsStr+0x4e>
  {
    ret = true;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000a9c4 	.word	0x2000a9c4

08004b28 <menuAdd>:

bool menuAdd(const char *menu_str, uint8_t layer, void (*p_func)(menu_args_t *))
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	460b      	mov	r3, r1
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 8004b36:	2301      	movs	r3, #1
 8004b38:	77fb      	strb	r3, [r7, #31]
  menu_t *p_menu = &menu_node;
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <menuAdd+0x88>)
 8004b3c:	61bb      	str	r3, [r7, #24]
  uint16_t index;

  if (p_menu->menu_count >= MENU_LIST_MAX)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	78db      	ldrb	r3, [r3, #3]
 8004b42:	2b1f      	cmp	r3, #31
 8004b44:	d901      	bls.n	8004b4a <menuAdd+0x22>
  {
    return false;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e02e      	b.n	8004ba8 <menuAdd+0x80>
  }

  index = p_menu->menu_count;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	78db      	ldrb	r3, [r3, #3]
 8004b4e:	82fb      	strh	r3, [r7, #22]
  p_menu->layer = layer;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	7afa      	ldrb	r2, [r7, #11]
 8004b54:	709a      	strb	r2, [r3, #2]

  strcpy(p_menu->menu_list[index].menu_str, menu_str);
 8004b56:	8afa      	ldrh	r2, [r7, #22]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	019b      	lsls	r3, r3, #6
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4413      	add	r3, r2
 8004b64:	3304      	adds	r3, #4
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f00e fdbd 	bl	80136e8 <strcpy>
  p_menu->menu_list[index].menu_func = p_func;
 8004b6e:	8afa      	ldrh	r2, [r7, #22]
 8004b70:	69b9      	ldr	r1, [r7, #24]
 8004b72:	4613      	mov	r3, r2
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]

  menu_strToUpper(p_menu->menu_list[index].menu_str);
 8004b84:	8afa      	ldrh	r2, [r7, #22]
 8004b86:	4613      	mov	r3, r2
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4413      	add	r3, r2
 8004b92:	3304      	adds	r3, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fedf 	bl	8004958 <menu_strToUpper>

  p_menu->menu_count++;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	78db      	ldrb	r3, [r3, #3]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	70da      	strb	r2, [r3, #3]

  return ret;
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	2000a9c4 	.word	0x2000a9c4

08004bb4 <menu_manual>:

void menu_manual(menu_args_t *args)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	menu_t *p_menu = &menu_node;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <menu_manual+0x18>)
 8004bbe:	60fb      	str	r3, [r7, #12]


}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	2000a9c4 	.word	0x2000a9c4

08004bd0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <DWT_Delay_us+0x40>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004bde:	f009 fa4b 	bl	800e078 <HAL_RCC_GetHCLKFreq>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <DWT_Delay_us+0x44>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	0c9b      	lsrs	r3, r3, #18
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004bf4:	bf00      	nop
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <DWT_Delay_us+0x40>)
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad2      	subs	r2, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3f8      	bcc.n	8004bf6 <DWT_Delay_us+0x26>
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e0001000 	.word	0xe0001000
 8004c14:	431bde83 	.word	0x431bde83

08004c18 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	889b      	ldrh	r3, [r3, #4]
 8004c24:	041a      	lsls	r2, r3, #16
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	619a      	str	r2, [r3, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	889a      	ldrh	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	619a      	str	r2, [r3, #24]
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c66:	2302      	movs	r3, #2
 8004c68:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	889b      	ldrh	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f107 020c 	add.w	r2, r7, #12
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f008 fb2e 	bl	800d2dc <HAL_GPIO_Init>
}
 8004c80:	bf00      	nop
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8004c90:	2311      	movs	r3, #17
 8004c92:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	889b      	ldrh	r3, [r3, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f107 020c 	add.w	r2, r7, #12
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f008 fb15 	bl	800d2dc <HAL_GPIO_Init>

}
 8004cb2:	bf00      	nop
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	88fa      	ldrh	r2, [r7, #6]
 8004cd2:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff ffd7 	bl	8004c88 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff ffac 	bl	8004c38 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8004ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ce4:	f7ff ff74 	bl	8004bd0 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff ff95 	bl	8004c18 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8004cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cf2:	f7ff ff6d 	bl	8004bd0 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ff9e 	bl	8004c38 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8004cfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d00:	f7ff ff66 	bl	8004bd0 <DWT_Delay_us>
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff7f 	bl	8004c18 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ffb4 	bl	8004c88 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8004d20:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004d24:	f7ff ff54 	bl	8004bd0 <DWT_Delay_us>
	DWT_Delay_us(20);
 8004d28:	2014      	movs	r0, #20
 8004d2a:	f7ff ff51 	bl	8004bd0 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ff91 	bl	8004c56 <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8004d34:	2046      	movs	r0, #70	; 0x46
 8004d36:	f7ff ff4b 	bl	8004bd0 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	889b      	ldrh	r3, [r3, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f008 fd31 	bl	800d7ac <HAL_GPIO_ReadPin>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8004d4e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004d52:	f7ff ff3d 	bl	8004bd0 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff50 	bl	8004c18 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff85 	bl	8004c88 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8004d7e:	200a      	movs	r0, #10
 8004d80:	f7ff ff26 	bl	8004bd0 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff66 	bl	8004c56 <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8004d8a:	2037      	movs	r0, #55	; 0x37
 8004d8c:	f7ff ff20 	bl	8004bd0 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff60 	bl	8004c56 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8004d96:	e011      	b.n	8004dbc <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff3d 	bl	8004c18 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff ff72 	bl	8004c88 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8004da4:	2041      	movs	r0, #65	; 0x41
 8004da6:	f7ff ff13 	bl	8004bd0 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff53 	bl	8004c56 <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8004db0:	2005      	movs	r0, #5
 8004db2:	f7ff ff0d 	bl	8004bd0 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ff4d 	bl	8004c56 <ONEWIRE_INPUT>
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff21 	bl	8004c18 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff56 	bl	8004c88 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8004ddc:	2002      	movs	r0, #2
 8004dde:	f7ff fef7 	bl	8004bd0 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff37 	bl	8004c56 <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8004de8:	200a      	movs	r0, #10
 8004dea:	f7ff fef1 	bl	8004bd0 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	889b      	ldrh	r3, [r3, #4]
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f008 fcd7 	bl	800d7ac <HAL_GPIO_ReadPin>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8004e08:	2032      	movs	r0, #50	; 0x32
 8004e0a:	f7ff fee1 	bl	8004bd0 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004e24:	2308      	movs	r3, #8
 8004e26:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8004e28:	e00a      	b.n	8004e40 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff93 	bl	8004d60 <OneWire_WriteBit>
		byte >>= 1;
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	1e5a      	subs	r2, r3, #1
 8004e44:	73fa      	strb	r2, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1ef      	bne.n	8004e2a <OneWire_WriteByte+0x12>
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	2300      	movs	r3, #0
 8004e62:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004e64:	e00d      	b.n	8004e82 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8004e66:	7bbb      	ldrb	r3, [r7, #14]
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ffa9 	bl	8004dc4 <OneWire_ReadBit>
 8004e72:	4603      	mov	r3, r0
 8004e74:	01db      	lsls	r3, r3, #7
 8004e76:	b25a      	sxtb	r2, r3
 8004e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	b25b      	sxtb	r3, r3
 8004e80:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	1e5a      	subs	r2, r3, #1
 8004e86:	73fa      	strb	r2, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ec      	bne.n	8004e66 <OneWire_ReadByte+0x12>
	}

	return byte;
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f816 	bl	8004ed0 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004ea4:	21f0      	movs	r1, #240	; 0xf0
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f825 	bl	8004ef6 <OneWire_Search>
 8004eac:	4603      	mov	r3, r0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004ebe:	21f0      	movs	r1, #240	; 0xf0
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f818 	bl	8004ef6 <OneWire_Search>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	71da      	strb	r2, [r3, #7]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	7a1b      	ldrb	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 809a 	bne.w	8005054 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fef3 	bl	8004d0c <OneWire_Reset>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	71da      	strb	r2, [r3, #7]
			return 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e09b      	b.n	800507a <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff ff66 	bl	8004e18 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff39 	bl	8004dc4 <OneWire_ReadBit>
 8004f52:	4603      	mov	r3, r0
 8004f54:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff34 	bl	8004dc4 <OneWire_ReadBit>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8004f60:	7a7b      	ldrb	r3, [r7, #9]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d102      	bne.n	8004f6c <OneWire_Search+0x76>
 8004f66:	7a3b      	ldrb	r3, [r7, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d064      	beq.n	8005036 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8004f6c:	7a7a      	ldrb	r2, [r7, #9]
 8004f6e:	7a3b      	ldrb	r3, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d002      	beq.n	8004f7a <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8004f74:	7a7b      	ldrb	r3, [r7, #9]
 8004f76:	72bb      	strb	r3, [r7, #10]
 8004f78:	e026      	b.n	8004fc8 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	799b      	ldrb	r3, [r3, #6]
 8004f7e:	7bfa      	ldrb	r2, [r7, #15]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d20d      	bcs.n	8004fa0 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8004f84:	7b7b      	ldrb	r3, [r7, #13]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	7a5a      	ldrb	r2, [r3, #9]
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	72bb      	strb	r3, [r7, #10]
 8004f9e:	e008      	b.n	8004fb2 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	799b      	ldrb	r3, [r3, #6]
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8004fb2:	7abb      	ldrb	r3, [r7, #10]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d802      	bhi.n	8004fc8 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7bba      	ldrb	r2, [r7, #14]
 8004fc6:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8004fc8:	7abb      	ldrb	r3, [r7, #10]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10c      	bne.n	8004fe8 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8004fce:	7b7b      	ldrb	r3, [r7, #13]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	7a59      	ldrb	r1, [r3, #9]
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	7afa      	ldrb	r2, [r7, #11]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	b2d1      	uxtb	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	725a      	strb	r2, [r3, #9]
 8004fe6:	e010      	b.n	800500a <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8004fe8:	7b7b      	ldrb	r3, [r7, #13]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	7a5b      	ldrb	r3, [r3, #9]
 8004ff0:	b25a      	sxtb	r2, r3
 8004ff2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b25a      	sxtb	r2, r3
 8004ffe:	7b7b      	ldrb	r3, [r7, #13]
 8005000:	b2d1      	uxtb	r1, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	460a      	mov	r2, r1
 8005008:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800500a:	7abb      	ldrb	r3, [r7, #10]
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fea6 	bl	8004d60 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	3301      	adds	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800501a:	7afb      	ldrb	r3, [r7, #11]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8005020:	7afb      	ldrb	r3, [r7, #11]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8005026:	7b7b      	ldrb	r3, [r7, #13]
 8005028:	3301      	adds	r3, #1
 800502a:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800502c:	2301      	movs	r3, #1
 800502e:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8005030:	7b7b      	ldrb	r3, [r7, #13]
 8005032:	2b07      	cmp	r3, #7
 8005034:	d98a      	bls.n	8004f4c <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d90b      	bls.n	8005054 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7bba      	ldrb	r2, [r7, #14]
 8005040:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	799b      	ldrb	r3, [r3, #6]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8005050:	2301      	movs	r3, #1
 8005052:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8005054:	7b3b      	ldrb	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <OneWire_Search+0x16c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7a5b      	ldrb	r3, [r3, #9]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8005078:	7b3b      	ldrb	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800508c:	2155      	movs	r1, #85	; 0x55
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fec2 	bl	8004e18 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e00a      	b.n	80050b0 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff feb7 	bl	8004e18 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	3301      	adds	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	d9f1      	bls.n	800509a <OneWire_SelectWithPointer+0x18>
	}
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	e00a      	b.n	80050e6 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	440b      	add	r3, r1
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	440a      	add	r2, r1
 80050dc:	7a52      	ldrb	r2, [r2, #9]
 80050de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	3301      	adds	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	2b07      	cmp	r3, #7
 80050ea:	d9f1      	bls.n	80050d0 <OneWire_GetFullROM+0x10>
	}
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 800510a:	e022      	b.n	8005152 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8005116:	2308      	movs	r3, #8
 8005118:	737b      	strb	r3, [r7, #13]
 800511a:	e017      	b.n	800514c <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	4053      	eors	r3, r2
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8005130:	7b3b      	ldrb	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800513c:	43db      	mvns	r3, r3
 800513e:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8005146:	7b7b      	ldrb	r3, [r7, #13]
 8005148:	3b01      	subs	r3, #1
 800514a:	737b      	strb	r3, [r7, #13]
 800514c:	7b7b      	ldrb	r3, [r7, #13]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e4      	bne.n	800511c <OneWire_CRC8+0x22>
	while (len--) {
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	70fa      	strb	r2, [r7, #3]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1d7      	bne.n	800510c <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  bool ret = false;
 8005172:	2300      	movs	r3, #0
 8005174:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <sdInit+0x80>)
 8005178:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <sdInit+0x84>)
 800517a:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <sdInit+0x80>)
 800517e:	2200      	movs	r2, #0
 8005180:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8005182:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <sdInit+0x80>)
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005188:	4b18      	ldr	r3, [pc, #96]	; (80051ec <sdInit+0x80>)
 800518a:	2200      	movs	r2, #0
 800518c:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <sdInit+0x80>)
 8005190:	2200      	movs	r2, #0
 8005192:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005194:	4b15      	ldr	r3, [pc, #84]	; (80051ec <sdInit+0x80>)
 8005196:	2200      	movs	r2, #0
 8005198:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <sdInit+0x80>)
 800519c:	2200      	movs	r2, #0
 800519e:	619a      	str	r2, [r3, #24]


  is_detected = false;
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <sdInit+0x88>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 80051a6:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <sdInit+0x88>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <sdInit+0x88>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00f      	beq.n	80051d4 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 80051b4:	480d      	ldr	r0, [pc, #52]	; (80051ec <sdInit+0x80>)
 80051b6:	f008 ff93 	bl	800e0e0 <HAL_SD_Init>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 80051c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051c4:	4809      	ldr	r0, [pc, #36]	; (80051ec <sdInit+0x80>)
 80051c6:	f009 fd5f 	bl	800ec88 <HAL_SD_ConfigWideBusOperation>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <sdInit+0x68>
      {
        ret = true;
 80051d0:	2301      	movs	r3, #1
 80051d2:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <sdInit+0x8c>)
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 80051da:	4908      	ldr	r1, [pc, #32]	; (80051fc <sdInit+0x90>)
 80051dc:	4808      	ldr	r0, [pc, #32]	; (8005200 <sdInit+0x94>)
 80051de:	f7fd fa97 	bl	8002710 <cliAdd>
#endif

  return ret;
 80051e2:	79fb      	ldrb	r3, [r7, #7]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	2000ca64 	.word	0x2000ca64
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	2000ca61 	.word	0x2000ca61
 80051f8:	2000ca60 	.word	0x2000ca60
 80051fc:	080056ed 	.word	0x080056ed
 8005200:	08017638 	.word	0x08017638

08005204 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return is_init;
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <sdIsInit+0x14>)
 800520a:	781b      	ldrb	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	2000ca60 	.word	0x2000ca60

0800521c <sdIsDetected>:

bool sdIsDetected(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8005220:	2000      	movs	r0, #0
 8005222:	f7fe fa19 	bl	8003658 <gpioPinRead>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <sdIsDetected+0x18>
  {
    is_detected = true;
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <sdIsDetected+0x28>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e002      	b.n	800523a <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <sdIsDetected+0x28>)
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 800523a:	4b02      	ldr	r3, [pc, #8]	; (8005244 <sdIsDetected+0x28>)
 800523c:	781b      	ldrb	r3, [r3, #0]
}
 800523e:	4618      	mov	r0, r3
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	2000ca61 	.word	0x2000ca61

08005248 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8005248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800524c:	b08c      	sub	sp, #48	; 0x30
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8005252:	2300      	movs	r3, #0
 8005254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 800525c:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <sdGetInfo+0xa8>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d03d      	beq.n	80052e0 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4619      	mov	r1, r3
 800526a:	4822      	ldr	r0, [pc, #136]	; (80052f4 <sdGetInfo+0xac>)
 800526c:	f009 fce0 	bl	800ec30 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2200      	movs	r2, #0
 80052a6:	469a      	mov	sl, r3
 80052a8:	4693      	mov	fp, r2
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	4698      	mov	r8, r3
 80052b2:	4691      	mov	r9, r2
 80052b4:	fb08 f20b 	mul.w	r2, r8, fp
 80052b8:	fb0a f309 	mul.w	r3, sl, r9
 80052bc:	4413      	add	r3, r2
 80052be:	fbaa 4508 	umull	r4, r5, sl, r8
 80052c2:	442b      	add	r3, r5
 80052c4:	461d      	mov	r5, r3
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	0d22      	lsrs	r2, r4, #20
 80052d0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80052d4:	0d2b      	lsrs	r3, r5, #20
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	621a      	str	r2, [r3, #32]
    ret = true;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80052e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3730      	adds	r7, #48	; 0x30
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ee:	bf00      	nop
 80052f0:	2000ca60 	.word	0x2000ca60
 80052f4:	2000ca64 	.word	0x2000ca64

080052f8 <sdIsBusy>:

bool sdIsBusy(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80052fe:	4808      	ldr	r0, [pc, #32]	; (8005320 <sdIsBusy+0x28>)
 8005300:	f009 fd3e 	bl	800ed80 <HAL_SD_GetCardState>
 8005304:	4603      	mov	r3, r0
 8005306:	2b04      	cmp	r3, #4
 8005308:	d102      	bne.n	8005310 <sdIsBusy+0x18>
  {
    is_busy = false;
 800530a:	2300      	movs	r3, #0
 800530c:	71fb      	strb	r3, [r7, #7]
 800530e:	e001      	b.n	8005314 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8005310:	2301      	movs	r3, #1
 8005312:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8005314:	79fb      	ldrb	r3, [r7, #7]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	2000ca64 	.word	0x2000ca64

08005324 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 800532c:	f7fb ffdf 	bl	80012ee <millis>
 8005330:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8005332:	e009      	b.n	8005348 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8005334:	f7ff ffe0 	bl	80052f8 <sdIsBusy>
 8005338:	4603      	mov	r3, r0
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <sdIsReady+0x24>
    {
      return true;
 8005344:	2301      	movs	r3, #1
 8005346:	e008      	b.n	800535a <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8005348:	f7fb ffd1 	bl	80012ee <millis>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d8ed      	bhi.n	8005334 <sdIsReady+0x10>
    }
  }

  return false;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <sdReadBlocks+0x8c>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	481c      	ldr	r0, [pc, #112]	; (80053f4 <sdReadBlocks+0x90>)
 8005384:	f008 ff3c 	bl	800e200 <HAL_SD_ReadBlocks_DMA>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d12a      	bne.n	80053e4 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 800538e:	f7fb ffae 	bl	80012ee <millis>
 8005392:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8005394:	e007      	b.n	80053a6 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8005396:	f7fb ffaa 	bl	80012ee <millis>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d908      	bls.n	80053b8 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <sdReadBlocks+0x8c>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f083 0301 	eor.w	r3, r3, #1
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1ef      	bne.n	8005396 <sdReadBlocks+0x32>
 80053b6:	e00d      	b.n	80053d4 <sdReadBlocks+0x70>
      {
        break;
 80053b8:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 80053ba:	e00b      	b.n	80053d4 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80053bc:	f7fb ff97 	bl	80012ee <millis>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d803      	bhi.n	80053d4 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <sdReadBlocks+0x8c>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
        break;
 80053d2:	e004      	b.n	80053de <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 80053d4:	f7ff ff90 	bl	80052f8 <sdIsBusy>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ee      	bne.n	80053bc <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <sdReadBlocks+0x8c>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	2000ca62 	.word	0x2000ca62
 80053f4:	2000ca64 	.word	0x2000ca64

080053f8 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 800540a:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <sdWriteBlocks+0x90>)
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	481d      	ldr	r0, [pc, #116]	; (800548c <sdWriteBlocks+0x94>)
 8005418:	f008 ffdc 	bl	800e3d4 <HAL_SD_WriteBlocks_DMA>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d12d      	bne.n	800547e <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 8005422:	f7fb ff64 	bl	80012ee <millis>
 8005426:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8005428:	e007      	b.n	800543a <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 800542a:	f7fb ff60 	bl	80012ee <millis>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d908      	bls.n	800544c <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <sdWriteBlocks+0x90>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ef      	bne.n	800542a <sdWriteBlocks+0x32>
 800544a:	e000      	b.n	800544e <sdWriteBlocks+0x56>
      {
        break;
 800544c:	bf00      	nop
      }
    }
    pre_time = millis();
 800544e:	f7fb ff4e 	bl	80012ee <millis>
 8005452:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8005454:	e00b      	b.n	800546e <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 8005456:	f7fb ff4a 	bl	80012ee <millis>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d803      	bhi.n	800546e <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <sdWriteBlocks+0x90>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
        break;
 800546c:	e004      	b.n	8005478 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 800546e:	f7ff ff43 	bl	80052f8 <sdIsBusy>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1ee      	bne.n	8005456 <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <sdWriteBlocks+0x90>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	2000ca63 	.word	0x2000ca63
 800548c:	2000ca64 	.word	0x2000ca64

08005490 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <HAL_SD_RxCpltCallback+0x1c>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	2000ca62 	.word	0x2000ca62

080054b0 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <HAL_SD_TxCpltCallback+0x1c>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000ca63 	.word	0x2000ca63

080054d0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	; 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d8:	f107 031c 	add.w	r3, r7, #28
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a77      	ldr	r2, [pc, #476]	; (80056cc <HAL_SD_MspInit+0x1fc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	f040 80e8 	bne.w	80056c4 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	4b75      	ldr	r3, [pc, #468]	; (80056d0 <HAL_SD_MspInit+0x200>)
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	4a74      	ldr	r2, [pc, #464]	; (80056d0 <HAL_SD_MspInit+0x200>)
 80054fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005502:	6313      	str	r3, [r2, #48]	; 0x30
 8005504:	4b72      	ldr	r3, [pc, #456]	; (80056d0 <HAL_SD_MspInit+0x200>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	4b6e      	ldr	r3, [pc, #440]	; (80056d0 <HAL_SD_MspInit+0x200>)
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	4a6d      	ldr	r2, [pc, #436]	; (80056d0 <HAL_SD_MspInit+0x200>)
 800551a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800551e:	6453      	str	r3, [r2, #68]	; 0x44
 8005520:	4b6b      	ldr	r3, [pc, #428]	; (80056d0 <HAL_SD_MspInit+0x200>)
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	4b67      	ldr	r3, [pc, #412]	; (80056d0 <HAL_SD_MspInit+0x200>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	4a66      	ldr	r2, [pc, #408]	; (80056d0 <HAL_SD_MspInit+0x200>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6313      	str	r3, [r2, #48]	; 0x30
 800553c:	4b64      	ldr	r3, [pc, #400]	; (80056d0 <HAL_SD_MspInit+0x200>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	4b60      	ldr	r3, [pc, #384]	; (80056d0 <HAL_SD_MspInit+0x200>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	4a5f      	ldr	r2, [pc, #380]	; (80056d0 <HAL_SD_MspInit+0x200>)
 8005552:	f043 0302 	orr.w	r3, r3, #2
 8005556:	6313      	str	r3, [r2, #48]	; 0x30
 8005558:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <HAL_SD_MspInit+0x200>)
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8005564:	f44f 7350 	mov.w	r3, #832	; 0x340
 8005568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2302      	movs	r3, #2
 800556c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005572:	2301      	movs	r3, #1
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005576:	230c      	movs	r3, #12
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557a:	f107 031c 	add.w	r3, r7, #28
 800557e:	4619      	mov	r1, r3
 8005580:	4854      	ldr	r0, [pc, #336]	; (80056d4 <HAL_SD_MspInit+0x204>)
 8005582:	f007 feab 	bl	800d2dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8005586:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800558a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005594:	2301      	movs	r3, #1
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005598:	230c      	movs	r3, #12
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	4619      	mov	r1, r3
 80055a2:	484d      	ldr	r0, [pc, #308]	; (80056d8 <HAL_SD_MspInit+0x208>)
 80055a4:	f007 fe9a 	bl	800d2dc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 80055a8:	4b4c      	ldr	r3, [pc, #304]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055aa:	4a4d      	ldr	r2, [pc, #308]	; (80056e0 <HAL_SD_MspInit+0x210>)
 80055ac:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80055ae:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055b4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055b6:	4b49      	ldr	r3, [pc, #292]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055bc:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055c2:	4b46      	ldr	r3, [pc, #280]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055c8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80055ca:	4b44      	ldr	r3, [pc, #272]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055d0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055d2:	4b42      	ldr	r3, [pc, #264]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055d8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80055da:	4b40      	ldr	r3, [pc, #256]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055dc:	2220      	movs	r2, #32
 80055de:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055e0:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80055e6:	4b3d      	ldr	r3, [pc, #244]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055e8:	2204      	movs	r2, #4
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055ee:	2203      	movs	r2, #3
 80055f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80055f2:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80055f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_SD_MspInit+0x20c>)
 80055fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005602:	4836      	ldr	r0, [pc, #216]	; (80056dc <HAL_SD_MspInit+0x20c>)
 8005604:	f007 fa6e 	bl	800cae4 <HAL_DMA_Init>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 800560e:	f7fb fedd 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a31      	ldr	r2, [pc, #196]	; (80056dc <HAL_SD_MspInit+0x20c>)
 8005616:	641a      	str	r2, [r3, #64]	; 0x40
 8005618:	4a30      	ldr	r2, [pc, #192]	; (80056dc <HAL_SD_MspInit+0x20c>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005620:	4a31      	ldr	r2, [pc, #196]	; (80056e8 <HAL_SD_MspInit+0x218>)
 8005622:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005624:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800562a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800562c:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005632:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005634:	2200      	movs	r2, #0
 8005636:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005638:	4b2a      	ldr	r3, [pc, #168]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800563a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800563e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005646:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005648:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800564a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800564e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005650:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005652:	2220      	movs	r2, #32
 8005654:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005656:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005658:	2200      	movs	r2, #0
 800565a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800565e:	2204      	movs	r2, #4
 8005660:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005662:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005664:	2203      	movs	r2, #3
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800566a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005670:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005672:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005678:	481a      	ldr	r0, [pc, #104]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800567a:	f007 fa33 	bl	800cae4 <HAL_DMA_Init>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8005684:	f7fb fea2 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <HAL_SD_MspInit+0x214>)
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <HAL_SD_MspInit+0x214>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8005694:	2200      	movs	r2, #0
 8005696:	2103      	movs	r1, #3
 8005698:	2031      	movs	r0, #49	; 0x31
 800569a:	f007 f9de 	bl	800ca5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800569e:	2031      	movs	r0, #49	; 0x31
 80056a0:	f007 f9f7 	bl	800ca92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80056a4:	2200      	movs	r2, #0
 80056a6:	2103      	movs	r1, #3
 80056a8:	203b      	movs	r0, #59	; 0x3b
 80056aa:	f007 f9d6 	bl	800ca5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80056ae:	203b      	movs	r0, #59	; 0x3b
 80056b0:	f007 f9ef 	bl	800ca92 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 80056b4:	2200      	movs	r2, #0
 80056b6:	2103      	movs	r1, #3
 80056b8:	2045      	movs	r0, #69	; 0x45
 80056ba:	f007 f9ce 	bl	800ca5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80056be:	2045      	movs	r0, #69	; 0x45
 80056c0:	f007 f9e7 	bl	800ca92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80056c4:	bf00      	nop
 80056c6:	3730      	adds	r7, #48	; 0x30
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40020000 	.word	0x40020000
 80056d8:	40020400 	.word	0x40020400
 80056dc:	2000cae8 	.word	0x2000cae8
 80056e0:	400264a0 	.word	0x400264a0
 80056e4:	2000cb48 	.word	0x2000cb48
 80056e8:	40026458 	.word	0x40026458

080056ec <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80056f8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80056fc:	6018      	str	r0, [r3, #0]
  bool ret = false;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8005704:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005708:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	f040 8094 	bne.w	800583e <cliSd+0x152>
 8005716:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800571a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4979      	ldr	r1, [pc, #484]	; (8005908 <cliSd+0x21c>)
 8005724:	2000      	movs	r0, #0
 8005726:	4798      	blx	r3
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8087 	beq.w	800583e <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8005730:	4b76      	ldr	r3, [pc, #472]	; (800590c <cliSd+0x220>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	4876      	ldr	r0, [pc, #472]	; (8005910 <cliSd+0x224>)
 8005738:	f7fc feda 	bl	80024f0 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 800573c:	4b75      	ldr	r3, [pc, #468]	; (8005914 <cliSd+0x228>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	4619      	mov	r1, r3
 8005742:	4875      	ldr	r0, [pc, #468]	; (8005918 <cliSd+0x22c>)
 8005744:	f7fc fed4 	bl	80024f0 <cliPrintf>

    if (is_init == true)
 8005748:	4b70      	ldr	r3, [pc, #448]	; (800590c <cliSd+0x220>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d073      	beq.n	8005838 <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 8005750:	f107 030c 	add.w	r3, r7, #12
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fd77 	bl	8005248 <sdGetInfo>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d06b      	beq.n	8005838 <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8005760:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005764:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	486b      	ldr	r0, [pc, #428]	; (800591c <cliSd+0x230>)
 800576e:	f7fc febf 	bl	80024f0 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8005772:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005776:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4619      	mov	r1, r3
 800577e:	4868      	ldr	r0, [pc, #416]	; (8005920 <cliSd+0x234>)
 8005780:	f7fc feb6 	bl	80024f0 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8005784:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005788:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4619      	mov	r1, r3
 8005790:	4864      	ldr	r0, [pc, #400]	; (8005924 <cliSd+0x238>)
 8005792:	f7fc fead 	bl	80024f0 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8005796:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800579a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4619      	mov	r1, r3
 80057a2:	4861      	ldr	r0, [pc, #388]	; (8005928 <cliSd+0x23c>)
 80057a4:	f7fc fea4 	bl	80024f0 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 80057a8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	4619      	mov	r1, r3
 80057b4:	485d      	ldr	r0, [pc, #372]	; (800592c <cliSd+0x240>)
 80057b6:	f7fc fe9b 	bl	80024f0 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 80057ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	4619      	mov	r1, r3
 80057c6:	485a      	ldr	r0, [pc, #360]	; (8005930 <cliSd+0x244>)
 80057c8:	f7fc fe92 	bl	80024f0 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80057cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4856      	ldr	r0, [pc, #344]	; (8005934 <cliSd+0x248>)
 80057da:	f7fc fe89 	bl	80024f0 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80057de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057e2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	4619      	mov	r1, r3
 80057ea:	4853      	ldr	r0, [pc, #332]	; (8005938 <cliSd+0x24c>)
 80057ec:	f7fc fe80 	bl	80024f0 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80057f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80057f8:	6a18      	ldr	r0, [r3, #32]
 80057fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80057fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	0a9c      	lsrs	r4, r3, #10
 8005806:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800580a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	0a99      	lsrs	r1, r3, #10
 800581a:	4b48      	ldr	r3, [pc, #288]	; (800593c <cliSd+0x250>)
 800581c:	fba3 2301 	umull	r2, r3, r3, r1
 8005820:	08da      	lsrs	r2, r3, #3
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	1aca      	subs	r2, r1, r3
 800582c:	4613      	mov	r3, r2
 800582e:	4622      	mov	r2, r4
 8005830:	4601      	mov	r1, r0
 8005832:	4843      	ldr	r0, [pc, #268]	; (8005940 <cliSd+0x254>)
 8005834:	f7fc fe5c 	bl	80024f0 <cliPrintf>
      }
    }
    ret = true;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 800583e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005842:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d146      	bne.n	80058dc <cliSd+0x1f0>
 800584e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005852:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	493a      	ldr	r1, [pc, #232]	; (8005944 <cliSd+0x258>)
 800585c:	2000      	movs	r0, #0
 800585e:	4798      	blx	r3
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d03a      	beq.n	80058dc <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8005866:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800586a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2001      	movs	r0, #1
 8005874:	4798      	blx	r3
 8005876:	4603      	mov	r3, r0
 8005878:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 800587c:	f107 010c 	add.w	r1, r7, #12
 8005880:	2364      	movs	r3, #100	; 0x64
 8005882:	2201      	movs	r2, #1
 8005884:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8005888:	f7ff fd6c 	bl	8005364 <sdReadBlocks>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01e      	beq.n	80058d0 <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005898:	e015      	b.n	80058c6 <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 800589a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800589e:	0099      	lsls	r1, r3, #2
 80058a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80058a8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80058ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b0:	460a      	mov	r2, r1
 80058b2:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80058b6:	4824      	ldr	r0, [pc, #144]	; (8005948 <cliSd+0x25c>)
 80058b8:	f7fc fe1a 	bl	80024f0 <cliPrintf>
      for (int i=0; i<512/4; i++)
 80058bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058c0:	3301      	adds	r3, #1
 80058c2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80058c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058ca:	2b7f      	cmp	r3, #127	; 0x7f
 80058cc:	dde5      	ble.n	800589a <cliSd+0x1ae>
 80058ce:	e002      	b.n	80058d6 <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 80058d0:	481e      	ldr	r0, [pc, #120]	; (800594c <cliSd+0x260>)
 80058d2:	f7fc fe0d 	bl	80024f0 <cliPrintf>
    }

    ret = true;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 80058dc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80058e0:	f083 0301 	eor.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 80058ea:	4819      	ldr	r0, [pc, #100]	; (8005950 <cliSd+0x264>)
 80058ec:	f7fc fe00 	bl	80024f0 <cliPrintf>

    if (is_init == true)
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <cliSd+0x220>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 80058f8:	4816      	ldr	r0, [pc, #88]	; (8005954 <cliSd+0x268>)
 80058fa:	f7fc fdf9 	bl	80024f0 <cliPrintf>
    }
  }
}
 80058fe:	bf00      	nop
 8005900:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005904:	46bd      	mov	sp, r7
 8005906:	bd90      	pop	{r4, r7, pc}
 8005908:	0801763c 	.word	0x0801763c
 800590c:	2000ca60 	.word	0x2000ca60
 8005910:	08017644 	.word	0x08017644
 8005914:	2000ca61 	.word	0x2000ca61
 8005918:	08017658 	.word	0x08017658
 800591c:	0801766c 	.word	0x0801766c
 8005920:	0801768c 	.word	0x0801768c
 8005924:	080176ac 	.word	0x080176ac
 8005928:	080176cc 	.word	0x080176cc
 800592c:	080176ec 	.word	0x080176ec
 8005930:	0801770c 	.word	0x0801770c
 8005934:	0801772c 	.word	0x0801772c
 8005938:	0801774c 	.word	0x0801774c
 800593c:	cccccccd 	.word	0xcccccccd
 8005940:	0801776c 	.word	0x0801776c
 8005944:	08017798 	.word	0x08017798
 8005948:	080177a0 	.word	0x080177a0
 800594c:	080177b4 	.word	0x080177b4
 8005950:	080177c4 	.word	0x080177c4
 8005954:	080177d0 	.word	0x080177d0

08005958 <DWT_Delay_us>:
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <DWT_Delay_us+0x40>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8005966:	f008 fb87 	bl	800e078 <HAL_RCC_GetHCLKFreq>
 800596a:	4603      	mov	r3, r0
 800596c:	4a0b      	ldr	r2, [pc, #44]	; (800599c <DWT_Delay_us+0x44>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0c9b      	lsrs	r3, r3, #18
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800597c:	bf00      	nop
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <DWT_Delay_us+0x40>)
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	d3f8      	bcc.n	800597e <DWT_Delay_us+0x26>
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	e0001000 	.word	0xe0001000
 800599c:	431bde83 	.word	0x431bde83

080059a0 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
	bool ret = false;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059ac:	f107 031c 	add.w	r3, r7, #28
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ba:	f107 0314 	add.w	r3, r7, #20
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	609a      	str	r2, [r3, #8]
 80059ce:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 80059d0:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <sonarInit+0xec>)
 80059d2:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <sonarInit+0xf0>)
 80059d4:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 80059d6:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <sonarInit+0xec>)
 80059d8:	225f      	movs	r2, #95	; 0x5f
 80059da:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059dc:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <sonarInit+0xec>)
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 80059e2:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <sonarInit+0xec>)
 80059e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e8:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ea:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <sonarInit+0xec>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059f0:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <sonarInit+0xec>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80059f6:	4825      	ldr	r0, [pc, #148]	; (8005a8c <sonarInit+0xec>)
 80059f8:	f00a fba2 	bl	8010140 <HAL_TIM_Base_Init>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <sonarInit+0x66>
	  {
	    Error_Handler();
 8005a02:	f7fb fce3 	bl	80013cc <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a0a:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a0c:	f107 031c 	add.w	r3, r7, #28
 8005a10:	4619      	mov	r1, r3
 8005a12:	481e      	ldr	r0, [pc, #120]	; (8005a8c <sonarInit+0xec>)
 8005a14:	f00a fe00 	bl	8010618 <HAL_TIM_ConfigClockSource>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <sonarInit+0x82>
	  {
	    Error_Handler();
 8005a1e:	f7fb fcd5 	bl	80013cc <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005a22:	481a      	ldr	r0, [pc, #104]	; (8005a8c <sonarInit+0xec>)
 8005a24:	f00a fbb7 	bl	8010196 <HAL_TIM_IC_Init>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <sonarInit+0x92>
	  {
	    Error_Handler();
 8005a2e:	f7fb fccd 	bl	80013cc <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4812      	ldr	r0, [pc, #72]	; (8005a8c <sonarInit+0xec>)
 8005a42:	f00b f933 	bl	8010cac <HAL_TIMEx_MasterConfigSynchronization>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <sonarInit+0xb0>
	  {
	    Error_Handler();
 8005a4c:	f7fb fcbe 	bl	80013cc <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005a50:	2300      	movs	r3, #0
 8005a52:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005a54:	2301      	movs	r3, #1
 8005a56:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	220c      	movs	r2, #12
 8005a64:	4619      	mov	r1, r3
 8005a66:	4809      	ldr	r0, [pc, #36]	; (8005a8c <sonarInit+0xec>)
 8005a68:	f00a fd3a 	bl	80104e0 <HAL_TIM_IC_ConfigChannel>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <sonarInit+0xd6>
	  {
	    Error_Handler();
 8005a72:	f7fb fcab 	bl	80013cc <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8005a76:	210c      	movs	r1, #12
 8005a78:	4804      	ldr	r0, [pc, #16]	; (8005a8c <sonarInit+0xec>)
 8005a7a:	f00a fbc1 	bl	8010200 <HAL_TIM_IC_Start_IT>

	return ret;
 8005a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3730      	adds	r7, #48	; 0x30
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	2000cba8 	.word	0x2000cba8
 8005a90:	40000400 	.word	0x40000400
 8005a94:	00000000 	.word	0x00000000

08005a98 <Sonar_measure>:

bool Sonar_measure(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
	bool ret = false;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8005aa2:	4b5d      	ldr	r3, [pc, #372]	; (8005c18 <Sonar_measure+0x180>)
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <Sonar_measure+0x18>
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d022      	beq.n	8005af4 <Sonar_measure+0x5c>
 8005aae:	e0a9      	b.n	8005c04 <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8005ab0:	2103      	movs	r1, #3
 8005ab2:	2007      	movs	r0, #7
 8005ab4:	f7fd fd0c 	bl	80034d0 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8005ab8:	2101      	movs	r1, #1
 8005aba:	2007      	movs	r0, #7
 8005abc:	f7fd fd7a 	bl	80035b4 <gpioPinWrite>
			DWT_Delay_us(5);
 8005ac0:	2005      	movs	r0, #5
 8005ac2:	f7ff ff49 	bl	8005958 <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	2007      	movs	r0, #7
 8005aca:	f7fd fd73 	bl	80035b4 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8005ace:	2106      	movs	r1, #6
 8005ad0:	2007      	movs	r0, #7
 8005ad2:	f7fd fcfd 	bl	80034d0 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8005ad6:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <Sonar_measure+0x180>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8005adc:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <Sonar_measure+0x180>)
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	4b4c      	ldr	r3, [pc, #304]	; (8005c18 <Sonar_measure+0x180>)
 8005ae6:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8005ae8:	f7fb fc01 	bl	80012ee <millis>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4a4b      	ldr	r2, [pc, #300]	; (8005c1c <Sonar_measure+0x184>)
 8005af0:	6013      	str	r3, [r2, #0]
			break;
 8005af2:	e087      	b.n	8005c04 <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8005af4:	4b48      	ldr	r3, [pc, #288]	; (8005c18 <Sonar_measure+0x180>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f083 0301 	eor.w	r3, r3, #1
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d06a      	beq.n	8005bd8 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8005b02:	4b45      	ldr	r3, [pc, #276]	; (8005c18 <Sonar_measure+0x180>)
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <Sonar_measure+0x180>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d907      	bls.n	8005b1e <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8005b0e:	4b42      	ldr	r3, [pc, #264]	; (8005c18 <Sonar_measure+0x180>)
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <Sonar_measure+0x180>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	4a3f      	ldr	r2, [pc, #252]	; (8005c18 <Sonar_measure+0x180>)
 8005b1a:	60d3      	str	r3, [r2, #12]
 8005b1c:	e00e      	b.n	8005b3c <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8005b1e:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <Sonar_measure+0x180>)
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <Sonar_measure+0x180>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d208      	bcs.n	8005b3c <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <Sonar_measure+0x180>)
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	4b3a      	ldr	r3, [pc, #232]	; (8005c18 <Sonar_measure+0x180>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005b38:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <Sonar_measure+0x180>)
 8005b3a:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8005b3c:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <Sonar_measure+0x180>)
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fa fcf3 	bl	8000534 <__aeabi_ui2d>
 8005b4e:	a330      	add	r3, pc, #192	; (adr r3, 8005c10 <Sonar_measure+0x178>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa fd68 	bl	8000628 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f7fb f83a 	bl	8000bd8 <__aeabi_d2uiz>
 8005b64:	4603      	mov	r3, r0
 8005b66:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <Sonar_measure+0x180>)
 8005b68:	6153      	str	r3, [r2, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <Sonar_measure+0x188>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	3301      	adds	r3, #1
 8005b72:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8005b74:	79bb      	ldrb	r3, [r7, #6]
 8005b76:	2b0b      	cmp	r3, #11
 8005b78:	d101      	bne.n	8005b7e <Sonar_measure+0xe6>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8005b7e:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <Sonar_measure+0x180>)
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <Sonar_measure+0x188>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	b211      	sxth	r1, r2
 8005b88:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <Sonar_measure+0x18c>)
 8005b8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8005b8e:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <Sonar_measure+0x188>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <Sonar_measure+0x18c>)
 8005b94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <Sonar_measure+0x190>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <Sonar_measure+0x190>)
 8005ba2:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8005ba4:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <Sonar_measure+0x190>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	79ba      	ldrb	r2, [r7, #6]
 8005baa:	491e      	ldr	r1, [pc, #120]	; (8005c24 <Sonar_measure+0x18c>)
 8005bac:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <Sonar_measure+0x190>)
 8005bb4:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8005bb6:	79bb      	ldrb	r3, [r7, #6]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <Sonar_measure+0x188>)
 8005bba:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <Sonar_measure+0x190>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <Sonar_measure+0x194>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	08db      	lsrs	r3, r3, #3
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <Sonar_measure+0x180>)
 8005bca:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <Sonar_measure+0x180>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	705a      	strb	r2, [r3, #1]
				ret = true;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 8005bd6:	e014      	b.n	8005c02 <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8005bd8:	f7fb fb89 	bl	80012ee <millis>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <Sonar_measure+0x184>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b18      	cmp	r3, #24
 8005be6:	d90c      	bls.n	8005c02 <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <Sonar_measure+0x180>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	3301      	adds	r3, #1
 8005bee:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <Sonar_measure+0x180>)
 8005bf0:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <Sonar_measure+0x180>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <Sonar_measure+0x180>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	705a      	strb	r2, [r3, #1]
					ret = false;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	71fb      	strb	r3, [r7, #7]
			break;
 8005c02:	bf00      	nop
	}
	return ret;
 8005c04:	79fb      	ldrb	r3, [r7, #7]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	75f6fd22 	.word	0x75f6fd22
 8005c14:	3f919ce0 	.word	0x3f919ce0
 8005c18:	2000cbe8 	.word	0x2000cbe8
 8005c1c:	2000cc04 	.word	0x2000cc04
 8005c20:	2000cc08 	.word	0x2000cc08
 8005c24:	2000cc0c 	.word	0x2000cc0c
 8005c28:	2000cc24 	.word	0x2000cc24
 8005c2c:	cccccccd 	.word	0xcccccccd

08005c30 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	60da      	str	r2, [r3, #12]
 8005c46:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_TIM_Base_MspInit+0x94>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d133      	bne.n	8005cba <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_TIM_Base_MspInit+0x98>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <HAL_TIM_Base_MspInit+0x98>)
 8005c5c:	f043 0302 	orr.w	r3, r3, #2
 8005c60:	6413      	str	r3, [r2, #64]	; 0x40
 8005c62:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <HAL_TIM_Base_MspInit+0x98>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <HAL_TIM_Base_MspInit+0x98>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <HAL_TIM_Base_MspInit+0x98>)
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_TIM_Base_MspInit+0x98>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c96:	2300      	movs	r3, #0
 8005c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c9e:	f107 0314 	add.w	r3, r7, #20
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4809      	ldr	r0, [pc, #36]	; (8005ccc <HAL_TIM_Base_MspInit+0x9c>)
 8005ca6:	f007 fb19 	bl	800d2dc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005caa:	2200      	movs	r2, #0
 8005cac:	2101      	movs	r1, #1
 8005cae:	201d      	movs	r0, #29
 8005cb0:	f006 fed3 	bl	800ca5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005cb4:	201d      	movs	r0, #29
 8005cb6:	f006 feec 	bl	800ca92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3728      	adds	r7, #40	; 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40020400 	.word	0x40020400

08005cd0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7f1b      	ldrb	r3, [r3, #28]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d129      	bne.n	8005d34 <HAL_TIM_IC_CaptureCallback+0x64>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d124      	bne.n	8005d34 <HAL_TIM_IC_CaptureCallback+0x64>
 8005cea:	4b16      	ldr	r3, [pc, #88]	; (8005d44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d0a:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d16:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8005d18:	e00c      	b.n	8005d34 <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d20:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4a06      	ldr	r2, [pc, #24]	; (8005d40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2c:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40000400 	.word	0x40000400
 8005d44:	2000cbe8 	.word	0x2000cbe8
 8005d48:	40020400 	.word	0x40020400

08005d4c <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
  bool ret = true;
 8005d52:	2301      	movs	r3, #1
 8005d54:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	e03d      	b.n	8005dd8 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8005d5c:	4923      	ldr	r1, [pc, #140]	; (8005dec <spiInit+0xa0>)
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8005d6e:	491f      	ldr	r1, [pc, #124]	; (8005dec <spiInit+0xa0>)
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8005d82:	491a      	ldr	r1, [pc, #104]	; (8005dec <spiInit+0xa0>)
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	3302      	adds	r3, #2
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8005d96:	4915      	ldr	r1, [pc, #84]	; (8005dec <spiInit+0xa0>)
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	3304      	adds	r3, #4
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8005daa:	4910      	ldr	r1, [pc, #64]	; (8005dec <spiInit+0xa0>)
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	3310      	adds	r3, #16
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8005dbe:	490b      	ldr	r1, [pc, #44]	; (8005dec <spiInit+0xa0>)
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	330c      	adds	r3, #12
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	ddbe      	ble.n	8005d5c <spiInit+0x10>
  }

  return ret;
 8005dde:	78fb      	ldrb	r3, [r7, #3]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	2000cc28 	.word	0x2000cc28

08005df0 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8005dfe:	79fa      	ldrb	r2, [r7, #7]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4a23      	ldr	r2, [pc, #140]	; (8005e98 <spiBegin+0xa8>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <spiBegin+0x28>
 8005e14:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 8005e16:	e03a      	b.n	8005e8e <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <spiBegin+0xac>)
 8005e1c:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <spiBegin+0xb0>)
 8005e22:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <spiBegin+0xac>)
 8005e26:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <spiBegin+0xb4>)
 8005e28:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e2a:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <spiBegin+0xac>)
 8005e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e30:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e32:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <spiBegin+0xac>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <spiBegin+0xac>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <spiBegin+0xac>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <spiBegin+0xac>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <spiBegin+0xac>)
 8005e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e50:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e52:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <spiBegin+0xac>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e58:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <spiBegin+0xac>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <spiBegin+0xac>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <spiBegin+0xac>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <spiBegin+0xac>)
 8005e6c:	220a      	movs	r2, #10
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8005e70:	480a      	ldr	r0, [pc, #40]	; (8005e9c <spiBegin+0xac>)
 8005e72:	f009 fca1 	bl	800f7b8 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8005e76:	4809      	ldr	r0, [pc, #36]	; (8005e9c <spiBegin+0xac>)
 8005e78:	f009 fc3a 	bl	800f6f0 <HAL_SPI_Init>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <spiBegin+0x9c>
        p_spi->is_open = true;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	bf00      	nop
  }

  return ret;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	2000cc28 	.word	0x2000cc28
 8005e9c:	2000cc3c 	.word	0x2000cc3c
 8005ea0:	2000cc94 	.word	0x2000cc94
 8005ea4:	40013000 	.word	0x40013000

08005ea8 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	71fb      	strb	r3, [r7, #7]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005eb8:	79fa      	ldrb	r2, [r7, #7]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <spiSetDataMode+0xc4>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f083 0301 	eor.w	r3, r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d146      	bne.n	8005f64 <spiSetDataMode+0xbc>


  switch( dataMode )
 8005ed6:	79bb      	ldrb	r3, [r7, #6]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d844      	bhi.n	8005f66 <spiSetDataMode+0xbe>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <spiSetDataMode+0x3c>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f2d 	.word	0x08005f2d
 8005ef0:	08005f49 	.word	0x08005f49
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2200      	movs	r2, #0
 8005f02:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f009 fbf1 	bl	800f6f0 <HAL_SPI_Init>
      break;
 8005f0e:	e02a      	b.n	8005f66 <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f009 fbe3 	bl	800f6f0 <HAL_SPI_Init>
      break;
 8005f2a:	e01c      	b.n	8005f66 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2202      	movs	r2, #2
 8005f32:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f009 fbd5 	bl	800f6f0 <HAL_SPI_Init>
      break;
 8005f46:	e00e      	b.n	8005f66 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2201      	movs	r2, #1
 8005f56:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f009 fbc7 	bl	800f6f0 <HAL_SPI_Init>
      break;
 8005f62:	e000      	b.n	8005f66 <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8005f64:	bf00      	nop
  }
}
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	2000cc28 	.word	0x2000cc28

08005f70 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	460a      	mov	r2, r1
 8005f7a:	71fb      	strb	r3, [r7, #7]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005f80:	79fa      	ldrb	r2, [r7, #7]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4a10      	ldr	r2, [pc, #64]	; (8005fcc <spiSetBitWidth+0x5c>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f083 0301 	eor.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d111      	bne.n	8005fc2 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8005fa6:	79bb      	ldrb	r3, [r7, #6]
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d104      	bne.n	8005fb6 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb4:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f009 fb98 	bl	800f6f0 <HAL_SPI_Init>
 8005fc0:	e000      	b.n	8005fc4 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 8005fc2:	bf00      	nop
}
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2000cc28 	.word	0x2000cc28

08005fd0 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	460a      	mov	r2, r1
 8005fda:	71fb      	strb	r3, [r7, #7]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 8005fe0:	79fa      	ldrb	r2, [r7, #7]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <spiTransfer8+0x50>)
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f083 0301 	eor.w	r3, r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <spiTransfer8+0x32>
 8005ffe:	2300      	movs	r3, #0
 8006000:	e00a      	b.n	8006018 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6898      	ldr	r0, [r3, #8]
 8006006:	f107 020b 	add.w	r2, r7, #11
 800600a:	1db9      	adds	r1, r7, #6
 800600c:	230a      	movs	r3, #10
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2301      	movs	r3, #1
 8006012:	f009 fbf9 	bl	800f808 <HAL_SPI_TransmitReceive>

  return ret;
 8006016:	7afb      	ldrb	r3, [r7, #11]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000cc28 	.word	0x2000cc28

08006024 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a0c      	ldr	r2, [pc, #48]	; (8006070 <spiDmaTxStart+0x4c>)
 800603e:	4413      	add	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f083 0301 	eor.w	r3, r3, #1
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2200      	movs	r2, #0
 8006054:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	b292      	uxth	r2, r2
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	4618      	mov	r0, r3
 8006062:	f009 fd73 	bl	800fb4c <HAL_SPI_Transmit_DMA>
 8006066:	e000      	b.n	800606a <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8006068:	bf00      	nop
}
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	2000cc28 	.word	0x2000cc28

08006074 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff ffc8 	bl	8006024 <spiDmaTxStart>

  t_time = millis();
 8006094:	f7fb f92b 	bl	80012ee <millis>
 8006098:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <spiDmaTxTransfer+0x30>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e013      	b.n	80060cc <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f814 	bl	80060d4 <spiDmaTxIsDone>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 80060b2:	f7fb f91c 	bl	80012ee <millis>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d2f0      	bcs.n	80060a4 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
      break;
 80060c6:	e000      	b.n	80060ca <spiDmaTxTransfer+0x56>
      break;
 80060c8:	bf00      	nop
    }
  }

  return ret;
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80060de:	79fa      	ldrb	r2, [r7, #7]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a09      	ldr	r2, [pc, #36]	; (8006110 <spiDmaTxIsDone+0x3c>)
 80060ea:	4413      	add	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	f083 0301 	eor.w	r3, r3, #1
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <spiDmaTxIsDone+0x2c>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e001      	b.n	8006104 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	785b      	ldrb	r3, [r3, #1]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	2000cc28 	.word	0x2000cc28

08006114 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	6039      	str	r1, [r7, #0]
 800611e:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8006120:	79fa      	ldrb	r2, [r7, #7]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <spiAttachTxInterrupt+0x40>)
 800612c:	4413      	add	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f083 0301 	eor.w	r3, r3, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	e000      	b.n	8006148 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8006146:	bf00      	nop
}
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	2000cc28 	.word	0x2000cc28

08006158 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <HAL_SPI_ErrorCallback+0x28>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d102      	bne.n	8006174 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <HAL_SPI_ErrorCallback+0x28>)
 8006170:	2201      	movs	r2, #1
 8006172:	709a      	strb	r2, [r3, #2]
  }
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	2000cc28 	.word	0x2000cc28

08006184 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <HAL_SPI_TxCpltCallback+0x38>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d10b      	bne.n	80061b2 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <HAL_SPI_TxCpltCallback+0x38>)
 800619c:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4798      	blx	r3
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2000cc28 	.word	0x2000cc28

080061c0 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c8:	f107 0314 	add.w	r3, r7, #20
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a40      	ldr	r2, [pc, #256]	; (80062e0 <HAL_SPI_MspInit+0x120>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d179      	bne.n	80062d6 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	4a3e      	ldr	r2, [pc, #248]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 80061ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061f0:	6313      	str	r3, [r2, #48]	; 0x30
 80061f2:	4b3c      	ldr	r3, [pc, #240]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	4a37      	ldr	r2, [pc, #220]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 8006208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800620c:	6453      	str	r3, [r2, #68]	; 0x44
 800620e:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	4b31      	ldr	r3, [pc, #196]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	4a30      	ldr	r2, [pc, #192]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 8006224:	f043 0301 	orr.w	r3, r3, #1
 8006228:	6313      	str	r3, [r2, #48]	; 0x30
 800622a:	4b2e      	ldr	r3, [pc, #184]	; (80062e4 <HAL_SPI_MspInit+0x124>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006236:	23a0      	movs	r3, #160	; 0xa0
 8006238:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800623a:	2302      	movs	r3, #2
 800623c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006242:	2303      	movs	r3, #3
 8006244:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006246:	2305      	movs	r3, #5
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800624a:	f107 0314 	add.w	r3, r7, #20
 800624e:	4619      	mov	r1, r3
 8006250:	4825      	ldr	r0, [pc, #148]	; (80062e8 <HAL_SPI_MspInit+0x128>)
 8006252:	f007 f843 	bl	800d2dc <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 8006256:	4b25      	ldr	r3, [pc, #148]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 8006258:	4a25      	ldr	r2, [pc, #148]	; (80062f0 <HAL_SPI_MspInit+0x130>)
 800625a:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800625c:	4b23      	ldr	r3, [pc, #140]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 800625e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006262:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 800626c:	2200      	movs	r2, #0
 800626e:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 8006272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006276:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006278:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 800627a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800627e:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006280:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 8006282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006286:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006288:	4b18      	ldr	r3, [pc, #96]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 800628a:	2200      	movs	r2, #0
 800628c:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800628e:	4b17      	ldr	r3, [pc, #92]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 8006290:	2200      	movs	r2, #0
 8006292:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006294:	4b15      	ldr	r3, [pc, #84]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 8006296:	2200      	movs	r2, #0
 8006298:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800629a:	4814      	ldr	r0, [pc, #80]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 800629c:	f006 fc22 	bl	800cae4 <HAL_DMA_Init>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 80062a6:	f7fb f891 	bl	80013cc <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a0f      	ldr	r2, [pc, #60]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 80062ae:	649a      	str	r2, [r3, #72]	; 0x48
 80062b0:	4a0e      	ldr	r2, [pc, #56]	; (80062ec <HAL_SPI_MspInit+0x12c>)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	2023      	movs	r0, #35	; 0x23
 80062bc:	f006 fbcd 	bl	800ca5a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80062c0:	2023      	movs	r0, #35	; 0x23
 80062c2:	f006 fbe6 	bl	800ca92 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80062c6:	2200      	movs	r2, #0
 80062c8:	2105      	movs	r1, #5
 80062ca:	2044      	movs	r0, #68	; 0x44
 80062cc:	f006 fbc5 	bl	800ca5a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80062d0:	2044      	movs	r0, #68	; 0x44
 80062d2:	f006 fbde 	bl	800ca92 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80062d6:	bf00      	nop
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40013000 	.word	0x40013000
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40020000 	.word	0x40020000
 80062ec:	2000cc94 	.word	0x2000cc94
 80062f0:	40026488 	.word	0x40026488

080062f4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <HAL_SPI_MspDeInit+0x40>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d111      	bne.n	800632a <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <HAL_SPI_MspDeInit+0x44>)
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	4a0b      	ldr	r2, [pc, #44]	; (8006338 <HAL_SPI_MspDeInit+0x44>)
 800630c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006310:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8006312:	21a0      	movs	r1, #160	; 0xa0
 8006314:	4809      	ldr	r0, [pc, #36]	; (800633c <HAL_SPI_MspDeInit+0x48>)
 8006316:	f007 f965 	bl	800d5e4 <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631e:	4618      	mov	r0, r3
 8006320:	f006 fc8e 	bl	800cc40 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8006324:	2023      	movs	r0, #35	; 0x23
 8006326:	f006 fbc2 	bl	800caae <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40013000 	.word	0x40013000
 8006338:	40023800 	.word	0x40023800
 800633c:	40020000 	.word	0x40020000

08006340 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
	bool ret = true;
 8006346:	2301      	movs	r3, #1
 8006348:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <tdsInit+0xd0>)
 800634c:	2203      	movs	r2, #3
 800634e:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8006350:	4b2f      	ldr	r3, [pc, #188]	; (8006410 <tdsInit+0xd0>)
 8006352:	4a30      	ldr	r2, [pc, #192]	; (8006414 <tdsInit+0xd4>)
 8006354:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8006356:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <tdsInit+0xd0>)
 8006358:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800635c:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 800635e:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <tdsInit+0xd0>)
 8006360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006364:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8006372:	4b29      	ldr	r3, [pc, #164]	; (8006418 <tdsInit+0xd8>)
 8006374:	4a29      	ldr	r2, [pc, #164]	; (800641c <tdsInit+0xdc>)
 8006376:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006378:	4b27      	ldr	r3, [pc, #156]	; (8006418 <tdsInit+0xd8>)
 800637a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800637e:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006380:	4b25      	ldr	r3, [pc, #148]	; (8006418 <tdsInit+0xd8>)
 8006382:	2200      	movs	r2, #0
 8006384:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <tdsInit+0xd8>)
 8006388:	2201      	movs	r2, #1
 800638a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 800638c:	4b22      	ldr	r3, [pc, #136]	; (8006418 <tdsInit+0xd8>)
 800638e:	2201      	movs	r2, #1
 8006390:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <tdsInit+0xd8>)
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <tdsInit+0xd8>)
 800639c:	2200      	movs	r2, #0
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <tdsInit+0xd8>)
 80063a2:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <tdsInit+0xe0>)
 80063a4:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063a6:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <tdsInit+0xd8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 80063ac:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <tdsInit+0xd8>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80063b2:	4b19      	ldr	r3, [pc, #100]	; (8006418 <tdsInit+0xd8>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063ba:	4b17      	ldr	r3, [pc, #92]	; (8006418 <tdsInit+0xd8>)
 80063bc:	2201      	movs	r2, #1
 80063be:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80063c0:	4815      	ldr	r0, [pc, #84]	; (8006418 <tdsInit+0xd8>)
 80063c2:	f005 fd11 	bl	800bde8 <HAL_ADC_Init>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <tdsInit+0x90>
	  {
	    Error_Handler();
 80063cc:	f7fa fffe 	bl	80013cc <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80063d0:	2301      	movs	r3, #1
 80063d2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80063d4:	2301      	movs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80063d8:	2307      	movs	r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	4619      	mov	r1, r3
 80063e0:	480d      	ldr	r0, [pc, #52]	; (8006418 <tdsInit+0xd8>)
 80063e2:	f005 ff81 	bl	800c2e8 <HAL_ADC_ConfigChannel>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <tdsInit+0xb0>
	  {
	    Error_Handler();
 80063ec:	f7fa ffee 	bl	80013cc <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 80063f0:	2201      	movs	r2, #1
 80063f2:	490c      	ldr	r1, [pc, #48]	; (8006424 <tdsInit+0xe4>)
 80063f4:	4808      	ldr	r0, [pc, #32]	; (8006418 <tdsInit+0xd8>)
 80063f6:	f005 fe7b 	bl	800c0f0 <HAL_ADC_Start_DMA>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <tdsInit+0xc4>
	{
		Error_Handler();
 8006400:	f7fa ffe4 	bl	80013cc <Error_Handler>
	}

	return ret;
 8006404:	7dfb      	ldrb	r3, [r7, #23]

}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	2000cd9c 	.word	0x2000cd9c
 8006414:	41c80000 	.word	0x41c80000
 8006418:	2000ccf4 	.word	0x2000ccf4
 800641c:	40012000 	.word	0x40012000
 8006420:	0f000001 	.word	0x0f000001
 8006424:	2000cdac 	.word	0x2000cdac

08006428 <tds_measure>:
bool tds_measure(void)
{
 8006428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
	bool ret = true;
 8006430:	2301      	movs	r3, #1
 8006432:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8006434:	4b8e      	ldr	r3, [pc, #568]	; (8006670 <tds_measure+0x248>)
 8006436:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	edd3 7a03 	vldr	s15, [r3, #12]
 800644a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	4618      	mov	r0, r3
 800646a:	f7fa f885 	bl	8000578 <__aeabi_f2d>
 800646e:	a378      	add	r3, pc, #480	; (adr r3, 8006650 <tds_measure+0x228>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7fa f8d8 	bl	8000628 <__aeabi_dmul>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4614      	mov	r4, r2
 800647e:	461d      	mov	r5, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	4618      	mov	r0, r3
 8006486:	f7fa f877 	bl	8000578 <__aeabi_f2d>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	f7fa f8c9 	bl	8000628 <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4614      	mov	r4, r2
 800649c:	461d      	mov	r5, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fa f868 	bl	8000578 <__aeabi_f2d>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7fa f8ba 	bl	8000628 <__aeabi_dmul>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	461d      	mov	r5, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fa f859 	bl	8000578 <__aeabi_f2d>
 80064c6:	a364      	add	r3, pc, #400	; (adr r3, 8006658 <tds_measure+0x230>)
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f7fa f8ac 	bl	8000628 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4690      	mov	r8, r2
 80064d6:	4699      	mov	r9, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fa f84b 	bl	8000578 <__aeabi_f2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7fa f89d 	bl	8000628 <__aeabi_dmul>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7f9 fedf 	bl	80002b8 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4614      	mov	r4, r2
 8006500:	461d      	mov	r5, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	4618      	mov	r0, r3
 8006508:	f7fa f836 	bl	8000578 <__aeabi_f2d>
 800650c:	a354      	add	r3, pc, #336	; (adr r3, 8006660 <tds_measure+0x238>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f7fa f889 	bl	8000628 <__aeabi_dmul>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7f9 fecd 	bl	80002bc <__adddf3>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4614      	mov	r4, r2
 8006528:	461d      	mov	r5, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f7fa f822 	bl	8000578 <__aeabi_f2d>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4620      	mov	r0, r4
 800653a:	4629      	mov	r1, r5
 800653c:	f7fa f874 	bl	8000628 <__aeabi_dmul>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f7fa fb66 	bl	8000c18 <__aeabi_d2f>
 800654c:	4602      	mov	r2, r0
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa f80e 	bl	8000578 <__aeabi_f2d>
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fa f807 	bl	8000578 <__aeabi_f2d>
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	4b41      	ldr	r3, [pc, #260]	; (8006674 <tds_measure+0x24c>)
 8006570:	f7f9 fea2 	bl	80002b8 <__aeabi_dsub>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	a33a      	add	r3, pc, #232	; (adr r3, 8006668 <tds_measure+0x240>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7fa f851 	bl	8000628 <__aeabi_dmul>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4610      	mov	r0, r2
 800658c:	4619      	mov	r1, r3
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	4b39      	ldr	r3, [pc, #228]	; (8006678 <tds_measure+0x250>)
 8006594:	f7f9 fe92 	bl	80002bc <__adddf3>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4620      	mov	r0, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	f7fa f96c 	bl	800087c <__aeabi_ddiv>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4610      	mov	r0, r2
 80065aa:	4619      	mov	r1, r3
 80065ac:	f7fa fb34 	bl	8000c18 <__aeabi_d2f>
 80065b0:	4602      	mov	r2, r0
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80065bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80065c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <tds_measure+0x254>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	3301      	adds	r3, #1
 80065d2:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	2b0b      	cmp	r3, #11
 80065d8:	d101      	bne.n	80065de <tds_measure+0x1b6>
 80065da:	2300      	movs	r3, #0
 80065dc:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <tds_measure+0x254>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ec:	ee17 2a90 	vmov	r2, s15
 80065f0:	b211      	sxth	r1, r2
 80065f2:	4a23      	ldr	r2, [pc, #140]	; (8006680 <tds_measure+0x258>)
 80065f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <tds_measure+0x254>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a20      	ldr	r2, [pc, #128]	; (8006680 <tds_measure+0x258>)
 80065fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006602:	461a      	mov	r2, r3
 8006604:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <tds_measure+0x25c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4413      	add	r3, r2
 800660a:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <tds_measure+0x25c>)
 800660c:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 800660e:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <tds_measure+0x25c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	79fa      	ldrb	r2, [r7, #7]
 8006614:	491a      	ldr	r1, [pc, #104]	; (8006680 <tds_measure+0x258>)
 8006616:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <tds_measure+0x25c>)
 800661e:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <tds_measure+0x254>)
 8006624:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <tds_measure+0x25c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a17      	ldr	r2, [pc, #92]	; (8006688 <tds_measure+0x260>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8006640:	79bb      	ldrb	r3, [r7, #6]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800664c:	f3af 8000 	nop.w
 8006650:	a3d70a3d 	.word	0xa3d70a3d
 8006654:	4060ad70 	.word	0x4060ad70
 8006658:	1eb851ec 	.word	0x1eb851ec
 800665c:	406ffb85 	.word	0x406ffb85
 8006660:	b851eb85 	.word	0xb851eb85
 8006664:	408acb1e 	.word	0x408acb1e
 8006668:	47ae147b 	.word	0x47ae147b
 800666c:	3f947ae1 	.word	0x3f947ae1
 8006670:	2000cd9c 	.word	0x2000cd9c
 8006674:	40390000 	.word	0x40390000
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	2000cdc4 	.word	0x2000cdc4
 8006680:	2000cdc8 	.word	0x2000cdc8
 8006684:	2000cde0 	.word	0x2000cde0
 8006688:	cccccccd 	.word	0xcccccccd

0800668c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	609a      	str	r2, [r3, #8]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a3e      	ldr	r2, [pc, #248]	; (80067a4 <HAL_ADC_MspInit+0x118>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d175      	bne.n	800679a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	4a3c      	ldr	r2, [pc, #240]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066bc:	6313      	str	r3, [r2, #48]	; 0x30
 80066be:	4b3a      	ldr	r3, [pc, #232]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	4a35      	ldr	r2, [pc, #212]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d8:	6453      	str	r3, [r2, #68]	; 0x44
 80066da:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	4a2e      	ldr	r2, [pc, #184]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	6313      	str	r3, [r2, #48]	; 0x30
 80066f6:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <HAL_ADC_MspInit+0x11c>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006702:	2302      	movs	r3, #2
 8006704:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006706:	2303      	movs	r3, #3
 8006708:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800670e:	f107 0314 	add.w	r3, r7, #20
 8006712:	4619      	mov	r1, r3
 8006714:	4825      	ldr	r0, [pc, #148]	; (80067ac <HAL_ADC_MspInit+0x120>)
 8006716:	f006 fde1 	bl	800d2dc <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 800671a:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 800671c:	4a25      	ldr	r2, [pc, #148]	; (80067b4 <HAL_ADC_MspInit+0x128>)
 800671e:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006720:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006722:	2200      	movs	r2, #0
 8006724:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006726:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006728:	2200      	movs	r2, #0
 800672a:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800672c:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 800672e:	2200      	movs	r2, #0
 8006730:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006732:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006738:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800673a:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 800673c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006740:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006742:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006744:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006748:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 800674c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006750:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006754:	2200      	movs	r2, #0
 8006756:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 800675a:	2200      	movs	r2, #0
 800675c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800675e:	4814      	ldr	r0, [pc, #80]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006760:	f006 f9c0 	bl	800cae4 <HAL_DMA_Init>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 800676a:	f7fa fe2f 	bl	80013cc <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a0f      	ldr	r2, [pc, #60]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
 8006774:	4a0e      	ldr	r2, [pc, #56]	; (80067b0 <HAL_ADC_MspInit+0x124>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800677a:	2200      	movs	r2, #0
 800677c:	2106      	movs	r1, #6
 800677e:	2012      	movs	r0, #18
 8006780:	f006 f96b 	bl	800ca5a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006784:	2012      	movs	r0, #18
 8006786:	f006 f984 	bl	800ca92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 800678a:	2200      	movs	r2, #0
 800678c:	2106      	movs	r1, #6
 800678e:	2038      	movs	r0, #56	; 0x38
 8006790:	f006 f963 	bl	800ca5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006794:	2038      	movs	r0, #56	; 0x38
 8006796:	f006 f97c 	bl	800ca92 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800679a:	bf00      	nop
 800679c:	3728      	adds	r7, #40	; 0x28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40012000 	.word	0x40012000
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40020000 	.word	0x40020000
 80067b0:	2000cd3c 	.word	0x2000cd3c
 80067b4:	40026410 	.word	0x40026410

080067b8 <uartInit>:
#endif



bool uartInit(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	e007      	b.n	80067d4 <uartInit+0x1c>
  {
    is_open[i] = false;
 80067c4:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <uartInit+0x30>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3301      	adds	r3, #1
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	ddf4      	ble.n	80067c4 <uartInit+0xc>
  }


  return true;
 80067da:	2301      	movs	r3, #1
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	2000cde4 	.word	0x2000cde4

080067ec <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80067f8:	2300      	movs	r3, #0
 80067fa:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <uartOpen+0x1c>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d078      	beq.n	80068f8 <uartOpen+0x10c>
 8006806:	e0ef      	b.n	80069e8 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8006808:	4b7a      	ldr	r3, [pc, #488]	; (80069f4 <uartOpen+0x208>)
 800680a:	4a7b      	ldr	r2, [pc, #492]	; (80069f8 <uartOpen+0x20c>)
 800680c:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 800680e:	4a79      	ldr	r2, [pc, #484]	; (80069f4 <uartOpen+0x208>)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8006814:	4b77      	ldr	r3, [pc, #476]	; (80069f4 <uartOpen+0x208>)
 8006816:	2200      	movs	r2, #0
 8006818:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 800681a:	4b76      	ldr	r3, [pc, #472]	; (80069f4 <uartOpen+0x208>)
 800681c:	2200      	movs	r2, #0
 800681e:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8006820:	4b74      	ldr	r3, [pc, #464]	; (80069f4 <uartOpen+0x208>)
 8006822:	2200      	movs	r2, #0
 8006824:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8006826:	4b73      	ldr	r3, [pc, #460]	; (80069f4 <uartOpen+0x208>)
 8006828:	220c      	movs	r2, #12
 800682a:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 800682c:	4b71      	ldr	r3, [pc, #452]	; (80069f4 <uartOpen+0x208>)
 800682e:	2200      	movs	r2, #0
 8006830:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8006832:	4b70      	ldr	r3, [pc, #448]	; (80069f4 <uartOpen+0x208>)
 8006834:	2200      	movs	r2, #0
 8006836:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8006838:	486e      	ldr	r0, [pc, #440]	; (80069f4 <uartOpen+0x208>)
 800683a:	f00a fb06 	bl	8010e4a <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <uartOpen+0x210>)
 8006844:	4413      	add	r3, r2
 8006846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800684a:	496d      	ldr	r1, [pc, #436]	; (8006a00 <uartOpen+0x214>)
 800684c:	4618      	mov	r0, r3
 800684e:	f7fa ff88 	bl	8001762 <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	4b6b      	ldr	r3, [pc, #428]	; (8006a04 <uartOpen+0x218>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	4a6a      	ldr	r2, [pc, #424]	; (8006a04 <uartOpen+0x218>)
 800685c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006860:	6313      	str	r3, [r2, #48]	; 0x30
 8006862:	4b68      	ldr	r3, [pc, #416]	; (8006a04 <uartOpen+0x218>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800686e:	2200      	movs	r2, #0
 8006870:	2104      	movs	r1, #4
 8006872:	203a      	movs	r0, #58	; 0x3a
 8006874:	f006 f8f1 	bl	800ca5a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006878:	203a      	movs	r0, #58	; 0x3a
 800687a:	f006 f90a 	bl	800ca92 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800687e:	2200      	movs	r2, #0
 8006880:	2104      	movs	r1, #4
 8006882:	2046      	movs	r0, #70	; 0x46
 8006884:	f006 f8e9 	bl	800ca5a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006888:	2046      	movs	r0, #70	; 0x46
 800688a:	f006 f902 	bl	800ca92 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 800688e:	4859      	ldr	r0, [pc, #356]	; (80069f4 <uartOpen+0x208>)
 8006890:	f00a fa8e 	bl	8010db0 <HAL_UART_Init>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <uartOpen+0xb4>
        {
          ret = false;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 800689e:	e0a3      	b.n	80069e8 <uartOpen+0x1fc>
          ret = true;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	4a58      	ldr	r2, [pc, #352]	; (8006a08 <uartOpen+0x21c>)
 80068a8:	2101      	movs	r1, #1
 80068aa:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80068ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b0:	4953      	ldr	r1, [pc, #332]	; (8006a00 <uartOpen+0x214>)
 80068b2:	4850      	ldr	r0, [pc, #320]	; (80069f4 <uartOpen+0x208>)
 80068b4:	f00a fb8e 	bl	8010fd4 <HAL_UART_Receive_DMA>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <uartOpen+0xd6>
            ret = false;
 80068be:	2300      	movs	r3, #0
 80068c0:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	4a4d      	ldr	r2, [pc, #308]	; (80069fc <uartOpen+0x210>)
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	4413      	add	r3, r2
 80068ca:	3308      	adds	r3, #8
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	4b4f      	ldr	r3, [pc, #316]	; (8006a0c <uartOpen+0x220>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	1a8a      	subs	r2, r1, r2
 80068d8:	4948      	ldr	r1, [pc, #288]	; (80069fc <uartOpen+0x210>)
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	440b      	add	r3, r1
 80068de:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80068e0:	79fa      	ldrb	r2, [r7, #7]
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	4945      	ldr	r1, [pc, #276]	; (80069fc <uartOpen+0x210>)
 80068e6:	0112      	lsls	r2, r2, #4
 80068e8:	440a      	add	r2, r1
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	4943      	ldr	r1, [pc, #268]	; (80069fc <uartOpen+0x210>)
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	440b      	add	r3, r1
 80068f2:	3304      	adds	r3, #4
 80068f4:	601a      	str	r2, [r3, #0]
      break;
 80068f6:	e077      	b.n	80069e8 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80068f8:	4b3e      	ldr	r3, [pc, #248]	; (80069f4 <uartOpen+0x208>)
 80068fa:	4a3f      	ldr	r2, [pc, #252]	; (80069f8 <uartOpen+0x20c>)
 80068fc:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80068fe:	4a3d      	ldr	r2, [pc, #244]	; (80069f4 <uartOpen+0x208>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006904:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <uartOpen+0x208>)
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800690a:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <uartOpen+0x208>)
 800690c:	2200      	movs	r2, #0
 800690e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8006910:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <uartOpen+0x208>)
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8006916:	4b37      	ldr	r3, [pc, #220]	; (80069f4 <uartOpen+0x208>)
 8006918:	220c      	movs	r2, #12
 800691a:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800691c:	4b35      	ldr	r3, [pc, #212]	; (80069f4 <uartOpen+0x208>)
 800691e:	2200      	movs	r2, #0
 8006920:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006922:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <uartOpen+0x208>)
 8006924:	2200      	movs	r2, #0
 8006926:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8006928:	4832      	ldr	r0, [pc, #200]	; (80069f4 <uartOpen+0x208>)
 800692a:	f00a fa8e 	bl	8010e4a <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	4a32      	ldr	r2, [pc, #200]	; (80069fc <uartOpen+0x210>)
 8006934:	4413      	add	r3, r2
 8006936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800693a:	4931      	ldr	r1, [pc, #196]	; (8006a00 <uartOpen+0x214>)
 800693c:	4618      	mov	r0, r3
 800693e:	f7fa ff10 	bl	8001762 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	4b2f      	ldr	r3, [pc, #188]	; (8006a04 <uartOpen+0x218>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	4a2e      	ldr	r2, [pc, #184]	; (8006a04 <uartOpen+0x218>)
 800694c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006950:	6313      	str	r3, [r2, #48]	; 0x30
 8006952:	4b2c      	ldr	r3, [pc, #176]	; (8006a04 <uartOpen+0x218>)
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800695e:	2200      	movs	r2, #0
 8006960:	2104      	movs	r1, #4
 8006962:	203a      	movs	r0, #58	; 0x3a
 8006964:	f006 f879 	bl	800ca5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006968:	203a      	movs	r0, #58	; 0x3a
 800696a:	f006 f892 	bl	800ca92 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800696e:	2200      	movs	r2, #0
 8006970:	2104      	movs	r1, #4
 8006972:	2046      	movs	r0, #70	; 0x46
 8006974:	f006 f871 	bl	800ca5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006978:	2046      	movs	r0, #70	; 0x46
 800697a:	f006 f88a 	bl	800ca92 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 800697e:	481d      	ldr	r0, [pc, #116]	; (80069f4 <uartOpen+0x208>)
 8006980:	f00a fa16 	bl	8010db0 <HAL_UART_Init>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <uartOpen+0x1a4>
      {
        ret = false;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 800698e:	e02a      	b.n	80069e6 <uartOpen+0x1fa>
        ret = true;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <uartOpen+0x21c>)
 8006998:	2101      	movs	r1, #1
 800699a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800699c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069a0:	4917      	ldr	r1, [pc, #92]	; (8006a00 <uartOpen+0x214>)
 80069a2:	4814      	ldr	r0, [pc, #80]	; (80069f4 <uartOpen+0x208>)
 80069a4:	f00a fb16 	bl	8010fd4 <HAL_UART_Receive_DMA>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <uartOpen+0x1c6>
          ret = false;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	4a11      	ldr	r2, [pc, #68]	; (80069fc <uartOpen+0x210>)
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	4413      	add	r3, r2
 80069ba:	3308      	adds	r3, #8
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <uartOpen+0x220>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	1a8a      	subs	r2, r1, r2
 80069c8:	490c      	ldr	r1, [pc, #48]	; (80069fc <uartOpen+0x210>)
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	440b      	add	r3, r1
 80069ce:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80069d0:	79fa      	ldrb	r2, [r7, #7]
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	4909      	ldr	r1, [pc, #36]	; (80069fc <uartOpen+0x210>)
 80069d6:	0112      	lsls	r2, r2, #4
 80069d8:	440a      	add	r2, r1
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	4907      	ldr	r1, [pc, #28]	; (80069fc <uartOpen+0x210>)
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	440b      	add	r3, r1
 80069e2:	3304      	adds	r3, #4
 80069e4:	601a      	str	r2, [r3, #0]
      break;
 80069e6:	bf00      	nop
  }

  return ret;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000cef8 	.word	0x2000cef8
 80069f8:	40011000 	.word	0x40011000
 80069fc:	2000cde8 	.word	0x2000cde8
 8006a00:	2000cdf8 	.word	0x2000cdf8
 8006a04:	40023800 	.word	0x40023800
 8006a08:	2000cde4 	.word	0x2000cde4
 8006a0c:	2000cf98 	.word	0x2000cf98

08006a10 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <uartAvailable+0x1a>
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d018      	beq.n	8006a5a <uartAvailable+0x4a>
 8006a28:	e02f      	b.n	8006a8a <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <uartAvailable+0x84>)
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	4413      	add	r3, r2
 8006a32:	3308      	adds	r3, #8
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <uartAvailable+0x88>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	1a8a      	subs	r2, r1, r2
 8006a40:	4914      	ldr	r1, [pc, #80]	; (8006a94 <uartAvailable+0x84>)
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	440b      	add	r3, r1
 8006a46:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	4a11      	ldr	r2, [pc, #68]	; (8006a94 <uartAvailable+0x84>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fa fede 	bl	8001812 <qbufferAvailable>
 8006a56:	60f8      	str	r0, [r7, #12]
      break;
 8006a58:	e017      	b.n	8006a8a <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <uartAvailable+0x84>)
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	4413      	add	r3, r2
 8006a62:	3308      	adds	r3, #8
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <uartAvailable+0x88>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	1a8a      	subs	r2, r1, r2
 8006a70:	4908      	ldr	r1, [pc, #32]	; (8006a94 <uartAvailable+0x84>)
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	440b      	add	r3, r1
 8006a76:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	4a05      	ldr	r2, [pc, #20]	; (8006a94 <uartAvailable+0x84>)
 8006a7e:	4413      	add	r3, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fa fec6 	bl	8001812 <qbufferAvailable>
 8006a86:	60f8      	str	r0, [r7, #12]
      break;
 8006a88:	bf00      	nop
  }

  return ret;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	2000cde8 	.word	0x2000cde8
 8006a98:	2000cf98 	.word	0x2000cf98

08006a9c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <uartRead+0x1a>
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d008      	beq.n	8006ac6 <uartRead+0x2a>
 8006ab4:	e00f      	b.n	8006ad6 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8006ab6:	f107 030f 	add.w	r3, r7, #15
 8006aba:	2201      	movs	r2, #1
 8006abc:	4619      	mov	r1, r3
 8006abe:	4808      	ldr	r0, [pc, #32]	; (8006ae0 <uartRead+0x44>)
 8006ac0:	f7fa fe6a 	bl	8001798 <qbufferRead>
      break;
 8006ac4:	e007      	b.n	8006ad6 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006ac6:	f107 030f 	add.w	r3, r7, #15
 8006aca:	2201      	movs	r2, #1
 8006acc:	4619      	mov	r1, r3
 8006ace:	4805      	ldr	r0, [pc, #20]	; (8006ae4 <uartRead+0x48>)
 8006ad0:	f7fa fe62 	bl	8001798 <qbufferRead>
      break;
 8006ad4:	bf00      	nop
  }

  return ret;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	2000cde8 	.word	0x2000cde8
 8006ae4:	2000cdf8 	.word	0x2000cdf8

08006ae8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <uartWrite+0x1e>
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d00f      	beq.n	8006b24 <uartWrite+0x3c>
 8006b04:	e020      	b.n	8006b48 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	2364      	movs	r3, #100	; 0x64
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4811      	ldr	r0, [pc, #68]	; (8006b54 <uartWrite+0x6c>)
 8006b10:	f00a f9c7 	bl	8010ea2 <HAL_UART_Transmit>
 8006b14:	4603      	mov	r3, r0
 8006b16:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8006b18:	7cfb      	ldrb	r3, [r7, #19]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d111      	bne.n	8006b42 <uartWrite+0x5a>
        {
          ret = length;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	617b      	str	r3, [r7, #20]
        }
      break;
 8006b22:	e00e      	b.n	8006b42 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	2364      	movs	r3, #100	; 0x64
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4809      	ldr	r0, [pc, #36]	; (8006b54 <uartWrite+0x6c>)
 8006b2e:	f00a f9b8 	bl	8010ea2 <HAL_UART_Transmit>
 8006b32:	4603      	mov	r3, r0
 8006b34:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <uartWrite+0x5e>
      {
        ret = length;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006b40:	e001      	b.n	8006b46 <uartWrite+0x5e>
      break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <uartWrite+0x60>
      break;
 8006b46:	bf00      	nop
  }

  return ret;
 8006b48:	697b      	ldr	r3, [r7, #20]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	2000cef8 	.word	0x2000cef8

08006b58 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006b58:	b40e      	push	{r1, r2, r3}
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b0c7      	sub	sp, #284	; 0x11c
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	4602      	mov	r2, r0
 8006b62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b66:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006b6a:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8006b6c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006b70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b78:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8006b7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b82:	f107 0010 	add.w	r0, r7, #16
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b90:	f00d fd04 	bl	801459c <vsniprintf>
 8006b94:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8006b98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006b9c:	f107 0110 	add.w	r1, r7, #16
 8006ba0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ba4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff ff9c 	bl	8006ae8 <uartWrite>
 8006bb0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8006bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc4:	b003      	add	sp, #12
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	; 0x28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	609a      	str	r2, [r3, #8]
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a5b      	ldr	r2, [pc, #364]	; (8006d7c <HAL_UART_MspInit+0x18c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f040 80b0 	bne.w	8006d74 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	4b59      	ldr	r3, [pc, #356]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1c:	4a58      	ldr	r2, [pc, #352]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c1e:	f043 0310 	orr.w	r3, r3, #16
 8006c22:	6453      	str	r3, [r2, #68]	; 0x44
 8006c24:	4b56      	ldr	r3, [pc, #344]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	4b52      	ldr	r3, [pc, #328]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	4a51      	ldr	r2, [pc, #324]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c40:	4b4f      	ldr	r3, [pc, #316]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	4b4b      	ldr	r3, [pc, #300]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	4a4a      	ldr	r2, [pc, #296]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c56:	f043 0302 	orr.w	r3, r3, #2
 8006c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5c:	4b48      	ldr	r3, [pc, #288]	; (8006d80 <HAL_UART_MspInit+0x190>)
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c6c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c76:	2303      	movs	r3, #3
 8006c78:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c7a:	2307      	movs	r3, #7
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c7e:	f107 0314 	add.w	r3, r7, #20
 8006c82:	4619      	mov	r1, r3
 8006c84:	483f      	ldr	r0, [pc, #252]	; (8006d84 <HAL_UART_MspInit+0x194>)
 8006c86:	f006 fb29 	bl	800d2dc <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c96:	2303      	movs	r3, #3
 8006c98:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c9a:	2307      	movs	r3, #7
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c9e:	f107 0314 	add.w	r3, r7, #20
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4838      	ldr	r0, [pc, #224]	; (8006d88 <HAL_UART_MspInit+0x198>)
 8006ca6:	f006 fb19 	bl	800d2dc <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006caa:	4b38      	ldr	r3, [pc, #224]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cac:	4a38      	ldr	r2, [pc, #224]	; (8006d90 <HAL_UART_MspInit+0x1a0>)
 8006cae:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006cb0:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cb6:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cb8:	4b34      	ldr	r3, [pc, #208]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cba:	2240      	movs	r2, #64	; 0x40
 8006cbc:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cbe:	4b33      	ldr	r3, [pc, #204]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cc4:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cca:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ccc:	4b2f      	ldr	r3, [pc, #188]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cd2:	4b2e      	ldr	r3, [pc, #184]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006cd8:	4b2c      	ldr	r3, [pc, #176]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006cde:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ce4:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006cea:	4828      	ldr	r0, [pc, #160]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cec:	f005 fefa 	bl	800cae4 <HAL_DMA_Init>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8006cf6:	f7fa fb69 	bl	80013cc <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_UART_MspInit+0x19c>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d08:	4a23      	ldr	r2, [pc, #140]	; (8006d98 <HAL_UART_MspInit+0x1a8>)
 8006d0a:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006d0c:	4b21      	ldr	r3, [pc, #132]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d12:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d14:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d1a:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d26:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d28:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d2e:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006d34:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d3a:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d3c:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d42:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006d48:	4812      	ldr	r0, [pc, #72]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d4a:	f005 fecb 	bl	800cae4 <HAL_DMA_Init>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8006d54:	f7fa fb3a 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a0e      	ldr	r2, [pc, #56]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <HAL_UART_MspInit+0x1a4>)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006d64:	2200      	movs	r2, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	2025      	movs	r0, #37	; 0x25
 8006d6a:	f005 fe76 	bl	800ca5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006d6e:	2025      	movs	r0, #37	; 0x25
 8006d70:	f005 fe8f 	bl	800ca92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006d74:	bf00      	nop
 8006d76:	3728      	adds	r7, #40	; 0x28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40011000 	.word	0x40011000
 8006d80:	40023800 	.word	0x40023800
 8006d84:	40020000 	.word	0x40020000
 8006d88:	40020400 	.word	0x40020400
 8006d8c:	2000cf38 	.word	0x2000cf38
 8006d90:	400264b8 	.word	0x400264b8
 8006d94:	2000cf98 	.word	0x2000cf98
 8006d98:	40026440 	.word	0x40026440

08006d9c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a11      	ldr	r2, [pc, #68]	; (8006df0 <HAL_UART_MspDeInit+0x54>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d11b      	bne.n	8006de6 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006dae:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <HAL_UART_MspDeInit+0x58>)
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	4a10      	ldr	r2, [pc, #64]	; (8006df4 <HAL_UART_MspDeInit+0x58>)
 8006db4:	f023 0310 	bic.w	r3, r3, #16
 8006db8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dbe:	480e      	ldr	r0, [pc, #56]	; (8006df8 <HAL_UART_MspDeInit+0x5c>)
 8006dc0:	f006 fc10 	bl	800d5e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006dc4:	2140      	movs	r1, #64	; 0x40
 8006dc6:	480d      	ldr	r0, [pc, #52]	; (8006dfc <HAL_UART_MspDeInit+0x60>)
 8006dc8:	f006 fc0c 	bl	800d5e4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f005 ff35 	bl	800cc40 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f005 ff30 	bl	800cc40 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006de0:	2025      	movs	r0, #37	; 0x25
 8006de2:	f005 fe64 	bl	800caae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	40011000 	.word	0x40011000
 8006df4:	40023800 	.word	0x40023800
 8006df8:	40020000 	.word	0x40020000
 8006dfc:	40020400 	.word	0x40020400

08006e00 <draw_fan_status>:
#include "ui_common.h"
#include "image.h"
#include "lcd.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	4603      	mov	r3, r0
 8006e08:	80fb      	strh	r3, [r7, #6]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	80bb      	strh	r3, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 127;
 8006e12:	237f      	movs	r3, #127	; 0x7f
 8006e14:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	2b7e      	cmp	r3, #126	; 0x7e
 8006e1a:	d910      	bls.n	8006e3e <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d006      	beq.n	8006e30 <draw_fan_status+0x30>
 8006e22:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <draw_fan_status+0x90>)
 8006e24:	f107 030c 	add.w	r3, r7, #12
 8006e28:	6810      	ldr	r0, [r2, #0]
 8006e2a:	6851      	ldr	r1, [r2, #4]
 8006e2c:	c303      	stmia	r3!, {r0, r1}
 8006e2e:	e020      	b.n	8006e72 <draw_fan_status+0x72>
 8006e30:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <draw_fan_status+0x94>)
 8006e32:	f107 030c 	add.w	r3, r7, #12
 8006e36:	6810      	ldr	r0, [r2, #0]
 8006e38:	6851      	ldr	r1, [r2, #4]
 8006e3a:	c303      	stmia	r3!, {r0, r1}
 8006e3c:	e019      	b.n	8006e72 <draw_fan_status+0x72>
  }
  else if (fanSpeed > 0)
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <draw_fan_status+0x66>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <draw_fan_status+0x58>
 8006e4a:	4a11      	ldr	r2, [pc, #68]	; (8006e90 <draw_fan_status+0x90>)
 8006e4c:	f107 030c 	add.w	r3, r7, #12
 8006e50:	6810      	ldr	r0, [r2, #0]
 8006e52:	6851      	ldr	r1, [r2, #4]
 8006e54:	c303      	stmia	r3!, {r0, r1}
 8006e56:	e00c      	b.n	8006e72 <draw_fan_status+0x72>
 8006e58:	4a0e      	ldr	r2, [pc, #56]	; (8006e94 <draw_fan_status+0x94>)
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	6810      	ldr	r0, [r2, #0]
 8006e60:	6851      	ldr	r1, [r2, #4]
 8006e62:	c303      	stmia	r3!, {r0, r1}
 8006e64:	e005      	b.n	8006e72 <draw_fan_status+0x72>
  }
  else
  {
    image = Fan0_32x32x4;
 8006e66:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <draw_fan_status+0x94>)
 8006e68:	f107 030c 	add.w	r3, r7, #12
 8006e6c:	6810      	ldr	r0, [r2, #0]
 8006e6e:	6851      	ldr	r1, [r2, #4]
 8006e70:	c303      	stmia	r3!, {r0, r1}
  }
  lcdDrawBufferImage(0, 0, image.width, image.height, image.data);
 8006e72:	8a3a      	ldrh	r2, [r7, #16]
 8006e74:	8a79      	ldrh	r1, [r7, #18]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f7fd f940 	bl	8004104 <lcdDrawBufferImage>
  lcdRequestDraw();
 8006e84:	f7fc ff9c 	bl	8003dc0 <lcdRequestDraw>
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	08021148 	.word	0x08021148
 8006e94:	08021140 	.word	0x08021140

08006e98 <get_blink>:

bool get_blink() {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 8006e9e:	f7fa fa26 	bl	80012ee <millis>
 8006ea2:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 8006ea4:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <get_blink+0x44>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	db0a      	blt.n	8006ec6 <get_blink+0x2e>
    blink ^= 0xFF;
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <get_blink+0x48>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <get_blink+0x48>)
 8006eba:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 8006ec2:	4a06      	ldr	r2, [pc, #24]	; (8006edc <get_blink+0x44>)
 8006ec4:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <get_blink+0x48>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bf14      	ite	ne
 8006ece:	2301      	movne	r3, #1
 8006ed0:	2300      	moveq	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	2000cff8 	.word	0x2000cff8
 8006ee0:	2000cffc 	.word	0x2000cffc

08006ee4 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006eee:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <SD_CheckStatus+0x80>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8006ef4:	f7fe f986 	bl	8005204 <sdIsInit>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f083 0301 	eor.w	r3, r3, #1
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8006f04:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f043 0301 	orr.w	r3, r3, #1
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f12:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8006f14:	f7fe f982 	bl	800521c <sdIsDetected>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f083 0301 	eor.w	r3, r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f043 0302 	orr.w	r3, r3, #2
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f32:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8006f34:	200a      	movs	r0, #10
 8006f36:	f7fe f9f5 	bl	8005324 <sdIsReady>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f083 0301 	eor.w	r3, r3, #1
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d007      	beq.n	8006f56 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8006f46:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006f56:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <SD_CheckStatus+0x80>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b2db      	uxtb	r3, r3
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	2000009c 	.word	0x2000009c

08006f68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006f72:	4b0d      	ldr	r3, [pc, #52]	; (8006fa8 <SD_initialize+0x40>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8006f78:	f7fe f944 	bl	8005204 <sdIsInit>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f083 0301 	eor.w	r3, r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <SD_initialize+0x40>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <SD_initialize+0x40>)
 8006f96:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006f98:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <SD_initialize+0x40>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b2db      	uxtb	r3, r3
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000009c 	.word	0x2000009c

08006fac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ff93 	bl	8006ee4 <SD_CheckStatus>
 8006fbe:	4603      	mov	r3, r0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8006fdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fe f9bd 	bl	8005364 <sdReadBlocks>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <SD_read+0x2c>
  {
    res = RES_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af00      	add	r7, sp, #0
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4603      	mov	r3, r0
 800700c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8007012:	f242 7310 	movw	r3, #10000	; 0x2710
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe f9ec 	bl	80053f8 <sdWriteBlocks>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <SD_write+0x2c>
  {
    res = RES_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08c      	sub	sp, #48	; 0x30
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	603a      	str	r2, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
 8007040:	460b      	mov	r3, r1
 8007042:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800704a:	4b25      	ldr	r3, [pc, #148]	; (80070e0 <SD_ioctl+0xac>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <SD_ioctl+0x28>
 8007058:	2303      	movs	r3, #3
 800705a:	e03c      	b.n	80070d6 <SD_ioctl+0xa2>

  switch (cmd)
 800705c:	79bb      	ldrb	r3, [r7, #6]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d834      	bhi.n	80070cc <SD_ioctl+0x98>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <SD_ioctl+0x34>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	08007079 	.word	0x08007079
 800706c:	08007081 	.word	0x08007081
 8007070:	08007099 	.word	0x08007099
 8007074:	080070b3 	.word	0x080070b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800707e:	e028      	b.n	80070d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe f8df 	bl	8005248 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 800708a:	6a3a      	ldr	r2, [r7, #32]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007096:	e01c      	b.n	80070d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8007098:	f107 0308 	add.w	r3, r7, #8
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe f8d3 	bl	8005248 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80070b0:	e00f      	b.n	80070d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 80070b2:	f107 0308 	add.w	r3, r7, #8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe f8c6 	bl	8005248 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	0a5a      	lsrs	r2, r3, #9
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80070ca:	e002      	b.n	80070d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80070d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3730      	adds	r7, #48	; 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	2000009c 	.word	0x2000009c

080070e4 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	3306      	adds	r3, #6
 80070f2:	2220      	movs	r2, #32
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f00b fd94 	bl	8012c24 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <hanFontLoad+0x2e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b0a      	cmp	r3, #10
 8007110:	d107      	bne.n	8007122 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2204      	movs	r2, #4
 8007116:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2201      	movs	r2, #1
 800711c:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 800711e:	2304      	movs	r3, #4
 8007120:	e03b      	b.n	800719a <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b25b      	sxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	da2b      	bge.n	8007184 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	041a      	lsls	r2, r3, #16
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3301      	adds	r3, #1
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	4313      	orrs	r3, r2
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	3202      	adds	r2, #2
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <hanFontLoad+0xc0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d30e      	bcc.n	800716c <hanFontLoad+0x88>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <hanFontLoad+0xc4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d80a      	bhi.n	800716c <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2203      	movs	r2, #3
 8007160:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f91f 	bl	80073a8 <hanUniFontLoad>
 800716a:	e009      	b.n	8007180 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2201      	movs	r2, #1
 8007170:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2202      	movs	r2, #2
 8007176:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f816 	bl	80071ac <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8007180:	2301      	movs	r3, #1
 8007182:	e00a      	b.n	800719a <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2202      	movs	r2, #2
 8007188:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2201      	movs	r2, #1
 800718e:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa30 	bl	80075f8 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8007198:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	00eab080 	.word	0x00eab080
 80071a8:	00ed9fb0 	.word	0x00ed9fb0

080071ac <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	b21a      	sxth	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3301      	adds	r3, #1
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	b21b      	sxth	r3, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b21b      	sxth	r3, r3
 80071ca:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 80071cc:	89bb      	ldrh	r3, [r7, #12]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fa3c 	bl	800764c <hanCnvCodeWan2Johab>
 80071d4:	4603      	mov	r3, r0
 80071d6:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 80071d8:	89bb      	ldrh	r3, [r7, #12]
 80071da:	0a9b      	lsrs	r3, r3, #10
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	4b63      	ldr	r3, [pc, #396]	; (8007374 <hanWanFontLoad+0x1c8>)
 80071e6:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 80071e8:	89bb      	ldrh	r3, [r7, #12]
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f003 031f 	and.w	r3, r3, #31
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	4b60      	ldr	r3, [pc, #384]	; (8007378 <hanWanFontLoad+0x1cc>)
 80071f6:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 80071f8:	89bb      	ldrh	r3, [r7, #12]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	b29a      	uxth	r2, r3
 8007200:	4b5e      	ldr	r3, [pc, #376]	; (800737c <hanWanFontLoad+0x1d0>)
 8007202:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8007204:	4b5b      	ldr	r3, [pc, #364]	; (8007374 <hanWanFontLoad+0x1c8>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	4b5d      	ldr	r3, [pc, #372]	; (8007380 <hanWanFontLoad+0x1d4>)
 800720c:	5c9b      	ldrb	r3, [r3, r2]
 800720e:	b29a      	uxth	r2, r3
 8007210:	4b58      	ldr	r3, [pc, #352]	; (8007374 <hanWanFontLoad+0x1c8>)
 8007212:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8007214:	4b58      	ldr	r3, [pc, #352]	; (8007378 <hanWanFontLoad+0x1cc>)
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	4b5a      	ldr	r3, [pc, #360]	; (8007384 <hanWanFontLoad+0x1d8>)
 800721c:	5c9b      	ldrb	r3, [r3, r2]
 800721e:	b29a      	uxth	r2, r3
 8007220:	4b55      	ldr	r3, [pc, #340]	; (8007378 <hanWanFontLoad+0x1cc>)
 8007222:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8007224:	4b55      	ldr	r3, [pc, #340]	; (800737c <hanWanFontLoad+0x1d0>)
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	4b57      	ldr	r3, [pc, #348]	; (8007388 <hanWanFontLoad+0x1dc>)
 800722c:	5c9b      	ldrb	r3, [r3, r2]
 800722e:	b29a      	uxth	r2, r3
 8007230:	4b52      	ldr	r3, [pc, #328]	; (800737c <hanWanFontLoad+0x1d0>)
 8007232:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007234:	4b51      	ldr	r3, [pc, #324]	; (800737c <hanWanFontLoad+0x1d0>)
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <hanWanFontLoad+0x9e>
 800723c:	4b4e      	ldr	r3, [pc, #312]	; (8007378 <hanWanFontLoad+0x1cc>)
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	4b52      	ldr	r3, [pc, #328]	; (800738c <hanWanFontLoad+0x1e0>)
 8007244:	5c9b      	ldrb	r3, [r3, r2]
 8007246:	b29b      	uxth	r3, r3
 8007248:	e005      	b.n	8007256 <hanWanFontLoad+0xaa>
 800724a:	4b4b      	ldr	r3, [pc, #300]	; (8007378 <hanWanFontLoad+0x1cc>)
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	4b4f      	ldr	r3, [pc, #316]	; (8007390 <hanWanFontLoad+0x1e4>)
 8007252:	5c9b      	ldrb	r3, [r3, r2]
 8007254:	b29b      	uxth	r3, r3
 8007256:	4a4f      	ldr	r2, [pc, #316]	; (8007394 <hanWanFontLoad+0x1e8>)
 8007258:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800725a:	4b46      	ldr	r3, [pc, #280]	; (8007374 <hanWanFontLoad+0x1c8>)
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <hanWanFontLoad+0xca>
 8007262:	4b44      	ldr	r3, [pc, #272]	; (8007374 <hanWanFontLoad+0x1c8>)
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d005      	beq.n	8007276 <hanWanFontLoad+0xca>
 800726a:	4b42      	ldr	r3, [pc, #264]	; (8007374 <hanWanFontLoad+0x1c8>)
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	2b10      	cmp	r3, #16
 8007270:	d001      	beq.n	8007276 <hanWanFontLoad+0xca>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <hanWanFontLoad+0xcc>
 8007276:	2300      	movs	r3, #0
 8007278:	b29b      	uxth	r3, r3
 800727a:	4a40      	ldr	r2, [pc, #256]	; (800737c <hanWanFontLoad+0x1d0>)
 800727c:	8812      	ldrh	r2, [r2, #0]
 800727e:	2a00      	cmp	r2, #0
 8007280:	d001      	beq.n	8007286 <hanWanFontLoad+0xda>
 8007282:	2202      	movs	r2, #2
 8007284:	e000      	b.n	8007288 <hanWanFontLoad+0xdc>
 8007286:	2200      	movs	r2, #0
 8007288:	4413      	add	r3, r2
 800728a:	b29a      	uxth	r2, r3
 800728c:	4b42      	ldr	r3, [pc, #264]	; (8007398 <hanWanFontLoad+0x1ec>)
 800728e:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8007290:	4b39      	ldr	r3, [pc, #228]	; (8007378 <hanWanFontLoad+0x1cc>)
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	4b41      	ldr	r3, [pc, #260]	; (800739c <hanWanFontLoad+0x1f0>)
 8007298:	5c9b      	ldrb	r3, [r3, r2]
 800729a:	b29a      	uxth	r2, r3
 800729c:	4b40      	ldr	r3, [pc, #256]	; (80073a0 <hanWanFontLoad+0x1f4>)
 800729e:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	81fb      	strh	r3, [r7, #14]
 80072a4:	e035      	b.n	8007312 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 80072a6:	4b3b      	ldr	r3, [pc, #236]	; (8007394 <hanWanFontLoad+0x1e8>)
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	461a      	mov	r2, r3
 80072b6:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <hanWanFontLoad+0x1c8>)
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	441a      	add	r2, r3
 80072bc:	89fb      	ldrh	r3, [r7, #14]
 80072be:	4939      	ldr	r1, [pc, #228]	; (80073a4 <hanWanFontLoad+0x1f8>)
 80072c0:	0152      	lsls	r2, r2, #5
 80072c2:	4413      	add	r3, r2
 80072c4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80072c8:	89fb      	ldrh	r3, [r7, #14]
 80072ca:	b2d1      	uxtb	r1, r2
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	4413      	add	r3, r2
 80072d0:	460a      	mov	r2, r1
 80072d2:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 80072d4:	89fb      	ldrh	r3, [r7, #14]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4413      	add	r3, r2
 80072da:	7999      	ldrb	r1, [r3, #6]
 80072dc:	4b2e      	ldr	r3, [pc, #184]	; (8007398 <hanWanFontLoad+0x1ec>)
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	2316      	movs	r3, #22
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	33a0      	adds	r3, #160	; 0xa0
 80072ea:	4a23      	ldr	r2, [pc, #140]	; (8007378 <hanWanFontLoad+0x1cc>)
 80072ec:	8812      	ldrh	r2, [r2, #0]
 80072ee:	441a      	add	r2, r3
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	482c      	ldr	r0, [pc, #176]	; (80073a4 <hanWanFontLoad+0x1f8>)
 80072f4:	0152      	lsls	r2, r2, #5
 80072f6:	4413      	add	r3, r2
 80072f8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	89fb      	ldrh	r3, [r7, #14]
 8007300:	430a      	orrs	r2, r1
 8007302:	b2d1      	uxtb	r1, r2
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	4413      	add	r3, r2
 8007308:	460a      	mov	r2, r1
 800730a:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800730c:	89fb      	ldrh	r3, [r7, #14]
 800730e:	3301      	adds	r3, #1
 8007310:	81fb      	strh	r3, [r7, #14]
 8007312:	89fb      	ldrh	r3, [r7, #14]
 8007314:	2b1f      	cmp	r3, #31
 8007316:	d9c6      	bls.n	80072a6 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8007318:	4b18      	ldr	r3, [pc, #96]	; (800737c <hanWanFontLoad+0x1d0>)
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d025      	beq.n	800736c <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8007320:	2300      	movs	r3, #0
 8007322:	81fb      	strh	r3, [r7, #14]
 8007324:	e01f      	b.n	8007366 <hanWanFontLoad+0x1ba>
 8007326:	89fb      	ldrh	r3, [r7, #14]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	4413      	add	r3, r2
 800732c:	7999      	ldrb	r1, [r3, #6]
 800732e:	4b1c      	ldr	r3, [pc, #112]	; (80073a0 <hanWanFontLoad+0x1f4>)
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	33f8      	adds	r3, #248	; 0xf8
 800733e:	4a0f      	ldr	r2, [pc, #60]	; (800737c <hanWanFontLoad+0x1d0>)
 8007340:	8812      	ldrh	r2, [r2, #0]
 8007342:	441a      	add	r2, r3
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	4817      	ldr	r0, [pc, #92]	; (80073a4 <hanWanFontLoad+0x1f8>)
 8007348:	0152      	lsls	r2, r2, #5
 800734a:	4413      	add	r3, r2
 800734c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	89fb      	ldrh	r3, [r7, #14]
 8007354:	430a      	orrs	r2, r1
 8007356:	b2d1      	uxtb	r1, r2
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	460a      	mov	r2, r1
 800735e:	719a      	strb	r2, [r3, #6]
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	3301      	adds	r3, #1
 8007364:	81fb      	strh	r3, [r7, #14]
 8007366:	89fb      	ldrh	r3, [r7, #14]
 8007368:	2b1f      	cmp	r3, #31
 800736a:	d9dc      	bls.n	8007326 <hanWanFontLoad+0x17a>
  }
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	2000cffe 	.word	0x2000cffe
 8007378:	2000d000 	.word	0x2000d000
 800737c:	2000d002 	.word	0x2000d002
 8007380:	08019144 	.word	0x08019144
 8007384:	08019164 	.word	0x08019164
 8007388:	08019184 	.word	0x08019184
 800738c:	0801921c 	.word	0x0801921c
 8007390:	08019204 	.word	0x08019204
 8007394:	2000d004 	.word	0x2000d004
 8007398:	2000d006 	.word	0x2000d006
 800739c:	08019234 	.word	0x08019234
 80073a0:	2000d008 	.word	0x2000d008
 80073a4:	0801b740 	.word	0x0801b740

080073a8 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	031b      	lsls	r3, r3, #12
 80073b8:	b21a      	sxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3301      	adds	r3, #1
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	019b      	lsls	r3, r3, #6
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80073c8:	b21b      	sxth	r3, r3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	b21a      	sxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3302      	adds	r3, #2
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	b21b      	sxth	r3, r3
 80073d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073da:	b21b      	sxth	r3, r3
 80073dc:	4313      	orrs	r3, r2
 80073de:	b21b      	sxth	r3, r3
 80073e0:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 80073e2:	89bb      	ldrh	r3, [r7, #12]
 80073e4:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80073e8:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 80073ea:	89ba      	ldrh	r2, [r7, #12]
 80073ec:	0893      	lsrs	r3, r2, #2
 80073ee:	4973      	ldr	r1, [pc, #460]	; (80075bc <hanUniFontLoad+0x214>)
 80073f0:	fba1 3103 	umull	r3, r1, r1, r3
 80073f4:	460b      	mov	r3, r1
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	1a5b      	subs	r3, r3, r1
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	b29a      	uxth	r2, r3
 8007400:	4b6f      	ldr	r3, [pc, #444]	; (80075c0 <hanUniFontLoad+0x218>)
 8007402:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8007404:	89bb      	ldrh	r3, [r7, #12]
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	4a6c      	ldr	r2, [pc, #432]	; (80075bc <hanUniFontLoad+0x214>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8007410:	89b9      	ldrh	r1, [r7, #12]
 8007412:	4b6c      	ldr	r3, [pc, #432]	; (80075c4 <hanUniFontLoad+0x21c>)
 8007414:	fba3 2301 	umull	r2, r3, r3, r1
 8007418:	1aca      	subs	r2, r1, r3
 800741a:	0852      	lsrs	r2, r2, #1
 800741c:	4413      	add	r3, r2
 800741e:	091a      	lsrs	r2, r3, #4
 8007420:	4613      	mov	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	00da      	lsls	r2, r3, #3
 8007428:	1ad2      	subs	r2, r2, r3
 800742a:	1a8b      	subs	r3, r1, r2
 800742c:	b29a      	uxth	r2, r3
 800742e:	4b66      	ldr	r3, [pc, #408]	; (80075c8 <hanUniFontLoad+0x220>)
 8007430:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8007432:	89ba      	ldrh	r2, [r7, #12]
 8007434:	4b63      	ldr	r3, [pc, #396]	; (80075c4 <hanUniFontLoad+0x21c>)
 8007436:	fba3 1302 	umull	r1, r3, r3, r2
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	0852      	lsrs	r2, r2, #1
 800743e:	4413      	add	r3, r2
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	b29a      	uxth	r2, r3
 8007444:	4b61      	ldr	r3, [pc, #388]	; (80075cc <hanUniFontLoad+0x224>)
 8007446:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8007448:	4b60      	ldr	r3, [pc, #384]	; (80075cc <hanUniFontLoad+0x224>)
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	4b60      	ldr	r3, [pc, #384]	; (80075d0 <hanUniFontLoad+0x228>)
 8007450:	5c9b      	ldrb	r3, [r3, r2]
 8007452:	b29a      	uxth	r2, r3
 8007454:	4b5d      	ldr	r3, [pc, #372]	; (80075cc <hanUniFontLoad+0x224>)
 8007456:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8007458:	4b5b      	ldr	r3, [pc, #364]	; (80075c8 <hanUniFontLoad+0x220>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	4b5d      	ldr	r3, [pc, #372]	; (80075d4 <hanUniFontLoad+0x22c>)
 8007460:	5c9b      	ldrb	r3, [r3, r2]
 8007462:	b29a      	uxth	r2, r3
 8007464:	4b58      	ldr	r3, [pc, #352]	; (80075c8 <hanUniFontLoad+0x220>)
 8007466:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8007468:	4b55      	ldr	r3, [pc, #340]	; (80075c0 <hanUniFontLoad+0x218>)
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	4b5a      	ldr	r3, [pc, #360]	; (80075d8 <hanUniFontLoad+0x230>)
 8007470:	5c9b      	ldrb	r3, [r3, r2]
 8007472:	b29a      	uxth	r2, r3
 8007474:	4b52      	ldr	r3, [pc, #328]	; (80075c0 <hanUniFontLoad+0x218>)
 8007476:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007478:	4b51      	ldr	r3, [pc, #324]	; (80075c0 <hanUniFontLoad+0x218>)
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <hanUniFontLoad+0xe6>
 8007480:	4b51      	ldr	r3, [pc, #324]	; (80075c8 <hanUniFontLoad+0x220>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	4b55      	ldr	r3, [pc, #340]	; (80075dc <hanUniFontLoad+0x234>)
 8007488:	5c9b      	ldrb	r3, [r3, r2]
 800748a:	b29b      	uxth	r3, r3
 800748c:	e005      	b.n	800749a <hanUniFontLoad+0xf2>
 800748e:	4b4e      	ldr	r3, [pc, #312]	; (80075c8 <hanUniFontLoad+0x220>)
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	4b52      	ldr	r3, [pc, #328]	; (80075e0 <hanUniFontLoad+0x238>)
 8007496:	5c9b      	ldrb	r3, [r3, r2]
 8007498:	b29b      	uxth	r3, r3
 800749a:	4a52      	ldr	r2, [pc, #328]	; (80075e4 <hanUniFontLoad+0x23c>)
 800749c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800749e:	4b4b      	ldr	r3, [pc, #300]	; (80075cc <hanUniFontLoad+0x224>)
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <hanUniFontLoad+0x112>
 80074a6:	4b49      	ldr	r3, [pc, #292]	; (80075cc <hanUniFontLoad+0x224>)
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d005      	beq.n	80074ba <hanUniFontLoad+0x112>
 80074ae:	4b47      	ldr	r3, [pc, #284]	; (80075cc <hanUniFontLoad+0x224>)
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	d001      	beq.n	80074ba <hanUniFontLoad+0x112>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <hanUniFontLoad+0x114>
 80074ba:	2300      	movs	r3, #0
 80074bc:	b29b      	uxth	r3, r3
 80074be:	4a40      	ldr	r2, [pc, #256]	; (80075c0 <hanUniFontLoad+0x218>)
 80074c0:	8812      	ldrh	r2, [r2, #0]
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d001      	beq.n	80074ca <hanUniFontLoad+0x122>
 80074c6:	2202      	movs	r2, #2
 80074c8:	e000      	b.n	80074cc <hanUniFontLoad+0x124>
 80074ca:	2200      	movs	r2, #0
 80074cc:	4413      	add	r3, r2
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	4b45      	ldr	r3, [pc, #276]	; (80075e8 <hanUniFontLoad+0x240>)
 80074d2:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 80074d4:	4b3c      	ldr	r3, [pc, #240]	; (80075c8 <hanUniFontLoad+0x220>)
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	4b44      	ldr	r3, [pc, #272]	; (80075ec <hanUniFontLoad+0x244>)
 80074dc:	5c9b      	ldrb	r3, [r3, r2]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	4b43      	ldr	r3, [pc, #268]	; (80075f0 <hanUniFontLoad+0x248>)
 80074e2:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 80074e4:	2300      	movs	r3, #0
 80074e6:	81fb      	strh	r3, [r7, #14]
 80074e8:	e035      	b.n	8007556 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 80074ea:	4b3e      	ldr	r3, [pc, #248]	; (80075e4 <hanUniFontLoad+0x23c>)
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b34      	ldr	r3, [pc, #208]	; (80075cc <hanUniFontLoad+0x224>)
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	441a      	add	r2, r3
 8007500:	89fb      	ldrh	r3, [r7, #14]
 8007502:	493c      	ldr	r1, [pc, #240]	; (80075f4 <hanUniFontLoad+0x24c>)
 8007504:	0152      	lsls	r2, r2, #5
 8007506:	4413      	add	r3, r2
 8007508:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800750c:	89fb      	ldrh	r3, [r7, #14]
 800750e:	b2d1      	uxtb	r1, r2
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	4413      	add	r3, r2
 8007514:	460a      	mov	r2, r1
 8007516:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8007518:	89fb      	ldrh	r3, [r7, #14]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4413      	add	r3, r2
 800751e:	7999      	ldrb	r1, [r3, #6]
 8007520:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <hanUniFontLoad+0x240>)
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	2316      	movs	r3, #22
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	33a0      	adds	r3, #160	; 0xa0
 800752e:	4a26      	ldr	r2, [pc, #152]	; (80075c8 <hanUniFontLoad+0x220>)
 8007530:	8812      	ldrh	r2, [r2, #0]
 8007532:	441a      	add	r2, r3
 8007534:	89fb      	ldrh	r3, [r7, #14]
 8007536:	482f      	ldr	r0, [pc, #188]	; (80075f4 <hanUniFontLoad+0x24c>)
 8007538:	0152      	lsls	r2, r2, #5
 800753a:	4413      	add	r3, r2
 800753c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	89fb      	ldrh	r3, [r7, #14]
 8007544:	430a      	orrs	r2, r1
 8007546:	b2d1      	uxtb	r1, r2
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	4413      	add	r3, r2
 800754c:	460a      	mov	r2, r1
 800754e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8007550:	89fb      	ldrh	r3, [r7, #14]
 8007552:	3301      	adds	r3, #1
 8007554:	81fb      	strh	r3, [r7, #14]
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	2b1f      	cmp	r3, #31
 800755a:	d9c6      	bls.n	80074ea <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 800755c:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <hanUniFontLoad+0x218>)
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d025      	beq.n	80075b0 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8007564:	2300      	movs	r3, #0
 8007566:	81fb      	strh	r3, [r7, #14]
 8007568:	e01f      	b.n	80075aa <hanUniFontLoad+0x202>
 800756a:	89fb      	ldrh	r3, [r7, #14]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	4413      	add	r3, r2
 8007570:	7999      	ldrb	r1, [r3, #6]
 8007572:	4b1f      	ldr	r3, [pc, #124]	; (80075f0 <hanUniFontLoad+0x248>)
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	33f8      	adds	r3, #248	; 0xf8
 8007582:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <hanUniFontLoad+0x218>)
 8007584:	8812      	ldrh	r2, [r2, #0]
 8007586:	441a      	add	r2, r3
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	481a      	ldr	r0, [pc, #104]	; (80075f4 <hanUniFontLoad+0x24c>)
 800758c:	0152      	lsls	r2, r2, #5
 800758e:	4413      	add	r3, r2
 8007590:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	89fb      	ldrh	r3, [r7, #14]
 8007598:	430a      	orrs	r2, r1
 800759a:	b2d1      	uxtb	r1, r2
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	4413      	add	r3, r2
 80075a0:	460a      	mov	r2, r1
 80075a2:	719a      	strb	r2, [r3, #6]
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	3301      	adds	r3, #1
 80075a8:	81fb      	strh	r3, [r7, #14]
 80075aa:	89fb      	ldrh	r3, [r7, #14]
 80075ac:	2b1f      	cmp	r3, #31
 80075ae:	d9dc      	bls.n	800756a <hanUniFontLoad+0x1c2>
  }
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	24924925 	.word	0x24924925
 80075c0:	2000d00a 	.word	0x2000d00a
 80075c4:	86186187 	.word	0x86186187
 80075c8:	2000d00c 	.word	0x2000d00c
 80075cc:	2000d00e 	.word	0x2000d00e
 80075d0:	080191a4 	.word	0x080191a4
 80075d4:	080191c4 	.word	0x080191c4
 80075d8:	080191e4 	.word	0x080191e4
 80075dc:	0801921c 	.word	0x0801921c
 80075e0:	08019204 	.word	0x08019204
 80075e4:	2000d010 	.word	0x2000d010
 80075e8:	2000d012 	.word	0x2000d012
 80075ec:	08019234 	.word	0x08019234
 80075f0:	2000d014 	.word	0x2000d014
 80075f4:	0801b740 	.word	0x0801b740

080075f8 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8007608:	7b7b      	ldrb	r3, [r7, #13]
 800760a:	3b20      	subs	r3, #32
 800760c:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 800760e:	2300      	movs	r3, #0
 8007610:	81fb      	strh	r3, [r7, #14]
 8007612:	e00f      	b.n	8007634 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8007614:	7b7a      	ldrb	r2, [r7, #13]
 8007616:	89fb      	ldrh	r3, [r7, #14]
 8007618:	490b      	ldr	r1, [pc, #44]	; (8007648 <hanEngFontLoad+0x50>)
 800761a:	0112      	lsls	r2, r2, #4
 800761c:	4413      	add	r3, r2
 800761e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	b2d1      	uxtb	r1, r2
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4413      	add	r3, r2
 800762a:	460a      	mov	r2, r1
 800762c:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 800762e:	89fb      	ldrh	r3, [r7, #14]
 8007630:	3301      	adds	r3, #1
 8007632:	81fb      	strh	r3, [r7, #14]
 8007634:	89fb      	ldrh	r3, [r7, #14]
 8007636:	2b0f      	cmp	r3, #15
 8007638:	d9ec      	bls.n	8007614 <hanEngFontLoad+0x1c>
  }
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	08017944 	.word	0x08017944

0800764c <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	0a1b      	lsrs	r3, r3, #8
 800765a:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8007662:	89fb      	ldrh	r3, [r7, #14]
 8007664:	3bb0      	subs	r3, #176	; 0xb0
 8007666:	225e      	movs	r2, #94	; 0x5e
 8007668:	fb03 f202 	mul.w	r2, r3, r2
 800766c:	89bb      	ldrh	r3, [r7, #12]
 800766e:	3ba1      	subs	r3, #161	; 0xa1
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8007674:	4a05      	ldr	r2, [pc, #20]	; (800768c <hanCnvCodeWan2Johab+0x40>)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767c:	b29b      	uxth	r3, r3
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	08019280 	.word	0x08019280

08007690 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <TransferDoneISR+0x30>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 800769e:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <TransferDoneISR+0x30>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80076a4:	2101      	movs	r1, #1
 80076a6:	2002      	movs	r0, #2
 80076a8:	f7fb ff84 	bl	80035b4 <gpioPinWrite>

    if (frameCallBack != NULL)
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <TransferDoneISR+0x34>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <TransferDoneISR+0x2a>
    {
      frameCallBack();
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <TransferDoneISR+0x34>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4798      	blx	r3
    }
  }
}
 80076ba:	bf00      	nop
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2000d01c 	.word	0x2000d01c
 80076c4:	2000d018 	.word	0x2000d018

080076c8 <st7735Init>:


bool st7735Init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 80076ce:	f000 f835 	bl	800773c <st7735Reset>
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]

  return ret;
 80076d6:	79fb      	ldrb	r3, [r7, #7]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a0d      	ldr	r2, [pc, #52]	; (8007720 <st7735InitDriver+0x40>)
 80076ec:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <st7735InitDriver+0x44>)
 80076f2:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <st7735InitDriver+0x48>)
 80076f8:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a0b      	ldr	r2, [pc, #44]	; (800772c <st7735InitDriver+0x4c>)
 80076fe:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a0b      	ldr	r2, [pc, #44]	; (8007730 <st7735InitDriver+0x50>)
 8007704:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a0a      	ldr	r2, [pc, #40]	; (8007734 <st7735InitDriver+0x54>)
 800770a:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <st7735InitDriver+0x58>)
 8007710:	619a      	str	r2, [r3, #24]
  return true;
 8007712:	2301      	movs	r3, #1
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	080076c9 	.word	0x080076c9
 8007724:	0800773d 	.word	0x0800773d
 8007728:	08007a01 	.word	0x08007a01
 800772c:	080077b5 	.word	0x080077b5
 8007730:	080077c5 	.word	0x080077c5
 8007734:	08007c59 	.word	0x08007c59
 8007738:	08007c0d 	.word	0x08007c0d

0800773c <st7735Reset>:

bool st7735Reset(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8007742:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <st7735Reset+0x70>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fb52 	bl	8005df0 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 800774c:	4b17      	ldr	r3, [pc, #92]	; (80077ac <st7735Reset+0x70>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fba8 	bl	8005ea8 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8007758:	4b14      	ldr	r3, [pc, #80]	; (80077ac <st7735Reset+0x70>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	4914      	ldr	r1, [pc, #80]	; (80077b0 <st7735Reset+0x74>)
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fcd8 	bl	8006114 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8007764:	2100      	movs	r1, #0
 8007766:	2001      	movs	r0, #1
 8007768:	f7fb ff24 	bl	80035b4 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 800776c:	2101      	movs	r1, #1
 800776e:	2003      	movs	r0, #3
 8007770:	f7fb ff20 	bl	80035b4 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8007774:	2101      	movs	r1, #1
 8007776:	2002      	movs	r0, #2
 8007778:	f7fb ff1c 	bl	80035b4 <gpioPinWrite>
  delay(10);
 800777c:	200a      	movs	r0, #10
 800777e:	f7f9 fdab 	bl	80012d8 <delay>

  st7735InitRegs();
 8007782:	f000 f863 	bl	800784c <st7735InitRegs>


  st7735SetRotation(1);
 8007786:	2001      	movs	r0, #1
 8007788:	f000 f910 	bl	80079ac <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 800778c:	2300      	movs	r3, #0
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	22a0      	movs	r2, #160	; 0xa0
 8007794:	2100      	movs	r1, #0
 8007796:	2000      	movs	r0, #0
 8007798:	f000 f97e 	bl	8007a98 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 800779c:	2100      	movs	r1, #0
 800779e:	2001      	movs	r0, #1
 80077a0:	f7fb ff08 	bl	80035b4 <gpioPinWrite>
  return true;
 80077a4:	2301      	movs	r3, #1
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000d016 	.word	0x2000d016
 80077b0:	08007691 	.word	0x08007691

080077b4 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 80077b8:	23a0      	movs	r3, #160	; 0xa0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 80077c8:	2380      	movs	r3, #128	; 0x80
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <writecommand>:

void writecommand(uint8_t c)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 80077de:	2100      	movs	r1, #0
 80077e0:	2003      	movs	r0, #3
 80077e2:	f7fb fee7 	bl	80035b4 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80077e6:	2100      	movs	r1, #0
 80077e8:	2002      	movs	r0, #2
 80077ea:	f7fb fee3 	bl	80035b4 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <writecommand+0x38>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	79fa      	ldrb	r2, [r7, #7]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fbea 	bl	8005fd0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80077fc:	2101      	movs	r1, #1
 80077fe:	2002      	movs	r0, #2
 8007800:	f7fb fed8 	bl	80035b4 <gpioPinWrite>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	2000d016 	.word	0x2000d016

08007810 <writedata>:

void writedata(uint8_t d)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 800781a:	2101      	movs	r1, #1
 800781c:	2003      	movs	r0, #3
 800781e:	f7fb fec9 	bl	80035b4 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007822:	2100      	movs	r1, #0
 8007824:	2002      	movs	r0, #2
 8007826:	f7fb fec5 	bl	80035b4 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <writedata+0x38>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	79fa      	ldrb	r2, [r7, #7]
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fbcc 	bl	8005fd0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007838:	2101      	movs	r1, #1
 800783a:	2002      	movs	r0, #2
 800783c:	f7fb feba 	bl	80035b4 <gpioPinWrite>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	2000d016 	.word	0x2000d016

0800784c <st7735InitRegs>:

void st7735InitRegs(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8007850:	2001      	movs	r0, #1
 8007852:	f7ff ffbf 	bl	80077d4 <writecommand>
  delay(10);
 8007856:	200a      	movs	r0, #10
 8007858:	f7f9 fd3e 	bl	80012d8 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 800785c:	2011      	movs	r0, #17
 800785e:	f7ff ffb9 	bl	80077d4 <writecommand>
  delay(10);
 8007862:	200a      	movs	r0, #10
 8007864:	f7f9 fd38 	bl	80012d8 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8007868:	20b1      	movs	r0, #177	; 0xb1
 800786a:	f7ff ffb3 	bl	80077d4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800786e:	2001      	movs	r0, #1
 8007870:	f7ff ffce 	bl	8007810 <writedata>
  writedata(0x2C);
 8007874:	202c      	movs	r0, #44	; 0x2c
 8007876:	f7ff ffcb 	bl	8007810 <writedata>
  writedata(0x2D);
 800787a:	202d      	movs	r0, #45	; 0x2d
 800787c:	f7ff ffc8 	bl	8007810 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8007880:	20b2      	movs	r0, #178	; 0xb2
 8007882:	f7ff ffa7 	bl	80077d4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8007886:	2001      	movs	r0, #1
 8007888:	f7ff ffc2 	bl	8007810 <writedata>
  writedata(0x2C);
 800788c:	202c      	movs	r0, #44	; 0x2c
 800788e:	f7ff ffbf 	bl	8007810 <writedata>
  writedata(0x2D);
 8007892:	202d      	movs	r0, #45	; 0x2d
 8007894:	f7ff ffbc 	bl	8007810 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8007898:	20b3      	movs	r0, #179	; 0xb3
 800789a:	f7ff ff9b 	bl	80077d4 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 800789e:	2001      	movs	r0, #1
 80078a0:	f7ff ffb6 	bl	8007810 <writedata>
  writedata(0x2C);
 80078a4:	202c      	movs	r0, #44	; 0x2c
 80078a6:	f7ff ffb3 	bl	8007810 <writedata>
  writedata(0x2D);
 80078aa:	202d      	movs	r0, #45	; 0x2d
 80078ac:	f7ff ffb0 	bl	8007810 <writedata>
  writedata(0x01);              //     Line inversion mode
 80078b0:	2001      	movs	r0, #1
 80078b2:	f7ff ffad 	bl	8007810 <writedata>
  writedata(0x2C);
 80078b6:	202c      	movs	r0, #44	; 0x2c
 80078b8:	f7ff ffaa 	bl	8007810 <writedata>
  writedata(0x2D);
 80078bc:	202d      	movs	r0, #45	; 0x2d
 80078be:	f7ff ffa7 	bl	8007810 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 80078c2:	20b4      	movs	r0, #180	; 0xb4
 80078c4:	f7ff ff86 	bl	80077d4 <writecommand>
  writedata(0x07);              //     No inversion
 80078c8:	2007      	movs	r0, #7
 80078ca:	f7ff ffa1 	bl	8007810 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 80078ce:	20c0      	movs	r0, #192	; 0xc0
 80078d0:	f7ff ff80 	bl	80077d4 <writecommand>
  writedata(0xA2);
 80078d4:	20a2      	movs	r0, #162	; 0xa2
 80078d6:	f7ff ff9b 	bl	8007810 <writedata>
  writedata(0x02);              //     -4.6V
 80078da:	2002      	movs	r0, #2
 80078dc:	f7ff ff98 	bl	8007810 <writedata>
  writedata(0x84);              //     AUTO mode
 80078e0:	2084      	movs	r0, #132	; 0x84
 80078e2:	f7ff ff95 	bl	8007810 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 80078e6:	20c1      	movs	r0, #193	; 0xc1
 80078e8:	f7ff ff74 	bl	80077d4 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80078ec:	20c5      	movs	r0, #197	; 0xc5
 80078ee:	f7ff ff8f 	bl	8007810 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80078f2:	20c2      	movs	r0, #194	; 0xc2
 80078f4:	f7ff ff6e 	bl	80077d4 <writecommand>
  writedata(0x0A);              //     Opamp current small
 80078f8:	200a      	movs	r0, #10
 80078fa:	f7ff ff89 	bl	8007810 <writedata>
  writedata(0x00);              //     Boost frequency
 80078fe:	2000      	movs	r0, #0
 8007900:	f7ff ff86 	bl	8007810 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8007904:	20c3      	movs	r0, #195	; 0xc3
 8007906:	f7ff ff65 	bl	80077d4 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 800790a:	208a      	movs	r0, #138	; 0x8a
 800790c:	f7ff ff80 	bl	8007810 <writedata>
  writedata(0x2A);
 8007910:	202a      	movs	r0, #42	; 0x2a
 8007912:	f7ff ff7d 	bl	8007810 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 8007916:	20c4      	movs	r0, #196	; 0xc4
 8007918:	f7ff ff5c 	bl	80077d4 <writecommand>
  writedata(0x8A);
 800791c:	208a      	movs	r0, #138	; 0x8a
 800791e:	f7ff ff77 	bl	8007810 <writedata>
  writedata(0xEE);
 8007922:	20ee      	movs	r0, #238	; 0xee
 8007924:	f7ff ff74 	bl	8007810 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8007928:	20c5      	movs	r0, #197	; 0xc5
 800792a:	f7ff ff53 	bl	80077d4 <writecommand>
  writedata(0x0E);
 800792e:	200e      	movs	r0, #14
 8007930:	f7ff ff6e 	bl	8007810 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8007934:	2020      	movs	r0, #32
 8007936:	f7ff ff4d 	bl	80077d4 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 800793a:	2036      	movs	r0, #54	; 0x36
 800793c:	f7ff ff4a 	bl	80077d4 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8007940:	20c8      	movs	r0, #200	; 0xc8
 8007942:	f7ff ff65 	bl	8007810 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8007946:	203a      	movs	r0, #58	; 0x3a
 8007948:	f7ff ff44 	bl	80077d4 <writecommand>
  writedata(0x05);              //     16-bit color
 800794c:	2005      	movs	r0, #5
 800794e:	f7ff ff5f 	bl	8007810 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8007952:	202a      	movs	r0, #42	; 0x2a
 8007954:	f7ff ff3e 	bl	80077d4 <writecommand>
  writedata(0x00);
 8007958:	2000      	movs	r0, #0
 800795a:	f7ff ff59 	bl	8007810 <writedata>
  writedata(0x00);              //     XSTART = 0
 800795e:	2000      	movs	r0, #0
 8007960:	f7ff ff56 	bl	8007810 <writedata>
  writedata(0x00);
 8007964:	2000      	movs	r0, #0
 8007966:	f7ff ff53 	bl	8007810 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 800796a:	209f      	movs	r0, #159	; 0x9f
 800796c:	f7ff ff50 	bl	8007810 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8007970:	202b      	movs	r0, #43	; 0x2b
 8007972:	f7ff ff2f 	bl	80077d4 <writecommand>
  writedata(0x00);
 8007976:	2000      	movs	r0, #0
 8007978:	f7ff ff4a 	bl	8007810 <writedata>
  writedata(0x00);              //     XSTART = 0
 800797c:	2000      	movs	r0, #0
 800797e:	f7ff ff47 	bl	8007810 <writedata>
  writedata(0x00);
 8007982:	2000      	movs	r0, #0
 8007984:	f7ff ff44 	bl	8007810 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8007988:	207f      	movs	r0, #127	; 0x7f
 800798a:	f7ff ff41 	bl	8007810 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 800798e:	2013      	movs	r0, #19
 8007990:	f7ff ff20 	bl	80077d4 <writecommand>
  delay(10);
 8007994:	200a      	movs	r0, #10
 8007996:	f7f9 fc9f 	bl	80012d8 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 800799a:	2029      	movs	r0, #41	; 0x29
 800799c:	f7ff ff1a 	bl	80077d4 <writecommand>
  delay(10);
 80079a0:	200a      	movs	r0, #10
 80079a2:	f7f9 fc99 	bl	80012d8 <delay>
}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 80079b6:	2036      	movs	r0, #54	; 0x36
 80079b8:	f7ff ff0c 	bl	80077d4 <writecommand>

  switch (mode)
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d81a      	bhi.n	80079f8 <st7735SetRotation+0x4c>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <st7735SetRotation+0x1c>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	080079e1 	.word	0x080079e1
 80079d0:	080079e9 	.word	0x080079e9
 80079d4:	080079f1 	.word	0x080079f1
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80079d8:	20c0      	movs	r0, #192	; 0xc0
 80079da:	f7ff ff19 	bl	8007810 <writedata>
     break;
 80079de:	e00b      	b.n	80079f8 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80079e0:	20a0      	movs	r0, #160	; 0xa0
 80079e2:	f7ff ff15 	bl	8007810 <writedata>
     break;
 80079e6:	e007      	b.n	80079f8 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 80079e8:	2000      	movs	r0, #0
 80079ea:	f7ff ff11 	bl	8007810 <writedata>
    break;
 80079ee:	e003      	b.n	80079f8 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80079f0:	2060      	movs	r0, #96	; 0x60
 80079f2:	f7ff ff0d 	bl	8007810 <writedata>
     break;
 80079f6:	bf00      	nop
  }
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8007a0e:	4b21      	ldr	r3, [pc, #132]	; (8007a94 <st7735SetWindow+0x94>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2108      	movs	r1, #8
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe faab 	bl	8005f70 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8007a1a:	202a      	movs	r0, #42	; 0x2a
 8007a1c:	f7ff feda 	bl	80077d4 <writecommand>
  writedata(0x00);
 8007a20:	2000      	movs	r0, #0
 8007a22:	f7ff fef5 	bl	8007810 <writedata>
  writedata(x0+colstart);     // XSTART
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	4413      	add	r3, r2
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff feec 	bl	8007810 <writedata>
  writedata(0x00);
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7ff fee9 	bl	8007810 <writedata>
  writedata(x1+colstart);     // XEND
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fee0 	bl	8007810 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8007a50:	202b      	movs	r0, #43	; 0x2b
 8007a52:	f7ff febf 	bl	80077d4 <writecommand>
  writedata(0x00);
 8007a56:	2000      	movs	r0, #0
 8007a58:	f7ff feda 	bl	8007810 <writedata>
  writedata(y0+rowstart);     // YSTART
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4413      	add	r3, r2
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fed1 	bl	8007810 <writedata>
  writedata(0x00);
 8007a6e:	2000      	movs	r0, #0
 8007a70:	f7ff fece 	bl	8007810 <writedata>
  writedata(y1+rowstart);     // YEND
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	2300      	movs	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff fec5 	bl	8007810 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8007a86:	202c      	movs	r0, #44	; 0x2c
 8007a88:	f7ff fea4 	bl	80077d4 <writecommand>
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	2000d016 	.word	0x2000d016

08007a98 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8007a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	b089      	sub	sp, #36	; 0x24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	466b      	mov	r3, sp
 8007aaa:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	1e4b      	subs	r3, r1, #1
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	460a      	mov	r2, r1
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4690      	mov	r8, r2
 8007ab8:	4699      	mov	r9, r3
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8007ac6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8007aca:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8007ace:	460a      	mov	r2, r1
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	012b      	lsls	r3, r5, #4
 8007ae0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8007ae4:	0122      	lsls	r2, r4, #4
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	3307      	adds	r3, #7
 8007aec:	08db      	lsrs	r3, r3, #3
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	ebad 0d03 	sub.w	sp, sp, r3
 8007af4:	466b      	mov	r3, sp
 8007af6:	3301      	adds	r3, #1
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 8007afe:	22a0      	movs	r2, #160	; 0xa0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	da78      	bge.n	8007bf8 <st7735FillRect+0x160>
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	da74      	bge.n	8007bf8 <st7735FillRect+0x160>

  if (x < 0) { w += x; x = 0; }
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da05      	bge.n	8007b20 <st7735FillRect+0x88>
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da05      	bge.n	8007b32 <st7735FillRect+0x9a>
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4413      	add	r3, r2
 8007b38:	22a0      	movs	r2, #160	; 0xa0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	dd03      	ble.n	8007b46 <st7735FillRect+0xae>
 8007b3e:	22a0      	movs	r2, #160	; 0xa0
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	2280      	movs	r2, #128	; 0x80
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	dd03      	ble.n	8007b5a <st7735FillRect+0xc2>
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dd4d      	ble.n	8007bfc <st7735FillRect+0x164>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd4a      	ble.n	8007bfc <st7735FillRect+0x164>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	1e59      	subs	r1, r3, #1
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	4413      	add	r3, r2
 8007b74:	3b01      	subs	r3, #1
 8007b76:	460a      	mov	r2, r1
 8007b78:	68b9      	ldr	r1, [r7, #8]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff ff40 	bl	8007a00 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8007b80:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <st7735FillRect+0x170>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2110      	movs	r1, #16
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe f9f2 	bl	8005f70 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	2003      	movs	r0, #3
 8007b90:	f7fb fd10 	bl	80035b4 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007b94:	2100      	movs	r1, #0
 8007b96:	2002      	movs	r0, #2
 8007b98:	f7fb fd0c 	bl	80035b4 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	e008      	b.n	8007bb4 <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 8007ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba4:	b299      	uxth	r1, r3
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	dbf2      	blt.n	8007ba2 <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61bb      	str	r3, [r7, #24]
 8007bc0:	e00e      	b.n	8007be0 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	230a      	movs	r3, #10
 8007bc6:	6939      	ldr	r1, [r7, #16]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f7fe fa53 	bl	8006074 <spiDmaTxTransfer>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f083 0301 	eor.w	r3, r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d107      	bne.n	8007bea <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	dbec      	blt.n	8007bc2 <st7735FillRect+0x12a>
 8007be8:	e000      	b.n	8007bec <st7735FillRect+0x154>
    {
      break;
 8007bea:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007bec:	2101      	movs	r1, #1
 8007bee:	2002      	movs	r0, #2
 8007bf0:	f7fb fce0 	bl	80035b4 <gpioPinWrite>
 8007bf4:	46b5      	mov	sp, r6
 8007bf6:	e003      	b.n	8007c00 <st7735FillRect+0x168>
  if ((x >= _width) || (y >= _height)) return;
 8007bf8:	bf00      	nop
 8007bfa:	e000      	b.n	8007bfe <st7735FillRect+0x166>
  if ((w < 1) || (h < 1)) return;
 8007bfc:	bf00      	nop
 8007bfe:	46b5      	mov	sp, r6
}
 8007c00:	3724      	adds	r7, #36	; 0x24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c08:	2000d016 	.word	0x2000d016

08007c0c <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8007c18:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <st7735SendBuffer+0x44>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <st7735SendBuffer+0x48>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2110      	movs	r1, #16
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe f9a3 	bl	8005f70 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	2003      	movs	r0, #3
 8007c2e:	f7fb fcc1 	bl	80035b4 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007c32:	2100      	movs	r1, #0
 8007c34:	2002      	movs	r0, #2
 8007c36:	f7fb fcbd 	bl	80035b4 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	2000      	movs	r0, #0
 8007c42:	f7fe fa17 	bl	8006074 <spiDmaTxTransfer>
  return true;
 8007c46:	2301      	movs	r3, #1
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	2000d01c 	.word	0x2000d01c
 8007c54:	2000d016 	.word	0x2000d016

08007c58 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8007c60:	4a04      	ldr	r2, [pc, #16]	; (8007c74 <st7735SetCallBack+0x1c>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6013      	str	r3, [r2, #0]

  return true;
 8007c66:	2301      	movs	r3, #1
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	2000d018 	.word	0x2000d018

08007c78 <hwInit>:




void hwInit(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  bspInit();
 8007c7c:	f7f9 fb02 	bl	8001284 <bspInit>

  cliInit();
 8007c80:	f7f9 ff20 	bl	8001ac4 <cliInit>
  ledInit();
 8007c84:	f7fc fd2e 	bl	80046e4 <ledInit>
  uartInit();
 8007c88:	f7fe fd96 	bl	80067b8 <uartInit>
  spiInit();
 8007c8c:	f7fe f85e 	bl	8005d4c <spiInit>
  DWT_Delay_Init();
 8007c90:	f7f9 fdd8 	bl	8001844 <DWT_Delay_Init>
  buttonInit();
 8007c94:	f7f9 fe06 	bl	80018a4 <buttonInit>
  gpioInit();
 8007c98:	f7fb fbc2 	bl	8003420 <gpioInit>
  Ds18b20_Init();
 8007c9c:	f7fa fe5c 	bl	8002958 <Ds18b20_Init>
  sonarInit();
 8007ca0:	f7fd fe7e 	bl	80059a0 <sonarInit>

  //LCD_INIT();
  lcdInit();
 8007ca4:	f7fb fde8 	bl	8003878 <lcdInit>
  tdsInit();
 8007ca8:	f7fe fb4a 	bl	8006340 <tdsInit>

  if (sdInit() == true)
 8007cac:	f7fd fa5e 	bl	800516c <sdInit>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <hwInit+0x42>
  {
    fatfsInit();
 8007cb6:	f7fb f9b5 	bl	8003024 <fatfsInit>
  }

  menuInit();
 8007cba:	f7fc fe0d 	bl	80048d8 <menuInit>
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <disk_status+0x30>)
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	79fa      	ldrb	r2, [r7, #7]
 8007cdc:	4905      	ldr	r1, [pc, #20]	; (8007cf4 <disk_status+0x30>)
 8007cde:	440a      	add	r2, r1
 8007ce0:	7b12      	ldrb	r2, [r2, #12]
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	2000d04c 	.word	0x2000d04c

08007cf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4a0d      	ldr	r2, [pc, #52]	; (8007d40 <disk_initialize+0x48>)
 8007d0a:	5cd3      	ldrb	r3, [r2, r3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d111      	bne.n	8007d34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4a0b      	ldr	r2, [pc, #44]	; (8007d40 <disk_initialize+0x48>)
 8007d14:	2101      	movs	r1, #1
 8007d16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <disk_initialize+0x48>)
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	79fa      	ldrb	r2, [r7, #7]
 8007d26:	4906      	ldr	r1, [pc, #24]	; (8007d40 <disk_initialize+0x48>)
 8007d28:	440a      	add	r2, r1
 8007d2a:	7b12      	ldrb	r2, [r2, #12]
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	2000d04c 	.word	0x2000d04c

08007d44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d44:	b590      	push	{r4, r7, lr}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	4a0a      	ldr	r2, [pc, #40]	; (8007d80 <disk_read+0x3c>)
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	689c      	ldr	r4, [r3, #8]
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	4a07      	ldr	r2, [pc, #28]	; (8007d80 <disk_read+0x3c>)
 8007d64:	4413      	add	r3, r2
 8007d66:	7b18      	ldrb	r0, [r3, #12]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	47a0      	blx	r4
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	2000d04c 	.word	0x2000d04c

08007d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	4a0a      	ldr	r2, [pc, #40]	; (8007dc0 <disk_write+0x3c>)
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68dc      	ldr	r4, [r3, #12]
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	4a07      	ldr	r2, [pc, #28]	; (8007dc0 <disk_write+0x3c>)
 8007da4:	4413      	add	r3, r2
 8007da6:	7b18      	ldrb	r0, [r3, #12]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	47a0      	blx	r4
 8007db0:	4603      	mov	r3, r0
 8007db2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd90      	pop	{r4, r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2000d04c 	.word	0x2000d04c

08007dc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	603a      	str	r2, [r7, #0]
 8007dce:	71fb      	strb	r3, [r7, #7]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <disk_ioctl+0x38>)
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	79fa      	ldrb	r2, [r7, #7]
 8007de2:	4906      	ldr	r1, [pc, #24]	; (8007dfc <disk_ioctl+0x38>)
 8007de4:	440a      	add	r2, r1
 8007de6:	7b10      	ldrb	r0, [r2, #12]
 8007de8:	79b9      	ldrb	r1, [r7, #6]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	4798      	blx	r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]
  return res;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	2000d04c 	.word	0x2000d04c

08007e00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return 0;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e20:	89fb      	ldrh	r3, [r7, #14]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	b21a      	sxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b21b      	sxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b21b      	sxth	r3, r3
 8007e30:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e32:	89fb      	ldrh	r3, [r7, #14]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3303      	adds	r3, #3
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	3202      	adds	r2, #2
 8007e58:	7812      	ldrb	r2, [r2, #0]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	3201      	adds	r2, #1
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	887a      	ldrh	r2, [r7, #2]
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	887b      	ldrh	r3, [r7, #2]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	607a      	str	r2, [r7, #4]
 8007eaa:	887a      	ldrh	r2, [r7, #2]
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	0a1b      	lsrs	r3, r3, #8
 8007efa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	701a      	strb	r2, [r3, #0]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00d      	beq.n	8007f4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	1c53      	adds	r3, r2, #1
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1c59      	adds	r1, r3, #1
 8007f38:	6179      	str	r1, [r7, #20]
 8007f3a:	7812      	ldrb	r2, [r2, #0]
 8007f3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f1      	bne.n	8007f2e <mem_cpy+0x1a>
	}
}
 8007f4a:	bf00      	nop
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f56:	b480      	push	{r7}
 8007f58:	b087      	sub	sp, #28
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	617a      	str	r2, [r7, #20]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f3      	bne.n	8007f66 <mem_set+0x10>
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	61fa      	str	r2, [r7, #28]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	4619      	mov	r1, r3
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	61ba      	str	r2, [r7, #24]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	1acb      	subs	r3, r1, r3
 8007fb8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <mem_cmp+0x40>
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0eb      	beq.n	8007fa4 <mem_cmp+0x18>

	return r;
 8007fcc:	697b      	ldr	r3, [r7, #20]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3724      	adds	r7, #36	; 0x24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007fe4:	e002      	b.n	8007fec <chk_chr+0x12>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <chk_chr+0x26>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d1f2      	bne.n	8007fe6 <chk_chr+0xc>
	return *str;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	781b      	ldrb	r3, [r3, #0]
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800801a:	2300      	movs	r3, #0
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e029      	b.n	8008078 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008024:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <chk_lock+0xb4>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	4413      	add	r3, r2
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01d      	beq.n	800806e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008032:	4a24      	ldr	r2, [pc, #144]	; (80080c4 <chk_lock+0xb4>)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	4413      	add	r3, r2
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d116      	bne.n	8008072 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008044:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <chk_lock+0xb4>)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	4413      	add	r3, r2
 800804c:	3304      	adds	r3, #4
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008054:	429a      	cmp	r2, r3
 8008056:	d10c      	bne.n	8008072 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008058:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <chk_lock+0xb4>)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	4413      	add	r3, r2
 8008060:	3308      	adds	r3, #8
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008068:	429a      	cmp	r2, r3
 800806a:	d102      	bne.n	8008072 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800806c:	e007      	b.n	800807e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d9d2      	bls.n	8008024 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d109      	bne.n	8008098 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <chk_lock+0x80>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d101      	bne.n	8008094 <chk_lock+0x84>
 8008090:	2300      	movs	r3, #0
 8008092:	e010      	b.n	80080b6 <chk_lock+0xa6>
 8008094:	2312      	movs	r3, #18
 8008096:	e00e      	b.n	80080b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d108      	bne.n	80080b0 <chk_lock+0xa0>
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <chk_lock+0xb4>)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4413      	add	r3, r2
 80080a6:	330c      	adds	r3, #12
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ae:	d101      	bne.n	80080b4 <chk_lock+0xa4>
 80080b0:	2310      	movs	r3, #16
 80080b2:	e000      	b.n	80080b6 <chk_lock+0xa6>
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	2000d02c 	.word	0x2000d02c

080080c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	e002      	b.n	80080da <enq_lock+0x12>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3301      	adds	r3, #1
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d806      	bhi.n	80080ee <enq_lock+0x26>
 80080e0:	4a09      	ldr	r2, [pc, #36]	; (8008108 <enq_lock+0x40>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	4413      	add	r3, r2
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f2      	bne.n	80080d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	2000d02c 	.word	0x2000d02c

0800810c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	e01f      	b.n	800815c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800811c:	4a41      	ldr	r2, [pc, #260]	; (8008224 <inc_lock+0x118>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	4413      	add	r3, r2
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d113      	bne.n	8008156 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800812e:	4a3d      	ldr	r2, [pc, #244]	; (8008224 <inc_lock+0x118>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	4413      	add	r3, r2
 8008136:	3304      	adds	r3, #4
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800813e:	429a      	cmp	r2, r3
 8008140:	d109      	bne.n	8008156 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008142:	4a38      	ldr	r2, [pc, #224]	; (8008224 <inc_lock+0x118>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	4413      	add	r3, r2
 800814a:	3308      	adds	r3, #8
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008152:	429a      	cmp	r2, r3
 8008154:	d006      	beq.n	8008164 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3301      	adds	r3, #1
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d9dc      	bls.n	800811c <inc_lock+0x10>
 8008162:	e000      	b.n	8008166 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008164:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d132      	bne.n	80081d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e002      	b.n	8008178 <inc_lock+0x6c>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3301      	adds	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d806      	bhi.n	800818c <inc_lock+0x80>
 800817e:	4a29      	ldr	r2, [pc, #164]	; (8008224 <inc_lock+0x118>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	4413      	add	r3, r2
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f2      	bne.n	8008172 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d101      	bne.n	8008196 <inc_lock+0x8a>
 8008192:	2300      	movs	r3, #0
 8008194:	e040      	b.n	8008218 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4922      	ldr	r1, [pc, #136]	; (8008224 <inc_lock+0x118>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	440b      	add	r3, r1
 80081a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	491e      	ldr	r1, [pc, #120]	; (8008224 <inc_lock+0x118>)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	440b      	add	r3, r1
 80081b0:	3304      	adds	r3, #4
 80081b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695a      	ldr	r2, [r3, #20]
 80081b8:	491a      	ldr	r1, [pc, #104]	; (8008224 <inc_lock+0x118>)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	440b      	add	r3, r1
 80081c0:	3308      	adds	r3, #8
 80081c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80081c4:	4a17      	ldr	r2, [pc, #92]	; (8008224 <inc_lock+0x118>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	4413      	add	r3, r2
 80081cc:	330c      	adds	r3, #12
 80081ce:	2200      	movs	r2, #0
 80081d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d009      	beq.n	80081ec <inc_lock+0xe0>
 80081d8:	4a12      	ldr	r2, [pc, #72]	; (8008224 <inc_lock+0x118>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	4413      	add	r3, r2
 80081e0:	330c      	adds	r3, #12
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <inc_lock+0xe0>
 80081e8:	2300      	movs	r3, #0
 80081ea:	e015      	b.n	8008218 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d108      	bne.n	8008204 <inc_lock+0xf8>
 80081f2:	4a0c      	ldr	r2, [pc, #48]	; (8008224 <inc_lock+0x118>)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	4413      	add	r3, r2
 80081fa:	330c      	adds	r3, #12
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	3301      	adds	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	e001      	b.n	8008208 <inc_lock+0xfc>
 8008204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008208:	4906      	ldr	r1, [pc, #24]	; (8008224 <inc_lock+0x118>)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	440b      	add	r3, r1
 8008210:	330c      	adds	r3, #12
 8008212:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	2000d02c 	.word	0x2000d02c

08008228 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3b01      	subs	r3, #1
 8008234:	607b      	str	r3, [r7, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d825      	bhi.n	8008288 <dec_lock+0x60>
		n = Files[i].ctr;
 800823c:	4a17      	ldr	r2, [pc, #92]	; (800829c <dec_lock+0x74>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	4413      	add	r3, r2
 8008244:	330c      	adds	r3, #12
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800824a:	89fb      	ldrh	r3, [r7, #14]
 800824c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008250:	d101      	bne.n	8008256 <dec_lock+0x2e>
 8008252:	2300      	movs	r3, #0
 8008254:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <dec_lock+0x3a>
 800825c:	89fb      	ldrh	r3, [r7, #14]
 800825e:	3b01      	subs	r3, #1
 8008260:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <dec_lock+0x74>)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	4413      	add	r3, r2
 800826a:	330c      	adds	r3, #12
 800826c:	89fa      	ldrh	r2, [r7, #14]
 800826e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008270:	89fb      	ldrh	r3, [r7, #14]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <dec_lock+0x5a>
 8008276:	4a09      	ldr	r2, [pc, #36]	; (800829c <dec_lock+0x74>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	4413      	add	r3, r2
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	737b      	strb	r3, [r7, #13]
 8008286:	e001      	b.n	800828c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008288:	2302      	movs	r3, #2
 800828a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800828c:	7b7b      	ldrb	r3, [r7, #13]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	2000d02c 	.word	0x2000d02c

080082a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80082a8:	2300      	movs	r3, #0
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e010      	b.n	80082d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80082ae:	4a0d      	ldr	r2, [pc, #52]	; (80082e4 <clear_lock+0x44>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	4413      	add	r3, r2
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d105      	bne.n	80082ca <clear_lock+0x2a>
 80082be:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <clear_lock+0x44>)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	4413      	add	r3, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d9eb      	bls.n	80082ae <clear_lock+0xe>
	}
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	2000d02c 	.word	0x2000d02c

080082e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	78db      	ldrb	r3, [r3, #3]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d034      	beq.n	8008366 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7858      	ldrb	r0, [r3, #1]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800830c:	2301      	movs	r3, #1
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	f7ff fd38 	bl	8007d84 <disk_write>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <sync_window+0x38>
			res = FR_DISK_ERR;
 800831a:	2301      	movs	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	e022      	b.n	8008366 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	1ad2      	subs	r2, r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	429a      	cmp	r2, r3
 8008334:	d217      	bcs.n	8008366 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	789b      	ldrb	r3, [r3, #2]
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	e010      	b.n	8008360 <sync_window+0x78>
					wsect += fs->fsize;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4413      	add	r3, r2
 8008346:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7858      	ldrb	r0, [r3, #1]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008352:	2301      	movs	r3, #1
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	f7ff fd15 	bl	8007d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3b01      	subs	r3, #1
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d8eb      	bhi.n	800833e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d01b      	beq.n	80083c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff ffad 	bl	80082e8 <sync_window>
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d113      	bne.n	80083c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7858      	ldrb	r0, [r3, #1]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083a2:	2301      	movs	r3, #1
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	f7ff fccd 	bl	8007d44 <disk_read>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80083b0:	f04f 33ff 	mov.w	r3, #4294967295
 80083b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff ff87 	bl	80082e8 <sync_window>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d158      	bne.n	8008496 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d148      	bne.n	800847e <sync_fs+0xb2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d144      	bne.n	800847e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3334      	adds	r3, #52	; 0x34
 80083f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fda9 	bl	8007f56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3334      	adds	r3, #52	; 0x34
 8008408:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800840c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff fd38 	bl	8007e86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3334      	adds	r3, #52	; 0x34
 800841a:	4921      	ldr	r1, [pc, #132]	; (80084a0 <sync_fs+0xd4>)
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fd4d 	bl	8007ebc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3334      	adds	r3, #52	; 0x34
 8008426:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800842a:	491e      	ldr	r1, [pc, #120]	; (80084a4 <sync_fs+0xd8>)
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff fd45 	bl	8007ebc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3334      	adds	r3, #52	; 0x34
 8008436:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f7ff fd3b 	bl	8007ebc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3334      	adds	r3, #52	; 0x34
 800844a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7ff fd31 	bl	8007ebc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7858      	ldrb	r0, [r3, #1]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008472:	2301      	movs	r3, #1
 8008474:	f7ff fc86 	bl	8007d84 <disk_write>
			fs->fsi_flag = 0;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2200      	movs	r2, #0
 8008484:	2100      	movs	r1, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fc9c 	bl	8007dc4 <disk_ioctl>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <sync_fs+0xca>
 8008492:	2301      	movs	r3, #1
 8008494:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	41615252 	.word	0x41615252
 80084a4:	61417272 	.word	0x61417272

080084a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	3b02      	subs	r3, #2
 80084b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	3b02      	subs	r3, #2
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d301      	bcc.n	80084c8 <clust2sect+0x20>
 80084c4:	2300      	movs	r3, #0
 80084c6:	e008      	b.n	80084da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	895b      	ldrh	r3, [r3, #10]
 80084cc:	461a      	mov	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	fb03 f202 	mul.w	r2, r3, r2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	4413      	add	r3, r2
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d904      	bls.n	8008506 <get_fat+0x20>
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d302      	bcc.n	800850c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008506:	2301      	movs	r3, #1
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	e08f      	b.n	800862c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800850c:	f04f 33ff 	mov.w	r3, #4294967295
 8008510:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d062      	beq.n	80085e0 <get_fat+0xfa>
 800851a:	2b03      	cmp	r3, #3
 800851c:	dc7c      	bgt.n	8008618 <get_fat+0x132>
 800851e:	2b01      	cmp	r3, #1
 8008520:	d002      	beq.n	8008528 <get_fat+0x42>
 8008522:	2b02      	cmp	r3, #2
 8008524:	d042      	beq.n	80085ac <get_fat+0xc6>
 8008526:	e077      	b.n	8008618 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	0a5b      	lsrs	r3, r3, #9
 800853e:	4413      	add	r3, r2
 8008540:	4619      	mov	r1, r3
 8008542:	6938      	ldr	r0, [r7, #16]
 8008544:	f7ff ff14 	bl	8008370 <move_window>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d167      	bne.n	800861e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	60fa      	str	r2, [r7, #12]
 8008554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4413      	add	r3, r2
 800855c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008560:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	0a5b      	lsrs	r3, r3, #9
 800856a:	4413      	add	r3, r2
 800856c:	4619      	mov	r1, r3
 800856e:	6938      	ldr	r0, [r7, #16]
 8008570:	f7ff fefe 	bl	8008370 <move_window>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d153      	bne.n	8008622 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4413      	add	r3, r2
 8008584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	461a      	mov	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4313      	orrs	r3, r2
 8008590:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <get_fat+0xbc>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	091b      	lsrs	r3, r3, #4
 80085a0:	e002      	b.n	80085a8 <get_fat+0xc2>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a8:	617b      	str	r3, [r7, #20]
			break;
 80085aa:	e03f      	b.n	800862c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	4413      	add	r3, r2
 80085b6:	4619      	mov	r1, r3
 80085b8:	6938      	ldr	r0, [r7, #16]
 80085ba:	f7ff fed9 	bl	8008370 <move_window>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d130      	bne.n	8008626 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80085d2:	4413      	add	r3, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fc1b 	bl	8007e10 <ld_word>
 80085da:	4603      	mov	r3, r0
 80085dc:	617b      	str	r3, [r7, #20]
			break;
 80085de:	e025      	b.n	800862c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	09db      	lsrs	r3, r3, #7
 80085e8:	4413      	add	r3, r2
 80085ea:	4619      	mov	r1, r3
 80085ec:	6938      	ldr	r0, [r7, #16]
 80085ee:	f7ff febf 	bl	8008370 <move_window>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d118      	bne.n	800862a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008606:	4413      	add	r3, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fc19 	bl	8007e40 <ld_dword>
 800860e:	4603      	mov	r3, r0
 8008610:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008614:	617b      	str	r3, [r7, #20]
			break;
 8008616:	e009      	b.n	800862c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	e006      	b.n	800862c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800861e:	bf00      	nop
 8008620:	e004      	b.n	800862c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800862a:	bf00      	nop
		}
	}

	return val;
 800862c:	697b      	ldr	r3, [r7, #20]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008636:	b590      	push	{r4, r7, lr}
 8008638:	b089      	sub	sp, #36	; 0x24
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008642:	2302      	movs	r3, #2
 8008644:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b01      	cmp	r3, #1
 800864a:	f240 80d2 	bls.w	80087f2 <put_fat+0x1bc>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	429a      	cmp	r2, r3
 8008656:	f080 80cc 	bcs.w	80087f2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b03      	cmp	r3, #3
 8008660:	f000 8096 	beq.w	8008790 <put_fat+0x15a>
 8008664:	2b03      	cmp	r3, #3
 8008666:	f300 80cd 	bgt.w	8008804 <put_fat+0x1ce>
 800866a:	2b01      	cmp	r3, #1
 800866c:	d002      	beq.n	8008674 <put_fat+0x3e>
 800866e:	2b02      	cmp	r3, #2
 8008670:	d06e      	beq.n	8008750 <put_fat+0x11a>
 8008672:	e0c7      	b.n	8008804 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	085b      	lsrs	r3, r3, #1
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	4413      	add	r3, r2
 8008680:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	0a5b      	lsrs	r3, r3, #9
 800868a:	4413      	add	r3, r2
 800868c:	4619      	mov	r1, r3
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fe6e 	bl	8008370 <move_window>
 8008694:	4603      	mov	r3, r0
 8008696:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008698:	7ffb      	ldrb	r3, [r7, #31]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 80ab 	bne.w	80087f6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	1c59      	adds	r1, r3, #1
 80086aa:	61b9      	str	r1, [r7, #24]
 80086ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b0:	4413      	add	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00d      	beq.n	80086da <put_fat+0xa4>
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b25b      	sxtb	r3, r3
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	b25a      	sxtb	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	4313      	orrs	r3, r2
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	e001      	b.n	80086de <put_fat+0xa8>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	0a5b      	lsrs	r3, r3, #9
 80086f0:	4413      	add	r3, r2
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff fe3b 	bl	8008370 <move_window>
 80086fa:	4603      	mov	r3, r0
 80086fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086fe:	7ffb      	ldrb	r3, [r7, #31]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d17a      	bne.n	80087fa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008710:	4413      	add	r3, r2
 8008712:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <put_fat+0xf0>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	091b      	lsrs	r3, r3, #4
 8008722:	b2db      	uxtb	r3, r3
 8008724:	e00e      	b.n	8008744 <put_fat+0x10e>
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	b25b      	sxtb	r3, r3
 800872c:	f023 030f 	bic.w	r3, r3, #15
 8008730:	b25a      	sxtb	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	b25b      	sxtb	r3, r3
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	b25b      	sxtb	r3, r3
 800873e:	4313      	orrs	r3, r2
 8008740:	b25b      	sxtb	r3, r3
 8008742:	b2db      	uxtb	r3, r3
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	70da      	strb	r2, [r3, #3]
			break;
 800874e:	e059      	b.n	8008804 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	4413      	add	r3, r2
 800875a:	4619      	mov	r1, r3
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f7ff fe07 	bl	8008370 <move_window>
 8008762:	4603      	mov	r3, r0
 8008764:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008766:	7ffb      	ldrb	r3, [r7, #31]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d148      	bne.n	80087fe <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800877a:	4413      	add	r3, r2
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	b292      	uxth	r2, r2
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fb7f 	bl	8007e86 <st_word>
			fs->wflag = 1;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	70da      	strb	r2, [r3, #3]
			break;
 800878e:	e039      	b.n	8008804 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	09db      	lsrs	r3, r3, #7
 8008798:	4413      	add	r3, r2
 800879a:	4619      	mov	r1, r3
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff fde7 	bl	8008370 <move_window>
 80087a2:	4603      	mov	r3, r0
 80087a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d12a      	bne.n	8008802 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80087c0:	4413      	add	r3, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff fb3c 	bl	8007e40 <ld_dword>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087ce:	4323      	orrs	r3, r4
 80087d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80087e0:	4413      	add	r3, r2
 80087e2:	6879      	ldr	r1, [r7, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fb69 	bl	8007ebc <st_dword>
			fs->wflag = 1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	70da      	strb	r2, [r3, #3]
			break;
 80087f0:	e008      	b.n	8008804 <put_fat+0x1ce>
		}
	}
 80087f2:	bf00      	nop
 80087f4:	e006      	b.n	8008804 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80087f6:	bf00      	nop
 80087f8:	e004      	b.n	8008804 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80087fa:	bf00      	nop
 80087fc:	e002      	b.n	8008804 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80087fe:	bf00      	nop
 8008800:	e000      	b.n	8008804 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008802:	bf00      	nop
	return res;
 8008804:	7ffb      	ldrb	r3, [r7, #31]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3724      	adds	r7, #36	; 0x24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd90      	pop	{r4, r7, pc}

0800880e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b088      	sub	sp, #32
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d904      	bls.n	8008834 <remove_chain+0x26>
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	429a      	cmp	r2, r3
 8008832:	d301      	bcc.n	8008838 <remove_chain+0x2a>
 8008834:	2302      	movs	r3, #2
 8008836:	e04b      	b.n	80088d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00c      	beq.n	8008858 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	69b8      	ldr	r0, [r7, #24]
 8008846:	f7ff fef6 	bl	8008636 <put_fat>
 800884a:	4603      	mov	r3, r0
 800884c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800884e:	7ffb      	ldrb	r3, [r7, #31]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <remove_chain+0x4a>
 8008854:	7ffb      	ldrb	r3, [r7, #31]
 8008856:	e03b      	b.n	80088d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7ff fe43 	bl	80084e6 <get_fat>
 8008860:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d031      	beq.n	80088cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <remove_chain+0x64>
 800886e:	2302      	movs	r3, #2
 8008870:	e02e      	b.n	80088d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d101      	bne.n	800887e <remove_chain+0x70>
 800887a:	2301      	movs	r3, #1
 800887c:	e028      	b.n	80088d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800887e:	2200      	movs	r2, #0
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	69b8      	ldr	r0, [r7, #24]
 8008884:	f7ff fed7 	bl	8008636 <put_fat>
 8008888:	4603      	mov	r3, r0
 800888a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800888c:	7ffb      	ldrb	r3, [r7, #31]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <remove_chain+0x88>
 8008892:	7ffb      	ldrb	r3, [r7, #31]
 8008894:	e01c      	b.n	80088d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	3b02      	subs	r3, #2
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d20b      	bcs.n	80088bc <remove_chain+0xae>
			fs->free_clst++;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	791b      	ldrb	r3, [r3, #4]
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d3c6      	bcc.n	8008858 <remove_chain+0x4a>
 80088ca:	e000      	b.n	80088ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80088cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3720      	adds	r7, #32
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10d      	bne.n	800890a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <create_chain+0x2c>
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	429a      	cmp	r2, r3
 8008902:	d31b      	bcc.n	800893c <create_chain+0x64>
 8008904:	2301      	movs	r3, #1
 8008906:	61bb      	str	r3, [r7, #24]
 8008908:	e018      	b.n	800893c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff fdea 	bl	80084e6 <get_fat>
 8008912:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d801      	bhi.n	800891e <create_chain+0x46>
 800891a:	2301      	movs	r3, #1
 800891c:	e070      	b.n	8008a00 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d101      	bne.n	800892a <create_chain+0x52>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	e06a      	b.n	8008a00 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	429a      	cmp	r2, r3
 8008932:	d201      	bcs.n	8008938 <create_chain+0x60>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	e063      	b.n	8008a00 <create_chain+0x128>
		scl = clst;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	3301      	adds	r3, #1
 8008944:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	429a      	cmp	r2, r3
 800894e:	d307      	bcc.n	8008960 <create_chain+0x88>
				ncl = 2;
 8008950:	2302      	movs	r3, #2
 8008952:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	429a      	cmp	r2, r3
 800895a:	d901      	bls.n	8008960 <create_chain+0x88>
 800895c:	2300      	movs	r3, #0
 800895e:	e04f      	b.n	8008a00 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008960:	69f9      	ldr	r1, [r7, #28]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fdbf 	bl	80084e6 <get_fat>
 8008968:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00e      	beq.n	800898e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d003      	beq.n	800897e <create_chain+0xa6>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d101      	bne.n	8008982 <create_chain+0xaa>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e03e      	b.n	8008a00 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	429a      	cmp	r2, r3
 8008988:	d1da      	bne.n	8008940 <create_chain+0x68>
 800898a:	2300      	movs	r3, #0
 800898c:	e038      	b.n	8008a00 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800898e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	69f9      	ldr	r1, [r7, #28]
 8008996:	6938      	ldr	r0, [r7, #16]
 8008998:	f7ff fe4d 	bl	8008636 <put_fat>
 800899c:	4603      	mov	r3, r0
 800899e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <create_chain+0xe2>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d006      	beq.n	80089ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6938      	ldr	r0, [r7, #16]
 80089b2:	f7ff fe40 	bl	8008636 <put_fat>
 80089b6:	4603      	mov	r3, r0
 80089b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d116      	bne.n	80089ee <create_chain+0x116>
		fs->last_clst = ncl;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	695a      	ldr	r2, [r3, #20]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	3b02      	subs	r3, #2
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d804      	bhi.n	80089de <create_chain+0x106>
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	1e5a      	subs	r2, r3, #1
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	791b      	ldrb	r3, [r3, #4]
 80089e2:	f043 0301 	orr.w	r3, r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	711a      	strb	r2, [r3, #4]
 80089ec:	e007      	b.n	80089fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d102      	bne.n	80089fa <create_chain+0x122>
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	e000      	b.n	80089fc <create_chain+0x124>
 80089fa:	2301      	movs	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80089fe:	69fb      	ldr	r3, [r7, #28]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	0a5b      	lsrs	r3, r3, #9
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	8952      	ldrh	r2, [r2, #10]
 8008a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1d1a      	adds	r2, r3, #4
 8008a32:	613a      	str	r2, [r7, #16]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <clmt_clust+0x3a>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e010      	b.n	8008a64 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d307      	bcc.n	8008a5a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	3304      	adds	r3, #4
 8008a56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a58:	e7e9      	b.n	8008a2e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	4413      	add	r3, r2
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a86:	d204      	bcs.n	8008a92 <dir_sdi+0x22>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f003 031f 	and.w	r3, r3, #31
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a92:	2302      	movs	r3, #2
 8008a94:	e063      	b.n	8008b5e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <dir_sdi+0x46>
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d902      	bls.n	8008ab6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10c      	bne.n	8008ad6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	8912      	ldrh	r2, [r2, #8]
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d301      	bcc.n	8008acc <dir_sdi+0x5c>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e048      	b.n	8008b5e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	61da      	str	r2, [r3, #28]
 8008ad4:	e029      	b.n	8008b2a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	895b      	ldrh	r3, [r3, #10]
 8008ada:	025b      	lsls	r3, r3, #9
 8008adc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ade:	e019      	b.n	8008b14 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6979      	ldr	r1, [r7, #20]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fcfe 	bl	80084e6 <get_fat>
 8008aea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d101      	bne.n	8008af8 <dir_sdi+0x88>
 8008af4:	2301      	movs	r3, #1
 8008af6:	e032      	b.n	8008b5e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d904      	bls.n	8008b08 <dir_sdi+0x98>
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d301      	bcc.n	8008b0c <dir_sdi+0x9c>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e028      	b.n	8008b5e <dir_sdi+0xee>
			ofs -= csz;
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d2e1      	bcs.n	8008ae0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008b1c:	6979      	ldr	r1, [r7, #20]
 8008b1e:	6938      	ldr	r0, [r7, #16]
 8008b20:	f7ff fcc2 	bl	80084a8 <clust2sect>
 8008b24:	4602      	mov	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <dir_sdi+0xcc>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e010      	b.n	8008b5e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	0a5b      	lsrs	r3, r3, #9
 8008b44:	441a      	add	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b56:	441a      	add	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	3320      	adds	r3, #32
 8008b7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <dir_next+0x28>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b8c:	d301      	bcc.n	8008b92 <dir_next+0x2c>
 8008b8e:	2304      	movs	r3, #4
 8008b90:	e0aa      	b.n	8008ce8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f040 8098 	bne.w	8008cce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	8912      	ldrh	r2, [r2, #8]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	f0c0 8088 	bcc.w	8008cce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	61da      	str	r2, [r3, #28]
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	e08f      	b.n	8008ce8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	0a5b      	lsrs	r3, r3, #9
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	8952      	ldrh	r2, [r2, #10]
 8008bd0:	3a01      	subs	r2, #1
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d17a      	bne.n	8008cce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f7ff fc80 	bl	80084e6 <get_fat>
 8008be6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d801      	bhi.n	8008bf2 <dir_next+0x8c>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e07a      	b.n	8008ce8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d101      	bne.n	8008bfe <dir_next+0x98>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e074      	b.n	8008ce8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d358      	bcc.n	8008cba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d104      	bne.n	8008c18 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	61da      	str	r2, [r3, #28]
 8008c14:	2304      	movs	r3, #4
 8008c16:	e067      	b.n	8008ce8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7ff fe59 	bl	80088d8 <create_chain>
 8008c26:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <dir_next+0xcc>
 8008c2e:	2307      	movs	r3, #7
 8008c30:	e05a      	b.n	8008ce8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <dir_next+0xd6>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e055      	b.n	8008ce8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d101      	bne.n	8008c48 <dir_next+0xe2>
 8008c44:	2301      	movs	r3, #1
 8008c46:	e04f      	b.n	8008ce8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff fb4d 	bl	80082e8 <sync_window>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <dir_next+0xf2>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e047      	b.n	8008ce8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3334      	adds	r3, #52	; 0x34
 8008c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff f977 	bl	8007f56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	6979      	ldr	r1, [r7, #20]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff fc1a 	bl	80084a8 <clust2sect>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	631a      	str	r2, [r3, #48]	; 0x30
 8008c7a:	e012      	b.n	8008ca2 <dir_next+0x13c>
						fs->wflag = 1;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7ff fb30 	bl	80082e8 <sync_window>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <dir_next+0x12c>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e02a      	b.n	8008ce8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	3301      	adds	r3, #1
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	895b      	ldrh	r3, [r3, #10]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d3e6      	bcc.n	8008c7c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad2      	subs	r2, r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008cc0:	6979      	ldr	r1, [r7, #20]
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fbf0 	bl	80084a8 <clust2sect>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce0:	441a      	add	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff feb4 	bl	8008a70 <dir_sdi>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d12b      	bne.n	8008d6a <dir_alloc+0x7a>
		n = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fb27 	bl	8008370 <move_window>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11d      	bne.n	8008d68 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2be5      	cmp	r3, #229	; 0xe5
 8008d34:	d004      	beq.n	8008d40 <dir_alloc+0x50>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	3301      	adds	r3, #1
 8008d44:	613b      	str	r3, [r7, #16]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d102      	bne.n	8008d54 <dir_alloc+0x64>
 8008d4e:	e00c      	b.n	8008d6a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008d50:	2300      	movs	r3, #0
 8008d52:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008d54:	2101      	movs	r1, #1
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ff05 	bl	8008b66 <dir_next>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0d7      	beq.n	8008d16 <dir_alloc+0x26>
 8008d66:	e000      	b.n	8008d6a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d68:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d101      	bne.n	8008d74 <dir_alloc+0x84>
 8008d70:	2307      	movs	r3, #7
 8008d72:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	331a      	adds	r3, #26
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff f83f 	bl	8007e10 <ld_word>
 8008d92:	4603      	mov	r3, r0
 8008d94:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d109      	bne.n	8008db2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3314      	adds	r3, #20
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff f834 	bl	8007e10 <ld_word>
 8008da8:	4603      	mov	r3, r0
 8008daa:	041b      	lsls	r3, r3, #16
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008db2:	68fb      	ldr	r3, [r7, #12]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	331a      	adds	r3, #26
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	b292      	uxth	r2, r2
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff f857 	bl	8007e86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d109      	bne.n	8008df4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f103 0214 	add.w	r2, r3, #20
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	0c1b      	lsrs	r3, r3, #16
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7ff f849 	bl	8007e86 <st_word>
	}
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008dfc:	b590      	push	{r4, r7, lr}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	331a      	adds	r3, #26
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff f800 	bl	8007e10 <ld_word>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <cmp_lfn+0x1e>
 8008e16:	2300      	movs	r3, #0
 8008e18:	e059      	b.n	8008ece <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e22:	1e5a      	subs	r2, r3, #1
 8008e24:	4613      	mov	r3, r2
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008e30:	2301      	movs	r3, #1
 8008e32:	81fb      	strh	r3, [r7, #14]
 8008e34:	2300      	movs	r3, #0
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	e033      	b.n	8008ea2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008e3a:	4a27      	ldr	r2, [pc, #156]	; (8008ed8 <cmp_lfn+0xdc>)
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	4413      	add	r3, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe ffe1 	bl	8007e10 <ld_word>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008e52:	89fb      	ldrh	r3, [r7, #14]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01a      	beq.n	8008e8e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8008e5c:	d812      	bhi.n	8008e84 <cmp_lfn+0x88>
 8008e5e:	89bb      	ldrh	r3, [r7, #12]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f002 fea1 	bl	800bba8 <ff_wtoupper>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461c      	mov	r4, r3
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	617a      	str	r2, [r7, #20]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	4413      	add	r3, r2
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fe95 	bl	800bba8 <ff_wtoupper>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	429c      	cmp	r4, r3
 8008e82:	d001      	beq.n	8008e88 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008e84:	2300      	movs	r3, #0
 8008e86:	e022      	b.n	8008ece <cmp_lfn+0xd2>
			}
			wc = uc;
 8008e88:	89bb      	ldrh	r3, [r7, #12]
 8008e8a:	81fb      	strh	r3, [r7, #14]
 8008e8c:	e006      	b.n	8008e9c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008e8e:	89bb      	ldrh	r3, [r7, #12]
 8008e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d001      	beq.n	8008e9c <cmp_lfn+0xa0>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e018      	b.n	8008ece <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2b0c      	cmp	r3, #12
 8008ea6:	d9c8      	bls.n	8008e3a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <cmp_lfn+0xd0>
 8008eb4:	89fb      	ldrh	r3, [r7, #14]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d008      	beq.n	8008ecc <cmp_lfn+0xd0>
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <cmp_lfn+0xd0>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e000      	b.n	8008ece <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008ecc:	2301      	movs	r3, #1
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd90      	pop	{r4, r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	080251e4 	.word	0x080251e4

08008edc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	331a      	adds	r3, #26
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe ff90 	bl	8007e10 <ld_word>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <pick_lfn+0x1e>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e04d      	b.n	8008f96 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f02:	1e5a      	subs	r2, r3, #1
 8008f04:	4613      	mov	r3, r2
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f10:	2301      	movs	r3, #1
 8008f12:	81fb      	strh	r3, [r7, #14]
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	e028      	b.n	8008f6c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f1a:	4a21      	ldr	r2, [pc, #132]	; (8008fa0 <pick_lfn+0xc4>)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	4413      	add	r3, r2
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	4413      	add	r3, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe ff71 	bl	8007e10 <ld_word>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008f32:	89fb      	ldrh	r3, [r7, #14]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00f      	beq.n	8008f58 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2bfe      	cmp	r3, #254	; 0xfe
 8008f3c:	d901      	bls.n	8008f42 <pick_lfn+0x66>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e029      	b.n	8008f96 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008f42:	89bb      	ldrh	r3, [r7, #12]
 8008f44:	81fb      	strh	r3, [r7, #14]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	617a      	str	r2, [r7, #20]
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	89fa      	ldrh	r2, [r7, #14]
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e006      	b.n	8008f66 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f58:	89bb      	ldrh	r3, [r7, #12]
 8008f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d001      	beq.n	8008f66 <pick_lfn+0x8a>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e017      	b.n	8008f96 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2b0c      	cmp	r3, #12
 8008f70:	d9d3      	bls.n	8008f1a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2bfe      	cmp	r3, #254	; 0xfe
 8008f82:	d901      	bls.n	8008f88 <pick_lfn+0xac>
 8008f84:	2300      	movs	r3, #0
 8008f86:	e006      	b.n	8008f96 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	4413      	add	r3, r2
 8008f90:	2200      	movs	r2, #0
 8008f92:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008f94:	2301      	movs	r3, #1
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	080251e4 	.word	0x080251e4

08008fa4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	71fb      	strb	r3, [r7, #7]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	330d      	adds	r3, #13
 8008fbe:	79ba      	ldrb	r2, [r7, #6]
 8008fc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	330b      	adds	r3, #11
 8008fc6:	220f      	movs	r2, #15
 8008fc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	331a      	adds	r3, #26
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe ff54 	bl	8007e86 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	1e5a      	subs	r2, r3, #1
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	82fb      	strh	r3, [r7, #22]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008ff6:	8afb      	ldrh	r3, [r7, #22]
 8008ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d007      	beq.n	8009010 <put_lfn+0x6c>
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	61fa      	str	r2, [r7, #28]
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009010:	4a17      	ldr	r2, [pc, #92]	; (8009070 <put_lfn+0xcc>)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	4413      	add	r3, r2
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	8afa      	ldrh	r2, [r7, #22]
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe ff2f 	bl	8007e86 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009028:	8afb      	ldrh	r3, [r7, #22]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <put_lfn+0x90>
 800902e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009032:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	3301      	adds	r3, #1
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b0c      	cmp	r3, #12
 800903e:	d9da      	bls.n	8008ff6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009040:	8afb      	ldrh	r3, [r7, #22]
 8009042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009046:	4293      	cmp	r3, r2
 8009048:	d006      	beq.n	8009058 <put_lfn+0xb4>
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d103      	bne.n	8009060 <put_lfn+0xbc>
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	79fa      	ldrb	r2, [r7, #7]
 8009064:	701a      	strb	r2, [r3, #0]
}
 8009066:	bf00      	nop
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	080251e4 	.word	0x080251e4

08009074 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08c      	sub	sp, #48	; 0x30
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009082:	220b      	movs	r2, #11
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7fe ff44 	bl	8007f14 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b05      	cmp	r3, #5
 8009090:	d92b      	bls.n	80090ea <gen_numname+0x76>
		sr = seq;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009096:	e022      	b.n	80090de <gen_numname+0x6a>
			wc = *lfn++;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	1c9a      	adds	r2, r3, #2
 800909c:	607a      	str	r2, [r7, #4]
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80090a2:	2300      	movs	r3, #0
 80090a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090a6:	e017      	b.n	80090d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	005a      	lsls	r2, r3, #1
 80090ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80090b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <gen_numname+0x5e>
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80090cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80090d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	3301      	adds	r3, #1
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	2b0f      	cmp	r3, #15
 80090dc:	d9e4      	bls.n	80090a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1d8      	bne.n	8009098 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80090ea:	2307      	movs	r3, #7
 80090ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	3330      	adds	r3, #48	; 0x30
 80090fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80090fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009102:	2b39      	cmp	r3, #57	; 0x39
 8009104:	d904      	bls.n	8009110 <gen_numname+0x9c>
 8009106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800910a:	3307      	adds	r3, #7
 800910c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	62ba      	str	r2, [r7, #40]	; 0x28
 8009116:	3330      	adds	r3, #48	; 0x30
 8009118:	443b      	add	r3, r7
 800911a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800911e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	091b      	lsrs	r3, r3, #4
 8009126:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1df      	bne.n	80090ee <gen_numname+0x7a>
	ns[i] = '~';
 800912e:	f107 0214 	add.w	r2, r7, #20
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	4413      	add	r3, r2
 8009136:	227e      	movs	r2, #126	; 0x7e
 8009138:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
 800913e:	e002      	b.n	8009146 <gen_numname+0xd2>
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	3301      	adds	r3, #1
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
 8009146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	429a      	cmp	r2, r3
 800914c:	d205      	bcs.n	800915a <gen_numname+0xe6>
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	4413      	add	r3, r2
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b20      	cmp	r3, #32
 8009158:	d1f2      	bne.n	8009140 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	2b07      	cmp	r3, #7
 800915e:	d807      	bhi.n	8009170 <gen_numname+0xfc>
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	62ba      	str	r2, [r7, #40]	; 0x28
 8009166:	3330      	adds	r3, #48	; 0x30
 8009168:	443b      	add	r3, r7
 800916a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800916e:	e000      	b.n	8009172 <gen_numname+0xfe>
 8009170:	2120      	movs	r1, #32
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	627a      	str	r2, [r7, #36]	; 0x24
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	460a      	mov	r2, r1
 800917e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	2b07      	cmp	r3, #7
 8009184:	d9e9      	bls.n	800915a <gen_numname+0xe6>
}
 8009186:	bf00      	nop
 8009188:	bf00      	nop
 800918a:	3730      	adds	r7, #48	; 0x30
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800919c:	230b      	movs	r3, #11
 800919e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	0852      	lsrs	r2, r2, #1
 80091a6:	01db      	lsls	r3, r3, #7
 80091a8:	4313      	orrs	r3, r2
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	1c59      	adds	r1, r3, #1
 80091b0:	6079      	str	r1, [r7, #4]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	4413      	add	r3, r2
 80091b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	60bb      	str	r3, [r7, #8]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1ed      	bne.n	80091a0 <sum_sfn+0x10>
	return sum;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80091dc:	2304      	movs	r3, #4
 80091de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80091e6:	23ff      	movs	r3, #255	; 0xff
 80091e8:	757b      	strb	r3, [r7, #21]
 80091ea:	23ff      	movs	r3, #255	; 0xff
 80091ec:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80091ee:	e081      	b.n	80092f4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	4619      	mov	r1, r3
 80091f6:	6938      	ldr	r0, [r7, #16]
 80091f8:	f7ff f8ba 	bl	8008370 <move_window>
 80091fc:	4603      	mov	r3, r0
 80091fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d17c      	bne.n	8009300 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800920e:	7dbb      	ldrb	r3, [r7, #22]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009214:	2304      	movs	r3, #4
 8009216:	75fb      	strb	r3, [r7, #23]
 8009218:	e077      	b.n	800930a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	330b      	adds	r3, #11
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009226:	73fb      	strb	r3, [r7, #15]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800922e:	7dbb      	ldrb	r3, [r7, #22]
 8009230:	2be5      	cmp	r3, #229	; 0xe5
 8009232:	d00e      	beq.n	8009252 <dir_read+0x80>
 8009234:	7dbb      	ldrb	r3, [r7, #22]
 8009236:	2b2e      	cmp	r3, #46	; 0x2e
 8009238:	d00b      	beq.n	8009252 <dir_read+0x80>
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	f023 0320 	bic.w	r3, r3, #32
 8009240:	2b08      	cmp	r3, #8
 8009242:	bf0c      	ite	eq
 8009244:	2301      	moveq	r3, #1
 8009246:	2300      	movne	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	4293      	cmp	r3, r2
 8009250:	d002      	beq.n	8009258 <dir_read+0x86>
				ord = 0xFF;
 8009252:	23ff      	movs	r3, #255	; 0xff
 8009254:	757b      	strb	r3, [r7, #21]
 8009256:	e044      	b.n	80092e2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	2b0f      	cmp	r3, #15
 800925c:	d12f      	bne.n	80092be <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800925e:	7dbb      	ldrb	r3, [r7, #22]
 8009260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00d      	beq.n	8009284 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	7b5b      	ldrb	r3, [r3, #13]
 800926e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009270:	7dbb      	ldrb	r3, [r7, #22]
 8009272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009276:	75bb      	strb	r3, [r7, #22]
 8009278:	7dbb      	ldrb	r3, [r7, #22]
 800927a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	695a      	ldr	r2, [r3, #20]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009284:	7dba      	ldrb	r2, [r7, #22]
 8009286:	7d7b      	ldrb	r3, [r7, #21]
 8009288:	429a      	cmp	r2, r3
 800928a:	d115      	bne.n	80092b8 <dir_read+0xe6>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	330d      	adds	r3, #13
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	7d3a      	ldrb	r2, [r7, #20]
 8009296:	429a      	cmp	r2, r3
 8009298:	d10e      	bne.n	80092b8 <dir_read+0xe6>
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	4619      	mov	r1, r3
 80092a4:	4610      	mov	r0, r2
 80092a6:	f7ff fe19 	bl	8008edc <pick_lfn>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <dir_read+0xe6>
 80092b0:	7d7b      	ldrb	r3, [r7, #21]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	e000      	b.n	80092ba <dir_read+0xe8>
 80092b8:	23ff      	movs	r3, #255	; 0xff
 80092ba:	757b      	strb	r3, [r7, #21]
 80092bc:	e011      	b.n	80092e2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80092be:	7d7b      	ldrb	r3, [r7, #21]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <dir_read+0x106>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff ff61 	bl	8009190 <sum_sfn>
 80092ce:	4603      	mov	r3, r0
 80092d0:	461a      	mov	r2, r3
 80092d2:	7d3b      	ldrb	r3, [r7, #20]
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d015      	beq.n	8009304 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f04f 32ff 	mov.w	r2, #4294967295
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80092e0:	e010      	b.n	8009304 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80092e2:	2100      	movs	r1, #0
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff fc3e 	bl	8008b66 <dir_next>
 80092ea:	4603      	mov	r3, r0
 80092ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <dir_read+0x136>
	while (dp->sect) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f47f af79 	bne.w	80091f0 <dir_read+0x1e>
 80092fe:	e004      	b.n	800930a <dir_read+0x138>
		if (res != FR_OK) break;
 8009300:	bf00      	nop
 8009302:	e002      	b.n	800930a <dir_read+0x138>
					break;
 8009304:	bf00      	nop
 8009306:	e000      	b.n	800930a <dir_read+0x138>
		if (res != FR_OK) break;
 8009308:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <dir_read+0x144>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	61da      	str	r2, [r3, #28]
	return res;
 8009316:	7dfb      	ldrb	r3, [r7, #23]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800932e:	2100      	movs	r1, #0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff fb9d 	bl	8008a70 <dir_sdi>
 8009336:	4603      	mov	r3, r0
 8009338:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <dir_find+0x24>
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	e0a9      	b.n	8009498 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	753b      	strb	r3, [r7, #20]
 8009348:	7d3b      	ldrb	r3, [r7, #20]
 800934a:	757b      	strb	r3, [r7, #21]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f04f 32ff 	mov.w	r2, #4294967295
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	4619      	mov	r1, r3
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f7ff f808 	bl	8008370 <move_window>
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f040 8090 	bne.w	800948c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009374:	7dbb      	ldrb	r3, [r7, #22]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d102      	bne.n	8009380 <dir_find+0x60>
 800937a:	2304      	movs	r3, #4
 800937c:	75fb      	strb	r3, [r7, #23]
 800937e:	e08a      	b.n	8009496 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	330b      	adds	r3, #11
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800938c:	73fb      	strb	r3, [r7, #15]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009394:	7dbb      	ldrb	r3, [r7, #22]
 8009396:	2be5      	cmp	r3, #229	; 0xe5
 8009398:	d007      	beq.n	80093aa <dir_find+0x8a>
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	f003 0308 	and.w	r3, r3, #8
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d009      	beq.n	80093b8 <dir_find+0x98>
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d006      	beq.n	80093b8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80093aa:	23ff      	movs	r3, #255	; 0xff
 80093ac:	757b      	strb	r3, [r7, #21]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f04f 32ff 	mov.w	r2, #4294967295
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30
 80093b6:	e05e      	b.n	8009476 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	2b0f      	cmp	r3, #15
 80093bc:	d136      	bne.n	800942c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d154      	bne.n	8009476 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80093cc:	7dbb      	ldrb	r3, [r7, #22]
 80093ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	7b5b      	ldrb	r3, [r3, #13]
 80093dc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80093de:	7dbb      	ldrb	r3, [r7, #22]
 80093e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e4:	75bb      	strb	r3, [r7, #22]
 80093e6:	7dbb      	ldrb	r3, [r7, #22]
 80093e8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	695a      	ldr	r2, [r3, #20]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80093f2:	7dba      	ldrb	r2, [r7, #22]
 80093f4:	7d7b      	ldrb	r3, [r7, #21]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d115      	bne.n	8009426 <dir_find+0x106>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	330d      	adds	r3, #13
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	7d3a      	ldrb	r2, [r7, #20]
 8009404:	429a      	cmp	r2, r3
 8009406:	d10e      	bne.n	8009426 <dir_find+0x106>
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f7ff fcf2 	bl	8008dfc <cmp_lfn>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <dir_find+0x106>
 800941e:	7d7b      	ldrb	r3, [r7, #21]
 8009420:	3b01      	subs	r3, #1
 8009422:	b2db      	uxtb	r3, r3
 8009424:	e000      	b.n	8009428 <dir_find+0x108>
 8009426:	23ff      	movs	r3, #255	; 0xff
 8009428:	757b      	strb	r3, [r7, #21]
 800942a:	e024      	b.n	8009476 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800942c:	7d7b      	ldrb	r3, [r7, #21]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <dir_find+0x126>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff feaa 	bl	8009190 <sum_sfn>
 800943c:	4603      	mov	r3, r0
 800943e:	461a      	mov	r2, r3
 8009440:	7d3b      	ldrb	r3, [r7, #20]
 8009442:	4293      	cmp	r3, r2
 8009444:	d024      	beq.n	8009490 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <dir_find+0x14a>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a18      	ldr	r0, [r3, #32]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3324      	adds	r3, #36	; 0x24
 800945c:	220b      	movs	r2, #11
 800945e:	4619      	mov	r1, r3
 8009460:	f7fe fd94 	bl	8007f8c <mem_cmp>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d014      	beq.n	8009494 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800946a:	23ff      	movs	r3, #255	; 0xff
 800946c:	757b      	strb	r3, [r7, #21]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009476:	2100      	movs	r1, #0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff fb74 	bl	8008b66 <dir_next>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f43f af65 	beq.w	8009354 <dir_find+0x34>
 800948a:	e004      	b.n	8009496 <dir_find+0x176>
		if (res != FR_OK) break;
 800948c:	bf00      	nop
 800948e:	e002      	b.n	8009496 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009490:	bf00      	nop
 8009492:	e000      	b.n	8009496 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009494:	bf00      	nop

	return res;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08c      	sub	sp, #48	; 0x30
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <dir_register+0x20>
 80094bc:	2306      	movs	r3, #6
 80094be:	e0e0      	b.n	8009682 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80094c0:	2300      	movs	r3, #0
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
 80094c4:	e002      	b.n	80094cc <dir_register+0x2c>
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	3301      	adds	r3, #1
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f4      	bne.n	80094c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80094e2:	f107 030c 	add.w	r3, r7, #12
 80094e6:	220c      	movs	r2, #12
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fd13 	bl	8007f14 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d032      	beq.n	800955e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2240      	movs	r2, #64	; 0x40
 80094fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009500:	2301      	movs	r3, #1
 8009502:	62bb      	str	r3, [r7, #40]	; 0x28
 8009504:	e016      	b.n	8009534 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	f107 010c 	add.w	r1, r7, #12
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	f7ff fdad 	bl	8009074 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff ff00 	bl	8009320 <dir_find>
 8009520:	4603      	mov	r3, r0
 8009522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	3301      	adds	r3, #1
 8009532:	62bb      	str	r3, [r7, #40]	; 0x28
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	2b63      	cmp	r3, #99	; 0x63
 8009538:	d9e5      	bls.n	8009506 <dir_register+0x66>
 800953a:	e000      	b.n	800953e <dir_register+0x9e>
			if (res != FR_OK) break;
 800953c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	2b64      	cmp	r3, #100	; 0x64
 8009542:	d101      	bne.n	8009548 <dir_register+0xa8>
 8009544:	2307      	movs	r3, #7
 8009546:	e09c      	b.n	8009682 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800954c:	2b04      	cmp	r3, #4
 800954e:	d002      	beq.n	8009556 <dir_register+0xb6>
 8009550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009554:	e095      	b.n	8009682 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009556:	7dfa      	ldrb	r2, [r7, #23]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	f003 0302 	and.w	r3, r3, #2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <dir_register+0xd8>
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	330c      	adds	r3, #12
 800956c:	4a47      	ldr	r2, [pc, #284]	; (800968c <dir_register+0x1ec>)
 800956e:	fba2 2303 	umull	r2, r3, r2, r3
 8009572:	089b      	lsrs	r3, r3, #2
 8009574:	3301      	adds	r3, #1
 8009576:	e000      	b.n	800957a <dir_register+0xda>
 8009578:	2301      	movs	r3, #1
 800957a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800957c:	6a39      	ldr	r1, [r7, #32]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fbb6 	bl	8008cf0 <dir_alloc>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800958a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d148      	bne.n	8009624 <dir_register+0x184>
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	3b01      	subs	r3, #1
 8009596:	623b      	str	r3, [r7, #32]
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d042      	beq.n	8009624 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695a      	ldr	r2, [r3, #20]
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	015b      	lsls	r3, r3, #5
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff fa60 	bl	8008a70 <dir_sdi>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80095b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d132      	bne.n	8009624 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3324      	adds	r3, #36	; 0x24
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fde4 	bl	8009190 <sum_sfn>
 80095c8:	4603      	mov	r3, r0
 80095ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	4619      	mov	r1, r3
 80095d2:	69f8      	ldr	r0, [r7, #28]
 80095d4:	f7fe fecc 	bl	8008370 <move_window>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80095de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d11d      	bne.n	8009622 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	68d8      	ldr	r0, [r3, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a19      	ldr	r1, [r3, #32]
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	7efb      	ldrb	r3, [r7, #27]
 80095f4:	f7ff fcd6 	bl	8008fa4 <put_lfn>
				fs->wflag = 1;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	2201      	movs	r2, #1
 80095fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80095fe:	2100      	movs	r1, #0
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff fab0 	bl	8008b66 <dir_next>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800960c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009610:	2b00      	cmp	r3, #0
 8009612:	d107      	bne.n	8009624 <dir_register+0x184>
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	3b01      	subs	r3, #1
 8009618:	623b      	str	r3, [r7, #32]
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1d5      	bne.n	80095cc <dir_register+0x12c>
 8009620:	e000      	b.n	8009624 <dir_register+0x184>
				if (res != FR_OK) break;
 8009622:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009628:	2b00      	cmp	r3, #0
 800962a:	d128      	bne.n	800967e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	4619      	mov	r1, r3
 8009632:	69f8      	ldr	r0, [r7, #28]
 8009634:	f7fe fe9c 	bl	8008370 <move_window>
 8009638:	4603      	mov	r3, r0
 800963a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800963e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009642:	2b00      	cmp	r3, #0
 8009644:	d11b      	bne.n	800967e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	2220      	movs	r2, #32
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fc81 	bl	8007f56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a18      	ldr	r0, [r3, #32]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3324      	adds	r3, #36	; 0x24
 800965c:	220b      	movs	r2, #11
 800965e:	4619      	mov	r1, r3
 8009660:	f7fe fc58 	bl	8007f14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	330c      	adds	r3, #12
 8009670:	f002 0218 	and.w	r2, r2, #24
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	2201      	movs	r2, #1
 800967c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800967e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009682:	4618      	mov	r0, r3
 8009684:	3730      	adds	r7, #48	; 0x30
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	4ec4ec4f 	.word	0x4ec4ec4f

08009690 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80c9 	beq.w	8009842 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d032      	beq.n	8009720 <get_fileinfo+0x90>
			i = j = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80096c2:	e01b      	b.n	80096fc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80096c4:	89fb      	ldrh	r3, [r7, #14]
 80096c6:	2100      	movs	r1, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f002 fa31 	bl	800bb30 <ff_convert>
 80096ce:	4603      	mov	r3, r0
 80096d0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80096d2:	89fb      	ldrh	r3, [r7, #14]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <get_fileinfo+0x4e>
 80096d8:	2300      	movs	r3, #0
 80096da:	61fb      	str	r3, [r7, #28]
 80096dc:	e01a      	b.n	8009714 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2bfe      	cmp	r3, #254	; 0xfe
 80096e2:	d902      	bls.n	80096ea <get_fileinfo+0x5a>
 80096e4:	2300      	movs	r3, #0
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	e014      	b.n	8009714 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	61fa      	str	r2, [r7, #28]
 80096f0:	89fa      	ldrh	r2, [r7, #14]
 80096f2:	b2d1      	uxtb	r1, r2
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	4413      	add	r3, r2
 80096f8:	460a      	mov	r2, r1
 80096fa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	1c59      	adds	r1, r3, #1
 8009704:	61b9      	str	r1, [r7, #24]
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	4413      	add	r3, r2
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	81fb      	strh	r3, [r7, #14]
 800970e:	89fb      	ldrh	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1d7      	bne.n	80096c4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	3316      	adds	r3, #22
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	61bb      	str	r3, [r7, #24]
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	4413      	add	r3, r2
 800972e:	3316      	adds	r3, #22
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009734:	e04c      	b.n	80097d0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1a      	ldr	r2, [r3, #32]
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	1c59      	adds	r1, r3, #1
 800973e:	61f9      	str	r1, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b20      	cmp	r3, #32
 800974a:	d100      	bne.n	800974e <get_fileinfo+0xbe>
 800974c:	e040      	b.n	80097d0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	2b05      	cmp	r3, #5
 8009752:	d101      	bne.n	8009758 <get_fileinfo+0xc8>
 8009754:	23e5      	movs	r3, #229	; 0xe5
 8009756:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	2b09      	cmp	r3, #9
 800975c:	d10f      	bne.n	800977e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800975e:	89bb      	ldrh	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <get_fileinfo+0xe0>
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	4413      	add	r3, r2
 800976a:	3316      	adds	r3, #22
 800976c:	222e      	movs	r2, #46	; 0x2e
 800976e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	61ba      	str	r2, [r7, #24]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	4413      	add	r3, r2
 800977a:	222e      	movs	r2, #46	; 0x2e
 800977c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	4413      	add	r3, r2
 8009784:	3309      	adds	r3, #9
 8009786:	7dfa      	ldrb	r2, [r7, #23]
 8009788:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800978a:	89bb      	ldrh	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d11c      	bne.n	80097ca <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d913      	bls.n	80097be <get_fileinfo+0x12e>
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b5a      	cmp	r3, #90	; 0x5a
 800979a:	d810      	bhi.n	80097be <get_fileinfo+0x12e>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	330c      	adds	r3, #12
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	461a      	mov	r2, r3
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d901      	bls.n	80097b0 <get_fileinfo+0x120>
 80097ac:	2310      	movs	r3, #16
 80097ae:	e000      	b.n	80097b2 <get_fileinfo+0x122>
 80097b0:	2308      	movs	r3, #8
 80097b2:	4013      	ands	r3, r2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	3320      	adds	r3, #32
 80097bc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	4413      	add	r3, r2
 80097c4:	3316      	adds	r3, #22
 80097c6:	7dfa      	ldrb	r2, [r7, #23]
 80097c8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	3301      	adds	r3, #1
 80097ce:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b0a      	cmp	r3, #10
 80097d4:	d9af      	bls.n	8009736 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80097d6:	89bb      	ldrh	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10d      	bne.n	80097f8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	4413      	add	r3, r2
 80097e2:	3316      	adds	r3, #22
 80097e4:	2200      	movs	r2, #0
 80097e6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	330c      	adds	r3, #12
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <get_fileinfo+0x168>
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	4413      	add	r3, r2
 80097fe:	3309      	adds	r3, #9
 8009800:	2200      	movs	r2, #0
 8009802:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	7ada      	ldrb	r2, [r3, #11]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	331c      	adds	r3, #28
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fb13 	bl	8007e40 <ld_dword>
 800981a:	4602      	mov	r2, r0
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	3316      	adds	r3, #22
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fb0a 	bl	8007e40 <ld_dword>
 800982c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	b29a      	uxth	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	80da      	strh	r2, [r3, #6]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	b29a      	uxth	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	809a      	strh	r2, [r3, #4]
 8009840:	e000      	b.n	8009844 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009842:	bf00      	nop
}
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	61ba      	str	r2, [r7, #24]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	4413      	add	r3, r2
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800987a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800987c:	2b1f      	cmp	r3, #31
 800987e:	d940      	bls.n	8009902 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009882:	2b2f      	cmp	r3, #47	; 0x2f
 8009884:	d006      	beq.n	8009894 <create_name+0x48>
 8009886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009888:	2b5c      	cmp	r3, #92	; 0x5c
 800988a:	d110      	bne.n	80098ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800988c:	e002      	b.n	8009894 <create_name+0x48>
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	3301      	adds	r3, #1
 8009892:	61bb      	str	r3, [r7, #24]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	4413      	add	r3, r2
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b2f      	cmp	r3, #47	; 0x2f
 800989e:	d0f6      	beq.n	800988e <create_name+0x42>
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	4413      	add	r3, r2
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b5c      	cmp	r3, #92	; 0x5c
 80098aa:	d0f0      	beq.n	800988e <create_name+0x42>
			break;
 80098ac:	e02a      	b.n	8009904 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2bfe      	cmp	r3, #254	; 0xfe
 80098b2:	d901      	bls.n	80098b8 <create_name+0x6c>
 80098b4:	2306      	movs	r3, #6
 80098b6:	e17d      	b.n	8009bb4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80098b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80098be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098c0:	2101      	movs	r1, #1
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 f934 	bl	800bb30 <ff_convert>
 80098c8:	4603      	mov	r3, r0
 80098ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80098cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <create_name+0x8a>
 80098d2:	2306      	movs	r3, #6
 80098d4:	e16e      	b.n	8009bb4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80098d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098d8:	2b7f      	cmp	r3, #127	; 0x7f
 80098da:	d809      	bhi.n	80098f0 <create_name+0xa4>
 80098dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098de:	4619      	mov	r1, r3
 80098e0:	488d      	ldr	r0, [pc, #564]	; (8009b18 <create_name+0x2cc>)
 80098e2:	f7fe fb7a 	bl	8007fda <chk_chr>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <create_name+0xa4>
 80098ec:	2306      	movs	r3, #6
 80098ee:	e161      	b.n	8009bb4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	617a      	str	r2, [r7, #20]
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80098fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009900:	e7b4      	b.n	800986c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009902:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	441a      	add	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800990e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009910:	2b1f      	cmp	r3, #31
 8009912:	d801      	bhi.n	8009918 <create_name+0xcc>
 8009914:	2304      	movs	r3, #4
 8009916:	e000      	b.n	800991a <create_name+0xce>
 8009918:	2300      	movs	r3, #0
 800991a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800991e:	e011      	b.n	8009944 <create_name+0xf8>
		w = lfn[di - 1];
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009926:	3b01      	subs	r3, #1
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009934:	2b20      	cmp	r3, #32
 8009936:	d002      	beq.n	800993e <create_name+0xf2>
 8009938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800993a:	2b2e      	cmp	r3, #46	; 0x2e
 800993c:	d106      	bne.n	800994c <create_name+0x100>
		di--;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	3b01      	subs	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1ea      	bne.n	8009920 <create_name+0xd4>
 800994a:	e000      	b.n	800994e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800994c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	2200      	movs	r2, #0
 8009958:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <create_name+0x118>
 8009960:	2306      	movs	r3, #6
 8009962:	e127      	b.n	8009bb4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	220b      	movs	r2, #11
 800996a:	2120      	movs	r1, #32
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe faf2 	bl	8007f56 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009972:	2300      	movs	r3, #0
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e002      	b.n	800997e <create_name+0x132>
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	3301      	adds	r3, #1
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4413      	add	r3, r2
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	2b20      	cmp	r3, #32
 800998a:	d0f5      	beq.n	8009978 <create_name+0x12c>
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	2b2e      	cmp	r3, #46	; 0x2e
 8009998:	d0ee      	beq.n	8009978 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <create_name+0x168>
 80099a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a4:	f043 0303 	orr.w	r3, r3, #3
 80099a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80099ac:	e002      	b.n	80099b4 <create_name+0x168>
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <create_name+0x182>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099c0:	3b01      	subs	r3, #1
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	2b2e      	cmp	r3, #46	; 0x2e
 80099cc:	d1ef      	bne.n	80099ae <create_name+0x162>

	i = b = 0; ni = 8;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80099d4:	2300      	movs	r3, #0
 80099d6:	623b      	str	r3, [r7, #32]
 80099d8:	2308      	movs	r3, #8
 80099da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	61ba      	str	r2, [r7, #24]
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80099ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 8090 	beq.w	8009b14 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80099f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d006      	beq.n	8009a08 <create_name+0x1bc>
 80099fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099fc:	2b2e      	cmp	r3, #46	; 0x2e
 80099fe:	d10a      	bne.n	8009a16 <create_name+0x1ca>
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d006      	beq.n	8009a16 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a0c:	f043 0303 	orr.w	r3, r3, #3
 8009a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a14:	e07d      	b.n	8009b12 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009a16:	6a3a      	ldr	r2, [r7, #32]
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d203      	bcs.n	8009a26 <create_name+0x1da>
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d123      	bne.n	8009a6e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d106      	bne.n	8009a3a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a30:	f043 0303 	orr.w	r3, r3, #3
 8009a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a38:	e075      	b.n	8009b26 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d005      	beq.n	8009a4e <create_name+0x202>
 8009a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a46:	f043 0303 	orr.w	r3, r3, #3
 8009a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d866      	bhi.n	8009b24 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	61bb      	str	r3, [r7, #24]
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	623b      	str	r3, [r7, #32]
 8009a5e:	230b      	movs	r3, #11
 8009a60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a6c:	e051      	b.n	8009b12 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a70:	2b7f      	cmp	r3, #127	; 0x7f
 8009a72:	d914      	bls.n	8009a9e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f002 f859 	bl	800bb30 <ff_convert>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <create_name+0x246>
 8009a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8a:	3b80      	subs	r3, #128	; 0x80
 8009a8c:	4a23      	ldr	r2, [pc, #140]	; (8009b1c <create_name+0x2d0>)
 8009a8e:	5cd3      	ldrb	r3, [r2, r3]
 8009a90:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a96:	f043 0302 	orr.w	r3, r3, #2
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <create_name+0x268>
 8009aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	481d      	ldr	r0, [pc, #116]	; (8009b20 <create_name+0x2d4>)
 8009aaa:	f7fe fa96 	bl	8007fda <chk_chr>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d008      	beq.n	8009ac6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009ab4:	235f      	movs	r3, #95	; 0x5f
 8009ab6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009abc:	f043 0303 	orr.w	r3, r3, #3
 8009ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ac4:	e01b      	b.n	8009afe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d909      	bls.n	8009ae0 <create_name+0x294>
 8009acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ace:	2b5a      	cmp	r3, #90	; 0x5a
 8009ad0:	d806      	bhi.n	8009ae0 <create_name+0x294>
					b |= 2;
 8009ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ad6:	f043 0302 	orr.w	r3, r3, #2
 8009ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ade:	e00e      	b.n	8009afe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ae2:	2b60      	cmp	r3, #96	; 0x60
 8009ae4:	d90b      	bls.n	8009afe <create_name+0x2b2>
 8009ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ae8:	2b7a      	cmp	r3, #122	; 0x7a
 8009aea:	d808      	bhi.n	8009afe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009af0:	f043 0301 	orr.w	r3, r3, #1
 8009af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009afa:	3b20      	subs	r3, #32
 8009afc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	623a      	str	r2, [r7, #32]
 8009b04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b06:	b2d1      	uxtb	r1, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	460a      	mov	r2, r1
 8009b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009b12:	e763      	b.n	80099dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009b14:	bf00      	nop
 8009b16:	e006      	b.n	8009b26 <create_name+0x2da>
 8009b18:	080177e8 	.word	0x080177e8
 8009b1c:	08025164 	.word	0x08025164
 8009b20:	080177f4 	.word	0x080177f4
			if (si > di) break;			/* No extension */
 8009b24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b2c:	2be5      	cmp	r3, #229	; 0xe5
 8009b2e:	d103      	bne.n	8009b38 <create_name+0x2ec>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2205      	movs	r2, #5
 8009b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2b08      	cmp	r3, #8
 8009b3c:	d104      	bne.n	8009b48 <create_name+0x2fc>
 8009b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b4c:	f003 030c 	and.w	r3, r3, #12
 8009b50:	2b0c      	cmp	r3, #12
 8009b52:	d005      	beq.n	8009b60 <create_name+0x314>
 8009b54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d105      	bne.n	8009b6c <create_name+0x320>
 8009b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b64:	f043 0302 	orr.w	r3, r3, #2
 8009b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d117      	bne.n	8009ba8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009b78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d105      	bne.n	8009b90 <create_name+0x344>
 8009b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b88:	f043 0310 	orr.w	r3, r3, #16
 8009b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b94:	f003 030c 	and.w	r3, r3, #12
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d105      	bne.n	8009ba8 <create_name+0x35c>
 8009b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba0:	f043 0308 	orr.w	r3, r3, #8
 8009ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009bae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009bb2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3728      	adds	r7, #40	; 0x28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009bd0:	e002      	b.n	8009bd8 <follow_path+0x1c>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8009bde:	d0f8      	beq.n	8009bd2 <follow_path+0x16>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b5c      	cmp	r3, #92	; 0x5c
 8009be6:	d0f4      	beq.n	8009bd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2200      	movs	r2, #0
 8009bec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b1f      	cmp	r3, #31
 8009bf4:	d80a      	bhi.n	8009c0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2280      	movs	r2, #128	; 0x80
 8009bfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009bfe:	2100      	movs	r1, #0
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fe ff35 	bl	8008a70 <dir_sdi>
 8009c06:	4603      	mov	r3, r0
 8009c08:	75fb      	strb	r3, [r7, #23]
 8009c0a:	e043      	b.n	8009c94 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c0c:	463b      	mov	r3, r7
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fe1b 	bl	800984c <create_name>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d134      	bne.n	8009c8a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff fb7d 	bl	8009320 <dir_find>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d127      	bne.n	8009c8e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d122      	bne.n	8009c8e <follow_path+0xd2>
 8009c48:	2305      	movs	r3, #5
 8009c4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c4c:	e01f      	b.n	8009c8e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c4e:	7afb      	ldrb	r3, [r7, #11]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11c      	bne.n	8009c92 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	799b      	ldrb	r3, [r3, #6]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009c64:	2305      	movs	r3, #5
 8009c66:	75fb      	strb	r3, [r7, #23]
 8009c68:	e014      	b.n	8009c94 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c78:	4413      	add	r3, r2
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff f87e 	bl	8008d7e <ld_clust>
 8009c82:	4602      	mov	r2, r0
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c88:	e7c0      	b.n	8009c0c <follow_path+0x50>
			if (res != FR_OK) break;
 8009c8a:	bf00      	nop
 8009c8c:	e002      	b.n	8009c94 <follow_path+0xd8>
				break;
 8009c8e:	bf00      	nop
 8009c90:	e000      	b.n	8009c94 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c92:	bf00      	nop
			}
		}
	}

	return res;
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b087      	sub	sp, #28
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d031      	beq.n	8009d18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	e002      	b.n	8009cc2 <get_ldnumber+0x24>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b1f      	cmp	r3, #31
 8009cc8:	d903      	bls.n	8009cd2 <get_ldnumber+0x34>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2b3a      	cmp	r3, #58	; 0x3a
 8009cd0:	d1f4      	bne.n	8009cbc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b3a      	cmp	r3, #58	; 0x3a
 8009cd8:	d11c      	bne.n	8009d14 <get_ldnumber+0x76>
			tp = *path;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	60fa      	str	r2, [r7, #12]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	3b30      	subs	r3, #48	; 0x30
 8009cea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b09      	cmp	r3, #9
 8009cf0:	d80e      	bhi.n	8009d10 <get_ldnumber+0x72>
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d10a      	bne.n	8009d10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d807      	bhi.n	8009d10 <get_ldnumber+0x72>
					vol = (int)i;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3301      	adds	r3, #1
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	e002      	b.n	8009d1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d14:	2300      	movs	r3, #0
 8009d16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d18:	693b      	ldr	r3, [r7, #16]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
	...

08009d28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	70da      	strb	r2, [r3, #3]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fe fb14 	bl	8008370 <move_window>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <check_fs+0x2a>
 8009d4e:	2304      	movs	r3, #4
 8009d50:	e038      	b.n	8009dc4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3334      	adds	r3, #52	; 0x34
 8009d56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe f858 	bl	8007e10 <ld_word>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d001      	beq.n	8009d70 <check_fs+0x48>
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e029      	b.n	8009dc4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d76:	2be9      	cmp	r3, #233	; 0xe9
 8009d78:	d009      	beq.n	8009d8e <check_fs+0x66>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d80:	2beb      	cmp	r3, #235	; 0xeb
 8009d82:	d11e      	bne.n	8009dc2 <check_fs+0x9a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009d8a:	2b90      	cmp	r3, #144	; 0x90
 8009d8c:	d119      	bne.n	8009dc2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3334      	adds	r3, #52	; 0x34
 8009d92:	3336      	adds	r3, #54	; 0x36
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe f853 	bl	8007e40 <ld_dword>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009da0:	4a0a      	ldr	r2, [pc, #40]	; (8009dcc <check_fs+0xa4>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d101      	bne.n	8009daa <check_fs+0x82>
 8009da6:	2300      	movs	r3, #0
 8009da8:	e00c      	b.n	8009dc4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3334      	adds	r3, #52	; 0x34
 8009dae:	3352      	adds	r3, #82	; 0x52
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe f845 	bl	8007e40 <ld_dword>
 8009db6:	4603      	mov	r3, r0
 8009db8:	4a05      	ldr	r2, [pc, #20]	; (8009dd0 <check_fs+0xa8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d101      	bne.n	8009dc2 <check_fs+0x9a>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e000      	b.n	8009dc4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009dc2:	2302      	movs	r3, #2
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	00544146 	.word	0x00544146
 8009dd0:	33544146 	.word	0x33544146

08009dd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b096      	sub	sp, #88	; 0x58
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7ff ff58 	bl	8009c9e <get_ldnumber>
 8009dee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da01      	bge.n	8009dfa <find_volume+0x26>
 8009df6:	230b      	movs	r3, #11
 8009df8:	e22d      	b.n	800a256 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009dfa:	4aa1      	ldr	r2, [pc, #644]	; (800a080 <find_volume+0x2ac>)
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <find_volume+0x3a>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	e223      	b.n	800a256 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01a      	beq.n	8009e5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	785b      	ldrb	r3, [r3, #1]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fd ff4b 	bl	8007cc4 <disk_status>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10c      	bne.n	8009e5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <find_volume+0x82>
 8009e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e4a:	f003 0304 	and.w	r3, r3, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009e52:	230a      	movs	r3, #10
 8009e54:	e1ff      	b.n	800a256 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009e56:	2300      	movs	r3, #0
 8009e58:	e1fd      	b.n	800a256 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fd ff43 	bl	8007cf8 <disk_initialize>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e84:	2303      	movs	r3, #3
 8009e86:	e1e6      	b.n	800a256 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <find_volume+0xca>
 8009e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e92:	f003 0304 	and.w	r3, r3, #4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e9a:	230a      	movs	r3, #10
 8009e9c:	e1db      	b.n	800a256 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009ea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ea6:	f7ff ff3f 	bl	8009d28 <check_fs>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d149      	bne.n	8009f4c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009eb8:	2300      	movs	r3, #0
 8009eba:	643b      	str	r3, [r7, #64]	; 0x40
 8009ebc:	e01e      	b.n	8009efc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009ecc:	4413      	add	r3, r2
 8009ece:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d006      	beq.n	8009ee8 <find_volume+0x114>
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	3308      	adds	r3, #8
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fd ffae 	bl	8007e40 <ld_dword>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	e000      	b.n	8009eea <find_volume+0x116>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	3358      	adds	r3, #88	; 0x58
 8009ef0:	443b      	add	r3, r7
 8009ef2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef8:	3301      	adds	r3, #1
 8009efa:	643b      	str	r3, [r7, #64]	; 0x40
 8009efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d9dd      	bls.n	8009ebe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f02:	2300      	movs	r3, #0
 8009f04:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <find_volume+0x13e>
 8009f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	3358      	adds	r3, #88	; 0x58
 8009f18:	443b      	add	r3, r7
 8009f1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f1e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <find_volume+0x15e>
 8009f26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f2a:	f7ff fefd 	bl	8009d28 <check_fs>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	e000      	b.n	8009f34 <find_volume+0x160>
 8009f32:	2303      	movs	r3, #3
 8009f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d905      	bls.n	8009f4c <find_volume+0x178>
 8009f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f42:	3301      	adds	r3, #1
 8009f44:	643b      	str	r3, [r7, #64]	; 0x40
 8009f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d9e2      	bls.n	8009f12 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	d101      	bne.n	8009f58 <find_volume+0x184>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e17e      	b.n	800a256 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d901      	bls.n	8009f64 <find_volume+0x190>
 8009f60:	230d      	movs	r3, #13
 8009f62:	e178      	b.n	800a256 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	3334      	adds	r3, #52	; 0x34
 8009f68:	330b      	adds	r3, #11
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fd ff50 	bl	8007e10 <ld_word>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f76:	d001      	beq.n	8009f7c <find_volume+0x1a8>
 8009f78:	230d      	movs	r3, #13
 8009f7a:	e16c      	b.n	800a256 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	3334      	adds	r3, #52	; 0x34
 8009f80:	3316      	adds	r3, #22
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fd ff44 	bl	8007e10 <ld_word>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <find_volume+0x1cc>
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	3334      	adds	r3, #52	; 0x34
 8009f96:	3324      	adds	r3, #36	; 0x24
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fd ff51 	bl	8007e40 <ld_dword>
 8009f9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fa4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	789b      	ldrb	r3, [r3, #2]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d005      	beq.n	8009fc4 <find_volume+0x1f0>
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	789b      	ldrb	r3, [r3, #2]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d001      	beq.n	8009fc4 <find_volume+0x1f0>
 8009fc0:	230d      	movs	r3, #13
 8009fc2:	e148      	b.n	800a256 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	789b      	ldrb	r3, [r3, #2]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fcc:	fb02 f303 	mul.w	r3, r2, r3
 8009fd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	895b      	ldrh	r3, [r3, #10]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d008      	beq.n	8009ff8 <find_volume+0x224>
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	895b      	ldrh	r3, [r3, #10]
 8009fea:	461a      	mov	r2, r3
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	895b      	ldrh	r3, [r3, #10]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <find_volume+0x228>
 8009ff8:	230d      	movs	r3, #13
 8009ffa:	e12c      	b.n	800a256 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	3334      	adds	r3, #52	; 0x34
 800a000:	3311      	adds	r3, #17
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd ff04 	bl	8007e10 <ld_word>
 800a008:	4603      	mov	r3, r0
 800a00a:	461a      	mov	r2, r3
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	891b      	ldrh	r3, [r3, #8]
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <find_volume+0x24e>
 800a01e:	230d      	movs	r3, #13
 800a020:	e119      	b.n	800a256 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	3334      	adds	r3, #52	; 0x34
 800a026:	3313      	adds	r3, #19
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd fef1 	bl	8007e10 <ld_word>
 800a02e:	4603      	mov	r3, r0
 800a030:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <find_volume+0x272>
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	3334      	adds	r3, #52	; 0x34
 800a03c:	3320      	adds	r3, #32
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fd fefe 	bl	8007e40 <ld_dword>
 800a044:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	3334      	adds	r3, #52	; 0x34
 800a04a:	330e      	adds	r3, #14
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fd fedf 	bl	8007e10 <ld_word>
 800a052:	4603      	mov	r3, r0
 800a054:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <find_volume+0x28c>
 800a05c:	230d      	movs	r3, #13
 800a05e:	e0fa      	b.n	800a256 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a060:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a064:	4413      	add	r3, r2
 800a066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a068:	8912      	ldrh	r2, [r2, #8]
 800a06a:	0912      	lsrs	r2, r2, #4
 800a06c:	b292      	uxth	r2, r2
 800a06e:	4413      	add	r3, r2
 800a070:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	429a      	cmp	r2, r3
 800a078:	d204      	bcs.n	800a084 <find_volume+0x2b0>
 800a07a:	230d      	movs	r3, #13
 800a07c:	e0eb      	b.n	800a256 <find_volume+0x482>
 800a07e:	bf00      	nop
 800a080:	2000d020 	.word	0x2000d020
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08c:	8952      	ldrh	r2, [r2, #10]
 800a08e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <find_volume+0x2ca>
 800a09a:	230d      	movs	r3, #13
 800a09c:	e0db      	b.n	800a256 <find_volume+0x482>
		fmt = FS_FAT32;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d802      	bhi.n	800a0b4 <find_volume+0x2e0>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d802      	bhi.n	800a0c4 <find_volume+0x2f0>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	1c9a      	adds	r2, r3, #2
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0d0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a0d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d6:	441a      	add	r2, r3
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a0dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	441a      	add	r2, r3
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a0e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d11e      	bne.n	800a12c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	3334      	adds	r3, #52	; 0x34
 800a0f2:	332a      	adds	r3, #42	; 0x2a
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fd fe8b 	bl	8007e10 <ld_word>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <find_volume+0x330>
 800a100:	230d      	movs	r3, #13
 800a102:	e0a8      	b.n	800a256 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	891b      	ldrh	r3, [r3, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <find_volume+0x33c>
 800a10c:	230d      	movs	r3, #13
 800a10e:	e0a2      	b.n	800a256 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	3334      	adds	r3, #52	; 0x34
 800a114:	332c      	adds	r3, #44	; 0x2c
 800a116:	4618      	mov	r0, r3
 800a118:	f7fd fe92 	bl	8007e40 <ld_dword>
 800a11c:	4602      	mov	r2, r0
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	647b      	str	r3, [r7, #68]	; 0x44
 800a12a:	e01f      	b.n	800a16c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	891b      	ldrh	r3, [r3, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <find_volume+0x364>
 800a134:	230d      	movs	r3, #13
 800a136:	e08e      	b.n	800a256 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13e:	441a      	add	r2, r3
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d103      	bne.n	800a154 <find_volume+0x380>
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	e00a      	b.n	800a16a <find_volume+0x396>
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	4613      	mov	r3, r2
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	085a      	lsrs	r2, r3, #1
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a16a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	69da      	ldr	r2, [r3, #28]
 800a170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a172:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a176:	0a5b      	lsrs	r3, r3, #9
 800a178:	429a      	cmp	r2, r3
 800a17a:	d201      	bcs.n	800a180 <find_volume+0x3ac>
 800a17c:	230d      	movs	r3, #13
 800a17e:	e06a      	b.n	800a256 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	f04f 32ff 	mov.w	r2, #4294967295
 800a186:	615a      	str	r2, [r3, #20]
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	695a      	ldr	r2, [r3, #20]
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	2280      	movs	r2, #128	; 0x80
 800a194:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d149      	bne.n	800a232 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	3334      	adds	r3, #52	; 0x34
 800a1a2:	3330      	adds	r3, #48	; 0x30
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fd fe33 	bl	8007e10 <ld_word>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d140      	bne.n	800a232 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1b8:	f7fe f8da 	bl	8008370 <move_window>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d137      	bne.n	800a232 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	3334      	adds	r3, #52	; 0x34
 800a1cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fd fe1d 	bl	8007e10 <ld_word>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d127      	bne.n	800a232 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	3334      	adds	r3, #52	; 0x34
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fd fe2a 	bl	8007e40 <ld_dword>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <find_volume+0x48c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d11e      	bne.n	800a232 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	3334      	adds	r3, #52	; 0x34
 800a1f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fd fe1f 	bl	8007e40 <ld_dword>
 800a202:	4603      	mov	r3, r0
 800a204:	4a17      	ldr	r2, [pc, #92]	; (800a264 <find_volume+0x490>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d113      	bne.n	800a232 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	3334      	adds	r3, #52	; 0x34
 800a20e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a212:	4618      	mov	r0, r3
 800a214:	f7fd fe14 	bl	8007e40 <ld_dword>
 800a218:	4602      	mov	r2, r0
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	3334      	adds	r3, #52	; 0x34
 800a222:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a226:	4618      	mov	r0, r3
 800a228:	f7fd fe0a 	bl	8007e40 <ld_dword>
 800a22c:	4602      	mov	r2, r0
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a238:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a23a:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <find_volume+0x494>)
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	3301      	adds	r3, #1
 800a240:	b29a      	uxth	r2, r3
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <find_volume+0x494>)
 800a244:	801a      	strh	r2, [r3, #0]
 800a246:	4b08      	ldr	r3, [pc, #32]	; (800a268 <find_volume+0x494>)
 800a248:	881a      	ldrh	r2, [r3, #0]
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a24e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a250:	f7fe f826 	bl	80082a0 <clear_lock>
#endif
	return FR_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3758      	adds	r7, #88	; 0x58
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	41615252 	.word	0x41615252
 800a264:	61417272 	.word	0x61417272
 800a268:	2000d028 	.word	0x2000d028

0800a26c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a276:	2309      	movs	r3, #9
 800a278:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01c      	beq.n	800a2ba <validate+0x4e>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d018      	beq.n	800a2ba <validate+0x4e>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d013      	beq.n	800a2ba <validate+0x4e>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	889a      	ldrh	r2, [r3, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	88db      	ldrh	r3, [r3, #6]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d10c      	bne.n	800a2ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fd fd0c 	bl	8007cc4 <disk_status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <validate+0x4e>
			res = FR_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d102      	bne.n	800a2c6 <validate+0x5a>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	e000      	b.n	800a2c8 <validate+0x5c>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	6013      	str	r3, [r2, #0]
	return res;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a2ea:	f107 0310 	add.w	r3, r7, #16
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff fcd5 	bl	8009c9e <get_ldnumber>
 800a2f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da01      	bge.n	800a300 <f_mount+0x28>
 800a2fc:	230b      	movs	r3, #11
 800a2fe:	e02b      	b.n	800a358 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a300:	4a17      	ldr	r2, [pc, #92]	; (800a360 <f_mount+0x88>)
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a308:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a310:	69b8      	ldr	r0, [r7, #24]
 800a312:	f7fd ffc5 	bl	80082a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	490d      	ldr	r1, [pc, #52]	; (800a360 <f_mount+0x88>)
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <f_mount+0x66>
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d001      	beq.n	800a342 <f_mount+0x6a>
 800a33e:	2300      	movs	r3, #0
 800a340:	e00a      	b.n	800a358 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a342:	f107 010c 	add.w	r1, r7, #12
 800a346:	f107 0308 	add.w	r3, r7, #8
 800a34a:	2200      	movs	r2, #0
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fd41 	bl	8009dd4 <find_volume>
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a356:	7dfb      	ldrb	r3, [r7, #23]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	2000d020 	.word	0x2000d020

0800a364 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b09a      	sub	sp, #104	; 0x68
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <f_open+0x18>
 800a378:	2309      	movs	r3, #9
 800a37a:	e1bd      	b.n	800a6f8 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a37c:	79fb      	ldrb	r3, [r7, #7]
 800a37e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a382:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a384:	79fa      	ldrb	r2, [r7, #7]
 800a386:	f107 0110 	add.w	r1, r7, #16
 800a38a:	f107 0308 	add.w	r3, r7, #8
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fd20 	bl	8009dd4 <find_volume>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a39a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 81a1 	bne.w	800a6e6 <f_open+0x382>
		dj.obj.fs = fs;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800a3a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a3ac:	f001 fba9 	bl	800bb02 <ff_memalloc>
 800a3b0:	65b8      	str	r0, [r7, #88]	; 0x58
 800a3b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <f_open+0x58>
 800a3b8:	2311      	movs	r3, #17
 800a3ba:	e19d      	b.n	800a6f8 <f_open+0x394>
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3c0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	f107 0314 	add.w	r3, r7, #20
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fbf6 	bl	8009bbc <follow_path>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a3d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d11a      	bne.n	800a414 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a3de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3e2:	b25b      	sxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da03      	bge.n	800a3f0 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800a3e8:	2306      	movs	r3, #6
 800a3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a3ee:	e011      	b.n	800a414 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3f0:	79fb      	ldrb	r3, [r7, #7]
 800a3f2:	f023 0301 	bic.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf14      	ite	ne
 800a3fa:	2301      	movne	r3, #1
 800a3fc:	2300      	moveq	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	f107 0314 	add.w	r3, r7, #20
 800a406:	4611      	mov	r1, r2
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fe01 	bl	8008010 <chk_lock>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	f003 031c 	and.w	r3, r3, #28
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d07f      	beq.n	800a51e <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800a41e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a422:	2b00      	cmp	r3, #0
 800a424:	d017      	beq.n	800a456 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d10e      	bne.n	800a44c <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a42e:	f7fd fe4b 	bl	80080c8 <enq_lock>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <f_open+0xe2>
 800a438:	f107 0314 	add.w	r3, r7, #20
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff f82f 	bl	80094a0 <dir_register>
 800a442:	4603      	mov	r3, r0
 800a444:	e000      	b.n	800a448 <f_open+0xe4>
 800a446:	2312      	movs	r3, #18
 800a448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	f043 0308 	orr.w	r3, r3, #8
 800a452:	71fb      	strb	r3, [r7, #7]
 800a454:	e010      	b.n	800a478 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a456:	7ebb      	ldrb	r3, [r7, #26]
 800a458:	f003 0311 	and.w	r3, r3, #17
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <f_open+0x104>
					res = FR_DENIED;
 800a460:	2307      	movs	r3, #7
 800a462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a466:	e007      	b.n	800a478 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <f_open+0x114>
 800a472:	2308      	movs	r3, #8
 800a474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d168      	bne.n	800a552 <f_open+0x1ee>
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d063      	beq.n	800a552 <f_open+0x1ee>
				dw = GET_FATTIME();
 800a48a:	f7fd fcb9 	bl	8007e00 <get_fattime>
 800a48e:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	330e      	adds	r3, #14
 800a494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd fd10 	bl	8007ebc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49e:	3316      	adds	r3, #22
 800a4a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fd fd0a 	bl	8007ebc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4aa:	330b      	adds	r3, #11
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fc61 	bl	8008d7e <ld_clust>
 800a4bc:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe fc79 	bl	8008dbc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4cc:	331c      	adds	r3, #28
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fd fcf3 	bl	8007ebc <st_dword>
					fs->wflag = 1;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d037      	beq.n	800a552 <f_open+0x1ee>
						dw = fs->winsect;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fe f98c 	bl	800880e <remove_chain>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a4fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a500:	2b00      	cmp	r3, #0
 800a502:	d126      	bne.n	800a552 <f_open+0x1ee>
							res = move_window(fs, dw);
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fd ff31 	bl	8008370 <move_window>
 800a50e:	4603      	mov	r3, r0
 800a510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a518:	3a01      	subs	r2, #1
 800a51a:	611a      	str	r2, [r3, #16]
 800a51c:	e019      	b.n	800a552 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a51e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a522:	2b00      	cmp	r3, #0
 800a524:	d115      	bne.n	800a552 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a526:	7ebb      	ldrb	r3, [r7, #26]
 800a528:	f003 0310 	and.w	r3, r3, #16
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <f_open+0x1d4>
					res = FR_NO_FILE;
 800a530:	2304      	movs	r3, #4
 800a532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a536:	e00c      	b.n	800a552 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d007      	beq.n	800a552 <f_open+0x1ee>
 800a542:	7ebb      	ldrb	r3, [r7, #26]
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <f_open+0x1ee>
						res = FR_DENIED;
 800a54c:	2307      	movs	r3, #7
 800a54e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a552:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a556:	2b00      	cmp	r3, #0
 800a558:	d128      	bne.n	800a5ac <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	f003 0308 	and.w	r3, r3, #8
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <f_open+0x208>
				mode |= FA_MODIFIED;
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a56a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	bf14      	ite	ne
 800a584:	2301      	movne	r3, #1
 800a586:	2300      	moveq	r3, #0
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	461a      	mov	r2, r3
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd fdba 	bl	800810c <inc_lock>
 800a598:	4602      	mov	r2, r0
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d102      	bne.n	800a5ac <f_open+0x248>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a5ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8095 	bne.w	800a6e0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fbde 	bl	8008d7e <ld_clust>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ca:	331c      	adds	r3, #28
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fd fc37 	bl	8007e40 <ld_dword>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	88da      	ldrh	r2, [r3, #6]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	79fa      	ldrb	r2, [r7, #7]
 800a5f0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3330      	adds	r3, #48	; 0x30
 800a608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a60c:	2100      	movs	r1, #0
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd fca1 	bl	8007f56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d060      	beq.n	800a6e0 <f_open+0x37c>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d05c      	beq.n	800a6e0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	895b      	ldrh	r3, [r3, #10]
 800a632:	025b      	lsls	r3, r3, #9
 800a634:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a642:	e016      	b.n	800a672 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fd ff4c 	bl	80084e6 <get_fat>
 800a64e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a652:	2b01      	cmp	r3, #1
 800a654:	d802      	bhi.n	800a65c <f_open+0x2f8>
 800a656:	2302      	movs	r3, #2
 800a658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a65c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d102      	bne.n	800a66a <f_open+0x306>
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a66a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a676:	2b00      	cmp	r3, #0
 800a678:	d103      	bne.n	800a682 <f_open+0x31e>
 800a67a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67e:	429a      	cmp	r2, r3
 800a680:	d8e0      	bhi.n	800a644 <f_open+0x2e0>
				}
				fp->clust = clst;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a686:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d127      	bne.n	800a6e0 <f_open+0x37c>
 800a690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	2b00      	cmp	r3, #0
 800a698:	d022      	beq.n	800a6e0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fd ff02 	bl	80084a8 <clust2sect>
 800a6a4:	64b8      	str	r0, [r7, #72]	; 0x48
 800a6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <f_open+0x350>
						res = FR_INT_ERR;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a6b2:	e015      	b.n	800a6e0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a6b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6b6:	0a5a      	lsrs	r2, r3, #9
 800a6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ba:	441a      	add	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	7858      	ldrb	r0, [r3, #1]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f7fd fb38 	bl	8007d44 <disk_read>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <f_open+0x37c>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800a6e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a6e2:	f001 fa1a 	bl	800bb1a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a6e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <f_open+0x390>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a6f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3768      	adds	r7, #104	; 0x68
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08e      	sub	sp, #56	; 0x38
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f107 0214 	add.w	r2, r7, #20
 800a71e:	4611      	mov	r1, r2
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fda3 	bl	800a26c <validate>
 800a726:	4603      	mov	r3, r0
 800a728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a72c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a730:	2b00      	cmp	r3, #0
 800a732:	d107      	bne.n	800a744 <f_read+0x44>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	7d5b      	ldrb	r3, [r3, #21]
 800a738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a73c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <f_read+0x4a>
 800a744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a748:	e115      	b.n	800a976 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	7d1b      	ldrb	r3, [r3, #20]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <f_read+0x5a>
 800a756:	2307      	movs	r3, #7
 800a758:	e10d      	b.n	800a976 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	f240 80fe 	bls.w	800a96c <f_read+0x26c>
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a774:	e0fa      	b.n	800a96c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f040 80c6 	bne.w	800a910 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	0a5b      	lsrs	r3, r3, #9
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	8952      	ldrh	r2, [r2, #10]
 800a78e:	3a01      	subs	r2, #1
 800a790:	4013      	ands	r3, r2
 800a792:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d12f      	bne.n	800a7fa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a7a8:	e013      	b.n	800a7d2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f7fe f925 	bl	8008a08 <clmt_clust>
 800a7be:	6338      	str	r0, [r7, #48]	; 0x30
 800a7c0:	e007      	b.n	800a7d2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	f7fd fe8b 	bl	80084e6 <get_fat>
 800a7d0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d804      	bhi.n	800a7e2 <f_read+0xe2>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	755a      	strb	r2, [r3, #21]
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e0c9      	b.n	800a976 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e8:	d104      	bne.n	800a7f4 <f_read+0xf4>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	755a      	strb	r2, [r3, #21]
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e0c0      	b.n	800a976 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7f8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	4619      	mov	r1, r3
 800a802:	4610      	mov	r0, r2
 800a804:	f7fd fe50 	bl	80084a8 <clust2sect>
 800a808:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d104      	bne.n	800a81a <f_read+0x11a>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2202      	movs	r2, #2
 800a814:	755a      	strb	r2, [r3, #21]
 800a816:	2302      	movs	r3, #2
 800a818:	e0ad      	b.n	800a976 <f_read+0x276>
			sect += csect;
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	4413      	add	r3, r2
 800a820:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	0a5b      	lsrs	r3, r3, #9
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d039      	beq.n	800a8a2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	4413      	add	r3, r2
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	8952      	ldrh	r2, [r2, #10]
 800a838:	4293      	cmp	r3, r2
 800a83a:	d905      	bls.n	800a848 <f_read+0x148>
					cc = fs->csize - csect;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	895b      	ldrh	r3, [r3, #10]
 800a840:	461a      	mov	r2, r3
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	7858      	ldrb	r0, [r3, #1]
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a852:	f7fd fa77 	bl	8007d44 <disk_read>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d004      	beq.n	800a866 <f_read+0x166>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	755a      	strb	r2, [r3, #21]
 800a862:	2301      	movs	r3, #1
 800a864:	e087      	b.n	800a976 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	7d1b      	ldrb	r3, [r3, #20]
 800a86a:	b25b      	sxtb	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	da14      	bge.n	800a89a <f_read+0x19a>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d90d      	bls.n	800a89a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	025b      	lsls	r3, r3, #9
 800a888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a88a:	18d0      	adds	r0, r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3330      	adds	r3, #48	; 0x30
 800a890:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a894:	4619      	mov	r1, r3
 800a896:	f7fd fb3d 	bl	8007f14 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89c:	025b      	lsls	r3, r3, #9
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a8a0:	e050      	b.n	800a944 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d02e      	beq.n	800a90a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	7d1b      	ldrb	r3, [r3, #20]
 800a8b0:	b25b      	sxtb	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da18      	bge.n	800a8e8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	7858      	ldrb	r0, [r3, #1]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a1a      	ldr	r2, [r3, #32]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f7fd fa5d 	bl	8007d84 <disk_write>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <f_read+0x1da>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	755a      	strb	r2, [r3, #21]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e04d      	b.n	800a976 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	7d1b      	ldrb	r3, [r3, #20]
 800a8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	7858      	ldrb	r0, [r3, #1]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	f7fd fa25 	bl	8007d44 <disk_read>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d004      	beq.n	800a90a <f_read+0x20a>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2201      	movs	r2, #1
 800a904:	755a      	strb	r2, [r3, #21]
 800a906:	2301      	movs	r3, #1
 800a908:	e035      	b.n	800a976 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a918:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a91e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	429a      	cmp	r2, r3
 800a924:	d901      	bls.n	800a92a <f_read+0x22a>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a938:	4413      	add	r3, r2
 800a93a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a93c:	4619      	mov	r1, r3
 800a93e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a940:	f7fd fae8 	bl	8007f14 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	4413      	add	r3, r2
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	699a      	ldr	r2, [r3, #24]
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	441a      	add	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	619a      	str	r2, [r3, #24]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	441a      	add	r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f47f af01 	bne.w	800a776 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3738      	adds	r7, #56	; 0x38
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b08c      	sub	sp, #48	; 0x30
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	607a      	str	r2, [r7, #4]
 800a98a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f107 0210 	add.w	r2, r7, #16
 800a99c:	4611      	mov	r1, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fc64 	bl	800a26c <validate>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a9aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <f_write+0x44>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	7d5b      	ldrb	r3, [r3, #21]
 800a9b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <f_write+0x4a>
 800a9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9c6:	e14b      	b.n	800ac60 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	7d1b      	ldrb	r3, [r3, #20]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <f_write+0x5a>
 800a9d4:	2307      	movs	r3, #7
 800a9d6:	e143      	b.n	800ac60 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	441a      	add	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	f080 812d 	bcs.w	800ac44 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	43db      	mvns	r3, r3
 800a9f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a9f2:	e127      	b.n	800ac44 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 80e3 	bne.w	800abc8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	0a5b      	lsrs	r3, r3, #9
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	8952      	ldrh	r2, [r2, #10]
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	4013      	ands	r3, r2
 800aa10:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d143      	bne.n	800aaa0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10c      	bne.n	800aa3a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d11a      	bne.n	800aa62 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2100      	movs	r1, #0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fd ff51 	bl	80088d8 <create_chain>
 800aa36:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa38:	e013      	b.n	800aa62 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d007      	beq.n	800aa52 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	4619      	mov	r1, r3
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f7fd ffdd 	bl	8008a08 <clmt_clust>
 800aa4e:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa50:	e007      	b.n	800aa62 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	f7fd ff3c 	bl	80088d8 <create_chain>
 800aa60:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 80f2 	beq.w	800ac4e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d104      	bne.n	800aa7a <f_write+0xfc>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2202      	movs	r2, #2
 800aa74:	755a      	strb	r2, [r3, #21]
 800aa76:	2302      	movs	r3, #2
 800aa78:	e0f2      	b.n	800ac60 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa80:	d104      	bne.n	800aa8c <f_write+0x10e>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2201      	movs	r2, #1
 800aa86:	755a      	strb	r2, [r3, #21]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e0e9      	b.n	800ac60 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa90:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <f_write+0x122>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	7d1b      	ldrb	r3, [r3, #20]
 800aaa4:	b25b      	sxtb	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da18      	bge.n	800aadc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	7858      	ldrb	r0, [r3, #1]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6a1a      	ldr	r2, [r3, #32]
 800aab8:	2301      	movs	r3, #1
 800aaba:	f7fd f963 	bl	8007d84 <disk_write>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <f_write+0x150>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2201      	movs	r2, #1
 800aac8:	755a      	strb	r2, [r3, #21]
 800aaca:	2301      	movs	r3, #1
 800aacc:	e0c8      	b.n	800ac60 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
 800aad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f7fd fcdf 	bl	80084a8 <clust2sect>
 800aaea:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d104      	bne.n	800aafc <f_write+0x17e>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	755a      	strb	r2, [r3, #21]
 800aaf8:	2302      	movs	r3, #2
 800aafa:	e0b1      	b.n	800ac60 <f_write+0x2e2>
			sect += csect;
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	4413      	add	r3, r2
 800ab02:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	0a5b      	lsrs	r3, r3, #9
 800ab08:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d03c      	beq.n	800ab8a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	4413      	add	r3, r2
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	8952      	ldrh	r2, [r2, #10]
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d905      	bls.n	800ab2a <f_write+0x1ac>
					cc = fs->csize - csect;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	895b      	ldrh	r3, [r3, #10]
 800ab22:	461a      	mov	r2, r3
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	7858      	ldrb	r0, [r3, #1]
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	69f9      	ldr	r1, [r7, #28]
 800ab34:	f7fd f926 	bl	8007d84 <disk_write>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d004      	beq.n	800ab48 <f_write+0x1ca>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	755a      	strb	r2, [r3, #21]
 800ab44:	2301      	movs	r3, #1
 800ab46:	e08b      	b.n	800ac60 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a1a      	ldr	r2, [r3, #32]
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	6a3a      	ldr	r2, [r7, #32]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d915      	bls.n	800ab82 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a1a      	ldr	r2, [r3, #32]
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	025b      	lsls	r3, r3, #9
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab6e:	4619      	mov	r1, r3
 800ab70:	f7fd f9d0 	bl	8007f14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	7d1b      	ldrb	r3, [r3, #20]
 800ab78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	025b      	lsls	r3, r3, #9
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ab88:	e03f      	b.n	800ac0a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d016      	beq.n	800abc2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	699a      	ldr	r2, [r3, #24]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d210      	bcs.n	800abc2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	7858      	ldrb	r0, [r3, #1]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abaa:	2301      	movs	r3, #1
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	f7fd f8c9 	bl	8007d44 <disk_read>
 800abb2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d004      	beq.n	800abc2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	755a      	strb	r2, [r3, #21]
 800abbe:	2301      	movs	r3, #1
 800abc0:	e04e      	b.n	800ac60 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800abd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800abd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d901      	bls.n	800abe2 <f_write+0x264>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf0:	4413      	add	r3, r2
 800abf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf4:	69f9      	ldr	r1, [r7, #28]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fd f98c 	bl	8007f14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	7d1b      	ldrb	r3, [r3, #20]
 800ac00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	4413      	add	r3, r2
 800ac10:	61fb      	str	r3, [r7, #28]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	699a      	ldr	r2, [r3, #24]
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	441a      	add	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	619a      	str	r2, [r3, #24]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	bf38      	it	cc
 800ac2a:	461a      	movcc	r2, r3
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	60da      	str	r2, [r3, #12]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	441a      	add	r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f47f aed4 	bne.w	800a9f4 <f_write+0x76>
 800ac4c:	e000      	b.n	800ac50 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac4e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	7d1b      	ldrb	r3, [r3, #20]
 800ac54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3730      	adds	r7, #48	; 0x30
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f107 0208 	add.w	r2, r7, #8
 800ac76:	4611      	mov	r1, r2
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff faf7 	bl	800a26c <validate>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d168      	bne.n	800ad5a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
 800ac8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d062      	beq.n	800ad5a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	7d1b      	ldrb	r3, [r3, #20]
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	da15      	bge.n	800acca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	7858      	ldrb	r0, [r3, #1]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a1a      	ldr	r2, [r3, #32]
 800acac:	2301      	movs	r3, #1
 800acae:	f7fd f869 	bl	8007d84 <disk_write>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <f_sync+0x54>
 800acb8:	2301      	movs	r3, #1
 800acba:	e04f      	b.n	800ad5c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7d1b      	ldrb	r3, [r3, #20]
 800acc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800acca:	f7fd f899 	bl	8007e00 <get_fattime>
 800acce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	4619      	mov	r1, r3
 800acd8:	4610      	mov	r0, r2
 800acda:	f7fd fb49 	bl	8008370 <move_window>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d138      	bne.n	800ad5a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	330b      	adds	r3, #11
 800acf2:	781a      	ldrb	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	330b      	adds	r3, #11
 800acf8:	f042 0220 	orr.w	r2, r2, #32
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	f7fe f856 	bl	8008dbc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f103 021c 	add.w	r2, r3, #28
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	f7fd f8cd 	bl	8007ebc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3316      	adds	r3, #22
 800ad26:	6939      	ldr	r1, [r7, #16]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fd f8c7 	bl	8007ebc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3312      	adds	r3, #18
 800ad32:	2100      	movs	r1, #0
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fd f8a6 	bl	8007e86 <st_word>
					fs->wflag = 1;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fd fb42 	bl	80083cc <sync_fs>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7d1b      	ldrb	r3, [r3, #20]
 800ad50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff ff7b 	bl	800ac68 <f_sync>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d118      	bne.n	800adae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f107 0208 	add.w	r2, r7, #8
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fa71 	bl	800a26c <validate>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10c      	bne.n	800adae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fd fa45 	bl	8008228 <dec_lock>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800adae:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b090      	sub	sp, #64	; 0x40
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f107 0208 	add.w	r2, r7, #8
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fa4e 	bl	800a26c <validate>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800add6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800adda:	2b00      	cmp	r3, #0
 800addc:	d103      	bne.n	800ade6 <f_lseek+0x2e>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7d5b      	ldrb	r3, [r3, #21]
 800ade2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ade6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <f_lseek+0x3c>
 800adee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800adf2:	e1e6      	b.n	800b1c2 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 80d1 	beq.w	800afa0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae04:	d15a      	bne.n	800aebc <f_lseek+0x104>
			tbl = fp->cltbl;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	1d1a      	adds	r2, r3, #4
 800ae10:	627a      	str	r2, [r7, #36]	; 0x24
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	2302      	movs	r3, #2
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d03a      	beq.n	800ae9c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	613b      	str	r3, [r7, #16]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	3302      	adds	r3, #2
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fd fb4f 	bl	80084e6 <get_fat>
 800ae48:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d804      	bhi.n	800ae5a <f_lseek+0xa2>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	755a      	strb	r2, [r3, #21]
 800ae56:	2302      	movs	r3, #2
 800ae58:	e1b3      	b.n	800b1c2 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae60:	d104      	bne.n	800ae6c <f_lseek+0xb4>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2201      	movs	r2, #1
 800ae66:	755a      	strb	r2, [r3, #21]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e1aa      	b.n	800b1c2 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d0de      	beq.n	800ae34 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ae76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d809      	bhi.n	800ae92 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	1d1a      	adds	r2, r3, #4
 800ae82:	627a      	str	r2, [r7, #36]	; 0x24
 800ae84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	1d1a      	adds	r2, r3, #4
 800ae8c:	627a      	str	r2, [r7, #36]	; 0x24
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d3c4      	bcc.n	800ae26 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aea2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800aea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d803      	bhi.n	800aeb4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	e184      	b.n	800b1be <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aeb4:	2311      	movs	r3, #17
 800aeb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aeba:	e180      	b.n	800b1be <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d902      	bls.n	800aecc <f_lseek+0x114>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8172 	beq.w	800b1be <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	3b01      	subs	r3, #1
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7fd fd91 	bl	8008a08 <clmt_clust>
 800aee6:	4602      	mov	r2, r0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7fd fad7 	bl	80084a8 <clust2sect>
 800aefa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <f_lseek+0x154>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2202      	movs	r2, #2
 800af06:	755a      	strb	r2, [r3, #21]
 800af08:	2302      	movs	r3, #2
 800af0a:	e15a      	b.n	800b1c2 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	3b01      	subs	r3, #1
 800af10:	0a5b      	lsrs	r3, r3, #9
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	8952      	ldrh	r2, [r2, #10]
 800af16:	3a01      	subs	r2, #1
 800af18:	4013      	ands	r3, r2
 800af1a:	69ba      	ldr	r2, [r7, #24]
 800af1c:	4413      	add	r3, r2
 800af1e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 8148 	beq.w	800b1be <f_lseek+0x406>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	429a      	cmp	r2, r3
 800af36:	f000 8142 	beq.w	800b1be <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	7d1b      	ldrb	r3, [r3, #20]
 800af3e:	b25b      	sxtb	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	da18      	bge.n	800af76 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	7858      	ldrb	r0, [r3, #1]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1a      	ldr	r2, [r3, #32]
 800af52:	2301      	movs	r3, #1
 800af54:	f7fc ff16 	bl	8007d84 <disk_write>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d004      	beq.n	800af68 <f_lseek+0x1b0>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	755a      	strb	r2, [r3, #21]
 800af64:	2301      	movs	r3, #1
 800af66:	e12c      	b.n	800b1c2 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7d1b      	ldrb	r3, [r3, #20]
 800af6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af70:	b2da      	uxtb	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	7858      	ldrb	r0, [r3, #1]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af80:	2301      	movs	r3, #1
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	f7fc fede 	bl	8007d44 <disk_read>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <f_lseek+0x1e0>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	755a      	strb	r2, [r3, #21]
 800af94:	2301      	movs	r3, #1
 800af96:	e114      	b.n	800b1c2 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	621a      	str	r2, [r3, #32]
 800af9e:	e10e      	b.n	800b1be <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d908      	bls.n	800afbc <f_lseek+0x204>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	7d1b      	ldrb	r3, [r3, #20]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d102      	bne.n	800afbc <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afca:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 80a7 	beq.w	800b122 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	895b      	ldrh	r3, [r3, #10]
 800afd8:	025b      	lsls	r3, r3, #9
 800afda:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d01b      	beq.n	800b01a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	1e5a      	subs	r2, r3, #1
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	fbb2 f2f3 	udiv	r2, r2, r3
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	1e59      	subs	r1, r3, #1
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d30f      	bcc.n	800b01a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	1e5a      	subs	r2, r3, #1
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	425b      	negs	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	63bb      	str	r3, [r7, #56]	; 0x38
 800b018:	e022      	b.n	800b060 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	2b00      	cmp	r3, #0
 800b024:	d119      	bne.n	800b05a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2100      	movs	r1, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fd fc54 	bl	80088d8 <create_chain>
 800b030:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	2b01      	cmp	r3, #1
 800b036:	d104      	bne.n	800b042 <f_lseek+0x28a>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	755a      	strb	r2, [r3, #21]
 800b03e:	2302      	movs	r3, #2
 800b040:	e0bf      	b.n	800b1c2 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d104      	bne.n	800b054 <f_lseek+0x29c>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	755a      	strb	r2, [r3, #21]
 800b050:	2301      	movs	r3, #1
 800b052:	e0b6      	b.n	800b1c2 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b058:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b05e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	2b00      	cmp	r3, #0
 800b064:	d05d      	beq.n	800b122 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b066:	e03a      	b.n	800b0de <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	699a      	ldr	r2, [r3, #24]
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	441a      	add	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7d1b      	ldrb	r3, [r3, #20]
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00b      	beq.n	800b0a0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd fc23 	bl	80088d8 <create_chain>
 800b092:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b096:	2b00      	cmp	r3, #0
 800b098:	d108      	bne.n	800b0ac <f_lseek+0x2f4>
							ofs = 0; break;
 800b09a:	2300      	movs	r3, #0
 800b09c:	603b      	str	r3, [r7, #0]
 800b09e:	e022      	b.n	800b0e6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fd fa1e 	bl	80084e6 <get_fat>
 800b0aa:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d104      	bne.n	800b0be <f_lseek+0x306>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	755a      	strb	r2, [r3, #21]
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e081      	b.n	800b1c2 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d904      	bls.n	800b0ce <f_lseek+0x316>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d304      	bcc.n	800b0d8 <f_lseek+0x320>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	755a      	strb	r2, [r3, #21]
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	e074      	b.n	800b1c2 <f_lseek+0x40a>
					fp->clust = clst;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0dc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d8c0      	bhi.n	800b068 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	441a      	add	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d012      	beq.n	800b122 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b100:	4618      	mov	r0, r3
 800b102:	f7fd f9d1 	bl	80084a8 <clust2sect>
 800b106:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d104      	bne.n	800b118 <f_lseek+0x360>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2202      	movs	r2, #2
 800b112:	755a      	strb	r2, [r3, #21]
 800b114:	2302      	movs	r3, #2
 800b116:	e054      	b.n	800b1c2 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	0a5b      	lsrs	r3, r3, #9
 800b11c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b11e:	4413      	add	r3, r2
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	699a      	ldr	r2, [r3, #24]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d90a      	bls.n	800b144 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	699a      	ldr	r2, [r3, #24]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7d1b      	ldrb	r3, [r3, #20]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d036      	beq.n	800b1be <f_lseek+0x406>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b156:	429a      	cmp	r2, r3
 800b158:	d031      	beq.n	800b1be <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	7d1b      	ldrb	r3, [r3, #20]
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	da18      	bge.n	800b196 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	7858      	ldrb	r0, [r3, #1]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1a      	ldr	r2, [r3, #32]
 800b172:	2301      	movs	r3, #1
 800b174:	f7fc fe06 	bl	8007d84 <disk_write>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d004      	beq.n	800b188 <f_lseek+0x3d0>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	755a      	strb	r2, [r3, #21]
 800b184:	2301      	movs	r3, #1
 800b186:	e01c      	b.n	800b1c2 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7d1b      	ldrb	r3, [r3, #20]
 800b18c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b190:	b2da      	uxtb	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	7858      	ldrb	r0, [r3, #1]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1a4:	f7fc fdce 	bl	8007d44 <disk_read>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <f_lseek+0x400>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	755a      	strb	r2, [r3, #21]
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e004      	b.n	800b1c2 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1bc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b1be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3740      	adds	r7, #64	; 0x40
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b086      	sub	sp, #24
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <f_opendir+0x14>
 800b1da:	2309      	movs	r3, #9
 800b1dc:	e074      	b.n	800b2c8 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b1e2:	f107 0108 	add.w	r1, r7, #8
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fdf2 	bl	8009dd4 <find_volume>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d15f      	bne.n	800b2ba <f_opendir+0xf0>
		obj->fs = fs;
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800b200:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b204:	f000 fc7d 	bl	800bb02 <ff_memalloc>
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <f_opendir+0x4a>
 800b210:	2311      	movs	r3, #17
 800b212:	e059      	b.n	800b2c8 <f_opendir+0xfe>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7fe fccc 	bl	8009bbc <follow_path>
 800b224:	4603      	mov	r3, r0
 800b226:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d13d      	bne.n	800b2aa <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b234:	b25b      	sxtb	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	db12      	blt.n	800b260 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	799b      	ldrb	r3, [r3, #6]
 800b23e:	f003 0310 	and.w	r3, r3, #16
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	4619      	mov	r1, r3
 800b24e:	4610      	mov	r0, r2
 800b250:	f7fd fd95 	bl	8008d7e <ld_clust>
 800b254:	4602      	mov	r2, r0
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	609a      	str	r2, [r3, #8]
 800b25a:	e001      	b.n	800b260 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b25c:	2305      	movs	r3, #5
 800b25e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d121      	bne.n	800b2aa <f_opendir+0xe0>
				obj->id = fs->id;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	88da      	ldrh	r2, [r3, #6]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b26e:	2100      	movs	r1, #0
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7fd fbfd 	bl	8008a70 <dir_sdi>
 800b276:	4603      	mov	r3, r0
 800b278:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d114      	bne.n	800b2aa <f_opendir+0xe0>
					if (obj->sclust) {
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00d      	beq.n	800b2a4 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b288:	2100      	movs	r1, #0
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7fc ff3e 	bl	800810c <inc_lock>
 800b290:	4602      	mov	r2, r0
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d105      	bne.n	800b2aa <f_opendir+0xe0>
 800b29e:	2312      	movs	r3, #18
 800b2a0:	75fb      	strb	r3, [r7, #23]
 800b2a2:	e002      	b.n	800b2aa <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f000 fc35 	bl	800bb1a <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	d101      	bne.n	800b2ba <f_opendir+0xf0>
 800b2b6:	2305      	movs	r3, #5
 800b2b8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <f_opendir+0xfc>
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f107 0208 	add.w	r2, r7, #8
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe ffc3 	bl	800a26c <validate>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d110      	bne.n	800b312 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d006      	beq.n	800b306 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fc ff93 	bl	8008228 <dec_lock>
 800b302:	4603      	mov	r3, r0
 800b304:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d102      	bne.n	800b312 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b312:	7bfb      	ldrb	r3, [r7, #15]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f107 020c 	add.w	r2, r7, #12
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe ff9c 	bl	800a26c <validate>
 800b334:	4603      	mov	r3, r0
 800b336:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d136      	bne.n	800b3ac <f_readdir+0x90>
		if (!fno) {
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d106      	bne.n	800b352 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b344:	2100      	movs	r1, #0
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7fd fb92 	bl	8008a70 <dir_sdi>
 800b34c:	4603      	mov	r3, r0
 800b34e:	75fb      	strb	r3, [r7, #23]
 800b350:	e02c      	b.n	800b3ac <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800b352:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b356:	f000 fbd4 	bl	800bb02 <ff_memalloc>
 800b35a:	6138      	str	r0, [r7, #16]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <f_readdir+0x4a>
 800b362:	2311      	movs	r3, #17
 800b364:	e023      	b.n	800b3ae <f_readdir+0x92>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800b36c:	2100      	movs	r1, #0
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7fd ff2f 	bl	80091d2 <dir_read>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	2b04      	cmp	r3, #4
 800b37c:	d101      	bne.n	800b382 <f_readdir+0x66>
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10e      	bne.n	800b3a6 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7fe f980 	bl	8009690 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fd fbe7 	bl	8008b66 <dir_next>
 800b398:	4603      	mov	r3, r0
 800b39a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d101      	bne.n	800b3a6 <f_readdir+0x8a>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f000 fbb7 	bl	800bb1a <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b092      	sub	sp, #72	; 0x48
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b3c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b3c6:	f107 030c 	add.w	r3, r7, #12
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fe fd01 	bl	8009dd4 <find_volume>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b3d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f040 8099 	bne.w	800b514 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	695a      	ldr	r2, [r3, #20]
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	3b02      	subs	r3, #2
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d804      	bhi.n	800b400 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	695a      	ldr	r2, [r3, #20]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e089      	b.n	800b514 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d128      	bne.n	800b45e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b40c:	2302      	movs	r3, #2
 800b40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b414:	f107 0314 	add.w	r3, r7, #20
 800b418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fd f863 	bl	80084e6 <get_fat>
 800b420:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b428:	d103      	bne.n	800b432 <f_getfree+0x7c>
 800b42a:	2301      	movs	r3, #1
 800b42c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b430:	e063      	b.n	800b4fa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	2b01      	cmp	r3, #1
 800b436:	d103      	bne.n	800b440 <f_getfree+0x8a>
 800b438:	2302      	movs	r3, #2
 800b43a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b43e:	e05c      	b.n	800b4fa <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <f_getfree+0x96>
 800b446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b448:	3301      	adds	r3, #1
 800b44a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44e:	3301      	adds	r3, #1
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b458:	429a      	cmp	r2, r3
 800b45a:	d3db      	bcc.n	800b414 <f_getfree+0x5e>
 800b45c:	e04d      	b.n	800b4fa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
 800b46e:	2300      	movs	r3, #0
 800b470:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	2b00      	cmp	r3, #0
 800b476:	d113      	bne.n	800b4a0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b480:	4619      	mov	r1, r3
 800b482:	f7fc ff75 	bl	8008370 <move_window>
 800b486:	4603      	mov	r3, r0
 800b488:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b48c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b490:	2b00      	cmp	r3, #0
 800b492:	d131      	bne.n	800b4f8 <f_getfree+0x142>
							p = fs->win;
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	3334      	adds	r3, #52	; 0x34
 800b498:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b49a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b49e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d10f      	bne.n	800b4c8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4aa:	f7fc fcb1 	bl	8007e10 <ld_word>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <f_getfree+0x104>
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	3302      	adds	r3, #2
 800b4be:	633b      	str	r3, [r7, #48]	; 0x30
 800b4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c2:	3b02      	subs	r3, #2
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c6:	e010      	b.n	800b4ea <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b4c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4ca:	f7fc fcb9 	bl	8007e40 <ld_dword>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <f_getfree+0x128>
 800b4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4da:	3301      	adds	r3, #1
 800b4dc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	633b      	str	r3, [r7, #48]	; 0x30
 800b4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1bd      	bne.n	800b472 <f_getfree+0xbc>
 800b4f6:	e000      	b.n	800b4fa <f_getfree+0x144>
							if (res != FR_OK) break;
 800b4f8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4fe:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b504:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b508:	791a      	ldrb	r2, [r3, #4]
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	f042 0201 	orr.w	r2, r2, #1
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b514:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3748      	adds	r7, #72	; 0x48
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	2b0a      	cmp	r3, #10
 800b530:	d103      	bne.n	800b53a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b532:	210d      	movs	r1, #13
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff fff3 	bl	800b520 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	db25      	blt.n	800b592 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	60fa      	str	r2, [r7, #12]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	4413      	add	r3, r2
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b3c      	cmp	r3, #60	; 0x3c
 800b558:	dd12      	ble.n	800b580 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f103 010c 	add.w	r1, r3, #12
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	f107 0308 	add.w	r3, r7, #8
 800b56a:	f7ff fa08 	bl	800a97e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	429a      	cmp	r2, r3
 800b574:	d101      	bne.n	800b57a <putc_bfd+0x5a>
 800b576:	2300      	movs	r3, #0
 800b578:	e001      	b.n	800b57e <putc_bfd+0x5e>
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295
 800b57e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	609a      	str	r2, [r3, #8]
 800b590:	e000      	b.n	800b594 <putc_bfd+0x74>
	if (i < 0) return;
 800b592:	bf00      	nop
}
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	db16      	blt.n	800b5d8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6818      	ldr	r0, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f103 010c 	add.w	r1, r3, #12
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f107 030c 	add.w	r3, r7, #12
 800b5be:	f7ff f9de 	bl	800a97e <f_write>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d107      	bne.n	800b5d8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d102      	bne.n	800b5d8 <putc_flush+0x3e>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	e001      	b.n	800b5dc <putc_flush+0x42>
	return EOF;
 800b5d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	605a      	str	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	609a      	str	r2, [r3, #8]
}
 800b602:	bf00      	nop
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
	...

0800b610 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b610:	b40e      	push	{r1, r2, r3}
 800b612:	b580      	push	{r7, lr}
 800b614:	b0a7      	sub	sp, #156	; 0x9c
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b61a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff ffdf 	bl	800b5e4 <putc_init>

	va_start(arp, fmt);
 800b626:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b62a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b62c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b63c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 81f2 	beq.w	800ba2a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800b646:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b64a:	2b25      	cmp	r3, #37	; 0x25
 800b64c:	d008      	beq.n	800b660 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b64e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b656:	4611      	mov	r1, r2
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff ff61 	bl	800b520 <putc_bfd>
			continue;
 800b65e:	e1e3      	b.n	800ba28 <f_printf+0x418>
		}
		w = f = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b666:	2300      	movs	r3, #0
 800b668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b66c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b67c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b680:	2b30      	cmp	r3, #48	; 0x30
 800b682:	d10b      	bne.n	800b69c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b684:	2301      	movs	r3, #1
 800b686:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b68a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b69a:	e024      	b.n	800b6e6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b69c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b6a2:	d120      	bne.n	800b6e6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b6aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b6ba:	e014      	b.n	800b6e6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b6bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6ce:	4413      	add	r3, r2
 800b6d0:	3b30      	subs	r3, #48	; 0x30
 800b6d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b6d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b6e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6ea:	2b2f      	cmp	r3, #47	; 0x2f
 800b6ec:	d903      	bls.n	800b6f6 <f_printf+0xe6>
 800b6ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6f2:	2b39      	cmp	r3, #57	; 0x39
 800b6f4:	d9e2      	bls.n	800b6bc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b6f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b6fa:	2b6c      	cmp	r3, #108	; 0x6c
 800b6fc:	d003      	beq.n	800b706 <f_printf+0xf6>
 800b6fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b702:	2b4c      	cmp	r3, #76	; 0x4c
 800b704:	d10d      	bne.n	800b722 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b706:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b70a:	f043 0304 	orr.w	r3, r3, #4
 800b70e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b722:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 8181 	beq.w	800ba2e <f_printf+0x41e>
		d = c;
 800b72c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b730:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b734:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b738:	2b60      	cmp	r3, #96	; 0x60
 800b73a:	d908      	bls.n	800b74e <f_printf+0x13e>
 800b73c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b740:	2b7a      	cmp	r3, #122	; 0x7a
 800b742:	d804      	bhi.n	800b74e <f_printf+0x13e>
 800b744:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b748:	3b20      	subs	r3, #32
 800b74a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b74e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b752:	3b42      	subs	r3, #66	; 0x42
 800b754:	2b16      	cmp	r3, #22
 800b756:	f200 8098 	bhi.w	800b88a <f_printf+0x27a>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <f_printf+0x150>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b86b 	.word	0x0800b86b
 800b764:	0800b853 	.word	0x0800b853
 800b768:	0800b87b 	.word	0x0800b87b
 800b76c:	0800b88b 	.word	0x0800b88b
 800b770:	0800b88b 	.word	0x0800b88b
 800b774:	0800b88b 	.word	0x0800b88b
 800b778:	0800b88b 	.word	0x0800b88b
 800b77c:	0800b88b 	.word	0x0800b88b
 800b780:	0800b88b 	.word	0x0800b88b
 800b784:	0800b88b 	.word	0x0800b88b
 800b788:	0800b88b 	.word	0x0800b88b
 800b78c:	0800b88b 	.word	0x0800b88b
 800b790:	0800b88b 	.word	0x0800b88b
 800b794:	0800b873 	.word	0x0800b873
 800b798:	0800b88b 	.word	0x0800b88b
 800b79c:	0800b88b 	.word	0x0800b88b
 800b7a0:	0800b88b 	.word	0x0800b88b
 800b7a4:	0800b7bd 	.word	0x0800b7bd
 800b7a8:	0800b88b 	.word	0x0800b88b
 800b7ac:	0800b87b 	.word	0x0800b87b
 800b7b0:	0800b88b 	.word	0x0800b88b
 800b7b4:	0800b88b 	.word	0x0800b88b
 800b7b8:	0800b883 	.word	0x0800b883
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7be:	1d1a      	adds	r2, r3, #4
 800b7c0:	67ba      	str	r2, [r7, #120]	; 0x78
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7cc:	e004      	b.n	800b7d8 <f_printf+0x1c8>
 800b7ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b7da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7de:	4413      	add	r3, r2
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f3      	bne.n	800b7ce <f_printf+0x1be>
			if (!(f & 2)) {
 800b7e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d11a      	bne.n	800b828 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b7f2:	e005      	b.n	800b800 <f_printf+0x1f0>
 800b7f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7f8:	2120      	movs	r1, #32
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff fe90 	bl	800b520 <putc_bfd>
 800b800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b80a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b80e:	429a      	cmp	r2, r3
 800b810:	d8f0      	bhi.n	800b7f4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b812:	e009      	b.n	800b828 <f_printf+0x218>
 800b814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b81a:	781a      	ldrb	r2, [r3, #0]
 800b81c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff fe7c 	bl	800b520 <putc_bfd>
 800b828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1f1      	bne.n	800b814 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b830:	e005      	b.n	800b83e <f_printf+0x22e>
 800b832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b836:	2120      	movs	r1, #32
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff fe71 	bl	800b520 <putc_bfd>
 800b83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b848:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d8f0      	bhi.n	800b832 <f_printf+0x222>
			continue;
 800b850:	e0ea      	b.n	800ba28 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b854:	1d1a      	adds	r2, r3, #4
 800b856:	67ba      	str	r2, [r7, #120]	; 0x78
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b860:	4611      	mov	r1, r2
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff fe5c 	bl	800b520 <putc_bfd>
 800b868:	e0de      	b.n	800ba28 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800b86a:	2302      	movs	r3, #2
 800b86c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b870:	e014      	b.n	800b89c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b872:	2308      	movs	r3, #8
 800b874:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b878:	e010      	b.n	800b89c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b87a:	230a      	movs	r3, #10
 800b87c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b880:	e00c      	b.n	800b89c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b882:	2310      	movs	r3, #16
 800b884:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b888:	e008      	b.n	800b89c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b88a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b88e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b892:	4611      	mov	r1, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff fe43 	bl	800b520 <putc_bfd>
 800b89a:	e0c5      	b.n	800ba28 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b89c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d004      	beq.n	800b8b2 <f_printf+0x2a2>
 800b8a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8aa:	1d1a      	adds	r2, r3, #4
 800b8ac:	67ba      	str	r2, [r7, #120]	; 0x78
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	e00c      	b.n	800b8cc <f_printf+0x2bc>
 800b8b2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b8b6:	2b44      	cmp	r3, #68	; 0x44
 800b8b8:	d104      	bne.n	800b8c4 <f_printf+0x2b4>
 800b8ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8bc:	1d1a      	adds	r2, r3, #4
 800b8be:	67ba      	str	r2, [r7, #120]	; 0x78
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	e003      	b.n	800b8cc <f_printf+0x2bc>
 800b8c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8c6:	1d1a      	adds	r2, r3, #4
 800b8c8:	67ba      	str	r2, [r7, #120]	; 0x78
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b8d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b8d4:	2b44      	cmp	r3, #68	; 0x44
 800b8d6:	d10e      	bne.n	800b8f6 <f_printf+0x2e6>
 800b8d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	da0a      	bge.n	800b8f6 <f_printf+0x2e6>
			v = 0 - v;
 800b8e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8e4:	425b      	negs	r3, r3
 800b8e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b8ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b8ee:	f043 0308 	orr.w	r3, r3, #8
 800b8f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b8fc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b904:	fbb3 f1f2 	udiv	r1, r3, r2
 800b908:	fb01 f202 	mul.w	r2, r1, r2
 800b90c:	1a9b      	subs	r3, r3, r2
 800b90e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b912:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b916:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b922:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b926:	2b09      	cmp	r3, #9
 800b928:	d90b      	bls.n	800b942 <f_printf+0x332>
 800b92a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b92e:	2b78      	cmp	r3, #120	; 0x78
 800b930:	d101      	bne.n	800b936 <f_printf+0x326>
 800b932:	2227      	movs	r2, #39	; 0x27
 800b934:	e000      	b.n	800b938 <f_printf+0x328>
 800b936:	2207      	movs	r2, #7
 800b938:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b93c:	4413      	add	r3, r2
 800b93e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b94c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b950:	3230      	adds	r2, #48	; 0x30
 800b952:	b2d2      	uxtb	r2, r2
 800b954:	3398      	adds	r3, #152	; 0x98
 800b956:	443b      	add	r3, r7
 800b958:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b95c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <f_printf+0x35c>
 800b964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b968:	2b1f      	cmp	r3, #31
 800b96a:	d9c7      	bls.n	800b8fc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b96c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b970:	f003 0308 	and.w	r3, r3, #8
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <f_printf+0x37c>
 800b978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b982:	3398      	adds	r3, #152	; 0x98
 800b984:	443b      	add	r3, r7
 800b986:	222d      	movs	r2, #45	; 0x2d
 800b988:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b98c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b994:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <f_printf+0x394>
 800b9a0:	2330      	movs	r3, #48	; 0x30
 800b9a2:	e000      	b.n	800b9a6 <f_printf+0x396>
 800b9a4:	2320      	movs	r3, #32
 800b9a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b9aa:	e007      	b.n	800b9bc <f_printf+0x3ac>
 800b9ac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b9b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff fdb2 	bl	800b520 <putc_bfd>
 800b9bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b9c0:	f003 0302 	and.w	r3, r3, #2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d108      	bne.n	800b9da <f_printf+0x3ca>
 800b9c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d8e8      	bhi.n	800b9ac <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800b9da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9e4:	f107 020c 	add.w	r2, r7, #12
 800b9e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9ec:	4413      	add	r3, r2
 800b9ee:	781a      	ldrb	r2, [r3, #0]
 800b9f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fd92 	bl	800b520 <putc_bfd>
		} while (i);
 800b9fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1ea      	bne.n	800b9da <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ba04:	e007      	b.n	800ba16 <f_printf+0x406>
 800ba06:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ba0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fd85 	bl	800b520 <putc_bfd>
 800ba16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d8ee      	bhi.n	800ba06 <f_printf+0x3f6>
		c = *fmt++;
 800ba28:	e600      	b.n	800b62c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ba2a:	bf00      	nop
 800ba2c:	e000      	b.n	800ba30 <f_printf+0x420>
		if (!c) break;
 800ba2e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ba30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fdb0 	bl	800b59a <putc_flush>
 800ba3a:	4603      	mov	r3, r0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	379c      	adds	r7, #156	; 0x9c
 800ba40:	46bd      	mov	sp, r7
 800ba42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba46:	b003      	add	sp, #12
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop

0800ba4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba62:	4b1f      	ldr	r3, [pc, #124]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba64:	7b9b      	ldrb	r3, [r3, #14]
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d831      	bhi.n	800bad0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba6e:	7b9b      	ldrb	r3, [r3, #14]
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	461a      	mov	r2, r3
 800ba74:	4b1a      	ldr	r3, [pc, #104]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba76:	2100      	movs	r1, #0
 800ba78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba7a:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba7c:	7b9b      	ldrb	r3, [r3, #14]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba8c:	7b9b      	ldrb	r3, [r3, #14]
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	461a      	mov	r2, r3
 800ba92:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba94:	4413      	add	r3, r2
 800ba96:	79fa      	ldrb	r2, [r7, #7]
 800ba98:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800ba9a:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba9c:	7b9b      	ldrb	r3, [r3, #14]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	b2d1      	uxtb	r1, r2
 800baa4:	4a0e      	ldr	r2, [pc, #56]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800baa6:	7391      	strb	r1, [r2, #14]
 800baa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800baaa:	7dbb      	ldrb	r3, [r7, #22]
 800baac:	3330      	adds	r3, #48	; 0x30
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	3301      	adds	r3, #1
 800bab8:	223a      	movs	r2, #58	; 0x3a
 800baba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	3302      	adds	r3, #2
 800bac0:	222f      	movs	r2, #47	; 0x2f
 800bac2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	3303      	adds	r3, #3
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	2000d04c 	.word	0x2000d04c

0800bae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800baee:	2200      	movs	r2, #0
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff ffaa 	bl	800ba4c <FATFS_LinkDriverEx>
 800baf8:	4603      	mov	r3, r0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f007 f86c 	bl	8012be8 <malloc>
 800bb10:	4603      	mov	r3, r0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f007 f868 	bl	8012bf8 <free>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	6039      	str	r1, [r7, #0]
 800bb3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bb3c:	88fb      	ldrh	r3, [r7, #6]
 800bb3e:	2b7f      	cmp	r3, #127	; 0x7f
 800bb40:	d802      	bhi.n	800bb48 <ff_convert+0x18>
		c = chr;
 800bb42:	88fb      	ldrh	r3, [r7, #6]
 800bb44:	81fb      	strh	r3, [r7, #14]
 800bb46:	e025      	b.n	800bb94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00b      	beq.n	800bb66 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bb4e:	88fb      	ldrh	r3, [r7, #6]
 800bb50:	2bff      	cmp	r3, #255	; 0xff
 800bb52:	d805      	bhi.n	800bb60 <ff_convert+0x30>
 800bb54:	88fb      	ldrh	r3, [r7, #6]
 800bb56:	3b80      	subs	r3, #128	; 0x80
 800bb58:	4a12      	ldr	r2, [pc, #72]	; (800bba4 <ff_convert+0x74>)
 800bb5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb5e:	e000      	b.n	800bb62 <ff_convert+0x32>
 800bb60:	2300      	movs	r3, #0
 800bb62:	81fb      	strh	r3, [r7, #14]
 800bb64:	e016      	b.n	800bb94 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bb66:	2300      	movs	r3, #0
 800bb68:	81fb      	strh	r3, [r7, #14]
 800bb6a:	e009      	b.n	800bb80 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bb6c:	89fb      	ldrh	r3, [r7, #14]
 800bb6e:	4a0d      	ldr	r2, [pc, #52]	; (800bba4 <ff_convert+0x74>)
 800bb70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb74:	88fa      	ldrh	r2, [r7, #6]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d006      	beq.n	800bb88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bb7a:	89fb      	ldrh	r3, [r7, #14]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	81fb      	strh	r3, [r7, #14]
 800bb80:	89fb      	ldrh	r3, [r7, #14]
 800bb82:	2b7f      	cmp	r3, #127	; 0x7f
 800bb84:	d9f2      	bls.n	800bb6c <ff_convert+0x3c>
 800bb86:	e000      	b.n	800bb8a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bb88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bb8a:	89fb      	ldrh	r3, [r7, #14]
 800bb8c:	3380      	adds	r3, #128	; 0x80
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bb94:	89fb      	ldrh	r3, [r7, #14]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	080251f4 	.word	0x080251f4

0800bba8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bbb2:	88fb      	ldrh	r3, [r7, #6]
 800bbb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb8:	d201      	bcs.n	800bbbe <ff_wtoupper+0x16>
 800bbba:	4b3e      	ldr	r3, [pc, #248]	; (800bcb4 <ff_wtoupper+0x10c>)
 800bbbc:	e000      	b.n	800bbc0 <ff_wtoupper+0x18>
 800bbbe:	4b3e      	ldr	r3, [pc, #248]	; (800bcb8 <ff_wtoupper+0x110>)
 800bbc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	1c9a      	adds	r2, r3, #2
 800bbc6:	617a      	str	r2, [r7, #20]
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bbcc:	8a7b      	ldrh	r3, [r7, #18]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d068      	beq.n	800bca4 <ff_wtoupper+0xfc>
 800bbd2:	88fa      	ldrh	r2, [r7, #6]
 800bbd4:	8a7b      	ldrh	r3, [r7, #18]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d364      	bcc.n	800bca4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	1c9a      	adds	r2, r3, #2
 800bbde:	617a      	str	r2, [r7, #20]
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	823b      	strh	r3, [r7, #16]
 800bbe4:	8a3b      	ldrh	r3, [r7, #16]
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	81fb      	strh	r3, [r7, #14]
 800bbea:	8a3b      	ldrh	r3, [r7, #16]
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bbf0:	88fa      	ldrh	r2, [r7, #6]
 800bbf2:	8a79      	ldrh	r1, [r7, #18]
 800bbf4:	8a3b      	ldrh	r3, [r7, #16]
 800bbf6:	440b      	add	r3, r1
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	da49      	bge.n	800bc90 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bbfc:	89fb      	ldrh	r3, [r7, #14]
 800bbfe:	2b08      	cmp	r3, #8
 800bc00:	d84f      	bhi.n	800bca2 <ff_wtoupper+0xfa>
 800bc02:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <ff_wtoupper+0x60>)
 800bc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc08:	0800bc2d 	.word	0x0800bc2d
 800bc0c:	0800bc3f 	.word	0x0800bc3f
 800bc10:	0800bc55 	.word	0x0800bc55
 800bc14:	0800bc5d 	.word	0x0800bc5d
 800bc18:	0800bc65 	.word	0x0800bc65
 800bc1c:	0800bc6d 	.word	0x0800bc6d
 800bc20:	0800bc75 	.word	0x0800bc75
 800bc24:	0800bc7d 	.word	0x0800bc7d
 800bc28:	0800bc85 	.word	0x0800bc85
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bc2c:	88fa      	ldrh	r2, [r7, #6]
 800bc2e:	8a7b      	ldrh	r3, [r7, #18]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	005b      	lsls	r3, r3, #1
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	4413      	add	r3, r2
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	80fb      	strh	r3, [r7, #6]
 800bc3c:	e027      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	8a7b      	ldrh	r3, [r7, #18]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	88fa      	ldrh	r2, [r7, #6]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	80fb      	strh	r3, [r7, #6]
 800bc52:	e01c      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bc54:	88fb      	ldrh	r3, [r7, #6]
 800bc56:	3b10      	subs	r3, #16
 800bc58:	80fb      	strh	r3, [r7, #6]
 800bc5a:	e018      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bc5c:	88fb      	ldrh	r3, [r7, #6]
 800bc5e:	3b20      	subs	r3, #32
 800bc60:	80fb      	strh	r3, [r7, #6]
 800bc62:	e014      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bc64:	88fb      	ldrh	r3, [r7, #6]
 800bc66:	3b30      	subs	r3, #48	; 0x30
 800bc68:	80fb      	strh	r3, [r7, #6]
 800bc6a:	e010      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bc6c:	88fb      	ldrh	r3, [r7, #6]
 800bc6e:	3b1a      	subs	r3, #26
 800bc70:	80fb      	strh	r3, [r7, #6]
 800bc72:	e00c      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bc74:	88fb      	ldrh	r3, [r7, #6]
 800bc76:	3308      	adds	r3, #8
 800bc78:	80fb      	strh	r3, [r7, #6]
 800bc7a:	e008      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bc7c:	88fb      	ldrh	r3, [r7, #6]
 800bc7e:	3b50      	subs	r3, #80	; 0x50
 800bc80:	80fb      	strh	r3, [r7, #6]
 800bc82:	e004      	b.n	800bc8e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bc84:	88fb      	ldrh	r3, [r7, #6]
 800bc86:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bc8a:	80fb      	strh	r3, [r7, #6]
 800bc8c:	bf00      	nop
			}
			break;
 800bc8e:	e008      	b.n	800bca2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bc90:	89fb      	ldrh	r3, [r7, #14]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d195      	bne.n	800bbc2 <ff_wtoupper+0x1a>
 800bc96:	8a3b      	ldrh	r3, [r7, #16]
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bca0:	e78f      	b.n	800bbc2 <ff_wtoupper+0x1a>
			break;
 800bca2:	bf00      	nop
	}

	return chr;
 800bca4:	88fb      	ldrh	r3, [r7, #6]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	080252f4 	.word	0x080252f4
 800bcb8:	080254e8 	.word	0x080254e8

0800bcbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	; (800bcfc <HAL_Init+0x40>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a0d      	ldr	r2, [pc, #52]	; (800bcfc <HAL_Init+0x40>)
 800bcc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bccc:	4b0b      	ldr	r3, [pc, #44]	; (800bcfc <HAL_Init+0x40>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a0a      	ldr	r2, [pc, #40]	; (800bcfc <HAL_Init+0x40>)
 800bcd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bcd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bcd8:	4b08      	ldr	r3, [pc, #32]	; (800bcfc <HAL_Init+0x40>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a07      	ldr	r2, [pc, #28]	; (800bcfc <HAL_Init+0x40>)
 800bcde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bce4:	2003      	movs	r0, #3
 800bce6:	f000 fead 	bl	800ca44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bcea:	2000      	movs	r0, #0
 800bcec:	f000 f808 	bl	800bd00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bcf0:	f7f5 fb72 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	40023c00 	.word	0x40023c00

0800bd00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bd08:	4b12      	ldr	r3, [pc, #72]	; (800bd54 <HAL_InitTick+0x54>)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <HAL_InitTick+0x58>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	4619      	mov	r1, r3
 800bd12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd16:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 fed3 	bl	800caca <HAL_SYSTICK_Config>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e00e      	b.n	800bd4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b0f      	cmp	r3, #15
 800bd32:	d80a      	bhi.n	800bd4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bd34:	2200      	movs	r2, #0
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3c:	f000 fe8d 	bl	800ca5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bd40:	4a06      	ldr	r2, [pc, #24]	; (800bd5c <HAL_InitTick+0x5c>)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e000      	b.n	800bd4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	20000000 	.word	0x20000000
 800bd58:	200000c4 	.word	0x200000c4
 800bd5c:	200000c0 	.word	0x200000c0

0800bd60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bd64:	4b06      	ldr	r3, [pc, #24]	; (800bd80 <HAL_IncTick+0x20>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <HAL_IncTick+0x24>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4413      	add	r3, r2
 800bd70:	4a04      	ldr	r2, [pc, #16]	; (800bd84 <HAL_IncTick+0x24>)
 800bd72:	6013      	str	r3, [r2, #0]
}
 800bd74:	bf00      	nop
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	200000c4 	.word	0x200000c4
 800bd84:	2000d05c 	.word	0x2000d05c

0800bd88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  return uwTick;
 800bd8c:	4b03      	ldr	r3, [pc, #12]	; (800bd9c <HAL_GetTick+0x14>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	2000d05c 	.word	0x2000d05c

0800bda0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bda8:	f7ff ffee 	bl	800bd88 <HAL_GetTick>
 800bdac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb8:	d005      	beq.n	800bdc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bdba:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <HAL_Delay+0x44>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bdc6:	bf00      	nop
 800bdc8:	f7ff ffde 	bl	800bd88 <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d8f7      	bhi.n	800bdc8 <HAL_Delay+0x28>
  {
  }
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	200000c4 	.word	0x200000c4

0800bde8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e033      	b.n	800be66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be02:	2b00      	cmp	r3, #0
 800be04:	d109      	bne.n	800be1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7fa fc40 	bl	800668c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1e:	f003 0310 	and.w	r3, r3, #16
 800be22:	2b00      	cmp	r3, #0
 800be24:	d118      	bne.n	800be58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800be2e:	f023 0302 	bic.w	r3, r3, #2
 800be32:	f043 0202 	orr.w	r2, r3, #2
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fb86 	bl	800c54c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	f043 0201 	orr.w	r2, r3, #1
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	641a      	str	r2, [r3, #64]	; 0x40
 800be56:	e001      	b.n	800be5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800be64:	7bfb      	ldrb	r3, [r7, #15]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800be76:	2300      	movs	r3, #0
 800be78:	60fb      	str	r3, [r7, #12]
 800be7a:	2300      	movs	r3, #0
 800be7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0302 	and.w	r3, r3, #2
 800be88:	2b02      	cmp	r3, #2
 800be8a:	bf0c      	ite	eq
 800be8c:	2301      	moveq	r3, #1
 800be8e:	2300      	movne	r3, #0
 800be90:	b2db      	uxtb	r3, r3
 800be92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f003 0320 	and.w	r3, r3, #32
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	bf0c      	ite	eq
 800bea2:	2301      	moveq	r3, #1
 800bea4:	2300      	movne	r3, #0
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d049      	beq.n	800bf44 <HAL_ADC_IRQHandler+0xd6>
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d046      	beq.n	800bf44 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	f003 0310 	and.w	r3, r3, #16
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d105      	bne.n	800bece <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d12b      	bne.n	800bf34 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d127      	bne.n	800bf34 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d006      	beq.n	800bf00 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800befc:	2b00      	cmp	r3, #0
 800befe:	d119      	bne.n	800bf34 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0220 	bic.w	r2, r2, #32
 800bf0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d105      	bne.n	800bf34 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2c:	f043 0201 	orr.w	r2, r3, #1
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f9af 	bl	800c298 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f06f 0212 	mvn.w	r2, #18
 800bf42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	2b04      	cmp	r3, #4
 800bf50:	bf0c      	ite	eq
 800bf52:	2301      	moveq	r3, #1
 800bf54:	2300      	movne	r3, #0
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf64:	2b80      	cmp	r3, #128	; 0x80
 800bf66:	bf0c      	ite	eq
 800bf68:	2301      	moveq	r3, #1
 800bf6a:	2300      	movne	r3, #0
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d057      	beq.n	800c026 <HAL_ADC_IRQHandler+0x1b8>
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d054      	beq.n	800c026 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf80:	f003 0310 	and.w	r3, r3, #16
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d105      	bne.n	800bf94 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d139      	bne.n	800c016 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d12b      	bne.n	800c016 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d124      	bne.n	800c016 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d11d      	bne.n	800c016 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d119      	bne.n	800c016 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bff0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c006:	2b00      	cmp	r3, #0
 800c008:	d105      	bne.n	800c016 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	f043 0201 	orr.w	r2, r3, #1
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fc16 	bl	800c848 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f06f 020c 	mvn.w	r2, #12
 800c024:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b01      	cmp	r3, #1
 800c032:	bf0c      	ite	eq
 800c034:	2301      	moveq	r3, #1
 800c036:	2300      	movne	r3, #0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c046:	2b40      	cmp	r3, #64	; 0x40
 800c048:	bf0c      	ite	eq
 800c04a:	2301      	moveq	r3, #1
 800c04c:	2300      	movne	r3, #0
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d017      	beq.n	800c088 <HAL_ADC_IRQHandler+0x21a>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d014      	beq.n	800c088 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d10d      	bne.n	800c088 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f921 	bl	800c2c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f06f 0201 	mvn.w	r2, #1
 800c086:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0320 	and.w	r3, r3, #32
 800c092:	2b20      	cmp	r3, #32
 800c094:	bf0c      	ite	eq
 800c096:	2301      	moveq	r3, #1
 800c098:	2300      	movne	r3, #0
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0ac:	bf0c      	ite	eq
 800c0ae:	2301      	moveq	r3, #1
 800c0b0:	2300      	movne	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d015      	beq.n	800c0e8 <HAL_ADC_IRQHandler+0x27a>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d012      	beq.n	800c0e8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c6:	f043 0202 	orr.w	r2, r3, #2
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f06f 0220 	mvn.w	r2, #32
 800c0d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f8fb 	bl	800c2d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f06f 0220 	mvn.w	r2, #32
 800c0e6:	601a      	str	r2, [r3, #0]
  }
}
 800c0e8:	bf00      	nop
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c106:	2b01      	cmp	r3, #1
 800c108:	d101      	bne.n	800c10e <HAL_ADC_Start_DMA+0x1e>
 800c10a:	2302      	movs	r3, #2
 800c10c:	e0b1      	b.n	800c272 <HAL_ADC_Start_DMA+0x182>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	2b01      	cmp	r3, #1
 800c122:	d018      	beq.n	800c156 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f042 0201 	orr.w	r2, r2, #1
 800c132:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c134:	4b51      	ldr	r3, [pc, #324]	; (800c27c <HAL_ADC_Start_DMA+0x18c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a51      	ldr	r2, [pc, #324]	; (800c280 <HAL_ADC_Start_DMA+0x190>)
 800c13a:	fba2 2303 	umull	r2, r3, r2, r3
 800c13e:	0c9a      	lsrs	r2, r3, #18
 800c140:	4613      	mov	r3, r2
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	4413      	add	r3, r2
 800c146:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c148:	e002      	b.n	800c150 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1f9      	bne.n	800c14a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b01      	cmp	r3, #1
 800c162:	f040 8085 	bne.w	800c270 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c16e:	f023 0301 	bic.w	r3, r3, #1
 800c172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c184:	2b00      	cmp	r3, #0
 800c186:	d007      	beq.n	800c198 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c190:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a4:	d106      	bne.n	800c1b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1aa:	f023 0206 	bic.w	r2, r3, #6
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	645a      	str	r2, [r3, #68]	; 0x44
 800c1b2:	e002      	b.n	800c1ba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c1c2:	4b30      	ldr	r3, [pc, #192]	; (800c284 <HAL_ADC_Start_DMA+0x194>)
 800c1c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	4a2f      	ldr	r2, [pc, #188]	; (800c288 <HAL_ADC_Start_DMA+0x198>)
 800c1cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	4a2e      	ldr	r2, [pc, #184]	; (800c28c <HAL_ADC_Start_DMA+0x19c>)
 800c1d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1da:	4a2d      	ldr	r2, [pc, #180]	; (800c290 <HAL_ADC_Start_DMA+0x1a0>)
 800c1dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c1e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c1f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	689a      	ldr	r2, [r3, #8]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c206:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	334c      	adds	r3, #76	; 0x4c
 800c212:	4619      	mov	r1, r3
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f000 fd70 	bl	800ccfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f003 031f 	and.w	r3, r3, #31
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10f      	bne.n	800c248 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d11c      	bne.n	800c270 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689a      	ldr	r2, [r3, #8]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c244:	609a      	str	r2, [r3, #8]
 800c246:	e013      	b.n	800c270 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a11      	ldr	r2, [pc, #68]	; (800c294 <HAL_ADC_Start_DMA+0x1a4>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d10e      	bne.n	800c270 <HAL_ADC_Start_DMA+0x180>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d107      	bne.n	800c270 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c26e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20000000 	.word	0x20000000
 800c280:	431bde83 	.word	0x431bde83
 800c284:	40012300 	.word	0x40012300
 800c288:	0800c745 	.word	0x0800c745
 800c28c:	0800c7ff 	.word	0x0800c7ff
 800c290:	0800c81b 	.word	0x0800c81b
 800c294:	40012000 	.word	0x40012000

0800c298 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d101      	bne.n	800c304 <HAL_ADC_ConfigChannel+0x1c>
 800c300:	2302      	movs	r3, #2
 800c302:	e113      	b.n	800c52c <HAL_ADC_ConfigChannel+0x244>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b09      	cmp	r3, #9
 800c312:	d925      	bls.n	800c360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68d9      	ldr	r1, [r3, #12]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	461a      	mov	r2, r3
 800c322:	4613      	mov	r3, r2
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	4413      	add	r3, r2
 800c328:	3b1e      	subs	r3, #30
 800c32a:	2207      	movs	r2, #7
 800c32c:	fa02 f303 	lsl.w	r3, r2, r3
 800c330:	43da      	mvns	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	400a      	ands	r2, r1
 800c338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68d9      	ldr	r1, [r3, #12]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	4618      	mov	r0, r3
 800c34c:	4603      	mov	r3, r0
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4403      	add	r3, r0
 800c352:	3b1e      	subs	r3, #30
 800c354:	409a      	lsls	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	60da      	str	r2, [r3, #12]
 800c35e:	e022      	b.n	800c3a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6919      	ldr	r1, [r3, #16]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	461a      	mov	r2, r3
 800c36e:	4613      	mov	r3, r2
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	4413      	add	r3, r2
 800c374:	2207      	movs	r2, #7
 800c376:	fa02 f303 	lsl.w	r3, r2, r3
 800c37a:	43da      	mvns	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	400a      	ands	r2, r1
 800c382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6919      	ldr	r1, [r3, #16]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	689a      	ldr	r2, [r3, #8]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	b29b      	uxth	r3, r3
 800c394:	4618      	mov	r0, r3
 800c396:	4603      	mov	r3, r0
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4403      	add	r3, r0
 800c39c:	409a      	lsls	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b06      	cmp	r3, #6
 800c3ac:	d824      	bhi.n	800c3f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	3b05      	subs	r3, #5
 800c3c0:	221f      	movs	r2, #31
 800c3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c6:	43da      	mvns	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	400a      	ands	r2, r1
 800c3ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	4618      	mov	r0, r3
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4413      	add	r3, r2
 800c3e8:	3b05      	subs	r3, #5
 800c3ea:	fa00 f203 	lsl.w	r2, r0, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	430a      	orrs	r2, r1
 800c3f4:	635a      	str	r2, [r3, #52]	; 0x34
 800c3f6:	e04c      	b.n	800c492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b0c      	cmp	r3, #12
 800c3fe:	d824      	bhi.n	800c44a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	4613      	mov	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	3b23      	subs	r3, #35	; 0x23
 800c412:	221f      	movs	r2, #31
 800c414:	fa02 f303 	lsl.w	r3, r2, r3
 800c418:	43da      	mvns	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	400a      	ands	r2, r1
 800c420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	4618      	mov	r0, r3
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685a      	ldr	r2, [r3, #4]
 800c434:	4613      	mov	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	3b23      	subs	r3, #35	; 0x23
 800c43c:	fa00 f203 	lsl.w	r2, r0, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	430a      	orrs	r2, r1
 800c446:	631a      	str	r2, [r3, #48]	; 0x30
 800c448:	e023      	b.n	800c492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	4613      	mov	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	3b41      	subs	r3, #65	; 0x41
 800c45c:	221f      	movs	r2, #31
 800c45e:	fa02 f303 	lsl.w	r3, r2, r3
 800c462:	43da      	mvns	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	400a      	ands	r2, r1
 800c46a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	b29b      	uxth	r3, r3
 800c478:	4618      	mov	r0, r3
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	4613      	mov	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	3b41      	subs	r3, #65	; 0x41
 800c486:	fa00 f203 	lsl.w	r2, r0, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c492:	4b29      	ldr	r3, [pc, #164]	; (800c538 <HAL_ADC_ConfigChannel+0x250>)
 800c494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a28      	ldr	r2, [pc, #160]	; (800c53c <HAL_ADC_ConfigChannel+0x254>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d10f      	bne.n	800c4c0 <HAL_ADC_ConfigChannel+0x1d8>
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b12      	cmp	r3, #18
 800c4a6:	d10b      	bne.n	800c4c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a1d      	ldr	r2, [pc, #116]	; (800c53c <HAL_ADC_ConfigChannel+0x254>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d12b      	bne.n	800c522 <HAL_ADC_ConfigChannel+0x23a>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a1c      	ldr	r2, [pc, #112]	; (800c540 <HAL_ADC_ConfigChannel+0x258>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d003      	beq.n	800c4dc <HAL_ADC_ConfigChannel+0x1f4>
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b11      	cmp	r3, #17
 800c4da:	d122      	bne.n	800c522 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a11      	ldr	r2, [pc, #68]	; (800c540 <HAL_ADC_ConfigChannel+0x258>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d111      	bne.n	800c522 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c4fe:	4b11      	ldr	r3, [pc, #68]	; (800c544 <HAL_ADC_ConfigChannel+0x25c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a11      	ldr	r2, [pc, #68]	; (800c548 <HAL_ADC_ConfigChannel+0x260>)
 800c504:	fba2 2303 	umull	r2, r3, r2, r3
 800c508:	0c9a      	lsrs	r2, r3, #18
 800c50a:	4613      	mov	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c514:	e002      	b.n	800c51c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	3b01      	subs	r3, #1
 800c51a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1f9      	bne.n	800c516 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	40012300 	.word	0x40012300
 800c53c:	40012000 	.word	0x40012000
 800c540:	10000012 	.word	0x10000012
 800c544:	20000000 	.word	0x20000000
 800c548:	431bde83 	.word	0x431bde83

0800c54c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c554:	4b79      	ldr	r3, [pc, #484]	; (800c73c <ADC_Init+0x1f0>)
 800c556:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	431a      	orrs	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6859      	ldr	r1, [r3, #4]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	021a      	lsls	r2, r3, #8
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c5a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6859      	ldr	r1, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	689a      	ldr	r2, [r3, #8]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	689a      	ldr	r2, [r3, #8]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6899      	ldr	r1, [r3, #8]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5de:	4a58      	ldr	r2, [pc, #352]	; (800c740 <ADC_Init+0x1f4>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d022      	beq.n	800c62a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c5f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6899      	ldr	r1, [r3, #8]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6899      	ldr	r1, [r3, #8]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	609a      	str	r2, [r3, #8]
 800c628:	e00f      	b.n	800c64a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c648:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689a      	ldr	r2, [r3, #8]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f022 0202 	bic.w	r2, r2, #2
 800c658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6899      	ldr	r1, [r3, #8]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7e1b      	ldrb	r3, [r3, #24]
 800c664:	005a      	lsls	r2, r3, #1
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	430a      	orrs	r2, r1
 800c66c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d01b      	beq.n	800c6b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c686:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c696:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6859      	ldr	r1, [r3, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	035a      	lsls	r2, r3, #13
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	430a      	orrs	r2, r1
 800c6ac:	605a      	str	r2, [r3, #4]
 800c6ae:	e007      	b.n	800c6c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685a      	ldr	r2, [r3, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	051a      	lsls	r2, r3, #20
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	430a      	orrs	r2, r1
 800c6e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c6f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6899      	ldr	r1, [r3, #8]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c702:	025a      	lsls	r2, r3, #9
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	430a      	orrs	r2, r1
 800c70a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689a      	ldr	r2, [r3, #8]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c71a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6899      	ldr	r1, [r3, #8]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	029a      	lsls	r2, r3, #10
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	430a      	orrs	r2, r1
 800c72e:	609a      	str	r2, [r3, #8]
}
 800c730:	bf00      	nop
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	40012300 	.word	0x40012300
 800c740:	0f000001 	.word	0x0f000001

0800c744 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c756:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d13c      	bne.n	800c7d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c762:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d12b      	bne.n	800c7d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d127      	bne.n	800c7d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d006      	beq.n	800c79c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d119      	bne.n	800c7d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f022 0220 	bic.w	r2, r2, #32
 800c7aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d105      	bne.n	800c7d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c8:	f043 0201 	orr.w	r2, r3, #1
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f7ff fd61 	bl	800c298 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c7d6:	e00e      	b.n	800c7f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7dc:	f003 0310 	and.w	r3, r3, #16
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff fd75 	bl	800c2d4 <HAL_ADC_ErrorCallback>
}
 800c7ea:	e004      	b.n	800c7f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	4798      	blx	r3
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff fd4d 	bl	800c2ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c812:	bf00      	nop
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c826:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2240      	movs	r2, #64	; 0x40
 800c82c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c832:	f043 0204 	orr.w	r2, r3, #4
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff fd4a 	bl	800c2d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c840:	bf00      	nop
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c86c:	4b0c      	ldr	r3, [pc, #48]	; (800c8a0 <__NVIC_SetPriorityGrouping+0x44>)
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c878:	4013      	ands	r3, r2
 800c87a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c88c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c88e:	4a04      	ldr	r2, [pc, #16]	; (800c8a0 <__NVIC_SetPriorityGrouping+0x44>)
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	60d3      	str	r3, [r2, #12]
}
 800c894:	bf00      	nop
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	e000ed00 	.word	0xe000ed00

0800c8a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c8a8:	4b04      	ldr	r3, [pc, #16]	; (800c8bc <__NVIC_GetPriorityGrouping+0x18>)
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	0a1b      	lsrs	r3, r3, #8
 800c8ae:	f003 0307 	and.w	r3, r3, #7
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	e000ed00 	.word	0xe000ed00

0800c8c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	db0b      	blt.n	800c8ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c8d2:	79fb      	ldrb	r3, [r7, #7]
 800c8d4:	f003 021f 	and.w	r2, r3, #31
 800c8d8:	4907      	ldr	r1, [pc, #28]	; (800c8f8 <__NVIC_EnableIRQ+0x38>)
 800c8da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8de:	095b      	lsrs	r3, r3, #5
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	fa00 f202 	lsl.w	r2, r0, r2
 800c8e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c8ea:	bf00      	nop
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	e000e100 	.word	0xe000e100

0800c8fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	4603      	mov	r3, r0
 800c904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	db12      	blt.n	800c934 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	f003 021f 	and.w	r2, r3, #31
 800c914:	490a      	ldr	r1, [pc, #40]	; (800c940 <__NVIC_DisableIRQ+0x44>)
 800c916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c91a:	095b      	lsrs	r3, r3, #5
 800c91c:	2001      	movs	r0, #1
 800c91e:	fa00 f202 	lsl.w	r2, r0, r2
 800c922:	3320      	adds	r3, #32
 800c924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c928:	f3bf 8f4f 	dsb	sy
}
 800c92c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c92e:	f3bf 8f6f 	isb	sy
}
 800c932:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	e000e100 	.word	0xe000e100

0800c944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	6039      	str	r1, [r7, #0]
 800c94e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c954:	2b00      	cmp	r3, #0
 800c956:	db0a      	blt.n	800c96e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	490c      	ldr	r1, [pc, #48]	; (800c990 <__NVIC_SetPriority+0x4c>)
 800c95e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c962:	0112      	lsls	r2, r2, #4
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	440b      	add	r3, r1
 800c968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c96c:	e00a      	b.n	800c984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	b2da      	uxtb	r2, r3
 800c972:	4908      	ldr	r1, [pc, #32]	; (800c994 <__NVIC_SetPriority+0x50>)
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	f003 030f 	and.w	r3, r3, #15
 800c97a:	3b04      	subs	r3, #4
 800c97c:	0112      	lsls	r2, r2, #4
 800c97e:	b2d2      	uxtb	r2, r2
 800c980:	440b      	add	r3, r1
 800c982:	761a      	strb	r2, [r3, #24]
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	e000e100 	.word	0xe000e100
 800c994:	e000ed00 	.word	0xe000ed00

0800c998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c998:	b480      	push	{r7}
 800c99a:	b089      	sub	sp, #36	; 0x24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	f1c3 0307 	rsb	r3, r3, #7
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	bf28      	it	cs
 800c9b6:	2304      	movcs	r3, #4
 800c9b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	2b06      	cmp	r3, #6
 800c9c0:	d902      	bls.n	800c9c8 <NVIC_EncodePriority+0x30>
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	3b03      	subs	r3, #3
 800c9c6:	e000      	b.n	800c9ca <NVIC_EncodePriority+0x32>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d6:	43da      	mvns	r2, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	401a      	ands	r2, r3
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ea:	43d9      	mvns	r1, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9f0:	4313      	orrs	r3, r2
         );
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3724      	adds	r7, #36	; 0x24
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca10:	d301      	bcc.n	800ca16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ca12:	2301      	movs	r3, #1
 800ca14:	e00f      	b.n	800ca36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ca16:	4a0a      	ldr	r2, [pc, #40]	; (800ca40 <SysTick_Config+0x40>)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ca1e:	210f      	movs	r1, #15
 800ca20:	f04f 30ff 	mov.w	r0, #4294967295
 800ca24:	f7ff ff8e 	bl	800c944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <SysTick_Config+0x40>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca2e:	4b04      	ldr	r3, [pc, #16]	; (800ca40 <SysTick_Config+0x40>)
 800ca30:	2207      	movs	r2, #7
 800ca32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	e000e010 	.word	0xe000e010

0800ca44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7ff ff05 	bl	800c85c <__NVIC_SetPriorityGrouping>
}
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b086      	sub	sp, #24
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	4603      	mov	r3, r0
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
 800ca66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ca6c:	f7ff ff1a 	bl	800c8a4 <__NVIC_GetPriorityGrouping>
 800ca70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	6978      	ldr	r0, [r7, #20]
 800ca78:	f7ff ff8e 	bl	800c998 <NVIC_EncodePriority>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca82:	4611      	mov	r1, r2
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7ff ff5d 	bl	800c944 <__NVIC_SetPriority>
}
 800ca8a:	bf00      	nop
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	4603      	mov	r3, r0
 800ca9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ca9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff ff0d 	bl	800c8c0 <__NVIC_EnableIRQ>
}
 800caa6:	bf00      	nop
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	4603      	mov	r3, r0
 800cab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff ff1d 	bl	800c8fc <__NVIC_DisableIRQ>
}
 800cac2:	bf00      	nop
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b082      	sub	sp, #8
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff ff94 	bl	800ca00 <SysTick_Config>
 800cad8:	4603      	mov	r3, r0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800caf0:	f7ff f94a 	bl	800bd88 <HAL_GetTick>
 800caf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e099      	b.n	800cc34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0201 	bic.w	r2, r2, #1
 800cb1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cb20:	e00f      	b.n	800cb42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cb22:	f7ff f931 	bl	800bd88 <HAL_GetTick>
 800cb26:	4602      	mov	r2, r0
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	2b05      	cmp	r3, #5
 800cb2e:	d908      	bls.n	800cb42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2220      	movs	r2, #32
 800cb34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2203      	movs	r2, #3
 800cb3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e078      	b.n	800cc34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e8      	bne.n	800cb22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	4b38      	ldr	r3, [pc, #224]	; (800cc3c <HAL_DMA_Init+0x158>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cb6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb98:	2b04      	cmp	r3, #4
 800cb9a:	d107      	bne.n	800cbac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba4:	4313      	orrs	r3, r2
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	f023 0307 	bic.w	r3, r3, #7
 800cbc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	d117      	bne.n	800cc06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00e      	beq.n	800cc06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fafb 	bl	800d1e4 <DMA_CheckFifoParam>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d008      	beq.n	800cc06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2240      	movs	r2, #64	; 0x40
 800cbf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800cc02:	2301      	movs	r3, #1
 800cc04:	e016      	b.n	800cc34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fab2 	bl	800d178 <DMA_CalcBaseAndBitshift>
 800cc14:	4603      	mov	r3, r0
 800cc16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc1c:	223f      	movs	r2, #63	; 0x3f
 800cc1e:	409a      	lsls	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	f010803f 	.word	0xf010803f

0800cc40 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e050      	b.n	800ccf4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d101      	bne.n	800cc62 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800cc5e:	2302      	movs	r3, #2
 800cc60:	e048      	b.n	800ccf4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f022 0201 	bic.w	r2, r2, #1
 800cc70:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2200      	movs	r2, #0
 800cc88:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2200      	movs	r2, #0
 800cc98:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2221      	movs	r2, #33	; 0x21
 800cca0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fa68 	bl	800d178 <DMA_CalcBaseAndBitshift>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd4:	223f      	movs	r2, #63	; 0x3f
 800ccd6:	409a      	lsls	r2, r3
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d101      	bne.n	800cd22 <HAL_DMA_Start_IT+0x26>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e040      	b.n	800cda4 <HAL_DMA_Start_IT+0xa8>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d12f      	bne.n	800cd96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2202      	movs	r2, #2
 800cd3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f000 f9e6 	bl	800d11c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd54:	223f      	movs	r2, #63	; 0x3f
 800cd56:	409a      	lsls	r2, r3
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 0216 	orr.w	r2, r2, #22
 800cd6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f042 0208 	orr.w	r2, r2, #8
 800cd82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f042 0201 	orr.w	r2, r2, #1
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	e005      	b.n	800cda2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800cd9e:	2302      	movs	r3, #2
 800cda0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d004      	beq.n	800cdca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2280      	movs	r2, #128	; 0x80
 800cdc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e00c      	b.n	800cde4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2205      	movs	r2, #5
 800cdce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f022 0201 	bic.w	r2, r2, #1
 800cde0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cdfc:	4b8e      	ldr	r3, [pc, #568]	; (800d038 <HAL_DMA_IRQHandler+0x248>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a8e      	ldr	r2, [pc, #568]	; (800d03c <HAL_DMA_IRQHandler+0x24c>)
 800ce02:	fba2 2303 	umull	r2, r3, r2, r3
 800ce06:	0a9b      	lsrs	r3, r3, #10
 800ce08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce1a:	2208      	movs	r2, #8
 800ce1c:	409a      	lsls	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	4013      	ands	r3, r2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d01a      	beq.n	800ce5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 0304 	and.w	r3, r3, #4
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d013      	beq.n	800ce5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 0204 	bic.w	r2, r2, #4
 800ce42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce48:	2208      	movs	r2, #8
 800ce4a:	409a      	lsls	r2, r3
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce54:	f043 0201 	orr.w	r2, r3, #1
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce60:	2201      	movs	r2, #1
 800ce62:	409a      	lsls	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	4013      	ands	r3, r2
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d012      	beq.n	800ce92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce7e:	2201      	movs	r2, #1
 800ce80:	409a      	lsls	r2, r3
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8a:	f043 0202 	orr.w	r2, r3, #2
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce96:	2204      	movs	r2, #4
 800ce98:	409a      	lsls	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d012      	beq.n	800cec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceb4:	2204      	movs	r2, #4
 800ceb6:	409a      	lsls	r2, r3
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cec0:	f043 0204 	orr.w	r2, r3, #4
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cecc:	2210      	movs	r2, #16
 800cece:	409a      	lsls	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4013      	ands	r3, r2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d043      	beq.n	800cf60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0308 	and.w	r3, r3, #8
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d03c      	beq.n	800cf60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceea:	2210      	movs	r2, #16
 800ceec:	409a      	lsls	r2, r3
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d018      	beq.n	800cf32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d108      	bne.n	800cf20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d024      	beq.n	800cf60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	4798      	blx	r3
 800cf1e:	e01f      	b.n	800cf60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01b      	beq.n	800cf60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	4798      	blx	r3
 800cf30:	e016      	b.n	800cf60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d107      	bne.n	800cf50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f022 0208 	bic.w	r2, r2, #8
 800cf4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d003      	beq.n	800cf60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf64:	2220      	movs	r2, #32
 800cf66:	409a      	lsls	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 808f 	beq.w	800d090 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0310 	and.w	r3, r3, #16
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f000 8087 	beq.w	800d090 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf86:	2220      	movs	r2, #32
 800cf88:	409a      	lsls	r2, r3
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b05      	cmp	r3, #5
 800cf98:	d136      	bne.n	800d008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f022 0216 	bic.w	r2, r2, #22
 800cfa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	695a      	ldr	r2, [r3, #20]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d103      	bne.n	800cfca <HAL_DMA_IRQHandler+0x1da>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d007      	beq.n	800cfda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f022 0208 	bic.w	r2, r2, #8
 800cfd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfde:	223f      	movs	r2, #63	; 0x3f
 800cfe0:	409a      	lsls	r2, r3
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d07e      	beq.n	800d0fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	4798      	blx	r3
        }
        return;
 800d006:	e079      	b.n	800d0fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d01d      	beq.n	800d052 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10d      	bne.n	800d040 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d031      	beq.n	800d090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	4798      	blx	r3
 800d034:	e02c      	b.n	800d090 <HAL_DMA_IRQHandler+0x2a0>
 800d036:	bf00      	nop
 800d038:	20000000 	.word	0x20000000
 800d03c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d044:	2b00      	cmp	r3, #0
 800d046:	d023      	beq.n	800d090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	4798      	blx	r3
 800d050:	e01e      	b.n	800d090 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10f      	bne.n	800d080 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f022 0210 	bic.w	r2, r2, #16
 800d06e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d084:	2b00      	cmp	r3, #0
 800d086:	d003      	beq.n	800d090 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d094:	2b00      	cmp	r3, #0
 800d096:	d032      	beq.n	800d0fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d022      	beq.n	800d0ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2205      	movs	r2, #5
 800d0a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f022 0201 	bic.w	r2, r2, #1
 800d0ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	60bb      	str	r3, [r7, #8]
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d307      	bcc.n	800d0d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1f2      	bne.n	800d0bc <HAL_DMA_IRQHandler+0x2cc>
 800d0d6:	e000      	b.n	800d0da <HAL_DMA_IRQHandler+0x2ea>
          break;
 800d0d8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	4798      	blx	r3
 800d0fa:	e000      	b.n	800d0fe <HAL_DMA_IRQHandler+0x30e>
        return;
 800d0fc:	bf00      	nop
    }
  }
}
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	2b40      	cmp	r3, #64	; 0x40
 800d148:	d108      	bne.n	800d15c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d15a:	e007      	b.n	800d16c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	60da      	str	r2, [r3, #12]
}
 800d16c:	bf00      	nop
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	b2db      	uxtb	r3, r3
 800d186:	3b10      	subs	r3, #16
 800d188:	4a14      	ldr	r2, [pc, #80]	; (800d1dc <DMA_CalcBaseAndBitshift+0x64>)
 800d18a:	fba2 2303 	umull	r2, r3, r2, r3
 800d18e:	091b      	lsrs	r3, r3, #4
 800d190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d192:	4a13      	ldr	r2, [pc, #76]	; (800d1e0 <DMA_CalcBaseAndBitshift+0x68>)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	4413      	add	r3, r2
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d909      	bls.n	800d1ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	1d1a      	adds	r2, r3, #4
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	659a      	str	r2, [r3, #88]	; 0x58
 800d1b8:	e007      	b.n	800d1ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d1c2:	f023 0303 	bic.w	r3, r3, #3
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3714      	adds	r7, #20
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	aaaaaaab 	.word	0xaaaaaaab
 800d1e0:	080255a4 	.word	0x080255a4

0800d1e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d11f      	bne.n	800d23e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2b03      	cmp	r3, #3
 800d202:	d856      	bhi.n	800d2b2 <DMA_CheckFifoParam+0xce>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <DMA_CheckFifoParam+0x28>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d21d 	.word	0x0800d21d
 800d210:	0800d22f 	.word	0x0800d22f
 800d214:	0800d21d 	.word	0x0800d21d
 800d218:	0800d2b3 	.word	0x0800d2b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d046      	beq.n	800d2b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d22c:	e043      	b.n	800d2b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d236:	d140      	bne.n	800d2ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d23c:	e03d      	b.n	800d2ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d246:	d121      	bne.n	800d28c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d837      	bhi.n	800d2be <DMA_CheckFifoParam+0xda>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <DMA_CheckFifoParam+0x70>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d265 	.word	0x0800d265
 800d258:	0800d26b 	.word	0x0800d26b
 800d25c:	0800d265 	.word	0x0800d265
 800d260:	0800d27d 	.word	0x0800d27d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	73fb      	strb	r3, [r7, #15]
      break;
 800d268:	e030      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d272:	2b00      	cmp	r3, #0
 800d274:	d025      	beq.n	800d2c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d27a:	e022      	b.n	800d2c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d284:	d11f      	bne.n	800d2c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d28a:	e01c      	b.n	800d2c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d903      	bls.n	800d29a <DMA_CheckFifoParam+0xb6>
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	2b03      	cmp	r3, #3
 800d296:	d003      	beq.n	800d2a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d298:	e018      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d29a:	2301      	movs	r3, #1
 800d29c:	73fb      	strb	r3, [r7, #15]
      break;
 800d29e:	e015      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00e      	beq.n	800d2ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d2b0:	e00b      	b.n	800d2ca <DMA_CheckFifoParam+0xe6>
      break;
 800d2b2:	bf00      	nop
 800d2b4:	e00a      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      break;
 800d2b6:	bf00      	nop
 800d2b8:	e008      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      break;
 800d2ba:	bf00      	nop
 800d2bc:	e006      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      break;
 800d2be:	bf00      	nop
 800d2c0:	e004      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      break;
 800d2c2:	bf00      	nop
 800d2c4:	e002      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      break;   
 800d2c6:	bf00      	nop
 800d2c8:	e000      	b.n	800d2cc <DMA_CheckFifoParam+0xe8>
      break;
 800d2ca:	bf00      	nop
    }
  } 
  
  return status; 
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3714      	adds	r7, #20
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop

0800d2dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b089      	sub	sp, #36	; 0x24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	61fb      	str	r3, [r7, #28]
 800d2f6:	e159      	b.n	800d5ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	4013      	ands	r3, r2
 800d30a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	429a      	cmp	r2, r3
 800d312:	f040 8148 	bne.w	800d5a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d00b      	beq.n	800d336 <HAL_GPIO_Init+0x5a>
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	2b02      	cmp	r3, #2
 800d324:	d007      	beq.n	800d336 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d32a:	2b11      	cmp	r3, #17
 800d32c:	d003      	beq.n	800d336 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	2b12      	cmp	r3, #18
 800d334:	d130      	bne.n	800d398 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	2203      	movs	r2, #3
 800d342:	fa02 f303 	lsl.w	r3, r2, r3
 800d346:	43db      	mvns	r3, r3
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	4013      	ands	r3, r2
 800d34c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	68da      	ldr	r2, [r3, #12]
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	fa02 f303 	lsl.w	r3, r2, r3
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d36c:	2201      	movs	r2, #1
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	fa02 f303 	lsl.w	r3, r2, r3
 800d374:	43db      	mvns	r3, r3
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	4013      	ands	r3, r2
 800d37a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	091b      	lsrs	r3, r3, #4
 800d382:	f003 0201 	and.w	r2, r3, #1
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	fa02 f303 	lsl.w	r3, r2, r3
 800d38c:	69ba      	ldr	r2, [r7, #24]
 800d38e:	4313      	orrs	r3, r2
 800d390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	69ba      	ldr	r2, [r7, #24]
 800d396:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	2203      	movs	r2, #3
 800d3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a8:	43db      	mvns	r3, r3
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	689a      	ldr	r2, [r3, #8]
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	005b      	lsls	r3, r3, #1
 800d3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d003      	beq.n	800d3d8 <HAL_GPIO_Init+0xfc>
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	2b12      	cmp	r3, #18
 800d3d6:	d123      	bne.n	800d420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	08da      	lsrs	r2, r3, #3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3208      	adds	r2, #8
 800d3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	f003 0307 	and.w	r3, r3, #7
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	220f      	movs	r2, #15
 800d3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f4:	43db      	mvns	r3, r3
 800d3f6:	69ba      	ldr	r2, [r7, #24]
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	691a      	ldr	r2, [r3, #16]
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f003 0307 	and.w	r3, r3, #7
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	fa02 f303 	lsl.w	r3, r2, r3
 800d40c:	69ba      	ldr	r2, [r7, #24]
 800d40e:	4313      	orrs	r3, r2
 800d410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	08da      	lsrs	r2, r3, #3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3208      	adds	r2, #8
 800d41a:	69b9      	ldr	r1, [r7, #24]
 800d41c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	2203      	movs	r2, #3
 800d42c:	fa02 f303 	lsl.w	r3, r2, r3
 800d430:	43db      	mvns	r3, r3
 800d432:	69ba      	ldr	r2, [r7, #24]
 800d434:	4013      	ands	r3, r2
 800d436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	f003 0203 	and.w	r2, r3, #3
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	fa02 f303 	lsl.w	r3, r2, r3
 800d448:	69ba      	ldr	r2, [r7, #24]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 80a2 	beq.w	800d5a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	4b57      	ldr	r3, [pc, #348]	; (800d5c4 <HAL_GPIO_Init+0x2e8>)
 800d468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d46a:	4a56      	ldr	r2, [pc, #344]	; (800d5c4 <HAL_GPIO_Init+0x2e8>)
 800d46c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d470:	6453      	str	r3, [r2, #68]	; 0x44
 800d472:	4b54      	ldr	r3, [pc, #336]	; (800d5c4 <HAL_GPIO_Init+0x2e8>)
 800d474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d47a:	60fb      	str	r3, [r7, #12]
 800d47c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d47e:	4a52      	ldr	r2, [pc, #328]	; (800d5c8 <HAL_GPIO_Init+0x2ec>)
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	089b      	lsrs	r3, r3, #2
 800d484:	3302      	adds	r3, #2
 800d486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d48a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	f003 0303 	and.w	r3, r3, #3
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	220f      	movs	r2, #15
 800d496:	fa02 f303 	lsl.w	r3, r2, r3
 800d49a:	43db      	mvns	r3, r3
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	4013      	ands	r3, r2
 800d4a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a49      	ldr	r2, [pc, #292]	; (800d5cc <HAL_GPIO_Init+0x2f0>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d019      	beq.n	800d4de <HAL_GPIO_Init+0x202>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a48      	ldr	r2, [pc, #288]	; (800d5d0 <HAL_GPIO_Init+0x2f4>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d013      	beq.n	800d4da <HAL_GPIO_Init+0x1fe>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a47      	ldr	r2, [pc, #284]	; (800d5d4 <HAL_GPIO_Init+0x2f8>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d00d      	beq.n	800d4d6 <HAL_GPIO_Init+0x1fa>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a46      	ldr	r2, [pc, #280]	; (800d5d8 <HAL_GPIO_Init+0x2fc>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d007      	beq.n	800d4d2 <HAL_GPIO_Init+0x1f6>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a45      	ldr	r2, [pc, #276]	; (800d5dc <HAL_GPIO_Init+0x300>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d101      	bne.n	800d4ce <HAL_GPIO_Init+0x1f2>
 800d4ca:	2304      	movs	r3, #4
 800d4cc:	e008      	b.n	800d4e0 <HAL_GPIO_Init+0x204>
 800d4ce:	2307      	movs	r3, #7
 800d4d0:	e006      	b.n	800d4e0 <HAL_GPIO_Init+0x204>
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e004      	b.n	800d4e0 <HAL_GPIO_Init+0x204>
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e002      	b.n	800d4e0 <HAL_GPIO_Init+0x204>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e000      	b.n	800d4e0 <HAL_GPIO_Init+0x204>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	69fa      	ldr	r2, [r7, #28]
 800d4e2:	f002 0203 	and.w	r2, r2, #3
 800d4e6:	0092      	lsls	r2, r2, #2
 800d4e8:	4093      	lsls	r3, r2
 800d4ea:	69ba      	ldr	r2, [r7, #24]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d4f0:	4935      	ldr	r1, [pc, #212]	; (800d5c8 <HAL_GPIO_Init+0x2ec>)
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	089b      	lsrs	r3, r3, #2
 800d4f6:	3302      	adds	r3, #2
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d4fe:	4b38      	ldr	r3, [pc, #224]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	43db      	mvns	r3, r3
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	4013      	ands	r3, r2
 800d50c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800d51a:	69ba      	ldr	r2, [r7, #24]
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	4313      	orrs	r3, r2
 800d520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d522:	4a2f      	ldr	r2, [pc, #188]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d528:	4b2d      	ldr	r3, [pc, #180]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	43db      	mvns	r3, r3
 800d532:	69ba      	ldr	r2, [r7, #24]
 800d534:	4013      	ands	r3, r2
 800d536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d003      	beq.n	800d54c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	4313      	orrs	r3, r2
 800d54a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d54c:	4a24      	ldr	r2, [pc, #144]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d552:	4b23      	ldr	r3, [pc, #140]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	43db      	mvns	r3, r3
 800d55c:	69ba      	ldr	r2, [r7, #24]
 800d55e:	4013      	ands	r3, r2
 800d560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	4313      	orrs	r3, r2
 800d574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d576:	4a1a      	ldr	r2, [pc, #104]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d57c:	4b18      	ldr	r3, [pc, #96]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	43db      	mvns	r3, r3
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	4013      	ands	r3, r2
 800d58a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d003      	beq.n	800d5a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d5a0:	4a0f      	ldr	r2, [pc, #60]	; (800d5e0 <HAL_GPIO_Init+0x304>)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	2b0f      	cmp	r3, #15
 800d5b0:	f67f aea2 	bls.w	800d2f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop
 800d5b8:	3724      	adds	r7, #36	; 0x24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	40023800 	.word	0x40023800
 800d5c8:	40013800 	.word	0x40013800
 800d5cc:	40020000 	.word	0x40020000
 800d5d0:	40020400 	.word	0x40020400
 800d5d4:	40020800 	.word	0x40020800
 800d5d8:	40020c00 	.word	0x40020c00
 800d5dc:	40021000 	.word	0x40021000
 800d5e0:	40013c00 	.word	0x40013c00

0800d5e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	e0bb      	b.n	800d778 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d600:	2201      	movs	r2, #1
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	fa02 f303 	lsl.w	r3, r2, r3
 800d608:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	4013      	ands	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	429a      	cmp	r2, r3
 800d618:	f040 80ab 	bne.w	800d772 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d61c:	4a5c      	ldr	r2, [pc, #368]	; (800d790 <HAL_GPIO_DeInit+0x1ac>)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	3302      	adds	r3, #2
 800d624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d628:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f003 0303 	and.w	r3, r3, #3
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	220f      	movs	r2, #15
 800d634:	fa02 f303 	lsl.w	r3, r2, r3
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	4013      	ands	r3, r2
 800d63c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a54      	ldr	r2, [pc, #336]	; (800d794 <HAL_GPIO_DeInit+0x1b0>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d019      	beq.n	800d67a <HAL_GPIO_DeInit+0x96>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a53      	ldr	r2, [pc, #332]	; (800d798 <HAL_GPIO_DeInit+0x1b4>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d013      	beq.n	800d676 <HAL_GPIO_DeInit+0x92>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a52      	ldr	r2, [pc, #328]	; (800d79c <HAL_GPIO_DeInit+0x1b8>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d00d      	beq.n	800d672 <HAL_GPIO_DeInit+0x8e>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a51      	ldr	r2, [pc, #324]	; (800d7a0 <HAL_GPIO_DeInit+0x1bc>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d007      	beq.n	800d66e <HAL_GPIO_DeInit+0x8a>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a50      	ldr	r2, [pc, #320]	; (800d7a4 <HAL_GPIO_DeInit+0x1c0>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d101      	bne.n	800d66a <HAL_GPIO_DeInit+0x86>
 800d666:	2304      	movs	r3, #4
 800d668:	e008      	b.n	800d67c <HAL_GPIO_DeInit+0x98>
 800d66a:	2307      	movs	r3, #7
 800d66c:	e006      	b.n	800d67c <HAL_GPIO_DeInit+0x98>
 800d66e:	2303      	movs	r3, #3
 800d670:	e004      	b.n	800d67c <HAL_GPIO_DeInit+0x98>
 800d672:	2302      	movs	r3, #2
 800d674:	e002      	b.n	800d67c <HAL_GPIO_DeInit+0x98>
 800d676:	2301      	movs	r3, #1
 800d678:	e000      	b.n	800d67c <HAL_GPIO_DeInit+0x98>
 800d67a:	2300      	movs	r3, #0
 800d67c:	697a      	ldr	r2, [r7, #20]
 800d67e:	f002 0203 	and.w	r2, r2, #3
 800d682:	0092      	lsls	r2, r2, #2
 800d684:	4093      	lsls	r3, r2
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d132      	bne.n	800d6f2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d68c:	4b46      	ldr	r3, [pc, #280]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	43db      	mvns	r3, r3
 800d694:	4944      	ldr	r1, [pc, #272]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d696:	4013      	ands	r3, r2
 800d698:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d69a:	4b43      	ldr	r3, [pc, #268]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d69c:	685a      	ldr	r2, [r3, #4]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	43db      	mvns	r3, r3
 800d6a2:	4941      	ldr	r1, [pc, #260]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d6a8:	4b3f      	ldr	r3, [pc, #252]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d6aa:	689a      	ldr	r2, [r3, #8]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	43db      	mvns	r3, r3
 800d6b0:	493d      	ldr	r1, [pc, #244]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d6b6:	4b3c      	ldr	r3, [pc, #240]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	43db      	mvns	r3, r3
 800d6be:	493a      	ldr	r1, [pc, #232]	; (800d7a8 <HAL_GPIO_DeInit+0x1c4>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	f003 0303 	and.w	r3, r3, #3
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	220f      	movs	r2, #15
 800d6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d6d4:	4a2e      	ldr	r2, [pc, #184]	; (800d790 <HAL_GPIO_DeInit+0x1ac>)
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	089b      	lsrs	r3, r3, #2
 800d6da:	3302      	adds	r3, #2
 800d6dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	43da      	mvns	r2, r3
 800d6e4:	482a      	ldr	r0, [pc, #168]	; (800d790 <HAL_GPIO_DeInit+0x1ac>)
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	089b      	lsrs	r3, r3, #2
 800d6ea:	400a      	ands	r2, r1
 800d6ec:	3302      	adds	r3, #2
 800d6ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	2103      	movs	r1, #3
 800d6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d700:	43db      	mvns	r3, r3
 800d702:	401a      	ands	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	08da      	lsrs	r2, r3, #3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	3208      	adds	r2, #8
 800d710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	220f      	movs	r2, #15
 800d71e:	fa02 f303 	lsl.w	r3, r2, r3
 800d722:	43db      	mvns	r3, r3
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	08d2      	lsrs	r2, r2, #3
 800d728:	4019      	ands	r1, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3208      	adds	r2, #8
 800d72e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68da      	ldr	r2, [r3, #12]
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	2103      	movs	r1, #3
 800d73c:	fa01 f303 	lsl.w	r3, r1, r3
 800d740:	43db      	mvns	r3, r3
 800d742:	401a      	ands	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	2101      	movs	r1, #1
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	fa01 f303 	lsl.w	r3, r1, r3
 800d754:	43db      	mvns	r3, r3
 800d756:	401a      	ands	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	689a      	ldr	r2, [r3, #8]
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	2103      	movs	r1, #3
 800d766:	fa01 f303 	lsl.w	r3, r1, r3
 800d76a:	43db      	mvns	r3, r3
 800d76c:	401a      	ands	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	3301      	adds	r3, #1
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2b0f      	cmp	r3, #15
 800d77c:	f67f af40 	bls.w	800d600 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d780:	bf00      	nop
 800d782:	bf00      	nop
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	40013800 	.word	0x40013800
 800d794:	40020000 	.word	0x40020000
 800d798:	40020400 	.word	0x40020400
 800d79c:	40020800 	.word	0x40020800
 800d7a0:	40020c00 	.word	0x40020c00
 800d7a4:	40021000 	.word	0x40021000
 800d7a8:	40013c00 	.word	0x40013c00

0800d7ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	887b      	ldrh	r3, [r7, #2]
 800d7be:	4013      	ands	r3, r2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d002      	beq.n	800d7ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	73fb      	strb	r3, [r7, #15]
 800d7c8:	e001      	b.n	800d7ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	807b      	strh	r3, [r7, #2]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d7ec:	787b      	ldrb	r3, [r7, #1]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d003      	beq.n	800d7fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d7f2:	887a      	ldrh	r2, [r7, #2]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d7f8:	e003      	b.n	800d802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d7fa:	887b      	ldrh	r3, [r7, #2]
 800d7fc:	041a      	lsls	r2, r3, #16
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	619a      	str	r2, [r3, #24]
}
 800d802:	bf00      	nop
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	695a      	ldr	r2, [r3, #20]
 800d81e:	887b      	ldrh	r3, [r7, #2]
 800d820:	401a      	ands	r2, r3
 800d822:	887b      	ldrh	r3, [r7, #2]
 800d824:	429a      	cmp	r2, r3
 800d826:	d104      	bne.n	800d832 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d828:	887b      	ldrh	r3, [r7, #2]
 800d82a:	041a      	lsls	r2, r3, #16
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800d830:	e002      	b.n	800d838 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800d832:	887a      	ldrh	r2, [r7, #2]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	619a      	str	r2, [r3, #24]
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e25e      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d075      	beq.n	800d94e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d862:	4b88      	ldr	r3, [pc, #544]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f003 030c 	and.w	r3, r3, #12
 800d86a:	2b04      	cmp	r3, #4
 800d86c:	d00c      	beq.n	800d888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d86e:	4b85      	ldr	r3, [pc, #532]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d876:	2b08      	cmp	r3, #8
 800d878:	d112      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d87a:	4b82      	ldr	r3, [pc, #520]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d886:	d10b      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d888:	4b7e      	ldr	r3, [pc, #504]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d890:	2b00      	cmp	r3, #0
 800d892:	d05b      	beq.n	800d94c <HAL_RCC_OscConfig+0x108>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d157      	bne.n	800d94c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e239      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8a8:	d106      	bne.n	800d8b8 <HAL_RCC_OscConfig+0x74>
 800d8aa:	4b76      	ldr	r3, [pc, #472]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a75      	ldr	r2, [pc, #468]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8b4:	6013      	str	r3, [r2, #0]
 800d8b6:	e01d      	b.n	800d8f4 <HAL_RCC_OscConfig+0xb0>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d8c0:	d10c      	bne.n	800d8dc <HAL_RCC_OscConfig+0x98>
 800d8c2:	4b70      	ldr	r3, [pc, #448]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a6f      	ldr	r2, [pc, #444]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	4b6d      	ldr	r3, [pc, #436]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a6c      	ldr	r2, [pc, #432]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	e00b      	b.n	800d8f4 <HAL_RCC_OscConfig+0xb0>
 800d8dc:	4b69      	ldr	r3, [pc, #420]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a68      	ldr	r2, [pc, #416]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8e6:	6013      	str	r3, [r2, #0]
 800d8e8:	4b66      	ldr	r3, [pc, #408]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a65      	ldr	r2, [pc, #404]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d8ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d013      	beq.n	800d924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8fc:	f7fe fa44 	bl	800bd88 <HAL_GetTick>
 800d900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d902:	e008      	b.n	800d916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d904:	f7fe fa40 	bl	800bd88 <HAL_GetTick>
 800d908:	4602      	mov	r2, r0
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	2b64      	cmp	r3, #100	; 0x64
 800d910:	d901      	bls.n	800d916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e1fe      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d916:	4b5b      	ldr	r3, [pc, #364]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0f0      	beq.n	800d904 <HAL_RCC_OscConfig+0xc0>
 800d922:	e014      	b.n	800d94e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d924:	f7fe fa30 	bl	800bd88 <HAL_GetTick>
 800d928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d92a:	e008      	b.n	800d93e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d92c:	f7fe fa2c 	bl	800bd88 <HAL_GetTick>
 800d930:	4602      	mov	r2, r0
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	2b64      	cmp	r3, #100	; 0x64
 800d938:	d901      	bls.n	800d93e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d93a:	2303      	movs	r3, #3
 800d93c:	e1ea      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d93e:	4b51      	ldr	r3, [pc, #324]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1f0      	bne.n	800d92c <HAL_RCC_OscConfig+0xe8>
 800d94a:	e000      	b.n	800d94e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d94c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0302 	and.w	r3, r3, #2
 800d956:	2b00      	cmp	r3, #0
 800d958:	d063      	beq.n	800da22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d95a:	4b4a      	ldr	r3, [pc, #296]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f003 030c 	and.w	r3, r3, #12
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00b      	beq.n	800d97e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d966:	4b47      	ldr	r3, [pc, #284]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d96e:	2b08      	cmp	r3, #8
 800d970:	d11c      	bne.n	800d9ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d972:	4b44      	ldr	r3, [pc, #272]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d116      	bne.n	800d9ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d97e:	4b41      	ldr	r3, [pc, #260]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d005      	beq.n	800d996 <HAL_RCC_OscConfig+0x152>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d001      	beq.n	800d996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	e1be      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d996:	4b3b      	ldr	r3, [pc, #236]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	4937      	ldr	r1, [pc, #220]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9aa:	e03a      	b.n	800da22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d020      	beq.n	800d9f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d9b4:	4b34      	ldr	r3, [pc, #208]	; (800da88 <HAL_RCC_OscConfig+0x244>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9ba:	f7fe f9e5 	bl	800bd88 <HAL_GetTick>
 800d9be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9c0:	e008      	b.n	800d9d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d9c2:	f7fe f9e1 	bl	800bd88 <HAL_GetTick>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d901      	bls.n	800d9d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	e19f      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9d4:	4b2b      	ldr	r3, [pc, #172]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d0f0      	beq.n	800d9c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9e0:	4b28      	ldr	r3, [pc, #160]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	4925      	ldr	r1, [pc, #148]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	600b      	str	r3, [r1, #0]
 800d9f4:	e015      	b.n	800da22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d9f6:	4b24      	ldr	r3, [pc, #144]	; (800da88 <HAL_RCC_OscConfig+0x244>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9fc:	f7fe f9c4 	bl	800bd88 <HAL_GetTick>
 800da00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da02:	e008      	b.n	800da16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da04:	f7fe f9c0 	bl	800bd88 <HAL_GetTick>
 800da08:	4602      	mov	r2, r0
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d901      	bls.n	800da16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e17e      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da16:	4b1b      	ldr	r3, [pc, #108]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1f0      	bne.n	800da04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f003 0308 	and.w	r3, r3, #8
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d036      	beq.n	800da9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d016      	beq.n	800da64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da36:	4b15      	ldr	r3, [pc, #84]	; (800da8c <HAL_RCC_OscConfig+0x248>)
 800da38:	2201      	movs	r2, #1
 800da3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da3c:	f7fe f9a4 	bl	800bd88 <HAL_GetTick>
 800da40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da42:	e008      	b.n	800da56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da44:	f7fe f9a0 	bl	800bd88 <HAL_GetTick>
 800da48:	4602      	mov	r2, r0
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d901      	bls.n	800da56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800da52:	2303      	movs	r3, #3
 800da54:	e15e      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <HAL_RCC_OscConfig+0x240>)
 800da58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d0f0      	beq.n	800da44 <HAL_RCC_OscConfig+0x200>
 800da62:	e01b      	b.n	800da9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800da64:	4b09      	ldr	r3, [pc, #36]	; (800da8c <HAL_RCC_OscConfig+0x248>)
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da6a:	f7fe f98d 	bl	800bd88 <HAL_GetTick>
 800da6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da70:	e00e      	b.n	800da90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da72:	f7fe f989 	bl	800bd88 <HAL_GetTick>
 800da76:	4602      	mov	r2, r0
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d907      	bls.n	800da90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800da80:	2303      	movs	r3, #3
 800da82:	e147      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
 800da84:	40023800 	.word	0x40023800
 800da88:	42470000 	.word	0x42470000
 800da8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da90:	4b88      	ldr	r3, [pc, #544]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800da92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da94:	f003 0302 	and.w	r3, r3, #2
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1ea      	bne.n	800da72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 0304 	and.w	r3, r3, #4
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 8097 	beq.w	800dbd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800daaa:	2300      	movs	r3, #0
 800daac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800daae:	4b81      	ldr	r3, [pc, #516]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10f      	bne.n	800dada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800daba:	2300      	movs	r3, #0
 800dabc:	60bb      	str	r3, [r7, #8]
 800dabe:	4b7d      	ldr	r3, [pc, #500]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac2:	4a7c      	ldr	r2, [pc, #496]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dac8:	6413      	str	r3, [r2, #64]	; 0x40
 800daca:	4b7a      	ldr	r3, [pc, #488]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dad2:	60bb      	str	r3, [r7, #8]
 800dad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dad6:	2301      	movs	r3, #1
 800dad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dada:	4b77      	ldr	r3, [pc, #476]	; (800dcb8 <HAL_RCC_OscConfig+0x474>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d118      	bne.n	800db18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dae6:	4b74      	ldr	r3, [pc, #464]	; (800dcb8 <HAL_RCC_OscConfig+0x474>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a73      	ldr	r2, [pc, #460]	; (800dcb8 <HAL_RCC_OscConfig+0x474>)
 800daec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800daf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800daf2:	f7fe f949 	bl	800bd88 <HAL_GetTick>
 800daf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800daf8:	e008      	b.n	800db0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dafa:	f7fe f945 	bl	800bd88 <HAL_GetTick>
 800dafe:	4602      	mov	r2, r0
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	2b02      	cmp	r3, #2
 800db06:	d901      	bls.n	800db0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800db08:	2303      	movs	r3, #3
 800db0a:	e103      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db0c:	4b6a      	ldr	r3, [pc, #424]	; (800dcb8 <HAL_RCC_OscConfig+0x474>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0f0      	beq.n	800dafa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d106      	bne.n	800db2e <HAL_RCC_OscConfig+0x2ea>
 800db20:	4b64      	ldr	r3, [pc, #400]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db24:	4a63      	ldr	r2, [pc, #396]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db26:	f043 0301 	orr.w	r3, r3, #1
 800db2a:	6713      	str	r3, [r2, #112]	; 0x70
 800db2c:	e01c      	b.n	800db68 <HAL_RCC_OscConfig+0x324>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	2b05      	cmp	r3, #5
 800db34:	d10c      	bne.n	800db50 <HAL_RCC_OscConfig+0x30c>
 800db36:	4b5f      	ldr	r3, [pc, #380]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3a:	4a5e      	ldr	r2, [pc, #376]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db3c:	f043 0304 	orr.w	r3, r3, #4
 800db40:	6713      	str	r3, [r2, #112]	; 0x70
 800db42:	4b5c      	ldr	r3, [pc, #368]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db46:	4a5b      	ldr	r2, [pc, #364]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db48:	f043 0301 	orr.w	r3, r3, #1
 800db4c:	6713      	str	r3, [r2, #112]	; 0x70
 800db4e:	e00b      	b.n	800db68 <HAL_RCC_OscConfig+0x324>
 800db50:	4b58      	ldr	r3, [pc, #352]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db54:	4a57      	ldr	r2, [pc, #348]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db56:	f023 0301 	bic.w	r3, r3, #1
 800db5a:	6713      	str	r3, [r2, #112]	; 0x70
 800db5c:	4b55      	ldr	r3, [pc, #340]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db60:	4a54      	ldr	r2, [pc, #336]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db62:	f023 0304 	bic.w	r3, r3, #4
 800db66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d015      	beq.n	800db9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db70:	f7fe f90a 	bl	800bd88 <HAL_GetTick>
 800db74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db76:	e00a      	b.n	800db8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db78:	f7fe f906 	bl	800bd88 <HAL_GetTick>
 800db7c:	4602      	mov	r2, r0
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	f241 3288 	movw	r2, #5000	; 0x1388
 800db86:	4293      	cmp	r3, r2
 800db88:	d901      	bls.n	800db8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e0c2      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db8e:	4b49      	ldr	r3, [pc, #292]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800db90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db92:	f003 0302 	and.w	r3, r3, #2
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0ee      	beq.n	800db78 <HAL_RCC_OscConfig+0x334>
 800db9a:	e014      	b.n	800dbc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db9c:	f7fe f8f4 	bl	800bd88 <HAL_GetTick>
 800dba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dba2:	e00a      	b.n	800dbba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dba4:	f7fe f8f0 	bl	800bd88 <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d901      	bls.n	800dbba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	e0ac      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbba:	4b3e      	ldr	r3, [pc, #248]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1ee      	bne.n	800dba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbc6:	7dfb      	ldrb	r3, [r7, #23]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d105      	bne.n	800dbd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbcc:	4b39      	ldr	r3, [pc, #228]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd0:	4a38      	ldr	r2, [pc, #224]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dbd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	699b      	ldr	r3, [r3, #24]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 8098 	beq.w	800dd12 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dbe2:	4b34      	ldr	r3, [pc, #208]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	f003 030c 	and.w	r3, r3, #12
 800dbea:	2b08      	cmp	r3, #8
 800dbec:	d05c      	beq.n	800dca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d141      	bne.n	800dc7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbf6:	4b31      	ldr	r3, [pc, #196]	; (800dcbc <HAL_RCC_OscConfig+0x478>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbfc:	f7fe f8c4 	bl	800bd88 <HAL_GetTick>
 800dc00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc02:	e008      	b.n	800dc16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc04:	f7fe f8c0 	bl	800bd88 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d901      	bls.n	800dc16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e07e      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc16:	4b27      	ldr	r3, [pc, #156]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1f0      	bne.n	800dc04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	69da      	ldr	r2, [r3, #28]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	431a      	orrs	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	019b      	lsls	r3, r3, #6
 800dc32:	431a      	orrs	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc38:	085b      	lsrs	r3, r3, #1
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	041b      	lsls	r3, r3, #16
 800dc3e:	431a      	orrs	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc44:	061b      	lsls	r3, r3, #24
 800dc46:	491b      	ldr	r1, [pc, #108]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc4c:	4b1b      	ldr	r3, [pc, #108]	; (800dcbc <HAL_RCC_OscConfig+0x478>)
 800dc4e:	2201      	movs	r2, #1
 800dc50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc52:	f7fe f899 	bl	800bd88 <HAL_GetTick>
 800dc56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc58:	e008      	b.n	800dc6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc5a:	f7fe f895 	bl	800bd88 <HAL_GetTick>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d901      	bls.n	800dc6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e053      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc6c:	4b11      	ldr	r3, [pc, #68]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0f0      	beq.n	800dc5a <HAL_RCC_OscConfig+0x416>
 800dc78:	e04b      	b.n	800dd12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc7a:	4b10      	ldr	r3, [pc, #64]	; (800dcbc <HAL_RCC_OscConfig+0x478>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc80:	f7fe f882 	bl	800bd88 <HAL_GetTick>
 800dc84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc86:	e008      	b.n	800dc9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc88:	f7fe f87e 	bl	800bd88 <HAL_GetTick>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d901      	bls.n	800dc9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800dc96:	2303      	movs	r3, #3
 800dc98:	e03c      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc9a:	4b06      	ldr	r3, [pc, #24]	; (800dcb4 <HAL_RCC_OscConfig+0x470>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1f0      	bne.n	800dc88 <HAL_RCC_OscConfig+0x444>
 800dca6:	e034      	b.n	800dd12 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d107      	bne.n	800dcc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e02f      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
 800dcb4:	40023800 	.word	0x40023800
 800dcb8:	40007000 	.word	0x40007000
 800dcbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dcc0:	4b16      	ldr	r3, [pc, #88]	; (800dd1c <HAL_RCC_OscConfig+0x4d8>)
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d11c      	bne.n	800dd0e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d115      	bne.n	800dd0e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dce8:	4013      	ands	r3, r2
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d10d      	bne.n	800dd0e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d106      	bne.n	800dd0e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d001      	beq.n	800dd12 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e000      	b.n	800dd14 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	40023800 	.word	0x40023800

0800dd20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e0cc      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd34:	4b68      	ldr	r3, [pc, #416]	; (800ded8 <HAL_RCC_ClockConfig+0x1b8>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 030f 	and.w	r3, r3, #15
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d90c      	bls.n	800dd5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd42:	4b65      	ldr	r3, [pc, #404]	; (800ded8 <HAL_RCC_ClockConfig+0x1b8>)
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd4a:	4b63      	ldr	r3, [pc, #396]	; (800ded8 <HAL_RCC_ClockConfig+0x1b8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f003 030f 	and.w	r3, r3, #15
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d001      	beq.n	800dd5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e0b8      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 0302 	and.w	r3, r3, #2
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d020      	beq.n	800ddaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d005      	beq.n	800dd80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd74:	4b59      	ldr	r3, [pc, #356]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	4a58      	ldr	r2, [pc, #352]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dd7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dd7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 0308 	and.w	r3, r3, #8
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d005      	beq.n	800dd98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd8c:	4b53      	ldr	r3, [pc, #332]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	4a52      	ldr	r2, [pc, #328]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dd92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dd96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd98:	4b50      	ldr	r3, [pc, #320]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	494d      	ldr	r1, [pc, #308]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dda6:	4313      	orrs	r3, r2
 800dda8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f003 0301 	and.w	r3, r3, #1
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d044      	beq.n	800de40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d107      	bne.n	800ddce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddbe:	4b47      	ldr	r3, [pc, #284]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d119      	bne.n	800ddfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e07f      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d003      	beq.n	800ddde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	d107      	bne.n	800ddee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddde:	4b3f      	ldr	r3, [pc, #252]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d109      	bne.n	800ddfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e06f      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ddee:	4b3b      	ldr	r3, [pc, #236]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f003 0302 	and.w	r3, r3, #2
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e067      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ddfe:	4b37      	ldr	r3, [pc, #220]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	f023 0203 	bic.w	r2, r3, #3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	4934      	ldr	r1, [pc, #208]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800de0c:	4313      	orrs	r3, r2
 800de0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800de10:	f7fd ffba 	bl	800bd88 <HAL_GetTick>
 800de14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de16:	e00a      	b.n	800de2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de18:	f7fd ffb6 	bl	800bd88 <HAL_GetTick>
 800de1c:	4602      	mov	r2, r0
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	f241 3288 	movw	r2, #5000	; 0x1388
 800de26:	4293      	cmp	r3, r2
 800de28:	d901      	bls.n	800de2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e04f      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de2e:	4b2b      	ldr	r3, [pc, #172]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	f003 020c 	and.w	r2, r3, #12
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d1eb      	bne.n	800de18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800de40:	4b25      	ldr	r3, [pc, #148]	; (800ded8 <HAL_RCC_ClockConfig+0x1b8>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f003 030f 	and.w	r3, r3, #15
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d20c      	bcs.n	800de68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de4e:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <HAL_RCC_ClockConfig+0x1b8>)
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	b2d2      	uxtb	r2, r2
 800de54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de56:	4b20      	ldr	r3, [pc, #128]	; (800ded8 <HAL_RCC_ClockConfig+0x1b8>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d001      	beq.n	800de68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	e032      	b.n	800dece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f003 0304 	and.w	r3, r3, #4
 800de70:	2b00      	cmp	r3, #0
 800de72:	d008      	beq.n	800de86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de74:	4b19      	ldr	r3, [pc, #100]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	4916      	ldr	r1, [pc, #88]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800de82:	4313      	orrs	r3, r2
 800de84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f003 0308 	and.w	r3, r3, #8
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d009      	beq.n	800dea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	490e      	ldr	r1, [pc, #56]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dea6:	f000 f821 	bl	800deec <HAL_RCC_GetSysClockFreq>
 800deaa:	4602      	mov	r2, r0
 800deac:	4b0b      	ldr	r3, [pc, #44]	; (800dedc <HAL_RCC_ClockConfig+0x1bc>)
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	091b      	lsrs	r3, r3, #4
 800deb2:	f003 030f 	and.w	r3, r3, #15
 800deb6:	490a      	ldr	r1, [pc, #40]	; (800dee0 <HAL_RCC_ClockConfig+0x1c0>)
 800deb8:	5ccb      	ldrb	r3, [r1, r3]
 800deba:	fa22 f303 	lsr.w	r3, r2, r3
 800debe:	4a09      	ldr	r2, [pc, #36]	; (800dee4 <HAL_RCC_ClockConfig+0x1c4>)
 800dec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <HAL_RCC_ClockConfig+0x1c8>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fd ff1a 	bl	800bd00 <HAL_InitTick>

  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	40023c00 	.word	0x40023c00
 800dedc:	40023800 	.word	0x40023800
 800dee0:	08017830 	.word	0x08017830
 800dee4:	20000000 	.word	0x20000000
 800dee8:	200000c0 	.word	0x200000c0

0800deec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800deec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800def0:	b090      	sub	sp, #64	; 0x40
 800def2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	637b      	str	r3, [r7, #52]	; 0x34
 800def8:	2300      	movs	r3, #0
 800defa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800defc:	2300      	movs	r3, #0
 800defe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800df00:	2300      	movs	r3, #0
 800df02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df04:	4b59      	ldr	r3, [pc, #356]	; (800e06c <HAL_RCC_GetSysClockFreq+0x180>)
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f003 030c 	and.w	r3, r3, #12
 800df0c:	2b08      	cmp	r3, #8
 800df0e:	d00d      	beq.n	800df2c <HAL_RCC_GetSysClockFreq+0x40>
 800df10:	2b08      	cmp	r3, #8
 800df12:	f200 80a1 	bhi.w	800e058 <HAL_RCC_GetSysClockFreq+0x16c>
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <HAL_RCC_GetSysClockFreq+0x34>
 800df1a:	2b04      	cmp	r3, #4
 800df1c:	d003      	beq.n	800df26 <HAL_RCC_GetSysClockFreq+0x3a>
 800df1e:	e09b      	b.n	800e058 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df20:	4b53      	ldr	r3, [pc, #332]	; (800e070 <HAL_RCC_GetSysClockFreq+0x184>)
 800df22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800df24:	e09b      	b.n	800e05e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df26:	4b53      	ldr	r3, [pc, #332]	; (800e074 <HAL_RCC_GetSysClockFreq+0x188>)
 800df28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800df2a:	e098      	b.n	800e05e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df2c:	4b4f      	ldr	r3, [pc, #316]	; (800e06c <HAL_RCC_GetSysClockFreq+0x180>)
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800df36:	4b4d      	ldr	r3, [pc, #308]	; (800e06c <HAL_RCC_GetSysClockFreq+0x180>)
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d028      	beq.n	800df94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df42:	4b4a      	ldr	r3, [pc, #296]	; (800e06c <HAL_RCC_GetSysClockFreq+0x180>)
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	099b      	lsrs	r3, r3, #6
 800df48:	2200      	movs	r2, #0
 800df4a:	623b      	str	r3, [r7, #32]
 800df4c:	627a      	str	r2, [r7, #36]	; 0x24
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800df54:	2100      	movs	r1, #0
 800df56:	4b47      	ldr	r3, [pc, #284]	; (800e074 <HAL_RCC_GetSysClockFreq+0x188>)
 800df58:	fb03 f201 	mul.w	r2, r3, r1
 800df5c:	2300      	movs	r3, #0
 800df5e:	fb00 f303 	mul.w	r3, r0, r3
 800df62:	4413      	add	r3, r2
 800df64:	4a43      	ldr	r2, [pc, #268]	; (800e074 <HAL_RCC_GetSysClockFreq+0x188>)
 800df66:	fba0 1202 	umull	r1, r2, r0, r2
 800df6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df6c:	460a      	mov	r2, r1
 800df6e:	62ba      	str	r2, [r7, #40]	; 0x28
 800df70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df72:	4413      	add	r3, r2
 800df74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df78:	2200      	movs	r2, #0
 800df7a:	61bb      	str	r3, [r7, #24]
 800df7c:	61fa      	str	r2, [r7, #28]
 800df7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800df86:	f7f2 fe97 	bl	8000cb8 <__aeabi_uldivmod>
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	4613      	mov	r3, r2
 800df90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df92:	e053      	b.n	800e03c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df94:	4b35      	ldr	r3, [pc, #212]	; (800e06c <HAL_RCC_GetSysClockFreq+0x180>)
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	099b      	lsrs	r3, r3, #6
 800df9a:	2200      	movs	r2, #0
 800df9c:	613b      	str	r3, [r7, #16]
 800df9e:	617a      	str	r2, [r7, #20]
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800dfa6:	f04f 0b00 	mov.w	fp, #0
 800dfaa:	4652      	mov	r2, sl
 800dfac:	465b      	mov	r3, fp
 800dfae:	f04f 0000 	mov.w	r0, #0
 800dfb2:	f04f 0100 	mov.w	r1, #0
 800dfb6:	0159      	lsls	r1, r3, #5
 800dfb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dfbc:	0150      	lsls	r0, r2, #5
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	ebb2 080a 	subs.w	r8, r2, sl
 800dfc6:	eb63 090b 	sbc.w	r9, r3, fp
 800dfca:	f04f 0200 	mov.w	r2, #0
 800dfce:	f04f 0300 	mov.w	r3, #0
 800dfd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800dfd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800dfda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800dfde:	ebb2 0408 	subs.w	r4, r2, r8
 800dfe2:	eb63 0509 	sbc.w	r5, r3, r9
 800dfe6:	f04f 0200 	mov.w	r2, #0
 800dfea:	f04f 0300 	mov.w	r3, #0
 800dfee:	00eb      	lsls	r3, r5, #3
 800dff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dff4:	00e2      	lsls	r2, r4, #3
 800dff6:	4614      	mov	r4, r2
 800dff8:	461d      	mov	r5, r3
 800dffa:	eb14 030a 	adds.w	r3, r4, sl
 800dffe:	603b      	str	r3, [r7, #0]
 800e000:	eb45 030b 	adc.w	r3, r5, fp
 800e004:	607b      	str	r3, [r7, #4]
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	f04f 0300 	mov.w	r3, #0
 800e00e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e012:	4629      	mov	r1, r5
 800e014:	028b      	lsls	r3, r1, #10
 800e016:	4621      	mov	r1, r4
 800e018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e01c:	4621      	mov	r1, r4
 800e01e:	028a      	lsls	r2, r1, #10
 800e020:	4610      	mov	r0, r2
 800e022:	4619      	mov	r1, r3
 800e024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e026:	2200      	movs	r2, #0
 800e028:	60bb      	str	r3, [r7, #8]
 800e02a:	60fa      	str	r2, [r7, #12]
 800e02c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e030:	f7f2 fe42 	bl	8000cb8 <__aeabi_uldivmod>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	4613      	mov	r3, r2
 800e03a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e03c:	4b0b      	ldr	r3, [pc, #44]	; (800e06c <HAL_RCC_GetSysClockFreq+0x180>)
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	0c1b      	lsrs	r3, r3, #16
 800e042:	f003 0303 	and.w	r3, r3, #3
 800e046:	3301      	adds	r3, #1
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800e04c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	fbb2 f3f3 	udiv	r3, r2, r3
 800e054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e056:	e002      	b.n	800e05e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e058:	4b05      	ldr	r3, [pc, #20]	; (800e070 <HAL_RCC_GetSysClockFreq+0x184>)
 800e05a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e05c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e060:	4618      	mov	r0, r3
 800e062:	3740      	adds	r7, #64	; 0x40
 800e064:	46bd      	mov	sp, r7
 800e066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e06a:	bf00      	nop
 800e06c:	40023800 	.word	0x40023800
 800e070:	00f42400 	.word	0x00f42400
 800e074:	017d7840 	.word	0x017d7840

0800e078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e07c:	4b03      	ldr	r3, [pc, #12]	; (800e08c <HAL_RCC_GetHCLKFreq+0x14>)
 800e07e:	681b      	ldr	r3, [r3, #0]
}
 800e080:	4618      	mov	r0, r3
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20000000 	.word	0x20000000

0800e090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e094:	f7ff fff0 	bl	800e078 <HAL_RCC_GetHCLKFreq>
 800e098:	4602      	mov	r2, r0
 800e09a:	4b05      	ldr	r3, [pc, #20]	; (800e0b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	0a9b      	lsrs	r3, r3, #10
 800e0a0:	f003 0307 	and.w	r3, r3, #7
 800e0a4:	4903      	ldr	r1, [pc, #12]	; (800e0b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0a6:	5ccb      	ldrb	r3, [r1, r3]
 800e0a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	40023800 	.word	0x40023800
 800e0b4:	08017840 	.word	0x08017840

0800e0b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e0bc:	f7ff ffdc 	bl	800e078 <HAL_RCC_GetHCLKFreq>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	0b5b      	lsrs	r3, r3, #13
 800e0c8:	f003 0307 	and.w	r3, r3, #7
 800e0cc:	4903      	ldr	r1, [pc, #12]	; (800e0dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0ce:	5ccb      	ldrb	r3, [r1, r3]
 800e0d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	40023800 	.word	0x40023800
 800e0dc:	08017840 	.word	0x08017840

0800e0e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e022      	b.n	800e138 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d105      	bne.n	800e10a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7f7 f9e3 	bl	80054d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2203      	movs	r2, #3
 800e10e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f814 	bl	800e140 <HAL_SD_InitCard>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	e00a      	b.n	800e138 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e140:	b5b0      	push	{r4, r5, r7, lr}
 800e142:	b08e      	sub	sp, #56	; 0x38
 800e144:	af04      	add	r7, sp, #16
 800e146:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e148:	2300      	movs	r3, #0
 800e14a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e14c:	2300      	movs	r3, #0
 800e14e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e150:	2300      	movs	r3, #0
 800e152:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e154:	2300      	movs	r3, #0
 800e156:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e158:	2300      	movs	r3, #0
 800e15a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e15c:	2376      	movs	r3, #118	; 0x76
 800e15e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681d      	ldr	r5, [r3, #0]
 800e164:	466c      	mov	r4, sp
 800e166:	f107 0314 	add.w	r3, r7, #20
 800e16a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e16e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e178:	4628      	mov	r0, r5
 800e17a:	f003 ff9b 	bl	80120b4 <SDIO_Init>
 800e17e:	4603      	mov	r3, r0
 800e180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e031      	b.n	800e1f4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e190:	4b1a      	ldr	r3, [pc, #104]	; (800e1fc <HAL_SD_InitCard+0xbc>)
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f003 ffd3 	bl	8012146 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e1a0:	4b16      	ldr	r3, [pc, #88]	; (800e1fc <HAL_SD_InitCard+0xbc>)
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 ffe6 	bl	800f178 <SD_PowerON>
 800e1ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e013      	b.n	800e1f4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 ff05 	bl	800efdc <SD_InitCard>
 800e1d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	431a      	orrs	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3728      	adds	r7, #40	; 0x28
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bdb0      	pop	{r4, r5, r7, pc}
 800e1fc:	422580a0 	.word	0x422580a0

0800e200 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08c      	sub	sp, #48	; 0x30
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
 800e20c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d107      	bne.n	800e228 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	e0c9      	b.n	800e3bc <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b01      	cmp	r3, #1
 800e232:	f040 80c2 	bne.w	800e3ba <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2200      	movs	r2, #0
 800e23a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	441a      	add	r2, r3
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e246:	429a      	cmp	r2, r3
 800e248:	d907      	bls.n	800e25a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	e0b0      	b.n	800e3bc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2203      	movs	r2, #3
 800e25e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2200      	movs	r2, #0
 800e268:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	6812      	ldr	r2, [r2, #0]
 800e274:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800e278:	f043 0302 	orr.w	r3, r3, #2
 800e27c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e282:	4a50      	ldr	r2, [pc, #320]	; (800e3c4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28a:	4a4f      	ldr	r2, [pc, #316]	; (800e3c8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e28c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e292:	2200      	movs	r2, #0
 800e294:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	3380      	adds	r3, #128	; 0x80
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	025b      	lsls	r3, r3, #9
 800e2a8:	089b      	lsrs	r3, r3, #2
 800e2aa:	f7fe fd27 	bl	800ccfc <HAL_DMA_Start_IT>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d017      	beq.n	800e2e4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e2c2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a40      	ldr	r2, [pc, #256]	; (800e3cc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e2ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e06b      	b.n	800e3bc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e2e4:	4b3a      	ldr	r3, [pc, #232]	; (800e3d0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d002      	beq.n	800e2f8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800e2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f4:	025b      	lsls	r3, r3, #9
 800e2f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e300:	4618      	mov	r0, r3
 800e302:	f003 ffb3 	bl	801226c <SDMMC_CmdBlockLength>
 800e306:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00f      	beq.n	800e32e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a2e      	ldr	r2, [pc, #184]	; (800e3cc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e314:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	431a      	orrs	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e046      	b.n	800e3bc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e32e:	f04f 33ff 	mov.w	r3, #4294967295
 800e332:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	025b      	lsls	r3, r3, #9
 800e338:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e33a:	2390      	movs	r3, #144	; 0x90
 800e33c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e33e:	2302      	movs	r3, #2
 800e340:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e342:	2300      	movs	r3, #0
 800e344:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e346:	2301      	movs	r3, #1
 800e348:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f107 0210 	add.w	r2, r7, #16
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f003 ff5d 	bl	8012214 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d90a      	bls.n	800e376 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2282      	movs	r2, #130	; 0x82
 800e364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e36c:	4618      	mov	r0, r3
 800e36e:	f003 ffc1 	bl	80122f4 <SDMMC_CmdReadMultiBlock>
 800e372:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e374:	e009      	b.n	800e38a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2281      	movs	r2, #129	; 0x81
 800e37a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e382:	4618      	mov	r0, r3
 800e384:	f003 ff94 	bl	80122b0 <SDMMC_CmdReadSingleBlock>
 800e388:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d012      	beq.n	800e3b6 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a0d      	ldr	r2, [pc, #52]	; (800e3cc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e396:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	431a      	orrs	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e002      	b.n	800e3bc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e000      	b.n	800e3bc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800e3ba:	2302      	movs	r3, #2
  }
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3730      	adds	r7, #48	; 0x30
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	0800edeb 	.word	0x0800edeb
 800e3c8:	0800ee5d 	.word	0x0800ee5d
 800e3cc:	004005ff 	.word	0x004005ff
 800e3d0:	4225858c 	.word	0x4225858c

0800e3d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08c      	sub	sp, #48	; 0x30
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
 800e3e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d107      	bne.n	800e3fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e0ce      	b.n	800e59a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e402:	b2db      	uxtb	r3, r3
 800e404:	2b01      	cmp	r3, #1
 800e406:	f040 80c7 	bne.w	800e598 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	441a      	add	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d907      	bls.n	800e42e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e422:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	e0b5      	b.n	800e59a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2203      	movs	r2, #3
 800e432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	6812      	ldr	r2, [r2, #0]
 800e448:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800e44c:	f043 0302 	orr.w	r3, r3, #2
 800e450:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e456:	4a53      	ldr	r2, [pc, #332]	; (800e5a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800e458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e45e:	4a52      	ldr	r2, [pc, #328]	; (800e5a8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800e460:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e466:	2200      	movs	r2, #0
 800e468:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d002      	beq.n	800e478 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	025b      	lsls	r3, r3, #9
 800e476:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e480:	4618      	mov	r0, r3
 800e482:	f003 fef3 	bl	801226c <SDMMC_CmdBlockLength>
 800e486:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00f      	beq.n	800e4ae <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a46      	ldr	r2, [pc, #280]	; (800e5ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e494:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49c:	431a      	orrs	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e075      	b.n	800e59a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d90a      	bls.n	800e4ca <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	22a0      	movs	r2, #160	; 0xa0
 800e4b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f003 ff5b 	bl	801237c <SDMMC_CmdWriteMultiBlock>
 800e4c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e4c8:	e009      	b.n	800e4de <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2290      	movs	r2, #144	; 0x90
 800e4ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f003 ff2e 	bl	8012338 <SDMMC_CmdWriteSingleBlock>
 800e4dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d012      	beq.n	800e50a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a30      	ldr	r2, [pc, #192]	; (800e5ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e4ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	e047      	b.n	800e59a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e50a:	4b29      	ldr	r3, [pc, #164]	; (800e5b0 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800e50c:	2201      	movs	r2, #1
 800e50e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e514:	68b9      	ldr	r1, [r7, #8]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3380      	adds	r3, #128	; 0x80
 800e51c:	461a      	mov	r2, r3
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	025b      	lsls	r3, r3, #9
 800e522:	089b      	lsrs	r3, r3, #2
 800e524:	f7fe fbea 	bl	800ccfc <HAL_DMA_Start_IT>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d01c      	beq.n	800e568 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	6812      	ldr	r2, [r2, #0]
 800e538:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800e53c:	f023 0302 	bic.w	r3, r3, #2
 800e540:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a19      	ldr	r2, [pc, #100]	; (800e5ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e548:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2201      	movs	r2, #1
 800e55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2200      	movs	r2, #0
 800e562:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e564:	2301      	movs	r3, #1
 800e566:	e018      	b.n	800e59a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e568:	f04f 33ff 	mov.w	r3, #4294967295
 800e56c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	025b      	lsls	r3, r3, #9
 800e572:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e574:	2390      	movs	r3, #144	; 0x90
 800e576:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e578:	2300      	movs	r3, #0
 800e57a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e580:	2301      	movs	r3, #1
 800e582:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f107 0210 	add.w	r2, r7, #16
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f003 fe40 	bl	8012214 <SDIO_ConfigData>

      return HAL_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	e000      	b.n	800e59a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e598:	2302      	movs	r3, #2
  }
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3730      	adds	r7, #48	; 0x30
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	0800edc1 	.word	0x0800edc1
 800e5a8:	0800ee5d 	.word	0x0800ee5d
 800e5ac:	004005ff 	.word	0x004005ff
 800e5b0:	4225858c 	.word	0x4225858c

0800e5b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d008      	beq.n	800e5e2 <HAL_SD_IRQHandler+0x2e>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f003 0308 	and.w	r3, r3, #8
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 ffe2 	bl	800f5a4 <SD_Read_IT>
 800e5e0:	e165      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 808f 	beq.w	800e710 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5fa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	6812      	ldr	r2, [r2, #0]
 800e606:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800e60a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800e60e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f022 0201 	bic.w	r2, r2, #1
 800e61e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f003 0308 	and.w	r3, r3, #8
 800e626:	2b00      	cmp	r3, #0
 800e628:	d039      	beq.n	800e69e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f003 0302 	and.w	r3, r3, #2
 800e630:	2b00      	cmp	r3, #0
 800e632:	d104      	bne.n	800e63e <HAL_SD_IRQHandler+0x8a>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f003 0320 	and.w	r3, r3, #32
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d011      	beq.n	800e662 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4618      	mov	r0, r3
 800e644:	f003 febc 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800e648:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d008      	beq.n	800e662 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	431a      	orrs	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 f92f 	bl	800e8c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f240 523a 	movw	r2, #1338	; 0x53a
 800e66a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2201      	movs	r2, #1
 800e670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f003 0301 	and.w	r3, r3, #1
 800e680:	2b00      	cmp	r3, #0
 800e682:	d104      	bne.n	800e68e <HAL_SD_IRQHandler+0xda>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f003 0302 	and.w	r3, r3, #2
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d003      	beq.n	800e696 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7f6 fefe 	bl	8005490 <HAL_SD_RxCpltCallback>
 800e694:	e10b      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7f6 ff0a 	bl	80054b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e69c:	e107      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 8102 	beq.w	800e8ae <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f003 0320 	and.w	r3, r3, #32
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d011      	beq.n	800e6d8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f003 fe81 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800e6be:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d008      	beq.n	800e6d8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f8f4 	bl	800e8c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f003 0301 	and.w	r3, r3, #1
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f040 80e5 	bne.w	800e8ae <HAL_SD_IRQHandler+0x2fa>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f040 80df 	bne.w	800e8ae <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f022 0208 	bic.w	r2, r2, #8
 800e6fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2201      	movs	r2, #1
 800e704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7f6 fed1 	bl	80054b0 <HAL_SD_TxCpltCallback>
}
 800e70e:	e0ce      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d008      	beq.n	800e730 <HAL_SD_IRQHandler+0x17c>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f003 0308 	and.w	r3, r3, #8
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 ff8c 	bl	800f646 <SD_Write_IT>
 800e72e:	e0be      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e736:	f240 233a 	movw	r3, #570	; 0x23a
 800e73a:	4013      	ands	r3, r2
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 80b6 	beq.w	800e8ae <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e748:	f003 0302 	and.w	r3, r3, #2
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d005      	beq.n	800e75c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e754:	f043 0202 	orr.w	r2, r3, #2
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e762:	f003 0308 	and.w	r3, r3, #8
 800e766:	2b00      	cmp	r3, #0
 800e768:	d005      	beq.n	800e776 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76e:	f043 0208 	orr.w	r2, r3, #8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d005      	beq.n	800e790 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e788:	f043 0220 	orr.w	r2, r3, #32
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e796:	f003 0310 	and.w	r3, r3, #16
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d005      	beq.n	800e7aa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a2:	f043 0210 	orr.w	r2, r3, #16
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d005      	beq.n	800e7c4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7bc:	f043 0208 	orr.w	r2, r3, #8
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f240 723a 	movw	r2, #1850	; 0x73a
 800e7cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	6812      	ldr	r2, [r2, #0]
 800e7d8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800e7dc:	f023 0302 	bic.w	r3, r3, #2
 800e7e0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f003 fdea 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f2:	431a      	orrs	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f003 0308 	and.w	r3, r3, #8
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00a      	beq.n	800e818 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2201      	movs	r2, #1
 800e806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f855 	bl	800e8c0 <HAL_SD_ErrorCallback>
}
 800e816:	e04a      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d045      	beq.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f003 0310 	and.w	r3, r3, #16
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d104      	bne.n	800e836 <HAL_SD_IRQHandler+0x282>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f003 0320 	and.w	r3, r3, #32
 800e832:	2b00      	cmp	r3, #0
 800e834:	d011      	beq.n	800e85a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83a:	4a1f      	ldr	r2, [pc, #124]	; (800e8b8 <HAL_SD_IRQHandler+0x304>)
 800e83c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e842:	4618      	mov	r0, r3
 800e844:	f7fe fab2 	bl	800cdac <HAL_DMA_Abort_IT>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d02f      	beq.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e852:	4618      	mov	r0, r3
 800e854:	f000 fb54 	bl	800ef00 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e858:	e029      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f003 0301 	and.w	r3, r3, #1
 800e860:	2b00      	cmp	r3, #0
 800e862:	d104      	bne.n	800e86e <HAL_SD_IRQHandler+0x2ba>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d011      	beq.n	800e892 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e872:	4a12      	ldr	r2, [pc, #72]	; (800e8bc <HAL_SD_IRQHandler+0x308>)
 800e874:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe fa96 	bl	800cdac <HAL_DMA_Abort_IT>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d013      	beq.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 fb6f 	bl	800ef6e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e890:	e00d      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 f814 	bl	800e8d4 <HAL_SD_AbortCallback>
}
 800e8ac:	e7ff      	b.n	800e8ae <HAL_SD_IRQHandler+0x2fa>
 800e8ae:	bf00      	nop
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	0800ef01 	.word	0x0800ef01
 800e8bc:	0800ef6f 	.word	0x0800ef6f

0800e8c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f6:	0f9b      	lsrs	r3, r3, #30
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e902:	0e9b      	lsrs	r3, r3, #26
 800e904:	b2db      	uxtb	r3, r3
 800e906:	f003 030f 	and.w	r3, r3, #15
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e914:	0e1b      	lsrs	r3, r3, #24
 800e916:	b2db      	uxtb	r3, r3
 800e918:	f003 0303 	and.w	r3, r3, #3
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e926:	0c1b      	lsrs	r3, r3, #16
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e932:	0a1b      	lsrs	r3, r3, #8
 800e934:	b2da      	uxtb	r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e948:	0d1b      	lsrs	r3, r3, #20
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e954:	0c1b      	lsrs	r3, r3, #16
 800e956:	b2db      	uxtb	r3, r3
 800e958:	f003 030f 	and.w	r3, r3, #15
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e966:	0bdb      	lsrs	r3, r3, #15
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e978:	0b9b      	lsrs	r3, r3, #14
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0301 	and.w	r3, r3, #1
 800e980:	b2da      	uxtb	r2, r3
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e98a:	0b5b      	lsrs	r3, r3, #13
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	f003 0301 	and.w	r3, r3, #1
 800e992:	b2da      	uxtb	r2, r3
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e99c:	0b1b      	lsrs	r3, r3, #12
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d163      	bne.n	800ea80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9bc:	009a      	lsls	r2, r3, #2
 800e9be:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e9c2:	4013      	ands	r3, r2
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e9c8:	0f92      	lsrs	r2, r2, #30
 800e9ca:	431a      	orrs	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9d4:	0edb      	lsrs	r3, r3, #27
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	f003 0307 	and.w	r3, r3, #7
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e6:	0e1b      	lsrs	r3, r3, #24
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	f003 0307 	and.w	r3, r3, #7
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f8:	0d5b      	lsrs	r3, r3, #21
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	f003 0307 	and.w	r3, r3, #7
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea0a:	0c9b      	lsrs	r3, r3, #18
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	f003 0307 	and.w	r3, r3, #7
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea1c:	0bdb      	lsrs	r3, r3, #15
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	f003 0307 	and.w	r3, r3, #7
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	7e1b      	ldrb	r3, [r3, #24]
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f003 0307 	and.w	r3, r3, #7
 800ea3e:	3302      	adds	r3, #2
 800ea40:	2201      	movs	r2, #1
 800ea42:	fa02 f303 	lsl.w	r3, r2, r3
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ea4a:	fb03 f202 	mul.w	r2, r3, r2
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	7a1b      	ldrb	r3, [r3, #8]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	f003 030f 	and.w	r3, r3, #15
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	409a      	lsls	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ea6c:	0a52      	lsrs	r2, r2, #9
 800ea6e:	fb03 f202 	mul.w	r2, r3, r2
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea7c:	661a      	str	r2, [r3, #96]	; 0x60
 800ea7e:	e031      	b.n	800eae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d11d      	bne.n	800eac4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea8c:	041b      	lsls	r3, r3, #16
 800ea8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea96:	0c1b      	lsrs	r3, r3, #16
 800ea98:	431a      	orrs	r2, r3
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	029a      	lsls	r2, r3, #10
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eab8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	661a      	str	r2, [r3, #96]	; 0x60
 800eac2:	e00f      	b.n	800eae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a58      	ldr	r2, [pc, #352]	; (800ec2c <HAL_SD_GetCardCSD+0x344>)
 800eaca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	e09d      	b.n	800ec20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eae8:	0b9b      	lsrs	r3, r3, #14
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eafa:	09db      	lsrs	r3, r3, #7
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb1c:	0fdb      	lsrs	r3, r3, #31
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb28:	0f5b      	lsrs	r3, r3, #29
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb3a:	0e9b      	lsrs	r3, r3, #26
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	f003 0307 	and.w	r3, r3, #7
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb4c:	0d9b      	lsrs	r3, r3, #22
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 030f 	and.w	r3, r3, #15
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb5e:	0d5b      	lsrs	r3, r3, #21
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	f003 0301 	and.w	r3, r3, #1
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb8e:	0bdb      	lsrs	r3, r3, #15
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba2:	0b9b      	lsrs	r3, r3, #14
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb6:	0b5b      	lsrs	r3, r3, #13
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebca:	0b1b      	lsrs	r3, r3, #12
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebde:	0a9b      	lsrs	r3, r3, #10
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 0303 	and.w	r3, r3, #3
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf2:	0a1b      	lsrs	r3, r3, #8
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	f003 0303 	and.w	r3, r3, #3
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec06:	085b      	lsrs	r3, r3, #1
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	004005ff 	.word	0x004005ff

0800ec30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ec88:	b5b0      	push	{r4, r5, r7, lr}
 800ec8a:	b08e      	sub	sp, #56	; 0x38
 800ec8c:	af04      	add	r7, sp, #16
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2203      	movs	r2, #3
 800ec96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec9e:	2b03      	cmp	r3, #3
 800eca0:	d02e      	beq.n	800ed00 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eca8:	d106      	bne.n	800ecb8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	639a      	str	r2, [r3, #56]	; 0x38
 800ecb6:	e029      	b.n	800ed0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ecbe:	d10a      	bne.n	800ecd6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fb0f 	bl	800f2e4 <SD_WideBus_Enable>
 800ecc6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	431a      	orrs	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	639a      	str	r2, [r3, #56]	; 0x38
 800ecd4:	e01a      	b.n	800ed0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d10a      	bne.n	800ecf2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fb4c 	bl	800f37a <SD_WideBus_Disable>
 800ece2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	431a      	orrs	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	639a      	str	r2, [r3, #56]	; 0x38
 800ecf0:	e00c      	b.n	800ed0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	639a      	str	r2, [r3, #56]	; 0x38
 800ecfe:	e005      	b.n	800ed0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d009      	beq.n	800ed28 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a18      	ldr	r2, [pc, #96]	; (800ed7c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ed1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ed24:	2301      	movs	r3, #1
 800ed26:	e024      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	699b      	ldr	r3, [r3, #24]
 800ed48:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681d      	ldr	r5, [r3, #0]
 800ed4e:	466c      	mov	r4, sp
 800ed50:	f107 0318 	add.w	r3, r7, #24
 800ed54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ed5c:	f107 030c 	add.w	r3, r7, #12
 800ed60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed62:	4628      	mov	r0, r5
 800ed64:	f003 f9a6 	bl	80120b4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3728      	adds	r7, #40	; 0x28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bdb0      	pop	{r4, r5, r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	004005ff 	.word	0x004005ff

0800ed80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ed8c:	f107 030c 	add.w	r3, r7, #12
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa7e 	bl	800f294 <SD_SendStatus>
 800ed98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d005      	beq.n	800edac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	431a      	orrs	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	0a5b      	lsrs	r3, r3, #9
 800edb0:	f003 030f 	and.w	r3, r3, #15
 800edb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800edb6:	693b      	ldr	r3, [r7, #16]
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b085      	sub	sp, #20
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edcc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eddc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800edde:	bf00      	nop
 800ede0:	3714      	adds	r7, #20
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b084      	sub	sp, #16
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfc:	2b82      	cmp	r3, #130	; 0x82
 800edfe:	d111      	bne.n	800ee24 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f003 fadb 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800ee0a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d008      	beq.n	800ee24 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	431a      	orrs	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7ff fd4e 	bl	800e8c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0208 	bic.w	r2, r2, #8
 800ee32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f240 523a 	movw	r2, #1338	; 0x53a
 800ee3c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f7f6 fb1f 	bl	8005490 <HAL_SD_RxCpltCallback>
#endif
}
 800ee52:	bf00      	nop
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee68:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7fe f94a 	bl	800d104 <HAL_DMA_GetError>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d03e      	beq.n	800eef4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee7c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee84:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d002      	beq.n	800ee92 <SD_DMAError+0x36>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d12d      	bne.n	800eeee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a19      	ldr	r2, [pc, #100]	; (800eefc <SD_DMAError+0xa0>)
 800ee98:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800eea8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800eeb6:	6978      	ldr	r0, [r7, #20]
 800eeb8:	f7ff ff62 	bl	800ed80 <HAL_SD_GetCardState>
 800eebc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b06      	cmp	r3, #6
 800eec2:	d002      	beq.n	800eeca <SD_DMAError+0x6e>
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b05      	cmp	r3, #5
 800eec8:	d10a      	bne.n	800eee0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4618      	mov	r0, r3
 800eed0:	f003 fa76 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800eed4:	4602      	mov	r2, r0
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeda:	431a      	orrs	r2, r3
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2200      	movs	r2, #0
 800eeec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800eeee:	6978      	ldr	r0, [r7, #20]
 800eef0:	f7ff fce6 	bl	800e8c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800eef4:	bf00      	nop
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	004005ff 	.word	0x004005ff

0800ef00 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef0c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f240 523a 	movw	r2, #1338	; 0x53a
 800ef16:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f7ff ff31 	bl	800ed80 <HAL_SD_GetCardState>
 800ef1e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2b06      	cmp	r3, #6
 800ef32:	d002      	beq.n	800ef3a <SD_DMATxAbort+0x3a>
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	2b05      	cmp	r3, #5
 800ef38:	d10a      	bne.n	800ef50 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f003 fa3e 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800ef44:	4602      	mov	r2, r0
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d103      	bne.n	800ef60 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7ff fcbb 	bl	800e8d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ef5e:	e002      	b.n	800ef66 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f7ff fcad 	bl	800e8c0 <HAL_SD_ErrorCallback>
}
 800ef66:	bf00      	nop
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b084      	sub	sp, #16
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f240 523a 	movw	r2, #1338	; 0x53a
 800ef84:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff fefa 	bl	800ed80 <HAL_SD_GetCardState>
 800ef8c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2201      	movs	r2, #1
 800ef92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2b06      	cmp	r3, #6
 800efa0:	d002      	beq.n	800efa8 <SD_DMARxAbort+0x3a>
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	2b05      	cmp	r3, #5
 800efa6:	d10a      	bne.n	800efbe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4618      	mov	r0, r3
 800efae:	f003 fa07 	bl	80123c0 <SDMMC_CmdStopTransfer>
 800efb2:	4602      	mov	r2, r0
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb8:	431a      	orrs	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d103      	bne.n	800efce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7ff fc84 	bl	800e8d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800efcc:	e002      	b.n	800efd4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff fc76 	bl	800e8c0 <HAL_SD_ErrorCallback>
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800efdc:	b5b0      	push	{r4, r5, r7, lr}
 800efde:	b094      	sub	sp, #80	; 0x50
 800efe0:	af04      	add	r7, sp, #16
 800efe2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800efe4:	2301      	movs	r3, #1
 800efe6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4618      	mov	r0, r3
 800efee:	f003 f8b9 	bl	8012164 <SDIO_GetPowerState>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d102      	bne.n	800effe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eff8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800effc:	e0b8      	b.n	800f170 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f002:	2b03      	cmp	r3, #3
 800f004:	d02f      	beq.n	800f066 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f003 fae2 	bl	80125d4 <SDMMC_CmdSendCID>
 800f010:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <SD_InitCard+0x40>
    {
      return errorstate;
 800f018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f01a:	e0a9      	b.n	800f170 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2100      	movs	r1, #0
 800f022:	4618      	mov	r0, r3
 800f024:	f003 f8e3 	bl	80121ee <SDIO_GetResponse>
 800f028:	4602      	mov	r2, r0
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2104      	movs	r1, #4
 800f034:	4618      	mov	r0, r3
 800f036:	f003 f8da 	bl	80121ee <SDIO_GetResponse>
 800f03a:	4602      	mov	r2, r0
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2108      	movs	r1, #8
 800f046:	4618      	mov	r0, r3
 800f048:	f003 f8d1 	bl	80121ee <SDIO_GetResponse>
 800f04c:	4602      	mov	r2, r0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	210c      	movs	r1, #12
 800f058:	4618      	mov	r0, r3
 800f05a:	f003 f8c8 	bl	80121ee <SDIO_GetResponse>
 800f05e:	4602      	mov	r2, r0
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d00d      	beq.n	800f08a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f107 020e 	add.w	r2, r7, #14
 800f076:	4611      	mov	r1, r2
 800f078:	4618      	mov	r0, r3
 800f07a:	f003 fae8 	bl	801264e <SDMMC_CmdSetRelAdd>
 800f07e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <SD_InitCard+0xae>
    {
      return errorstate;
 800f086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f088:	e072      	b.n	800f170 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f08e:	2b03      	cmp	r3, #3
 800f090:	d036      	beq.n	800f100 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f092:	89fb      	ldrh	r3, [r7, #14]
 800f094:	461a      	mov	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a2:	041b      	lsls	r3, r3, #16
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f003 fab2 	bl	8012610 <SDMMC_CmdSendCSD>
 800f0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800f0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b6:	e05b      	b.n	800f170 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2100      	movs	r1, #0
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f003 f895 	bl	80121ee <SDIO_GetResponse>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2104      	movs	r1, #4
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f003 f88c 	bl	80121ee <SDIO_GetResponse>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2108      	movs	r1, #8
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f003 f883 	bl	80121ee <SDIO_GetResponse>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	210c      	movs	r1, #12
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f003 f87a 	bl	80121ee <SDIO_GetResponse>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2104      	movs	r1, #4
 800f106:	4618      	mov	r0, r3
 800f108:	f003 f871 	bl	80121ee <SDIO_GetResponse>
 800f10c:	4603      	mov	r3, r0
 800f10e:	0d1a      	lsrs	r2, r3, #20
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f114:	f107 0310 	add.w	r3, r7, #16
 800f118:	4619      	mov	r1, r3
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff fbe4 	bl	800e8e8 <HAL_SD_GetCardCSD>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d002      	beq.n	800f12c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f126:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f12a:	e021      	b.n	800f170 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6819      	ldr	r1, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f134:	041b      	lsls	r3, r3, #16
 800f136:	2200      	movs	r2, #0
 800f138:	461c      	mov	r4, r3
 800f13a:	4615      	mov	r5, r2
 800f13c:	4622      	mov	r2, r4
 800f13e:	462b      	mov	r3, r5
 800f140:	4608      	mov	r0, r1
 800f142:	f003 f95f 	bl	8012404 <SDMMC_CmdSelDesel>
 800f146:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <SD_InitCard+0x176>
  {
    return errorstate;
 800f14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f150:	e00e      	b.n	800f170 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681d      	ldr	r5, [r3, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	466c      	mov	r4, sp
 800f15a:	f103 0210 	add.w	r2, r3, #16
 800f15e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f160:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f164:	3304      	adds	r3, #4
 800f166:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f168:	4628      	mov	r0, r5
 800f16a:	f002 ffa3 	bl	80120b4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3740      	adds	r7, #64	; 0x40
 800f174:	46bd      	mov	sp, r7
 800f176:	bdb0      	pop	{r4, r5, r7, pc}

0800f178 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f180:	2300      	movs	r3, #0
 800f182:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f184:	2300      	movs	r3, #0
 800f186:	617b      	str	r3, [r7, #20]
 800f188:	2300      	movs	r3, #0
 800f18a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4618      	mov	r0, r3
 800f192:	f003 f95a 	bl	801244a <SDMMC_CmdGoIdleState>
 800f196:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	e072      	b.n	800f288 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f003 f96d 	bl	8012486 <SDMMC_CmdOperCond>
 800f1ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00d      	beq.n	800f1d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f003 f943 	bl	801244a <SDMMC_CmdGoIdleState>
 800f1c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d004      	beq.n	800f1d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	e05b      	b.n	800f288 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d137      	bne.n	800f24e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f003 f96d 	bl	80124c4 <SDMMC_CmdAppCommand>
 800f1ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d02d      	beq.n	800f24e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1f6:	e047      	b.n	800f288 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	4618      	mov	r0, r3
 800f200:	f003 f960 	bl	80124c4 <SDMMC_CmdAppCommand>
 800f204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <SD_PowerON+0x98>
    {
      return errorstate;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	e03b      	b.n	800f288 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	491e      	ldr	r1, [pc, #120]	; (800f290 <SD_PowerON+0x118>)
 800f216:	4618      	mov	r0, r3
 800f218:	f003 f976 	bl	8012508 <SDMMC_CmdAppOperCommand>
 800f21c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d002      	beq.n	800f22a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f228:	e02e      	b.n	800f288 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2100      	movs	r1, #0
 800f230:	4618      	mov	r0, r3
 800f232:	f002 ffdc 	bl	80121ee <SDIO_GetResponse>
 800f236:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	0fdb      	lsrs	r3, r3, #31
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d101      	bne.n	800f244 <SD_PowerON+0xcc>
 800f240:	2301      	movs	r3, #1
 800f242:	e000      	b.n	800f246 <SD_PowerON+0xce>
 800f244:	2300      	movs	r3, #0
 800f246:	613b      	str	r3, [r7, #16]

    count++;
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	3301      	adds	r3, #1
 800f24c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f254:	4293      	cmp	r3, r2
 800f256:	d802      	bhi.n	800f25e <SD_PowerON+0xe6>
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0cc      	beq.n	800f1f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f264:	4293      	cmp	r3, r2
 800f266:	d902      	bls.n	800f26e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f26c:	e00c      	b.n	800f288 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2201      	movs	r2, #1
 800f27c:	645a      	str	r2, [r3, #68]	; 0x44
 800f27e:	e002      	b.n	800f286 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	c1100000 	.word	0xc1100000

0800f294 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f2a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2a8:	e018      	b.n	800f2dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2b2:	041b      	lsls	r3, r3, #16
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	f003 f9ea 	bl	8012690 <SDMMC_CmdSendStatus>
 800f2bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	e009      	b.n	800f2dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f002 ff8d 	bl	80121ee <SDIO_GetResponse>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f002 ff77 	bl	80121ee <SDIO_GetResponse>
 800f300:	4603      	mov	r3, r0
 800f302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f30a:	d102      	bne.n	800f312 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f30c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f310:	e02f      	b.n	800f372 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f312:	f107 030c 	add.w	r3, r7, #12
 800f316:	4619      	mov	r1, r3
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f879 	bl	800f410 <SD_FindSCR>
 800f31e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	e023      	b.n	800f372 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f330:	2b00      	cmp	r3, #0
 800f332:	d01c      	beq.n	800f36e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f33c:	041b      	lsls	r3, r3, #16
 800f33e:	4619      	mov	r1, r3
 800f340:	4610      	mov	r0, r2
 800f342:	f003 f8bf 	bl	80124c4 <SDMMC_CmdAppCommand>
 800f346:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d001      	beq.n	800f352 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	e00f      	b.n	800f372 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2102      	movs	r1, #2
 800f358:	4618      	mov	r0, r3
 800f35a:	f003 f8f8 	bl	801254e <SDMMC_CmdBusWidth>
 800f35e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	e003      	b.n	800f372 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f36a:	2300      	movs	r3, #0
 800f36c:	e001      	b.n	800f372 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f36e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f372:	4618      	mov	r0, r3
 800f374:	3718      	adds	r7, #24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b086      	sub	sp, #24
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f382:	2300      	movs	r3, #0
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	2300      	movs	r3, #0
 800f388:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2100      	movs	r1, #0
 800f390:	4618      	mov	r0, r3
 800f392:	f002 ff2c 	bl	80121ee <SDIO_GetResponse>
 800f396:	4603      	mov	r3, r0
 800f398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f39c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3a0:	d102      	bne.n	800f3a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f3a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3a6:	e02f      	b.n	800f408 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 f82e 	bl	800f410 <SD_FindSCR>
 800f3b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	e023      	b.n	800f408 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d01c      	beq.n	800f404 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3d2:	041b      	lsls	r3, r3, #16
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4610      	mov	r0, r2
 800f3d8:	f003 f874 	bl	80124c4 <SDMMC_CmdAppCommand>
 800f3dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	e00f      	b.n	800f408 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f003 f8ad 	bl	801254e <SDMMC_CmdBusWidth>
 800f3f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	e003      	b.n	800f408 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f400:	2300      	movs	r3, #0
 800f402:	e001      	b.n	800f408 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f404:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f410:	b590      	push	{r4, r7, lr}
 800f412:	b08f      	sub	sp, #60	; 0x3c
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f41a:	f7fc fcb5 	bl	800bd88 <HAL_GetTick>
 800f41e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f424:	2300      	movs	r3, #0
 800f426:	60bb      	str	r3, [r7, #8]
 800f428:	2300      	movs	r3, #0
 800f42a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2108      	movs	r1, #8
 800f436:	4618      	mov	r0, r3
 800f438:	f002 ff18 	bl	801226c <SDMMC_CmdBlockLength>
 800f43c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f440:	2b00      	cmp	r3, #0
 800f442:	d001      	beq.n	800f448 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	e0a9      	b.n	800f59c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f450:	041b      	lsls	r3, r3, #16
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f003 f835 	bl	80124c4 <SDMMC_CmdAppCommand>
 800f45a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	e09a      	b.n	800f59c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f466:	f04f 33ff 	mov.w	r3, #4294967295
 800f46a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f46c:	2308      	movs	r3, #8
 800f46e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800f470:	2330      	movs	r3, #48	; 0x30
 800f472:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f474:	2302      	movs	r3, #2
 800f476:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f478:	2300      	movs	r3, #0
 800f47a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800f47c:	2301      	movs	r3, #1
 800f47e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f107 0210 	add.w	r2, r7, #16
 800f488:	4611      	mov	r1, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f002 fec2 	bl	8012214 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4618      	mov	r0, r3
 800f496:	f003 f87c 	bl	8012592 <SDMMC_CmdSendSCR>
 800f49a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d022      	beq.n	800f4e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a4:	e07a      	b.n	800f59c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00e      	beq.n	800f4d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6819      	ldr	r1, [r3, #0]
 800f4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	f107 0208 	add.w	r2, r7, #8
 800f4c0:	18d4      	adds	r4, r2, r3
 800f4c2:	4608      	mov	r0, r1
 800f4c4:	f002 fe21 	bl	801210a <SDIO_ReadFIFO>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	6023      	str	r3, [r4, #0]
      index++;
 800f4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f4d2:	f7fc fc59 	bl	800bd88 <HAL_GetTick>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e0:	d102      	bne.n	800f4e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f4e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4e6:	e059      	b.n	800f59c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4ee:	f240 432a 	movw	r3, #1066	; 0x42a
 800f4f2:	4013      	ands	r3, r2
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d0d6      	beq.n	800f4a6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fe:	f003 0308 	and.w	r3, r3, #8
 800f502:	2b00      	cmp	r3, #0
 800f504:	d005      	beq.n	800f512 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2208      	movs	r2, #8
 800f50c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f50e:	2308      	movs	r3, #8
 800f510:	e044      	b.n	800f59c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f518:	f003 0302 	and.w	r3, r3, #2
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d005      	beq.n	800f52c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2202      	movs	r2, #2
 800f526:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f528:	2302      	movs	r3, #2
 800f52a:	e037      	b.n	800f59c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f532:	f003 0320 	and.w	r3, r3, #32
 800f536:	2b00      	cmp	r3, #0
 800f538:	d005      	beq.n	800f546 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2220      	movs	r2, #32
 800f540:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f542:	2320      	movs	r3, #32
 800f544:	e02a      	b.n	800f59c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f240 523a 	movw	r2, #1338	; 0x53a
 800f54e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	061a      	lsls	r2, r3, #24
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	021b      	lsls	r3, r3, #8
 800f558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f55c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	0a1b      	lsrs	r3, r3, #8
 800f562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f566:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	0e1b      	lsrs	r3, r3, #24
 800f56c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f570:	601a      	str	r2, [r3, #0]
    scr++;
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	3304      	adds	r3, #4
 800f576:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	061a      	lsls	r2, r3, #24
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	021b      	lsls	r3, r3, #8
 800f580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f584:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	0a1b      	lsrs	r3, r3, #8
 800f58a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f58e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	0e1b      	lsrs	r3, r3, #24
 800f594:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	373c      	adds	r7, #60	; 0x3c
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd90      	pop	{r4, r7, pc}

0800f5a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d03f      	beq.n	800f63e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f5be:	2300      	movs	r3, #0
 800f5c0:	617b      	str	r3, [r7, #20]
 800f5c2:	e033      	b.n	800f62c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f002 fd9e 	bl	801210a <SDIO_ReadFIFO>
 800f5ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	0a1b      	lsrs	r3, r3, #8
 800f5e8:	b2da      	uxtb	r2, r3
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	0c1b      	lsrs	r3, r3, #16
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	3301      	adds	r3, #1
 800f608:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	0e1b      	lsrs	r3, r3, #24
 800f614:	b2da      	uxtb	r2, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3301      	adds	r3, #1
 800f61e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	3b01      	subs	r3, #1
 800f624:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	3301      	adds	r3, #1
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b07      	cmp	r3, #7
 800f630:	d9c8      	bls.n	800f5c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f63e:	bf00      	nop
 800f640:	3718      	adds	r7, #24
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b086      	sub	sp, #24
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a1b      	ldr	r3, [r3, #32]
 800f652:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f658:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d043      	beq.n	800f6e8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f660:	2300      	movs	r3, #0
 800f662:	617b      	str	r3, [r7, #20]
 800f664:	e037      	b.n	800f6d6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	3301      	adds	r3, #1
 800f670:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	3b01      	subs	r3, #1
 800f676:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	021a      	lsls	r2, r3, #8
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	4313      	orrs	r3, r2
 800f682:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3301      	adds	r3, #1
 800f688:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	041a      	lsls	r2, r3, #16
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	4313      	orrs	r3, r2
 800f69a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	061a      	lsls	r2, r3, #24
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f107 0208 	add.w	r2, r7, #8
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f002 fd2a 	bl	8012124 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	617b      	str	r3, [r7, #20]
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	2b07      	cmp	r3, #7
 800f6da:	d9c4      	bls.n	800f666 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	693a      	ldr	r2, [r7, #16]
 800f6e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f6e8:	bf00      	nop
 800f6ea:	3718      	adds	r7, #24
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f6fe:	2301      	movs	r3, #1
 800f700:	e056      	b.n	800f7b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7f6 fd4f 	bl	80061c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2202      	movs	r2, #2
 800f726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f738:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	685a      	ldr	r2, [r3, #4]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	689b      	ldr	r3, [r3, #8]
 800f742:	431a      	orrs	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	431a      	orrs	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	431a      	orrs	r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	695b      	ldr	r3, [r3, #20]
 800f754:	431a      	orrs	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	699b      	ldr	r3, [r3, #24]
 800f75a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f75e:	431a      	orrs	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	69db      	ldr	r3, [r3, #28]
 800f764:	431a      	orrs	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	ea42 0103 	orr.w	r1, r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	430a      	orrs	r2, r1
 800f778:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	699b      	ldr	r3, [r3, #24]
 800f77e:	0c1b      	lsrs	r3, r3, #16
 800f780:	f003 0104 	and.w	r1, r3, #4
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	430a      	orrs	r2, r1
 800f78e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	69da      	ldr	r2, [r3, #28]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f79e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f7ae:	2300      	movs	r3, #0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d101      	bne.n	800f7ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e01a      	b.n	800f800 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2202      	movs	r2, #2
 800f7ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7f6 fd86 	bl	80062f4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b08c      	sub	sp, #48	; 0x30
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f816:	2301      	movs	r3, #1
 800f818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f81a:	2300      	movs	r3, #0
 800f81c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f826:	2b01      	cmp	r3, #1
 800f828:	d101      	bne.n	800f82e <HAL_SPI_TransmitReceive+0x26>
 800f82a:	2302      	movs	r3, #2
 800f82c:	e18a      	b.n	800fb44 <HAL_SPI_TransmitReceive+0x33c>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2201      	movs	r2, #1
 800f832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f836:	f7fc faa7 	bl	800bd88 <HAL_GetTick>
 800f83a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f84c:	887b      	ldrh	r3, [r7, #2]
 800f84e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f854:	2b01      	cmp	r3, #1
 800f856:	d00f      	beq.n	800f878 <HAL_SPI_TransmitReceive+0x70>
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f85e:	d107      	bne.n	800f870 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d103      	bne.n	800f870 <HAL_SPI_TransmitReceive+0x68>
 800f868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f86c:	2b04      	cmp	r3, #4
 800f86e:	d003      	beq.n	800f878 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f870:	2302      	movs	r3, #2
 800f872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f876:	e15b      	b.n	800fb30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d005      	beq.n	800f88a <HAL_SPI_TransmitReceive+0x82>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <HAL_SPI_TransmitReceive+0x82>
 800f884:	887b      	ldrh	r3, [r7, #2]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d103      	bne.n	800f892 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f890:	e14e      	b.n	800fb30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b04      	cmp	r3, #4
 800f89c:	d003      	beq.n	800f8a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2205      	movs	r2, #5
 800f8a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	887a      	ldrh	r2, [r7, #2]
 800f8b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	887a      	ldrh	r2, [r7, #2]
 800f8bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	887a      	ldrh	r2, [r7, #2]
 800f8c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	887a      	ldrh	r2, [r7, #2]
 800f8ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8e6:	2b40      	cmp	r3, #64	; 0x40
 800f8e8:	d007      	beq.n	800f8fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f8f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f902:	d178      	bne.n	800f9f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <HAL_SPI_TransmitReceive+0x10a>
 800f90c:	8b7b      	ldrh	r3, [r7, #26]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d166      	bne.n	800f9e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f916:	881a      	ldrh	r2, [r3, #0]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f922:	1c9a      	adds	r2, r3, #2
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	3b01      	subs	r3, #1
 800f930:	b29a      	uxth	r2, r3
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f936:	e053      	b.n	800f9e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	f003 0302 	and.w	r3, r3, #2
 800f942:	2b02      	cmp	r3, #2
 800f944:	d11b      	bne.n	800f97e <HAL_SPI_TransmitReceive+0x176>
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d016      	beq.n	800f97e <HAL_SPI_TransmitReceive+0x176>
 800f950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f952:	2b01      	cmp	r3, #1
 800f954:	d113      	bne.n	800f97e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f95a:	881a      	ldrh	r2, [r3, #0]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f966:	1c9a      	adds	r2, r3, #2
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f970:	b29b      	uxth	r3, r3
 800f972:	3b01      	subs	r3, #1
 800f974:	b29a      	uxth	r2, r3
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f97a:	2300      	movs	r3, #0
 800f97c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f003 0301 	and.w	r3, r3, #1
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d119      	bne.n	800f9c0 <HAL_SPI_TransmitReceive+0x1b8>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f990:	b29b      	uxth	r3, r3
 800f992:	2b00      	cmp	r3, #0
 800f994:	d014      	beq.n	800f9c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	68da      	ldr	r2, [r3, #12]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a0:	b292      	uxth	r2, r2
 800f9a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a8:	1c9a      	adds	r2, r3, #2
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f9c0:	f7fc f9e2 	bl	800bd88 <HAL_GetTick>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d807      	bhi.n	800f9e0 <HAL_SPI_TransmitReceive+0x1d8>
 800f9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d6:	d003      	beq.n	800f9e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f9d8:	2303      	movs	r3, #3
 800f9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f9de:	e0a7      	b.n	800fb30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1a6      	bne.n	800f938 <HAL_SPI_TransmitReceive+0x130>
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d1a1      	bne.n	800f938 <HAL_SPI_TransmitReceive+0x130>
 800f9f4:	e07c      	b.n	800faf0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <HAL_SPI_TransmitReceive+0x1fc>
 800f9fe:	8b7b      	ldrh	r3, [r7, #26]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d16b      	bne.n	800fadc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	330c      	adds	r3, #12
 800fa0e:	7812      	ldrb	r2, [r2, #0]
 800fa10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	3b01      	subs	r3, #1
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa2a:	e057      	b.n	800fadc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	689b      	ldr	r3, [r3, #8]
 800fa32:	f003 0302 	and.w	r3, r3, #2
 800fa36:	2b02      	cmp	r3, #2
 800fa38:	d11c      	bne.n	800fa74 <HAL_SPI_TransmitReceive+0x26c>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d017      	beq.n	800fa74 <HAL_SPI_TransmitReceive+0x26c>
 800fa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d114      	bne.n	800fa74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	330c      	adds	r3, #12
 800fa54:	7812      	ldrb	r2, [r2, #0]
 800fa56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa5c:	1c5a      	adds	r2, r3, #1
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fa70:	2300      	movs	r3, #0
 800fa72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	f003 0301 	and.w	r3, r3, #1
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d119      	bne.n	800fab6 <HAL_SPI_TransmitReceive+0x2ae>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d014      	beq.n	800fab6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	68da      	ldr	r2, [r3, #12]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa96:	b2d2      	uxtb	r2, r2
 800fa98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	3b01      	subs	r3, #1
 800faac:	b29a      	uxth	r2, r3
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fab2:	2301      	movs	r3, #1
 800fab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fab6:	f7fc f967 	bl	800bd88 <HAL_GetTick>
 800faba:	4602      	mov	r2, r0
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d803      	bhi.n	800face <HAL_SPI_TransmitReceive+0x2c6>
 800fac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800facc:	d102      	bne.n	800fad4 <HAL_SPI_TransmitReceive+0x2cc>
 800face:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d103      	bne.n	800fadc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fad4:	2303      	movs	r3, #3
 800fad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fada:	e029      	b.n	800fb30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d1a2      	bne.n	800fa2c <HAL_SPI_TransmitReceive+0x224>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faea:	b29b      	uxth	r3, r3
 800faec:	2b00      	cmp	r3, #0
 800faee:	d19d      	bne.n	800fa2c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800faf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f000 fae1 	bl	80100bc <SPI_EndRxTxTransaction>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d006      	beq.n	800fb0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fb00:	2301      	movs	r3, #1
 800fb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2220      	movs	r2, #32
 800fb0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800fb0c:	e010      	b.n	800fb30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d10b      	bne.n	800fb2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb16:	2300      	movs	r3, #0
 800fb18:	617b      	str	r3, [r7, #20]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	617b      	str	r3, [r7, #20]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	617b      	str	r3, [r7, #20]
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	e000      	b.n	800fb30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fb2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2201      	movs	r2, #1
 800fb34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fb40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3730      	adds	r7, #48	; 0x30
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	4613      	mov	r3, r2
 800fb58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d101      	bne.n	800fb6c <HAL_SPI_Transmit_DMA+0x20>
 800fb68:	2302      	movs	r3, #2
 800fb6a:	e093      	b.n	800fc94 <HAL_SPI_Transmit_DMA+0x148>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d002      	beq.n	800fb86 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800fb80:	2302      	movs	r3, #2
 800fb82:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fb84:	e081      	b.n	800fc8a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <HAL_SPI_Transmit_DMA+0x46>
 800fb8c:	88fb      	ldrh	r3, [r7, #6]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d102      	bne.n	800fb98 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fb96:	e078      	b.n	800fc8a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	68ba      	ldr	r2, [r7, #8]
 800fbaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	88fa      	ldrh	r2, [r7, #6]
 800fbb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	88fa      	ldrh	r2, [r7, #6]
 800fbb6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbde:	d107      	bne.n	800fbf0 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fbee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbf4:	4a29      	ldr	r2, [pc, #164]	; (800fc9c <HAL_SPI_Transmit_DMA+0x150>)
 800fbf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbfc:	4a28      	ldr	r2, [pc, #160]	; (800fca0 <HAL_SPI_Transmit_DMA+0x154>)
 800fbfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc04:	4a27      	ldr	r2, [pc, #156]	; (800fca4 <HAL_SPI_Transmit_DMA+0x158>)
 800fc06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc18:	4619      	mov	r1, r3
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	330c      	adds	r3, #12
 800fc20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fc26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fc28:	f7fd f868 	bl	800ccfc <HAL_DMA_Start_IT>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00c      	beq.n	800fc4c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc36:	f043 0210 	orr.w	r2, r3, #16
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800fc4a:	e01e      	b.n	800fc8a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc56:	2b40      	cmp	r3, #64	; 0x40
 800fc58:	d007      	beq.n	800fc6a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc68:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	685a      	ldr	r2, [r3, #4]
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	f042 0220 	orr.w	r2, r2, #32
 800fc78:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	685a      	ldr	r2, [r3, #4]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f042 0202 	orr.w	r2, r2, #2
 800fc88:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3718      	adds	r7, #24
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	0800ff65 	.word	0x0800ff65
 800fca0:	0800febd 	.word	0x0800febd
 800fca4:	0800ff81 	.word	0x0800ff81

0800fca8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b088      	sub	sp, #32
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	099b      	lsrs	r3, r3, #6
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10f      	bne.n	800fcec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00a      	beq.n	800fcec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	099b      	lsrs	r3, r3, #6
 800fcda:	f003 0301 	and.w	r3, r3, #1
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d004      	beq.n	800fcec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	4798      	blx	r3
    return;
 800fcea:	e0d7      	b.n	800fe9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	085b      	lsrs	r3, r3, #1
 800fcf0:	f003 0301 	and.w	r3, r3, #1
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00a      	beq.n	800fd0e <HAL_SPI_IRQHandler+0x66>
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	09db      	lsrs	r3, r3, #7
 800fcfc:	f003 0301 	and.w	r3, r3, #1
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d004      	beq.n	800fd0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	4798      	blx	r3
    return;
 800fd0c:	e0c6      	b.n	800fe9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	095b      	lsrs	r3, r3, #5
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10c      	bne.n	800fd34 <HAL_SPI_IRQHandler+0x8c>
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	099b      	lsrs	r3, r3, #6
 800fd1e:	f003 0301 	and.w	r3, r3, #1
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d106      	bne.n	800fd34 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	0a1b      	lsrs	r3, r3, #8
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f000 80b4 	beq.w	800fe9c <HAL_SPI_IRQHandler+0x1f4>
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	095b      	lsrs	r3, r3, #5
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f000 80ad 	beq.w	800fe9c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	099b      	lsrs	r3, r3, #6
 800fd46:	f003 0301 	and.w	r3, r3, #1
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d023      	beq.n	800fd96 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b03      	cmp	r3, #3
 800fd58:	d011      	beq.n	800fd7e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd5e:	f043 0204 	orr.w	r2, r3, #4
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fd66:	2300      	movs	r3, #0
 800fd68:	617b      	str	r3, [r7, #20]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	617b      	str	r3, [r7, #20]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	617b      	str	r3, [r7, #20]
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	e00b      	b.n	800fd96 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fd7e:	2300      	movs	r3, #0
 800fd80:	613b      	str	r3, [r7, #16]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	613b      	str	r3, [r7, #16]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	613b      	str	r3, [r7, #16]
 800fd92:	693b      	ldr	r3, [r7, #16]
        return;
 800fd94:	e082      	b.n	800fe9c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	095b      	lsrs	r3, r3, #5
 800fd9a:	f003 0301 	and.w	r3, r3, #1
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d014      	beq.n	800fdcc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fda6:	f043 0201 	orr.w	r2, r3, #1
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fdae:	2300      	movs	r3, #0
 800fdb0:	60fb      	str	r3, [r7, #12]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	60fb      	str	r3, [r7, #12]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	0a1b      	lsrs	r3, r3, #8
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d00c      	beq.n	800fdf2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fddc:	f043 0208 	orr.w	r2, r3, #8
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fde4:	2300      	movs	r3, #0
 800fde6:	60bb      	str	r3, [r7, #8]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	60bb      	str	r3, [r7, #8]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d04f      	beq.n	800fe9a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fe08:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	f003 0302 	and.w	r3, r3, #2
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d104      	bne.n	800fe26 <HAL_SPI_IRQHandler+0x17e>
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d034      	beq.n	800fe90 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f022 0203 	bic.w	r2, r2, #3
 800fe34:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d011      	beq.n	800fe62 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe42:	4a18      	ldr	r2, [pc, #96]	; (800fea4 <HAL_SPI_IRQHandler+0x1fc>)
 800fe44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fc ffae 	bl	800cdac <HAL_DMA_Abort_IT>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d005      	beq.n	800fe62 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d016      	beq.n	800fe98 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe6e:	4a0d      	ldr	r2, [pc, #52]	; (800fea4 <HAL_SPI_IRQHandler+0x1fc>)
 800fe70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fc ff98 	bl	800cdac <HAL_DMA_Abort_IT>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00a      	beq.n	800fe98 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800fe8e:	e003      	b.n	800fe98 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7f6 f961 	bl	8006158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800fe96:	e000      	b.n	800fe9a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800fe98:	bf00      	nop
    return;
 800fe9a:	bf00      	nop
  }
}
 800fe9c:	3720      	adds	r7, #32
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	0800ffc1 	.word	0x0800ffc1

0800fea8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800feca:	f7fb ff5d 	bl	800bd88 <HAL_GetTick>
 800fece:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fede:	d03b      	beq.n	800ff58 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	685a      	ldr	r2, [r3, #4]
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f022 0220 	bic.w	r2, r2, #32
 800feee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685a      	ldr	r2, [r3, #4]
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f022 0202 	bic.w	r2, r2, #2
 800fefe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	2164      	movs	r1, #100	; 0x64
 800ff04:	6978      	ldr	r0, [r7, #20]
 800ff06:	f000 f8d9 	bl	80100bc <SPI_EndRxTxTransaction>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d005      	beq.n	800ff1c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff14:	f043 0220 	orr.w	r2, r3, #32
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d10a      	bne.n	800ff3a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff24:	2300      	movs	r3, #0
 800ff26:	60fb      	str	r3, [r7, #12]
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	60fb      	str	r3, [r7, #12]
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	60fb      	str	r3, [r7, #12]
 800ff38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	2201      	movs	r2, #1
 800ff44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d003      	beq.n	800ff58 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ff50:	6978      	ldr	r0, [r7, #20]
 800ff52:	f7f6 f901 	bl	8006158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ff56:	e002      	b.n	800ff5e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ff58:	6978      	ldr	r0, [r7, #20]
 800ff5a:	f7f6 f913 	bl	8006184 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff70:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f7ff ff98 	bl	800fea8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f022 0203 	bic.w	r2, r2, #3
 800ff9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffa2:	f043 0210 	orr.w	r2, r3, #16
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f7f6 f8d0 	bl	8006158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ffb8:	bf00      	nop
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffcc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f7f6 f8bc 	bl	8006158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ffe0:	bf00      	nop
 800ffe2:	3710      	adds	r7, #16
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	603b      	str	r3, [r7, #0]
 800fff4:	4613      	mov	r3, r2
 800fff6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fff8:	e04c      	b.n	8010094 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010000:	d048      	beq.n	8010094 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010002:	f7fb fec1 	bl	800bd88 <HAL_GetTick>
 8010006:	4602      	mov	r2, r0
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	683a      	ldr	r2, [r7, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	d902      	bls.n	8010018 <SPI_WaitFlagStateUntilTimeout+0x30>
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d13d      	bne.n	8010094 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010026:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010030:	d111      	bne.n	8010056 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801003a:	d004      	beq.n	8010046 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010044:	d107      	bne.n	8010056 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010054:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801005e:	d10f      	bne.n	8010080 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801007e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010090:	2303      	movs	r3, #3
 8010092:	e00f      	b.n	80100b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	689a      	ldr	r2, [r3, #8]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	4013      	ands	r3, r2
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	bf0c      	ite	eq
 80100a4:	2301      	moveq	r3, #1
 80100a6:	2300      	movne	r3, #0
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	461a      	mov	r2, r3
 80100ac:	79fb      	ldrb	r3, [r7, #7]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d1a3      	bne.n	800fffa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80100b2:	2300      	movs	r3, #0
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3710      	adds	r7, #16
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af02      	add	r7, sp, #8
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80100c8:	4b1b      	ldr	r3, [pc, #108]	; (8010138 <SPI_EndRxTxTransaction+0x7c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a1b      	ldr	r2, [pc, #108]	; (801013c <SPI_EndRxTxTransaction+0x80>)
 80100ce:	fba2 2303 	umull	r2, r3, r2, r3
 80100d2:	0d5b      	lsrs	r3, r3, #21
 80100d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80100d8:	fb02 f303 	mul.w	r3, r2, r3
 80100dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80100e6:	d112      	bne.n	801010e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	2200      	movs	r2, #0
 80100f0:	2180      	movs	r1, #128	; 0x80
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f7ff ff78 	bl	800ffe8 <SPI_WaitFlagStateUntilTimeout>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d016      	beq.n	801012c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010102:	f043 0220 	orr.w	r2, r3, #32
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801010a:	2303      	movs	r3, #3
 801010c:	e00f      	b.n	801012e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00a      	beq.n	801012a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	3b01      	subs	r3, #1
 8010118:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010124:	2b80      	cmp	r3, #128	; 0x80
 8010126:	d0f2      	beq.n	801010e <SPI_EndRxTxTransaction+0x52>
 8010128:	e000      	b.n	801012c <SPI_EndRxTxTransaction+0x70>
        break;
 801012a:	bf00      	nop
  }

  return HAL_OK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3718      	adds	r7, #24
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	20000000 	.word	0x20000000
 801013c:	165e9f81 	.word	0x165e9f81

08010140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d101      	bne.n	8010152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	e01d      	b.n	801018e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010158:	b2db      	uxtb	r3, r3
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f7f5 fd62 	bl	8005c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2202      	movs	r2, #2
 8010170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	3304      	adds	r3, #4
 801017c:	4619      	mov	r1, r3
 801017e:	4610      	mov	r0, r2
 8010180:	f000 fb36 	bl	80107f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2201      	movs	r2, #1
 8010188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b082      	sub	sp, #8
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d101      	bne.n	80101a8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80101a4:	2301      	movs	r3, #1
 80101a6:	e01d      	b.n	80101e4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d106      	bne.n	80101c2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f815 	bl	80101ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2202      	movs	r2, #2
 80101c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	3304      	adds	r3, #4
 80101d2:	4619      	mov	r1, r3
 80101d4:	4610      	mov	r0, r2
 80101d6:	f000 fb0b 	bl	80107f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2201      	movs	r2, #1
 80101de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	2b0c      	cmp	r3, #12
 801020e:	d841      	bhi.n	8010294 <HAL_TIM_IC_Start_IT+0x94>
 8010210:	a201      	add	r2, pc, #4	; (adr r2, 8010218 <HAL_TIM_IC_Start_IT+0x18>)
 8010212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010216:	bf00      	nop
 8010218:	0801024d 	.word	0x0801024d
 801021c:	08010295 	.word	0x08010295
 8010220:	08010295 	.word	0x08010295
 8010224:	08010295 	.word	0x08010295
 8010228:	0801025f 	.word	0x0801025f
 801022c:	08010295 	.word	0x08010295
 8010230:	08010295 	.word	0x08010295
 8010234:	08010295 	.word	0x08010295
 8010238:	08010271 	.word	0x08010271
 801023c:	08010295 	.word	0x08010295
 8010240:	08010295 	.word	0x08010295
 8010244:	08010295 	.word	0x08010295
 8010248:	08010283 	.word	0x08010283
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	68da      	ldr	r2, [r3, #12]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f042 0202 	orr.w	r2, r2, #2
 801025a:	60da      	str	r2, [r3, #12]
      break;
 801025c:	e01b      	b.n	8010296 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	68da      	ldr	r2, [r3, #12]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f042 0204 	orr.w	r2, r2, #4
 801026c:	60da      	str	r2, [r3, #12]
      break;
 801026e:	e012      	b.n	8010296 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	68da      	ldr	r2, [r3, #12]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f042 0208 	orr.w	r2, r2, #8
 801027e:	60da      	str	r2, [r3, #12]
      break;
 8010280:	e009      	b.n	8010296 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68da      	ldr	r2, [r3, #12]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f042 0210 	orr.w	r2, r2, #16
 8010290:	60da      	str	r2, [r3, #12]
      break;
 8010292:	e000      	b.n	8010296 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8010294:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2201      	movs	r2, #1
 801029c:	6839      	ldr	r1, [r7, #0]
 801029e:	4618      	mov	r0, r3
 80102a0:	f000 fcde 	bl	8010c60 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	f003 0307 	and.w	r3, r3, #7
 80102ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b06      	cmp	r3, #6
 80102b4:	d007      	beq.n	80102c6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f042 0201 	orr.w	r2, r2, #1
 80102c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	691b      	ldr	r3, [r3, #16]
 80102de:	f003 0302 	and.w	r3, r3, #2
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d122      	bne.n	801032c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d11b      	bne.n	801032c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f06f 0202 	mvn.w	r2, #2
 80102fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	f003 0303 	and.w	r3, r3, #3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d003      	beq.n	801031a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7f5 fcdc 	bl	8005cd0 <HAL_TIM_IC_CaptureCallback>
 8010318:	e005      	b.n	8010326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fa4a 	bl	80107b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 fa51 	bl	80107c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	691b      	ldr	r3, [r3, #16]
 8010332:	f003 0304 	and.w	r3, r3, #4
 8010336:	2b04      	cmp	r3, #4
 8010338:	d122      	bne.n	8010380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	f003 0304 	and.w	r3, r3, #4
 8010344:	2b04      	cmp	r3, #4
 8010346:	d11b      	bne.n	8010380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f06f 0204 	mvn.w	r2, #4
 8010350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2202      	movs	r2, #2
 8010356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010362:	2b00      	cmp	r3, #0
 8010364:	d003      	beq.n	801036e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7f5 fcb2 	bl	8005cd0 <HAL_TIM_IC_CaptureCallback>
 801036c:	e005      	b.n	801037a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fa20 	bl	80107b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 fa27 	bl	80107c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	f003 0308 	and.w	r3, r3, #8
 801038a:	2b08      	cmp	r3, #8
 801038c:	d122      	bne.n	80103d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	68db      	ldr	r3, [r3, #12]
 8010394:	f003 0308 	and.w	r3, r3, #8
 8010398:	2b08      	cmp	r3, #8
 801039a:	d11b      	bne.n	80103d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f06f 0208 	mvn.w	r2, #8
 80103a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2204      	movs	r2, #4
 80103aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	69db      	ldr	r3, [r3, #28]
 80103b2:	f003 0303 	and.w	r3, r3, #3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7f5 fc88 	bl	8005cd0 <HAL_TIM_IC_CaptureCallback>
 80103c0:	e005      	b.n	80103ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f9f6 	bl	80107b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f000 f9fd 	bl	80107c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	f003 0310 	and.w	r3, r3, #16
 80103de:	2b10      	cmp	r3, #16
 80103e0:	d122      	bne.n	8010428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	f003 0310 	and.w	r3, r3, #16
 80103ec:	2b10      	cmp	r3, #16
 80103ee:	d11b      	bne.n	8010428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f06f 0210 	mvn.w	r2, #16
 80103f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2208      	movs	r2, #8
 80103fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	69db      	ldr	r3, [r3, #28]
 8010406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7f5 fc5e 	bl	8005cd0 <HAL_TIM_IC_CaptureCallback>
 8010414:	e005      	b.n	8010422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 f9cc 	bl	80107b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 f9d3 	bl	80107c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b01      	cmp	r3, #1
 8010434:	d10e      	bne.n	8010454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	2b01      	cmp	r3, #1
 8010442:	d107      	bne.n	8010454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f06f 0201 	mvn.w	r2, #1
 801044c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 f9a6 	bl	80107a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801045e:	2b80      	cmp	r3, #128	; 0x80
 8010460:	d10e      	bne.n	8010480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801046c:	2b80      	cmp	r3, #128	; 0x80
 801046e:	d107      	bne.n	8010480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 fc8e 	bl	8010d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	691b      	ldr	r3, [r3, #16]
 8010486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801048a:	2b40      	cmp	r3, #64	; 0x40
 801048c:	d10e      	bne.n	80104ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010498:	2b40      	cmp	r3, #64	; 0x40
 801049a:	d107      	bne.n	80104ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80104a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f998 	bl	80107dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	691b      	ldr	r3, [r3, #16]
 80104b2:	f003 0320 	and.w	r3, r3, #32
 80104b6:	2b20      	cmp	r3, #32
 80104b8:	d10e      	bne.n	80104d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	f003 0320 	and.w	r3, r3, #32
 80104c4:	2b20      	cmp	r3, #32
 80104c6:	d107      	bne.n	80104d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f06f 0220 	mvn.w	r2, #32
 80104d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 fc58 	bl	8010d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d101      	bne.n	80104fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80104f6:	2302      	movs	r3, #2
 80104f8:	e08a      	b.n	8010610 <HAL_TIM_IC_ConfigChannel+0x130>
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2201      	movs	r2, #1
 80104fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2202      	movs	r2, #2
 8010506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d11b      	bne.n	8010548 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6818      	ldr	r0, [r3, #0]
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	6819      	ldr	r1, [r3, #0]
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	f000 f9e6 	bl	80108f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	699a      	ldr	r2, [r3, #24]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f022 020c 	bic.w	r2, r2, #12
 8010532:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	6999      	ldr	r1, [r3, #24]
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	689a      	ldr	r2, [r3, #8]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	430a      	orrs	r2, r1
 8010544:	619a      	str	r2, [r3, #24]
 8010546:	e05a      	b.n	80105fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2b04      	cmp	r3, #4
 801054c:	d11c      	bne.n	8010588 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6818      	ldr	r0, [r3, #0]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	6819      	ldr	r1, [r3, #0]
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	685a      	ldr	r2, [r3, #4]
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	f000 fa5e 	bl	8010a1e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	699a      	ldr	r2, [r3, #24]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010570:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	6999      	ldr	r1, [r3, #24]
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	021a      	lsls	r2, r3, #8
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	430a      	orrs	r2, r1
 8010584:	619a      	str	r2, [r3, #24]
 8010586:	e03a      	b.n	80105fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b08      	cmp	r3, #8
 801058c:	d11b      	bne.n	80105c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	6818      	ldr	r0, [r3, #0]
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	6819      	ldr	r1, [r3, #0]
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	685a      	ldr	r2, [r3, #4]
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	f000 faab 	bl	8010af8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	69da      	ldr	r2, [r3, #28]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f022 020c 	bic.w	r2, r2, #12
 80105b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	69d9      	ldr	r1, [r3, #28]
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	689a      	ldr	r2, [r3, #8]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	430a      	orrs	r2, r1
 80105c2:	61da      	str	r2, [r3, #28]
 80105c4:	e01b      	b.n	80105fe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	6818      	ldr	r0, [r3, #0]
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	6819      	ldr	r1, [r3, #0]
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	685a      	ldr	r2, [r3, #4]
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	f000 facb 	bl	8010b70 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	69da      	ldr	r2, [r3, #28]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80105e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	69d9      	ldr	r1, [r3, #28]
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	689b      	ldr	r3, [r3, #8]
 80105f4:	021a      	lsls	r2, r3, #8
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	430a      	orrs	r2, r1
 80105fc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2201      	movs	r2, #1
 8010602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2200      	movs	r2, #0
 801060a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010628:	2b01      	cmp	r3, #1
 801062a:	d101      	bne.n	8010630 <HAL_TIM_ConfigClockSource+0x18>
 801062c:	2302      	movs	r3, #2
 801062e:	e0b3      	b.n	8010798 <HAL_TIM_ConfigClockSource+0x180>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2202      	movs	r2, #2
 801063c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801064e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010656:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010668:	d03e      	beq.n	80106e8 <HAL_TIM_ConfigClockSource+0xd0>
 801066a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801066e:	f200 8087 	bhi.w	8010780 <HAL_TIM_ConfigClockSource+0x168>
 8010672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010676:	f000 8085 	beq.w	8010784 <HAL_TIM_ConfigClockSource+0x16c>
 801067a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801067e:	d87f      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 8010680:	2b70      	cmp	r3, #112	; 0x70
 8010682:	d01a      	beq.n	80106ba <HAL_TIM_ConfigClockSource+0xa2>
 8010684:	2b70      	cmp	r3, #112	; 0x70
 8010686:	d87b      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 8010688:	2b60      	cmp	r3, #96	; 0x60
 801068a:	d050      	beq.n	801072e <HAL_TIM_ConfigClockSource+0x116>
 801068c:	2b60      	cmp	r3, #96	; 0x60
 801068e:	d877      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 8010690:	2b50      	cmp	r3, #80	; 0x50
 8010692:	d03c      	beq.n	801070e <HAL_TIM_ConfigClockSource+0xf6>
 8010694:	2b50      	cmp	r3, #80	; 0x50
 8010696:	d873      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 8010698:	2b40      	cmp	r3, #64	; 0x40
 801069a:	d058      	beq.n	801074e <HAL_TIM_ConfigClockSource+0x136>
 801069c:	2b40      	cmp	r3, #64	; 0x40
 801069e:	d86f      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 80106a0:	2b30      	cmp	r3, #48	; 0x30
 80106a2:	d064      	beq.n	801076e <HAL_TIM_ConfigClockSource+0x156>
 80106a4:	2b30      	cmp	r3, #48	; 0x30
 80106a6:	d86b      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 80106a8:	2b20      	cmp	r3, #32
 80106aa:	d060      	beq.n	801076e <HAL_TIM_ConfigClockSource+0x156>
 80106ac:	2b20      	cmp	r3, #32
 80106ae:	d867      	bhi.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d05c      	beq.n	801076e <HAL_TIM_ConfigClockSource+0x156>
 80106b4:	2b10      	cmp	r3, #16
 80106b6:	d05a      	beq.n	801076e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80106b8:	e062      	b.n	8010780 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6818      	ldr	r0, [r3, #0]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	6899      	ldr	r1, [r3, #8]
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	f000 faa9 	bl	8010c20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80106dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	609a      	str	r2, [r3, #8]
      break;
 80106e6:	e04e      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6818      	ldr	r0, [r3, #0]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	6899      	ldr	r1, [r3, #8]
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	685a      	ldr	r2, [r3, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	f000 fa92 	bl	8010c20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	689a      	ldr	r2, [r3, #8]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801070a:	609a      	str	r2, [r3, #8]
      break;
 801070c:	e03b      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6818      	ldr	r0, [r3, #0]
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	6859      	ldr	r1, [r3, #4]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	461a      	mov	r2, r3
 801071c:	f000 f950 	bl	80109c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2150      	movs	r1, #80	; 0x50
 8010726:	4618      	mov	r0, r3
 8010728:	f000 fa5f 	bl	8010bea <TIM_ITRx_SetConfig>
      break;
 801072c:	e02b      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6818      	ldr	r0, [r3, #0]
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	6859      	ldr	r1, [r3, #4]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	461a      	mov	r2, r3
 801073c:	f000 f9ac 	bl	8010a98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2160      	movs	r1, #96	; 0x60
 8010746:	4618      	mov	r0, r3
 8010748:	f000 fa4f 	bl	8010bea <TIM_ITRx_SetConfig>
      break;
 801074c:	e01b      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6818      	ldr	r0, [r3, #0]
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	6859      	ldr	r1, [r3, #4]
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	461a      	mov	r2, r3
 801075c:	f000 f930 	bl	80109c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	2140      	movs	r1, #64	; 0x40
 8010766:	4618      	mov	r0, r3
 8010768:	f000 fa3f 	bl	8010bea <TIM_ITRx_SetConfig>
      break;
 801076c:	e00b      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4619      	mov	r1, r3
 8010778:	4610      	mov	r0, r2
 801077a:	f000 fa36 	bl	8010bea <TIM_ITRx_SetConfig>
      break;
 801077e:	e002      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010780:	bf00      	nop
 8010782:	e000      	b.n	8010786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2201      	movs	r2, #1
 801078a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	3710      	adds	r7, #16
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80107bc:	bf00      	nop
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr

080107c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4a34      	ldr	r2, [pc, #208]	; (80108d4 <TIM_Base_SetConfig+0xe4>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d00f      	beq.n	8010828 <TIM_Base_SetConfig+0x38>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801080e:	d00b      	beq.n	8010828 <TIM_Base_SetConfig+0x38>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a31      	ldr	r2, [pc, #196]	; (80108d8 <TIM_Base_SetConfig+0xe8>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d007      	beq.n	8010828 <TIM_Base_SetConfig+0x38>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4a30      	ldr	r2, [pc, #192]	; (80108dc <TIM_Base_SetConfig+0xec>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d003      	beq.n	8010828 <TIM_Base_SetConfig+0x38>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4a2f      	ldr	r2, [pc, #188]	; (80108e0 <TIM_Base_SetConfig+0xf0>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d108      	bne.n	801083a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801082e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	68fa      	ldr	r2, [r7, #12]
 8010836:	4313      	orrs	r3, r2
 8010838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4a25      	ldr	r2, [pc, #148]	; (80108d4 <TIM_Base_SetConfig+0xe4>)
 801083e:	4293      	cmp	r3, r2
 8010840:	d01b      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010848:	d017      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4a22      	ldr	r2, [pc, #136]	; (80108d8 <TIM_Base_SetConfig+0xe8>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d013      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4a21      	ldr	r2, [pc, #132]	; (80108dc <TIM_Base_SetConfig+0xec>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d00f      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4a20      	ldr	r2, [pc, #128]	; (80108e0 <TIM_Base_SetConfig+0xf0>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d00b      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4a1f      	ldr	r2, [pc, #124]	; (80108e4 <TIM_Base_SetConfig+0xf4>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d007      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a1e      	ldr	r2, [pc, #120]	; (80108e8 <TIM_Base_SetConfig+0xf8>)
 801086e:	4293      	cmp	r3, r2
 8010870:	d003      	beq.n	801087a <TIM_Base_SetConfig+0x8a>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a1d      	ldr	r2, [pc, #116]	; (80108ec <TIM_Base_SetConfig+0xfc>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d108      	bne.n	801088c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	68db      	ldr	r3, [r3, #12]
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	4313      	orrs	r3, r2
 801088a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	695b      	ldr	r3, [r3, #20]
 8010896:	4313      	orrs	r3, r2
 8010898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	689a      	ldr	r2, [r3, #8]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4a08      	ldr	r2, [pc, #32]	; (80108d4 <TIM_Base_SetConfig+0xe4>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d103      	bne.n	80108c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	691a      	ldr	r2, [r3, #16]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2201      	movs	r2, #1
 80108c4:	615a      	str	r2, [r3, #20]
}
 80108c6:	bf00      	nop
 80108c8:	3714      	adds	r7, #20
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	40010000 	.word	0x40010000
 80108d8:	40000400 	.word	0x40000400
 80108dc:	40000800 	.word	0x40000800
 80108e0:	40000c00 	.word	0x40000c00
 80108e4:	40014000 	.word	0x40014000
 80108e8:	40014400 	.word	0x40014400
 80108ec:	40014800 	.word	0x40014800

080108f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b087      	sub	sp, #28
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
 80108fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	6a1b      	ldr	r3, [r3, #32]
 8010902:	f023 0201 	bic.w	r2, r3, #1
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	699b      	ldr	r3, [r3, #24]
 801090e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6a1b      	ldr	r3, [r3, #32]
 8010914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	4a24      	ldr	r2, [pc, #144]	; (80109ac <TIM_TI1_SetConfig+0xbc>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d013      	beq.n	8010946 <TIM_TI1_SetConfig+0x56>
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010924:	d00f      	beq.n	8010946 <TIM_TI1_SetConfig+0x56>
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	4a21      	ldr	r2, [pc, #132]	; (80109b0 <TIM_TI1_SetConfig+0xc0>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d00b      	beq.n	8010946 <TIM_TI1_SetConfig+0x56>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	4a20      	ldr	r2, [pc, #128]	; (80109b4 <TIM_TI1_SetConfig+0xc4>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d007      	beq.n	8010946 <TIM_TI1_SetConfig+0x56>
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	4a1f      	ldr	r2, [pc, #124]	; (80109b8 <TIM_TI1_SetConfig+0xc8>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d003      	beq.n	8010946 <TIM_TI1_SetConfig+0x56>
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	4a1e      	ldr	r2, [pc, #120]	; (80109bc <TIM_TI1_SetConfig+0xcc>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d101      	bne.n	801094a <TIM_TI1_SetConfig+0x5a>
 8010946:	2301      	movs	r3, #1
 8010948:	e000      	b.n	801094c <TIM_TI1_SetConfig+0x5c>
 801094a:	2300      	movs	r3, #0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d008      	beq.n	8010962 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	f023 0303 	bic.w	r3, r3, #3
 8010956:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010958:	697a      	ldr	r2, [r7, #20]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4313      	orrs	r3, r2
 801095e:	617b      	str	r3, [r7, #20]
 8010960:	e003      	b.n	801096a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f043 0301 	orr.w	r3, r3, #1
 8010968:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	011b      	lsls	r3, r3, #4
 8010976:	b2db      	uxtb	r3, r3
 8010978:	697a      	ldr	r2, [r7, #20]
 801097a:	4313      	orrs	r3, r2
 801097c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	f023 030a 	bic.w	r3, r3, #10
 8010984:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	f003 030a 	and.w	r3, r3, #10
 801098c:	693a      	ldr	r2, [r7, #16]
 801098e:	4313      	orrs	r3, r2
 8010990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	697a      	ldr	r2, [r7, #20]
 8010996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	693a      	ldr	r2, [r7, #16]
 801099c:	621a      	str	r2, [r3, #32]
}
 801099e:	bf00      	nop
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	40010000 	.word	0x40010000
 80109b0:	40000400 	.word	0x40000400
 80109b4:	40000800 	.word	0x40000800
 80109b8:	40000c00 	.word	0x40000c00
 80109bc:	40014000 	.word	0x40014000

080109c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b087      	sub	sp, #28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6a1b      	ldr	r3, [r3, #32]
 80109d6:	f023 0201 	bic.w	r2, r3, #1
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80109ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	011b      	lsls	r3, r3, #4
 80109f0:	693a      	ldr	r2, [r7, #16]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f023 030a 	bic.w	r3, r3, #10
 80109fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	693a      	ldr	r2, [r7, #16]
 8010a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	697a      	ldr	r2, [r7, #20]
 8010a10:	621a      	str	r2, [r3, #32]
}
 8010a12:	bf00      	nop
 8010a14:	371c      	adds	r7, #28
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010a1e:	b480      	push	{r7}
 8010a20:	b087      	sub	sp, #28
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	60f8      	str	r0, [r7, #12]
 8010a26:	60b9      	str	r1, [r7, #8]
 8010a28:	607a      	str	r2, [r7, #4]
 8010a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6a1b      	ldr	r3, [r3, #32]
 8010a30:	f023 0210 	bic.w	r2, r3, #16
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6a1b      	ldr	r3, [r3, #32]
 8010a42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	021b      	lsls	r3, r3, #8
 8010a50:	697a      	ldr	r2, [r7, #20]
 8010a52:	4313      	orrs	r3, r2
 8010a54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	031b      	lsls	r3, r3, #12
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	697a      	ldr	r2, [r7, #20]
 8010a66:	4313      	orrs	r3, r2
 8010a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010a70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	011b      	lsls	r3, r3, #4
 8010a76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010a7a:	693a      	ldr	r2, [r7, #16]
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	693a      	ldr	r2, [r7, #16]
 8010a8a:	621a      	str	r2, [r3, #32]
}
 8010a8c:	bf00      	nop
 8010a8e:	371c      	adds	r7, #28
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6a1b      	ldr	r3, [r3, #32]
 8010aa8:	f023 0210 	bic.w	r2, r3, #16
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	699b      	ldr	r3, [r3, #24]
 8010ab4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6a1b      	ldr	r3, [r3, #32]
 8010aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010ac2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	031b      	lsls	r3, r3, #12
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	4313      	orrs	r3, r2
 8010acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	693a      	ldr	r2, [r7, #16]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	697a      	ldr	r2, [r7, #20]
 8010ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	693a      	ldr	r2, [r7, #16]
 8010aea:	621a      	str	r2, [r3, #32]
}
 8010aec:	bf00      	nop
 8010aee:	371c      	adds	r7, #28
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b087      	sub	sp, #28
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
 8010b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6a1b      	ldr	r3, [r3, #32]
 8010b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	69db      	ldr	r3, [r3, #28]
 8010b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
 8010b1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f023 0303 	bic.w	r3, r3, #3
 8010b24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8010b26:	697a      	ldr	r2, [r7, #20]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	011b      	lsls	r3, r3, #4
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010b48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	021b      	lsls	r3, r3, #8
 8010b4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8010b52:	693a      	ldr	r2, [r7, #16]
 8010b54:	4313      	orrs	r3, r2
 8010b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	697a      	ldr	r2, [r7, #20]
 8010b5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	621a      	str	r2, [r3, #32]
}
 8010b64:	bf00      	nop
 8010b66:	371c      	adds	r7, #28
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
 8010b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	69db      	ldr	r3, [r3, #28]
 8010b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6a1b      	ldr	r3, [r3, #32]
 8010b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	021b      	lsls	r3, r3, #8
 8010ba2:	697a      	ldr	r2, [r7, #20]
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010bae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	031b      	lsls	r3, r3, #12
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	697a      	ldr	r2, [r7, #20]
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8010bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	031b      	lsls	r3, r3, #12
 8010bc8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010bcc:	693a      	ldr	r2, [r7, #16]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	697a      	ldr	r2, [r7, #20]
 8010bd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	693a      	ldr	r2, [r7, #16]
 8010bdc:	621a      	str	r2, [r3, #32]
}
 8010bde:	bf00      	nop
 8010be0:	371c      	adds	r7, #28
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010bea:	b480      	push	{r7}
 8010bec:	b085      	sub	sp, #20
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	f043 0307 	orr.w	r3, r3, #7
 8010c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	609a      	str	r2, [r3, #8]
}
 8010c14:	bf00      	nop
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b087      	sub	sp, #28
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	607a      	str	r2, [r7, #4]
 8010c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	021a      	lsls	r2, r3, #8
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	431a      	orrs	r2, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	4313      	orrs	r3, r2
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	697a      	ldr	r2, [r7, #20]
 8010c52:	609a      	str	r2, [r3, #8]
}
 8010c54:	bf00      	nop
 8010c56:	371c      	adds	r7, #28
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b087      	sub	sp, #28
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	f003 031f 	and.w	r3, r3, #31
 8010c72:	2201      	movs	r2, #1
 8010c74:	fa02 f303 	lsl.w	r3, r2, r3
 8010c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6a1a      	ldr	r2, [r3, #32]
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	43db      	mvns	r3, r3
 8010c82:	401a      	ands	r2, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	6a1a      	ldr	r2, [r3, #32]
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	f003 031f 	and.w	r3, r3, #31
 8010c92:	6879      	ldr	r1, [r7, #4]
 8010c94:	fa01 f303 	lsl.w	r3, r1, r3
 8010c98:	431a      	orrs	r2, r3
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	621a      	str	r2, [r3, #32]
}
 8010c9e:	bf00      	nop
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
	...

08010cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d101      	bne.n	8010cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010cc0:	2302      	movs	r3, #2
 8010cc2:	e050      	b.n	8010d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2202      	movs	r2, #2
 8010cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	68fa      	ldr	r2, [r7, #12]
 8010cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a1c      	ldr	r2, [pc, #112]	; (8010d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d018      	beq.n	8010d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d10:	d013      	beq.n	8010d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	4a18      	ldr	r2, [pc, #96]	; (8010d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d00e      	beq.n	8010d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a16      	ldr	r2, [pc, #88]	; (8010d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d009      	beq.n	8010d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a15      	ldr	r2, [pc, #84]	; (8010d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d004      	beq.n	8010d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a13      	ldr	r2, [pc, #76]	; (8010d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d10c      	bne.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	68ba      	ldr	r2, [r7, #8]
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	68ba      	ldr	r2, [r7, #8]
 8010d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2201      	movs	r2, #1
 8010d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3714      	adds	r7, #20
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	40010000 	.word	0x40010000
 8010d78:	40000400 	.word	0x40000400
 8010d7c:	40000800 	.word	0x40000800
 8010d80:	40000c00 	.word	0x40000c00
 8010d84:	40014000 	.word	0x40014000

08010d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010d90:	bf00      	nop
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010da4:	bf00      	nop
 8010da6:	370c      	adds	r7, #12
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d101      	bne.n	8010dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e03f      	b.n	8010e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d106      	bne.n	8010ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7f5 ff0a 	bl	8006bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2224      	movs	r2, #36	; 0x24
 8010de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	68da      	ldr	r2, [r3, #12]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fc8f 	bl	8011718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	691a      	ldr	r2, [r3, #16]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	695a      	ldr	r2, [r3, #20]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68da      	ldr	r2, [r3, #12]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2220      	movs	r2, #32
 8010e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2220      	movs	r2, #32
 8010e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b082      	sub	sp, #8
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d101      	bne.n	8010e5c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	e01e      	b.n	8010e9a <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2224      	movs	r2, #36	; 0x24
 8010e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	68da      	ldr	r2, [r3, #12]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e72:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7f5 ff91 	bl	8006d9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8010e98:	2300      	movs	r3, #0
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b088      	sub	sp, #32
 8010ea6:	af02      	add	r7, sp, #8
 8010ea8:	60f8      	str	r0, [r7, #12]
 8010eaa:	60b9      	str	r1, [r7, #8]
 8010eac:	603b      	str	r3, [r7, #0]
 8010eae:	4613      	mov	r3, r2
 8010eb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	2b20      	cmp	r3, #32
 8010ec0:	f040 8083 	bne.w	8010fca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d002      	beq.n	8010ed0 <HAL_UART_Transmit+0x2e>
 8010eca:	88fb      	ldrh	r3, [r7, #6]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d101      	bne.n	8010ed4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e07b      	b.n	8010fcc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d101      	bne.n	8010ee2 <HAL_UART_Transmit+0x40>
 8010ede:	2302      	movs	r3, #2
 8010ee0:	e074      	b.n	8010fcc <HAL_UART_Transmit+0x12a>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2221      	movs	r2, #33	; 0x21
 8010ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010ef8:	f7fa ff46 	bl	800bd88 <HAL_GetTick>
 8010efc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	88fa      	ldrh	r2, [r7, #6]
 8010f02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	88fa      	ldrh	r2, [r7, #6]
 8010f08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010f12:	e042      	b.n	8010f9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	689b      	ldr	r3, [r3, #8]
 8010f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f2a:	d122      	bne.n	8010f72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2200      	movs	r2, #0
 8010f34:	2180      	movs	r1, #128	; 0x80
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f000 fa6c 	bl	8011414 <UART_WaitOnFlagUntilTimeout>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8010f42:	2303      	movs	r3, #3
 8010f44:	e042      	b.n	8010fcc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010f58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d103      	bne.n	8010f6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	3302      	adds	r3, #2
 8010f66:	60bb      	str	r3, [r7, #8]
 8010f68:	e017      	b.n	8010f9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	60bb      	str	r3, [r7, #8]
 8010f70:	e013      	b.n	8010f9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2180      	movs	r1, #128	; 0x80
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f000 fa49 	bl	8011414 <UART_WaitOnFlagUntilTimeout>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	e01f      	b.n	8010fcc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	1c5a      	adds	r2, r3, #1
 8010f90:	60ba      	str	r2, [r7, #8]
 8010f92:	781a      	ldrb	r2, [r3, #0]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1b7      	bne.n	8010f14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2200      	movs	r2, #0
 8010fac:	2140      	movs	r1, #64	; 0x40
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f000 fa30 	bl	8011414 <UART_WaitOnFlagUntilTimeout>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8010fba:	2303      	movs	r3, #3
 8010fbc:	e006      	b.n	8010fcc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2220      	movs	r2, #32
 8010fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	e000      	b.n	8010fcc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010fca:	2302      	movs	r3, #2
  }
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3718      	adds	r7, #24
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b086      	sub	sp, #24
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	2b20      	cmp	r3, #32
 8010fec:	d166      	bne.n	80110bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <HAL_UART_Receive_DMA+0x26>
 8010ff4:	88fb      	ldrh	r3, [r7, #6]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d101      	bne.n	8010ffe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e05f      	b.n	80110be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011004:	2b01      	cmp	r3, #1
 8011006:	d101      	bne.n	801100c <HAL_UART_Receive_DMA+0x38>
 8011008:	2302      	movs	r3, #2
 801100a:	e058      	b.n	80110be <HAL_UART_Receive_DMA+0xea>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8011014:	68ba      	ldr	r2, [r7, #8]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	88fa      	ldrh	r2, [r7, #6]
 801101e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2200      	movs	r2, #0
 8011024:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2222      	movs	r2, #34	; 0x22
 801102a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011032:	4a25      	ldr	r2, [pc, #148]	; (80110c8 <HAL_UART_Receive_DMA+0xf4>)
 8011034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801103a:	4a24      	ldr	r2, [pc, #144]	; (80110cc <HAL_UART_Receive_DMA+0xf8>)
 801103c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011042:	4a23      	ldr	r2, [pc, #140]	; (80110d0 <HAL_UART_Receive_DMA+0xfc>)
 8011044:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801104a:	2200      	movs	r2, #0
 801104c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801104e:	f107 0308 	add.w	r3, r7, #8
 8011052:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	3304      	adds	r3, #4
 801105e:	4619      	mov	r1, r3
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	88fb      	ldrh	r3, [r7, #6]
 8011066:	f7fb fe49 	bl	800ccfc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801106a:	2300      	movs	r3, #0
 801106c:	613b      	str	r3, [r7, #16]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	613b      	str	r3, [r7, #16]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	613b      	str	r3, [r7, #16]
 801107e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	68da      	ldr	r2, [r3, #12]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011096:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	695a      	ldr	r2, [r3, #20]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f042 0201 	orr.w	r2, r2, #1
 80110a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	695a      	ldr	r2, [r3, #20]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80110b8:	2300      	movs	r3, #0
 80110ba:	e000      	b.n	80110be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80110bc:	2302      	movs	r3, #2
  }
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3718      	adds	r7, #24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	080112fd 	.word	0x080112fd
 80110cc:	08011365 	.word	0x08011365
 80110d0:	08011381 	.word	0x08011381

080110d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b088      	sub	sp, #32
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80110f4:	2300      	movs	r3, #0
 80110f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	f003 030f 	and.w	r3, r3, #15
 8011102:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10d      	bne.n	8011126 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	f003 0320 	and.w	r3, r3, #32
 8011110:	2b00      	cmp	r3, #0
 8011112:	d008      	beq.n	8011126 <HAL_UART_IRQHandler+0x52>
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	f003 0320 	and.w	r3, r3, #32
 801111a:	2b00      	cmp	r3, #0
 801111c:	d003      	beq.n	8011126 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 fa78 	bl	8011614 <UART_Receive_IT>
      return;
 8011124:	e0d0      	b.n	80112c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 80b0 	beq.w	801128e <HAL_UART_IRQHandler+0x1ba>
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	f003 0301 	and.w	r3, r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	d105      	bne.n	8011144 <HAL_UART_IRQHandler+0x70>
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801113e:	2b00      	cmp	r3, #0
 8011140:	f000 80a5 	beq.w	801128e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	f003 0301 	and.w	r3, r3, #1
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00a      	beq.n	8011164 <HAL_UART_IRQHandler+0x90>
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011154:	2b00      	cmp	r3, #0
 8011156:	d005      	beq.n	8011164 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801115c:	f043 0201 	orr.w	r2, r3, #1
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	f003 0304 	and.w	r3, r3, #4
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00a      	beq.n	8011184 <HAL_UART_IRQHandler+0xb0>
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f003 0301 	and.w	r3, r3, #1
 8011174:	2b00      	cmp	r3, #0
 8011176:	d005      	beq.n	8011184 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801117c:	f043 0202 	orr.w	r2, r3, #2
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	f003 0302 	and.w	r3, r3, #2
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00a      	beq.n	80111a4 <HAL_UART_IRQHandler+0xd0>
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	f003 0301 	and.w	r3, r3, #1
 8011194:	2b00      	cmp	r3, #0
 8011196:	d005      	beq.n	80111a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801119c:	f043 0204 	orr.w	r2, r3, #4
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	f003 0308 	and.w	r3, r3, #8
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00f      	beq.n	80111ce <HAL_UART_IRQHandler+0xfa>
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	f003 0320 	and.w	r3, r3, #32
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d104      	bne.n	80111c2 <HAL_UART_IRQHandler+0xee>
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	f003 0301 	and.w	r3, r3, #1
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d005      	beq.n	80111ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111c6:	f043 0208 	orr.w	r2, r3, #8
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d077      	beq.n	80112c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	f003 0320 	and.w	r3, r3, #32
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d007      	beq.n	80111f0 <HAL_UART_IRQHandler+0x11c>
 80111e0:	69bb      	ldr	r3, [r7, #24]
 80111e2:	f003 0320 	and.w	r3, r3, #32
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d002      	beq.n	80111f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fa12 	bl	8011614 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	695b      	ldr	r3, [r3, #20]
 80111f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111fa:	2b40      	cmp	r3, #64	; 0x40
 80111fc:	bf0c      	ite	eq
 80111fe:	2301      	moveq	r3, #1
 8011200:	2300      	movne	r3, #0
 8011202:	b2db      	uxtb	r3, r3
 8011204:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801120a:	f003 0308 	and.w	r3, r3, #8
 801120e:	2b00      	cmp	r3, #0
 8011210:	d102      	bne.n	8011218 <HAL_UART_IRQHandler+0x144>
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d031      	beq.n	801127c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 f95b 	bl	80114d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	695b      	ldr	r3, [r3, #20]
 8011224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011228:	2b40      	cmp	r3, #64	; 0x40
 801122a:	d123      	bne.n	8011274 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	695a      	ldr	r2, [r3, #20]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801123a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011240:	2b00      	cmp	r3, #0
 8011242:	d013      	beq.n	801126c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011248:	4a21      	ldr	r2, [pc, #132]	; (80112d0 <HAL_UART_IRQHandler+0x1fc>)
 801124a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011250:	4618      	mov	r0, r3
 8011252:	f7fb fdab 	bl	800cdac <HAL_DMA_Abort_IT>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d016      	beq.n	801128a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011266:	4610      	mov	r0, r2
 8011268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801126a:	e00e      	b.n	801128a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7f5 fcab 	bl	8006bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011272:	e00a      	b.n	801128a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7f5 fca7 	bl	8006bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801127a:	e006      	b.n	801128a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7f5 fca3 	bl	8006bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2200      	movs	r2, #0
 8011286:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8011288:	e01d      	b.n	80112c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801128a:	bf00      	nop
    return;
 801128c:	e01b      	b.n	80112c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011294:	2b00      	cmp	r3, #0
 8011296:	d008      	beq.n	80112aa <HAL_UART_IRQHandler+0x1d6>
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d003      	beq.n	80112aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 f948 	bl	8011538 <UART_Transmit_IT>
    return;
 80112a8:	e00e      	b.n	80112c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d009      	beq.n	80112c8 <HAL_UART_IRQHandler+0x1f4>
 80112b4:	69bb      	ldr	r3, [r7, #24]
 80112b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d004      	beq.n	80112c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f000 f990 	bl	80115e4 <UART_EndTransmit_IT>
    return;
 80112c4:	e000      	b.n	80112c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80112c6:	bf00      	nop
  }
}
 80112c8:	3720      	adds	r7, #32
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	08011511 	.word	0x08011511

080112d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011308:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011314:	2b00      	cmp	r3, #0
 8011316:	d11e      	bne.n	8011356 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2200      	movs	r2, #0
 801131c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	68da      	ldr	r2, [r3, #12]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801132c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	695a      	ldr	r2, [r3, #20]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f022 0201 	bic.w	r2, r2, #1
 801133c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	695a      	ldr	r2, [r3, #20]
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801134c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2220      	movs	r2, #32
 8011352:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f7f5 fc40 	bl	8006bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801135c:	bf00      	nop
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011370:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f7ff ffb8 	bl	80112e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011378:	bf00      	nop
 801137a:	3710      	adds	r7, #16
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011388:	2300      	movs	r3, #0
 801138a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011390:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801139c:	2b80      	cmp	r3, #128	; 0x80
 801139e:	bf0c      	ite	eq
 80113a0:	2301      	moveq	r3, #1
 80113a2:	2300      	movne	r3, #0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	2b21      	cmp	r3, #33	; 0x21
 80113b2:	d108      	bne.n	80113c6 <UART_DMAError+0x46>
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d005      	beq.n	80113c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2200      	movs	r2, #0
 80113be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80113c0:	68b8      	ldr	r0, [r7, #8]
 80113c2:	f000 f871 	bl	80114a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	695b      	ldr	r3, [r3, #20]
 80113cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113d0:	2b40      	cmp	r3, #64	; 0x40
 80113d2:	bf0c      	ite	eq
 80113d4:	2301      	moveq	r3, #1
 80113d6:	2300      	movne	r3, #0
 80113d8:	b2db      	uxtb	r3, r3
 80113da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	2b22      	cmp	r3, #34	; 0x22
 80113e6:	d108      	bne.n	80113fa <UART_DMAError+0x7a>
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d005      	beq.n	80113fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	2200      	movs	r2, #0
 80113f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80113f4:	68b8      	ldr	r0, [r7, #8]
 80113f6:	f000 f86d 	bl	80114d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113fe:	f043 0210 	orr.w	r2, r3, #16
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011406:	68b8      	ldr	r0, [r7, #8]
 8011408:	f7f5 fbde 	bl	8006bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801140c:	bf00      	nop
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	603b      	str	r3, [r7, #0]
 8011420:	4613      	mov	r3, r2
 8011422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011424:	e02c      	b.n	8011480 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801142c:	d028      	beq.n	8011480 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d007      	beq.n	8011444 <UART_WaitOnFlagUntilTimeout+0x30>
 8011434:	f7fa fca8 	bl	800bd88 <HAL_GetTick>
 8011438:	4602      	mov	r2, r0
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	69ba      	ldr	r2, [r7, #24]
 8011440:	429a      	cmp	r2, r3
 8011442:	d21d      	bcs.n	8011480 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	68da      	ldr	r2, [r3, #12]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011452:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	695a      	ldr	r2, [r3, #20]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f022 0201 	bic.w	r2, r2, #1
 8011462:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	2220      	movs	r2, #32
 8011468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2220      	movs	r2, #32
 8011470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2200      	movs	r2, #0
 8011478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801147c:	2303      	movs	r3, #3
 801147e:	e00f      	b.n	80114a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	4013      	ands	r3, r2
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	429a      	cmp	r2, r3
 801148e:	bf0c      	ite	eq
 8011490:	2301      	moveq	r3, #1
 8011492:	2300      	movne	r3, #0
 8011494:	b2db      	uxtb	r3, r3
 8011496:	461a      	mov	r2, r3
 8011498:	79fb      	ldrb	r3, [r7, #7]
 801149a:	429a      	cmp	r2, r3
 801149c:	d0c3      	beq.n	8011426 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	68da      	ldr	r2, [r3, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80114be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2220      	movs	r2, #32
 80114c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80114c8:	bf00      	nop
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	68da      	ldr	r2, [r3, #12]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80114ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	695a      	ldr	r2, [r3, #20]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f022 0201 	bic.w	r2, r2, #1
 80114fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2220      	movs	r2, #32
 8011500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2200      	movs	r2, #0
 8011522:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2200      	movs	r2, #0
 8011528:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f7f5 fb4c 	bl	8006bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011530:	bf00      	nop
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011546:	b2db      	uxtb	r3, r3
 8011548:	2b21      	cmp	r3, #33	; 0x21
 801154a:	d144      	bne.n	80115d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011554:	d11a      	bne.n	801158c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a1b      	ldr	r3, [r3, #32]
 801155a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	461a      	mov	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801156a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d105      	bne.n	8011580 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a1b      	ldr	r3, [r3, #32]
 8011578:	1c9a      	adds	r2, r3, #2
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	621a      	str	r2, [r3, #32]
 801157e:	e00e      	b.n	801159e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6a1b      	ldr	r3, [r3, #32]
 8011584:	1c5a      	adds	r2, r3, #1
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	621a      	str	r2, [r3, #32]
 801158a:	e008      	b.n	801159e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6a1b      	ldr	r3, [r3, #32]
 8011590:	1c59      	adds	r1, r3, #1
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	6211      	str	r1, [r2, #32]
 8011596:	781a      	ldrb	r2, [r3, #0]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	3b01      	subs	r3, #1
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	4619      	mov	r1, r3
 80115ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d10f      	bne.n	80115d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	68da      	ldr	r2, [r3, #12]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80115c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	68da      	ldr	r2, [r3, #12]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80115d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	e000      	b.n	80115d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80115d6:	2302      	movs	r3, #2
  }
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3714      	adds	r7, #20
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	68da      	ldr	r2, [r3, #12]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80115fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2220      	movs	r2, #32
 8011600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7ff fe65 	bl	80112d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801160a:	2300      	movs	r3, #0
}
 801160c:	4618      	mov	r0, r3
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b22      	cmp	r3, #34	; 0x22
 8011626:	d171      	bne.n	801170c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	689b      	ldr	r3, [r3, #8]
 801162c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011630:	d123      	bne.n	801167a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011636:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d10e      	bne.n	801165e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	b29b      	uxth	r3, r3
 8011648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801164c:	b29a      	uxth	r2, r3
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011656:	1c9a      	adds	r2, r3, #2
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	629a      	str	r2, [r3, #40]	; 0x28
 801165c:	e029      	b.n	80116b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	b29b      	uxth	r3, r3
 8011666:	b2db      	uxtb	r3, r3
 8011668:	b29a      	uxth	r2, r3
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	629a      	str	r2, [r3, #40]	; 0x28
 8011678:	e01b      	b.n	80116b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	691b      	ldr	r3, [r3, #16]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10a      	bne.n	8011698 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	6858      	ldr	r0, [r3, #4]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801168c:	1c59      	adds	r1, r3, #1
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	6291      	str	r1, [r2, #40]	; 0x28
 8011692:	b2c2      	uxtb	r2, r0
 8011694:	701a      	strb	r2, [r3, #0]
 8011696:	e00c      	b.n	80116b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a4:	1c58      	adds	r0, r3, #1
 80116a6:	6879      	ldr	r1, [r7, #4]
 80116a8:	6288      	str	r0, [r1, #40]	; 0x28
 80116aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80116ae:	b2d2      	uxtb	r2, r2
 80116b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	3b01      	subs	r3, #1
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	4619      	mov	r1, r3
 80116c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d120      	bne.n	8011708 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	68da      	ldr	r2, [r3, #12]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f022 0220 	bic.w	r2, r2, #32
 80116d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68da      	ldr	r2, [r3, #12]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80116e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	695a      	ldr	r2, [r3, #20]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f022 0201 	bic.w	r2, r2, #1
 80116f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2220      	movs	r2, #32
 80116fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7f5 fa6c 	bl	8006bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8011704:	2300      	movs	r3, #0
 8011706:	e002      	b.n	801170e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8011708:	2300      	movs	r3, #0
 801170a:	e000      	b.n	801170e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801170c:	2302      	movs	r3, #2
  }
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
	...

08011718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801171c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8011720:	af00      	add	r7, sp, #0
 8011722:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011726:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011732:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011736:	68d9      	ldr	r1, [r3, #12]
 8011738:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	ea40 0301 	orr.w	r3, r0, r1
 8011742:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011744:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011748:	689a      	ldr	r2, [r3, #8]
 801174a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	431a      	orrs	r2, r3
 8011752:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011756:	695b      	ldr	r3, [r3, #20]
 8011758:	431a      	orrs	r2, r3
 801175a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801175e:	69db      	ldr	r3, [r3, #28]
 8011760:	4313      	orrs	r3, r2
 8011762:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8011766:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011772:	f021 010c 	bic.w	r1, r1, #12
 8011776:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8011780:	430b      	orrs	r3, r1
 8011782:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011784:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	695b      	ldr	r3, [r3, #20]
 801178c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011790:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011794:	6999      	ldr	r1, [r3, #24]
 8011796:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801179a:	681a      	ldr	r2, [r3, #0]
 801179c:	ea40 0301 	orr.w	r3, r0, r1
 80117a0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117a6:	69db      	ldr	r3, [r3, #28]
 80117a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117ac:	f040 824a 	bne.w	8011c44 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80117b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	4b96      	ldr	r3, [pc, #600]	; (8011a10 <UART_SetConfig+0x2f8>)
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d006      	beq.n	80117ca <UART_SetConfig+0xb2>
 80117bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	4b94      	ldr	r3, [pc, #592]	; (8011a14 <UART_SetConfig+0x2fc>)
 80117c4:	429a      	cmp	r2, r3
 80117c6:	f040 8129 	bne.w	8011a1c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80117ca:	f7fc fc75 	bl	800e0b8 <HAL_RCC_GetPCLK2Freq>
 80117ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80117d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80117d6:	2200      	movs	r2, #0
 80117d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80117dc:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80117e0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80117e4:	4622      	mov	r2, r4
 80117e6:	462b      	mov	r3, r5
 80117e8:	1891      	adds	r1, r2, r2
 80117ea:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80117ee:	415b      	adcs	r3, r3
 80117f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80117f4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80117f8:	4621      	mov	r1, r4
 80117fa:	1851      	adds	r1, r2, r1
 80117fc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8011800:	4629      	mov	r1, r5
 8011802:	414b      	adcs	r3, r1
 8011804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011808:	f04f 0200 	mov.w	r2, #0
 801180c:	f04f 0300 	mov.w	r3, #0
 8011810:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8011814:	4649      	mov	r1, r9
 8011816:	00cb      	lsls	r3, r1, #3
 8011818:	4641      	mov	r1, r8
 801181a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801181e:	4641      	mov	r1, r8
 8011820:	00ca      	lsls	r2, r1, #3
 8011822:	4610      	mov	r0, r2
 8011824:	4619      	mov	r1, r3
 8011826:	4603      	mov	r3, r0
 8011828:	4622      	mov	r2, r4
 801182a:	189b      	adds	r3, r3, r2
 801182c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8011830:	462b      	mov	r3, r5
 8011832:	460a      	mov	r2, r1
 8011834:	eb42 0303 	adc.w	r3, r2, r3
 8011838:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801183c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8011848:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 801184c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8011850:	460b      	mov	r3, r1
 8011852:	18db      	adds	r3, r3, r3
 8011854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011858:	4613      	mov	r3, r2
 801185a:	eb42 0303 	adc.w	r3, r2, r3
 801185e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011862:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8011866:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 801186a:	f7ef fa25 	bl	8000cb8 <__aeabi_uldivmod>
 801186e:	4602      	mov	r2, r0
 8011870:	460b      	mov	r3, r1
 8011872:	4b69      	ldr	r3, [pc, #420]	; (8011a18 <UART_SetConfig+0x300>)
 8011874:	fba3 2302 	umull	r2, r3, r3, r2
 8011878:	095b      	lsrs	r3, r3, #5
 801187a:	011c      	lsls	r4, r3, #4
 801187c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011880:	2200      	movs	r2, #0
 8011882:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8011886:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 801188a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 801188e:	4642      	mov	r2, r8
 8011890:	464b      	mov	r3, r9
 8011892:	1891      	adds	r1, r2, r2
 8011894:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8011898:	415b      	adcs	r3, r3
 801189a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801189e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80118a2:	4641      	mov	r1, r8
 80118a4:	1851      	adds	r1, r2, r1
 80118a6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80118aa:	4649      	mov	r1, r9
 80118ac:	414b      	adcs	r3, r1
 80118ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80118b2:	f04f 0200 	mov.w	r2, #0
 80118b6:	f04f 0300 	mov.w	r3, #0
 80118ba:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80118be:	4659      	mov	r1, fp
 80118c0:	00cb      	lsls	r3, r1, #3
 80118c2:	4651      	mov	r1, sl
 80118c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80118c8:	4651      	mov	r1, sl
 80118ca:	00ca      	lsls	r2, r1, #3
 80118cc:	4610      	mov	r0, r2
 80118ce:	4619      	mov	r1, r3
 80118d0:	4603      	mov	r3, r0
 80118d2:	4642      	mov	r2, r8
 80118d4:	189b      	adds	r3, r3, r2
 80118d6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80118da:	464b      	mov	r3, r9
 80118dc:	460a      	mov	r2, r1
 80118de:	eb42 0303 	adc.w	r3, r2, r3
 80118e2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80118e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80118ea:	685b      	ldr	r3, [r3, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80118f2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80118f6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80118fa:	460b      	mov	r3, r1
 80118fc:	18db      	adds	r3, r3, r3
 80118fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011902:	4613      	mov	r3, r2
 8011904:	eb42 0303 	adc.w	r3, r2, r3
 8011908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801190c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011910:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8011914:	f7ef f9d0 	bl	8000cb8 <__aeabi_uldivmod>
 8011918:	4602      	mov	r2, r0
 801191a:	460b      	mov	r3, r1
 801191c:	4611      	mov	r1, r2
 801191e:	4b3e      	ldr	r3, [pc, #248]	; (8011a18 <UART_SetConfig+0x300>)
 8011920:	fba3 2301 	umull	r2, r3, r3, r1
 8011924:	095b      	lsrs	r3, r3, #5
 8011926:	2264      	movs	r2, #100	; 0x64
 8011928:	fb02 f303 	mul.w	r3, r2, r3
 801192c:	1acb      	subs	r3, r1, r3
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011934:	4b38      	ldr	r3, [pc, #224]	; (8011a18 <UART_SetConfig+0x300>)
 8011936:	fba3 2302 	umull	r2, r3, r3, r2
 801193a:	095b      	lsrs	r3, r3, #5
 801193c:	005b      	lsls	r3, r3, #1
 801193e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011942:	441c      	add	r4, r3
 8011944:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011948:	2200      	movs	r2, #0
 801194a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 801194e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8011952:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8011956:	4642      	mov	r2, r8
 8011958:	464b      	mov	r3, r9
 801195a:	1891      	adds	r1, r2, r2
 801195c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8011960:	415b      	adcs	r3, r3
 8011962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011966:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801196a:	4641      	mov	r1, r8
 801196c:	1851      	adds	r1, r2, r1
 801196e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011972:	4649      	mov	r1, r9
 8011974:	414b      	adcs	r3, r1
 8011976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801197a:	f04f 0200 	mov.w	r2, #0
 801197e:	f04f 0300 	mov.w	r3, #0
 8011982:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8011986:	4659      	mov	r1, fp
 8011988:	00cb      	lsls	r3, r1, #3
 801198a:	4651      	mov	r1, sl
 801198c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011990:	4651      	mov	r1, sl
 8011992:	00ca      	lsls	r2, r1, #3
 8011994:	4610      	mov	r0, r2
 8011996:	4619      	mov	r1, r3
 8011998:	4603      	mov	r3, r0
 801199a:	4642      	mov	r2, r8
 801199c:	189b      	adds	r3, r3, r2
 801199e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80119a2:	464b      	mov	r3, r9
 80119a4:	460a      	mov	r2, r1
 80119a6:	eb42 0303 	adc.w	r3, r2, r3
 80119aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80119ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80119ba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80119be:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80119c2:	460b      	mov	r3, r1
 80119c4:	18db      	adds	r3, r3, r3
 80119c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80119ca:	4613      	mov	r3, r2
 80119cc:	eb42 0303 	adc.w	r3, r2, r3
 80119d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80119d4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80119d8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80119dc:	f7ef f96c 	bl	8000cb8 <__aeabi_uldivmod>
 80119e0:	4602      	mov	r2, r0
 80119e2:	460b      	mov	r3, r1
 80119e4:	4b0c      	ldr	r3, [pc, #48]	; (8011a18 <UART_SetConfig+0x300>)
 80119e6:	fba3 1302 	umull	r1, r3, r3, r2
 80119ea:	095b      	lsrs	r3, r3, #5
 80119ec:	2164      	movs	r1, #100	; 0x64
 80119ee:	fb01 f303 	mul.w	r3, r1, r3
 80119f2:	1ad3      	subs	r3, r2, r3
 80119f4:	00db      	lsls	r3, r3, #3
 80119f6:	3332      	adds	r3, #50	; 0x32
 80119f8:	4a07      	ldr	r2, [pc, #28]	; (8011a18 <UART_SetConfig+0x300>)
 80119fa:	fba2 2303 	umull	r2, r3, r2, r3
 80119fe:	095b      	lsrs	r3, r3, #5
 8011a00:	f003 0207 	and.w	r2, r3, #7
 8011a04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4422      	add	r2, r4
 8011a0c:	609a      	str	r2, [r3, #8]
 8011a0e:	e349      	b.n	80120a4 <UART_SetConfig+0x98c>
 8011a10:	40011000 	.word	0x40011000
 8011a14:	40011400 	.word	0x40011400
 8011a18:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011a1c:	f7fc fb38 	bl	800e090 <HAL_RCC_GetPCLK1Freq>
 8011a20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8011a2e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8011a32:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8011a36:	4622      	mov	r2, r4
 8011a38:	462b      	mov	r3, r5
 8011a3a:	1891      	adds	r1, r2, r2
 8011a3c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8011a40:	415b      	adcs	r3, r3
 8011a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a46:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	eb12 0a01 	adds.w	sl, r2, r1
 8011a50:	4629      	mov	r1, r5
 8011a52:	eb43 0b01 	adc.w	fp, r3, r1
 8011a56:	f04f 0200 	mov.w	r2, #0
 8011a5a:	f04f 0300 	mov.w	r3, #0
 8011a5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011a62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a6a:	4692      	mov	sl, r2
 8011a6c:	469b      	mov	fp, r3
 8011a6e:	4623      	mov	r3, r4
 8011a70:	eb1a 0303 	adds.w	r3, sl, r3
 8011a74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8011a78:	462b      	mov	r3, r5
 8011a7a:	eb4b 0303 	adc.w	r3, fp, r3
 8011a7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8011a82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8011a8e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8011a92:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8011a96:	460b      	mov	r3, r1
 8011a98:	18db      	adds	r3, r3, r3
 8011a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	eb42 0303 	adc.w	r3, r2, r3
 8011aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011aa8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011aac:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8011ab0:	f7ef f902 	bl	8000cb8 <__aeabi_uldivmod>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	4b61      	ldr	r3, [pc, #388]	; (8011c40 <UART_SetConfig+0x528>)
 8011aba:	fba3 2302 	umull	r2, r3, r3, r2
 8011abe:	095b      	lsrs	r3, r3, #5
 8011ac0:	011c      	lsls	r4, r3, #4
 8011ac2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8011acc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8011ad0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8011ad4:	4642      	mov	r2, r8
 8011ad6:	464b      	mov	r3, r9
 8011ad8:	1891      	adds	r1, r2, r2
 8011ada:	67b9      	str	r1, [r7, #120]	; 0x78
 8011adc:	415b      	adcs	r3, r3
 8011ade:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ae0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011ae4:	4641      	mov	r1, r8
 8011ae6:	1851      	adds	r1, r2, r1
 8011ae8:	6739      	str	r1, [r7, #112]	; 0x70
 8011aea:	4649      	mov	r1, r9
 8011aec:	414b      	adcs	r3, r1
 8011aee:	677b      	str	r3, [r7, #116]	; 0x74
 8011af0:	f04f 0200 	mov.w	r2, #0
 8011af4:	f04f 0300 	mov.w	r3, #0
 8011af8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8011afc:	4659      	mov	r1, fp
 8011afe:	00cb      	lsls	r3, r1, #3
 8011b00:	4651      	mov	r1, sl
 8011b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b06:	4651      	mov	r1, sl
 8011b08:	00ca      	lsls	r2, r1, #3
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	4603      	mov	r3, r0
 8011b10:	4642      	mov	r2, r8
 8011b12:	189b      	adds	r3, r3, r2
 8011b14:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8011b18:	464b      	mov	r3, r9
 8011b1a:	460a      	mov	r2, r1
 8011b1c:	eb42 0303 	adc.w	r3, r2, r3
 8011b20:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8011b24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011b30:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8011b34:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8011b38:	460b      	mov	r3, r1
 8011b3a:	18db      	adds	r3, r3, r3
 8011b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b3e:	4613      	mov	r3, r2
 8011b40:	eb42 0303 	adc.w	r3, r2, r3
 8011b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011b46:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011b4a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8011b4e:	f7ef f8b3 	bl	8000cb8 <__aeabi_uldivmod>
 8011b52:	4602      	mov	r2, r0
 8011b54:	460b      	mov	r3, r1
 8011b56:	4611      	mov	r1, r2
 8011b58:	4b39      	ldr	r3, [pc, #228]	; (8011c40 <UART_SetConfig+0x528>)
 8011b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8011b5e:	095b      	lsrs	r3, r3, #5
 8011b60:	2264      	movs	r2, #100	; 0x64
 8011b62:	fb02 f303 	mul.w	r3, r2, r3
 8011b66:	1acb      	subs	r3, r1, r3
 8011b68:	00db      	lsls	r3, r3, #3
 8011b6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011b6e:	4b34      	ldr	r3, [pc, #208]	; (8011c40 <UART_SetConfig+0x528>)
 8011b70:	fba3 2302 	umull	r2, r3, r3, r2
 8011b74:	095b      	lsrs	r3, r3, #5
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011b7c:	441c      	add	r4, r3
 8011b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011b82:	2200      	movs	r2, #0
 8011b84:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8011b88:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8011b8c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8011b90:	4642      	mov	r2, r8
 8011b92:	464b      	mov	r3, r9
 8011b94:	1891      	adds	r1, r2, r2
 8011b96:	6639      	str	r1, [r7, #96]	; 0x60
 8011b98:	415b      	adcs	r3, r3
 8011b9a:	667b      	str	r3, [r7, #100]	; 0x64
 8011b9c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011ba0:	4641      	mov	r1, r8
 8011ba2:	1851      	adds	r1, r2, r1
 8011ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8011ba6:	4649      	mov	r1, r9
 8011ba8:	414b      	adcs	r3, r1
 8011baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011bac:	f04f 0200 	mov.w	r2, #0
 8011bb0:	f04f 0300 	mov.w	r3, #0
 8011bb4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8011bb8:	4659      	mov	r1, fp
 8011bba:	00cb      	lsls	r3, r1, #3
 8011bbc:	4651      	mov	r1, sl
 8011bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011bc2:	4651      	mov	r1, sl
 8011bc4:	00ca      	lsls	r2, r1, #3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	4619      	mov	r1, r3
 8011bca:	4603      	mov	r3, r0
 8011bcc:	4642      	mov	r2, r8
 8011bce:	189b      	adds	r3, r3, r2
 8011bd0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011bd4:	464b      	mov	r3, r9
 8011bd6:	460a      	mov	r2, r1
 8011bd8:	eb42 0303 	adc.w	r3, r2, r3
 8011bdc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011be0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8011bec:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8011bf0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	18db      	adds	r3, r3, r3
 8011bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	eb42 0303 	adc.w	r3, r2, r3
 8011c00:	657b      	str	r3, [r7, #84]	; 0x54
 8011c02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011c06:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8011c0a:	f7ef f855 	bl	8000cb8 <__aeabi_uldivmod>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	4b0b      	ldr	r3, [pc, #44]	; (8011c40 <UART_SetConfig+0x528>)
 8011c14:	fba3 1302 	umull	r1, r3, r3, r2
 8011c18:	095b      	lsrs	r3, r3, #5
 8011c1a:	2164      	movs	r1, #100	; 0x64
 8011c1c:	fb01 f303 	mul.w	r3, r1, r3
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	00db      	lsls	r3, r3, #3
 8011c24:	3332      	adds	r3, #50	; 0x32
 8011c26:	4a06      	ldr	r2, [pc, #24]	; (8011c40 <UART_SetConfig+0x528>)
 8011c28:	fba2 2303 	umull	r2, r3, r2, r3
 8011c2c:	095b      	lsrs	r3, r3, #5
 8011c2e:	f003 0207 	and.w	r2, r3, #7
 8011c32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4422      	add	r2, r4
 8011c3a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011c3c:	e232      	b.n	80120a4 <UART_SetConfig+0x98c>
 8011c3e:	bf00      	nop
 8011c40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011c44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	4b8d      	ldr	r3, [pc, #564]	; (8011e80 <UART_SetConfig+0x768>)
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d006      	beq.n	8011c5e <UART_SetConfig+0x546>
 8011c50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	4b8b      	ldr	r3, [pc, #556]	; (8011e84 <UART_SetConfig+0x76c>)
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	f040 8117 	bne.w	8011e8c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011c5e:	f7fc fa2b 	bl	800e0b8 <HAL_RCC_GetPCLK2Freq>
 8011c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8011c70:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8011c74:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8011c78:	4622      	mov	r2, r4
 8011c7a:	462b      	mov	r3, r5
 8011c7c:	1891      	adds	r1, r2, r2
 8011c7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8011c80:	415b      	adcs	r3, r3
 8011c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011c88:	4621      	mov	r1, r4
 8011c8a:	eb12 0801 	adds.w	r8, r2, r1
 8011c8e:	4629      	mov	r1, r5
 8011c90:	eb43 0901 	adc.w	r9, r3, r1
 8011c94:	f04f 0200 	mov.w	r2, #0
 8011c98:	f04f 0300 	mov.w	r3, #0
 8011c9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011ca0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011ca4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011ca8:	4690      	mov	r8, r2
 8011caa:	4699      	mov	r9, r3
 8011cac:	4623      	mov	r3, r4
 8011cae:	eb18 0303 	adds.w	r3, r8, r3
 8011cb2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8011cb6:	462b      	mov	r3, r5
 8011cb8:	eb49 0303 	adc.w	r3, r9, r3
 8011cbc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8011cc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8011ccc:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8011cd0:	f04f 0200 	mov.w	r2, #0
 8011cd4:	f04f 0300 	mov.w	r3, #0
 8011cd8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8011cdc:	4629      	mov	r1, r5
 8011cde:	008b      	lsls	r3, r1, #2
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011ce6:	4621      	mov	r1, r4
 8011ce8:	008a      	lsls	r2, r1, #2
 8011cea:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8011cee:	f7ee ffe3 	bl	8000cb8 <__aeabi_uldivmod>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	4b64      	ldr	r3, [pc, #400]	; (8011e88 <UART_SetConfig+0x770>)
 8011cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8011cfc:	095b      	lsrs	r3, r3, #5
 8011cfe:	011c      	lsls	r4, r3, #4
 8011d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011d04:	2200      	movs	r2, #0
 8011d06:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8011d0a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8011d0e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8011d12:	4642      	mov	r2, r8
 8011d14:	464b      	mov	r3, r9
 8011d16:	1891      	adds	r1, r2, r2
 8011d18:	6439      	str	r1, [r7, #64]	; 0x40
 8011d1a:	415b      	adcs	r3, r3
 8011d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8011d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d22:	4641      	mov	r1, r8
 8011d24:	1851      	adds	r1, r2, r1
 8011d26:	63b9      	str	r1, [r7, #56]	; 0x38
 8011d28:	4649      	mov	r1, r9
 8011d2a:	414b      	adcs	r3, r1
 8011d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d2e:	f04f 0200 	mov.w	r2, #0
 8011d32:	f04f 0300 	mov.w	r3, #0
 8011d36:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8011d3a:	4659      	mov	r1, fp
 8011d3c:	00cb      	lsls	r3, r1, #3
 8011d3e:	4651      	mov	r1, sl
 8011d40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011d44:	4651      	mov	r1, sl
 8011d46:	00ca      	lsls	r2, r1, #3
 8011d48:	4610      	mov	r0, r2
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	4642      	mov	r2, r8
 8011d50:	189b      	adds	r3, r3, r2
 8011d52:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011d56:	464b      	mov	r3, r9
 8011d58:	460a      	mov	r2, r1
 8011d5a:	eb42 0303 	adc.w	r3, r2, r3
 8011d5e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8011d62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011d6e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8011d72:	f04f 0200 	mov.w	r2, #0
 8011d76:	f04f 0300 	mov.w	r3, #0
 8011d7a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8011d7e:	4649      	mov	r1, r9
 8011d80:	008b      	lsls	r3, r1, #2
 8011d82:	4641      	mov	r1, r8
 8011d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011d88:	4641      	mov	r1, r8
 8011d8a:	008a      	lsls	r2, r1, #2
 8011d8c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8011d90:	f7ee ff92 	bl	8000cb8 <__aeabi_uldivmod>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	4b3b      	ldr	r3, [pc, #236]	; (8011e88 <UART_SetConfig+0x770>)
 8011d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8011d9e:	095b      	lsrs	r3, r3, #5
 8011da0:	2164      	movs	r1, #100	; 0x64
 8011da2:	fb01 f303 	mul.w	r3, r1, r3
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	011b      	lsls	r3, r3, #4
 8011daa:	3332      	adds	r3, #50	; 0x32
 8011dac:	4a36      	ldr	r2, [pc, #216]	; (8011e88 <UART_SetConfig+0x770>)
 8011dae:	fba2 2303 	umull	r2, r3, r2, r3
 8011db2:	095b      	lsrs	r3, r3, #5
 8011db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011db8:	441c      	add	r4, r3
 8011dba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011dc4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8011dc8:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8011dcc:	4642      	mov	r2, r8
 8011dce:	464b      	mov	r3, r9
 8011dd0:	1891      	adds	r1, r2, r2
 8011dd2:	6339      	str	r1, [r7, #48]	; 0x30
 8011dd4:	415b      	adcs	r3, r3
 8011dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8011dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011ddc:	4641      	mov	r1, r8
 8011dde:	1851      	adds	r1, r2, r1
 8011de0:	62b9      	str	r1, [r7, #40]	; 0x28
 8011de2:	4649      	mov	r1, r9
 8011de4:	414b      	adcs	r3, r1
 8011de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011de8:	f04f 0200 	mov.w	r2, #0
 8011dec:	f04f 0300 	mov.w	r3, #0
 8011df0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8011df4:	4659      	mov	r1, fp
 8011df6:	00cb      	lsls	r3, r1, #3
 8011df8:	4651      	mov	r1, sl
 8011dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011dfe:	4651      	mov	r1, sl
 8011e00:	00ca      	lsls	r2, r1, #3
 8011e02:	4610      	mov	r0, r2
 8011e04:	4619      	mov	r1, r3
 8011e06:	4603      	mov	r3, r0
 8011e08:	4642      	mov	r2, r8
 8011e0a:	189b      	adds	r3, r3, r2
 8011e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011e10:	464b      	mov	r3, r9
 8011e12:	460a      	mov	r2, r1
 8011e14:	eb42 0303 	adc.w	r3, r2, r3
 8011e18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8011e28:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8011e2c:	f04f 0200 	mov.w	r2, #0
 8011e30:	f04f 0300 	mov.w	r3, #0
 8011e34:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8011e38:	4649      	mov	r1, r9
 8011e3a:	008b      	lsls	r3, r1, #2
 8011e3c:	4641      	mov	r1, r8
 8011e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011e42:	4641      	mov	r1, r8
 8011e44:	008a      	lsls	r2, r1, #2
 8011e46:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8011e4a:	f7ee ff35 	bl	8000cb8 <__aeabi_uldivmod>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	460b      	mov	r3, r1
 8011e52:	4b0d      	ldr	r3, [pc, #52]	; (8011e88 <UART_SetConfig+0x770>)
 8011e54:	fba3 1302 	umull	r1, r3, r3, r2
 8011e58:	095b      	lsrs	r3, r3, #5
 8011e5a:	2164      	movs	r1, #100	; 0x64
 8011e5c:	fb01 f303 	mul.w	r3, r1, r3
 8011e60:	1ad3      	subs	r3, r2, r3
 8011e62:	011b      	lsls	r3, r3, #4
 8011e64:	3332      	adds	r3, #50	; 0x32
 8011e66:	4a08      	ldr	r2, [pc, #32]	; (8011e88 <UART_SetConfig+0x770>)
 8011e68:	fba2 2303 	umull	r2, r3, r2, r3
 8011e6c:	095b      	lsrs	r3, r3, #5
 8011e6e:	f003 020f 	and.w	r2, r3, #15
 8011e72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4422      	add	r2, r4
 8011e7a:	609a      	str	r2, [r3, #8]
 8011e7c:	e112      	b.n	80120a4 <UART_SetConfig+0x98c>
 8011e7e:	bf00      	nop
 8011e80:	40011000 	.word	0x40011000
 8011e84:	40011400 	.word	0x40011400
 8011e88:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8011e8c:	f7fc f900 	bl	800e090 <HAL_RCC_GetPCLK1Freq>
 8011e90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8011e9e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8011ea2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8011ea6:	4642      	mov	r2, r8
 8011ea8:	464b      	mov	r3, r9
 8011eaa:	1891      	adds	r1, r2, r2
 8011eac:	6239      	str	r1, [r7, #32]
 8011eae:	415b      	adcs	r3, r3
 8011eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8011eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011eb6:	4641      	mov	r1, r8
 8011eb8:	1854      	adds	r4, r2, r1
 8011eba:	4649      	mov	r1, r9
 8011ebc:	eb43 0501 	adc.w	r5, r3, r1
 8011ec0:	f04f 0200 	mov.w	r2, #0
 8011ec4:	f04f 0300 	mov.w	r3, #0
 8011ec8:	00eb      	lsls	r3, r5, #3
 8011eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011ece:	00e2      	lsls	r2, r4, #3
 8011ed0:	4614      	mov	r4, r2
 8011ed2:	461d      	mov	r5, r3
 8011ed4:	4643      	mov	r3, r8
 8011ed6:	18e3      	adds	r3, r4, r3
 8011ed8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8011edc:	464b      	mov	r3, r9
 8011ede:	eb45 0303 	adc.w	r3, r5, r3
 8011ee2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011ee6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	2200      	movs	r2, #0
 8011eee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8011ef2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8011ef6:	f04f 0200 	mov.w	r2, #0
 8011efa:	f04f 0300 	mov.w	r3, #0
 8011efe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8011f02:	4629      	mov	r1, r5
 8011f04:	008b      	lsls	r3, r1, #2
 8011f06:	4621      	mov	r1, r4
 8011f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	008a      	lsls	r2, r1, #2
 8011f10:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8011f14:	f7ee fed0 	bl	8000cb8 <__aeabi_uldivmod>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	4b64      	ldr	r3, [pc, #400]	; (80120b0 <UART_SetConfig+0x998>)
 8011f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8011f22:	095b      	lsrs	r3, r3, #5
 8011f24:	011c      	lsls	r4, r3, #4
 8011f26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011f30:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8011f34:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8011f38:	4642      	mov	r2, r8
 8011f3a:	464b      	mov	r3, r9
 8011f3c:	1891      	adds	r1, r2, r2
 8011f3e:	61b9      	str	r1, [r7, #24]
 8011f40:	415b      	adcs	r3, r3
 8011f42:	61fb      	str	r3, [r7, #28]
 8011f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011f48:	4641      	mov	r1, r8
 8011f4a:	1851      	adds	r1, r2, r1
 8011f4c:	6139      	str	r1, [r7, #16]
 8011f4e:	4649      	mov	r1, r9
 8011f50:	414b      	adcs	r3, r1
 8011f52:	617b      	str	r3, [r7, #20]
 8011f54:	f04f 0200 	mov.w	r2, #0
 8011f58:	f04f 0300 	mov.w	r3, #0
 8011f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011f60:	4659      	mov	r1, fp
 8011f62:	00cb      	lsls	r3, r1, #3
 8011f64:	4651      	mov	r1, sl
 8011f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011f6a:	4651      	mov	r1, sl
 8011f6c:	00ca      	lsls	r2, r1, #3
 8011f6e:	4610      	mov	r0, r2
 8011f70:	4619      	mov	r1, r3
 8011f72:	4603      	mov	r3, r0
 8011f74:	4642      	mov	r2, r8
 8011f76:	189b      	adds	r3, r3, r2
 8011f78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011f7c:	464b      	mov	r3, r9
 8011f7e:	460a      	mov	r2, r1
 8011f80:	eb42 0303 	adc.w	r3, r2, r3
 8011f84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011f88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011f94:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8011f98:	f04f 0200 	mov.w	r2, #0
 8011f9c:	f04f 0300 	mov.w	r3, #0
 8011fa0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8011fa4:	4649      	mov	r1, r9
 8011fa6:	008b      	lsls	r3, r1, #2
 8011fa8:	4641      	mov	r1, r8
 8011faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011fae:	4641      	mov	r1, r8
 8011fb0:	008a      	lsls	r2, r1, #2
 8011fb2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8011fb6:	f7ee fe7f 	bl	8000cb8 <__aeabi_uldivmod>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	4b3c      	ldr	r3, [pc, #240]	; (80120b0 <UART_SetConfig+0x998>)
 8011fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8011fc4:	095b      	lsrs	r3, r3, #5
 8011fc6:	2164      	movs	r1, #100	; 0x64
 8011fc8:	fb01 f303 	mul.w	r3, r1, r3
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	3332      	adds	r3, #50	; 0x32
 8011fd2:	4a37      	ldr	r2, [pc, #220]	; (80120b0 <UART_SetConfig+0x998>)
 8011fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8011fd8:	095b      	lsrs	r3, r3, #5
 8011fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fde:	441c      	add	r4, r3
 8011fe0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011fea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011fee:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8011ff2:	4642      	mov	r2, r8
 8011ff4:	464b      	mov	r3, r9
 8011ff6:	1891      	adds	r1, r2, r2
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	415b      	adcs	r3, r3
 8011ffc:	60fb      	str	r3, [r7, #12]
 8011ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012002:	4641      	mov	r1, r8
 8012004:	1851      	adds	r1, r2, r1
 8012006:	6039      	str	r1, [r7, #0]
 8012008:	4649      	mov	r1, r9
 801200a:	414b      	adcs	r3, r1
 801200c:	607b      	str	r3, [r7, #4]
 801200e:	f04f 0200 	mov.w	r2, #0
 8012012:	f04f 0300 	mov.w	r3, #0
 8012016:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801201a:	4659      	mov	r1, fp
 801201c:	00cb      	lsls	r3, r1, #3
 801201e:	4651      	mov	r1, sl
 8012020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012024:	4651      	mov	r1, sl
 8012026:	00ca      	lsls	r2, r1, #3
 8012028:	4610      	mov	r0, r2
 801202a:	4619      	mov	r1, r3
 801202c:	4603      	mov	r3, r0
 801202e:	4642      	mov	r2, r8
 8012030:	189b      	adds	r3, r3, r2
 8012032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012036:	464b      	mov	r3, r9
 8012038:	460a      	mov	r2, r1
 801203a:	eb42 0303 	adc.w	r3, r2, r3
 801203e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012042:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801204e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012052:	f04f 0200 	mov.w	r2, #0
 8012056:	f04f 0300 	mov.w	r3, #0
 801205a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 801205e:	4649      	mov	r1, r9
 8012060:	008b      	lsls	r3, r1, #2
 8012062:	4641      	mov	r1, r8
 8012064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012068:	4641      	mov	r1, r8
 801206a:	008a      	lsls	r2, r1, #2
 801206c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012070:	f7ee fe22 	bl	8000cb8 <__aeabi_uldivmod>
 8012074:	4602      	mov	r2, r0
 8012076:	460b      	mov	r3, r1
 8012078:	4b0d      	ldr	r3, [pc, #52]	; (80120b0 <UART_SetConfig+0x998>)
 801207a:	fba3 1302 	umull	r1, r3, r3, r2
 801207e:	095b      	lsrs	r3, r3, #5
 8012080:	2164      	movs	r1, #100	; 0x64
 8012082:	fb01 f303 	mul.w	r3, r1, r3
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	011b      	lsls	r3, r3, #4
 801208a:	3332      	adds	r3, #50	; 0x32
 801208c:	4a08      	ldr	r2, [pc, #32]	; (80120b0 <UART_SetConfig+0x998>)
 801208e:	fba2 2303 	umull	r2, r3, r2, r3
 8012092:	095b      	lsrs	r3, r3, #5
 8012094:	f003 020f 	and.w	r2, r3, #15
 8012098:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	4422      	add	r2, r4
 80120a0:	609a      	str	r2, [r3, #8]
}
 80120a2:	e7ff      	b.n	80120a4 <UART_SetConfig+0x98c>
 80120a4:	bf00      	nop
 80120a6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80120aa:	46bd      	mov	sp, r7
 80120ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80120b0:	51eb851f 	.word	0x51eb851f

080120b4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80120b4:	b084      	sub	sp, #16
 80120b6:	b480      	push	{r7}
 80120b8:	b085      	sub	sp, #20
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	f107 001c 	add.w	r0, r7, #28
 80120c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80120c6:	2300      	movs	r3, #0
 80120c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80120ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80120cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80120ce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80120d2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80120d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80120d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80120d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80120da:	431a      	orrs	r2, r3
             Init.ClockDiv
 80120dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80120de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80120e0:	68fa      	ldr	r2, [r7, #12]
 80120e2:	4313      	orrs	r3, r2
 80120e4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80120ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	431a      	orrs	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80120fa:	2300      	movs	r3, #0
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3714      	adds	r7, #20
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	b004      	add	sp, #16
 8012108:	4770      	bx	lr

0801210a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	370c      	adds	r7, #12
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr

08012146 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8012146:	b580      	push	{r7, lr}
 8012148:	b082      	sub	sp, #8
 801214a:	af00      	add	r7, sp, #0
 801214c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2203      	movs	r2, #3
 8012152:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012154:	2002      	movs	r0, #2
 8012156:	f7f9 fe23 	bl	800bda0 <HAL_Delay>
  
  return HAL_OK;
 801215a:	2300      	movs	r3, #0
}
 801215c:	4618      	mov	r0, r3
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}

08012164 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f003 0303 	and.w	r3, r3, #3
}
 8012174:	4618      	mov	r0, r3
 8012176:	370c      	adds	r7, #12
 8012178:	46bd      	mov	sp, r7
 801217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217e:	4770      	bx	lr

08012180 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012180:	b480      	push	{r7}
 8012182:	b085      	sub	sp, #20
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801219e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80121a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80121aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	4313      	orrs	r3, r2
 80121b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80121ba:	f023 030f 	bic.w	r3, r3, #15
 80121be:	68fa      	ldr	r2, [r7, #12]
 80121c0:	431a      	orrs	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80121c6:	2300      	movs	r3, #0
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3714      	adds	r7, #20
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr

080121d4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	691b      	ldr	r3, [r3, #16]
 80121e0:	b2db      	uxtb	r3, r3
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr

080121ee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80121ee:	b480      	push	{r7}
 80121f0:	b085      	sub	sp, #20
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
 80121f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	3314      	adds	r3, #20
 80121fc:	461a      	mov	r2, r3
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	4413      	add	r3, r2
 8012202:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
}  
 8012208:	4618      	mov	r0, r3
 801220a:	3714      	adds	r7, #20
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8012214:	b480      	push	{r7}
 8012216:	b085      	sub	sp, #20
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801223a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012240:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012246:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012248:	68fa      	ldr	r2, [r7, #12]
 801224a:	4313      	orrs	r3, r2
 801224c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012252:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	431a      	orrs	r2, r3
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801225e:	2300      	movs	r3, #0

}
 8012260:	4618      	mov	r0, r3
 8012262:	3714      	adds	r7, #20
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801227a:	2310      	movs	r3, #16
 801227c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801227e:	2340      	movs	r3, #64	; 0x40
 8012280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012282:	2300      	movs	r3, #0
 8012284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801228a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801228c:	f107 0308 	add.w	r3, r7, #8
 8012290:	4619      	mov	r1, r3
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f7ff ff74 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8012298:	f241 3288 	movw	r2, #5000	; 0x1388
 801229c:	2110      	movs	r1, #16
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 fa40 	bl	8012724 <SDMMC_GetCmdResp1>
 80122a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122a6:	69fb      	ldr	r3, [r7, #28]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3720      	adds	r7, #32
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b088      	sub	sp, #32
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80122be:	2311      	movs	r3, #17
 80122c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122c2:	2340      	movs	r3, #64	; 0x40
 80122c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80122c6:	2300      	movs	r3, #0
 80122c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122d0:	f107 0308 	add.w	r3, r7, #8
 80122d4:	4619      	mov	r1, r3
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7ff ff52 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80122dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80122e0:	2111      	movs	r1, #17
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fa1e 	bl	8012724 <SDMMC_GetCmdResp1>
 80122e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122ea:	69fb      	ldr	r3, [r7, #28]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3720      	adds	r7, #32
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012302:	2312      	movs	r3, #18
 8012304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012306:	2340      	movs	r3, #64	; 0x40
 8012308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801230a:	2300      	movs	r3, #0
 801230c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012312:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012314:	f107 0308 	add.w	r3, r7, #8
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7ff ff30 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012320:	f241 3288 	movw	r2, #5000	; 0x1388
 8012324:	2112      	movs	r1, #18
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 f9fc 	bl	8012724 <SDMMC_GetCmdResp1>
 801232c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801232e:	69fb      	ldr	r3, [r7, #28]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3720      	adds	r7, #32
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b088      	sub	sp, #32
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012346:	2318      	movs	r3, #24
 8012348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801234a:	2340      	movs	r3, #64	; 0x40
 801234c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801234e:	2300      	movs	r3, #0
 8012350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012358:	f107 0308 	add.w	r3, r7, #8
 801235c:	4619      	mov	r1, r3
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f7ff ff0e 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012364:	f241 3288 	movw	r2, #5000	; 0x1388
 8012368:	2118      	movs	r1, #24
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 f9da 	bl	8012724 <SDMMC_GetCmdResp1>
 8012370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012372:	69fb      	ldr	r3, [r7, #28]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3720      	adds	r7, #32
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b088      	sub	sp, #32
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801238a:	2319      	movs	r3, #25
 801238c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801238e:	2340      	movs	r3, #64	; 0x40
 8012390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012392:	2300      	movs	r3, #0
 8012394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801239a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801239c:	f107 0308 	add.w	r3, r7, #8
 80123a0:	4619      	mov	r1, r3
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f7ff feec 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80123a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80123ac:	2119      	movs	r1, #25
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 f9b8 	bl	8012724 <SDMMC_GetCmdResp1>
 80123b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123b6:	69fb      	ldr	r3, [r7, #28]
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3720      	adds	r7, #32
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80123c8:	2300      	movs	r3, #0
 80123ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80123cc:	230c      	movs	r3, #12
 80123ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80123d0:	2340      	movs	r3, #64	; 0x40
 80123d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80123d4:	2300      	movs	r3, #0
 80123d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80123d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80123de:	f107 0308 	add.w	r3, r7, #8
 80123e2:	4619      	mov	r1, r3
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7ff fecb 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80123ea:	4a05      	ldr	r2, [pc, #20]	; (8012400 <SDMMC_CmdStopTransfer+0x40>)
 80123ec:	210c      	movs	r1, #12
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f000 f998 	bl	8012724 <SDMMC_GetCmdResp1>
 80123f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123f6:	69fb      	ldr	r3, [r7, #28]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3720      	adds	r7, #32
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	05f5e100 	.word	0x05f5e100

08012404 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b08a      	sub	sp, #40	; 0x28
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012414:	2307      	movs	r3, #7
 8012416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012418:	2340      	movs	r3, #64	; 0x40
 801241a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801241c:	2300      	movs	r3, #0
 801241e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012424:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012426:	f107 0310 	add.w	r3, r7, #16
 801242a:	4619      	mov	r1, r3
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f7ff fea7 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8012432:	f241 3288 	movw	r2, #5000	; 0x1388
 8012436:	2107      	movs	r1, #7
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f000 f973 	bl	8012724 <SDMMC_GetCmdResp1>
 801243e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012442:	4618      	mov	r0, r3
 8012444:	3728      	adds	r7, #40	; 0x28
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}

0801244a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b088      	sub	sp, #32
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8012452:	2300      	movs	r3, #0
 8012454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012456:	2300      	movs	r3, #0
 8012458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801245a:	2300      	movs	r3, #0
 801245c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801245e:	2300      	movs	r3, #0
 8012460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012468:	f107 0308 	add.w	r3, r7, #8
 801246c:	4619      	mov	r1, r3
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7ff fe86 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 f92d 	bl	80126d4 <SDMMC_GetCmdError>
 801247a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801247c:	69fb      	ldr	r3, [r7, #28]
}
 801247e:	4618      	mov	r0, r3
 8012480:	3720      	adds	r7, #32
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}

08012486 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8012486:	b580      	push	{r7, lr}
 8012488:	b088      	sub	sp, #32
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801248e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012494:	2308      	movs	r3, #8
 8012496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012498:	2340      	movs	r3, #64	; 0x40
 801249a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801249c:	2300      	movs	r3, #0
 801249e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124a6:	f107 0308 	add.w	r3, r7, #8
 80124aa:	4619      	mov	r1, r3
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff fe67 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fb16 	bl	8012ae4 <SDMMC_GetCmdResp7>
 80124b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ba:	69fb      	ldr	r3, [r7, #28]
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3720      	adds	r7, #32
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b088      	sub	sp, #32
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80124d2:	2337      	movs	r3, #55	; 0x37
 80124d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80124d6:	2340      	movs	r3, #64	; 0x40
 80124d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80124da:	2300      	movs	r3, #0
 80124dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80124de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80124e4:	f107 0308 	add.w	r3, r7, #8
 80124e8:	4619      	mov	r1, r3
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f7ff fe48 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80124f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80124f4:	2137      	movs	r1, #55	; 0x37
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f914 	bl	8012724 <SDMMC_GetCmdResp1>
 80124fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124fe:	69fb      	ldr	r3, [r7, #28]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3720      	adds	r7, #32
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801251c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801251e:	2329      	movs	r3, #41	; 0x29
 8012520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012522:	2340      	movs	r3, #64	; 0x40
 8012524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012526:	2300      	movs	r3, #0
 8012528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801252e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012530:	f107 0308 	add.w	r3, r7, #8
 8012534:	4619      	mov	r1, r3
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f7ff fe22 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 fa23 	bl	8012988 <SDMMC_GetCmdResp3>
 8012542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012544:	69fb      	ldr	r3, [r7, #28]
}
 8012546:	4618      	mov	r0, r3
 8012548:	3720      	adds	r7, #32
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}

0801254e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801254e:	b580      	push	{r7, lr}
 8012550:	b088      	sub	sp, #32
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
 8012556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801255c:	2306      	movs	r3, #6
 801255e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012560:	2340      	movs	r3, #64	; 0x40
 8012562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012564:	2300      	movs	r3, #0
 8012566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801256c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801256e:	f107 0308 	add.w	r3, r7, #8
 8012572:	4619      	mov	r1, r3
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff fe03 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801257a:	f241 3288 	movw	r2, #5000	; 0x1388
 801257e:	2106      	movs	r1, #6
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 f8cf 	bl	8012724 <SDMMC_GetCmdResp1>
 8012586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012588:	69fb      	ldr	r3, [r7, #28]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3720      	adds	r7, #32
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b088      	sub	sp, #32
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801259a:	2300      	movs	r3, #0
 801259c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801259e:	2333      	movs	r3, #51	; 0x33
 80125a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80125a2:	2340      	movs	r3, #64	; 0x40
 80125a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125a6:	2300      	movs	r3, #0
 80125a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80125b0:	f107 0308 	add.w	r3, r7, #8
 80125b4:	4619      	mov	r1, r3
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7ff fde2 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80125bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80125c0:	2133      	movs	r1, #51	; 0x33
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 f8ae 	bl	8012724 <SDMMC_GetCmdResp1>
 80125c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125ca:	69fb      	ldr	r3, [r7, #28]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3720      	adds	r7, #32
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b088      	sub	sp, #32
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80125dc:	2300      	movs	r3, #0
 80125de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80125e0:	2302      	movs	r3, #2
 80125e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80125e4:	23c0      	movs	r3, #192	; 0xc0
 80125e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125e8:	2300      	movs	r3, #0
 80125ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80125f2:	f107 0308 	add.w	r3, r7, #8
 80125f6:	4619      	mov	r1, r3
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f7ff fdc1 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f97c 	bl	80128fc <SDMMC_GetCmdResp2>
 8012604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012606:	69fb      	ldr	r3, [r7, #28]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3720      	adds	r7, #32
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b088      	sub	sp, #32
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801261e:	2309      	movs	r3, #9
 8012620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012622:	23c0      	movs	r3, #192	; 0xc0
 8012624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012626:	2300      	movs	r3, #0
 8012628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801262a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801262e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012630:	f107 0308 	add.w	r3, r7, #8
 8012634:	4619      	mov	r1, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f7ff fda2 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 f95d 	bl	80128fc <SDMMC_GetCmdResp2>
 8012642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012644:	69fb      	ldr	r3, [r7, #28]
}
 8012646:	4618      	mov	r0, r3
 8012648:	3720      	adds	r7, #32
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b088      	sub	sp, #32
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
 8012656:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012658:	2300      	movs	r3, #0
 801265a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801265c:	2303      	movs	r3, #3
 801265e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012660:	2340      	movs	r3, #64	; 0x40
 8012662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012664:	2300      	movs	r3, #0
 8012666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801266c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801266e:	f107 0308 	add.w	r3, r7, #8
 8012672:	4619      	mov	r1, r3
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7ff fd83 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801267a:	683a      	ldr	r2, [r7, #0]
 801267c:	2103      	movs	r1, #3
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f000 f9bc 	bl	80129fc <SDMMC_GetCmdResp6>
 8012684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012686:	69fb      	ldr	r3, [r7, #28]
}
 8012688:	4618      	mov	r0, r3
 801268a:	3720      	adds	r7, #32
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b088      	sub	sp, #32
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801269e:	230d      	movs	r3, #13
 80126a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80126a2:	2340      	movs	r3, #64	; 0x40
 80126a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80126a6:	2300      	movs	r3, #0
 80126a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80126aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80126b0:	f107 0308 	add.w	r3, r7, #8
 80126b4:	4619      	mov	r1, r3
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f7ff fd62 	bl	8012180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80126bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80126c0:	210d      	movs	r1, #13
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 f82e 	bl	8012724 <SDMMC_GetCmdResp1>
 80126c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126ca:	69fb      	ldr	r3, [r7, #28]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3720      	adds	r7, #32
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80126d4:	b490      	push	{r4, r7}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80126dc:	4b0f      	ldr	r3, [pc, #60]	; (801271c <SDMMC_GetCmdError+0x48>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a0f      	ldr	r2, [pc, #60]	; (8012720 <SDMMC_GetCmdError+0x4c>)
 80126e2:	fba2 2303 	umull	r2, r3, r2, r3
 80126e6:	0a5b      	lsrs	r3, r3, #9
 80126e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80126ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80126f0:	4623      	mov	r3, r4
 80126f2:	1e5c      	subs	r4, r3, #1
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d102      	bne.n	80126fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126fc:	e009      	b.n	8012712 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012706:	2b00      	cmp	r3, #0
 8012708:	d0f2      	beq.n	80126f0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	22c5      	movs	r2, #197	; 0xc5
 801270e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012710:	2300      	movs	r3, #0
}
 8012712:	4618      	mov	r0, r3
 8012714:	3708      	adds	r7, #8
 8012716:	46bd      	mov	sp, r7
 8012718:	bc90      	pop	{r4, r7}
 801271a:	4770      	bx	lr
 801271c:	20000000 	.word	0x20000000
 8012720:	10624dd3 	.word	0x10624dd3

08012724 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012724:	b590      	push	{r4, r7, lr}
 8012726:	b087      	sub	sp, #28
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	460b      	mov	r3, r1
 801272e:	607a      	str	r2, [r7, #4]
 8012730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012732:	4b6f      	ldr	r3, [pc, #444]	; (80128f0 <SDMMC_GetCmdResp1+0x1cc>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a6f      	ldr	r2, [pc, #444]	; (80128f4 <SDMMC_GetCmdResp1+0x1d0>)
 8012738:	fba2 2303 	umull	r2, r3, r2, r3
 801273c:	0a5b      	lsrs	r3, r3, #9
 801273e:	687a      	ldr	r2, [r7, #4]
 8012740:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012744:	4623      	mov	r3, r4
 8012746:	1e5c      	subs	r4, r3, #1
 8012748:	2b00      	cmp	r3, #0
 801274a:	d102      	bne.n	8012752 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801274c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012750:	e0c9      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012756:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801275e:	2b00      	cmp	r3, #0
 8012760:	d0f0      	beq.n	8012744 <SDMMC_GetCmdResp1+0x20>
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012768:	2b00      	cmp	r3, #0
 801276a:	d1eb      	bne.n	8012744 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012770:	f003 0304 	and.w	r3, r3, #4
 8012774:	2b00      	cmp	r3, #0
 8012776:	d004      	beq.n	8012782 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2204      	movs	r2, #4
 801277c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801277e:	2304      	movs	r3, #4
 8012780:	e0b1      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012786:	f003 0301 	and.w	r3, r3, #1
 801278a:	2b00      	cmp	r3, #0
 801278c:	d004      	beq.n	8012798 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2201      	movs	r2, #1
 8012792:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012794:	2301      	movs	r3, #1
 8012796:	e0a6      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	22c5      	movs	r2, #197	; 0xc5
 801279c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f7ff fd18 	bl	80121d4 <SDIO_GetCommandResponse>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
 80127a8:	7afb      	ldrb	r3, [r7, #11]
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d001      	beq.n	80127b2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127ae:	2301      	movs	r3, #1
 80127b0:	e099      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80127b2:	2100      	movs	r1, #0
 80127b4:	68f8      	ldr	r0, [r7, #12]
 80127b6:	f7ff fd1a 	bl	80121ee <SDIO_GetResponse>
 80127ba:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80127bc:	693a      	ldr	r2, [r7, #16]
 80127be:	4b4e      	ldr	r3, [pc, #312]	; (80128f8 <SDMMC_GetCmdResp1+0x1d4>)
 80127c0:	4013      	ands	r3, r2
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d101      	bne.n	80127ca <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80127c6:	2300      	movs	r3, #0
 80127c8:	e08d      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	da02      	bge.n	80127d6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80127d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80127d4:	e087      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80127e0:	2340      	movs	r3, #64	; 0x40
 80127e2:	e080      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d001      	beq.n	80127f2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80127ee:	2380      	movs	r3, #128	; 0x80
 80127f0:	e079      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d002      	beq.n	8012802 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80127fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012800:	e071      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801280c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012810:	e069      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012818:	2b00      	cmp	r3, #0
 801281a:	d002      	beq.n	8012822 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801281c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012820:	e061      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012828:	2b00      	cmp	r3, #0
 801282a:	d002      	beq.n	8012832 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801282c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012830:	e059      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012840:	e051      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012848:	2b00      	cmp	r3, #0
 801284a:	d002      	beq.n	8012852 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801284c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012850:	e049      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012858:	2b00      	cmp	r3, #0
 801285a:	d002      	beq.n	8012862 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801285c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012860:	e041      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012868:	2b00      	cmp	r3, #0
 801286a:	d002      	beq.n	8012872 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801286c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012870:	e039      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012878:	2b00      	cmp	r3, #0
 801287a:	d002      	beq.n	8012882 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801287c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012880:	e031      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012888:	2b00      	cmp	r3, #0
 801288a:	d002      	beq.n	8012892 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801288c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012890:	e029      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801289c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80128a0:	e021      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d002      	beq.n	80128b2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80128ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80128b0:	e019      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80128bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80128c0:	e011      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d002      	beq.n	80128d2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80128cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80128d0:	e009      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	f003 0308 	and.w	r3, r3, #8
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d002      	beq.n	80128e2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80128dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80128e0:	e001      	b.n	80128e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80128e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	371c      	adds	r7, #28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd90      	pop	{r4, r7, pc}
 80128ee:	bf00      	nop
 80128f0:	20000000 	.word	0x20000000
 80128f4:	10624dd3 	.word	0x10624dd3
 80128f8:	fdffe008 	.word	0xfdffe008

080128fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80128fc:	b490      	push	{r4, r7}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012904:	4b1e      	ldr	r3, [pc, #120]	; (8012980 <SDMMC_GetCmdResp2+0x84>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	4a1e      	ldr	r2, [pc, #120]	; (8012984 <SDMMC_GetCmdResp2+0x88>)
 801290a:	fba2 2303 	umull	r2, r3, r2, r3
 801290e:	0a5b      	lsrs	r3, r3, #9
 8012910:	f241 3288 	movw	r2, #5000	; 0x1388
 8012914:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012918:	4623      	mov	r3, r4
 801291a:	1e5c      	subs	r4, r3, #1
 801291c:	2b00      	cmp	r3, #0
 801291e:	d102      	bne.n	8012926 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012924:	e026      	b.n	8012974 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801292a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012932:	2b00      	cmp	r3, #0
 8012934:	d0f0      	beq.n	8012918 <SDMMC_GetCmdResp2+0x1c>
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801293c:	2b00      	cmp	r3, #0
 801293e:	d1eb      	bne.n	8012918 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012944:	f003 0304 	and.w	r3, r3, #4
 8012948:	2b00      	cmp	r3, #0
 801294a:	d004      	beq.n	8012956 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2204      	movs	r2, #4
 8012950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012952:	2304      	movs	r3, #4
 8012954:	e00e      	b.n	8012974 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801295a:	f003 0301 	and.w	r3, r3, #1
 801295e:	2b00      	cmp	r3, #0
 8012960:	d004      	beq.n	801296c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2201      	movs	r2, #1
 8012966:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012968:	2301      	movs	r3, #1
 801296a:	e003      	b.n	8012974 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	22c5      	movs	r2, #197	; 0xc5
 8012970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012972:	2300      	movs	r3, #0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bc90      	pop	{r4, r7}
 801297c:	4770      	bx	lr
 801297e:	bf00      	nop
 8012980:	20000000 	.word	0x20000000
 8012984:	10624dd3 	.word	0x10624dd3

08012988 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8012988:	b490      	push	{r4, r7}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012990:	4b18      	ldr	r3, [pc, #96]	; (80129f4 <SDMMC_GetCmdResp3+0x6c>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4a18      	ldr	r2, [pc, #96]	; (80129f8 <SDMMC_GetCmdResp3+0x70>)
 8012996:	fba2 2303 	umull	r2, r3, r2, r3
 801299a:	0a5b      	lsrs	r3, r3, #9
 801299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80129a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80129a4:	4623      	mov	r3, r4
 80129a6:	1e5c      	subs	r4, r3, #1
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d102      	bne.n	80129b2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129b0:	e01b      	b.n	80129ea <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d0f0      	beq.n	80129a4 <SDMMC_GetCmdResp3+0x1c>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1eb      	bne.n	80129a4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129d0:	f003 0304 	and.w	r3, r3, #4
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d004      	beq.n	80129e2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2204      	movs	r2, #4
 80129dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129de:	2304      	movs	r3, #4
 80129e0:	e003      	b.n	80129ea <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	22c5      	movs	r2, #197	; 0xc5
 80129e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bc90      	pop	{r4, r7}
 80129f2:	4770      	bx	lr
 80129f4:	20000000 	.word	0x20000000
 80129f8:	10624dd3 	.word	0x10624dd3

080129fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80129fc:	b590      	push	{r4, r7, lr}
 80129fe:	b087      	sub	sp, #28
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	460b      	mov	r3, r1
 8012a06:	607a      	str	r2, [r7, #4]
 8012a08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012a0a:	4b34      	ldr	r3, [pc, #208]	; (8012adc <SDMMC_GetCmdResp6+0xe0>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	4a34      	ldr	r2, [pc, #208]	; (8012ae0 <SDMMC_GetCmdResp6+0xe4>)
 8012a10:	fba2 2303 	umull	r2, r3, r2, r3
 8012a14:	0a5b      	lsrs	r3, r3, #9
 8012a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a1a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012a1e:	4623      	mov	r3, r4
 8012a20:	1e5c      	subs	r4, r3, #1
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d102      	bne.n	8012a2c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a2a:	e052      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a30:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d0f0      	beq.n	8012a1e <SDMMC_GetCmdResp6+0x22>
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1eb      	bne.n	8012a1e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a4a:	f003 0304 	and.w	r3, r3, #4
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d004      	beq.n	8012a5c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2204      	movs	r2, #4
 8012a56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a58:	2304      	movs	r3, #4
 8012a5a:	e03a      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a60:	f003 0301 	and.w	r3, r3, #1
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d004      	beq.n	8012a72 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e02f      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	f7ff fbae 	bl	80121d4 <SDIO_GetCommandResponse>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	7afb      	ldrb	r3, [r7, #11]
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d001      	beq.n	8012a86 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e025      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	22c5      	movs	r2, #197	; 0xc5
 8012a8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f7ff fbad 	bl	80121ee <SDIO_GetResponse>
 8012a94:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d106      	bne.n	8012aae <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	0c1b      	lsrs	r3, r3, #16
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	e011      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d002      	beq.n	8012abe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012abc:	e009      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d002      	beq.n	8012ace <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012acc:	e001      	b.n	8012ad2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	371c      	adds	r7, #28
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd90      	pop	{r4, r7, pc}
 8012ada:	bf00      	nop
 8012adc:	20000000 	.word	0x20000000
 8012ae0:	10624dd3 	.word	0x10624dd3

08012ae4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012ae4:	b490      	push	{r4, r7}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012aec:	4b21      	ldr	r3, [pc, #132]	; (8012b74 <SDMMC_GetCmdResp7+0x90>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4a21      	ldr	r2, [pc, #132]	; (8012b78 <SDMMC_GetCmdResp7+0x94>)
 8012af2:	fba2 2303 	umull	r2, r3, r2, r3
 8012af6:	0a5b      	lsrs	r3, r3, #9
 8012af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012afc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012b00:	4623      	mov	r3, r4
 8012b02:	1e5c      	subs	r4, r3, #1
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d102      	bne.n	8012b0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b0c:	e02c      	b.n	8012b68 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d0f0      	beq.n	8012b00 <SDMMC_GetCmdResp7+0x1c>
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d1eb      	bne.n	8012b00 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b2c:	f003 0304 	and.w	r3, r3, #4
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d004      	beq.n	8012b3e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2204      	movs	r2, #4
 8012b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b3a:	2304      	movs	r3, #4
 8012b3c:	e014      	b.n	8012b68 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b42:	f003 0301 	and.w	r3, r3, #1
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d004      	beq.n	8012b54 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b50:	2301      	movs	r3, #1
 8012b52:	e009      	b.n	8012b68 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d002      	beq.n	8012b66 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2240      	movs	r2, #64	; 0x40
 8012b64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012b66:	2300      	movs	r3, #0
  
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3710      	adds	r7, #16
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bc90      	pop	{r4, r7}
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	20000000 	.word	0x20000000
 8012b78:	10624dd3 	.word	0x10624dd3

08012b7c <main>:




int main(void)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	af00      	add	r7, sp, #0
  hwInit();
 8012b80:	f7f5 f87a 	bl	8007c78 <hwInit>
  apInit();
 8012b84:	f7ee fa50 	bl	8001028 <apInit>

  apMain();
 8012b88:	f7ee fa57 	bl	800103a <apMain>

  return 0;
 8012b8c:	2300      	movs	r3, #0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	bd80      	pop	{r7, pc}
	...

08012b94 <__errno>:
 8012b94:	4b01      	ldr	r3, [pc, #4]	; (8012b9c <__errno+0x8>)
 8012b96:	6818      	ldr	r0, [r3, #0]
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop
 8012b9c:	200000c8 	.word	0x200000c8

08012ba0 <__libc_init_array>:
 8012ba0:	b570      	push	{r4, r5, r6, lr}
 8012ba2:	4d0d      	ldr	r5, [pc, #52]	; (8012bd8 <__libc_init_array+0x38>)
 8012ba4:	4c0d      	ldr	r4, [pc, #52]	; (8012bdc <__libc_init_array+0x3c>)
 8012ba6:	1b64      	subs	r4, r4, r5
 8012ba8:	10a4      	asrs	r4, r4, #2
 8012baa:	2600      	movs	r6, #0
 8012bac:	42a6      	cmp	r6, r4
 8012bae:	d109      	bne.n	8012bc4 <__libc_init_array+0x24>
 8012bb0:	4d0b      	ldr	r5, [pc, #44]	; (8012be0 <__libc_init_array+0x40>)
 8012bb2:	4c0c      	ldr	r4, [pc, #48]	; (8012be4 <__libc_init_array+0x44>)
 8012bb4:	f004 fb1c 	bl	80171f0 <_init>
 8012bb8:	1b64      	subs	r4, r4, r5
 8012bba:	10a4      	asrs	r4, r4, #2
 8012bbc:	2600      	movs	r6, #0
 8012bbe:	42a6      	cmp	r6, r4
 8012bc0:	d105      	bne.n	8012bce <__libc_init_array+0x2e>
 8012bc2:	bd70      	pop	{r4, r5, r6, pc}
 8012bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bc8:	4798      	blx	r3
 8012bca:	3601      	adds	r6, #1
 8012bcc:	e7ee      	b.n	8012bac <__libc_init_array+0xc>
 8012bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bd2:	4798      	blx	r3
 8012bd4:	3601      	adds	r6, #1
 8012bd6:	e7f2      	b.n	8012bbe <__libc_init_array+0x1e>
 8012bd8:	08025a5c 	.word	0x08025a5c
 8012bdc:	08025a5c 	.word	0x08025a5c
 8012be0:	08025a5c 	.word	0x08025a5c
 8012be4:	08025a60 	.word	0x08025a60

08012be8 <malloc>:
 8012be8:	4b02      	ldr	r3, [pc, #8]	; (8012bf4 <malloc+0xc>)
 8012bea:	4601      	mov	r1, r0
 8012bec:	6818      	ldr	r0, [r3, #0]
 8012bee:	f000 b88d 	b.w	8012d0c <_malloc_r>
 8012bf2:	bf00      	nop
 8012bf4:	200000c8 	.word	0x200000c8

08012bf8 <free>:
 8012bf8:	4b02      	ldr	r3, [pc, #8]	; (8012c04 <free+0xc>)
 8012bfa:	4601      	mov	r1, r0
 8012bfc:	6818      	ldr	r0, [r3, #0]
 8012bfe:	f000 b819 	b.w	8012c34 <_free_r>
 8012c02:	bf00      	nop
 8012c04:	200000c8 	.word	0x200000c8

08012c08 <memcpy>:
 8012c08:	440a      	add	r2, r1
 8012c0a:	4291      	cmp	r1, r2
 8012c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c10:	d100      	bne.n	8012c14 <memcpy+0xc>
 8012c12:	4770      	bx	lr
 8012c14:	b510      	push	{r4, lr}
 8012c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c1e:	4291      	cmp	r1, r2
 8012c20:	d1f9      	bne.n	8012c16 <memcpy+0xe>
 8012c22:	bd10      	pop	{r4, pc}

08012c24 <memset>:
 8012c24:	4402      	add	r2, r0
 8012c26:	4603      	mov	r3, r0
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d100      	bne.n	8012c2e <memset+0xa>
 8012c2c:	4770      	bx	lr
 8012c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8012c32:	e7f9      	b.n	8012c28 <memset+0x4>

08012c34 <_free_r>:
 8012c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c36:	2900      	cmp	r1, #0
 8012c38:	d044      	beq.n	8012cc4 <_free_r+0x90>
 8012c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c3e:	9001      	str	r0, [sp, #4]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f1a1 0404 	sub.w	r4, r1, #4
 8012c46:	bfb8      	it	lt
 8012c48:	18e4      	addlt	r4, r4, r3
 8012c4a:	f003 f993 	bl	8015f74 <__malloc_lock>
 8012c4e:	4a1e      	ldr	r2, [pc, #120]	; (8012cc8 <_free_r+0x94>)
 8012c50:	9801      	ldr	r0, [sp, #4]
 8012c52:	6813      	ldr	r3, [r2, #0]
 8012c54:	b933      	cbnz	r3, 8012c64 <_free_r+0x30>
 8012c56:	6063      	str	r3, [r4, #4]
 8012c58:	6014      	str	r4, [r2, #0]
 8012c5a:	b003      	add	sp, #12
 8012c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c60:	f003 b98e 	b.w	8015f80 <__malloc_unlock>
 8012c64:	42a3      	cmp	r3, r4
 8012c66:	d908      	bls.n	8012c7a <_free_r+0x46>
 8012c68:	6825      	ldr	r5, [r4, #0]
 8012c6a:	1961      	adds	r1, r4, r5
 8012c6c:	428b      	cmp	r3, r1
 8012c6e:	bf01      	itttt	eq
 8012c70:	6819      	ldreq	r1, [r3, #0]
 8012c72:	685b      	ldreq	r3, [r3, #4]
 8012c74:	1949      	addeq	r1, r1, r5
 8012c76:	6021      	streq	r1, [r4, #0]
 8012c78:	e7ed      	b.n	8012c56 <_free_r+0x22>
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	b10b      	cbz	r3, 8012c84 <_free_r+0x50>
 8012c80:	42a3      	cmp	r3, r4
 8012c82:	d9fa      	bls.n	8012c7a <_free_r+0x46>
 8012c84:	6811      	ldr	r1, [r2, #0]
 8012c86:	1855      	adds	r5, r2, r1
 8012c88:	42a5      	cmp	r5, r4
 8012c8a:	d10b      	bne.n	8012ca4 <_free_r+0x70>
 8012c8c:	6824      	ldr	r4, [r4, #0]
 8012c8e:	4421      	add	r1, r4
 8012c90:	1854      	adds	r4, r2, r1
 8012c92:	42a3      	cmp	r3, r4
 8012c94:	6011      	str	r1, [r2, #0]
 8012c96:	d1e0      	bne.n	8012c5a <_free_r+0x26>
 8012c98:	681c      	ldr	r4, [r3, #0]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	6053      	str	r3, [r2, #4]
 8012c9e:	4421      	add	r1, r4
 8012ca0:	6011      	str	r1, [r2, #0]
 8012ca2:	e7da      	b.n	8012c5a <_free_r+0x26>
 8012ca4:	d902      	bls.n	8012cac <_free_r+0x78>
 8012ca6:	230c      	movs	r3, #12
 8012ca8:	6003      	str	r3, [r0, #0]
 8012caa:	e7d6      	b.n	8012c5a <_free_r+0x26>
 8012cac:	6825      	ldr	r5, [r4, #0]
 8012cae:	1961      	adds	r1, r4, r5
 8012cb0:	428b      	cmp	r3, r1
 8012cb2:	bf04      	itt	eq
 8012cb4:	6819      	ldreq	r1, [r3, #0]
 8012cb6:	685b      	ldreq	r3, [r3, #4]
 8012cb8:	6063      	str	r3, [r4, #4]
 8012cba:	bf04      	itt	eq
 8012cbc:	1949      	addeq	r1, r1, r5
 8012cbe:	6021      	streq	r1, [r4, #0]
 8012cc0:	6054      	str	r4, [r2, #4]
 8012cc2:	e7ca      	b.n	8012c5a <_free_r+0x26>
 8012cc4:	b003      	add	sp, #12
 8012cc6:	bd30      	pop	{r4, r5, pc}
 8012cc8:	2000d060 	.word	0x2000d060

08012ccc <sbrk_aligned>:
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	4e0e      	ldr	r6, [pc, #56]	; (8012d08 <sbrk_aligned+0x3c>)
 8012cd0:	460c      	mov	r4, r1
 8012cd2:	6831      	ldr	r1, [r6, #0]
 8012cd4:	4605      	mov	r5, r0
 8012cd6:	b911      	cbnz	r1, 8012cde <sbrk_aligned+0x12>
 8012cd8:	f000 fcf6 	bl	80136c8 <_sbrk_r>
 8012cdc:	6030      	str	r0, [r6, #0]
 8012cde:	4621      	mov	r1, r4
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	f000 fcf1 	bl	80136c8 <_sbrk_r>
 8012ce6:	1c43      	adds	r3, r0, #1
 8012ce8:	d00a      	beq.n	8012d00 <sbrk_aligned+0x34>
 8012cea:	1cc4      	adds	r4, r0, #3
 8012cec:	f024 0403 	bic.w	r4, r4, #3
 8012cf0:	42a0      	cmp	r0, r4
 8012cf2:	d007      	beq.n	8012d04 <sbrk_aligned+0x38>
 8012cf4:	1a21      	subs	r1, r4, r0
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 fce6 	bl	80136c8 <_sbrk_r>
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d101      	bne.n	8012d04 <sbrk_aligned+0x38>
 8012d00:	f04f 34ff 	mov.w	r4, #4294967295
 8012d04:	4620      	mov	r0, r4
 8012d06:	bd70      	pop	{r4, r5, r6, pc}
 8012d08:	2000d064 	.word	0x2000d064

08012d0c <_malloc_r>:
 8012d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d10:	1ccd      	adds	r5, r1, #3
 8012d12:	f025 0503 	bic.w	r5, r5, #3
 8012d16:	3508      	adds	r5, #8
 8012d18:	2d0c      	cmp	r5, #12
 8012d1a:	bf38      	it	cc
 8012d1c:	250c      	movcc	r5, #12
 8012d1e:	2d00      	cmp	r5, #0
 8012d20:	4607      	mov	r7, r0
 8012d22:	db01      	blt.n	8012d28 <_malloc_r+0x1c>
 8012d24:	42a9      	cmp	r1, r5
 8012d26:	d905      	bls.n	8012d34 <_malloc_r+0x28>
 8012d28:	230c      	movs	r3, #12
 8012d2a:	603b      	str	r3, [r7, #0]
 8012d2c:	2600      	movs	r6, #0
 8012d2e:	4630      	mov	r0, r6
 8012d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d34:	4e2e      	ldr	r6, [pc, #184]	; (8012df0 <_malloc_r+0xe4>)
 8012d36:	f003 f91d 	bl	8015f74 <__malloc_lock>
 8012d3a:	6833      	ldr	r3, [r6, #0]
 8012d3c:	461c      	mov	r4, r3
 8012d3e:	bb34      	cbnz	r4, 8012d8e <_malloc_r+0x82>
 8012d40:	4629      	mov	r1, r5
 8012d42:	4638      	mov	r0, r7
 8012d44:	f7ff ffc2 	bl	8012ccc <sbrk_aligned>
 8012d48:	1c43      	adds	r3, r0, #1
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	d14d      	bne.n	8012dea <_malloc_r+0xde>
 8012d4e:	6834      	ldr	r4, [r6, #0]
 8012d50:	4626      	mov	r6, r4
 8012d52:	2e00      	cmp	r6, #0
 8012d54:	d140      	bne.n	8012dd8 <_malloc_r+0xcc>
 8012d56:	6823      	ldr	r3, [r4, #0]
 8012d58:	4631      	mov	r1, r6
 8012d5a:	4638      	mov	r0, r7
 8012d5c:	eb04 0803 	add.w	r8, r4, r3
 8012d60:	f000 fcb2 	bl	80136c8 <_sbrk_r>
 8012d64:	4580      	cmp	r8, r0
 8012d66:	d13a      	bne.n	8012dde <_malloc_r+0xd2>
 8012d68:	6821      	ldr	r1, [r4, #0]
 8012d6a:	3503      	adds	r5, #3
 8012d6c:	1a6d      	subs	r5, r5, r1
 8012d6e:	f025 0503 	bic.w	r5, r5, #3
 8012d72:	3508      	adds	r5, #8
 8012d74:	2d0c      	cmp	r5, #12
 8012d76:	bf38      	it	cc
 8012d78:	250c      	movcc	r5, #12
 8012d7a:	4629      	mov	r1, r5
 8012d7c:	4638      	mov	r0, r7
 8012d7e:	f7ff ffa5 	bl	8012ccc <sbrk_aligned>
 8012d82:	3001      	adds	r0, #1
 8012d84:	d02b      	beq.n	8012dde <_malloc_r+0xd2>
 8012d86:	6823      	ldr	r3, [r4, #0]
 8012d88:	442b      	add	r3, r5
 8012d8a:	6023      	str	r3, [r4, #0]
 8012d8c:	e00e      	b.n	8012dac <_malloc_r+0xa0>
 8012d8e:	6822      	ldr	r2, [r4, #0]
 8012d90:	1b52      	subs	r2, r2, r5
 8012d92:	d41e      	bmi.n	8012dd2 <_malloc_r+0xc6>
 8012d94:	2a0b      	cmp	r2, #11
 8012d96:	d916      	bls.n	8012dc6 <_malloc_r+0xba>
 8012d98:	1961      	adds	r1, r4, r5
 8012d9a:	42a3      	cmp	r3, r4
 8012d9c:	6025      	str	r5, [r4, #0]
 8012d9e:	bf18      	it	ne
 8012da0:	6059      	strne	r1, [r3, #4]
 8012da2:	6863      	ldr	r3, [r4, #4]
 8012da4:	bf08      	it	eq
 8012da6:	6031      	streq	r1, [r6, #0]
 8012da8:	5162      	str	r2, [r4, r5]
 8012daa:	604b      	str	r3, [r1, #4]
 8012dac:	4638      	mov	r0, r7
 8012dae:	f104 060b 	add.w	r6, r4, #11
 8012db2:	f003 f8e5 	bl	8015f80 <__malloc_unlock>
 8012db6:	f026 0607 	bic.w	r6, r6, #7
 8012dba:	1d23      	adds	r3, r4, #4
 8012dbc:	1af2      	subs	r2, r6, r3
 8012dbe:	d0b6      	beq.n	8012d2e <_malloc_r+0x22>
 8012dc0:	1b9b      	subs	r3, r3, r6
 8012dc2:	50a3      	str	r3, [r4, r2]
 8012dc4:	e7b3      	b.n	8012d2e <_malloc_r+0x22>
 8012dc6:	6862      	ldr	r2, [r4, #4]
 8012dc8:	42a3      	cmp	r3, r4
 8012dca:	bf0c      	ite	eq
 8012dcc:	6032      	streq	r2, [r6, #0]
 8012dce:	605a      	strne	r2, [r3, #4]
 8012dd0:	e7ec      	b.n	8012dac <_malloc_r+0xa0>
 8012dd2:	4623      	mov	r3, r4
 8012dd4:	6864      	ldr	r4, [r4, #4]
 8012dd6:	e7b2      	b.n	8012d3e <_malloc_r+0x32>
 8012dd8:	4634      	mov	r4, r6
 8012dda:	6876      	ldr	r6, [r6, #4]
 8012ddc:	e7b9      	b.n	8012d52 <_malloc_r+0x46>
 8012dde:	230c      	movs	r3, #12
 8012de0:	603b      	str	r3, [r7, #0]
 8012de2:	4638      	mov	r0, r7
 8012de4:	f003 f8cc 	bl	8015f80 <__malloc_unlock>
 8012de8:	e7a1      	b.n	8012d2e <_malloc_r+0x22>
 8012dea:	6025      	str	r5, [r4, #0]
 8012dec:	e7de      	b.n	8012dac <_malloc_r+0xa0>
 8012dee:	bf00      	nop
 8012df0:	2000d060 	.word	0x2000d060

08012df4 <__cvt>:
 8012df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012df8:	ec55 4b10 	vmov	r4, r5, d0
 8012dfc:	2d00      	cmp	r5, #0
 8012dfe:	460e      	mov	r6, r1
 8012e00:	4619      	mov	r1, r3
 8012e02:	462b      	mov	r3, r5
 8012e04:	bfbb      	ittet	lt
 8012e06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012e0a:	461d      	movlt	r5, r3
 8012e0c:	2300      	movge	r3, #0
 8012e0e:	232d      	movlt	r3, #45	; 0x2d
 8012e10:	700b      	strb	r3, [r1, #0]
 8012e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012e18:	4691      	mov	r9, r2
 8012e1a:	f023 0820 	bic.w	r8, r3, #32
 8012e1e:	bfbc      	itt	lt
 8012e20:	4622      	movlt	r2, r4
 8012e22:	4614      	movlt	r4, r2
 8012e24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e28:	d005      	beq.n	8012e36 <__cvt+0x42>
 8012e2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012e2e:	d100      	bne.n	8012e32 <__cvt+0x3e>
 8012e30:	3601      	adds	r6, #1
 8012e32:	2102      	movs	r1, #2
 8012e34:	e000      	b.n	8012e38 <__cvt+0x44>
 8012e36:	2103      	movs	r1, #3
 8012e38:	ab03      	add	r3, sp, #12
 8012e3a:	9301      	str	r3, [sp, #4]
 8012e3c:	ab02      	add	r3, sp, #8
 8012e3e:	9300      	str	r3, [sp, #0]
 8012e40:	ec45 4b10 	vmov	d0, r4, r5
 8012e44:	4653      	mov	r3, sl
 8012e46:	4632      	mov	r2, r6
 8012e48:	f001 fd02 	bl	8014850 <_dtoa_r>
 8012e4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012e50:	4607      	mov	r7, r0
 8012e52:	d102      	bne.n	8012e5a <__cvt+0x66>
 8012e54:	f019 0f01 	tst.w	r9, #1
 8012e58:	d022      	beq.n	8012ea0 <__cvt+0xac>
 8012e5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e5e:	eb07 0906 	add.w	r9, r7, r6
 8012e62:	d110      	bne.n	8012e86 <__cvt+0x92>
 8012e64:	783b      	ldrb	r3, [r7, #0]
 8012e66:	2b30      	cmp	r3, #48	; 0x30
 8012e68:	d10a      	bne.n	8012e80 <__cvt+0x8c>
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	4620      	mov	r0, r4
 8012e70:	4629      	mov	r1, r5
 8012e72:	f7ed fe41 	bl	8000af8 <__aeabi_dcmpeq>
 8012e76:	b918      	cbnz	r0, 8012e80 <__cvt+0x8c>
 8012e78:	f1c6 0601 	rsb	r6, r6, #1
 8012e7c:	f8ca 6000 	str.w	r6, [sl]
 8012e80:	f8da 3000 	ldr.w	r3, [sl]
 8012e84:	4499      	add	r9, r3
 8012e86:	2200      	movs	r2, #0
 8012e88:	2300      	movs	r3, #0
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	f7ed fe33 	bl	8000af8 <__aeabi_dcmpeq>
 8012e92:	b108      	cbz	r0, 8012e98 <__cvt+0xa4>
 8012e94:	f8cd 900c 	str.w	r9, [sp, #12]
 8012e98:	2230      	movs	r2, #48	; 0x30
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	454b      	cmp	r3, r9
 8012e9e:	d307      	bcc.n	8012eb0 <__cvt+0xbc>
 8012ea0:	9b03      	ldr	r3, [sp, #12]
 8012ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ea4:	1bdb      	subs	r3, r3, r7
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	6013      	str	r3, [r2, #0]
 8012eaa:	b004      	add	sp, #16
 8012eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb0:	1c59      	adds	r1, r3, #1
 8012eb2:	9103      	str	r1, [sp, #12]
 8012eb4:	701a      	strb	r2, [r3, #0]
 8012eb6:	e7f0      	b.n	8012e9a <__cvt+0xa6>

08012eb8 <__exponent>:
 8012eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2900      	cmp	r1, #0
 8012ebe:	bfb8      	it	lt
 8012ec0:	4249      	neglt	r1, r1
 8012ec2:	f803 2b02 	strb.w	r2, [r3], #2
 8012ec6:	bfb4      	ite	lt
 8012ec8:	222d      	movlt	r2, #45	; 0x2d
 8012eca:	222b      	movge	r2, #43	; 0x2b
 8012ecc:	2909      	cmp	r1, #9
 8012ece:	7042      	strb	r2, [r0, #1]
 8012ed0:	dd2a      	ble.n	8012f28 <__exponent+0x70>
 8012ed2:	f10d 0407 	add.w	r4, sp, #7
 8012ed6:	46a4      	mov	ip, r4
 8012ed8:	270a      	movs	r7, #10
 8012eda:	46a6      	mov	lr, r4
 8012edc:	460a      	mov	r2, r1
 8012ede:	fb91 f6f7 	sdiv	r6, r1, r7
 8012ee2:	fb07 1516 	mls	r5, r7, r6, r1
 8012ee6:	3530      	adds	r5, #48	; 0x30
 8012ee8:	2a63      	cmp	r2, #99	; 0x63
 8012eea:	f104 34ff 	add.w	r4, r4, #4294967295
 8012eee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012ef2:	4631      	mov	r1, r6
 8012ef4:	dcf1      	bgt.n	8012eda <__exponent+0x22>
 8012ef6:	3130      	adds	r1, #48	; 0x30
 8012ef8:	f1ae 0502 	sub.w	r5, lr, #2
 8012efc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012f00:	1c44      	adds	r4, r0, #1
 8012f02:	4629      	mov	r1, r5
 8012f04:	4561      	cmp	r1, ip
 8012f06:	d30a      	bcc.n	8012f1e <__exponent+0x66>
 8012f08:	f10d 0209 	add.w	r2, sp, #9
 8012f0c:	eba2 020e 	sub.w	r2, r2, lr
 8012f10:	4565      	cmp	r5, ip
 8012f12:	bf88      	it	hi
 8012f14:	2200      	movhi	r2, #0
 8012f16:	4413      	add	r3, r2
 8012f18:	1a18      	subs	r0, r3, r0
 8012f1a:	b003      	add	sp, #12
 8012f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012f26:	e7ed      	b.n	8012f04 <__exponent+0x4c>
 8012f28:	2330      	movs	r3, #48	; 0x30
 8012f2a:	3130      	adds	r1, #48	; 0x30
 8012f2c:	7083      	strb	r3, [r0, #2]
 8012f2e:	70c1      	strb	r1, [r0, #3]
 8012f30:	1d03      	adds	r3, r0, #4
 8012f32:	e7f1      	b.n	8012f18 <__exponent+0x60>

08012f34 <_printf_float>:
 8012f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f38:	ed2d 8b02 	vpush	{d8}
 8012f3c:	b08d      	sub	sp, #52	; 0x34
 8012f3e:	460c      	mov	r4, r1
 8012f40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012f44:	4616      	mov	r6, r2
 8012f46:	461f      	mov	r7, r3
 8012f48:	4605      	mov	r5, r0
 8012f4a:	f002 ff95 	bl	8015e78 <_localeconv_r>
 8012f4e:	f8d0 a000 	ldr.w	sl, [r0]
 8012f52:	4650      	mov	r0, sl
 8012f54:	f7ed f94e 	bl	80001f4 <strlen>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f5c:	6823      	ldr	r3, [r4, #0]
 8012f5e:	9305      	str	r3, [sp, #20]
 8012f60:	f8d8 3000 	ldr.w	r3, [r8]
 8012f64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012f68:	3307      	adds	r3, #7
 8012f6a:	f023 0307 	bic.w	r3, r3, #7
 8012f6e:	f103 0208 	add.w	r2, r3, #8
 8012f72:	f8c8 2000 	str.w	r2, [r8]
 8012f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012f7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012f82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012f86:	9307      	str	r3, [sp, #28]
 8012f88:	f8cd 8018 	str.w	r8, [sp, #24]
 8012f8c:	ee08 0a10 	vmov	s16, r0
 8012f90:	4b9f      	ldr	r3, [pc, #636]	; (8013210 <_printf_float+0x2dc>)
 8012f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f96:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9a:	f7ed fddf 	bl	8000b5c <__aeabi_dcmpun>
 8012f9e:	bb88      	cbnz	r0, 8013004 <_printf_float+0xd0>
 8012fa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fa4:	4b9a      	ldr	r3, [pc, #616]	; (8013210 <_printf_float+0x2dc>)
 8012fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8012faa:	f7ed fdb9 	bl	8000b20 <__aeabi_dcmple>
 8012fae:	bb48      	cbnz	r0, 8013004 <_printf_float+0xd0>
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	4640      	mov	r0, r8
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	f7ed fda8 	bl	8000b0c <__aeabi_dcmplt>
 8012fbc:	b110      	cbz	r0, 8012fc4 <_printf_float+0x90>
 8012fbe:	232d      	movs	r3, #45	; 0x2d
 8012fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fc4:	4b93      	ldr	r3, [pc, #588]	; (8013214 <_printf_float+0x2e0>)
 8012fc6:	4894      	ldr	r0, [pc, #592]	; (8013218 <_printf_float+0x2e4>)
 8012fc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012fcc:	bf94      	ite	ls
 8012fce:	4698      	movls	r8, r3
 8012fd0:	4680      	movhi	r8, r0
 8012fd2:	2303      	movs	r3, #3
 8012fd4:	6123      	str	r3, [r4, #16]
 8012fd6:	9b05      	ldr	r3, [sp, #20]
 8012fd8:	f023 0204 	bic.w	r2, r3, #4
 8012fdc:	6022      	str	r2, [r4, #0]
 8012fde:	f04f 0900 	mov.w	r9, #0
 8012fe2:	9700      	str	r7, [sp, #0]
 8012fe4:	4633      	mov	r3, r6
 8012fe6:	aa0b      	add	r2, sp, #44	; 0x2c
 8012fe8:	4621      	mov	r1, r4
 8012fea:	4628      	mov	r0, r5
 8012fec:	f000 f9d8 	bl	80133a0 <_printf_common>
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	f040 8090 	bne.w	8013116 <_printf_float+0x1e2>
 8012ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8012ffa:	b00d      	add	sp, #52	; 0x34
 8012ffc:	ecbd 8b02 	vpop	{d8}
 8013000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013004:	4642      	mov	r2, r8
 8013006:	464b      	mov	r3, r9
 8013008:	4640      	mov	r0, r8
 801300a:	4649      	mov	r1, r9
 801300c:	f7ed fda6 	bl	8000b5c <__aeabi_dcmpun>
 8013010:	b140      	cbz	r0, 8013024 <_printf_float+0xf0>
 8013012:	464b      	mov	r3, r9
 8013014:	2b00      	cmp	r3, #0
 8013016:	bfbc      	itt	lt
 8013018:	232d      	movlt	r3, #45	; 0x2d
 801301a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801301e:	487f      	ldr	r0, [pc, #508]	; (801321c <_printf_float+0x2e8>)
 8013020:	4b7f      	ldr	r3, [pc, #508]	; (8013220 <_printf_float+0x2ec>)
 8013022:	e7d1      	b.n	8012fc8 <_printf_float+0x94>
 8013024:	6863      	ldr	r3, [r4, #4]
 8013026:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801302a:	9206      	str	r2, [sp, #24]
 801302c:	1c5a      	adds	r2, r3, #1
 801302e:	d13f      	bne.n	80130b0 <_printf_float+0x17c>
 8013030:	2306      	movs	r3, #6
 8013032:	6063      	str	r3, [r4, #4]
 8013034:	9b05      	ldr	r3, [sp, #20]
 8013036:	6861      	ldr	r1, [r4, #4]
 8013038:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801303c:	2300      	movs	r3, #0
 801303e:	9303      	str	r3, [sp, #12]
 8013040:	ab0a      	add	r3, sp, #40	; 0x28
 8013042:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013046:	ab09      	add	r3, sp, #36	; 0x24
 8013048:	ec49 8b10 	vmov	d0, r8, r9
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	6022      	str	r2, [r4, #0]
 8013050:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013054:	4628      	mov	r0, r5
 8013056:	f7ff fecd 	bl	8012df4 <__cvt>
 801305a:	9b06      	ldr	r3, [sp, #24]
 801305c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801305e:	2b47      	cmp	r3, #71	; 0x47
 8013060:	4680      	mov	r8, r0
 8013062:	d108      	bne.n	8013076 <_printf_float+0x142>
 8013064:	1cc8      	adds	r0, r1, #3
 8013066:	db02      	blt.n	801306e <_printf_float+0x13a>
 8013068:	6863      	ldr	r3, [r4, #4]
 801306a:	4299      	cmp	r1, r3
 801306c:	dd41      	ble.n	80130f2 <_printf_float+0x1be>
 801306e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013072:	fa5f fb8b 	uxtb.w	fp, fp
 8013076:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801307a:	d820      	bhi.n	80130be <_printf_float+0x18a>
 801307c:	3901      	subs	r1, #1
 801307e:	465a      	mov	r2, fp
 8013080:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013084:	9109      	str	r1, [sp, #36]	; 0x24
 8013086:	f7ff ff17 	bl	8012eb8 <__exponent>
 801308a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801308c:	1813      	adds	r3, r2, r0
 801308e:	2a01      	cmp	r2, #1
 8013090:	4681      	mov	r9, r0
 8013092:	6123      	str	r3, [r4, #16]
 8013094:	dc02      	bgt.n	801309c <_printf_float+0x168>
 8013096:	6822      	ldr	r2, [r4, #0]
 8013098:	07d2      	lsls	r2, r2, #31
 801309a:	d501      	bpl.n	80130a0 <_printf_float+0x16c>
 801309c:	3301      	adds	r3, #1
 801309e:	6123      	str	r3, [r4, #16]
 80130a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d09c      	beq.n	8012fe2 <_printf_float+0xae>
 80130a8:	232d      	movs	r3, #45	; 0x2d
 80130aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130ae:	e798      	b.n	8012fe2 <_printf_float+0xae>
 80130b0:	9a06      	ldr	r2, [sp, #24]
 80130b2:	2a47      	cmp	r2, #71	; 0x47
 80130b4:	d1be      	bne.n	8013034 <_printf_float+0x100>
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d1bc      	bne.n	8013034 <_printf_float+0x100>
 80130ba:	2301      	movs	r3, #1
 80130bc:	e7b9      	b.n	8013032 <_printf_float+0xfe>
 80130be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80130c2:	d118      	bne.n	80130f6 <_printf_float+0x1c2>
 80130c4:	2900      	cmp	r1, #0
 80130c6:	6863      	ldr	r3, [r4, #4]
 80130c8:	dd0b      	ble.n	80130e2 <_printf_float+0x1ae>
 80130ca:	6121      	str	r1, [r4, #16]
 80130cc:	b913      	cbnz	r3, 80130d4 <_printf_float+0x1a0>
 80130ce:	6822      	ldr	r2, [r4, #0]
 80130d0:	07d0      	lsls	r0, r2, #31
 80130d2:	d502      	bpl.n	80130da <_printf_float+0x1a6>
 80130d4:	3301      	adds	r3, #1
 80130d6:	440b      	add	r3, r1
 80130d8:	6123      	str	r3, [r4, #16]
 80130da:	65a1      	str	r1, [r4, #88]	; 0x58
 80130dc:	f04f 0900 	mov.w	r9, #0
 80130e0:	e7de      	b.n	80130a0 <_printf_float+0x16c>
 80130e2:	b913      	cbnz	r3, 80130ea <_printf_float+0x1b6>
 80130e4:	6822      	ldr	r2, [r4, #0]
 80130e6:	07d2      	lsls	r2, r2, #31
 80130e8:	d501      	bpl.n	80130ee <_printf_float+0x1ba>
 80130ea:	3302      	adds	r3, #2
 80130ec:	e7f4      	b.n	80130d8 <_printf_float+0x1a4>
 80130ee:	2301      	movs	r3, #1
 80130f0:	e7f2      	b.n	80130d8 <_printf_float+0x1a4>
 80130f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80130f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130f8:	4299      	cmp	r1, r3
 80130fa:	db05      	blt.n	8013108 <_printf_float+0x1d4>
 80130fc:	6823      	ldr	r3, [r4, #0]
 80130fe:	6121      	str	r1, [r4, #16]
 8013100:	07d8      	lsls	r0, r3, #31
 8013102:	d5ea      	bpl.n	80130da <_printf_float+0x1a6>
 8013104:	1c4b      	adds	r3, r1, #1
 8013106:	e7e7      	b.n	80130d8 <_printf_float+0x1a4>
 8013108:	2900      	cmp	r1, #0
 801310a:	bfd4      	ite	le
 801310c:	f1c1 0202 	rsble	r2, r1, #2
 8013110:	2201      	movgt	r2, #1
 8013112:	4413      	add	r3, r2
 8013114:	e7e0      	b.n	80130d8 <_printf_float+0x1a4>
 8013116:	6823      	ldr	r3, [r4, #0]
 8013118:	055a      	lsls	r2, r3, #21
 801311a:	d407      	bmi.n	801312c <_printf_float+0x1f8>
 801311c:	6923      	ldr	r3, [r4, #16]
 801311e:	4642      	mov	r2, r8
 8013120:	4631      	mov	r1, r6
 8013122:	4628      	mov	r0, r5
 8013124:	47b8      	blx	r7
 8013126:	3001      	adds	r0, #1
 8013128:	d12c      	bne.n	8013184 <_printf_float+0x250>
 801312a:	e764      	b.n	8012ff6 <_printf_float+0xc2>
 801312c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013130:	f240 80e0 	bls.w	80132f4 <_printf_float+0x3c0>
 8013134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013138:	2200      	movs	r2, #0
 801313a:	2300      	movs	r3, #0
 801313c:	f7ed fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 8013140:	2800      	cmp	r0, #0
 8013142:	d034      	beq.n	80131ae <_printf_float+0x27a>
 8013144:	4a37      	ldr	r2, [pc, #220]	; (8013224 <_printf_float+0x2f0>)
 8013146:	2301      	movs	r3, #1
 8013148:	4631      	mov	r1, r6
 801314a:	4628      	mov	r0, r5
 801314c:	47b8      	blx	r7
 801314e:	3001      	adds	r0, #1
 8013150:	f43f af51 	beq.w	8012ff6 <_printf_float+0xc2>
 8013154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013158:	429a      	cmp	r2, r3
 801315a:	db02      	blt.n	8013162 <_printf_float+0x22e>
 801315c:	6823      	ldr	r3, [r4, #0]
 801315e:	07d8      	lsls	r0, r3, #31
 8013160:	d510      	bpl.n	8013184 <_printf_float+0x250>
 8013162:	ee18 3a10 	vmov	r3, s16
 8013166:	4652      	mov	r2, sl
 8013168:	4631      	mov	r1, r6
 801316a:	4628      	mov	r0, r5
 801316c:	47b8      	blx	r7
 801316e:	3001      	adds	r0, #1
 8013170:	f43f af41 	beq.w	8012ff6 <_printf_float+0xc2>
 8013174:	f04f 0800 	mov.w	r8, #0
 8013178:	f104 091a 	add.w	r9, r4, #26
 801317c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801317e:	3b01      	subs	r3, #1
 8013180:	4543      	cmp	r3, r8
 8013182:	dc09      	bgt.n	8013198 <_printf_float+0x264>
 8013184:	6823      	ldr	r3, [r4, #0]
 8013186:	079b      	lsls	r3, r3, #30
 8013188:	f100 8105 	bmi.w	8013396 <_printf_float+0x462>
 801318c:	68e0      	ldr	r0, [r4, #12]
 801318e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013190:	4298      	cmp	r0, r3
 8013192:	bfb8      	it	lt
 8013194:	4618      	movlt	r0, r3
 8013196:	e730      	b.n	8012ffa <_printf_float+0xc6>
 8013198:	2301      	movs	r3, #1
 801319a:	464a      	mov	r2, r9
 801319c:	4631      	mov	r1, r6
 801319e:	4628      	mov	r0, r5
 80131a0:	47b8      	blx	r7
 80131a2:	3001      	adds	r0, #1
 80131a4:	f43f af27 	beq.w	8012ff6 <_printf_float+0xc2>
 80131a8:	f108 0801 	add.w	r8, r8, #1
 80131ac:	e7e6      	b.n	801317c <_printf_float+0x248>
 80131ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	dc39      	bgt.n	8013228 <_printf_float+0x2f4>
 80131b4:	4a1b      	ldr	r2, [pc, #108]	; (8013224 <_printf_float+0x2f0>)
 80131b6:	2301      	movs	r3, #1
 80131b8:	4631      	mov	r1, r6
 80131ba:	4628      	mov	r0, r5
 80131bc:	47b8      	blx	r7
 80131be:	3001      	adds	r0, #1
 80131c0:	f43f af19 	beq.w	8012ff6 <_printf_float+0xc2>
 80131c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80131c8:	4313      	orrs	r3, r2
 80131ca:	d102      	bne.n	80131d2 <_printf_float+0x29e>
 80131cc:	6823      	ldr	r3, [r4, #0]
 80131ce:	07d9      	lsls	r1, r3, #31
 80131d0:	d5d8      	bpl.n	8013184 <_printf_float+0x250>
 80131d2:	ee18 3a10 	vmov	r3, s16
 80131d6:	4652      	mov	r2, sl
 80131d8:	4631      	mov	r1, r6
 80131da:	4628      	mov	r0, r5
 80131dc:	47b8      	blx	r7
 80131de:	3001      	adds	r0, #1
 80131e0:	f43f af09 	beq.w	8012ff6 <_printf_float+0xc2>
 80131e4:	f04f 0900 	mov.w	r9, #0
 80131e8:	f104 0a1a 	add.w	sl, r4, #26
 80131ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ee:	425b      	negs	r3, r3
 80131f0:	454b      	cmp	r3, r9
 80131f2:	dc01      	bgt.n	80131f8 <_printf_float+0x2c4>
 80131f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131f6:	e792      	b.n	801311e <_printf_float+0x1ea>
 80131f8:	2301      	movs	r3, #1
 80131fa:	4652      	mov	r2, sl
 80131fc:	4631      	mov	r1, r6
 80131fe:	4628      	mov	r0, r5
 8013200:	47b8      	blx	r7
 8013202:	3001      	adds	r0, #1
 8013204:	f43f aef7 	beq.w	8012ff6 <_printf_float+0xc2>
 8013208:	f109 0901 	add.w	r9, r9, #1
 801320c:	e7ee      	b.n	80131ec <_printf_float+0x2b8>
 801320e:	bf00      	nop
 8013210:	7fefffff 	.word	0x7fefffff
 8013214:	080255b0 	.word	0x080255b0
 8013218:	080255b4 	.word	0x080255b4
 801321c:	080255bc 	.word	0x080255bc
 8013220:	080255b8 	.word	0x080255b8
 8013224:	080255c0 	.word	0x080255c0
 8013228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801322a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801322c:	429a      	cmp	r2, r3
 801322e:	bfa8      	it	ge
 8013230:	461a      	movge	r2, r3
 8013232:	2a00      	cmp	r2, #0
 8013234:	4691      	mov	r9, r2
 8013236:	dc37      	bgt.n	80132a8 <_printf_float+0x374>
 8013238:	f04f 0b00 	mov.w	fp, #0
 801323c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013240:	f104 021a 	add.w	r2, r4, #26
 8013244:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013246:	9305      	str	r3, [sp, #20]
 8013248:	eba3 0309 	sub.w	r3, r3, r9
 801324c:	455b      	cmp	r3, fp
 801324e:	dc33      	bgt.n	80132b8 <_printf_float+0x384>
 8013250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013254:	429a      	cmp	r2, r3
 8013256:	db3b      	blt.n	80132d0 <_printf_float+0x39c>
 8013258:	6823      	ldr	r3, [r4, #0]
 801325a:	07da      	lsls	r2, r3, #31
 801325c:	d438      	bmi.n	80132d0 <_printf_float+0x39c>
 801325e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013260:	9a05      	ldr	r2, [sp, #20]
 8013262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013264:	1a9a      	subs	r2, r3, r2
 8013266:	eba3 0901 	sub.w	r9, r3, r1
 801326a:	4591      	cmp	r9, r2
 801326c:	bfa8      	it	ge
 801326e:	4691      	movge	r9, r2
 8013270:	f1b9 0f00 	cmp.w	r9, #0
 8013274:	dc35      	bgt.n	80132e2 <_printf_float+0x3ae>
 8013276:	f04f 0800 	mov.w	r8, #0
 801327a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801327e:	f104 0a1a 	add.w	sl, r4, #26
 8013282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013286:	1a9b      	subs	r3, r3, r2
 8013288:	eba3 0309 	sub.w	r3, r3, r9
 801328c:	4543      	cmp	r3, r8
 801328e:	f77f af79 	ble.w	8013184 <_printf_float+0x250>
 8013292:	2301      	movs	r3, #1
 8013294:	4652      	mov	r2, sl
 8013296:	4631      	mov	r1, r6
 8013298:	4628      	mov	r0, r5
 801329a:	47b8      	blx	r7
 801329c:	3001      	adds	r0, #1
 801329e:	f43f aeaa 	beq.w	8012ff6 <_printf_float+0xc2>
 80132a2:	f108 0801 	add.w	r8, r8, #1
 80132a6:	e7ec      	b.n	8013282 <_printf_float+0x34e>
 80132a8:	4613      	mov	r3, r2
 80132aa:	4631      	mov	r1, r6
 80132ac:	4642      	mov	r2, r8
 80132ae:	4628      	mov	r0, r5
 80132b0:	47b8      	blx	r7
 80132b2:	3001      	adds	r0, #1
 80132b4:	d1c0      	bne.n	8013238 <_printf_float+0x304>
 80132b6:	e69e      	b.n	8012ff6 <_printf_float+0xc2>
 80132b8:	2301      	movs	r3, #1
 80132ba:	4631      	mov	r1, r6
 80132bc:	4628      	mov	r0, r5
 80132be:	9205      	str	r2, [sp, #20]
 80132c0:	47b8      	blx	r7
 80132c2:	3001      	adds	r0, #1
 80132c4:	f43f ae97 	beq.w	8012ff6 <_printf_float+0xc2>
 80132c8:	9a05      	ldr	r2, [sp, #20]
 80132ca:	f10b 0b01 	add.w	fp, fp, #1
 80132ce:	e7b9      	b.n	8013244 <_printf_float+0x310>
 80132d0:	ee18 3a10 	vmov	r3, s16
 80132d4:	4652      	mov	r2, sl
 80132d6:	4631      	mov	r1, r6
 80132d8:	4628      	mov	r0, r5
 80132da:	47b8      	blx	r7
 80132dc:	3001      	adds	r0, #1
 80132de:	d1be      	bne.n	801325e <_printf_float+0x32a>
 80132e0:	e689      	b.n	8012ff6 <_printf_float+0xc2>
 80132e2:	9a05      	ldr	r2, [sp, #20]
 80132e4:	464b      	mov	r3, r9
 80132e6:	4442      	add	r2, r8
 80132e8:	4631      	mov	r1, r6
 80132ea:	4628      	mov	r0, r5
 80132ec:	47b8      	blx	r7
 80132ee:	3001      	adds	r0, #1
 80132f0:	d1c1      	bne.n	8013276 <_printf_float+0x342>
 80132f2:	e680      	b.n	8012ff6 <_printf_float+0xc2>
 80132f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132f6:	2a01      	cmp	r2, #1
 80132f8:	dc01      	bgt.n	80132fe <_printf_float+0x3ca>
 80132fa:	07db      	lsls	r3, r3, #31
 80132fc:	d538      	bpl.n	8013370 <_printf_float+0x43c>
 80132fe:	2301      	movs	r3, #1
 8013300:	4642      	mov	r2, r8
 8013302:	4631      	mov	r1, r6
 8013304:	4628      	mov	r0, r5
 8013306:	47b8      	blx	r7
 8013308:	3001      	adds	r0, #1
 801330a:	f43f ae74 	beq.w	8012ff6 <_printf_float+0xc2>
 801330e:	ee18 3a10 	vmov	r3, s16
 8013312:	4652      	mov	r2, sl
 8013314:	4631      	mov	r1, r6
 8013316:	4628      	mov	r0, r5
 8013318:	47b8      	blx	r7
 801331a:	3001      	adds	r0, #1
 801331c:	f43f ae6b 	beq.w	8012ff6 <_printf_float+0xc2>
 8013320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013324:	2200      	movs	r2, #0
 8013326:	2300      	movs	r3, #0
 8013328:	f7ed fbe6 	bl	8000af8 <__aeabi_dcmpeq>
 801332c:	b9d8      	cbnz	r0, 8013366 <_printf_float+0x432>
 801332e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013330:	f108 0201 	add.w	r2, r8, #1
 8013334:	3b01      	subs	r3, #1
 8013336:	4631      	mov	r1, r6
 8013338:	4628      	mov	r0, r5
 801333a:	47b8      	blx	r7
 801333c:	3001      	adds	r0, #1
 801333e:	d10e      	bne.n	801335e <_printf_float+0x42a>
 8013340:	e659      	b.n	8012ff6 <_printf_float+0xc2>
 8013342:	2301      	movs	r3, #1
 8013344:	4652      	mov	r2, sl
 8013346:	4631      	mov	r1, r6
 8013348:	4628      	mov	r0, r5
 801334a:	47b8      	blx	r7
 801334c:	3001      	adds	r0, #1
 801334e:	f43f ae52 	beq.w	8012ff6 <_printf_float+0xc2>
 8013352:	f108 0801 	add.w	r8, r8, #1
 8013356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013358:	3b01      	subs	r3, #1
 801335a:	4543      	cmp	r3, r8
 801335c:	dcf1      	bgt.n	8013342 <_printf_float+0x40e>
 801335e:	464b      	mov	r3, r9
 8013360:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013364:	e6dc      	b.n	8013120 <_printf_float+0x1ec>
 8013366:	f04f 0800 	mov.w	r8, #0
 801336a:	f104 0a1a 	add.w	sl, r4, #26
 801336e:	e7f2      	b.n	8013356 <_printf_float+0x422>
 8013370:	2301      	movs	r3, #1
 8013372:	4642      	mov	r2, r8
 8013374:	e7df      	b.n	8013336 <_printf_float+0x402>
 8013376:	2301      	movs	r3, #1
 8013378:	464a      	mov	r2, r9
 801337a:	4631      	mov	r1, r6
 801337c:	4628      	mov	r0, r5
 801337e:	47b8      	blx	r7
 8013380:	3001      	adds	r0, #1
 8013382:	f43f ae38 	beq.w	8012ff6 <_printf_float+0xc2>
 8013386:	f108 0801 	add.w	r8, r8, #1
 801338a:	68e3      	ldr	r3, [r4, #12]
 801338c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801338e:	1a5b      	subs	r3, r3, r1
 8013390:	4543      	cmp	r3, r8
 8013392:	dcf0      	bgt.n	8013376 <_printf_float+0x442>
 8013394:	e6fa      	b.n	801318c <_printf_float+0x258>
 8013396:	f04f 0800 	mov.w	r8, #0
 801339a:	f104 0919 	add.w	r9, r4, #25
 801339e:	e7f4      	b.n	801338a <_printf_float+0x456>

080133a0 <_printf_common>:
 80133a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a4:	4616      	mov	r6, r2
 80133a6:	4699      	mov	r9, r3
 80133a8:	688a      	ldr	r2, [r1, #8]
 80133aa:	690b      	ldr	r3, [r1, #16]
 80133ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133b0:	4293      	cmp	r3, r2
 80133b2:	bfb8      	it	lt
 80133b4:	4613      	movlt	r3, r2
 80133b6:	6033      	str	r3, [r6, #0]
 80133b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133bc:	4607      	mov	r7, r0
 80133be:	460c      	mov	r4, r1
 80133c0:	b10a      	cbz	r2, 80133c6 <_printf_common+0x26>
 80133c2:	3301      	adds	r3, #1
 80133c4:	6033      	str	r3, [r6, #0]
 80133c6:	6823      	ldr	r3, [r4, #0]
 80133c8:	0699      	lsls	r1, r3, #26
 80133ca:	bf42      	ittt	mi
 80133cc:	6833      	ldrmi	r3, [r6, #0]
 80133ce:	3302      	addmi	r3, #2
 80133d0:	6033      	strmi	r3, [r6, #0]
 80133d2:	6825      	ldr	r5, [r4, #0]
 80133d4:	f015 0506 	ands.w	r5, r5, #6
 80133d8:	d106      	bne.n	80133e8 <_printf_common+0x48>
 80133da:	f104 0a19 	add.w	sl, r4, #25
 80133de:	68e3      	ldr	r3, [r4, #12]
 80133e0:	6832      	ldr	r2, [r6, #0]
 80133e2:	1a9b      	subs	r3, r3, r2
 80133e4:	42ab      	cmp	r3, r5
 80133e6:	dc26      	bgt.n	8013436 <_printf_common+0x96>
 80133e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80133ec:	1e13      	subs	r3, r2, #0
 80133ee:	6822      	ldr	r2, [r4, #0]
 80133f0:	bf18      	it	ne
 80133f2:	2301      	movne	r3, #1
 80133f4:	0692      	lsls	r2, r2, #26
 80133f6:	d42b      	bmi.n	8013450 <_printf_common+0xb0>
 80133f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133fc:	4649      	mov	r1, r9
 80133fe:	4638      	mov	r0, r7
 8013400:	47c0      	blx	r8
 8013402:	3001      	adds	r0, #1
 8013404:	d01e      	beq.n	8013444 <_printf_common+0xa4>
 8013406:	6823      	ldr	r3, [r4, #0]
 8013408:	68e5      	ldr	r5, [r4, #12]
 801340a:	6832      	ldr	r2, [r6, #0]
 801340c:	f003 0306 	and.w	r3, r3, #6
 8013410:	2b04      	cmp	r3, #4
 8013412:	bf08      	it	eq
 8013414:	1aad      	subeq	r5, r5, r2
 8013416:	68a3      	ldr	r3, [r4, #8]
 8013418:	6922      	ldr	r2, [r4, #16]
 801341a:	bf0c      	ite	eq
 801341c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013420:	2500      	movne	r5, #0
 8013422:	4293      	cmp	r3, r2
 8013424:	bfc4      	itt	gt
 8013426:	1a9b      	subgt	r3, r3, r2
 8013428:	18ed      	addgt	r5, r5, r3
 801342a:	2600      	movs	r6, #0
 801342c:	341a      	adds	r4, #26
 801342e:	42b5      	cmp	r5, r6
 8013430:	d11a      	bne.n	8013468 <_printf_common+0xc8>
 8013432:	2000      	movs	r0, #0
 8013434:	e008      	b.n	8013448 <_printf_common+0xa8>
 8013436:	2301      	movs	r3, #1
 8013438:	4652      	mov	r2, sl
 801343a:	4649      	mov	r1, r9
 801343c:	4638      	mov	r0, r7
 801343e:	47c0      	blx	r8
 8013440:	3001      	adds	r0, #1
 8013442:	d103      	bne.n	801344c <_printf_common+0xac>
 8013444:	f04f 30ff 	mov.w	r0, #4294967295
 8013448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801344c:	3501      	adds	r5, #1
 801344e:	e7c6      	b.n	80133de <_printf_common+0x3e>
 8013450:	18e1      	adds	r1, r4, r3
 8013452:	1c5a      	adds	r2, r3, #1
 8013454:	2030      	movs	r0, #48	; 0x30
 8013456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801345a:	4422      	add	r2, r4
 801345c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013464:	3302      	adds	r3, #2
 8013466:	e7c7      	b.n	80133f8 <_printf_common+0x58>
 8013468:	2301      	movs	r3, #1
 801346a:	4622      	mov	r2, r4
 801346c:	4649      	mov	r1, r9
 801346e:	4638      	mov	r0, r7
 8013470:	47c0      	blx	r8
 8013472:	3001      	adds	r0, #1
 8013474:	d0e6      	beq.n	8013444 <_printf_common+0xa4>
 8013476:	3601      	adds	r6, #1
 8013478:	e7d9      	b.n	801342e <_printf_common+0x8e>
	...

0801347c <_printf_i>:
 801347c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013480:	7e0f      	ldrb	r7, [r1, #24]
 8013482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013484:	2f78      	cmp	r7, #120	; 0x78
 8013486:	4691      	mov	r9, r2
 8013488:	4680      	mov	r8, r0
 801348a:	460c      	mov	r4, r1
 801348c:	469a      	mov	sl, r3
 801348e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013492:	d807      	bhi.n	80134a4 <_printf_i+0x28>
 8013494:	2f62      	cmp	r7, #98	; 0x62
 8013496:	d80a      	bhi.n	80134ae <_printf_i+0x32>
 8013498:	2f00      	cmp	r7, #0
 801349a:	f000 80d8 	beq.w	801364e <_printf_i+0x1d2>
 801349e:	2f58      	cmp	r7, #88	; 0x58
 80134a0:	f000 80a3 	beq.w	80135ea <_printf_i+0x16e>
 80134a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134ac:	e03a      	b.n	8013524 <_printf_i+0xa8>
 80134ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134b2:	2b15      	cmp	r3, #21
 80134b4:	d8f6      	bhi.n	80134a4 <_printf_i+0x28>
 80134b6:	a101      	add	r1, pc, #4	; (adr r1, 80134bc <_printf_i+0x40>)
 80134b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134bc:	08013515 	.word	0x08013515
 80134c0:	08013529 	.word	0x08013529
 80134c4:	080134a5 	.word	0x080134a5
 80134c8:	080134a5 	.word	0x080134a5
 80134cc:	080134a5 	.word	0x080134a5
 80134d0:	080134a5 	.word	0x080134a5
 80134d4:	08013529 	.word	0x08013529
 80134d8:	080134a5 	.word	0x080134a5
 80134dc:	080134a5 	.word	0x080134a5
 80134e0:	080134a5 	.word	0x080134a5
 80134e4:	080134a5 	.word	0x080134a5
 80134e8:	08013635 	.word	0x08013635
 80134ec:	08013559 	.word	0x08013559
 80134f0:	08013617 	.word	0x08013617
 80134f4:	080134a5 	.word	0x080134a5
 80134f8:	080134a5 	.word	0x080134a5
 80134fc:	08013657 	.word	0x08013657
 8013500:	080134a5 	.word	0x080134a5
 8013504:	08013559 	.word	0x08013559
 8013508:	080134a5 	.word	0x080134a5
 801350c:	080134a5 	.word	0x080134a5
 8013510:	0801361f 	.word	0x0801361f
 8013514:	682b      	ldr	r3, [r5, #0]
 8013516:	1d1a      	adds	r2, r3, #4
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	602a      	str	r2, [r5, #0]
 801351c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013524:	2301      	movs	r3, #1
 8013526:	e0a3      	b.n	8013670 <_printf_i+0x1f4>
 8013528:	6820      	ldr	r0, [r4, #0]
 801352a:	6829      	ldr	r1, [r5, #0]
 801352c:	0606      	lsls	r6, r0, #24
 801352e:	f101 0304 	add.w	r3, r1, #4
 8013532:	d50a      	bpl.n	801354a <_printf_i+0xce>
 8013534:	680e      	ldr	r6, [r1, #0]
 8013536:	602b      	str	r3, [r5, #0]
 8013538:	2e00      	cmp	r6, #0
 801353a:	da03      	bge.n	8013544 <_printf_i+0xc8>
 801353c:	232d      	movs	r3, #45	; 0x2d
 801353e:	4276      	negs	r6, r6
 8013540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013544:	485e      	ldr	r0, [pc, #376]	; (80136c0 <_printf_i+0x244>)
 8013546:	230a      	movs	r3, #10
 8013548:	e019      	b.n	801357e <_printf_i+0x102>
 801354a:	680e      	ldr	r6, [r1, #0]
 801354c:	602b      	str	r3, [r5, #0]
 801354e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013552:	bf18      	it	ne
 8013554:	b236      	sxthne	r6, r6
 8013556:	e7ef      	b.n	8013538 <_printf_i+0xbc>
 8013558:	682b      	ldr	r3, [r5, #0]
 801355a:	6820      	ldr	r0, [r4, #0]
 801355c:	1d19      	adds	r1, r3, #4
 801355e:	6029      	str	r1, [r5, #0]
 8013560:	0601      	lsls	r1, r0, #24
 8013562:	d501      	bpl.n	8013568 <_printf_i+0xec>
 8013564:	681e      	ldr	r6, [r3, #0]
 8013566:	e002      	b.n	801356e <_printf_i+0xf2>
 8013568:	0646      	lsls	r6, r0, #25
 801356a:	d5fb      	bpl.n	8013564 <_printf_i+0xe8>
 801356c:	881e      	ldrh	r6, [r3, #0]
 801356e:	4854      	ldr	r0, [pc, #336]	; (80136c0 <_printf_i+0x244>)
 8013570:	2f6f      	cmp	r7, #111	; 0x6f
 8013572:	bf0c      	ite	eq
 8013574:	2308      	moveq	r3, #8
 8013576:	230a      	movne	r3, #10
 8013578:	2100      	movs	r1, #0
 801357a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801357e:	6865      	ldr	r5, [r4, #4]
 8013580:	60a5      	str	r5, [r4, #8]
 8013582:	2d00      	cmp	r5, #0
 8013584:	bfa2      	ittt	ge
 8013586:	6821      	ldrge	r1, [r4, #0]
 8013588:	f021 0104 	bicge.w	r1, r1, #4
 801358c:	6021      	strge	r1, [r4, #0]
 801358e:	b90e      	cbnz	r6, 8013594 <_printf_i+0x118>
 8013590:	2d00      	cmp	r5, #0
 8013592:	d04d      	beq.n	8013630 <_printf_i+0x1b4>
 8013594:	4615      	mov	r5, r2
 8013596:	fbb6 f1f3 	udiv	r1, r6, r3
 801359a:	fb03 6711 	mls	r7, r3, r1, r6
 801359e:	5dc7      	ldrb	r7, [r0, r7]
 80135a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80135a4:	4637      	mov	r7, r6
 80135a6:	42bb      	cmp	r3, r7
 80135a8:	460e      	mov	r6, r1
 80135aa:	d9f4      	bls.n	8013596 <_printf_i+0x11a>
 80135ac:	2b08      	cmp	r3, #8
 80135ae:	d10b      	bne.n	80135c8 <_printf_i+0x14c>
 80135b0:	6823      	ldr	r3, [r4, #0]
 80135b2:	07de      	lsls	r6, r3, #31
 80135b4:	d508      	bpl.n	80135c8 <_printf_i+0x14c>
 80135b6:	6923      	ldr	r3, [r4, #16]
 80135b8:	6861      	ldr	r1, [r4, #4]
 80135ba:	4299      	cmp	r1, r3
 80135bc:	bfde      	ittt	le
 80135be:	2330      	movle	r3, #48	; 0x30
 80135c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80135c8:	1b52      	subs	r2, r2, r5
 80135ca:	6122      	str	r2, [r4, #16]
 80135cc:	f8cd a000 	str.w	sl, [sp]
 80135d0:	464b      	mov	r3, r9
 80135d2:	aa03      	add	r2, sp, #12
 80135d4:	4621      	mov	r1, r4
 80135d6:	4640      	mov	r0, r8
 80135d8:	f7ff fee2 	bl	80133a0 <_printf_common>
 80135dc:	3001      	adds	r0, #1
 80135de:	d14c      	bne.n	801367a <_printf_i+0x1fe>
 80135e0:	f04f 30ff 	mov.w	r0, #4294967295
 80135e4:	b004      	add	sp, #16
 80135e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ea:	4835      	ldr	r0, [pc, #212]	; (80136c0 <_printf_i+0x244>)
 80135ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80135f0:	6829      	ldr	r1, [r5, #0]
 80135f2:	6823      	ldr	r3, [r4, #0]
 80135f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80135f8:	6029      	str	r1, [r5, #0]
 80135fa:	061d      	lsls	r5, r3, #24
 80135fc:	d514      	bpl.n	8013628 <_printf_i+0x1ac>
 80135fe:	07df      	lsls	r7, r3, #31
 8013600:	bf44      	itt	mi
 8013602:	f043 0320 	orrmi.w	r3, r3, #32
 8013606:	6023      	strmi	r3, [r4, #0]
 8013608:	b91e      	cbnz	r6, 8013612 <_printf_i+0x196>
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	f023 0320 	bic.w	r3, r3, #32
 8013610:	6023      	str	r3, [r4, #0]
 8013612:	2310      	movs	r3, #16
 8013614:	e7b0      	b.n	8013578 <_printf_i+0xfc>
 8013616:	6823      	ldr	r3, [r4, #0]
 8013618:	f043 0320 	orr.w	r3, r3, #32
 801361c:	6023      	str	r3, [r4, #0]
 801361e:	2378      	movs	r3, #120	; 0x78
 8013620:	4828      	ldr	r0, [pc, #160]	; (80136c4 <_printf_i+0x248>)
 8013622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013626:	e7e3      	b.n	80135f0 <_printf_i+0x174>
 8013628:	0659      	lsls	r1, r3, #25
 801362a:	bf48      	it	mi
 801362c:	b2b6      	uxthmi	r6, r6
 801362e:	e7e6      	b.n	80135fe <_printf_i+0x182>
 8013630:	4615      	mov	r5, r2
 8013632:	e7bb      	b.n	80135ac <_printf_i+0x130>
 8013634:	682b      	ldr	r3, [r5, #0]
 8013636:	6826      	ldr	r6, [r4, #0]
 8013638:	6961      	ldr	r1, [r4, #20]
 801363a:	1d18      	adds	r0, r3, #4
 801363c:	6028      	str	r0, [r5, #0]
 801363e:	0635      	lsls	r5, r6, #24
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	d501      	bpl.n	8013648 <_printf_i+0x1cc>
 8013644:	6019      	str	r1, [r3, #0]
 8013646:	e002      	b.n	801364e <_printf_i+0x1d2>
 8013648:	0670      	lsls	r0, r6, #25
 801364a:	d5fb      	bpl.n	8013644 <_printf_i+0x1c8>
 801364c:	8019      	strh	r1, [r3, #0]
 801364e:	2300      	movs	r3, #0
 8013650:	6123      	str	r3, [r4, #16]
 8013652:	4615      	mov	r5, r2
 8013654:	e7ba      	b.n	80135cc <_printf_i+0x150>
 8013656:	682b      	ldr	r3, [r5, #0]
 8013658:	1d1a      	adds	r2, r3, #4
 801365a:	602a      	str	r2, [r5, #0]
 801365c:	681d      	ldr	r5, [r3, #0]
 801365e:	6862      	ldr	r2, [r4, #4]
 8013660:	2100      	movs	r1, #0
 8013662:	4628      	mov	r0, r5
 8013664:	f7ec fdd4 	bl	8000210 <memchr>
 8013668:	b108      	cbz	r0, 801366e <_printf_i+0x1f2>
 801366a:	1b40      	subs	r0, r0, r5
 801366c:	6060      	str	r0, [r4, #4]
 801366e:	6863      	ldr	r3, [r4, #4]
 8013670:	6123      	str	r3, [r4, #16]
 8013672:	2300      	movs	r3, #0
 8013674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013678:	e7a8      	b.n	80135cc <_printf_i+0x150>
 801367a:	6923      	ldr	r3, [r4, #16]
 801367c:	462a      	mov	r2, r5
 801367e:	4649      	mov	r1, r9
 8013680:	4640      	mov	r0, r8
 8013682:	47d0      	blx	sl
 8013684:	3001      	adds	r0, #1
 8013686:	d0ab      	beq.n	80135e0 <_printf_i+0x164>
 8013688:	6823      	ldr	r3, [r4, #0]
 801368a:	079b      	lsls	r3, r3, #30
 801368c:	d413      	bmi.n	80136b6 <_printf_i+0x23a>
 801368e:	68e0      	ldr	r0, [r4, #12]
 8013690:	9b03      	ldr	r3, [sp, #12]
 8013692:	4298      	cmp	r0, r3
 8013694:	bfb8      	it	lt
 8013696:	4618      	movlt	r0, r3
 8013698:	e7a4      	b.n	80135e4 <_printf_i+0x168>
 801369a:	2301      	movs	r3, #1
 801369c:	4632      	mov	r2, r6
 801369e:	4649      	mov	r1, r9
 80136a0:	4640      	mov	r0, r8
 80136a2:	47d0      	blx	sl
 80136a4:	3001      	adds	r0, #1
 80136a6:	d09b      	beq.n	80135e0 <_printf_i+0x164>
 80136a8:	3501      	adds	r5, #1
 80136aa:	68e3      	ldr	r3, [r4, #12]
 80136ac:	9903      	ldr	r1, [sp, #12]
 80136ae:	1a5b      	subs	r3, r3, r1
 80136b0:	42ab      	cmp	r3, r5
 80136b2:	dcf2      	bgt.n	801369a <_printf_i+0x21e>
 80136b4:	e7eb      	b.n	801368e <_printf_i+0x212>
 80136b6:	2500      	movs	r5, #0
 80136b8:	f104 0619 	add.w	r6, r4, #25
 80136bc:	e7f5      	b.n	80136aa <_printf_i+0x22e>
 80136be:	bf00      	nop
 80136c0:	080255c2 	.word	0x080255c2
 80136c4:	080255d3 	.word	0x080255d3

080136c8 <_sbrk_r>:
 80136c8:	b538      	push	{r3, r4, r5, lr}
 80136ca:	4d06      	ldr	r5, [pc, #24]	; (80136e4 <_sbrk_r+0x1c>)
 80136cc:	2300      	movs	r3, #0
 80136ce:	4604      	mov	r4, r0
 80136d0:	4608      	mov	r0, r1
 80136d2:	602b      	str	r3, [r5, #0]
 80136d4:	f7ed ffd0 	bl	8001678 <_sbrk>
 80136d8:	1c43      	adds	r3, r0, #1
 80136da:	d102      	bne.n	80136e2 <_sbrk_r+0x1a>
 80136dc:	682b      	ldr	r3, [r5, #0]
 80136de:	b103      	cbz	r3, 80136e2 <_sbrk_r+0x1a>
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	2000d06c 	.word	0x2000d06c

080136e8 <strcpy>:
 80136e8:	4603      	mov	r3, r0
 80136ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136ee:	f803 2b01 	strb.w	r2, [r3], #1
 80136f2:	2a00      	cmp	r2, #0
 80136f4:	d1f9      	bne.n	80136ea <strcpy+0x2>
 80136f6:	4770      	bx	lr

080136f8 <sulp>:
 80136f8:	b570      	push	{r4, r5, r6, lr}
 80136fa:	4604      	mov	r4, r0
 80136fc:	460d      	mov	r5, r1
 80136fe:	ec45 4b10 	vmov	d0, r4, r5
 8013702:	4616      	mov	r6, r2
 8013704:	f002 ffb4 	bl	8016670 <__ulp>
 8013708:	ec51 0b10 	vmov	r0, r1, d0
 801370c:	b17e      	cbz	r6, 801372e <sulp+0x36>
 801370e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013716:	2b00      	cmp	r3, #0
 8013718:	dd09      	ble.n	801372e <sulp+0x36>
 801371a:	051b      	lsls	r3, r3, #20
 801371c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013720:	2400      	movs	r4, #0
 8013722:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013726:	4622      	mov	r2, r4
 8013728:	462b      	mov	r3, r5
 801372a:	f7ec ff7d 	bl	8000628 <__aeabi_dmul>
 801372e:	bd70      	pop	{r4, r5, r6, pc}

08013730 <_strtod_l>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	ed2d 8b02 	vpush	{d8}
 8013738:	b09d      	sub	sp, #116	; 0x74
 801373a:	461f      	mov	r7, r3
 801373c:	2300      	movs	r3, #0
 801373e:	9318      	str	r3, [sp, #96]	; 0x60
 8013740:	4ba2      	ldr	r3, [pc, #648]	; (80139cc <_strtod_l+0x29c>)
 8013742:	9213      	str	r2, [sp, #76]	; 0x4c
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	9305      	str	r3, [sp, #20]
 8013748:	4604      	mov	r4, r0
 801374a:	4618      	mov	r0, r3
 801374c:	4688      	mov	r8, r1
 801374e:	f7ec fd51 	bl	80001f4 <strlen>
 8013752:	f04f 0a00 	mov.w	sl, #0
 8013756:	4605      	mov	r5, r0
 8013758:	f04f 0b00 	mov.w	fp, #0
 801375c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013762:	781a      	ldrb	r2, [r3, #0]
 8013764:	2a2b      	cmp	r2, #43	; 0x2b
 8013766:	d04e      	beq.n	8013806 <_strtod_l+0xd6>
 8013768:	d83b      	bhi.n	80137e2 <_strtod_l+0xb2>
 801376a:	2a0d      	cmp	r2, #13
 801376c:	d834      	bhi.n	80137d8 <_strtod_l+0xa8>
 801376e:	2a08      	cmp	r2, #8
 8013770:	d834      	bhi.n	80137dc <_strtod_l+0xac>
 8013772:	2a00      	cmp	r2, #0
 8013774:	d03e      	beq.n	80137f4 <_strtod_l+0xc4>
 8013776:	2300      	movs	r3, #0
 8013778:	930a      	str	r3, [sp, #40]	; 0x28
 801377a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801377c:	7833      	ldrb	r3, [r6, #0]
 801377e:	2b30      	cmp	r3, #48	; 0x30
 8013780:	f040 80b0 	bne.w	80138e4 <_strtod_l+0x1b4>
 8013784:	7873      	ldrb	r3, [r6, #1]
 8013786:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801378a:	2b58      	cmp	r3, #88	; 0x58
 801378c:	d168      	bne.n	8013860 <_strtod_l+0x130>
 801378e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013790:	9301      	str	r3, [sp, #4]
 8013792:	ab18      	add	r3, sp, #96	; 0x60
 8013794:	9702      	str	r7, [sp, #8]
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	4a8d      	ldr	r2, [pc, #564]	; (80139d0 <_strtod_l+0x2a0>)
 801379a:	ab19      	add	r3, sp, #100	; 0x64
 801379c:	a917      	add	r1, sp, #92	; 0x5c
 801379e:	4620      	mov	r0, r4
 80137a0:	f002 f862 	bl	8015868 <__gethex>
 80137a4:	f010 0707 	ands.w	r7, r0, #7
 80137a8:	4605      	mov	r5, r0
 80137aa:	d005      	beq.n	80137b8 <_strtod_l+0x88>
 80137ac:	2f06      	cmp	r7, #6
 80137ae:	d12c      	bne.n	801380a <_strtod_l+0xda>
 80137b0:	3601      	adds	r6, #1
 80137b2:	2300      	movs	r3, #0
 80137b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80137b6:	930a      	str	r3, [sp, #40]	; 0x28
 80137b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f040 8590 	bne.w	80142e0 <_strtod_l+0xbb0>
 80137c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137c2:	b1eb      	cbz	r3, 8013800 <_strtod_l+0xd0>
 80137c4:	4652      	mov	r2, sl
 80137c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80137ca:	ec43 2b10 	vmov	d0, r2, r3
 80137ce:	b01d      	add	sp, #116	; 0x74
 80137d0:	ecbd 8b02 	vpop	{d8}
 80137d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d8:	2a20      	cmp	r2, #32
 80137da:	d1cc      	bne.n	8013776 <_strtod_l+0x46>
 80137dc:	3301      	adds	r3, #1
 80137de:	9317      	str	r3, [sp, #92]	; 0x5c
 80137e0:	e7be      	b.n	8013760 <_strtod_l+0x30>
 80137e2:	2a2d      	cmp	r2, #45	; 0x2d
 80137e4:	d1c7      	bne.n	8013776 <_strtod_l+0x46>
 80137e6:	2201      	movs	r2, #1
 80137e8:	920a      	str	r2, [sp, #40]	; 0x28
 80137ea:	1c5a      	adds	r2, r3, #1
 80137ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80137ee:	785b      	ldrb	r3, [r3, #1]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d1c2      	bne.n	801377a <_strtod_l+0x4a>
 80137f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	f040 856e 	bne.w	80142dc <_strtod_l+0xbac>
 8013800:	4652      	mov	r2, sl
 8013802:	465b      	mov	r3, fp
 8013804:	e7e1      	b.n	80137ca <_strtod_l+0x9a>
 8013806:	2200      	movs	r2, #0
 8013808:	e7ee      	b.n	80137e8 <_strtod_l+0xb8>
 801380a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801380c:	b13a      	cbz	r2, 801381e <_strtod_l+0xee>
 801380e:	2135      	movs	r1, #53	; 0x35
 8013810:	a81a      	add	r0, sp, #104	; 0x68
 8013812:	f003 f838 	bl	8016886 <__copybits>
 8013816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013818:	4620      	mov	r0, r4
 801381a:	f002 fbf7 	bl	801600c <_Bfree>
 801381e:	3f01      	subs	r7, #1
 8013820:	2f04      	cmp	r7, #4
 8013822:	d806      	bhi.n	8013832 <_strtod_l+0x102>
 8013824:	e8df f007 	tbb	[pc, r7]
 8013828:	1714030a 	.word	0x1714030a
 801382c:	0a          	.byte	0x0a
 801382d:	00          	.byte	0x00
 801382e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013832:	0728      	lsls	r0, r5, #28
 8013834:	d5c0      	bpl.n	80137b8 <_strtod_l+0x88>
 8013836:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801383a:	e7bd      	b.n	80137b8 <_strtod_l+0x88>
 801383c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013840:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801384a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801384e:	e7f0      	b.n	8013832 <_strtod_l+0x102>
 8013850:	f8df b180 	ldr.w	fp, [pc, #384]	; 80139d4 <_strtod_l+0x2a4>
 8013854:	e7ed      	b.n	8013832 <_strtod_l+0x102>
 8013856:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801385a:	f04f 3aff 	mov.w	sl, #4294967295
 801385e:	e7e8      	b.n	8013832 <_strtod_l+0x102>
 8013860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013862:	1c5a      	adds	r2, r3, #1
 8013864:	9217      	str	r2, [sp, #92]	; 0x5c
 8013866:	785b      	ldrb	r3, [r3, #1]
 8013868:	2b30      	cmp	r3, #48	; 0x30
 801386a:	d0f9      	beq.n	8013860 <_strtod_l+0x130>
 801386c:	2b00      	cmp	r3, #0
 801386e:	d0a3      	beq.n	80137b8 <_strtod_l+0x88>
 8013870:	2301      	movs	r3, #1
 8013872:	f04f 0900 	mov.w	r9, #0
 8013876:	9304      	str	r3, [sp, #16]
 8013878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801387a:	9308      	str	r3, [sp, #32]
 801387c:	f8cd 901c 	str.w	r9, [sp, #28]
 8013880:	464f      	mov	r7, r9
 8013882:	220a      	movs	r2, #10
 8013884:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013886:	7806      	ldrb	r6, [r0, #0]
 8013888:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801388c:	b2d9      	uxtb	r1, r3
 801388e:	2909      	cmp	r1, #9
 8013890:	d92a      	bls.n	80138e8 <_strtod_l+0x1b8>
 8013892:	9905      	ldr	r1, [sp, #20]
 8013894:	462a      	mov	r2, r5
 8013896:	f003 f9fc 	bl	8016c92 <strncmp>
 801389a:	b398      	cbz	r0, 8013904 <_strtod_l+0x1d4>
 801389c:	2000      	movs	r0, #0
 801389e:	4632      	mov	r2, r6
 80138a0:	463d      	mov	r5, r7
 80138a2:	9005      	str	r0, [sp, #20]
 80138a4:	4603      	mov	r3, r0
 80138a6:	2a65      	cmp	r2, #101	; 0x65
 80138a8:	d001      	beq.n	80138ae <_strtod_l+0x17e>
 80138aa:	2a45      	cmp	r2, #69	; 0x45
 80138ac:	d118      	bne.n	80138e0 <_strtod_l+0x1b0>
 80138ae:	b91d      	cbnz	r5, 80138b8 <_strtod_l+0x188>
 80138b0:	9a04      	ldr	r2, [sp, #16]
 80138b2:	4302      	orrs	r2, r0
 80138b4:	d09e      	beq.n	80137f4 <_strtod_l+0xc4>
 80138b6:	2500      	movs	r5, #0
 80138b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80138bc:	f108 0201 	add.w	r2, r8, #1
 80138c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80138c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80138c6:	2a2b      	cmp	r2, #43	; 0x2b
 80138c8:	d075      	beq.n	80139b6 <_strtod_l+0x286>
 80138ca:	2a2d      	cmp	r2, #45	; 0x2d
 80138cc:	d07b      	beq.n	80139c6 <_strtod_l+0x296>
 80138ce:	f04f 0c00 	mov.w	ip, #0
 80138d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80138d6:	2909      	cmp	r1, #9
 80138d8:	f240 8082 	bls.w	80139e0 <_strtod_l+0x2b0>
 80138dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80138e0:	2600      	movs	r6, #0
 80138e2:	e09d      	b.n	8013a20 <_strtod_l+0x2f0>
 80138e4:	2300      	movs	r3, #0
 80138e6:	e7c4      	b.n	8013872 <_strtod_l+0x142>
 80138e8:	2f08      	cmp	r7, #8
 80138ea:	bfd8      	it	le
 80138ec:	9907      	ldrle	r1, [sp, #28]
 80138ee:	f100 0001 	add.w	r0, r0, #1
 80138f2:	bfda      	itte	le
 80138f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80138f8:	9307      	strle	r3, [sp, #28]
 80138fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80138fe:	3701      	adds	r7, #1
 8013900:	9017      	str	r0, [sp, #92]	; 0x5c
 8013902:	e7bf      	b.n	8013884 <_strtod_l+0x154>
 8013904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013906:	195a      	adds	r2, r3, r5
 8013908:	9217      	str	r2, [sp, #92]	; 0x5c
 801390a:	5d5a      	ldrb	r2, [r3, r5]
 801390c:	2f00      	cmp	r7, #0
 801390e:	d037      	beq.n	8013980 <_strtod_l+0x250>
 8013910:	9005      	str	r0, [sp, #20]
 8013912:	463d      	mov	r5, r7
 8013914:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013918:	2b09      	cmp	r3, #9
 801391a:	d912      	bls.n	8013942 <_strtod_l+0x212>
 801391c:	2301      	movs	r3, #1
 801391e:	e7c2      	b.n	80138a6 <_strtod_l+0x176>
 8013920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013922:	1c5a      	adds	r2, r3, #1
 8013924:	9217      	str	r2, [sp, #92]	; 0x5c
 8013926:	785a      	ldrb	r2, [r3, #1]
 8013928:	3001      	adds	r0, #1
 801392a:	2a30      	cmp	r2, #48	; 0x30
 801392c:	d0f8      	beq.n	8013920 <_strtod_l+0x1f0>
 801392e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013932:	2b08      	cmp	r3, #8
 8013934:	f200 84d9 	bhi.w	80142ea <_strtod_l+0xbba>
 8013938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801393a:	9005      	str	r0, [sp, #20]
 801393c:	2000      	movs	r0, #0
 801393e:	9308      	str	r3, [sp, #32]
 8013940:	4605      	mov	r5, r0
 8013942:	3a30      	subs	r2, #48	; 0x30
 8013944:	f100 0301 	add.w	r3, r0, #1
 8013948:	d014      	beq.n	8013974 <_strtod_l+0x244>
 801394a:	9905      	ldr	r1, [sp, #20]
 801394c:	4419      	add	r1, r3
 801394e:	9105      	str	r1, [sp, #20]
 8013950:	462b      	mov	r3, r5
 8013952:	eb00 0e05 	add.w	lr, r0, r5
 8013956:	210a      	movs	r1, #10
 8013958:	4573      	cmp	r3, lr
 801395a:	d113      	bne.n	8013984 <_strtod_l+0x254>
 801395c:	182b      	adds	r3, r5, r0
 801395e:	2b08      	cmp	r3, #8
 8013960:	f105 0501 	add.w	r5, r5, #1
 8013964:	4405      	add	r5, r0
 8013966:	dc1c      	bgt.n	80139a2 <_strtod_l+0x272>
 8013968:	9907      	ldr	r1, [sp, #28]
 801396a:	230a      	movs	r3, #10
 801396c:	fb03 2301 	mla	r3, r3, r1, r2
 8013970:	9307      	str	r3, [sp, #28]
 8013972:	2300      	movs	r3, #0
 8013974:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013976:	1c51      	adds	r1, r2, #1
 8013978:	9117      	str	r1, [sp, #92]	; 0x5c
 801397a:	7852      	ldrb	r2, [r2, #1]
 801397c:	4618      	mov	r0, r3
 801397e:	e7c9      	b.n	8013914 <_strtod_l+0x1e4>
 8013980:	4638      	mov	r0, r7
 8013982:	e7d2      	b.n	801392a <_strtod_l+0x1fa>
 8013984:	2b08      	cmp	r3, #8
 8013986:	dc04      	bgt.n	8013992 <_strtod_l+0x262>
 8013988:	9e07      	ldr	r6, [sp, #28]
 801398a:	434e      	muls	r6, r1
 801398c:	9607      	str	r6, [sp, #28]
 801398e:	3301      	adds	r3, #1
 8013990:	e7e2      	b.n	8013958 <_strtod_l+0x228>
 8013992:	f103 0c01 	add.w	ip, r3, #1
 8013996:	f1bc 0f10 	cmp.w	ip, #16
 801399a:	bfd8      	it	le
 801399c:	fb01 f909 	mulle.w	r9, r1, r9
 80139a0:	e7f5      	b.n	801398e <_strtod_l+0x25e>
 80139a2:	2d10      	cmp	r5, #16
 80139a4:	bfdc      	itt	le
 80139a6:	230a      	movle	r3, #10
 80139a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80139ac:	e7e1      	b.n	8013972 <_strtod_l+0x242>
 80139ae:	2300      	movs	r3, #0
 80139b0:	9305      	str	r3, [sp, #20]
 80139b2:	2301      	movs	r3, #1
 80139b4:	e77c      	b.n	80138b0 <_strtod_l+0x180>
 80139b6:	f04f 0c00 	mov.w	ip, #0
 80139ba:	f108 0202 	add.w	r2, r8, #2
 80139be:	9217      	str	r2, [sp, #92]	; 0x5c
 80139c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80139c4:	e785      	b.n	80138d2 <_strtod_l+0x1a2>
 80139c6:	f04f 0c01 	mov.w	ip, #1
 80139ca:	e7f6      	b.n	80139ba <_strtod_l+0x28a>
 80139cc:	08025894 	.word	0x08025894
 80139d0:	080255e4 	.word	0x080255e4
 80139d4:	7ff00000 	.word	0x7ff00000
 80139d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80139da:	1c51      	adds	r1, r2, #1
 80139dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80139de:	7852      	ldrb	r2, [r2, #1]
 80139e0:	2a30      	cmp	r2, #48	; 0x30
 80139e2:	d0f9      	beq.n	80139d8 <_strtod_l+0x2a8>
 80139e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80139e8:	2908      	cmp	r1, #8
 80139ea:	f63f af79 	bhi.w	80138e0 <_strtod_l+0x1b0>
 80139ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80139f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80139f4:	9206      	str	r2, [sp, #24]
 80139f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80139f8:	1c51      	adds	r1, r2, #1
 80139fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80139fc:	7852      	ldrb	r2, [r2, #1]
 80139fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013a02:	2e09      	cmp	r6, #9
 8013a04:	d937      	bls.n	8013a76 <_strtod_l+0x346>
 8013a06:	9e06      	ldr	r6, [sp, #24]
 8013a08:	1b89      	subs	r1, r1, r6
 8013a0a:	2908      	cmp	r1, #8
 8013a0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013a10:	dc02      	bgt.n	8013a18 <_strtod_l+0x2e8>
 8013a12:	4576      	cmp	r6, lr
 8013a14:	bfa8      	it	ge
 8013a16:	4676      	movge	r6, lr
 8013a18:	f1bc 0f00 	cmp.w	ip, #0
 8013a1c:	d000      	beq.n	8013a20 <_strtod_l+0x2f0>
 8013a1e:	4276      	negs	r6, r6
 8013a20:	2d00      	cmp	r5, #0
 8013a22:	d14d      	bne.n	8013ac0 <_strtod_l+0x390>
 8013a24:	9904      	ldr	r1, [sp, #16]
 8013a26:	4301      	orrs	r1, r0
 8013a28:	f47f aec6 	bne.w	80137b8 <_strtod_l+0x88>
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f47f aee1 	bne.w	80137f4 <_strtod_l+0xc4>
 8013a32:	2a69      	cmp	r2, #105	; 0x69
 8013a34:	d027      	beq.n	8013a86 <_strtod_l+0x356>
 8013a36:	dc24      	bgt.n	8013a82 <_strtod_l+0x352>
 8013a38:	2a49      	cmp	r2, #73	; 0x49
 8013a3a:	d024      	beq.n	8013a86 <_strtod_l+0x356>
 8013a3c:	2a4e      	cmp	r2, #78	; 0x4e
 8013a3e:	f47f aed9 	bne.w	80137f4 <_strtod_l+0xc4>
 8013a42:	499f      	ldr	r1, [pc, #636]	; (8013cc0 <_strtod_l+0x590>)
 8013a44:	a817      	add	r0, sp, #92	; 0x5c
 8013a46:	f002 f967 	bl	8015d18 <__match>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	f43f aed2 	beq.w	80137f4 <_strtod_l+0xc4>
 8013a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	2b28      	cmp	r3, #40	; 0x28
 8013a56:	d12d      	bne.n	8013ab4 <_strtod_l+0x384>
 8013a58:	499a      	ldr	r1, [pc, #616]	; (8013cc4 <_strtod_l+0x594>)
 8013a5a:	aa1a      	add	r2, sp, #104	; 0x68
 8013a5c:	a817      	add	r0, sp, #92	; 0x5c
 8013a5e:	f002 f96f 	bl	8015d40 <__hexnan>
 8013a62:	2805      	cmp	r0, #5
 8013a64:	d126      	bne.n	8013ab4 <_strtod_l+0x384>
 8013a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013a6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013a70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013a74:	e6a0      	b.n	80137b8 <_strtod_l+0x88>
 8013a76:	210a      	movs	r1, #10
 8013a78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013a7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a80:	e7b9      	b.n	80139f6 <_strtod_l+0x2c6>
 8013a82:	2a6e      	cmp	r2, #110	; 0x6e
 8013a84:	e7db      	b.n	8013a3e <_strtod_l+0x30e>
 8013a86:	4990      	ldr	r1, [pc, #576]	; (8013cc8 <_strtod_l+0x598>)
 8013a88:	a817      	add	r0, sp, #92	; 0x5c
 8013a8a:	f002 f945 	bl	8015d18 <__match>
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	f43f aeb0 	beq.w	80137f4 <_strtod_l+0xc4>
 8013a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a96:	498d      	ldr	r1, [pc, #564]	; (8013ccc <_strtod_l+0x59c>)
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	a817      	add	r0, sp, #92	; 0x5c
 8013a9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a9e:	f002 f93b 	bl	8015d18 <__match>
 8013aa2:	b910      	cbnz	r0, 8013aaa <_strtod_l+0x37a>
 8013aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	9317      	str	r3, [sp, #92]	; 0x5c
 8013aaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013cdc <_strtod_l+0x5ac>
 8013aae:	f04f 0a00 	mov.w	sl, #0
 8013ab2:	e681      	b.n	80137b8 <_strtod_l+0x88>
 8013ab4:	4886      	ldr	r0, [pc, #536]	; (8013cd0 <_strtod_l+0x5a0>)
 8013ab6:	f003 f89b 	bl	8016bf0 <nan>
 8013aba:	ec5b ab10 	vmov	sl, fp, d0
 8013abe:	e67b      	b.n	80137b8 <_strtod_l+0x88>
 8013ac0:	9b05      	ldr	r3, [sp, #20]
 8013ac2:	9807      	ldr	r0, [sp, #28]
 8013ac4:	1af3      	subs	r3, r6, r3
 8013ac6:	2f00      	cmp	r7, #0
 8013ac8:	bf08      	it	eq
 8013aca:	462f      	moveq	r7, r5
 8013acc:	2d10      	cmp	r5, #16
 8013ace:	9306      	str	r3, [sp, #24]
 8013ad0:	46a8      	mov	r8, r5
 8013ad2:	bfa8      	it	ge
 8013ad4:	f04f 0810 	movge.w	r8, #16
 8013ad8:	f7ec fd2c 	bl	8000534 <__aeabi_ui2d>
 8013adc:	2d09      	cmp	r5, #9
 8013ade:	4682      	mov	sl, r0
 8013ae0:	468b      	mov	fp, r1
 8013ae2:	dd13      	ble.n	8013b0c <_strtod_l+0x3dc>
 8013ae4:	4b7b      	ldr	r3, [pc, #492]	; (8013cd4 <_strtod_l+0x5a4>)
 8013ae6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013aea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013aee:	f7ec fd9b 	bl	8000628 <__aeabi_dmul>
 8013af2:	4682      	mov	sl, r0
 8013af4:	4648      	mov	r0, r9
 8013af6:	468b      	mov	fp, r1
 8013af8:	f7ec fd1c 	bl	8000534 <__aeabi_ui2d>
 8013afc:	4602      	mov	r2, r0
 8013afe:	460b      	mov	r3, r1
 8013b00:	4650      	mov	r0, sl
 8013b02:	4659      	mov	r1, fp
 8013b04:	f7ec fbda 	bl	80002bc <__adddf3>
 8013b08:	4682      	mov	sl, r0
 8013b0a:	468b      	mov	fp, r1
 8013b0c:	2d0f      	cmp	r5, #15
 8013b0e:	dc38      	bgt.n	8013b82 <_strtod_l+0x452>
 8013b10:	9b06      	ldr	r3, [sp, #24]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f43f ae50 	beq.w	80137b8 <_strtod_l+0x88>
 8013b18:	dd24      	ble.n	8013b64 <_strtod_l+0x434>
 8013b1a:	2b16      	cmp	r3, #22
 8013b1c:	dc0b      	bgt.n	8013b36 <_strtod_l+0x406>
 8013b1e:	496d      	ldr	r1, [pc, #436]	; (8013cd4 <_strtod_l+0x5a4>)
 8013b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b28:	4652      	mov	r2, sl
 8013b2a:	465b      	mov	r3, fp
 8013b2c:	f7ec fd7c 	bl	8000628 <__aeabi_dmul>
 8013b30:	4682      	mov	sl, r0
 8013b32:	468b      	mov	fp, r1
 8013b34:	e640      	b.n	80137b8 <_strtod_l+0x88>
 8013b36:	9a06      	ldr	r2, [sp, #24]
 8013b38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	db20      	blt.n	8013b82 <_strtod_l+0x452>
 8013b40:	4c64      	ldr	r4, [pc, #400]	; (8013cd4 <_strtod_l+0x5a4>)
 8013b42:	f1c5 050f 	rsb	r5, r5, #15
 8013b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013b4a:	4652      	mov	r2, sl
 8013b4c:	465b      	mov	r3, fp
 8013b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b52:	f7ec fd69 	bl	8000628 <__aeabi_dmul>
 8013b56:	9b06      	ldr	r3, [sp, #24]
 8013b58:	1b5d      	subs	r5, r3, r5
 8013b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013b62:	e7e3      	b.n	8013b2c <_strtod_l+0x3fc>
 8013b64:	9b06      	ldr	r3, [sp, #24]
 8013b66:	3316      	adds	r3, #22
 8013b68:	db0b      	blt.n	8013b82 <_strtod_l+0x452>
 8013b6a:	9b05      	ldr	r3, [sp, #20]
 8013b6c:	1b9e      	subs	r6, r3, r6
 8013b6e:	4b59      	ldr	r3, [pc, #356]	; (8013cd4 <_strtod_l+0x5a4>)
 8013b70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b78:	4650      	mov	r0, sl
 8013b7a:	4659      	mov	r1, fp
 8013b7c:	f7ec fe7e 	bl	800087c <__aeabi_ddiv>
 8013b80:	e7d6      	b.n	8013b30 <_strtod_l+0x400>
 8013b82:	9b06      	ldr	r3, [sp, #24]
 8013b84:	eba5 0808 	sub.w	r8, r5, r8
 8013b88:	4498      	add	r8, r3
 8013b8a:	f1b8 0f00 	cmp.w	r8, #0
 8013b8e:	dd74      	ble.n	8013c7a <_strtod_l+0x54a>
 8013b90:	f018 030f 	ands.w	r3, r8, #15
 8013b94:	d00a      	beq.n	8013bac <_strtod_l+0x47c>
 8013b96:	494f      	ldr	r1, [pc, #316]	; (8013cd4 <_strtod_l+0x5a4>)
 8013b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b9c:	4652      	mov	r2, sl
 8013b9e:	465b      	mov	r3, fp
 8013ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ba4:	f7ec fd40 	bl	8000628 <__aeabi_dmul>
 8013ba8:	4682      	mov	sl, r0
 8013baa:	468b      	mov	fp, r1
 8013bac:	f038 080f 	bics.w	r8, r8, #15
 8013bb0:	d04f      	beq.n	8013c52 <_strtod_l+0x522>
 8013bb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013bb6:	dd22      	ble.n	8013bfe <_strtod_l+0x4ce>
 8013bb8:	2500      	movs	r5, #0
 8013bba:	462e      	mov	r6, r5
 8013bbc:	9507      	str	r5, [sp, #28]
 8013bbe:	9505      	str	r5, [sp, #20]
 8013bc0:	2322      	movs	r3, #34	; 0x22
 8013bc2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013cdc <_strtod_l+0x5ac>
 8013bc6:	6023      	str	r3, [r4, #0]
 8013bc8:	f04f 0a00 	mov.w	sl, #0
 8013bcc:	9b07      	ldr	r3, [sp, #28]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	f43f adf2 	beq.w	80137b8 <_strtod_l+0x88>
 8013bd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f002 fa18 	bl	801600c <_Bfree>
 8013bdc:	9905      	ldr	r1, [sp, #20]
 8013bde:	4620      	mov	r0, r4
 8013be0:	f002 fa14 	bl	801600c <_Bfree>
 8013be4:	4631      	mov	r1, r6
 8013be6:	4620      	mov	r0, r4
 8013be8:	f002 fa10 	bl	801600c <_Bfree>
 8013bec:	9907      	ldr	r1, [sp, #28]
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f002 fa0c 	bl	801600c <_Bfree>
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f002 fa08 	bl	801600c <_Bfree>
 8013bfc:	e5dc      	b.n	80137b8 <_strtod_l+0x88>
 8013bfe:	4b36      	ldr	r3, [pc, #216]	; (8013cd8 <_strtod_l+0x5a8>)
 8013c00:	9304      	str	r3, [sp, #16]
 8013c02:	2300      	movs	r3, #0
 8013c04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	4699      	mov	r9, r3
 8013c0e:	f1b8 0f01 	cmp.w	r8, #1
 8013c12:	dc21      	bgt.n	8013c58 <_strtod_l+0x528>
 8013c14:	b10b      	cbz	r3, 8013c1a <_strtod_l+0x4ea>
 8013c16:	4682      	mov	sl, r0
 8013c18:	468b      	mov	fp, r1
 8013c1a:	4b2f      	ldr	r3, [pc, #188]	; (8013cd8 <_strtod_l+0x5a8>)
 8013c1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013c20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013c24:	4652      	mov	r2, sl
 8013c26:	465b      	mov	r3, fp
 8013c28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013c2c:	f7ec fcfc 	bl	8000628 <__aeabi_dmul>
 8013c30:	4b2a      	ldr	r3, [pc, #168]	; (8013cdc <_strtod_l+0x5ac>)
 8013c32:	460a      	mov	r2, r1
 8013c34:	400b      	ands	r3, r1
 8013c36:	492a      	ldr	r1, [pc, #168]	; (8013ce0 <_strtod_l+0x5b0>)
 8013c38:	428b      	cmp	r3, r1
 8013c3a:	4682      	mov	sl, r0
 8013c3c:	d8bc      	bhi.n	8013bb8 <_strtod_l+0x488>
 8013c3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013c42:	428b      	cmp	r3, r1
 8013c44:	bf86      	itte	hi
 8013c46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013ce4 <_strtod_l+0x5b4>
 8013c4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013c52:	2300      	movs	r3, #0
 8013c54:	9304      	str	r3, [sp, #16]
 8013c56:	e084      	b.n	8013d62 <_strtod_l+0x632>
 8013c58:	f018 0f01 	tst.w	r8, #1
 8013c5c:	d005      	beq.n	8013c6a <_strtod_l+0x53a>
 8013c5e:	9b04      	ldr	r3, [sp, #16]
 8013c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c64:	f7ec fce0 	bl	8000628 <__aeabi_dmul>
 8013c68:	2301      	movs	r3, #1
 8013c6a:	9a04      	ldr	r2, [sp, #16]
 8013c6c:	3208      	adds	r2, #8
 8013c6e:	f109 0901 	add.w	r9, r9, #1
 8013c72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c76:	9204      	str	r2, [sp, #16]
 8013c78:	e7c9      	b.n	8013c0e <_strtod_l+0x4de>
 8013c7a:	d0ea      	beq.n	8013c52 <_strtod_l+0x522>
 8013c7c:	f1c8 0800 	rsb	r8, r8, #0
 8013c80:	f018 020f 	ands.w	r2, r8, #15
 8013c84:	d00a      	beq.n	8013c9c <_strtod_l+0x56c>
 8013c86:	4b13      	ldr	r3, [pc, #76]	; (8013cd4 <_strtod_l+0x5a4>)
 8013c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c8c:	4650      	mov	r0, sl
 8013c8e:	4659      	mov	r1, fp
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	f7ec fdf2 	bl	800087c <__aeabi_ddiv>
 8013c98:	4682      	mov	sl, r0
 8013c9a:	468b      	mov	fp, r1
 8013c9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013ca0:	d0d7      	beq.n	8013c52 <_strtod_l+0x522>
 8013ca2:	f1b8 0f1f 	cmp.w	r8, #31
 8013ca6:	dd1f      	ble.n	8013ce8 <_strtod_l+0x5b8>
 8013ca8:	2500      	movs	r5, #0
 8013caa:	462e      	mov	r6, r5
 8013cac:	9507      	str	r5, [sp, #28]
 8013cae:	9505      	str	r5, [sp, #20]
 8013cb0:	2322      	movs	r3, #34	; 0x22
 8013cb2:	f04f 0a00 	mov.w	sl, #0
 8013cb6:	f04f 0b00 	mov.w	fp, #0
 8013cba:	6023      	str	r3, [r4, #0]
 8013cbc:	e786      	b.n	8013bcc <_strtod_l+0x49c>
 8013cbe:	bf00      	nop
 8013cc0:	080255bd 	.word	0x080255bd
 8013cc4:	080255f8 	.word	0x080255f8
 8013cc8:	080255b5 	.word	0x080255b5
 8013ccc:	0802573c 	.word	0x0802573c
 8013cd0:	08025a50 	.word	0x08025a50
 8013cd4:	08025930 	.word	0x08025930
 8013cd8:	08025908 	.word	0x08025908
 8013cdc:	7ff00000 	.word	0x7ff00000
 8013ce0:	7ca00000 	.word	0x7ca00000
 8013ce4:	7fefffff 	.word	0x7fefffff
 8013ce8:	f018 0310 	ands.w	r3, r8, #16
 8013cec:	bf18      	it	ne
 8013cee:	236a      	movne	r3, #106	; 0x6a
 8013cf0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80140a0 <_strtod_l+0x970>
 8013cf4:	9304      	str	r3, [sp, #16]
 8013cf6:	4650      	mov	r0, sl
 8013cf8:	4659      	mov	r1, fp
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f018 0f01 	tst.w	r8, #1
 8013d00:	d004      	beq.n	8013d0c <_strtod_l+0x5dc>
 8013d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013d06:	f7ec fc8f 	bl	8000628 <__aeabi_dmul>
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013d10:	f109 0908 	add.w	r9, r9, #8
 8013d14:	d1f2      	bne.n	8013cfc <_strtod_l+0x5cc>
 8013d16:	b10b      	cbz	r3, 8013d1c <_strtod_l+0x5ec>
 8013d18:	4682      	mov	sl, r0
 8013d1a:	468b      	mov	fp, r1
 8013d1c:	9b04      	ldr	r3, [sp, #16]
 8013d1e:	b1c3      	cbz	r3, 8013d52 <_strtod_l+0x622>
 8013d20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013d24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	4659      	mov	r1, fp
 8013d2c:	dd11      	ble.n	8013d52 <_strtod_l+0x622>
 8013d2e:	2b1f      	cmp	r3, #31
 8013d30:	f340 8124 	ble.w	8013f7c <_strtod_l+0x84c>
 8013d34:	2b34      	cmp	r3, #52	; 0x34
 8013d36:	bfde      	ittt	le
 8013d38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013d3c:	f04f 33ff 	movle.w	r3, #4294967295
 8013d40:	fa03 f202 	lslle.w	r2, r3, r2
 8013d44:	f04f 0a00 	mov.w	sl, #0
 8013d48:	bfcc      	ite	gt
 8013d4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013d4e:	ea02 0b01 	andle.w	fp, r2, r1
 8013d52:	2200      	movs	r2, #0
 8013d54:	2300      	movs	r3, #0
 8013d56:	4650      	mov	r0, sl
 8013d58:	4659      	mov	r1, fp
 8013d5a:	f7ec fecd 	bl	8000af8 <__aeabi_dcmpeq>
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	d1a2      	bne.n	8013ca8 <_strtod_l+0x578>
 8013d62:	9b07      	ldr	r3, [sp, #28]
 8013d64:	9300      	str	r3, [sp, #0]
 8013d66:	9908      	ldr	r1, [sp, #32]
 8013d68:	462b      	mov	r3, r5
 8013d6a:	463a      	mov	r2, r7
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f002 f9b5 	bl	80160dc <__s2b>
 8013d72:	9007      	str	r0, [sp, #28]
 8013d74:	2800      	cmp	r0, #0
 8013d76:	f43f af1f 	beq.w	8013bb8 <_strtod_l+0x488>
 8013d7a:	9b05      	ldr	r3, [sp, #20]
 8013d7c:	1b9e      	subs	r6, r3, r6
 8013d7e:	9b06      	ldr	r3, [sp, #24]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	bfb4      	ite	lt
 8013d84:	4633      	movlt	r3, r6
 8013d86:	2300      	movge	r3, #0
 8013d88:	930c      	str	r3, [sp, #48]	; 0x30
 8013d8a:	9b06      	ldr	r3, [sp, #24]
 8013d8c:	2500      	movs	r5, #0
 8013d8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d92:	9312      	str	r3, [sp, #72]	; 0x48
 8013d94:	462e      	mov	r6, r5
 8013d96:	9b07      	ldr	r3, [sp, #28]
 8013d98:	4620      	mov	r0, r4
 8013d9a:	6859      	ldr	r1, [r3, #4]
 8013d9c:	f002 f8f6 	bl	8015f8c <_Balloc>
 8013da0:	9005      	str	r0, [sp, #20]
 8013da2:	2800      	cmp	r0, #0
 8013da4:	f43f af0c 	beq.w	8013bc0 <_strtod_l+0x490>
 8013da8:	9b07      	ldr	r3, [sp, #28]
 8013daa:	691a      	ldr	r2, [r3, #16]
 8013dac:	3202      	adds	r2, #2
 8013dae:	f103 010c 	add.w	r1, r3, #12
 8013db2:	0092      	lsls	r2, r2, #2
 8013db4:	300c      	adds	r0, #12
 8013db6:	f7fe ff27 	bl	8012c08 <memcpy>
 8013dba:	ec4b ab10 	vmov	d0, sl, fp
 8013dbe:	aa1a      	add	r2, sp, #104	; 0x68
 8013dc0:	a919      	add	r1, sp, #100	; 0x64
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f002 fcd0 	bl	8016768 <__d2b>
 8013dc8:	ec4b ab18 	vmov	d8, sl, fp
 8013dcc:	9018      	str	r0, [sp, #96]	; 0x60
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f43f aef6 	beq.w	8013bc0 <_strtod_l+0x490>
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f002 fa1a 	bl	8016210 <__i2b>
 8013ddc:	4606      	mov	r6, r0
 8013dde:	2800      	cmp	r0, #0
 8013de0:	f43f aeee 	beq.w	8013bc0 <_strtod_l+0x490>
 8013de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013de6:	9904      	ldr	r1, [sp, #16]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	bfab      	itete	ge
 8013dec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013dee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013df0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013df2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013df6:	bfac      	ite	ge
 8013df8:	eb03 0902 	addge.w	r9, r3, r2
 8013dfc:	1ad7      	sublt	r7, r2, r3
 8013dfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013e00:	eba3 0801 	sub.w	r8, r3, r1
 8013e04:	4490      	add	r8, r2
 8013e06:	4ba1      	ldr	r3, [pc, #644]	; (801408c <_strtod_l+0x95c>)
 8013e08:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e0c:	4598      	cmp	r8, r3
 8013e0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013e12:	f280 80c7 	bge.w	8013fa4 <_strtod_l+0x874>
 8013e16:	eba3 0308 	sub.w	r3, r3, r8
 8013e1a:	2b1f      	cmp	r3, #31
 8013e1c:	eba2 0203 	sub.w	r2, r2, r3
 8013e20:	f04f 0101 	mov.w	r1, #1
 8013e24:	f300 80b1 	bgt.w	8013f8a <_strtod_l+0x85a>
 8013e28:	fa01 f303 	lsl.w	r3, r1, r3
 8013e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8013e2e:	2300      	movs	r3, #0
 8013e30:	9308      	str	r3, [sp, #32]
 8013e32:	eb09 0802 	add.w	r8, r9, r2
 8013e36:	9b04      	ldr	r3, [sp, #16]
 8013e38:	45c1      	cmp	r9, r8
 8013e3a:	4417      	add	r7, r2
 8013e3c:	441f      	add	r7, r3
 8013e3e:	464b      	mov	r3, r9
 8013e40:	bfa8      	it	ge
 8013e42:	4643      	movge	r3, r8
 8013e44:	42bb      	cmp	r3, r7
 8013e46:	bfa8      	it	ge
 8013e48:	463b      	movge	r3, r7
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	bfc2      	ittt	gt
 8013e4e:	eba8 0803 	subgt.w	r8, r8, r3
 8013e52:	1aff      	subgt	r7, r7, r3
 8013e54:	eba9 0903 	subgt.w	r9, r9, r3
 8013e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	dd17      	ble.n	8013e8e <_strtod_l+0x75e>
 8013e5e:	4631      	mov	r1, r6
 8013e60:	461a      	mov	r2, r3
 8013e62:	4620      	mov	r0, r4
 8013e64:	f002 fa94 	bl	8016390 <__pow5mult>
 8013e68:	4606      	mov	r6, r0
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	f43f aea8 	beq.w	8013bc0 <_strtod_l+0x490>
 8013e70:	4601      	mov	r1, r0
 8013e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e74:	4620      	mov	r0, r4
 8013e76:	f002 f9e1 	bl	801623c <__multiply>
 8013e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	f43f ae9f 	beq.w	8013bc0 <_strtod_l+0x490>
 8013e82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e84:	4620      	mov	r0, r4
 8013e86:	f002 f8c1 	bl	801600c <_Bfree>
 8013e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e8c:	9318      	str	r3, [sp, #96]	; 0x60
 8013e8e:	f1b8 0f00 	cmp.w	r8, #0
 8013e92:	f300 808c 	bgt.w	8013fae <_strtod_l+0x87e>
 8013e96:	9b06      	ldr	r3, [sp, #24]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	dd08      	ble.n	8013eae <_strtod_l+0x77e>
 8013e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e9e:	9905      	ldr	r1, [sp, #20]
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f002 fa75 	bl	8016390 <__pow5mult>
 8013ea6:	9005      	str	r0, [sp, #20]
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	f43f ae89 	beq.w	8013bc0 <_strtod_l+0x490>
 8013eae:	2f00      	cmp	r7, #0
 8013eb0:	dd08      	ble.n	8013ec4 <_strtod_l+0x794>
 8013eb2:	9905      	ldr	r1, [sp, #20]
 8013eb4:	463a      	mov	r2, r7
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f002 fac4 	bl	8016444 <__lshift>
 8013ebc:	9005      	str	r0, [sp, #20]
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	f43f ae7e 	beq.w	8013bc0 <_strtod_l+0x490>
 8013ec4:	f1b9 0f00 	cmp.w	r9, #0
 8013ec8:	dd08      	ble.n	8013edc <_strtod_l+0x7ac>
 8013eca:	4631      	mov	r1, r6
 8013ecc:	464a      	mov	r2, r9
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f002 fab8 	bl	8016444 <__lshift>
 8013ed4:	4606      	mov	r6, r0
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	f43f ae72 	beq.w	8013bc0 <_strtod_l+0x490>
 8013edc:	9a05      	ldr	r2, [sp, #20]
 8013ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	f002 fb3b 	bl	801655c <__mdiff>
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	f43f ae69 	beq.w	8013bc0 <_strtod_l+0x490>
 8013eee:	68c3      	ldr	r3, [r0, #12]
 8013ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	60c3      	str	r3, [r0, #12]
 8013ef6:	4631      	mov	r1, r6
 8013ef8:	f002 fb14 	bl	8016524 <__mcmp>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	da60      	bge.n	8013fc2 <_strtod_l+0x892>
 8013f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f02:	ea53 030a 	orrs.w	r3, r3, sl
 8013f06:	f040 8082 	bne.w	801400e <_strtod_l+0x8de>
 8013f0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d17d      	bne.n	801400e <_strtod_l+0x8de>
 8013f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f16:	0d1b      	lsrs	r3, r3, #20
 8013f18:	051b      	lsls	r3, r3, #20
 8013f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f1e:	d976      	bls.n	801400e <_strtod_l+0x8de>
 8013f20:	696b      	ldr	r3, [r5, #20]
 8013f22:	b913      	cbnz	r3, 8013f2a <_strtod_l+0x7fa>
 8013f24:	692b      	ldr	r3, [r5, #16]
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	dd71      	ble.n	801400e <_strtod_l+0x8de>
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f002 fa88 	bl	8016444 <__lshift>
 8013f34:	4631      	mov	r1, r6
 8013f36:	4605      	mov	r5, r0
 8013f38:	f002 faf4 	bl	8016524 <__mcmp>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	dd66      	ble.n	801400e <_strtod_l+0x8de>
 8013f40:	9904      	ldr	r1, [sp, #16]
 8013f42:	4a53      	ldr	r2, [pc, #332]	; (8014090 <_strtod_l+0x960>)
 8013f44:	465b      	mov	r3, fp
 8013f46:	2900      	cmp	r1, #0
 8013f48:	f000 8081 	beq.w	801404e <_strtod_l+0x91e>
 8013f4c:	ea02 010b 	and.w	r1, r2, fp
 8013f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013f54:	dc7b      	bgt.n	801404e <_strtod_l+0x91e>
 8013f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013f5a:	f77f aea9 	ble.w	8013cb0 <_strtod_l+0x580>
 8013f5e:	4b4d      	ldr	r3, [pc, #308]	; (8014094 <_strtod_l+0x964>)
 8013f60:	4650      	mov	r0, sl
 8013f62:	4659      	mov	r1, fp
 8013f64:	2200      	movs	r2, #0
 8013f66:	f7ec fb5f 	bl	8000628 <__aeabi_dmul>
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	4303      	orrs	r3, r0
 8013f6e:	bf08      	it	eq
 8013f70:	2322      	moveq	r3, #34	; 0x22
 8013f72:	4682      	mov	sl, r0
 8013f74:	468b      	mov	fp, r1
 8013f76:	bf08      	it	eq
 8013f78:	6023      	streq	r3, [r4, #0]
 8013f7a:	e62b      	b.n	8013bd4 <_strtod_l+0x4a4>
 8013f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f80:	fa02 f303 	lsl.w	r3, r2, r3
 8013f84:	ea03 0a0a 	and.w	sl, r3, sl
 8013f88:	e6e3      	b.n	8013d52 <_strtod_l+0x622>
 8013f8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013f8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013f92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013f96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013f9a:	fa01 f308 	lsl.w	r3, r1, r8
 8013f9e:	9308      	str	r3, [sp, #32]
 8013fa0:	910d      	str	r1, [sp, #52]	; 0x34
 8013fa2:	e746      	b.n	8013e32 <_strtod_l+0x702>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	9308      	str	r3, [sp, #32]
 8013fa8:	2301      	movs	r3, #1
 8013faa:	930d      	str	r3, [sp, #52]	; 0x34
 8013fac:	e741      	b.n	8013e32 <_strtod_l+0x702>
 8013fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013fb0:	4642      	mov	r2, r8
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f002 fa46 	bl	8016444 <__lshift>
 8013fb8:	9018      	str	r0, [sp, #96]	; 0x60
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	f47f af6b 	bne.w	8013e96 <_strtod_l+0x766>
 8013fc0:	e5fe      	b.n	8013bc0 <_strtod_l+0x490>
 8013fc2:	465f      	mov	r7, fp
 8013fc4:	d16e      	bne.n	80140a4 <_strtod_l+0x974>
 8013fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013fc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fcc:	b342      	cbz	r2, 8014020 <_strtod_l+0x8f0>
 8013fce:	4a32      	ldr	r2, [pc, #200]	; (8014098 <_strtod_l+0x968>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d128      	bne.n	8014026 <_strtod_l+0x8f6>
 8013fd4:	9b04      	ldr	r3, [sp, #16]
 8013fd6:	4651      	mov	r1, sl
 8013fd8:	b1eb      	cbz	r3, 8014016 <_strtod_l+0x8e6>
 8013fda:	4b2d      	ldr	r3, [pc, #180]	; (8014090 <_strtod_l+0x960>)
 8013fdc:	403b      	ands	r3, r7
 8013fde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe6:	d819      	bhi.n	801401c <_strtod_l+0x8ec>
 8013fe8:	0d1b      	lsrs	r3, r3, #20
 8013fea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013fee:	fa02 f303 	lsl.w	r3, r2, r3
 8013ff2:	4299      	cmp	r1, r3
 8013ff4:	d117      	bne.n	8014026 <_strtod_l+0x8f6>
 8013ff6:	4b29      	ldr	r3, [pc, #164]	; (801409c <_strtod_l+0x96c>)
 8013ff8:	429f      	cmp	r7, r3
 8013ffa:	d102      	bne.n	8014002 <_strtod_l+0x8d2>
 8013ffc:	3101      	adds	r1, #1
 8013ffe:	f43f addf 	beq.w	8013bc0 <_strtod_l+0x490>
 8014002:	4b23      	ldr	r3, [pc, #140]	; (8014090 <_strtod_l+0x960>)
 8014004:	403b      	ands	r3, r7
 8014006:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801400a:	f04f 0a00 	mov.w	sl, #0
 801400e:	9b04      	ldr	r3, [sp, #16]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1a4      	bne.n	8013f5e <_strtod_l+0x82e>
 8014014:	e5de      	b.n	8013bd4 <_strtod_l+0x4a4>
 8014016:	f04f 33ff 	mov.w	r3, #4294967295
 801401a:	e7ea      	b.n	8013ff2 <_strtod_l+0x8c2>
 801401c:	4613      	mov	r3, r2
 801401e:	e7e8      	b.n	8013ff2 <_strtod_l+0x8c2>
 8014020:	ea53 030a 	orrs.w	r3, r3, sl
 8014024:	d08c      	beq.n	8013f40 <_strtod_l+0x810>
 8014026:	9b08      	ldr	r3, [sp, #32]
 8014028:	b1db      	cbz	r3, 8014062 <_strtod_l+0x932>
 801402a:	423b      	tst	r3, r7
 801402c:	d0ef      	beq.n	801400e <_strtod_l+0x8de>
 801402e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014030:	9a04      	ldr	r2, [sp, #16]
 8014032:	4650      	mov	r0, sl
 8014034:	4659      	mov	r1, fp
 8014036:	b1c3      	cbz	r3, 801406a <_strtod_l+0x93a>
 8014038:	f7ff fb5e 	bl	80136f8 <sulp>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	ec51 0b18 	vmov	r0, r1, d8
 8014044:	f7ec f93a 	bl	80002bc <__adddf3>
 8014048:	4682      	mov	sl, r0
 801404a:	468b      	mov	fp, r1
 801404c:	e7df      	b.n	801400e <_strtod_l+0x8de>
 801404e:	4013      	ands	r3, r2
 8014050:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014054:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014058:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801405c:	f04f 3aff 	mov.w	sl, #4294967295
 8014060:	e7d5      	b.n	801400e <_strtod_l+0x8de>
 8014062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014064:	ea13 0f0a 	tst.w	r3, sl
 8014068:	e7e0      	b.n	801402c <_strtod_l+0x8fc>
 801406a:	f7ff fb45 	bl	80136f8 <sulp>
 801406e:	4602      	mov	r2, r0
 8014070:	460b      	mov	r3, r1
 8014072:	ec51 0b18 	vmov	r0, r1, d8
 8014076:	f7ec f91f 	bl	80002b8 <__aeabi_dsub>
 801407a:	2200      	movs	r2, #0
 801407c:	2300      	movs	r3, #0
 801407e:	4682      	mov	sl, r0
 8014080:	468b      	mov	fp, r1
 8014082:	f7ec fd39 	bl	8000af8 <__aeabi_dcmpeq>
 8014086:	2800      	cmp	r0, #0
 8014088:	d0c1      	beq.n	801400e <_strtod_l+0x8de>
 801408a:	e611      	b.n	8013cb0 <_strtod_l+0x580>
 801408c:	fffffc02 	.word	0xfffffc02
 8014090:	7ff00000 	.word	0x7ff00000
 8014094:	39500000 	.word	0x39500000
 8014098:	000fffff 	.word	0x000fffff
 801409c:	7fefffff 	.word	0x7fefffff
 80140a0:	08025610 	.word	0x08025610
 80140a4:	4631      	mov	r1, r6
 80140a6:	4628      	mov	r0, r5
 80140a8:	f002 fbba 	bl	8016820 <__ratio>
 80140ac:	ec59 8b10 	vmov	r8, r9, d0
 80140b0:	ee10 0a10 	vmov	r0, s0
 80140b4:	2200      	movs	r2, #0
 80140b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80140ba:	4649      	mov	r1, r9
 80140bc:	f7ec fd30 	bl	8000b20 <__aeabi_dcmple>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	d07a      	beq.n	80141ba <_strtod_l+0xa8a>
 80140c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d04a      	beq.n	8014160 <_strtod_l+0xa30>
 80140ca:	4b95      	ldr	r3, [pc, #596]	; (8014320 <_strtod_l+0xbf0>)
 80140cc:	2200      	movs	r2, #0
 80140ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80140d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014320 <_strtod_l+0xbf0>
 80140d6:	f04f 0800 	mov.w	r8, #0
 80140da:	4b92      	ldr	r3, [pc, #584]	; (8014324 <_strtod_l+0xbf4>)
 80140dc:	403b      	ands	r3, r7
 80140de:	930d      	str	r3, [sp, #52]	; 0x34
 80140e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140e2:	4b91      	ldr	r3, [pc, #580]	; (8014328 <_strtod_l+0xbf8>)
 80140e4:	429a      	cmp	r2, r3
 80140e6:	f040 80b0 	bne.w	801424a <_strtod_l+0xb1a>
 80140ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80140ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80140f2:	ec4b ab10 	vmov	d0, sl, fp
 80140f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80140fa:	f002 fab9 	bl	8016670 <__ulp>
 80140fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014102:	ec53 2b10 	vmov	r2, r3, d0
 8014106:	f7ec fa8f 	bl	8000628 <__aeabi_dmul>
 801410a:	4652      	mov	r2, sl
 801410c:	465b      	mov	r3, fp
 801410e:	f7ec f8d5 	bl	80002bc <__adddf3>
 8014112:	460b      	mov	r3, r1
 8014114:	4983      	ldr	r1, [pc, #524]	; (8014324 <_strtod_l+0xbf4>)
 8014116:	4a85      	ldr	r2, [pc, #532]	; (801432c <_strtod_l+0xbfc>)
 8014118:	4019      	ands	r1, r3
 801411a:	4291      	cmp	r1, r2
 801411c:	4682      	mov	sl, r0
 801411e:	d960      	bls.n	80141e2 <_strtod_l+0xab2>
 8014120:	ee18 3a90 	vmov	r3, s17
 8014124:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014128:	4293      	cmp	r3, r2
 801412a:	d104      	bne.n	8014136 <_strtod_l+0xa06>
 801412c:	ee18 3a10 	vmov	r3, s16
 8014130:	3301      	adds	r3, #1
 8014132:	f43f ad45 	beq.w	8013bc0 <_strtod_l+0x490>
 8014136:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014338 <_strtod_l+0xc08>
 801413a:	f04f 3aff 	mov.w	sl, #4294967295
 801413e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014140:	4620      	mov	r0, r4
 8014142:	f001 ff63 	bl	801600c <_Bfree>
 8014146:	9905      	ldr	r1, [sp, #20]
 8014148:	4620      	mov	r0, r4
 801414a:	f001 ff5f 	bl	801600c <_Bfree>
 801414e:	4631      	mov	r1, r6
 8014150:	4620      	mov	r0, r4
 8014152:	f001 ff5b 	bl	801600c <_Bfree>
 8014156:	4629      	mov	r1, r5
 8014158:	4620      	mov	r0, r4
 801415a:	f001 ff57 	bl	801600c <_Bfree>
 801415e:	e61a      	b.n	8013d96 <_strtod_l+0x666>
 8014160:	f1ba 0f00 	cmp.w	sl, #0
 8014164:	d11b      	bne.n	801419e <_strtod_l+0xa6e>
 8014166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801416a:	b9f3      	cbnz	r3, 80141aa <_strtod_l+0xa7a>
 801416c:	4b6c      	ldr	r3, [pc, #432]	; (8014320 <_strtod_l+0xbf0>)
 801416e:	2200      	movs	r2, #0
 8014170:	4640      	mov	r0, r8
 8014172:	4649      	mov	r1, r9
 8014174:	f7ec fcca 	bl	8000b0c <__aeabi_dcmplt>
 8014178:	b9d0      	cbnz	r0, 80141b0 <_strtod_l+0xa80>
 801417a:	4640      	mov	r0, r8
 801417c:	4649      	mov	r1, r9
 801417e:	4b6c      	ldr	r3, [pc, #432]	; (8014330 <_strtod_l+0xc00>)
 8014180:	2200      	movs	r2, #0
 8014182:	f7ec fa51 	bl	8000628 <__aeabi_dmul>
 8014186:	4680      	mov	r8, r0
 8014188:	4689      	mov	r9, r1
 801418a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801418e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014192:	9315      	str	r3, [sp, #84]	; 0x54
 8014194:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014198:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801419c:	e79d      	b.n	80140da <_strtod_l+0x9aa>
 801419e:	f1ba 0f01 	cmp.w	sl, #1
 80141a2:	d102      	bne.n	80141aa <_strtod_l+0xa7a>
 80141a4:	2f00      	cmp	r7, #0
 80141a6:	f43f ad83 	beq.w	8013cb0 <_strtod_l+0x580>
 80141aa:	4b62      	ldr	r3, [pc, #392]	; (8014334 <_strtod_l+0xc04>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	e78e      	b.n	80140ce <_strtod_l+0x99e>
 80141b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014330 <_strtod_l+0xc00>
 80141b4:	f04f 0800 	mov.w	r8, #0
 80141b8:	e7e7      	b.n	801418a <_strtod_l+0xa5a>
 80141ba:	4b5d      	ldr	r3, [pc, #372]	; (8014330 <_strtod_l+0xc00>)
 80141bc:	4640      	mov	r0, r8
 80141be:	4649      	mov	r1, r9
 80141c0:	2200      	movs	r2, #0
 80141c2:	f7ec fa31 	bl	8000628 <__aeabi_dmul>
 80141c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141c8:	4680      	mov	r8, r0
 80141ca:	4689      	mov	r9, r1
 80141cc:	b933      	cbnz	r3, 80141dc <_strtod_l+0xaac>
 80141ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141d2:	900e      	str	r0, [sp, #56]	; 0x38
 80141d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80141d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80141da:	e7dd      	b.n	8014198 <_strtod_l+0xa68>
 80141dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80141e0:	e7f9      	b.n	80141d6 <_strtod_l+0xaa6>
 80141e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80141e6:	9b04      	ldr	r3, [sp, #16]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d1a8      	bne.n	801413e <_strtod_l+0xa0e>
 80141ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80141f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141f2:	0d1b      	lsrs	r3, r3, #20
 80141f4:	051b      	lsls	r3, r3, #20
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d1a1      	bne.n	801413e <_strtod_l+0xa0e>
 80141fa:	4640      	mov	r0, r8
 80141fc:	4649      	mov	r1, r9
 80141fe:	f7ec fd73 	bl	8000ce8 <__aeabi_d2lz>
 8014202:	f7ec f9e3 	bl	80005cc <__aeabi_l2d>
 8014206:	4602      	mov	r2, r0
 8014208:	460b      	mov	r3, r1
 801420a:	4640      	mov	r0, r8
 801420c:	4649      	mov	r1, r9
 801420e:	f7ec f853 	bl	80002b8 <__aeabi_dsub>
 8014212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014218:	ea43 030a 	orr.w	r3, r3, sl
 801421c:	4313      	orrs	r3, r2
 801421e:	4680      	mov	r8, r0
 8014220:	4689      	mov	r9, r1
 8014222:	d055      	beq.n	80142d0 <_strtod_l+0xba0>
 8014224:	a336      	add	r3, pc, #216	; (adr r3, 8014300 <_strtod_l+0xbd0>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	f7ec fc6f 	bl	8000b0c <__aeabi_dcmplt>
 801422e:	2800      	cmp	r0, #0
 8014230:	f47f acd0 	bne.w	8013bd4 <_strtod_l+0x4a4>
 8014234:	a334      	add	r3, pc, #208	; (adr r3, 8014308 <_strtod_l+0xbd8>)
 8014236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423a:	4640      	mov	r0, r8
 801423c:	4649      	mov	r1, r9
 801423e:	f7ec fc83 	bl	8000b48 <__aeabi_dcmpgt>
 8014242:	2800      	cmp	r0, #0
 8014244:	f43f af7b 	beq.w	801413e <_strtod_l+0xa0e>
 8014248:	e4c4      	b.n	8013bd4 <_strtod_l+0x4a4>
 801424a:	9b04      	ldr	r3, [sp, #16]
 801424c:	b333      	cbz	r3, 801429c <_strtod_l+0xb6c>
 801424e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014250:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014254:	d822      	bhi.n	801429c <_strtod_l+0xb6c>
 8014256:	a32e      	add	r3, pc, #184	; (adr r3, 8014310 <_strtod_l+0xbe0>)
 8014258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425c:	4640      	mov	r0, r8
 801425e:	4649      	mov	r1, r9
 8014260:	f7ec fc5e 	bl	8000b20 <__aeabi_dcmple>
 8014264:	b1a0      	cbz	r0, 8014290 <_strtod_l+0xb60>
 8014266:	4649      	mov	r1, r9
 8014268:	4640      	mov	r0, r8
 801426a:	f7ec fcb5 	bl	8000bd8 <__aeabi_d2uiz>
 801426e:	2801      	cmp	r0, #1
 8014270:	bf38      	it	cc
 8014272:	2001      	movcc	r0, #1
 8014274:	f7ec f95e 	bl	8000534 <__aeabi_ui2d>
 8014278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801427a:	4680      	mov	r8, r0
 801427c:	4689      	mov	r9, r1
 801427e:	bb23      	cbnz	r3, 80142ca <_strtod_l+0xb9a>
 8014280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014284:	9010      	str	r0, [sp, #64]	; 0x40
 8014286:	9311      	str	r3, [sp, #68]	; 0x44
 8014288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801428c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014294:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014298:	1a9b      	subs	r3, r3, r2
 801429a:	9309      	str	r3, [sp, #36]	; 0x24
 801429c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80142a0:	eeb0 0a48 	vmov.f32	s0, s16
 80142a4:	eef0 0a68 	vmov.f32	s1, s17
 80142a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80142ac:	f002 f9e0 	bl	8016670 <__ulp>
 80142b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80142b4:	ec53 2b10 	vmov	r2, r3, d0
 80142b8:	f7ec f9b6 	bl	8000628 <__aeabi_dmul>
 80142bc:	ec53 2b18 	vmov	r2, r3, d8
 80142c0:	f7eb fffc 	bl	80002bc <__adddf3>
 80142c4:	4682      	mov	sl, r0
 80142c6:	468b      	mov	fp, r1
 80142c8:	e78d      	b.n	80141e6 <_strtod_l+0xab6>
 80142ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80142ce:	e7db      	b.n	8014288 <_strtod_l+0xb58>
 80142d0:	a311      	add	r3, pc, #68	; (adr r3, 8014318 <_strtod_l+0xbe8>)
 80142d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d6:	f7ec fc19 	bl	8000b0c <__aeabi_dcmplt>
 80142da:	e7b2      	b.n	8014242 <_strtod_l+0xb12>
 80142dc:	2300      	movs	r3, #0
 80142de:	930a      	str	r3, [sp, #40]	; 0x28
 80142e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80142e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142e4:	6013      	str	r3, [r2, #0]
 80142e6:	f7ff ba6b 	b.w	80137c0 <_strtod_l+0x90>
 80142ea:	2a65      	cmp	r2, #101	; 0x65
 80142ec:	f43f ab5f 	beq.w	80139ae <_strtod_l+0x27e>
 80142f0:	2a45      	cmp	r2, #69	; 0x45
 80142f2:	f43f ab5c 	beq.w	80139ae <_strtod_l+0x27e>
 80142f6:	2301      	movs	r3, #1
 80142f8:	f7ff bb94 	b.w	8013a24 <_strtod_l+0x2f4>
 80142fc:	f3af 8000 	nop.w
 8014300:	94a03595 	.word	0x94a03595
 8014304:	3fdfffff 	.word	0x3fdfffff
 8014308:	35afe535 	.word	0x35afe535
 801430c:	3fe00000 	.word	0x3fe00000
 8014310:	ffc00000 	.word	0xffc00000
 8014314:	41dfffff 	.word	0x41dfffff
 8014318:	94a03595 	.word	0x94a03595
 801431c:	3fcfffff 	.word	0x3fcfffff
 8014320:	3ff00000 	.word	0x3ff00000
 8014324:	7ff00000 	.word	0x7ff00000
 8014328:	7fe00000 	.word	0x7fe00000
 801432c:	7c9fffff 	.word	0x7c9fffff
 8014330:	3fe00000 	.word	0x3fe00000
 8014334:	bff00000 	.word	0xbff00000
 8014338:	7fefffff 	.word	0x7fefffff

0801433c <strtof>:
 801433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014340:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80143f0 <strtof+0xb4>
 8014344:	4b26      	ldr	r3, [pc, #152]	; (80143e0 <strtof+0xa4>)
 8014346:	460a      	mov	r2, r1
 8014348:	ed2d 8b02 	vpush	{d8}
 801434c:	4601      	mov	r1, r0
 801434e:	f8d8 0000 	ldr.w	r0, [r8]
 8014352:	f7ff f9ed 	bl	8013730 <_strtod_l>
 8014356:	ec55 4b10 	vmov	r4, r5, d0
 801435a:	ee10 2a10 	vmov	r2, s0
 801435e:	ee10 0a10 	vmov	r0, s0
 8014362:	462b      	mov	r3, r5
 8014364:	4629      	mov	r1, r5
 8014366:	f7ec fbf9 	bl	8000b5c <__aeabi_dcmpun>
 801436a:	b190      	cbz	r0, 8014392 <strtof+0x56>
 801436c:	2d00      	cmp	r5, #0
 801436e:	481d      	ldr	r0, [pc, #116]	; (80143e4 <strtof+0xa8>)
 8014370:	da09      	bge.n	8014386 <strtof+0x4a>
 8014372:	f002 fc45 	bl	8016c00 <nanf>
 8014376:	eeb1 8a40 	vneg.f32	s16, s0
 801437a:	eeb0 0a48 	vmov.f32	s0, s16
 801437e:	ecbd 8b02 	vpop	{d8}
 8014382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014386:	ecbd 8b02 	vpop	{d8}
 801438a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801438e:	f002 bc37 	b.w	8016c00 <nanf>
 8014392:	4620      	mov	r0, r4
 8014394:	4629      	mov	r1, r5
 8014396:	f7ec fc3f 	bl	8000c18 <__aeabi_d2f>
 801439a:	ee08 0a10 	vmov	s16, r0
 801439e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80143e8 <strtof+0xac>
 80143a2:	eeb0 7ac8 	vabs.f32	s14, s16
 80143a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80143aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ae:	dde4      	ble.n	801437a <strtof+0x3e>
 80143b0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80143b4:	4b0d      	ldr	r3, [pc, #52]	; (80143ec <strtof+0xb0>)
 80143b6:	f04f 32ff 	mov.w	r2, #4294967295
 80143ba:	4620      	mov	r0, r4
 80143bc:	4639      	mov	r1, r7
 80143be:	f7ec fbcd 	bl	8000b5c <__aeabi_dcmpun>
 80143c2:	b940      	cbnz	r0, 80143d6 <strtof+0x9a>
 80143c4:	4b09      	ldr	r3, [pc, #36]	; (80143ec <strtof+0xb0>)
 80143c6:	f04f 32ff 	mov.w	r2, #4294967295
 80143ca:	4620      	mov	r0, r4
 80143cc:	4639      	mov	r1, r7
 80143ce:	f7ec fba7 	bl	8000b20 <__aeabi_dcmple>
 80143d2:	2800      	cmp	r0, #0
 80143d4:	d0d1      	beq.n	801437a <strtof+0x3e>
 80143d6:	f8d8 3000 	ldr.w	r3, [r8]
 80143da:	2222      	movs	r2, #34	; 0x22
 80143dc:	601a      	str	r2, [r3, #0]
 80143de:	e7cc      	b.n	801437a <strtof+0x3e>
 80143e0:	20000130 	.word	0x20000130
 80143e4:	08025a50 	.word	0x08025a50
 80143e8:	7f7fffff 	.word	0x7f7fffff
 80143ec:	7fefffff 	.word	0x7fefffff
 80143f0:	200000c8 	.word	0x200000c8

080143f4 <__strtok_r>:
 80143f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143f6:	b908      	cbnz	r0, 80143fc <__strtok_r+0x8>
 80143f8:	6810      	ldr	r0, [r2, #0]
 80143fa:	b188      	cbz	r0, 8014420 <__strtok_r+0x2c>
 80143fc:	4604      	mov	r4, r0
 80143fe:	4620      	mov	r0, r4
 8014400:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014404:	460f      	mov	r7, r1
 8014406:	f817 6b01 	ldrb.w	r6, [r7], #1
 801440a:	b91e      	cbnz	r6, 8014414 <__strtok_r+0x20>
 801440c:	b965      	cbnz	r5, 8014428 <__strtok_r+0x34>
 801440e:	6015      	str	r5, [r2, #0]
 8014410:	4628      	mov	r0, r5
 8014412:	e005      	b.n	8014420 <__strtok_r+0x2c>
 8014414:	42b5      	cmp	r5, r6
 8014416:	d1f6      	bne.n	8014406 <__strtok_r+0x12>
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1f0      	bne.n	80143fe <__strtok_r+0xa>
 801441c:	6014      	str	r4, [r2, #0]
 801441e:	7003      	strb	r3, [r0, #0]
 8014420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014422:	461c      	mov	r4, r3
 8014424:	e00c      	b.n	8014440 <__strtok_r+0x4c>
 8014426:	b915      	cbnz	r5, 801442e <__strtok_r+0x3a>
 8014428:	f814 3b01 	ldrb.w	r3, [r4], #1
 801442c:	460e      	mov	r6, r1
 801442e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014432:	42ab      	cmp	r3, r5
 8014434:	d1f7      	bne.n	8014426 <__strtok_r+0x32>
 8014436:	2b00      	cmp	r3, #0
 8014438:	d0f3      	beq.n	8014422 <__strtok_r+0x2e>
 801443a:	2300      	movs	r3, #0
 801443c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014440:	6014      	str	r4, [r2, #0]
 8014442:	e7ed      	b.n	8014420 <__strtok_r+0x2c>

08014444 <strtok_r>:
 8014444:	2301      	movs	r3, #1
 8014446:	f7ff bfd5 	b.w	80143f4 <__strtok_r>
	...

0801444c <_strtoul_l.constprop.0>:
 801444c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014450:	4f36      	ldr	r7, [pc, #216]	; (801452c <_strtoul_l.constprop.0+0xe0>)
 8014452:	4686      	mov	lr, r0
 8014454:	460d      	mov	r5, r1
 8014456:	4628      	mov	r0, r5
 8014458:	f815 4b01 	ldrb.w	r4, [r5], #1
 801445c:	5de6      	ldrb	r6, [r4, r7]
 801445e:	f016 0608 	ands.w	r6, r6, #8
 8014462:	d1f8      	bne.n	8014456 <_strtoul_l.constprop.0+0xa>
 8014464:	2c2d      	cmp	r4, #45	; 0x2d
 8014466:	d12f      	bne.n	80144c8 <_strtoul_l.constprop.0+0x7c>
 8014468:	782c      	ldrb	r4, [r5, #0]
 801446a:	2601      	movs	r6, #1
 801446c:	1c85      	adds	r5, r0, #2
 801446e:	2b00      	cmp	r3, #0
 8014470:	d057      	beq.n	8014522 <_strtoul_l.constprop.0+0xd6>
 8014472:	2b10      	cmp	r3, #16
 8014474:	d109      	bne.n	801448a <_strtoul_l.constprop.0+0x3e>
 8014476:	2c30      	cmp	r4, #48	; 0x30
 8014478:	d107      	bne.n	801448a <_strtoul_l.constprop.0+0x3e>
 801447a:	7828      	ldrb	r0, [r5, #0]
 801447c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014480:	2858      	cmp	r0, #88	; 0x58
 8014482:	d149      	bne.n	8014518 <_strtoul_l.constprop.0+0xcc>
 8014484:	786c      	ldrb	r4, [r5, #1]
 8014486:	2310      	movs	r3, #16
 8014488:	3502      	adds	r5, #2
 801448a:	f04f 38ff 	mov.w	r8, #4294967295
 801448e:	2700      	movs	r7, #0
 8014490:	fbb8 f8f3 	udiv	r8, r8, r3
 8014494:	fb03 f908 	mul.w	r9, r3, r8
 8014498:	ea6f 0909 	mvn.w	r9, r9
 801449c:	4638      	mov	r0, r7
 801449e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80144a2:	f1bc 0f09 	cmp.w	ip, #9
 80144a6:	d814      	bhi.n	80144d2 <_strtoul_l.constprop.0+0x86>
 80144a8:	4664      	mov	r4, ip
 80144aa:	42a3      	cmp	r3, r4
 80144ac:	dd22      	ble.n	80144f4 <_strtoul_l.constprop.0+0xa8>
 80144ae:	2f00      	cmp	r7, #0
 80144b0:	db1d      	blt.n	80144ee <_strtoul_l.constprop.0+0xa2>
 80144b2:	4580      	cmp	r8, r0
 80144b4:	d31b      	bcc.n	80144ee <_strtoul_l.constprop.0+0xa2>
 80144b6:	d101      	bne.n	80144bc <_strtoul_l.constprop.0+0x70>
 80144b8:	45a1      	cmp	r9, r4
 80144ba:	db18      	blt.n	80144ee <_strtoul_l.constprop.0+0xa2>
 80144bc:	fb00 4003 	mla	r0, r0, r3, r4
 80144c0:	2701      	movs	r7, #1
 80144c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144c6:	e7ea      	b.n	801449e <_strtoul_l.constprop.0+0x52>
 80144c8:	2c2b      	cmp	r4, #43	; 0x2b
 80144ca:	bf04      	itt	eq
 80144cc:	782c      	ldrbeq	r4, [r5, #0]
 80144ce:	1c85      	addeq	r5, r0, #2
 80144d0:	e7cd      	b.n	801446e <_strtoul_l.constprop.0+0x22>
 80144d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80144d6:	f1bc 0f19 	cmp.w	ip, #25
 80144da:	d801      	bhi.n	80144e0 <_strtoul_l.constprop.0+0x94>
 80144dc:	3c37      	subs	r4, #55	; 0x37
 80144de:	e7e4      	b.n	80144aa <_strtoul_l.constprop.0+0x5e>
 80144e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80144e4:	f1bc 0f19 	cmp.w	ip, #25
 80144e8:	d804      	bhi.n	80144f4 <_strtoul_l.constprop.0+0xa8>
 80144ea:	3c57      	subs	r4, #87	; 0x57
 80144ec:	e7dd      	b.n	80144aa <_strtoul_l.constprop.0+0x5e>
 80144ee:	f04f 37ff 	mov.w	r7, #4294967295
 80144f2:	e7e6      	b.n	80144c2 <_strtoul_l.constprop.0+0x76>
 80144f4:	2f00      	cmp	r7, #0
 80144f6:	da07      	bge.n	8014508 <_strtoul_l.constprop.0+0xbc>
 80144f8:	2322      	movs	r3, #34	; 0x22
 80144fa:	f8ce 3000 	str.w	r3, [lr]
 80144fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014502:	b932      	cbnz	r2, 8014512 <_strtoul_l.constprop.0+0xc6>
 8014504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014508:	b106      	cbz	r6, 801450c <_strtoul_l.constprop.0+0xc0>
 801450a:	4240      	negs	r0, r0
 801450c:	2a00      	cmp	r2, #0
 801450e:	d0f9      	beq.n	8014504 <_strtoul_l.constprop.0+0xb8>
 8014510:	b107      	cbz	r7, 8014514 <_strtoul_l.constprop.0+0xc8>
 8014512:	1e69      	subs	r1, r5, #1
 8014514:	6011      	str	r1, [r2, #0]
 8014516:	e7f5      	b.n	8014504 <_strtoul_l.constprop.0+0xb8>
 8014518:	2430      	movs	r4, #48	; 0x30
 801451a:	2b00      	cmp	r3, #0
 801451c:	d1b5      	bne.n	801448a <_strtoul_l.constprop.0+0x3e>
 801451e:	2308      	movs	r3, #8
 8014520:	e7b3      	b.n	801448a <_strtoul_l.constprop.0+0x3e>
 8014522:	2c30      	cmp	r4, #48	; 0x30
 8014524:	d0a9      	beq.n	801447a <_strtoul_l.constprop.0+0x2e>
 8014526:	230a      	movs	r3, #10
 8014528:	e7af      	b.n	801448a <_strtoul_l.constprop.0+0x3e>
 801452a:	bf00      	nop
 801452c:	08025639 	.word	0x08025639

08014530 <strtoul>:
 8014530:	4613      	mov	r3, r2
 8014532:	460a      	mov	r2, r1
 8014534:	4601      	mov	r1, r0
 8014536:	4802      	ldr	r0, [pc, #8]	; (8014540 <strtoul+0x10>)
 8014538:	6800      	ldr	r0, [r0, #0]
 801453a:	f7ff bf87 	b.w	801444c <_strtoul_l.constprop.0>
 801453e:	bf00      	nop
 8014540:	200000c8 	.word	0x200000c8

08014544 <_vsniprintf_r>:
 8014544:	b530      	push	{r4, r5, lr}
 8014546:	4614      	mov	r4, r2
 8014548:	2c00      	cmp	r4, #0
 801454a:	b09b      	sub	sp, #108	; 0x6c
 801454c:	4605      	mov	r5, r0
 801454e:	461a      	mov	r2, r3
 8014550:	da05      	bge.n	801455e <_vsniprintf_r+0x1a>
 8014552:	238b      	movs	r3, #139	; 0x8b
 8014554:	6003      	str	r3, [r0, #0]
 8014556:	f04f 30ff 	mov.w	r0, #4294967295
 801455a:	b01b      	add	sp, #108	; 0x6c
 801455c:	bd30      	pop	{r4, r5, pc}
 801455e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014562:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014566:	bf14      	ite	ne
 8014568:	f104 33ff 	addne.w	r3, r4, #4294967295
 801456c:	4623      	moveq	r3, r4
 801456e:	9302      	str	r3, [sp, #8]
 8014570:	9305      	str	r3, [sp, #20]
 8014572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014576:	9100      	str	r1, [sp, #0]
 8014578:	9104      	str	r1, [sp, #16]
 801457a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801457e:	4669      	mov	r1, sp
 8014580:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014582:	f002 fa35 	bl	80169f0 <_svfiprintf_r>
 8014586:	1c43      	adds	r3, r0, #1
 8014588:	bfbc      	itt	lt
 801458a:	238b      	movlt	r3, #139	; 0x8b
 801458c:	602b      	strlt	r3, [r5, #0]
 801458e:	2c00      	cmp	r4, #0
 8014590:	d0e3      	beq.n	801455a <_vsniprintf_r+0x16>
 8014592:	9b00      	ldr	r3, [sp, #0]
 8014594:	2200      	movs	r2, #0
 8014596:	701a      	strb	r2, [r3, #0]
 8014598:	e7df      	b.n	801455a <_vsniprintf_r+0x16>
	...

0801459c <vsniprintf>:
 801459c:	b507      	push	{r0, r1, r2, lr}
 801459e:	9300      	str	r3, [sp, #0]
 80145a0:	4613      	mov	r3, r2
 80145a2:	460a      	mov	r2, r1
 80145a4:	4601      	mov	r1, r0
 80145a6:	4803      	ldr	r0, [pc, #12]	; (80145b4 <vsniprintf+0x18>)
 80145a8:	6800      	ldr	r0, [r0, #0]
 80145aa:	f7ff ffcb 	bl	8014544 <_vsniprintf_r>
 80145ae:	b003      	add	sp, #12
 80145b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80145b4:	200000c8 	.word	0x200000c8

080145b8 <__swbuf_r>:
 80145b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ba:	460e      	mov	r6, r1
 80145bc:	4614      	mov	r4, r2
 80145be:	4605      	mov	r5, r0
 80145c0:	b118      	cbz	r0, 80145ca <__swbuf_r+0x12>
 80145c2:	6983      	ldr	r3, [r0, #24]
 80145c4:	b90b      	cbnz	r3, 80145ca <__swbuf_r+0x12>
 80145c6:	f001 f84b 	bl	8015660 <__sinit>
 80145ca:	4b21      	ldr	r3, [pc, #132]	; (8014650 <__swbuf_r+0x98>)
 80145cc:	429c      	cmp	r4, r3
 80145ce:	d12b      	bne.n	8014628 <__swbuf_r+0x70>
 80145d0:	686c      	ldr	r4, [r5, #4]
 80145d2:	69a3      	ldr	r3, [r4, #24]
 80145d4:	60a3      	str	r3, [r4, #8]
 80145d6:	89a3      	ldrh	r3, [r4, #12]
 80145d8:	071a      	lsls	r2, r3, #28
 80145da:	d52f      	bpl.n	801463c <__swbuf_r+0x84>
 80145dc:	6923      	ldr	r3, [r4, #16]
 80145de:	b36b      	cbz	r3, 801463c <__swbuf_r+0x84>
 80145e0:	6923      	ldr	r3, [r4, #16]
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	1ac0      	subs	r0, r0, r3
 80145e6:	6963      	ldr	r3, [r4, #20]
 80145e8:	b2f6      	uxtb	r6, r6
 80145ea:	4283      	cmp	r3, r0
 80145ec:	4637      	mov	r7, r6
 80145ee:	dc04      	bgt.n	80145fa <__swbuf_r+0x42>
 80145f0:	4621      	mov	r1, r4
 80145f2:	4628      	mov	r0, r5
 80145f4:	f000 ffa0 	bl	8015538 <_fflush_r>
 80145f8:	bb30      	cbnz	r0, 8014648 <__swbuf_r+0x90>
 80145fa:	68a3      	ldr	r3, [r4, #8]
 80145fc:	3b01      	subs	r3, #1
 80145fe:	60a3      	str	r3, [r4, #8]
 8014600:	6823      	ldr	r3, [r4, #0]
 8014602:	1c5a      	adds	r2, r3, #1
 8014604:	6022      	str	r2, [r4, #0]
 8014606:	701e      	strb	r6, [r3, #0]
 8014608:	6963      	ldr	r3, [r4, #20]
 801460a:	3001      	adds	r0, #1
 801460c:	4283      	cmp	r3, r0
 801460e:	d004      	beq.n	801461a <__swbuf_r+0x62>
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	07db      	lsls	r3, r3, #31
 8014614:	d506      	bpl.n	8014624 <__swbuf_r+0x6c>
 8014616:	2e0a      	cmp	r6, #10
 8014618:	d104      	bne.n	8014624 <__swbuf_r+0x6c>
 801461a:	4621      	mov	r1, r4
 801461c:	4628      	mov	r0, r5
 801461e:	f000 ff8b 	bl	8015538 <_fflush_r>
 8014622:	b988      	cbnz	r0, 8014648 <__swbuf_r+0x90>
 8014624:	4638      	mov	r0, r7
 8014626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014628:	4b0a      	ldr	r3, [pc, #40]	; (8014654 <__swbuf_r+0x9c>)
 801462a:	429c      	cmp	r4, r3
 801462c:	d101      	bne.n	8014632 <__swbuf_r+0x7a>
 801462e:	68ac      	ldr	r4, [r5, #8]
 8014630:	e7cf      	b.n	80145d2 <__swbuf_r+0x1a>
 8014632:	4b09      	ldr	r3, [pc, #36]	; (8014658 <__swbuf_r+0xa0>)
 8014634:	429c      	cmp	r4, r3
 8014636:	bf08      	it	eq
 8014638:	68ec      	ldreq	r4, [r5, #12]
 801463a:	e7ca      	b.n	80145d2 <__swbuf_r+0x1a>
 801463c:	4621      	mov	r1, r4
 801463e:	4628      	mov	r0, r5
 8014640:	f000 f80c 	bl	801465c <__swsetup_r>
 8014644:	2800      	cmp	r0, #0
 8014646:	d0cb      	beq.n	80145e0 <__swbuf_r+0x28>
 8014648:	f04f 37ff 	mov.w	r7, #4294967295
 801464c:	e7ea      	b.n	8014624 <__swbuf_r+0x6c>
 801464e:	bf00      	nop
 8014650:	080257ec 	.word	0x080257ec
 8014654:	0802580c 	.word	0x0802580c
 8014658:	080257cc 	.word	0x080257cc

0801465c <__swsetup_r>:
 801465c:	4b32      	ldr	r3, [pc, #200]	; (8014728 <__swsetup_r+0xcc>)
 801465e:	b570      	push	{r4, r5, r6, lr}
 8014660:	681d      	ldr	r5, [r3, #0]
 8014662:	4606      	mov	r6, r0
 8014664:	460c      	mov	r4, r1
 8014666:	b125      	cbz	r5, 8014672 <__swsetup_r+0x16>
 8014668:	69ab      	ldr	r3, [r5, #24]
 801466a:	b913      	cbnz	r3, 8014672 <__swsetup_r+0x16>
 801466c:	4628      	mov	r0, r5
 801466e:	f000 fff7 	bl	8015660 <__sinit>
 8014672:	4b2e      	ldr	r3, [pc, #184]	; (801472c <__swsetup_r+0xd0>)
 8014674:	429c      	cmp	r4, r3
 8014676:	d10f      	bne.n	8014698 <__swsetup_r+0x3c>
 8014678:	686c      	ldr	r4, [r5, #4]
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014680:	0719      	lsls	r1, r3, #28
 8014682:	d42c      	bmi.n	80146de <__swsetup_r+0x82>
 8014684:	06dd      	lsls	r5, r3, #27
 8014686:	d411      	bmi.n	80146ac <__swsetup_r+0x50>
 8014688:	2309      	movs	r3, #9
 801468a:	6033      	str	r3, [r6, #0]
 801468c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014690:	81a3      	strh	r3, [r4, #12]
 8014692:	f04f 30ff 	mov.w	r0, #4294967295
 8014696:	e03e      	b.n	8014716 <__swsetup_r+0xba>
 8014698:	4b25      	ldr	r3, [pc, #148]	; (8014730 <__swsetup_r+0xd4>)
 801469a:	429c      	cmp	r4, r3
 801469c:	d101      	bne.n	80146a2 <__swsetup_r+0x46>
 801469e:	68ac      	ldr	r4, [r5, #8]
 80146a0:	e7eb      	b.n	801467a <__swsetup_r+0x1e>
 80146a2:	4b24      	ldr	r3, [pc, #144]	; (8014734 <__swsetup_r+0xd8>)
 80146a4:	429c      	cmp	r4, r3
 80146a6:	bf08      	it	eq
 80146a8:	68ec      	ldreq	r4, [r5, #12]
 80146aa:	e7e6      	b.n	801467a <__swsetup_r+0x1e>
 80146ac:	0758      	lsls	r0, r3, #29
 80146ae:	d512      	bpl.n	80146d6 <__swsetup_r+0x7a>
 80146b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146b2:	b141      	cbz	r1, 80146c6 <__swsetup_r+0x6a>
 80146b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146b8:	4299      	cmp	r1, r3
 80146ba:	d002      	beq.n	80146c2 <__swsetup_r+0x66>
 80146bc:	4630      	mov	r0, r6
 80146be:	f7fe fab9 	bl	8012c34 <_free_r>
 80146c2:	2300      	movs	r3, #0
 80146c4:	6363      	str	r3, [r4, #52]	; 0x34
 80146c6:	89a3      	ldrh	r3, [r4, #12]
 80146c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80146cc:	81a3      	strh	r3, [r4, #12]
 80146ce:	2300      	movs	r3, #0
 80146d0:	6063      	str	r3, [r4, #4]
 80146d2:	6923      	ldr	r3, [r4, #16]
 80146d4:	6023      	str	r3, [r4, #0]
 80146d6:	89a3      	ldrh	r3, [r4, #12]
 80146d8:	f043 0308 	orr.w	r3, r3, #8
 80146dc:	81a3      	strh	r3, [r4, #12]
 80146de:	6923      	ldr	r3, [r4, #16]
 80146e0:	b94b      	cbnz	r3, 80146f6 <__swsetup_r+0x9a>
 80146e2:	89a3      	ldrh	r3, [r4, #12]
 80146e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80146e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146ec:	d003      	beq.n	80146f6 <__swsetup_r+0x9a>
 80146ee:	4621      	mov	r1, r4
 80146f0:	4630      	mov	r0, r6
 80146f2:	f001 fbed 	bl	8015ed0 <__smakebuf_r>
 80146f6:	89a0      	ldrh	r0, [r4, #12]
 80146f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146fc:	f010 0301 	ands.w	r3, r0, #1
 8014700:	d00a      	beq.n	8014718 <__swsetup_r+0xbc>
 8014702:	2300      	movs	r3, #0
 8014704:	60a3      	str	r3, [r4, #8]
 8014706:	6963      	ldr	r3, [r4, #20]
 8014708:	425b      	negs	r3, r3
 801470a:	61a3      	str	r3, [r4, #24]
 801470c:	6923      	ldr	r3, [r4, #16]
 801470e:	b943      	cbnz	r3, 8014722 <__swsetup_r+0xc6>
 8014710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014714:	d1ba      	bne.n	801468c <__swsetup_r+0x30>
 8014716:	bd70      	pop	{r4, r5, r6, pc}
 8014718:	0781      	lsls	r1, r0, #30
 801471a:	bf58      	it	pl
 801471c:	6963      	ldrpl	r3, [r4, #20]
 801471e:	60a3      	str	r3, [r4, #8]
 8014720:	e7f4      	b.n	801470c <__swsetup_r+0xb0>
 8014722:	2000      	movs	r0, #0
 8014724:	e7f7      	b.n	8014716 <__swsetup_r+0xba>
 8014726:	bf00      	nop
 8014728:	200000c8 	.word	0x200000c8
 801472c:	080257ec 	.word	0x080257ec
 8014730:	0802580c 	.word	0x0802580c
 8014734:	080257cc 	.word	0x080257cc

08014738 <quorem>:
 8014738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473c:	6903      	ldr	r3, [r0, #16]
 801473e:	690c      	ldr	r4, [r1, #16]
 8014740:	42a3      	cmp	r3, r4
 8014742:	4607      	mov	r7, r0
 8014744:	f2c0 8081 	blt.w	801484a <quorem+0x112>
 8014748:	3c01      	subs	r4, #1
 801474a:	f101 0814 	add.w	r8, r1, #20
 801474e:	f100 0514 	add.w	r5, r0, #20
 8014752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014756:	9301      	str	r3, [sp, #4]
 8014758:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801475c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014760:	3301      	adds	r3, #1
 8014762:	429a      	cmp	r2, r3
 8014764:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014768:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801476c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014770:	d331      	bcc.n	80147d6 <quorem+0x9e>
 8014772:	f04f 0e00 	mov.w	lr, #0
 8014776:	4640      	mov	r0, r8
 8014778:	46ac      	mov	ip, r5
 801477a:	46f2      	mov	sl, lr
 801477c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014780:	b293      	uxth	r3, r2
 8014782:	fb06 e303 	mla	r3, r6, r3, lr
 8014786:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801478a:	b29b      	uxth	r3, r3
 801478c:	ebaa 0303 	sub.w	r3, sl, r3
 8014790:	f8dc a000 	ldr.w	sl, [ip]
 8014794:	0c12      	lsrs	r2, r2, #16
 8014796:	fa13 f38a 	uxtah	r3, r3, sl
 801479a:	fb06 e202 	mla	r2, r6, r2, lr
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	9b00      	ldr	r3, [sp, #0]
 80147a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147a6:	b292      	uxth	r2, r2
 80147a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80147ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80147b4:	4581      	cmp	r9, r0
 80147b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147ba:	f84c 3b04 	str.w	r3, [ip], #4
 80147be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80147c2:	d2db      	bcs.n	801477c <quorem+0x44>
 80147c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80147c8:	b92b      	cbnz	r3, 80147d6 <quorem+0x9e>
 80147ca:	9b01      	ldr	r3, [sp, #4]
 80147cc:	3b04      	subs	r3, #4
 80147ce:	429d      	cmp	r5, r3
 80147d0:	461a      	mov	r2, r3
 80147d2:	d32e      	bcc.n	8014832 <quorem+0xfa>
 80147d4:	613c      	str	r4, [r7, #16]
 80147d6:	4638      	mov	r0, r7
 80147d8:	f001 fea4 	bl	8016524 <__mcmp>
 80147dc:	2800      	cmp	r0, #0
 80147de:	db24      	blt.n	801482a <quorem+0xf2>
 80147e0:	3601      	adds	r6, #1
 80147e2:	4628      	mov	r0, r5
 80147e4:	f04f 0c00 	mov.w	ip, #0
 80147e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80147ec:	f8d0 e000 	ldr.w	lr, [r0]
 80147f0:	b293      	uxth	r3, r2
 80147f2:	ebac 0303 	sub.w	r3, ip, r3
 80147f6:	0c12      	lsrs	r2, r2, #16
 80147f8:	fa13 f38e 	uxtah	r3, r3, lr
 80147fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014804:	b29b      	uxth	r3, r3
 8014806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801480a:	45c1      	cmp	r9, r8
 801480c:	f840 3b04 	str.w	r3, [r0], #4
 8014810:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014814:	d2e8      	bcs.n	80147e8 <quorem+0xb0>
 8014816:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801481a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801481e:	b922      	cbnz	r2, 801482a <quorem+0xf2>
 8014820:	3b04      	subs	r3, #4
 8014822:	429d      	cmp	r5, r3
 8014824:	461a      	mov	r2, r3
 8014826:	d30a      	bcc.n	801483e <quorem+0x106>
 8014828:	613c      	str	r4, [r7, #16]
 801482a:	4630      	mov	r0, r6
 801482c:	b003      	add	sp, #12
 801482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014832:	6812      	ldr	r2, [r2, #0]
 8014834:	3b04      	subs	r3, #4
 8014836:	2a00      	cmp	r2, #0
 8014838:	d1cc      	bne.n	80147d4 <quorem+0x9c>
 801483a:	3c01      	subs	r4, #1
 801483c:	e7c7      	b.n	80147ce <quorem+0x96>
 801483e:	6812      	ldr	r2, [r2, #0]
 8014840:	3b04      	subs	r3, #4
 8014842:	2a00      	cmp	r2, #0
 8014844:	d1f0      	bne.n	8014828 <quorem+0xf0>
 8014846:	3c01      	subs	r4, #1
 8014848:	e7eb      	b.n	8014822 <quorem+0xea>
 801484a:	2000      	movs	r0, #0
 801484c:	e7ee      	b.n	801482c <quorem+0xf4>
	...

08014850 <_dtoa_r>:
 8014850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014854:	ed2d 8b04 	vpush	{d8-d9}
 8014858:	ec57 6b10 	vmov	r6, r7, d0
 801485c:	b093      	sub	sp, #76	; 0x4c
 801485e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014860:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014864:	9106      	str	r1, [sp, #24]
 8014866:	ee10 aa10 	vmov	sl, s0
 801486a:	4604      	mov	r4, r0
 801486c:	9209      	str	r2, [sp, #36]	; 0x24
 801486e:	930c      	str	r3, [sp, #48]	; 0x30
 8014870:	46bb      	mov	fp, r7
 8014872:	b975      	cbnz	r5, 8014892 <_dtoa_r+0x42>
 8014874:	2010      	movs	r0, #16
 8014876:	f7fe f9b7 	bl	8012be8 <malloc>
 801487a:	4602      	mov	r2, r0
 801487c:	6260      	str	r0, [r4, #36]	; 0x24
 801487e:	b920      	cbnz	r0, 801488a <_dtoa_r+0x3a>
 8014880:	4ba7      	ldr	r3, [pc, #668]	; (8014b20 <_dtoa_r+0x2d0>)
 8014882:	21ea      	movs	r1, #234	; 0xea
 8014884:	48a7      	ldr	r0, [pc, #668]	; (8014b24 <_dtoa_r+0x2d4>)
 8014886:	f002 fa37 	bl	8016cf8 <__assert_func>
 801488a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801488e:	6005      	str	r5, [r0, #0]
 8014890:	60c5      	str	r5, [r0, #12]
 8014892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014894:	6819      	ldr	r1, [r3, #0]
 8014896:	b151      	cbz	r1, 80148ae <_dtoa_r+0x5e>
 8014898:	685a      	ldr	r2, [r3, #4]
 801489a:	604a      	str	r2, [r1, #4]
 801489c:	2301      	movs	r3, #1
 801489e:	4093      	lsls	r3, r2
 80148a0:	608b      	str	r3, [r1, #8]
 80148a2:	4620      	mov	r0, r4
 80148a4:	f001 fbb2 	bl	801600c <_Bfree>
 80148a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148aa:	2200      	movs	r2, #0
 80148ac:	601a      	str	r2, [r3, #0]
 80148ae:	1e3b      	subs	r3, r7, #0
 80148b0:	bfaa      	itet	ge
 80148b2:	2300      	movge	r3, #0
 80148b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80148b8:	f8c8 3000 	strge.w	r3, [r8]
 80148bc:	4b9a      	ldr	r3, [pc, #616]	; (8014b28 <_dtoa_r+0x2d8>)
 80148be:	bfbc      	itt	lt
 80148c0:	2201      	movlt	r2, #1
 80148c2:	f8c8 2000 	strlt.w	r2, [r8]
 80148c6:	ea33 030b 	bics.w	r3, r3, fp
 80148ca:	d11b      	bne.n	8014904 <_dtoa_r+0xb4>
 80148cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80148d2:	6013      	str	r3, [r2, #0]
 80148d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148d8:	4333      	orrs	r3, r6
 80148da:	f000 8592 	beq.w	8015402 <_dtoa_r+0xbb2>
 80148de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148e0:	b963      	cbnz	r3, 80148fc <_dtoa_r+0xac>
 80148e2:	4b92      	ldr	r3, [pc, #584]	; (8014b2c <_dtoa_r+0x2dc>)
 80148e4:	e022      	b.n	801492c <_dtoa_r+0xdc>
 80148e6:	4b92      	ldr	r3, [pc, #584]	; (8014b30 <_dtoa_r+0x2e0>)
 80148e8:	9301      	str	r3, [sp, #4]
 80148ea:	3308      	adds	r3, #8
 80148ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148ee:	6013      	str	r3, [r2, #0]
 80148f0:	9801      	ldr	r0, [sp, #4]
 80148f2:	b013      	add	sp, #76	; 0x4c
 80148f4:	ecbd 8b04 	vpop	{d8-d9}
 80148f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148fc:	4b8b      	ldr	r3, [pc, #556]	; (8014b2c <_dtoa_r+0x2dc>)
 80148fe:	9301      	str	r3, [sp, #4]
 8014900:	3303      	adds	r3, #3
 8014902:	e7f3      	b.n	80148ec <_dtoa_r+0x9c>
 8014904:	2200      	movs	r2, #0
 8014906:	2300      	movs	r3, #0
 8014908:	4650      	mov	r0, sl
 801490a:	4659      	mov	r1, fp
 801490c:	f7ec f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 8014910:	ec4b ab19 	vmov	d9, sl, fp
 8014914:	4680      	mov	r8, r0
 8014916:	b158      	cbz	r0, 8014930 <_dtoa_r+0xe0>
 8014918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801491a:	2301      	movs	r3, #1
 801491c:	6013      	str	r3, [r2, #0]
 801491e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014920:	2b00      	cmp	r3, #0
 8014922:	f000 856b 	beq.w	80153fc <_dtoa_r+0xbac>
 8014926:	4883      	ldr	r0, [pc, #524]	; (8014b34 <_dtoa_r+0x2e4>)
 8014928:	6018      	str	r0, [r3, #0]
 801492a:	1e43      	subs	r3, r0, #1
 801492c:	9301      	str	r3, [sp, #4]
 801492e:	e7df      	b.n	80148f0 <_dtoa_r+0xa0>
 8014930:	ec4b ab10 	vmov	d0, sl, fp
 8014934:	aa10      	add	r2, sp, #64	; 0x40
 8014936:	a911      	add	r1, sp, #68	; 0x44
 8014938:	4620      	mov	r0, r4
 801493a:	f001 ff15 	bl	8016768 <__d2b>
 801493e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014942:	ee08 0a10 	vmov	s16, r0
 8014946:	2d00      	cmp	r5, #0
 8014948:	f000 8084 	beq.w	8014a54 <_dtoa_r+0x204>
 801494c:	ee19 3a90 	vmov	r3, s19
 8014950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014954:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014958:	4656      	mov	r6, sl
 801495a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801495e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014962:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014966:	4b74      	ldr	r3, [pc, #464]	; (8014b38 <_dtoa_r+0x2e8>)
 8014968:	2200      	movs	r2, #0
 801496a:	4630      	mov	r0, r6
 801496c:	4639      	mov	r1, r7
 801496e:	f7eb fca3 	bl	80002b8 <__aeabi_dsub>
 8014972:	a365      	add	r3, pc, #404	; (adr r3, 8014b08 <_dtoa_r+0x2b8>)
 8014974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014978:	f7eb fe56 	bl	8000628 <__aeabi_dmul>
 801497c:	a364      	add	r3, pc, #400	; (adr r3, 8014b10 <_dtoa_r+0x2c0>)
 801497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014982:	f7eb fc9b 	bl	80002bc <__adddf3>
 8014986:	4606      	mov	r6, r0
 8014988:	4628      	mov	r0, r5
 801498a:	460f      	mov	r7, r1
 801498c:	f7eb fde2 	bl	8000554 <__aeabi_i2d>
 8014990:	a361      	add	r3, pc, #388	; (adr r3, 8014b18 <_dtoa_r+0x2c8>)
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	f7eb fe47 	bl	8000628 <__aeabi_dmul>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	4630      	mov	r0, r6
 80149a0:	4639      	mov	r1, r7
 80149a2:	f7eb fc8b 	bl	80002bc <__adddf3>
 80149a6:	4606      	mov	r6, r0
 80149a8:	460f      	mov	r7, r1
 80149aa:	f7ec f8ed 	bl	8000b88 <__aeabi_d2iz>
 80149ae:	2200      	movs	r2, #0
 80149b0:	9000      	str	r0, [sp, #0]
 80149b2:	2300      	movs	r3, #0
 80149b4:	4630      	mov	r0, r6
 80149b6:	4639      	mov	r1, r7
 80149b8:	f7ec f8a8 	bl	8000b0c <__aeabi_dcmplt>
 80149bc:	b150      	cbz	r0, 80149d4 <_dtoa_r+0x184>
 80149be:	9800      	ldr	r0, [sp, #0]
 80149c0:	f7eb fdc8 	bl	8000554 <__aeabi_i2d>
 80149c4:	4632      	mov	r2, r6
 80149c6:	463b      	mov	r3, r7
 80149c8:	f7ec f896 	bl	8000af8 <__aeabi_dcmpeq>
 80149cc:	b910      	cbnz	r0, 80149d4 <_dtoa_r+0x184>
 80149ce:	9b00      	ldr	r3, [sp, #0]
 80149d0:	3b01      	subs	r3, #1
 80149d2:	9300      	str	r3, [sp, #0]
 80149d4:	9b00      	ldr	r3, [sp, #0]
 80149d6:	2b16      	cmp	r3, #22
 80149d8:	d85a      	bhi.n	8014a90 <_dtoa_r+0x240>
 80149da:	9a00      	ldr	r2, [sp, #0]
 80149dc:	4b57      	ldr	r3, [pc, #348]	; (8014b3c <_dtoa_r+0x2ec>)
 80149de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e6:	ec51 0b19 	vmov	r0, r1, d9
 80149ea:	f7ec f88f 	bl	8000b0c <__aeabi_dcmplt>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d050      	beq.n	8014a94 <_dtoa_r+0x244>
 80149f2:	9b00      	ldr	r3, [sp, #0]
 80149f4:	3b01      	subs	r3, #1
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	2300      	movs	r3, #0
 80149fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80149fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149fe:	1b5d      	subs	r5, r3, r5
 8014a00:	1e6b      	subs	r3, r5, #1
 8014a02:	9305      	str	r3, [sp, #20]
 8014a04:	bf45      	ittet	mi
 8014a06:	f1c5 0301 	rsbmi	r3, r5, #1
 8014a0a:	9304      	strmi	r3, [sp, #16]
 8014a0c:	2300      	movpl	r3, #0
 8014a0e:	2300      	movmi	r3, #0
 8014a10:	bf4c      	ite	mi
 8014a12:	9305      	strmi	r3, [sp, #20]
 8014a14:	9304      	strpl	r3, [sp, #16]
 8014a16:	9b00      	ldr	r3, [sp, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	db3d      	blt.n	8014a98 <_dtoa_r+0x248>
 8014a1c:	9b05      	ldr	r3, [sp, #20]
 8014a1e:	9a00      	ldr	r2, [sp, #0]
 8014a20:	920a      	str	r2, [sp, #40]	; 0x28
 8014a22:	4413      	add	r3, r2
 8014a24:	9305      	str	r3, [sp, #20]
 8014a26:	2300      	movs	r3, #0
 8014a28:	9307      	str	r3, [sp, #28]
 8014a2a:	9b06      	ldr	r3, [sp, #24]
 8014a2c:	2b09      	cmp	r3, #9
 8014a2e:	f200 8089 	bhi.w	8014b44 <_dtoa_r+0x2f4>
 8014a32:	2b05      	cmp	r3, #5
 8014a34:	bfc4      	itt	gt
 8014a36:	3b04      	subgt	r3, #4
 8014a38:	9306      	strgt	r3, [sp, #24]
 8014a3a:	9b06      	ldr	r3, [sp, #24]
 8014a3c:	f1a3 0302 	sub.w	r3, r3, #2
 8014a40:	bfcc      	ite	gt
 8014a42:	2500      	movgt	r5, #0
 8014a44:	2501      	movle	r5, #1
 8014a46:	2b03      	cmp	r3, #3
 8014a48:	f200 8087 	bhi.w	8014b5a <_dtoa_r+0x30a>
 8014a4c:	e8df f003 	tbb	[pc, r3]
 8014a50:	59383a2d 	.word	0x59383a2d
 8014a54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014a58:	441d      	add	r5, r3
 8014a5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014a5e:	2b20      	cmp	r3, #32
 8014a60:	bfc1      	itttt	gt
 8014a62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014a66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014a6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8014a6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014a72:	bfda      	itte	le
 8014a74:	f1c3 0320 	rsble	r3, r3, #32
 8014a78:	fa06 f003 	lslle.w	r0, r6, r3
 8014a7c:	4318      	orrgt	r0, r3
 8014a7e:	f7eb fd59 	bl	8000534 <__aeabi_ui2d>
 8014a82:	2301      	movs	r3, #1
 8014a84:	4606      	mov	r6, r0
 8014a86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014a8a:	3d01      	subs	r5, #1
 8014a8c:	930e      	str	r3, [sp, #56]	; 0x38
 8014a8e:	e76a      	b.n	8014966 <_dtoa_r+0x116>
 8014a90:	2301      	movs	r3, #1
 8014a92:	e7b2      	b.n	80149fa <_dtoa_r+0x1aa>
 8014a94:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a96:	e7b1      	b.n	80149fc <_dtoa_r+0x1ac>
 8014a98:	9b04      	ldr	r3, [sp, #16]
 8014a9a:	9a00      	ldr	r2, [sp, #0]
 8014a9c:	1a9b      	subs	r3, r3, r2
 8014a9e:	9304      	str	r3, [sp, #16]
 8014aa0:	4253      	negs	r3, r2
 8014aa2:	9307      	str	r3, [sp, #28]
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa8:	e7bf      	b.n	8014a2a <_dtoa_r+0x1da>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	9308      	str	r3, [sp, #32]
 8014aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	dc55      	bgt.n	8014b60 <_dtoa_r+0x310>
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014aba:	461a      	mov	r2, r3
 8014abc:	9209      	str	r2, [sp, #36]	; 0x24
 8014abe:	e00c      	b.n	8014ada <_dtoa_r+0x28a>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	e7f3      	b.n	8014aac <_dtoa_r+0x25c>
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ac8:	9308      	str	r3, [sp, #32]
 8014aca:	9b00      	ldr	r3, [sp, #0]
 8014acc:	4413      	add	r3, r2
 8014ace:	9302      	str	r3, [sp, #8]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	9303      	str	r3, [sp, #12]
 8014ad6:	bfb8      	it	lt
 8014ad8:	2301      	movlt	r3, #1
 8014ada:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014adc:	2200      	movs	r2, #0
 8014ade:	6042      	str	r2, [r0, #4]
 8014ae0:	2204      	movs	r2, #4
 8014ae2:	f102 0614 	add.w	r6, r2, #20
 8014ae6:	429e      	cmp	r6, r3
 8014ae8:	6841      	ldr	r1, [r0, #4]
 8014aea:	d93d      	bls.n	8014b68 <_dtoa_r+0x318>
 8014aec:	4620      	mov	r0, r4
 8014aee:	f001 fa4d 	bl	8015f8c <_Balloc>
 8014af2:	9001      	str	r0, [sp, #4]
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d13b      	bne.n	8014b70 <_dtoa_r+0x320>
 8014af8:	4b11      	ldr	r3, [pc, #68]	; (8014b40 <_dtoa_r+0x2f0>)
 8014afa:	4602      	mov	r2, r0
 8014afc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014b00:	e6c0      	b.n	8014884 <_dtoa_r+0x34>
 8014b02:	2301      	movs	r3, #1
 8014b04:	e7df      	b.n	8014ac6 <_dtoa_r+0x276>
 8014b06:	bf00      	nop
 8014b08:	636f4361 	.word	0x636f4361
 8014b0c:	3fd287a7 	.word	0x3fd287a7
 8014b10:	8b60c8b3 	.word	0x8b60c8b3
 8014b14:	3fc68a28 	.word	0x3fc68a28
 8014b18:	509f79fb 	.word	0x509f79fb
 8014b1c:	3fd34413 	.word	0x3fd34413
 8014b20:	08025746 	.word	0x08025746
 8014b24:	0802575d 	.word	0x0802575d
 8014b28:	7ff00000 	.word	0x7ff00000
 8014b2c:	08025742 	.word	0x08025742
 8014b30:	08025739 	.word	0x08025739
 8014b34:	080255c1 	.word	0x080255c1
 8014b38:	3ff80000 	.word	0x3ff80000
 8014b3c:	08025930 	.word	0x08025930
 8014b40:	080257b8 	.word	0x080257b8
 8014b44:	2501      	movs	r5, #1
 8014b46:	2300      	movs	r3, #0
 8014b48:	9306      	str	r3, [sp, #24]
 8014b4a:	9508      	str	r5, [sp, #32]
 8014b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b54:	2200      	movs	r2, #0
 8014b56:	2312      	movs	r3, #18
 8014b58:	e7b0      	b.n	8014abc <_dtoa_r+0x26c>
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	9308      	str	r3, [sp, #32]
 8014b5e:	e7f5      	b.n	8014b4c <_dtoa_r+0x2fc>
 8014b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b66:	e7b8      	b.n	8014ada <_dtoa_r+0x28a>
 8014b68:	3101      	adds	r1, #1
 8014b6a:	6041      	str	r1, [r0, #4]
 8014b6c:	0052      	lsls	r2, r2, #1
 8014b6e:	e7b8      	b.n	8014ae2 <_dtoa_r+0x292>
 8014b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b72:	9a01      	ldr	r2, [sp, #4]
 8014b74:	601a      	str	r2, [r3, #0]
 8014b76:	9b03      	ldr	r3, [sp, #12]
 8014b78:	2b0e      	cmp	r3, #14
 8014b7a:	f200 809d 	bhi.w	8014cb8 <_dtoa_r+0x468>
 8014b7e:	2d00      	cmp	r5, #0
 8014b80:	f000 809a 	beq.w	8014cb8 <_dtoa_r+0x468>
 8014b84:	9b00      	ldr	r3, [sp, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	dd32      	ble.n	8014bf0 <_dtoa_r+0x3a0>
 8014b8a:	4ab7      	ldr	r2, [pc, #732]	; (8014e68 <_dtoa_r+0x618>)
 8014b8c:	f003 030f 	and.w	r3, r3, #15
 8014b90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b98:	9b00      	ldr	r3, [sp, #0]
 8014b9a:	05d8      	lsls	r0, r3, #23
 8014b9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014ba0:	d516      	bpl.n	8014bd0 <_dtoa_r+0x380>
 8014ba2:	4bb2      	ldr	r3, [pc, #712]	; (8014e6c <_dtoa_r+0x61c>)
 8014ba4:	ec51 0b19 	vmov	r0, r1, d9
 8014ba8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014bac:	f7eb fe66 	bl	800087c <__aeabi_ddiv>
 8014bb0:	f007 070f 	and.w	r7, r7, #15
 8014bb4:	4682      	mov	sl, r0
 8014bb6:	468b      	mov	fp, r1
 8014bb8:	2503      	movs	r5, #3
 8014bba:	4eac      	ldr	r6, [pc, #688]	; (8014e6c <_dtoa_r+0x61c>)
 8014bbc:	b957      	cbnz	r7, 8014bd4 <_dtoa_r+0x384>
 8014bbe:	4642      	mov	r2, r8
 8014bc0:	464b      	mov	r3, r9
 8014bc2:	4650      	mov	r0, sl
 8014bc4:	4659      	mov	r1, fp
 8014bc6:	f7eb fe59 	bl	800087c <__aeabi_ddiv>
 8014bca:	4682      	mov	sl, r0
 8014bcc:	468b      	mov	fp, r1
 8014bce:	e028      	b.n	8014c22 <_dtoa_r+0x3d2>
 8014bd0:	2502      	movs	r5, #2
 8014bd2:	e7f2      	b.n	8014bba <_dtoa_r+0x36a>
 8014bd4:	07f9      	lsls	r1, r7, #31
 8014bd6:	d508      	bpl.n	8014bea <_dtoa_r+0x39a>
 8014bd8:	4640      	mov	r0, r8
 8014bda:	4649      	mov	r1, r9
 8014bdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014be0:	f7eb fd22 	bl	8000628 <__aeabi_dmul>
 8014be4:	3501      	adds	r5, #1
 8014be6:	4680      	mov	r8, r0
 8014be8:	4689      	mov	r9, r1
 8014bea:	107f      	asrs	r7, r7, #1
 8014bec:	3608      	adds	r6, #8
 8014bee:	e7e5      	b.n	8014bbc <_dtoa_r+0x36c>
 8014bf0:	f000 809b 	beq.w	8014d2a <_dtoa_r+0x4da>
 8014bf4:	9b00      	ldr	r3, [sp, #0]
 8014bf6:	4f9d      	ldr	r7, [pc, #628]	; (8014e6c <_dtoa_r+0x61c>)
 8014bf8:	425e      	negs	r6, r3
 8014bfa:	4b9b      	ldr	r3, [pc, #620]	; (8014e68 <_dtoa_r+0x618>)
 8014bfc:	f006 020f 	and.w	r2, r6, #15
 8014c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c08:	ec51 0b19 	vmov	r0, r1, d9
 8014c0c:	f7eb fd0c 	bl	8000628 <__aeabi_dmul>
 8014c10:	1136      	asrs	r6, r6, #4
 8014c12:	4682      	mov	sl, r0
 8014c14:	468b      	mov	fp, r1
 8014c16:	2300      	movs	r3, #0
 8014c18:	2502      	movs	r5, #2
 8014c1a:	2e00      	cmp	r6, #0
 8014c1c:	d17a      	bne.n	8014d14 <_dtoa_r+0x4c4>
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1d3      	bne.n	8014bca <_dtoa_r+0x37a>
 8014c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 8082 	beq.w	8014d2e <_dtoa_r+0x4de>
 8014c2a:	4b91      	ldr	r3, [pc, #580]	; (8014e70 <_dtoa_r+0x620>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	4650      	mov	r0, sl
 8014c30:	4659      	mov	r1, fp
 8014c32:	f7eb ff6b 	bl	8000b0c <__aeabi_dcmplt>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d079      	beq.n	8014d2e <_dtoa_r+0x4de>
 8014c3a:	9b03      	ldr	r3, [sp, #12]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d076      	beq.n	8014d2e <_dtoa_r+0x4de>
 8014c40:	9b02      	ldr	r3, [sp, #8]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	dd36      	ble.n	8014cb4 <_dtoa_r+0x464>
 8014c46:	9b00      	ldr	r3, [sp, #0]
 8014c48:	4650      	mov	r0, sl
 8014c4a:	4659      	mov	r1, fp
 8014c4c:	1e5f      	subs	r7, r3, #1
 8014c4e:	2200      	movs	r2, #0
 8014c50:	4b88      	ldr	r3, [pc, #544]	; (8014e74 <_dtoa_r+0x624>)
 8014c52:	f7eb fce9 	bl	8000628 <__aeabi_dmul>
 8014c56:	9e02      	ldr	r6, [sp, #8]
 8014c58:	4682      	mov	sl, r0
 8014c5a:	468b      	mov	fp, r1
 8014c5c:	3501      	adds	r5, #1
 8014c5e:	4628      	mov	r0, r5
 8014c60:	f7eb fc78 	bl	8000554 <__aeabi_i2d>
 8014c64:	4652      	mov	r2, sl
 8014c66:	465b      	mov	r3, fp
 8014c68:	f7eb fcde 	bl	8000628 <__aeabi_dmul>
 8014c6c:	4b82      	ldr	r3, [pc, #520]	; (8014e78 <_dtoa_r+0x628>)
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f7eb fb24 	bl	80002bc <__adddf3>
 8014c74:	46d0      	mov	r8, sl
 8014c76:	46d9      	mov	r9, fp
 8014c78:	4682      	mov	sl, r0
 8014c7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014c7e:	2e00      	cmp	r6, #0
 8014c80:	d158      	bne.n	8014d34 <_dtoa_r+0x4e4>
 8014c82:	4b7e      	ldr	r3, [pc, #504]	; (8014e7c <_dtoa_r+0x62c>)
 8014c84:	2200      	movs	r2, #0
 8014c86:	4640      	mov	r0, r8
 8014c88:	4649      	mov	r1, r9
 8014c8a:	f7eb fb15 	bl	80002b8 <__aeabi_dsub>
 8014c8e:	4652      	mov	r2, sl
 8014c90:	465b      	mov	r3, fp
 8014c92:	4680      	mov	r8, r0
 8014c94:	4689      	mov	r9, r1
 8014c96:	f7eb ff57 	bl	8000b48 <__aeabi_dcmpgt>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	f040 8295 	bne.w	80151ca <_dtoa_r+0x97a>
 8014ca0:	4652      	mov	r2, sl
 8014ca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014ca6:	4640      	mov	r0, r8
 8014ca8:	4649      	mov	r1, r9
 8014caa:	f7eb ff2f 	bl	8000b0c <__aeabi_dcmplt>
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	f040 8289 	bne.w	80151c6 <_dtoa_r+0x976>
 8014cb4:	ec5b ab19 	vmov	sl, fp, d9
 8014cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f2c0 8148 	blt.w	8014f50 <_dtoa_r+0x700>
 8014cc0:	9a00      	ldr	r2, [sp, #0]
 8014cc2:	2a0e      	cmp	r2, #14
 8014cc4:	f300 8144 	bgt.w	8014f50 <_dtoa_r+0x700>
 8014cc8:	4b67      	ldr	r3, [pc, #412]	; (8014e68 <_dtoa_r+0x618>)
 8014cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	f280 80d5 	bge.w	8014e84 <_dtoa_r+0x634>
 8014cda:	9b03      	ldr	r3, [sp, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f300 80d1 	bgt.w	8014e84 <_dtoa_r+0x634>
 8014ce2:	f040 826f 	bne.w	80151c4 <_dtoa_r+0x974>
 8014ce6:	4b65      	ldr	r3, [pc, #404]	; (8014e7c <_dtoa_r+0x62c>)
 8014ce8:	2200      	movs	r2, #0
 8014cea:	4640      	mov	r0, r8
 8014cec:	4649      	mov	r1, r9
 8014cee:	f7eb fc9b 	bl	8000628 <__aeabi_dmul>
 8014cf2:	4652      	mov	r2, sl
 8014cf4:	465b      	mov	r3, fp
 8014cf6:	f7eb ff1d 	bl	8000b34 <__aeabi_dcmpge>
 8014cfa:	9e03      	ldr	r6, [sp, #12]
 8014cfc:	4637      	mov	r7, r6
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	f040 8245 	bne.w	801518e <_dtoa_r+0x93e>
 8014d04:	9d01      	ldr	r5, [sp, #4]
 8014d06:	2331      	movs	r3, #49	; 0x31
 8014d08:	f805 3b01 	strb.w	r3, [r5], #1
 8014d0c:	9b00      	ldr	r3, [sp, #0]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	9300      	str	r3, [sp, #0]
 8014d12:	e240      	b.n	8015196 <_dtoa_r+0x946>
 8014d14:	07f2      	lsls	r2, r6, #31
 8014d16:	d505      	bpl.n	8014d24 <_dtoa_r+0x4d4>
 8014d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d1c:	f7eb fc84 	bl	8000628 <__aeabi_dmul>
 8014d20:	3501      	adds	r5, #1
 8014d22:	2301      	movs	r3, #1
 8014d24:	1076      	asrs	r6, r6, #1
 8014d26:	3708      	adds	r7, #8
 8014d28:	e777      	b.n	8014c1a <_dtoa_r+0x3ca>
 8014d2a:	2502      	movs	r5, #2
 8014d2c:	e779      	b.n	8014c22 <_dtoa_r+0x3d2>
 8014d2e:	9f00      	ldr	r7, [sp, #0]
 8014d30:	9e03      	ldr	r6, [sp, #12]
 8014d32:	e794      	b.n	8014c5e <_dtoa_r+0x40e>
 8014d34:	9901      	ldr	r1, [sp, #4]
 8014d36:	4b4c      	ldr	r3, [pc, #304]	; (8014e68 <_dtoa_r+0x618>)
 8014d38:	4431      	add	r1, r6
 8014d3a:	910d      	str	r1, [sp, #52]	; 0x34
 8014d3c:	9908      	ldr	r1, [sp, #32]
 8014d3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014d42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014d46:	2900      	cmp	r1, #0
 8014d48:	d043      	beq.n	8014dd2 <_dtoa_r+0x582>
 8014d4a:	494d      	ldr	r1, [pc, #308]	; (8014e80 <_dtoa_r+0x630>)
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	f7eb fd95 	bl	800087c <__aeabi_ddiv>
 8014d52:	4652      	mov	r2, sl
 8014d54:	465b      	mov	r3, fp
 8014d56:	f7eb faaf 	bl	80002b8 <__aeabi_dsub>
 8014d5a:	9d01      	ldr	r5, [sp, #4]
 8014d5c:	4682      	mov	sl, r0
 8014d5e:	468b      	mov	fp, r1
 8014d60:	4649      	mov	r1, r9
 8014d62:	4640      	mov	r0, r8
 8014d64:	f7eb ff10 	bl	8000b88 <__aeabi_d2iz>
 8014d68:	4606      	mov	r6, r0
 8014d6a:	f7eb fbf3 	bl	8000554 <__aeabi_i2d>
 8014d6e:	4602      	mov	r2, r0
 8014d70:	460b      	mov	r3, r1
 8014d72:	4640      	mov	r0, r8
 8014d74:	4649      	mov	r1, r9
 8014d76:	f7eb fa9f 	bl	80002b8 <__aeabi_dsub>
 8014d7a:	3630      	adds	r6, #48	; 0x30
 8014d7c:	f805 6b01 	strb.w	r6, [r5], #1
 8014d80:	4652      	mov	r2, sl
 8014d82:	465b      	mov	r3, fp
 8014d84:	4680      	mov	r8, r0
 8014d86:	4689      	mov	r9, r1
 8014d88:	f7eb fec0 	bl	8000b0c <__aeabi_dcmplt>
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	d163      	bne.n	8014e58 <_dtoa_r+0x608>
 8014d90:	4642      	mov	r2, r8
 8014d92:	464b      	mov	r3, r9
 8014d94:	4936      	ldr	r1, [pc, #216]	; (8014e70 <_dtoa_r+0x620>)
 8014d96:	2000      	movs	r0, #0
 8014d98:	f7eb fa8e 	bl	80002b8 <__aeabi_dsub>
 8014d9c:	4652      	mov	r2, sl
 8014d9e:	465b      	mov	r3, fp
 8014da0:	f7eb feb4 	bl	8000b0c <__aeabi_dcmplt>
 8014da4:	2800      	cmp	r0, #0
 8014da6:	f040 80b5 	bne.w	8014f14 <_dtoa_r+0x6c4>
 8014daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dac:	429d      	cmp	r5, r3
 8014dae:	d081      	beq.n	8014cb4 <_dtoa_r+0x464>
 8014db0:	4b30      	ldr	r3, [pc, #192]	; (8014e74 <_dtoa_r+0x624>)
 8014db2:	2200      	movs	r2, #0
 8014db4:	4650      	mov	r0, sl
 8014db6:	4659      	mov	r1, fp
 8014db8:	f7eb fc36 	bl	8000628 <__aeabi_dmul>
 8014dbc:	4b2d      	ldr	r3, [pc, #180]	; (8014e74 <_dtoa_r+0x624>)
 8014dbe:	4682      	mov	sl, r0
 8014dc0:	468b      	mov	fp, r1
 8014dc2:	4640      	mov	r0, r8
 8014dc4:	4649      	mov	r1, r9
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f7eb fc2e 	bl	8000628 <__aeabi_dmul>
 8014dcc:	4680      	mov	r8, r0
 8014dce:	4689      	mov	r9, r1
 8014dd0:	e7c6      	b.n	8014d60 <_dtoa_r+0x510>
 8014dd2:	4650      	mov	r0, sl
 8014dd4:	4659      	mov	r1, fp
 8014dd6:	f7eb fc27 	bl	8000628 <__aeabi_dmul>
 8014dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ddc:	9d01      	ldr	r5, [sp, #4]
 8014dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8014de0:	4682      	mov	sl, r0
 8014de2:	468b      	mov	fp, r1
 8014de4:	4649      	mov	r1, r9
 8014de6:	4640      	mov	r0, r8
 8014de8:	f7eb fece 	bl	8000b88 <__aeabi_d2iz>
 8014dec:	4606      	mov	r6, r0
 8014dee:	f7eb fbb1 	bl	8000554 <__aeabi_i2d>
 8014df2:	3630      	adds	r6, #48	; 0x30
 8014df4:	4602      	mov	r2, r0
 8014df6:	460b      	mov	r3, r1
 8014df8:	4640      	mov	r0, r8
 8014dfa:	4649      	mov	r1, r9
 8014dfc:	f7eb fa5c 	bl	80002b8 <__aeabi_dsub>
 8014e00:	f805 6b01 	strb.w	r6, [r5], #1
 8014e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e06:	429d      	cmp	r5, r3
 8014e08:	4680      	mov	r8, r0
 8014e0a:	4689      	mov	r9, r1
 8014e0c:	f04f 0200 	mov.w	r2, #0
 8014e10:	d124      	bne.n	8014e5c <_dtoa_r+0x60c>
 8014e12:	4b1b      	ldr	r3, [pc, #108]	; (8014e80 <_dtoa_r+0x630>)
 8014e14:	4650      	mov	r0, sl
 8014e16:	4659      	mov	r1, fp
 8014e18:	f7eb fa50 	bl	80002bc <__adddf3>
 8014e1c:	4602      	mov	r2, r0
 8014e1e:	460b      	mov	r3, r1
 8014e20:	4640      	mov	r0, r8
 8014e22:	4649      	mov	r1, r9
 8014e24:	f7eb fe90 	bl	8000b48 <__aeabi_dcmpgt>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d173      	bne.n	8014f14 <_dtoa_r+0x6c4>
 8014e2c:	4652      	mov	r2, sl
 8014e2e:	465b      	mov	r3, fp
 8014e30:	4913      	ldr	r1, [pc, #76]	; (8014e80 <_dtoa_r+0x630>)
 8014e32:	2000      	movs	r0, #0
 8014e34:	f7eb fa40 	bl	80002b8 <__aeabi_dsub>
 8014e38:	4602      	mov	r2, r0
 8014e3a:	460b      	mov	r3, r1
 8014e3c:	4640      	mov	r0, r8
 8014e3e:	4649      	mov	r1, r9
 8014e40:	f7eb fe64 	bl	8000b0c <__aeabi_dcmplt>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	f43f af35 	beq.w	8014cb4 <_dtoa_r+0x464>
 8014e4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014e4c:	1e6b      	subs	r3, r5, #1
 8014e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e54:	2b30      	cmp	r3, #48	; 0x30
 8014e56:	d0f8      	beq.n	8014e4a <_dtoa_r+0x5fa>
 8014e58:	9700      	str	r7, [sp, #0]
 8014e5a:	e049      	b.n	8014ef0 <_dtoa_r+0x6a0>
 8014e5c:	4b05      	ldr	r3, [pc, #20]	; (8014e74 <_dtoa_r+0x624>)
 8014e5e:	f7eb fbe3 	bl	8000628 <__aeabi_dmul>
 8014e62:	4680      	mov	r8, r0
 8014e64:	4689      	mov	r9, r1
 8014e66:	e7bd      	b.n	8014de4 <_dtoa_r+0x594>
 8014e68:	08025930 	.word	0x08025930
 8014e6c:	08025908 	.word	0x08025908
 8014e70:	3ff00000 	.word	0x3ff00000
 8014e74:	40240000 	.word	0x40240000
 8014e78:	401c0000 	.word	0x401c0000
 8014e7c:	40140000 	.word	0x40140000
 8014e80:	3fe00000 	.word	0x3fe00000
 8014e84:	9d01      	ldr	r5, [sp, #4]
 8014e86:	4656      	mov	r6, sl
 8014e88:	465f      	mov	r7, fp
 8014e8a:	4642      	mov	r2, r8
 8014e8c:	464b      	mov	r3, r9
 8014e8e:	4630      	mov	r0, r6
 8014e90:	4639      	mov	r1, r7
 8014e92:	f7eb fcf3 	bl	800087c <__aeabi_ddiv>
 8014e96:	f7eb fe77 	bl	8000b88 <__aeabi_d2iz>
 8014e9a:	4682      	mov	sl, r0
 8014e9c:	f7eb fb5a 	bl	8000554 <__aeabi_i2d>
 8014ea0:	4642      	mov	r2, r8
 8014ea2:	464b      	mov	r3, r9
 8014ea4:	f7eb fbc0 	bl	8000628 <__aeabi_dmul>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	4630      	mov	r0, r6
 8014eae:	4639      	mov	r1, r7
 8014eb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014eb4:	f7eb fa00 	bl	80002b8 <__aeabi_dsub>
 8014eb8:	f805 6b01 	strb.w	r6, [r5], #1
 8014ebc:	9e01      	ldr	r6, [sp, #4]
 8014ebe:	9f03      	ldr	r7, [sp, #12]
 8014ec0:	1bae      	subs	r6, r5, r6
 8014ec2:	42b7      	cmp	r7, r6
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	d135      	bne.n	8014f36 <_dtoa_r+0x6e6>
 8014eca:	f7eb f9f7 	bl	80002bc <__adddf3>
 8014ece:	4642      	mov	r2, r8
 8014ed0:	464b      	mov	r3, r9
 8014ed2:	4606      	mov	r6, r0
 8014ed4:	460f      	mov	r7, r1
 8014ed6:	f7eb fe37 	bl	8000b48 <__aeabi_dcmpgt>
 8014eda:	b9d0      	cbnz	r0, 8014f12 <_dtoa_r+0x6c2>
 8014edc:	4642      	mov	r2, r8
 8014ede:	464b      	mov	r3, r9
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	f7eb fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8014ee8:	b110      	cbz	r0, 8014ef0 <_dtoa_r+0x6a0>
 8014eea:	f01a 0f01 	tst.w	sl, #1
 8014eee:	d110      	bne.n	8014f12 <_dtoa_r+0x6c2>
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	ee18 1a10 	vmov	r1, s16
 8014ef6:	f001 f889 	bl	801600c <_Bfree>
 8014efa:	2300      	movs	r3, #0
 8014efc:	9800      	ldr	r0, [sp, #0]
 8014efe:	702b      	strb	r3, [r5, #0]
 8014f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f02:	3001      	adds	r0, #1
 8014f04:	6018      	str	r0, [r3, #0]
 8014f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f43f acf1 	beq.w	80148f0 <_dtoa_r+0xa0>
 8014f0e:	601d      	str	r5, [r3, #0]
 8014f10:	e4ee      	b.n	80148f0 <_dtoa_r+0xa0>
 8014f12:	9f00      	ldr	r7, [sp, #0]
 8014f14:	462b      	mov	r3, r5
 8014f16:	461d      	mov	r5, r3
 8014f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f1c:	2a39      	cmp	r2, #57	; 0x39
 8014f1e:	d106      	bne.n	8014f2e <_dtoa_r+0x6de>
 8014f20:	9a01      	ldr	r2, [sp, #4]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d1f7      	bne.n	8014f16 <_dtoa_r+0x6c6>
 8014f26:	9901      	ldr	r1, [sp, #4]
 8014f28:	2230      	movs	r2, #48	; 0x30
 8014f2a:	3701      	adds	r7, #1
 8014f2c:	700a      	strb	r2, [r1, #0]
 8014f2e:	781a      	ldrb	r2, [r3, #0]
 8014f30:	3201      	adds	r2, #1
 8014f32:	701a      	strb	r2, [r3, #0]
 8014f34:	e790      	b.n	8014e58 <_dtoa_r+0x608>
 8014f36:	4ba6      	ldr	r3, [pc, #664]	; (80151d0 <_dtoa_r+0x980>)
 8014f38:	2200      	movs	r2, #0
 8014f3a:	f7eb fb75 	bl	8000628 <__aeabi_dmul>
 8014f3e:	2200      	movs	r2, #0
 8014f40:	2300      	movs	r3, #0
 8014f42:	4606      	mov	r6, r0
 8014f44:	460f      	mov	r7, r1
 8014f46:	f7eb fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 8014f4a:	2800      	cmp	r0, #0
 8014f4c:	d09d      	beq.n	8014e8a <_dtoa_r+0x63a>
 8014f4e:	e7cf      	b.n	8014ef0 <_dtoa_r+0x6a0>
 8014f50:	9a08      	ldr	r2, [sp, #32]
 8014f52:	2a00      	cmp	r2, #0
 8014f54:	f000 80d7 	beq.w	8015106 <_dtoa_r+0x8b6>
 8014f58:	9a06      	ldr	r2, [sp, #24]
 8014f5a:	2a01      	cmp	r2, #1
 8014f5c:	f300 80ba 	bgt.w	80150d4 <_dtoa_r+0x884>
 8014f60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f62:	2a00      	cmp	r2, #0
 8014f64:	f000 80b2 	beq.w	80150cc <_dtoa_r+0x87c>
 8014f68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014f6c:	9e07      	ldr	r6, [sp, #28]
 8014f6e:	9d04      	ldr	r5, [sp, #16]
 8014f70:	9a04      	ldr	r2, [sp, #16]
 8014f72:	441a      	add	r2, r3
 8014f74:	9204      	str	r2, [sp, #16]
 8014f76:	9a05      	ldr	r2, [sp, #20]
 8014f78:	2101      	movs	r1, #1
 8014f7a:	441a      	add	r2, r3
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	9205      	str	r2, [sp, #20]
 8014f80:	f001 f946 	bl	8016210 <__i2b>
 8014f84:	4607      	mov	r7, r0
 8014f86:	2d00      	cmp	r5, #0
 8014f88:	dd0c      	ble.n	8014fa4 <_dtoa_r+0x754>
 8014f8a:	9b05      	ldr	r3, [sp, #20]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	dd09      	ble.n	8014fa4 <_dtoa_r+0x754>
 8014f90:	42ab      	cmp	r3, r5
 8014f92:	9a04      	ldr	r2, [sp, #16]
 8014f94:	bfa8      	it	ge
 8014f96:	462b      	movge	r3, r5
 8014f98:	1ad2      	subs	r2, r2, r3
 8014f9a:	9204      	str	r2, [sp, #16]
 8014f9c:	9a05      	ldr	r2, [sp, #20]
 8014f9e:	1aed      	subs	r5, r5, r3
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	9305      	str	r3, [sp, #20]
 8014fa4:	9b07      	ldr	r3, [sp, #28]
 8014fa6:	b31b      	cbz	r3, 8014ff0 <_dtoa_r+0x7a0>
 8014fa8:	9b08      	ldr	r3, [sp, #32]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	f000 80af 	beq.w	801510e <_dtoa_r+0x8be>
 8014fb0:	2e00      	cmp	r6, #0
 8014fb2:	dd13      	ble.n	8014fdc <_dtoa_r+0x78c>
 8014fb4:	4639      	mov	r1, r7
 8014fb6:	4632      	mov	r2, r6
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f001 f9e9 	bl	8016390 <__pow5mult>
 8014fbe:	ee18 2a10 	vmov	r2, s16
 8014fc2:	4601      	mov	r1, r0
 8014fc4:	4607      	mov	r7, r0
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	f001 f938 	bl	801623c <__multiply>
 8014fcc:	ee18 1a10 	vmov	r1, s16
 8014fd0:	4680      	mov	r8, r0
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f001 f81a 	bl	801600c <_Bfree>
 8014fd8:	ee08 8a10 	vmov	s16, r8
 8014fdc:	9b07      	ldr	r3, [sp, #28]
 8014fde:	1b9a      	subs	r2, r3, r6
 8014fe0:	d006      	beq.n	8014ff0 <_dtoa_r+0x7a0>
 8014fe2:	ee18 1a10 	vmov	r1, s16
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	f001 f9d2 	bl	8016390 <__pow5mult>
 8014fec:	ee08 0a10 	vmov	s16, r0
 8014ff0:	2101      	movs	r1, #1
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f001 f90c 	bl	8016210 <__i2b>
 8014ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	4606      	mov	r6, r0
 8014ffe:	f340 8088 	ble.w	8015112 <_dtoa_r+0x8c2>
 8015002:	461a      	mov	r2, r3
 8015004:	4601      	mov	r1, r0
 8015006:	4620      	mov	r0, r4
 8015008:	f001 f9c2 	bl	8016390 <__pow5mult>
 801500c:	9b06      	ldr	r3, [sp, #24]
 801500e:	2b01      	cmp	r3, #1
 8015010:	4606      	mov	r6, r0
 8015012:	f340 8081 	ble.w	8015118 <_dtoa_r+0x8c8>
 8015016:	f04f 0800 	mov.w	r8, #0
 801501a:	6933      	ldr	r3, [r6, #16]
 801501c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015020:	6918      	ldr	r0, [r3, #16]
 8015022:	f001 f8a5 	bl	8016170 <__hi0bits>
 8015026:	f1c0 0020 	rsb	r0, r0, #32
 801502a:	9b05      	ldr	r3, [sp, #20]
 801502c:	4418      	add	r0, r3
 801502e:	f010 001f 	ands.w	r0, r0, #31
 8015032:	f000 8092 	beq.w	801515a <_dtoa_r+0x90a>
 8015036:	f1c0 0320 	rsb	r3, r0, #32
 801503a:	2b04      	cmp	r3, #4
 801503c:	f340 808a 	ble.w	8015154 <_dtoa_r+0x904>
 8015040:	f1c0 001c 	rsb	r0, r0, #28
 8015044:	9b04      	ldr	r3, [sp, #16]
 8015046:	4403      	add	r3, r0
 8015048:	9304      	str	r3, [sp, #16]
 801504a:	9b05      	ldr	r3, [sp, #20]
 801504c:	4403      	add	r3, r0
 801504e:	4405      	add	r5, r0
 8015050:	9305      	str	r3, [sp, #20]
 8015052:	9b04      	ldr	r3, [sp, #16]
 8015054:	2b00      	cmp	r3, #0
 8015056:	dd07      	ble.n	8015068 <_dtoa_r+0x818>
 8015058:	ee18 1a10 	vmov	r1, s16
 801505c:	461a      	mov	r2, r3
 801505e:	4620      	mov	r0, r4
 8015060:	f001 f9f0 	bl	8016444 <__lshift>
 8015064:	ee08 0a10 	vmov	s16, r0
 8015068:	9b05      	ldr	r3, [sp, #20]
 801506a:	2b00      	cmp	r3, #0
 801506c:	dd05      	ble.n	801507a <_dtoa_r+0x82a>
 801506e:	4631      	mov	r1, r6
 8015070:	461a      	mov	r2, r3
 8015072:	4620      	mov	r0, r4
 8015074:	f001 f9e6 	bl	8016444 <__lshift>
 8015078:	4606      	mov	r6, r0
 801507a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801507c:	2b00      	cmp	r3, #0
 801507e:	d06e      	beq.n	801515e <_dtoa_r+0x90e>
 8015080:	ee18 0a10 	vmov	r0, s16
 8015084:	4631      	mov	r1, r6
 8015086:	f001 fa4d 	bl	8016524 <__mcmp>
 801508a:	2800      	cmp	r0, #0
 801508c:	da67      	bge.n	801515e <_dtoa_r+0x90e>
 801508e:	9b00      	ldr	r3, [sp, #0]
 8015090:	3b01      	subs	r3, #1
 8015092:	ee18 1a10 	vmov	r1, s16
 8015096:	9300      	str	r3, [sp, #0]
 8015098:	220a      	movs	r2, #10
 801509a:	2300      	movs	r3, #0
 801509c:	4620      	mov	r0, r4
 801509e:	f000 ffd7 	bl	8016050 <__multadd>
 80150a2:	9b08      	ldr	r3, [sp, #32]
 80150a4:	ee08 0a10 	vmov	s16, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f000 81b1 	beq.w	8015410 <_dtoa_r+0xbc0>
 80150ae:	2300      	movs	r3, #0
 80150b0:	4639      	mov	r1, r7
 80150b2:	220a      	movs	r2, #10
 80150b4:	4620      	mov	r0, r4
 80150b6:	f000 ffcb 	bl	8016050 <__multadd>
 80150ba:	9b02      	ldr	r3, [sp, #8]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	4607      	mov	r7, r0
 80150c0:	f300 808e 	bgt.w	80151e0 <_dtoa_r+0x990>
 80150c4:	9b06      	ldr	r3, [sp, #24]
 80150c6:	2b02      	cmp	r3, #2
 80150c8:	dc51      	bgt.n	801516e <_dtoa_r+0x91e>
 80150ca:	e089      	b.n	80151e0 <_dtoa_r+0x990>
 80150cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80150d2:	e74b      	b.n	8014f6c <_dtoa_r+0x71c>
 80150d4:	9b03      	ldr	r3, [sp, #12]
 80150d6:	1e5e      	subs	r6, r3, #1
 80150d8:	9b07      	ldr	r3, [sp, #28]
 80150da:	42b3      	cmp	r3, r6
 80150dc:	bfbf      	itttt	lt
 80150de:	9b07      	ldrlt	r3, [sp, #28]
 80150e0:	9607      	strlt	r6, [sp, #28]
 80150e2:	1af2      	sublt	r2, r6, r3
 80150e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80150e6:	bfb6      	itet	lt
 80150e8:	189b      	addlt	r3, r3, r2
 80150ea:	1b9e      	subge	r6, r3, r6
 80150ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80150ee:	9b03      	ldr	r3, [sp, #12]
 80150f0:	bfb8      	it	lt
 80150f2:	2600      	movlt	r6, #0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	bfb7      	itett	lt
 80150f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80150fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015100:	1a9d      	sublt	r5, r3, r2
 8015102:	2300      	movlt	r3, #0
 8015104:	e734      	b.n	8014f70 <_dtoa_r+0x720>
 8015106:	9e07      	ldr	r6, [sp, #28]
 8015108:	9d04      	ldr	r5, [sp, #16]
 801510a:	9f08      	ldr	r7, [sp, #32]
 801510c:	e73b      	b.n	8014f86 <_dtoa_r+0x736>
 801510e:	9a07      	ldr	r2, [sp, #28]
 8015110:	e767      	b.n	8014fe2 <_dtoa_r+0x792>
 8015112:	9b06      	ldr	r3, [sp, #24]
 8015114:	2b01      	cmp	r3, #1
 8015116:	dc18      	bgt.n	801514a <_dtoa_r+0x8fa>
 8015118:	f1ba 0f00 	cmp.w	sl, #0
 801511c:	d115      	bne.n	801514a <_dtoa_r+0x8fa>
 801511e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015122:	b993      	cbnz	r3, 801514a <_dtoa_r+0x8fa>
 8015124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015128:	0d1b      	lsrs	r3, r3, #20
 801512a:	051b      	lsls	r3, r3, #20
 801512c:	b183      	cbz	r3, 8015150 <_dtoa_r+0x900>
 801512e:	9b04      	ldr	r3, [sp, #16]
 8015130:	3301      	adds	r3, #1
 8015132:	9304      	str	r3, [sp, #16]
 8015134:	9b05      	ldr	r3, [sp, #20]
 8015136:	3301      	adds	r3, #1
 8015138:	9305      	str	r3, [sp, #20]
 801513a:	f04f 0801 	mov.w	r8, #1
 801513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015140:	2b00      	cmp	r3, #0
 8015142:	f47f af6a 	bne.w	801501a <_dtoa_r+0x7ca>
 8015146:	2001      	movs	r0, #1
 8015148:	e76f      	b.n	801502a <_dtoa_r+0x7da>
 801514a:	f04f 0800 	mov.w	r8, #0
 801514e:	e7f6      	b.n	801513e <_dtoa_r+0x8ee>
 8015150:	4698      	mov	r8, r3
 8015152:	e7f4      	b.n	801513e <_dtoa_r+0x8ee>
 8015154:	f43f af7d 	beq.w	8015052 <_dtoa_r+0x802>
 8015158:	4618      	mov	r0, r3
 801515a:	301c      	adds	r0, #28
 801515c:	e772      	b.n	8015044 <_dtoa_r+0x7f4>
 801515e:	9b03      	ldr	r3, [sp, #12]
 8015160:	2b00      	cmp	r3, #0
 8015162:	dc37      	bgt.n	80151d4 <_dtoa_r+0x984>
 8015164:	9b06      	ldr	r3, [sp, #24]
 8015166:	2b02      	cmp	r3, #2
 8015168:	dd34      	ble.n	80151d4 <_dtoa_r+0x984>
 801516a:	9b03      	ldr	r3, [sp, #12]
 801516c:	9302      	str	r3, [sp, #8]
 801516e:	9b02      	ldr	r3, [sp, #8]
 8015170:	b96b      	cbnz	r3, 801518e <_dtoa_r+0x93e>
 8015172:	4631      	mov	r1, r6
 8015174:	2205      	movs	r2, #5
 8015176:	4620      	mov	r0, r4
 8015178:	f000 ff6a 	bl	8016050 <__multadd>
 801517c:	4601      	mov	r1, r0
 801517e:	4606      	mov	r6, r0
 8015180:	ee18 0a10 	vmov	r0, s16
 8015184:	f001 f9ce 	bl	8016524 <__mcmp>
 8015188:	2800      	cmp	r0, #0
 801518a:	f73f adbb 	bgt.w	8014d04 <_dtoa_r+0x4b4>
 801518e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015190:	9d01      	ldr	r5, [sp, #4]
 8015192:	43db      	mvns	r3, r3
 8015194:	9300      	str	r3, [sp, #0]
 8015196:	f04f 0800 	mov.w	r8, #0
 801519a:	4631      	mov	r1, r6
 801519c:	4620      	mov	r0, r4
 801519e:	f000 ff35 	bl	801600c <_Bfree>
 80151a2:	2f00      	cmp	r7, #0
 80151a4:	f43f aea4 	beq.w	8014ef0 <_dtoa_r+0x6a0>
 80151a8:	f1b8 0f00 	cmp.w	r8, #0
 80151ac:	d005      	beq.n	80151ba <_dtoa_r+0x96a>
 80151ae:	45b8      	cmp	r8, r7
 80151b0:	d003      	beq.n	80151ba <_dtoa_r+0x96a>
 80151b2:	4641      	mov	r1, r8
 80151b4:	4620      	mov	r0, r4
 80151b6:	f000 ff29 	bl	801600c <_Bfree>
 80151ba:	4639      	mov	r1, r7
 80151bc:	4620      	mov	r0, r4
 80151be:	f000 ff25 	bl	801600c <_Bfree>
 80151c2:	e695      	b.n	8014ef0 <_dtoa_r+0x6a0>
 80151c4:	2600      	movs	r6, #0
 80151c6:	4637      	mov	r7, r6
 80151c8:	e7e1      	b.n	801518e <_dtoa_r+0x93e>
 80151ca:	9700      	str	r7, [sp, #0]
 80151cc:	4637      	mov	r7, r6
 80151ce:	e599      	b.n	8014d04 <_dtoa_r+0x4b4>
 80151d0:	40240000 	.word	0x40240000
 80151d4:	9b08      	ldr	r3, [sp, #32]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f000 80ca 	beq.w	8015370 <_dtoa_r+0xb20>
 80151dc:	9b03      	ldr	r3, [sp, #12]
 80151de:	9302      	str	r3, [sp, #8]
 80151e0:	2d00      	cmp	r5, #0
 80151e2:	dd05      	ble.n	80151f0 <_dtoa_r+0x9a0>
 80151e4:	4639      	mov	r1, r7
 80151e6:	462a      	mov	r2, r5
 80151e8:	4620      	mov	r0, r4
 80151ea:	f001 f92b 	bl	8016444 <__lshift>
 80151ee:	4607      	mov	r7, r0
 80151f0:	f1b8 0f00 	cmp.w	r8, #0
 80151f4:	d05b      	beq.n	80152ae <_dtoa_r+0xa5e>
 80151f6:	6879      	ldr	r1, [r7, #4]
 80151f8:	4620      	mov	r0, r4
 80151fa:	f000 fec7 	bl	8015f8c <_Balloc>
 80151fe:	4605      	mov	r5, r0
 8015200:	b928      	cbnz	r0, 801520e <_dtoa_r+0x9be>
 8015202:	4b87      	ldr	r3, [pc, #540]	; (8015420 <_dtoa_r+0xbd0>)
 8015204:	4602      	mov	r2, r0
 8015206:	f240 21ea 	movw	r1, #746	; 0x2ea
 801520a:	f7ff bb3b 	b.w	8014884 <_dtoa_r+0x34>
 801520e:	693a      	ldr	r2, [r7, #16]
 8015210:	3202      	adds	r2, #2
 8015212:	0092      	lsls	r2, r2, #2
 8015214:	f107 010c 	add.w	r1, r7, #12
 8015218:	300c      	adds	r0, #12
 801521a:	f7fd fcf5 	bl	8012c08 <memcpy>
 801521e:	2201      	movs	r2, #1
 8015220:	4629      	mov	r1, r5
 8015222:	4620      	mov	r0, r4
 8015224:	f001 f90e 	bl	8016444 <__lshift>
 8015228:	9b01      	ldr	r3, [sp, #4]
 801522a:	f103 0901 	add.w	r9, r3, #1
 801522e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015232:	4413      	add	r3, r2
 8015234:	9305      	str	r3, [sp, #20]
 8015236:	f00a 0301 	and.w	r3, sl, #1
 801523a:	46b8      	mov	r8, r7
 801523c:	9304      	str	r3, [sp, #16]
 801523e:	4607      	mov	r7, r0
 8015240:	4631      	mov	r1, r6
 8015242:	ee18 0a10 	vmov	r0, s16
 8015246:	f7ff fa77 	bl	8014738 <quorem>
 801524a:	4641      	mov	r1, r8
 801524c:	9002      	str	r0, [sp, #8]
 801524e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015252:	ee18 0a10 	vmov	r0, s16
 8015256:	f001 f965 	bl	8016524 <__mcmp>
 801525a:	463a      	mov	r2, r7
 801525c:	9003      	str	r0, [sp, #12]
 801525e:	4631      	mov	r1, r6
 8015260:	4620      	mov	r0, r4
 8015262:	f001 f97b 	bl	801655c <__mdiff>
 8015266:	68c2      	ldr	r2, [r0, #12]
 8015268:	f109 3bff 	add.w	fp, r9, #4294967295
 801526c:	4605      	mov	r5, r0
 801526e:	bb02      	cbnz	r2, 80152b2 <_dtoa_r+0xa62>
 8015270:	4601      	mov	r1, r0
 8015272:	ee18 0a10 	vmov	r0, s16
 8015276:	f001 f955 	bl	8016524 <__mcmp>
 801527a:	4602      	mov	r2, r0
 801527c:	4629      	mov	r1, r5
 801527e:	4620      	mov	r0, r4
 8015280:	9207      	str	r2, [sp, #28]
 8015282:	f000 fec3 	bl	801600c <_Bfree>
 8015286:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801528a:	ea43 0102 	orr.w	r1, r3, r2
 801528e:	9b04      	ldr	r3, [sp, #16]
 8015290:	430b      	orrs	r3, r1
 8015292:	464d      	mov	r5, r9
 8015294:	d10f      	bne.n	80152b6 <_dtoa_r+0xa66>
 8015296:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801529a:	d02a      	beq.n	80152f2 <_dtoa_r+0xaa2>
 801529c:	9b03      	ldr	r3, [sp, #12]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	dd02      	ble.n	80152a8 <_dtoa_r+0xa58>
 80152a2:	9b02      	ldr	r3, [sp, #8]
 80152a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80152a8:	f88b a000 	strb.w	sl, [fp]
 80152ac:	e775      	b.n	801519a <_dtoa_r+0x94a>
 80152ae:	4638      	mov	r0, r7
 80152b0:	e7ba      	b.n	8015228 <_dtoa_r+0x9d8>
 80152b2:	2201      	movs	r2, #1
 80152b4:	e7e2      	b.n	801527c <_dtoa_r+0xa2c>
 80152b6:	9b03      	ldr	r3, [sp, #12]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	db04      	blt.n	80152c6 <_dtoa_r+0xa76>
 80152bc:	9906      	ldr	r1, [sp, #24]
 80152be:	430b      	orrs	r3, r1
 80152c0:	9904      	ldr	r1, [sp, #16]
 80152c2:	430b      	orrs	r3, r1
 80152c4:	d122      	bne.n	801530c <_dtoa_r+0xabc>
 80152c6:	2a00      	cmp	r2, #0
 80152c8:	ddee      	ble.n	80152a8 <_dtoa_r+0xa58>
 80152ca:	ee18 1a10 	vmov	r1, s16
 80152ce:	2201      	movs	r2, #1
 80152d0:	4620      	mov	r0, r4
 80152d2:	f001 f8b7 	bl	8016444 <__lshift>
 80152d6:	4631      	mov	r1, r6
 80152d8:	ee08 0a10 	vmov	s16, r0
 80152dc:	f001 f922 	bl	8016524 <__mcmp>
 80152e0:	2800      	cmp	r0, #0
 80152e2:	dc03      	bgt.n	80152ec <_dtoa_r+0xa9c>
 80152e4:	d1e0      	bne.n	80152a8 <_dtoa_r+0xa58>
 80152e6:	f01a 0f01 	tst.w	sl, #1
 80152ea:	d0dd      	beq.n	80152a8 <_dtoa_r+0xa58>
 80152ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80152f0:	d1d7      	bne.n	80152a2 <_dtoa_r+0xa52>
 80152f2:	2339      	movs	r3, #57	; 0x39
 80152f4:	f88b 3000 	strb.w	r3, [fp]
 80152f8:	462b      	mov	r3, r5
 80152fa:	461d      	mov	r5, r3
 80152fc:	3b01      	subs	r3, #1
 80152fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015302:	2a39      	cmp	r2, #57	; 0x39
 8015304:	d071      	beq.n	80153ea <_dtoa_r+0xb9a>
 8015306:	3201      	adds	r2, #1
 8015308:	701a      	strb	r2, [r3, #0]
 801530a:	e746      	b.n	801519a <_dtoa_r+0x94a>
 801530c:	2a00      	cmp	r2, #0
 801530e:	dd07      	ble.n	8015320 <_dtoa_r+0xad0>
 8015310:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015314:	d0ed      	beq.n	80152f2 <_dtoa_r+0xaa2>
 8015316:	f10a 0301 	add.w	r3, sl, #1
 801531a:	f88b 3000 	strb.w	r3, [fp]
 801531e:	e73c      	b.n	801519a <_dtoa_r+0x94a>
 8015320:	9b05      	ldr	r3, [sp, #20]
 8015322:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015326:	4599      	cmp	r9, r3
 8015328:	d047      	beq.n	80153ba <_dtoa_r+0xb6a>
 801532a:	ee18 1a10 	vmov	r1, s16
 801532e:	2300      	movs	r3, #0
 8015330:	220a      	movs	r2, #10
 8015332:	4620      	mov	r0, r4
 8015334:	f000 fe8c 	bl	8016050 <__multadd>
 8015338:	45b8      	cmp	r8, r7
 801533a:	ee08 0a10 	vmov	s16, r0
 801533e:	f04f 0300 	mov.w	r3, #0
 8015342:	f04f 020a 	mov.w	r2, #10
 8015346:	4641      	mov	r1, r8
 8015348:	4620      	mov	r0, r4
 801534a:	d106      	bne.n	801535a <_dtoa_r+0xb0a>
 801534c:	f000 fe80 	bl	8016050 <__multadd>
 8015350:	4680      	mov	r8, r0
 8015352:	4607      	mov	r7, r0
 8015354:	f109 0901 	add.w	r9, r9, #1
 8015358:	e772      	b.n	8015240 <_dtoa_r+0x9f0>
 801535a:	f000 fe79 	bl	8016050 <__multadd>
 801535e:	4639      	mov	r1, r7
 8015360:	4680      	mov	r8, r0
 8015362:	2300      	movs	r3, #0
 8015364:	220a      	movs	r2, #10
 8015366:	4620      	mov	r0, r4
 8015368:	f000 fe72 	bl	8016050 <__multadd>
 801536c:	4607      	mov	r7, r0
 801536e:	e7f1      	b.n	8015354 <_dtoa_r+0xb04>
 8015370:	9b03      	ldr	r3, [sp, #12]
 8015372:	9302      	str	r3, [sp, #8]
 8015374:	9d01      	ldr	r5, [sp, #4]
 8015376:	ee18 0a10 	vmov	r0, s16
 801537a:	4631      	mov	r1, r6
 801537c:	f7ff f9dc 	bl	8014738 <quorem>
 8015380:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015384:	9b01      	ldr	r3, [sp, #4]
 8015386:	f805 ab01 	strb.w	sl, [r5], #1
 801538a:	1aea      	subs	r2, r5, r3
 801538c:	9b02      	ldr	r3, [sp, #8]
 801538e:	4293      	cmp	r3, r2
 8015390:	dd09      	ble.n	80153a6 <_dtoa_r+0xb56>
 8015392:	ee18 1a10 	vmov	r1, s16
 8015396:	2300      	movs	r3, #0
 8015398:	220a      	movs	r2, #10
 801539a:	4620      	mov	r0, r4
 801539c:	f000 fe58 	bl	8016050 <__multadd>
 80153a0:	ee08 0a10 	vmov	s16, r0
 80153a4:	e7e7      	b.n	8015376 <_dtoa_r+0xb26>
 80153a6:	9b02      	ldr	r3, [sp, #8]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	bfc8      	it	gt
 80153ac:	461d      	movgt	r5, r3
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	bfd8      	it	le
 80153b2:	2501      	movle	r5, #1
 80153b4:	441d      	add	r5, r3
 80153b6:	f04f 0800 	mov.w	r8, #0
 80153ba:	ee18 1a10 	vmov	r1, s16
 80153be:	2201      	movs	r2, #1
 80153c0:	4620      	mov	r0, r4
 80153c2:	f001 f83f 	bl	8016444 <__lshift>
 80153c6:	4631      	mov	r1, r6
 80153c8:	ee08 0a10 	vmov	s16, r0
 80153cc:	f001 f8aa 	bl	8016524 <__mcmp>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	dc91      	bgt.n	80152f8 <_dtoa_r+0xaa8>
 80153d4:	d102      	bne.n	80153dc <_dtoa_r+0xb8c>
 80153d6:	f01a 0f01 	tst.w	sl, #1
 80153da:	d18d      	bne.n	80152f8 <_dtoa_r+0xaa8>
 80153dc:	462b      	mov	r3, r5
 80153de:	461d      	mov	r5, r3
 80153e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153e4:	2a30      	cmp	r2, #48	; 0x30
 80153e6:	d0fa      	beq.n	80153de <_dtoa_r+0xb8e>
 80153e8:	e6d7      	b.n	801519a <_dtoa_r+0x94a>
 80153ea:	9a01      	ldr	r2, [sp, #4]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d184      	bne.n	80152fa <_dtoa_r+0xaaa>
 80153f0:	9b00      	ldr	r3, [sp, #0]
 80153f2:	3301      	adds	r3, #1
 80153f4:	9300      	str	r3, [sp, #0]
 80153f6:	2331      	movs	r3, #49	; 0x31
 80153f8:	7013      	strb	r3, [r2, #0]
 80153fa:	e6ce      	b.n	801519a <_dtoa_r+0x94a>
 80153fc:	4b09      	ldr	r3, [pc, #36]	; (8015424 <_dtoa_r+0xbd4>)
 80153fe:	f7ff ba95 	b.w	801492c <_dtoa_r+0xdc>
 8015402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015404:	2b00      	cmp	r3, #0
 8015406:	f47f aa6e 	bne.w	80148e6 <_dtoa_r+0x96>
 801540a:	4b07      	ldr	r3, [pc, #28]	; (8015428 <_dtoa_r+0xbd8>)
 801540c:	f7ff ba8e 	b.w	801492c <_dtoa_r+0xdc>
 8015410:	9b02      	ldr	r3, [sp, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	dcae      	bgt.n	8015374 <_dtoa_r+0xb24>
 8015416:	9b06      	ldr	r3, [sp, #24]
 8015418:	2b02      	cmp	r3, #2
 801541a:	f73f aea8 	bgt.w	801516e <_dtoa_r+0x91e>
 801541e:	e7a9      	b.n	8015374 <_dtoa_r+0xb24>
 8015420:	080257b8 	.word	0x080257b8
 8015424:	080255c0 	.word	0x080255c0
 8015428:	08025739 	.word	0x08025739

0801542c <__sflush_r>:
 801542c:	898a      	ldrh	r2, [r1, #12]
 801542e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015432:	4605      	mov	r5, r0
 8015434:	0710      	lsls	r0, r2, #28
 8015436:	460c      	mov	r4, r1
 8015438:	d458      	bmi.n	80154ec <__sflush_r+0xc0>
 801543a:	684b      	ldr	r3, [r1, #4]
 801543c:	2b00      	cmp	r3, #0
 801543e:	dc05      	bgt.n	801544c <__sflush_r+0x20>
 8015440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015442:	2b00      	cmp	r3, #0
 8015444:	dc02      	bgt.n	801544c <__sflush_r+0x20>
 8015446:	2000      	movs	r0, #0
 8015448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801544c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801544e:	2e00      	cmp	r6, #0
 8015450:	d0f9      	beq.n	8015446 <__sflush_r+0x1a>
 8015452:	2300      	movs	r3, #0
 8015454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015458:	682f      	ldr	r7, [r5, #0]
 801545a:	602b      	str	r3, [r5, #0]
 801545c:	d032      	beq.n	80154c4 <__sflush_r+0x98>
 801545e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	075a      	lsls	r2, r3, #29
 8015464:	d505      	bpl.n	8015472 <__sflush_r+0x46>
 8015466:	6863      	ldr	r3, [r4, #4]
 8015468:	1ac0      	subs	r0, r0, r3
 801546a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801546c:	b10b      	cbz	r3, 8015472 <__sflush_r+0x46>
 801546e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015470:	1ac0      	subs	r0, r0, r3
 8015472:	2300      	movs	r3, #0
 8015474:	4602      	mov	r2, r0
 8015476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015478:	6a21      	ldr	r1, [r4, #32]
 801547a:	4628      	mov	r0, r5
 801547c:	47b0      	blx	r6
 801547e:	1c43      	adds	r3, r0, #1
 8015480:	89a3      	ldrh	r3, [r4, #12]
 8015482:	d106      	bne.n	8015492 <__sflush_r+0x66>
 8015484:	6829      	ldr	r1, [r5, #0]
 8015486:	291d      	cmp	r1, #29
 8015488:	d82c      	bhi.n	80154e4 <__sflush_r+0xb8>
 801548a:	4a2a      	ldr	r2, [pc, #168]	; (8015534 <__sflush_r+0x108>)
 801548c:	40ca      	lsrs	r2, r1
 801548e:	07d6      	lsls	r6, r2, #31
 8015490:	d528      	bpl.n	80154e4 <__sflush_r+0xb8>
 8015492:	2200      	movs	r2, #0
 8015494:	6062      	str	r2, [r4, #4]
 8015496:	04d9      	lsls	r1, r3, #19
 8015498:	6922      	ldr	r2, [r4, #16]
 801549a:	6022      	str	r2, [r4, #0]
 801549c:	d504      	bpl.n	80154a8 <__sflush_r+0x7c>
 801549e:	1c42      	adds	r2, r0, #1
 80154a0:	d101      	bne.n	80154a6 <__sflush_r+0x7a>
 80154a2:	682b      	ldr	r3, [r5, #0]
 80154a4:	b903      	cbnz	r3, 80154a8 <__sflush_r+0x7c>
 80154a6:	6560      	str	r0, [r4, #84]	; 0x54
 80154a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154aa:	602f      	str	r7, [r5, #0]
 80154ac:	2900      	cmp	r1, #0
 80154ae:	d0ca      	beq.n	8015446 <__sflush_r+0x1a>
 80154b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154b4:	4299      	cmp	r1, r3
 80154b6:	d002      	beq.n	80154be <__sflush_r+0x92>
 80154b8:	4628      	mov	r0, r5
 80154ba:	f7fd fbbb 	bl	8012c34 <_free_r>
 80154be:	2000      	movs	r0, #0
 80154c0:	6360      	str	r0, [r4, #52]	; 0x34
 80154c2:	e7c1      	b.n	8015448 <__sflush_r+0x1c>
 80154c4:	6a21      	ldr	r1, [r4, #32]
 80154c6:	2301      	movs	r3, #1
 80154c8:	4628      	mov	r0, r5
 80154ca:	47b0      	blx	r6
 80154cc:	1c41      	adds	r1, r0, #1
 80154ce:	d1c7      	bne.n	8015460 <__sflush_r+0x34>
 80154d0:	682b      	ldr	r3, [r5, #0]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d0c4      	beq.n	8015460 <__sflush_r+0x34>
 80154d6:	2b1d      	cmp	r3, #29
 80154d8:	d001      	beq.n	80154de <__sflush_r+0xb2>
 80154da:	2b16      	cmp	r3, #22
 80154dc:	d101      	bne.n	80154e2 <__sflush_r+0xb6>
 80154de:	602f      	str	r7, [r5, #0]
 80154e0:	e7b1      	b.n	8015446 <__sflush_r+0x1a>
 80154e2:	89a3      	ldrh	r3, [r4, #12]
 80154e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154e8:	81a3      	strh	r3, [r4, #12]
 80154ea:	e7ad      	b.n	8015448 <__sflush_r+0x1c>
 80154ec:	690f      	ldr	r7, [r1, #16]
 80154ee:	2f00      	cmp	r7, #0
 80154f0:	d0a9      	beq.n	8015446 <__sflush_r+0x1a>
 80154f2:	0793      	lsls	r3, r2, #30
 80154f4:	680e      	ldr	r6, [r1, #0]
 80154f6:	bf08      	it	eq
 80154f8:	694b      	ldreq	r3, [r1, #20]
 80154fa:	600f      	str	r7, [r1, #0]
 80154fc:	bf18      	it	ne
 80154fe:	2300      	movne	r3, #0
 8015500:	eba6 0807 	sub.w	r8, r6, r7
 8015504:	608b      	str	r3, [r1, #8]
 8015506:	f1b8 0f00 	cmp.w	r8, #0
 801550a:	dd9c      	ble.n	8015446 <__sflush_r+0x1a>
 801550c:	6a21      	ldr	r1, [r4, #32]
 801550e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015510:	4643      	mov	r3, r8
 8015512:	463a      	mov	r2, r7
 8015514:	4628      	mov	r0, r5
 8015516:	47b0      	blx	r6
 8015518:	2800      	cmp	r0, #0
 801551a:	dc06      	bgt.n	801552a <__sflush_r+0xfe>
 801551c:	89a3      	ldrh	r3, [r4, #12]
 801551e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015522:	81a3      	strh	r3, [r4, #12]
 8015524:	f04f 30ff 	mov.w	r0, #4294967295
 8015528:	e78e      	b.n	8015448 <__sflush_r+0x1c>
 801552a:	4407      	add	r7, r0
 801552c:	eba8 0800 	sub.w	r8, r8, r0
 8015530:	e7e9      	b.n	8015506 <__sflush_r+0xda>
 8015532:	bf00      	nop
 8015534:	20400001 	.word	0x20400001

08015538 <_fflush_r>:
 8015538:	b538      	push	{r3, r4, r5, lr}
 801553a:	690b      	ldr	r3, [r1, #16]
 801553c:	4605      	mov	r5, r0
 801553e:	460c      	mov	r4, r1
 8015540:	b913      	cbnz	r3, 8015548 <_fflush_r+0x10>
 8015542:	2500      	movs	r5, #0
 8015544:	4628      	mov	r0, r5
 8015546:	bd38      	pop	{r3, r4, r5, pc}
 8015548:	b118      	cbz	r0, 8015552 <_fflush_r+0x1a>
 801554a:	6983      	ldr	r3, [r0, #24]
 801554c:	b90b      	cbnz	r3, 8015552 <_fflush_r+0x1a>
 801554e:	f000 f887 	bl	8015660 <__sinit>
 8015552:	4b14      	ldr	r3, [pc, #80]	; (80155a4 <_fflush_r+0x6c>)
 8015554:	429c      	cmp	r4, r3
 8015556:	d11b      	bne.n	8015590 <_fflush_r+0x58>
 8015558:	686c      	ldr	r4, [r5, #4]
 801555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d0ef      	beq.n	8015542 <_fflush_r+0xa>
 8015562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015564:	07d0      	lsls	r0, r2, #31
 8015566:	d404      	bmi.n	8015572 <_fflush_r+0x3a>
 8015568:	0599      	lsls	r1, r3, #22
 801556a:	d402      	bmi.n	8015572 <_fflush_r+0x3a>
 801556c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801556e:	f000 fc88 	bl	8015e82 <__retarget_lock_acquire_recursive>
 8015572:	4628      	mov	r0, r5
 8015574:	4621      	mov	r1, r4
 8015576:	f7ff ff59 	bl	801542c <__sflush_r>
 801557a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801557c:	07da      	lsls	r2, r3, #31
 801557e:	4605      	mov	r5, r0
 8015580:	d4e0      	bmi.n	8015544 <_fflush_r+0xc>
 8015582:	89a3      	ldrh	r3, [r4, #12]
 8015584:	059b      	lsls	r3, r3, #22
 8015586:	d4dd      	bmi.n	8015544 <_fflush_r+0xc>
 8015588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801558a:	f000 fc7b 	bl	8015e84 <__retarget_lock_release_recursive>
 801558e:	e7d9      	b.n	8015544 <_fflush_r+0xc>
 8015590:	4b05      	ldr	r3, [pc, #20]	; (80155a8 <_fflush_r+0x70>)
 8015592:	429c      	cmp	r4, r3
 8015594:	d101      	bne.n	801559a <_fflush_r+0x62>
 8015596:	68ac      	ldr	r4, [r5, #8]
 8015598:	e7df      	b.n	801555a <_fflush_r+0x22>
 801559a:	4b04      	ldr	r3, [pc, #16]	; (80155ac <_fflush_r+0x74>)
 801559c:	429c      	cmp	r4, r3
 801559e:	bf08      	it	eq
 80155a0:	68ec      	ldreq	r4, [r5, #12]
 80155a2:	e7da      	b.n	801555a <_fflush_r+0x22>
 80155a4:	080257ec 	.word	0x080257ec
 80155a8:	0802580c 	.word	0x0802580c
 80155ac:	080257cc 	.word	0x080257cc

080155b0 <std>:
 80155b0:	2300      	movs	r3, #0
 80155b2:	b510      	push	{r4, lr}
 80155b4:	4604      	mov	r4, r0
 80155b6:	e9c0 3300 	strd	r3, r3, [r0]
 80155ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155be:	6083      	str	r3, [r0, #8]
 80155c0:	8181      	strh	r1, [r0, #12]
 80155c2:	6643      	str	r3, [r0, #100]	; 0x64
 80155c4:	81c2      	strh	r2, [r0, #14]
 80155c6:	6183      	str	r3, [r0, #24]
 80155c8:	4619      	mov	r1, r3
 80155ca:	2208      	movs	r2, #8
 80155cc:	305c      	adds	r0, #92	; 0x5c
 80155ce:	f7fd fb29 	bl	8012c24 <memset>
 80155d2:	4b05      	ldr	r3, [pc, #20]	; (80155e8 <std+0x38>)
 80155d4:	6263      	str	r3, [r4, #36]	; 0x24
 80155d6:	4b05      	ldr	r3, [pc, #20]	; (80155ec <std+0x3c>)
 80155d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80155da:	4b05      	ldr	r3, [pc, #20]	; (80155f0 <std+0x40>)
 80155dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80155de:	4b05      	ldr	r3, [pc, #20]	; (80155f4 <std+0x44>)
 80155e0:	6224      	str	r4, [r4, #32]
 80155e2:	6323      	str	r3, [r4, #48]	; 0x30
 80155e4:	bd10      	pop	{r4, pc}
 80155e6:	bf00      	nop
 80155e8:	08016c0d 	.word	0x08016c0d
 80155ec:	08016c2f 	.word	0x08016c2f
 80155f0:	08016c67 	.word	0x08016c67
 80155f4:	08016c8b 	.word	0x08016c8b

080155f8 <_cleanup_r>:
 80155f8:	4901      	ldr	r1, [pc, #4]	; (8015600 <_cleanup_r+0x8>)
 80155fa:	f000 b8af 	b.w	801575c <_fwalk_reent>
 80155fe:	bf00      	nop
 8015600:	08015539 	.word	0x08015539

08015604 <__sfmoreglue>:
 8015604:	b570      	push	{r4, r5, r6, lr}
 8015606:	2268      	movs	r2, #104	; 0x68
 8015608:	1e4d      	subs	r5, r1, #1
 801560a:	4355      	muls	r5, r2
 801560c:	460e      	mov	r6, r1
 801560e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015612:	f7fd fb7b 	bl	8012d0c <_malloc_r>
 8015616:	4604      	mov	r4, r0
 8015618:	b140      	cbz	r0, 801562c <__sfmoreglue+0x28>
 801561a:	2100      	movs	r1, #0
 801561c:	e9c0 1600 	strd	r1, r6, [r0]
 8015620:	300c      	adds	r0, #12
 8015622:	60a0      	str	r0, [r4, #8]
 8015624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015628:	f7fd fafc 	bl	8012c24 <memset>
 801562c:	4620      	mov	r0, r4
 801562e:	bd70      	pop	{r4, r5, r6, pc}

08015630 <__sfp_lock_acquire>:
 8015630:	4801      	ldr	r0, [pc, #4]	; (8015638 <__sfp_lock_acquire+0x8>)
 8015632:	f000 bc26 	b.w	8015e82 <__retarget_lock_acquire_recursive>
 8015636:	bf00      	nop
 8015638:	2000d069 	.word	0x2000d069

0801563c <__sfp_lock_release>:
 801563c:	4801      	ldr	r0, [pc, #4]	; (8015644 <__sfp_lock_release+0x8>)
 801563e:	f000 bc21 	b.w	8015e84 <__retarget_lock_release_recursive>
 8015642:	bf00      	nop
 8015644:	2000d069 	.word	0x2000d069

08015648 <__sinit_lock_acquire>:
 8015648:	4801      	ldr	r0, [pc, #4]	; (8015650 <__sinit_lock_acquire+0x8>)
 801564a:	f000 bc1a 	b.w	8015e82 <__retarget_lock_acquire_recursive>
 801564e:	bf00      	nop
 8015650:	2000d06a 	.word	0x2000d06a

08015654 <__sinit_lock_release>:
 8015654:	4801      	ldr	r0, [pc, #4]	; (801565c <__sinit_lock_release+0x8>)
 8015656:	f000 bc15 	b.w	8015e84 <__retarget_lock_release_recursive>
 801565a:	bf00      	nop
 801565c:	2000d06a 	.word	0x2000d06a

08015660 <__sinit>:
 8015660:	b510      	push	{r4, lr}
 8015662:	4604      	mov	r4, r0
 8015664:	f7ff fff0 	bl	8015648 <__sinit_lock_acquire>
 8015668:	69a3      	ldr	r3, [r4, #24]
 801566a:	b11b      	cbz	r3, 8015674 <__sinit+0x14>
 801566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015670:	f7ff bff0 	b.w	8015654 <__sinit_lock_release>
 8015674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015678:	6523      	str	r3, [r4, #80]	; 0x50
 801567a:	4b13      	ldr	r3, [pc, #76]	; (80156c8 <__sinit+0x68>)
 801567c:	4a13      	ldr	r2, [pc, #76]	; (80156cc <__sinit+0x6c>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	62a2      	str	r2, [r4, #40]	; 0x28
 8015682:	42a3      	cmp	r3, r4
 8015684:	bf04      	itt	eq
 8015686:	2301      	moveq	r3, #1
 8015688:	61a3      	streq	r3, [r4, #24]
 801568a:	4620      	mov	r0, r4
 801568c:	f000 f820 	bl	80156d0 <__sfp>
 8015690:	6060      	str	r0, [r4, #4]
 8015692:	4620      	mov	r0, r4
 8015694:	f000 f81c 	bl	80156d0 <__sfp>
 8015698:	60a0      	str	r0, [r4, #8]
 801569a:	4620      	mov	r0, r4
 801569c:	f000 f818 	bl	80156d0 <__sfp>
 80156a0:	2200      	movs	r2, #0
 80156a2:	60e0      	str	r0, [r4, #12]
 80156a4:	2104      	movs	r1, #4
 80156a6:	6860      	ldr	r0, [r4, #4]
 80156a8:	f7ff ff82 	bl	80155b0 <std>
 80156ac:	68a0      	ldr	r0, [r4, #8]
 80156ae:	2201      	movs	r2, #1
 80156b0:	2109      	movs	r1, #9
 80156b2:	f7ff ff7d 	bl	80155b0 <std>
 80156b6:	68e0      	ldr	r0, [r4, #12]
 80156b8:	2202      	movs	r2, #2
 80156ba:	2112      	movs	r1, #18
 80156bc:	f7ff ff78 	bl	80155b0 <std>
 80156c0:	2301      	movs	r3, #1
 80156c2:	61a3      	str	r3, [r4, #24]
 80156c4:	e7d2      	b.n	801566c <__sinit+0xc>
 80156c6:	bf00      	nop
 80156c8:	080255ac 	.word	0x080255ac
 80156cc:	080155f9 	.word	0x080155f9

080156d0 <__sfp>:
 80156d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d2:	4607      	mov	r7, r0
 80156d4:	f7ff ffac 	bl	8015630 <__sfp_lock_acquire>
 80156d8:	4b1e      	ldr	r3, [pc, #120]	; (8015754 <__sfp+0x84>)
 80156da:	681e      	ldr	r6, [r3, #0]
 80156dc:	69b3      	ldr	r3, [r6, #24]
 80156de:	b913      	cbnz	r3, 80156e6 <__sfp+0x16>
 80156e0:	4630      	mov	r0, r6
 80156e2:	f7ff ffbd 	bl	8015660 <__sinit>
 80156e6:	3648      	adds	r6, #72	; 0x48
 80156e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80156ec:	3b01      	subs	r3, #1
 80156ee:	d503      	bpl.n	80156f8 <__sfp+0x28>
 80156f0:	6833      	ldr	r3, [r6, #0]
 80156f2:	b30b      	cbz	r3, 8015738 <__sfp+0x68>
 80156f4:	6836      	ldr	r6, [r6, #0]
 80156f6:	e7f7      	b.n	80156e8 <__sfp+0x18>
 80156f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80156fc:	b9d5      	cbnz	r5, 8015734 <__sfp+0x64>
 80156fe:	4b16      	ldr	r3, [pc, #88]	; (8015758 <__sfp+0x88>)
 8015700:	60e3      	str	r3, [r4, #12]
 8015702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015706:	6665      	str	r5, [r4, #100]	; 0x64
 8015708:	f000 fbba 	bl	8015e80 <__retarget_lock_init_recursive>
 801570c:	f7ff ff96 	bl	801563c <__sfp_lock_release>
 8015710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015718:	6025      	str	r5, [r4, #0]
 801571a:	61a5      	str	r5, [r4, #24]
 801571c:	2208      	movs	r2, #8
 801571e:	4629      	mov	r1, r5
 8015720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015724:	f7fd fa7e 	bl	8012c24 <memset>
 8015728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801572c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015730:	4620      	mov	r0, r4
 8015732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015734:	3468      	adds	r4, #104	; 0x68
 8015736:	e7d9      	b.n	80156ec <__sfp+0x1c>
 8015738:	2104      	movs	r1, #4
 801573a:	4638      	mov	r0, r7
 801573c:	f7ff ff62 	bl	8015604 <__sfmoreglue>
 8015740:	4604      	mov	r4, r0
 8015742:	6030      	str	r0, [r6, #0]
 8015744:	2800      	cmp	r0, #0
 8015746:	d1d5      	bne.n	80156f4 <__sfp+0x24>
 8015748:	f7ff ff78 	bl	801563c <__sfp_lock_release>
 801574c:	230c      	movs	r3, #12
 801574e:	603b      	str	r3, [r7, #0]
 8015750:	e7ee      	b.n	8015730 <__sfp+0x60>
 8015752:	bf00      	nop
 8015754:	080255ac 	.word	0x080255ac
 8015758:	ffff0001 	.word	0xffff0001

0801575c <_fwalk_reent>:
 801575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015760:	4606      	mov	r6, r0
 8015762:	4688      	mov	r8, r1
 8015764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015768:	2700      	movs	r7, #0
 801576a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801576e:	f1b9 0901 	subs.w	r9, r9, #1
 8015772:	d505      	bpl.n	8015780 <_fwalk_reent+0x24>
 8015774:	6824      	ldr	r4, [r4, #0]
 8015776:	2c00      	cmp	r4, #0
 8015778:	d1f7      	bne.n	801576a <_fwalk_reent+0xe>
 801577a:	4638      	mov	r0, r7
 801577c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015780:	89ab      	ldrh	r3, [r5, #12]
 8015782:	2b01      	cmp	r3, #1
 8015784:	d907      	bls.n	8015796 <_fwalk_reent+0x3a>
 8015786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801578a:	3301      	adds	r3, #1
 801578c:	d003      	beq.n	8015796 <_fwalk_reent+0x3a>
 801578e:	4629      	mov	r1, r5
 8015790:	4630      	mov	r0, r6
 8015792:	47c0      	blx	r8
 8015794:	4307      	orrs	r7, r0
 8015796:	3568      	adds	r5, #104	; 0x68
 8015798:	e7e9      	b.n	801576e <_fwalk_reent+0x12>

0801579a <rshift>:
 801579a:	6903      	ldr	r3, [r0, #16]
 801579c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80157a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157a4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80157a8:	f100 0414 	add.w	r4, r0, #20
 80157ac:	dd45      	ble.n	801583a <rshift+0xa0>
 80157ae:	f011 011f 	ands.w	r1, r1, #31
 80157b2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80157b6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80157ba:	d10c      	bne.n	80157d6 <rshift+0x3c>
 80157bc:	f100 0710 	add.w	r7, r0, #16
 80157c0:	4629      	mov	r1, r5
 80157c2:	42b1      	cmp	r1, r6
 80157c4:	d334      	bcc.n	8015830 <rshift+0x96>
 80157c6:	1a9b      	subs	r3, r3, r2
 80157c8:	009b      	lsls	r3, r3, #2
 80157ca:	1eea      	subs	r2, r5, #3
 80157cc:	4296      	cmp	r6, r2
 80157ce:	bf38      	it	cc
 80157d0:	2300      	movcc	r3, #0
 80157d2:	4423      	add	r3, r4
 80157d4:	e015      	b.n	8015802 <rshift+0x68>
 80157d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80157da:	f1c1 0820 	rsb	r8, r1, #32
 80157de:	40cf      	lsrs	r7, r1
 80157e0:	f105 0e04 	add.w	lr, r5, #4
 80157e4:	46a1      	mov	r9, r4
 80157e6:	4576      	cmp	r6, lr
 80157e8:	46f4      	mov	ip, lr
 80157ea:	d815      	bhi.n	8015818 <rshift+0x7e>
 80157ec:	1a9a      	subs	r2, r3, r2
 80157ee:	0092      	lsls	r2, r2, #2
 80157f0:	3a04      	subs	r2, #4
 80157f2:	3501      	adds	r5, #1
 80157f4:	42ae      	cmp	r6, r5
 80157f6:	bf38      	it	cc
 80157f8:	2200      	movcc	r2, #0
 80157fa:	18a3      	adds	r3, r4, r2
 80157fc:	50a7      	str	r7, [r4, r2]
 80157fe:	b107      	cbz	r7, 8015802 <rshift+0x68>
 8015800:	3304      	adds	r3, #4
 8015802:	1b1a      	subs	r2, r3, r4
 8015804:	42a3      	cmp	r3, r4
 8015806:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801580a:	bf08      	it	eq
 801580c:	2300      	moveq	r3, #0
 801580e:	6102      	str	r2, [r0, #16]
 8015810:	bf08      	it	eq
 8015812:	6143      	streq	r3, [r0, #20]
 8015814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015818:	f8dc c000 	ldr.w	ip, [ip]
 801581c:	fa0c fc08 	lsl.w	ip, ip, r8
 8015820:	ea4c 0707 	orr.w	r7, ip, r7
 8015824:	f849 7b04 	str.w	r7, [r9], #4
 8015828:	f85e 7b04 	ldr.w	r7, [lr], #4
 801582c:	40cf      	lsrs	r7, r1
 801582e:	e7da      	b.n	80157e6 <rshift+0x4c>
 8015830:	f851 cb04 	ldr.w	ip, [r1], #4
 8015834:	f847 cf04 	str.w	ip, [r7, #4]!
 8015838:	e7c3      	b.n	80157c2 <rshift+0x28>
 801583a:	4623      	mov	r3, r4
 801583c:	e7e1      	b.n	8015802 <rshift+0x68>

0801583e <__hexdig_fun>:
 801583e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015842:	2b09      	cmp	r3, #9
 8015844:	d802      	bhi.n	801584c <__hexdig_fun+0xe>
 8015846:	3820      	subs	r0, #32
 8015848:	b2c0      	uxtb	r0, r0
 801584a:	4770      	bx	lr
 801584c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015850:	2b05      	cmp	r3, #5
 8015852:	d801      	bhi.n	8015858 <__hexdig_fun+0x1a>
 8015854:	3847      	subs	r0, #71	; 0x47
 8015856:	e7f7      	b.n	8015848 <__hexdig_fun+0xa>
 8015858:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801585c:	2b05      	cmp	r3, #5
 801585e:	d801      	bhi.n	8015864 <__hexdig_fun+0x26>
 8015860:	3827      	subs	r0, #39	; 0x27
 8015862:	e7f1      	b.n	8015848 <__hexdig_fun+0xa>
 8015864:	2000      	movs	r0, #0
 8015866:	4770      	bx	lr

08015868 <__gethex>:
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	ed2d 8b02 	vpush	{d8}
 8015870:	b089      	sub	sp, #36	; 0x24
 8015872:	ee08 0a10 	vmov	s16, r0
 8015876:	9304      	str	r3, [sp, #16]
 8015878:	4bb4      	ldr	r3, [pc, #720]	; (8015b4c <__gethex+0x2e4>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	9301      	str	r3, [sp, #4]
 801587e:	4618      	mov	r0, r3
 8015880:	468b      	mov	fp, r1
 8015882:	4690      	mov	r8, r2
 8015884:	f7ea fcb6 	bl	80001f4 <strlen>
 8015888:	9b01      	ldr	r3, [sp, #4]
 801588a:	f8db 2000 	ldr.w	r2, [fp]
 801588e:	4403      	add	r3, r0
 8015890:	4682      	mov	sl, r0
 8015892:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015896:	9305      	str	r3, [sp, #20]
 8015898:	1c93      	adds	r3, r2, #2
 801589a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801589e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80158a2:	32fe      	adds	r2, #254	; 0xfe
 80158a4:	18d1      	adds	r1, r2, r3
 80158a6:	461f      	mov	r7, r3
 80158a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80158ac:	9100      	str	r1, [sp, #0]
 80158ae:	2830      	cmp	r0, #48	; 0x30
 80158b0:	d0f8      	beq.n	80158a4 <__gethex+0x3c>
 80158b2:	f7ff ffc4 	bl	801583e <__hexdig_fun>
 80158b6:	4604      	mov	r4, r0
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d13a      	bne.n	8015932 <__gethex+0xca>
 80158bc:	9901      	ldr	r1, [sp, #4]
 80158be:	4652      	mov	r2, sl
 80158c0:	4638      	mov	r0, r7
 80158c2:	f001 f9e6 	bl	8016c92 <strncmp>
 80158c6:	4605      	mov	r5, r0
 80158c8:	2800      	cmp	r0, #0
 80158ca:	d168      	bne.n	801599e <__gethex+0x136>
 80158cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80158d0:	eb07 060a 	add.w	r6, r7, sl
 80158d4:	f7ff ffb3 	bl	801583e <__hexdig_fun>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d062      	beq.n	80159a2 <__gethex+0x13a>
 80158dc:	4633      	mov	r3, r6
 80158de:	7818      	ldrb	r0, [r3, #0]
 80158e0:	2830      	cmp	r0, #48	; 0x30
 80158e2:	461f      	mov	r7, r3
 80158e4:	f103 0301 	add.w	r3, r3, #1
 80158e8:	d0f9      	beq.n	80158de <__gethex+0x76>
 80158ea:	f7ff ffa8 	bl	801583e <__hexdig_fun>
 80158ee:	2301      	movs	r3, #1
 80158f0:	fab0 f480 	clz	r4, r0
 80158f4:	0964      	lsrs	r4, r4, #5
 80158f6:	4635      	mov	r5, r6
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	463a      	mov	r2, r7
 80158fc:	4616      	mov	r6, r2
 80158fe:	3201      	adds	r2, #1
 8015900:	7830      	ldrb	r0, [r6, #0]
 8015902:	f7ff ff9c 	bl	801583e <__hexdig_fun>
 8015906:	2800      	cmp	r0, #0
 8015908:	d1f8      	bne.n	80158fc <__gethex+0x94>
 801590a:	9901      	ldr	r1, [sp, #4]
 801590c:	4652      	mov	r2, sl
 801590e:	4630      	mov	r0, r6
 8015910:	f001 f9bf 	bl	8016c92 <strncmp>
 8015914:	b980      	cbnz	r0, 8015938 <__gethex+0xd0>
 8015916:	b94d      	cbnz	r5, 801592c <__gethex+0xc4>
 8015918:	eb06 050a 	add.w	r5, r6, sl
 801591c:	462a      	mov	r2, r5
 801591e:	4616      	mov	r6, r2
 8015920:	3201      	adds	r2, #1
 8015922:	7830      	ldrb	r0, [r6, #0]
 8015924:	f7ff ff8b 	bl	801583e <__hexdig_fun>
 8015928:	2800      	cmp	r0, #0
 801592a:	d1f8      	bne.n	801591e <__gethex+0xb6>
 801592c:	1bad      	subs	r5, r5, r6
 801592e:	00ad      	lsls	r5, r5, #2
 8015930:	e004      	b.n	801593c <__gethex+0xd4>
 8015932:	2400      	movs	r4, #0
 8015934:	4625      	mov	r5, r4
 8015936:	e7e0      	b.n	80158fa <__gethex+0x92>
 8015938:	2d00      	cmp	r5, #0
 801593a:	d1f7      	bne.n	801592c <__gethex+0xc4>
 801593c:	7833      	ldrb	r3, [r6, #0]
 801593e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015942:	2b50      	cmp	r3, #80	; 0x50
 8015944:	d13b      	bne.n	80159be <__gethex+0x156>
 8015946:	7873      	ldrb	r3, [r6, #1]
 8015948:	2b2b      	cmp	r3, #43	; 0x2b
 801594a:	d02c      	beq.n	80159a6 <__gethex+0x13e>
 801594c:	2b2d      	cmp	r3, #45	; 0x2d
 801594e:	d02e      	beq.n	80159ae <__gethex+0x146>
 8015950:	1c71      	adds	r1, r6, #1
 8015952:	f04f 0900 	mov.w	r9, #0
 8015956:	7808      	ldrb	r0, [r1, #0]
 8015958:	f7ff ff71 	bl	801583e <__hexdig_fun>
 801595c:	1e43      	subs	r3, r0, #1
 801595e:	b2db      	uxtb	r3, r3
 8015960:	2b18      	cmp	r3, #24
 8015962:	d82c      	bhi.n	80159be <__gethex+0x156>
 8015964:	f1a0 0210 	sub.w	r2, r0, #16
 8015968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801596c:	f7ff ff67 	bl	801583e <__hexdig_fun>
 8015970:	1e43      	subs	r3, r0, #1
 8015972:	b2db      	uxtb	r3, r3
 8015974:	2b18      	cmp	r3, #24
 8015976:	d91d      	bls.n	80159b4 <__gethex+0x14c>
 8015978:	f1b9 0f00 	cmp.w	r9, #0
 801597c:	d000      	beq.n	8015980 <__gethex+0x118>
 801597e:	4252      	negs	r2, r2
 8015980:	4415      	add	r5, r2
 8015982:	f8cb 1000 	str.w	r1, [fp]
 8015986:	b1e4      	cbz	r4, 80159c2 <__gethex+0x15a>
 8015988:	9b00      	ldr	r3, [sp, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	bf14      	ite	ne
 801598e:	2700      	movne	r7, #0
 8015990:	2706      	moveq	r7, #6
 8015992:	4638      	mov	r0, r7
 8015994:	b009      	add	sp, #36	; 0x24
 8015996:	ecbd 8b02 	vpop	{d8}
 801599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599e:	463e      	mov	r6, r7
 80159a0:	4625      	mov	r5, r4
 80159a2:	2401      	movs	r4, #1
 80159a4:	e7ca      	b.n	801593c <__gethex+0xd4>
 80159a6:	f04f 0900 	mov.w	r9, #0
 80159aa:	1cb1      	adds	r1, r6, #2
 80159ac:	e7d3      	b.n	8015956 <__gethex+0xee>
 80159ae:	f04f 0901 	mov.w	r9, #1
 80159b2:	e7fa      	b.n	80159aa <__gethex+0x142>
 80159b4:	230a      	movs	r3, #10
 80159b6:	fb03 0202 	mla	r2, r3, r2, r0
 80159ba:	3a10      	subs	r2, #16
 80159bc:	e7d4      	b.n	8015968 <__gethex+0x100>
 80159be:	4631      	mov	r1, r6
 80159c0:	e7df      	b.n	8015982 <__gethex+0x11a>
 80159c2:	1bf3      	subs	r3, r6, r7
 80159c4:	3b01      	subs	r3, #1
 80159c6:	4621      	mov	r1, r4
 80159c8:	2b07      	cmp	r3, #7
 80159ca:	dc0b      	bgt.n	80159e4 <__gethex+0x17c>
 80159cc:	ee18 0a10 	vmov	r0, s16
 80159d0:	f000 fadc 	bl	8015f8c <_Balloc>
 80159d4:	4604      	mov	r4, r0
 80159d6:	b940      	cbnz	r0, 80159ea <__gethex+0x182>
 80159d8:	4b5d      	ldr	r3, [pc, #372]	; (8015b50 <__gethex+0x2e8>)
 80159da:	4602      	mov	r2, r0
 80159dc:	21de      	movs	r1, #222	; 0xde
 80159de:	485d      	ldr	r0, [pc, #372]	; (8015b54 <__gethex+0x2ec>)
 80159e0:	f001 f98a 	bl	8016cf8 <__assert_func>
 80159e4:	3101      	adds	r1, #1
 80159e6:	105b      	asrs	r3, r3, #1
 80159e8:	e7ee      	b.n	80159c8 <__gethex+0x160>
 80159ea:	f100 0914 	add.w	r9, r0, #20
 80159ee:	f04f 0b00 	mov.w	fp, #0
 80159f2:	f1ca 0301 	rsb	r3, sl, #1
 80159f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80159fa:	f8cd b000 	str.w	fp, [sp]
 80159fe:	9306      	str	r3, [sp, #24]
 8015a00:	42b7      	cmp	r7, r6
 8015a02:	d340      	bcc.n	8015a86 <__gethex+0x21e>
 8015a04:	9802      	ldr	r0, [sp, #8]
 8015a06:	9b00      	ldr	r3, [sp, #0]
 8015a08:	f840 3b04 	str.w	r3, [r0], #4
 8015a0c:	eba0 0009 	sub.w	r0, r0, r9
 8015a10:	1080      	asrs	r0, r0, #2
 8015a12:	0146      	lsls	r6, r0, #5
 8015a14:	6120      	str	r0, [r4, #16]
 8015a16:	4618      	mov	r0, r3
 8015a18:	f000 fbaa 	bl	8016170 <__hi0bits>
 8015a1c:	1a30      	subs	r0, r6, r0
 8015a1e:	f8d8 6000 	ldr.w	r6, [r8]
 8015a22:	42b0      	cmp	r0, r6
 8015a24:	dd63      	ble.n	8015aee <__gethex+0x286>
 8015a26:	1b87      	subs	r7, r0, r6
 8015a28:	4639      	mov	r1, r7
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	f000 ff4e 	bl	80168cc <__any_on>
 8015a30:	4682      	mov	sl, r0
 8015a32:	b1a8      	cbz	r0, 8015a60 <__gethex+0x1f8>
 8015a34:	1e7b      	subs	r3, r7, #1
 8015a36:	1159      	asrs	r1, r3, #5
 8015a38:	f003 021f 	and.w	r2, r3, #31
 8015a3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015a40:	f04f 0a01 	mov.w	sl, #1
 8015a44:	fa0a f202 	lsl.w	r2, sl, r2
 8015a48:	420a      	tst	r2, r1
 8015a4a:	d009      	beq.n	8015a60 <__gethex+0x1f8>
 8015a4c:	4553      	cmp	r3, sl
 8015a4e:	dd05      	ble.n	8015a5c <__gethex+0x1f4>
 8015a50:	1eb9      	subs	r1, r7, #2
 8015a52:	4620      	mov	r0, r4
 8015a54:	f000 ff3a 	bl	80168cc <__any_on>
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	d145      	bne.n	8015ae8 <__gethex+0x280>
 8015a5c:	f04f 0a02 	mov.w	sl, #2
 8015a60:	4639      	mov	r1, r7
 8015a62:	4620      	mov	r0, r4
 8015a64:	f7ff fe99 	bl	801579a <rshift>
 8015a68:	443d      	add	r5, r7
 8015a6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a6e:	42ab      	cmp	r3, r5
 8015a70:	da4c      	bge.n	8015b0c <__gethex+0x2a4>
 8015a72:	ee18 0a10 	vmov	r0, s16
 8015a76:	4621      	mov	r1, r4
 8015a78:	f000 fac8 	bl	801600c <_Bfree>
 8015a7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a7e:	2300      	movs	r3, #0
 8015a80:	6013      	str	r3, [r2, #0]
 8015a82:	27a3      	movs	r7, #163	; 0xa3
 8015a84:	e785      	b.n	8015992 <__gethex+0x12a>
 8015a86:	1e73      	subs	r3, r6, #1
 8015a88:	9a05      	ldr	r2, [sp, #20]
 8015a8a:	9303      	str	r3, [sp, #12]
 8015a8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015a90:	4293      	cmp	r3, r2
 8015a92:	d019      	beq.n	8015ac8 <__gethex+0x260>
 8015a94:	f1bb 0f20 	cmp.w	fp, #32
 8015a98:	d107      	bne.n	8015aaa <__gethex+0x242>
 8015a9a:	9b02      	ldr	r3, [sp, #8]
 8015a9c:	9a00      	ldr	r2, [sp, #0]
 8015a9e:	f843 2b04 	str.w	r2, [r3], #4
 8015aa2:	9302      	str	r3, [sp, #8]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	469b      	mov	fp, r3
 8015aaa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015aae:	f7ff fec6 	bl	801583e <__hexdig_fun>
 8015ab2:	9b00      	ldr	r3, [sp, #0]
 8015ab4:	f000 000f 	and.w	r0, r0, #15
 8015ab8:	fa00 f00b 	lsl.w	r0, r0, fp
 8015abc:	4303      	orrs	r3, r0
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	f10b 0b04 	add.w	fp, fp, #4
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	e00d      	b.n	8015ae4 <__gethex+0x27c>
 8015ac8:	9b03      	ldr	r3, [sp, #12]
 8015aca:	9a06      	ldr	r2, [sp, #24]
 8015acc:	4413      	add	r3, r2
 8015ace:	42bb      	cmp	r3, r7
 8015ad0:	d3e0      	bcc.n	8015a94 <__gethex+0x22c>
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	9901      	ldr	r1, [sp, #4]
 8015ad6:	9307      	str	r3, [sp, #28]
 8015ad8:	4652      	mov	r2, sl
 8015ada:	f001 f8da 	bl	8016c92 <strncmp>
 8015ade:	9b07      	ldr	r3, [sp, #28]
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	d1d7      	bne.n	8015a94 <__gethex+0x22c>
 8015ae4:	461e      	mov	r6, r3
 8015ae6:	e78b      	b.n	8015a00 <__gethex+0x198>
 8015ae8:	f04f 0a03 	mov.w	sl, #3
 8015aec:	e7b8      	b.n	8015a60 <__gethex+0x1f8>
 8015aee:	da0a      	bge.n	8015b06 <__gethex+0x29e>
 8015af0:	1a37      	subs	r7, r6, r0
 8015af2:	4621      	mov	r1, r4
 8015af4:	ee18 0a10 	vmov	r0, s16
 8015af8:	463a      	mov	r2, r7
 8015afa:	f000 fca3 	bl	8016444 <__lshift>
 8015afe:	1bed      	subs	r5, r5, r7
 8015b00:	4604      	mov	r4, r0
 8015b02:	f100 0914 	add.w	r9, r0, #20
 8015b06:	f04f 0a00 	mov.w	sl, #0
 8015b0a:	e7ae      	b.n	8015a6a <__gethex+0x202>
 8015b0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015b10:	42a8      	cmp	r0, r5
 8015b12:	dd72      	ble.n	8015bfa <__gethex+0x392>
 8015b14:	1b45      	subs	r5, r0, r5
 8015b16:	42ae      	cmp	r6, r5
 8015b18:	dc36      	bgt.n	8015b88 <__gethex+0x320>
 8015b1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b1e:	2b02      	cmp	r3, #2
 8015b20:	d02a      	beq.n	8015b78 <__gethex+0x310>
 8015b22:	2b03      	cmp	r3, #3
 8015b24:	d02c      	beq.n	8015b80 <__gethex+0x318>
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	d11c      	bne.n	8015b64 <__gethex+0x2fc>
 8015b2a:	42ae      	cmp	r6, r5
 8015b2c:	d11a      	bne.n	8015b64 <__gethex+0x2fc>
 8015b2e:	2e01      	cmp	r6, #1
 8015b30:	d112      	bne.n	8015b58 <__gethex+0x2f0>
 8015b32:	9a04      	ldr	r2, [sp, #16]
 8015b34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b38:	6013      	str	r3, [r2, #0]
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	6123      	str	r3, [r4, #16]
 8015b3e:	f8c9 3000 	str.w	r3, [r9]
 8015b42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b44:	2762      	movs	r7, #98	; 0x62
 8015b46:	601c      	str	r4, [r3, #0]
 8015b48:	e723      	b.n	8015992 <__gethex+0x12a>
 8015b4a:	bf00      	nop
 8015b4c:	08025894 	.word	0x08025894
 8015b50:	080257b8 	.word	0x080257b8
 8015b54:	0802582c 	.word	0x0802582c
 8015b58:	1e71      	subs	r1, r6, #1
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	f000 feb6 	bl	80168cc <__any_on>
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d1e6      	bne.n	8015b32 <__gethex+0x2ca>
 8015b64:	ee18 0a10 	vmov	r0, s16
 8015b68:	4621      	mov	r1, r4
 8015b6a:	f000 fa4f 	bl	801600c <_Bfree>
 8015b6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b70:	2300      	movs	r3, #0
 8015b72:	6013      	str	r3, [r2, #0]
 8015b74:	2750      	movs	r7, #80	; 0x50
 8015b76:	e70c      	b.n	8015992 <__gethex+0x12a>
 8015b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d1f2      	bne.n	8015b64 <__gethex+0x2fc>
 8015b7e:	e7d8      	b.n	8015b32 <__gethex+0x2ca>
 8015b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d1d5      	bne.n	8015b32 <__gethex+0x2ca>
 8015b86:	e7ed      	b.n	8015b64 <__gethex+0x2fc>
 8015b88:	1e6f      	subs	r7, r5, #1
 8015b8a:	f1ba 0f00 	cmp.w	sl, #0
 8015b8e:	d131      	bne.n	8015bf4 <__gethex+0x38c>
 8015b90:	b127      	cbz	r7, 8015b9c <__gethex+0x334>
 8015b92:	4639      	mov	r1, r7
 8015b94:	4620      	mov	r0, r4
 8015b96:	f000 fe99 	bl	80168cc <__any_on>
 8015b9a:	4682      	mov	sl, r0
 8015b9c:	117b      	asrs	r3, r7, #5
 8015b9e:	2101      	movs	r1, #1
 8015ba0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015ba4:	f007 071f 	and.w	r7, r7, #31
 8015ba8:	fa01 f707 	lsl.w	r7, r1, r7
 8015bac:	421f      	tst	r7, r3
 8015bae:	4629      	mov	r1, r5
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	bf18      	it	ne
 8015bb4:	f04a 0a02 	orrne.w	sl, sl, #2
 8015bb8:	1b76      	subs	r6, r6, r5
 8015bba:	f7ff fdee 	bl	801579a <rshift>
 8015bbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015bc2:	2702      	movs	r7, #2
 8015bc4:	f1ba 0f00 	cmp.w	sl, #0
 8015bc8:	d048      	beq.n	8015c5c <__gethex+0x3f4>
 8015bca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015bce:	2b02      	cmp	r3, #2
 8015bd0:	d015      	beq.n	8015bfe <__gethex+0x396>
 8015bd2:	2b03      	cmp	r3, #3
 8015bd4:	d017      	beq.n	8015c06 <__gethex+0x39e>
 8015bd6:	2b01      	cmp	r3, #1
 8015bd8:	d109      	bne.n	8015bee <__gethex+0x386>
 8015bda:	f01a 0f02 	tst.w	sl, #2
 8015bde:	d006      	beq.n	8015bee <__gethex+0x386>
 8015be0:	f8d9 0000 	ldr.w	r0, [r9]
 8015be4:	ea4a 0a00 	orr.w	sl, sl, r0
 8015be8:	f01a 0f01 	tst.w	sl, #1
 8015bec:	d10e      	bne.n	8015c0c <__gethex+0x3a4>
 8015bee:	f047 0710 	orr.w	r7, r7, #16
 8015bf2:	e033      	b.n	8015c5c <__gethex+0x3f4>
 8015bf4:	f04f 0a01 	mov.w	sl, #1
 8015bf8:	e7d0      	b.n	8015b9c <__gethex+0x334>
 8015bfa:	2701      	movs	r7, #1
 8015bfc:	e7e2      	b.n	8015bc4 <__gethex+0x35c>
 8015bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c00:	f1c3 0301 	rsb	r3, r3, #1
 8015c04:	9315      	str	r3, [sp, #84]	; 0x54
 8015c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d0f0      	beq.n	8015bee <__gethex+0x386>
 8015c0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015c10:	f104 0314 	add.w	r3, r4, #20
 8015c14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015c18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015c1c:	f04f 0c00 	mov.w	ip, #0
 8015c20:	4618      	mov	r0, r3
 8015c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015c2a:	d01c      	beq.n	8015c66 <__gethex+0x3fe>
 8015c2c:	3201      	adds	r2, #1
 8015c2e:	6002      	str	r2, [r0, #0]
 8015c30:	2f02      	cmp	r7, #2
 8015c32:	f104 0314 	add.w	r3, r4, #20
 8015c36:	d13f      	bne.n	8015cb8 <__gethex+0x450>
 8015c38:	f8d8 2000 	ldr.w	r2, [r8]
 8015c3c:	3a01      	subs	r2, #1
 8015c3e:	42b2      	cmp	r2, r6
 8015c40:	d10a      	bne.n	8015c58 <__gethex+0x3f0>
 8015c42:	1171      	asrs	r1, r6, #5
 8015c44:	2201      	movs	r2, #1
 8015c46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c4a:	f006 061f 	and.w	r6, r6, #31
 8015c4e:	fa02 f606 	lsl.w	r6, r2, r6
 8015c52:	421e      	tst	r6, r3
 8015c54:	bf18      	it	ne
 8015c56:	4617      	movne	r7, r2
 8015c58:	f047 0720 	orr.w	r7, r7, #32
 8015c5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c5e:	601c      	str	r4, [r3, #0]
 8015c60:	9b04      	ldr	r3, [sp, #16]
 8015c62:	601d      	str	r5, [r3, #0]
 8015c64:	e695      	b.n	8015992 <__gethex+0x12a>
 8015c66:	4299      	cmp	r1, r3
 8015c68:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c6c:	d8d8      	bhi.n	8015c20 <__gethex+0x3b8>
 8015c6e:	68a3      	ldr	r3, [r4, #8]
 8015c70:	459b      	cmp	fp, r3
 8015c72:	db19      	blt.n	8015ca8 <__gethex+0x440>
 8015c74:	6861      	ldr	r1, [r4, #4]
 8015c76:	ee18 0a10 	vmov	r0, s16
 8015c7a:	3101      	adds	r1, #1
 8015c7c:	f000 f986 	bl	8015f8c <_Balloc>
 8015c80:	4681      	mov	r9, r0
 8015c82:	b918      	cbnz	r0, 8015c8c <__gethex+0x424>
 8015c84:	4b1a      	ldr	r3, [pc, #104]	; (8015cf0 <__gethex+0x488>)
 8015c86:	4602      	mov	r2, r0
 8015c88:	2184      	movs	r1, #132	; 0x84
 8015c8a:	e6a8      	b.n	80159de <__gethex+0x176>
 8015c8c:	6922      	ldr	r2, [r4, #16]
 8015c8e:	3202      	adds	r2, #2
 8015c90:	f104 010c 	add.w	r1, r4, #12
 8015c94:	0092      	lsls	r2, r2, #2
 8015c96:	300c      	adds	r0, #12
 8015c98:	f7fc ffb6 	bl	8012c08 <memcpy>
 8015c9c:	4621      	mov	r1, r4
 8015c9e:	ee18 0a10 	vmov	r0, s16
 8015ca2:	f000 f9b3 	bl	801600c <_Bfree>
 8015ca6:	464c      	mov	r4, r9
 8015ca8:	6923      	ldr	r3, [r4, #16]
 8015caa:	1c5a      	adds	r2, r3, #1
 8015cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015cb0:	6122      	str	r2, [r4, #16]
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	615a      	str	r2, [r3, #20]
 8015cb6:	e7bb      	b.n	8015c30 <__gethex+0x3c8>
 8015cb8:	6922      	ldr	r2, [r4, #16]
 8015cba:	455a      	cmp	r2, fp
 8015cbc:	dd0b      	ble.n	8015cd6 <__gethex+0x46e>
 8015cbe:	2101      	movs	r1, #1
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	f7ff fd6a 	bl	801579a <rshift>
 8015cc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015cca:	3501      	adds	r5, #1
 8015ccc:	42ab      	cmp	r3, r5
 8015cce:	f6ff aed0 	blt.w	8015a72 <__gethex+0x20a>
 8015cd2:	2701      	movs	r7, #1
 8015cd4:	e7c0      	b.n	8015c58 <__gethex+0x3f0>
 8015cd6:	f016 061f 	ands.w	r6, r6, #31
 8015cda:	d0fa      	beq.n	8015cd2 <__gethex+0x46a>
 8015cdc:	4453      	add	r3, sl
 8015cde:	f1c6 0620 	rsb	r6, r6, #32
 8015ce2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015ce6:	f000 fa43 	bl	8016170 <__hi0bits>
 8015cea:	42b0      	cmp	r0, r6
 8015cec:	dbe7      	blt.n	8015cbe <__gethex+0x456>
 8015cee:	e7f0      	b.n	8015cd2 <__gethex+0x46a>
 8015cf0:	080257b8 	.word	0x080257b8

08015cf4 <L_shift>:
 8015cf4:	f1c2 0208 	rsb	r2, r2, #8
 8015cf8:	0092      	lsls	r2, r2, #2
 8015cfa:	b570      	push	{r4, r5, r6, lr}
 8015cfc:	f1c2 0620 	rsb	r6, r2, #32
 8015d00:	6843      	ldr	r3, [r0, #4]
 8015d02:	6804      	ldr	r4, [r0, #0]
 8015d04:	fa03 f506 	lsl.w	r5, r3, r6
 8015d08:	432c      	orrs	r4, r5
 8015d0a:	40d3      	lsrs	r3, r2
 8015d0c:	6004      	str	r4, [r0, #0]
 8015d0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015d12:	4288      	cmp	r0, r1
 8015d14:	d3f4      	bcc.n	8015d00 <L_shift+0xc>
 8015d16:	bd70      	pop	{r4, r5, r6, pc}

08015d18 <__match>:
 8015d18:	b530      	push	{r4, r5, lr}
 8015d1a:	6803      	ldr	r3, [r0, #0]
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d22:	b914      	cbnz	r4, 8015d2a <__match+0x12>
 8015d24:	6003      	str	r3, [r0, #0]
 8015d26:	2001      	movs	r0, #1
 8015d28:	bd30      	pop	{r4, r5, pc}
 8015d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d32:	2d19      	cmp	r5, #25
 8015d34:	bf98      	it	ls
 8015d36:	3220      	addls	r2, #32
 8015d38:	42a2      	cmp	r2, r4
 8015d3a:	d0f0      	beq.n	8015d1e <__match+0x6>
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	e7f3      	b.n	8015d28 <__match+0x10>

08015d40 <__hexnan>:
 8015d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d44:	680b      	ldr	r3, [r1, #0]
 8015d46:	115e      	asrs	r6, r3, #5
 8015d48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015d4c:	f013 031f 	ands.w	r3, r3, #31
 8015d50:	b087      	sub	sp, #28
 8015d52:	bf18      	it	ne
 8015d54:	3604      	addne	r6, #4
 8015d56:	2500      	movs	r5, #0
 8015d58:	1f37      	subs	r7, r6, #4
 8015d5a:	4690      	mov	r8, r2
 8015d5c:	6802      	ldr	r2, [r0, #0]
 8015d5e:	9301      	str	r3, [sp, #4]
 8015d60:	4682      	mov	sl, r0
 8015d62:	f846 5c04 	str.w	r5, [r6, #-4]
 8015d66:	46b9      	mov	r9, r7
 8015d68:	463c      	mov	r4, r7
 8015d6a:	9502      	str	r5, [sp, #8]
 8015d6c:	46ab      	mov	fp, r5
 8015d6e:	7851      	ldrb	r1, [r2, #1]
 8015d70:	1c53      	adds	r3, r2, #1
 8015d72:	9303      	str	r3, [sp, #12]
 8015d74:	b341      	cbz	r1, 8015dc8 <__hexnan+0x88>
 8015d76:	4608      	mov	r0, r1
 8015d78:	9205      	str	r2, [sp, #20]
 8015d7a:	9104      	str	r1, [sp, #16]
 8015d7c:	f7ff fd5f 	bl	801583e <__hexdig_fun>
 8015d80:	2800      	cmp	r0, #0
 8015d82:	d14f      	bne.n	8015e24 <__hexnan+0xe4>
 8015d84:	9904      	ldr	r1, [sp, #16]
 8015d86:	9a05      	ldr	r2, [sp, #20]
 8015d88:	2920      	cmp	r1, #32
 8015d8a:	d818      	bhi.n	8015dbe <__hexnan+0x7e>
 8015d8c:	9b02      	ldr	r3, [sp, #8]
 8015d8e:	459b      	cmp	fp, r3
 8015d90:	dd13      	ble.n	8015dba <__hexnan+0x7a>
 8015d92:	454c      	cmp	r4, r9
 8015d94:	d206      	bcs.n	8015da4 <__hexnan+0x64>
 8015d96:	2d07      	cmp	r5, #7
 8015d98:	dc04      	bgt.n	8015da4 <__hexnan+0x64>
 8015d9a:	462a      	mov	r2, r5
 8015d9c:	4649      	mov	r1, r9
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f7ff ffa8 	bl	8015cf4 <L_shift>
 8015da4:	4544      	cmp	r4, r8
 8015da6:	d950      	bls.n	8015e4a <__hexnan+0x10a>
 8015da8:	2300      	movs	r3, #0
 8015daa:	f1a4 0904 	sub.w	r9, r4, #4
 8015dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8015db2:	f8cd b008 	str.w	fp, [sp, #8]
 8015db6:	464c      	mov	r4, r9
 8015db8:	461d      	mov	r5, r3
 8015dba:	9a03      	ldr	r2, [sp, #12]
 8015dbc:	e7d7      	b.n	8015d6e <__hexnan+0x2e>
 8015dbe:	2929      	cmp	r1, #41	; 0x29
 8015dc0:	d156      	bne.n	8015e70 <__hexnan+0x130>
 8015dc2:	3202      	adds	r2, #2
 8015dc4:	f8ca 2000 	str.w	r2, [sl]
 8015dc8:	f1bb 0f00 	cmp.w	fp, #0
 8015dcc:	d050      	beq.n	8015e70 <__hexnan+0x130>
 8015dce:	454c      	cmp	r4, r9
 8015dd0:	d206      	bcs.n	8015de0 <__hexnan+0xa0>
 8015dd2:	2d07      	cmp	r5, #7
 8015dd4:	dc04      	bgt.n	8015de0 <__hexnan+0xa0>
 8015dd6:	462a      	mov	r2, r5
 8015dd8:	4649      	mov	r1, r9
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f7ff ff8a 	bl	8015cf4 <L_shift>
 8015de0:	4544      	cmp	r4, r8
 8015de2:	d934      	bls.n	8015e4e <__hexnan+0x10e>
 8015de4:	f1a8 0204 	sub.w	r2, r8, #4
 8015de8:	4623      	mov	r3, r4
 8015dea:	f853 1b04 	ldr.w	r1, [r3], #4
 8015dee:	f842 1f04 	str.w	r1, [r2, #4]!
 8015df2:	429f      	cmp	r7, r3
 8015df4:	d2f9      	bcs.n	8015dea <__hexnan+0xaa>
 8015df6:	1b3b      	subs	r3, r7, r4
 8015df8:	f023 0303 	bic.w	r3, r3, #3
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	3401      	adds	r4, #1
 8015e00:	3e03      	subs	r6, #3
 8015e02:	42b4      	cmp	r4, r6
 8015e04:	bf88      	it	hi
 8015e06:	2304      	movhi	r3, #4
 8015e08:	4443      	add	r3, r8
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	f843 2b04 	str.w	r2, [r3], #4
 8015e10:	429f      	cmp	r7, r3
 8015e12:	d2fb      	bcs.n	8015e0c <__hexnan+0xcc>
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	b91b      	cbnz	r3, 8015e20 <__hexnan+0xe0>
 8015e18:	4547      	cmp	r7, r8
 8015e1a:	d127      	bne.n	8015e6c <__hexnan+0x12c>
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	603b      	str	r3, [r7, #0]
 8015e20:	2005      	movs	r0, #5
 8015e22:	e026      	b.n	8015e72 <__hexnan+0x132>
 8015e24:	3501      	adds	r5, #1
 8015e26:	2d08      	cmp	r5, #8
 8015e28:	f10b 0b01 	add.w	fp, fp, #1
 8015e2c:	dd06      	ble.n	8015e3c <__hexnan+0xfc>
 8015e2e:	4544      	cmp	r4, r8
 8015e30:	d9c3      	bls.n	8015dba <__hexnan+0x7a>
 8015e32:	2300      	movs	r3, #0
 8015e34:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e38:	2501      	movs	r5, #1
 8015e3a:	3c04      	subs	r4, #4
 8015e3c:	6822      	ldr	r2, [r4, #0]
 8015e3e:	f000 000f 	and.w	r0, r0, #15
 8015e42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015e46:	6022      	str	r2, [r4, #0]
 8015e48:	e7b7      	b.n	8015dba <__hexnan+0x7a>
 8015e4a:	2508      	movs	r5, #8
 8015e4c:	e7b5      	b.n	8015dba <__hexnan+0x7a>
 8015e4e:	9b01      	ldr	r3, [sp, #4]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d0df      	beq.n	8015e14 <__hexnan+0xd4>
 8015e54:	f04f 32ff 	mov.w	r2, #4294967295
 8015e58:	f1c3 0320 	rsb	r3, r3, #32
 8015e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8015e60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015e64:	401a      	ands	r2, r3
 8015e66:	f846 2c04 	str.w	r2, [r6, #-4]
 8015e6a:	e7d3      	b.n	8015e14 <__hexnan+0xd4>
 8015e6c:	3f04      	subs	r7, #4
 8015e6e:	e7d1      	b.n	8015e14 <__hexnan+0xd4>
 8015e70:	2004      	movs	r0, #4
 8015e72:	b007      	add	sp, #28
 8015e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e78 <_localeconv_r>:
 8015e78:	4800      	ldr	r0, [pc, #0]	; (8015e7c <_localeconv_r+0x4>)
 8015e7a:	4770      	bx	lr
 8015e7c:	20000220 	.word	0x20000220

08015e80 <__retarget_lock_init_recursive>:
 8015e80:	4770      	bx	lr

08015e82 <__retarget_lock_acquire_recursive>:
 8015e82:	4770      	bx	lr

08015e84 <__retarget_lock_release_recursive>:
 8015e84:	4770      	bx	lr

08015e86 <__swhatbuf_r>:
 8015e86:	b570      	push	{r4, r5, r6, lr}
 8015e88:	460e      	mov	r6, r1
 8015e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e8e:	2900      	cmp	r1, #0
 8015e90:	b096      	sub	sp, #88	; 0x58
 8015e92:	4614      	mov	r4, r2
 8015e94:	461d      	mov	r5, r3
 8015e96:	da08      	bge.n	8015eaa <__swhatbuf_r+0x24>
 8015e98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	602a      	str	r2, [r5, #0]
 8015ea0:	061a      	lsls	r2, r3, #24
 8015ea2:	d410      	bmi.n	8015ec6 <__swhatbuf_r+0x40>
 8015ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ea8:	e00e      	b.n	8015ec8 <__swhatbuf_r+0x42>
 8015eaa:	466a      	mov	r2, sp
 8015eac:	f000 ff64 	bl	8016d78 <_fstat_r>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	dbf1      	blt.n	8015e98 <__swhatbuf_r+0x12>
 8015eb4:	9a01      	ldr	r2, [sp, #4]
 8015eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015eba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ebe:	425a      	negs	r2, r3
 8015ec0:	415a      	adcs	r2, r3
 8015ec2:	602a      	str	r2, [r5, #0]
 8015ec4:	e7ee      	b.n	8015ea4 <__swhatbuf_r+0x1e>
 8015ec6:	2340      	movs	r3, #64	; 0x40
 8015ec8:	2000      	movs	r0, #0
 8015eca:	6023      	str	r3, [r4, #0]
 8015ecc:	b016      	add	sp, #88	; 0x58
 8015ece:	bd70      	pop	{r4, r5, r6, pc}

08015ed0 <__smakebuf_r>:
 8015ed0:	898b      	ldrh	r3, [r1, #12]
 8015ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ed4:	079d      	lsls	r5, r3, #30
 8015ed6:	4606      	mov	r6, r0
 8015ed8:	460c      	mov	r4, r1
 8015eda:	d507      	bpl.n	8015eec <__smakebuf_r+0x1c>
 8015edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ee0:	6023      	str	r3, [r4, #0]
 8015ee2:	6123      	str	r3, [r4, #16]
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	6163      	str	r3, [r4, #20]
 8015ee8:	b002      	add	sp, #8
 8015eea:	bd70      	pop	{r4, r5, r6, pc}
 8015eec:	ab01      	add	r3, sp, #4
 8015eee:	466a      	mov	r2, sp
 8015ef0:	f7ff ffc9 	bl	8015e86 <__swhatbuf_r>
 8015ef4:	9900      	ldr	r1, [sp, #0]
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	4630      	mov	r0, r6
 8015efa:	f7fc ff07 	bl	8012d0c <_malloc_r>
 8015efe:	b948      	cbnz	r0, 8015f14 <__smakebuf_r+0x44>
 8015f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f04:	059a      	lsls	r2, r3, #22
 8015f06:	d4ef      	bmi.n	8015ee8 <__smakebuf_r+0x18>
 8015f08:	f023 0303 	bic.w	r3, r3, #3
 8015f0c:	f043 0302 	orr.w	r3, r3, #2
 8015f10:	81a3      	strh	r3, [r4, #12]
 8015f12:	e7e3      	b.n	8015edc <__smakebuf_r+0xc>
 8015f14:	4b0d      	ldr	r3, [pc, #52]	; (8015f4c <__smakebuf_r+0x7c>)
 8015f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f18:	89a3      	ldrh	r3, [r4, #12]
 8015f1a:	6020      	str	r0, [r4, #0]
 8015f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f20:	81a3      	strh	r3, [r4, #12]
 8015f22:	9b00      	ldr	r3, [sp, #0]
 8015f24:	6163      	str	r3, [r4, #20]
 8015f26:	9b01      	ldr	r3, [sp, #4]
 8015f28:	6120      	str	r0, [r4, #16]
 8015f2a:	b15b      	cbz	r3, 8015f44 <__smakebuf_r+0x74>
 8015f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f30:	4630      	mov	r0, r6
 8015f32:	f000 ff33 	bl	8016d9c <_isatty_r>
 8015f36:	b128      	cbz	r0, 8015f44 <__smakebuf_r+0x74>
 8015f38:	89a3      	ldrh	r3, [r4, #12]
 8015f3a:	f023 0303 	bic.w	r3, r3, #3
 8015f3e:	f043 0301 	orr.w	r3, r3, #1
 8015f42:	81a3      	strh	r3, [r4, #12]
 8015f44:	89a0      	ldrh	r0, [r4, #12]
 8015f46:	4305      	orrs	r5, r0
 8015f48:	81a5      	strh	r5, [r4, #12]
 8015f4a:	e7cd      	b.n	8015ee8 <__smakebuf_r+0x18>
 8015f4c:	080155f9 	.word	0x080155f9

08015f50 <__ascii_mbtowc>:
 8015f50:	b082      	sub	sp, #8
 8015f52:	b901      	cbnz	r1, 8015f56 <__ascii_mbtowc+0x6>
 8015f54:	a901      	add	r1, sp, #4
 8015f56:	b142      	cbz	r2, 8015f6a <__ascii_mbtowc+0x1a>
 8015f58:	b14b      	cbz	r3, 8015f6e <__ascii_mbtowc+0x1e>
 8015f5a:	7813      	ldrb	r3, [r2, #0]
 8015f5c:	600b      	str	r3, [r1, #0]
 8015f5e:	7812      	ldrb	r2, [r2, #0]
 8015f60:	1e10      	subs	r0, r2, #0
 8015f62:	bf18      	it	ne
 8015f64:	2001      	movne	r0, #1
 8015f66:	b002      	add	sp, #8
 8015f68:	4770      	bx	lr
 8015f6a:	4610      	mov	r0, r2
 8015f6c:	e7fb      	b.n	8015f66 <__ascii_mbtowc+0x16>
 8015f6e:	f06f 0001 	mvn.w	r0, #1
 8015f72:	e7f8      	b.n	8015f66 <__ascii_mbtowc+0x16>

08015f74 <__malloc_lock>:
 8015f74:	4801      	ldr	r0, [pc, #4]	; (8015f7c <__malloc_lock+0x8>)
 8015f76:	f7ff bf84 	b.w	8015e82 <__retarget_lock_acquire_recursive>
 8015f7a:	bf00      	nop
 8015f7c:	2000d068 	.word	0x2000d068

08015f80 <__malloc_unlock>:
 8015f80:	4801      	ldr	r0, [pc, #4]	; (8015f88 <__malloc_unlock+0x8>)
 8015f82:	f7ff bf7f 	b.w	8015e84 <__retarget_lock_release_recursive>
 8015f86:	bf00      	nop
 8015f88:	2000d068 	.word	0x2000d068

08015f8c <_Balloc>:
 8015f8c:	b570      	push	{r4, r5, r6, lr}
 8015f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f90:	4604      	mov	r4, r0
 8015f92:	460d      	mov	r5, r1
 8015f94:	b976      	cbnz	r6, 8015fb4 <_Balloc+0x28>
 8015f96:	2010      	movs	r0, #16
 8015f98:	f7fc fe26 	bl	8012be8 <malloc>
 8015f9c:	4602      	mov	r2, r0
 8015f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8015fa0:	b920      	cbnz	r0, 8015fac <_Balloc+0x20>
 8015fa2:	4b18      	ldr	r3, [pc, #96]	; (8016004 <_Balloc+0x78>)
 8015fa4:	4818      	ldr	r0, [pc, #96]	; (8016008 <_Balloc+0x7c>)
 8015fa6:	2166      	movs	r1, #102	; 0x66
 8015fa8:	f000 fea6 	bl	8016cf8 <__assert_func>
 8015fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015fb0:	6006      	str	r6, [r0, #0]
 8015fb2:	60c6      	str	r6, [r0, #12]
 8015fb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015fb6:	68f3      	ldr	r3, [r6, #12]
 8015fb8:	b183      	cbz	r3, 8015fdc <_Balloc+0x50>
 8015fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015fc2:	b9b8      	cbnz	r0, 8015ff4 <_Balloc+0x68>
 8015fc4:	2101      	movs	r1, #1
 8015fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8015fca:	1d72      	adds	r2, r6, #5
 8015fcc:	0092      	lsls	r2, r2, #2
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f000 fc9d 	bl	801690e <_calloc_r>
 8015fd4:	b160      	cbz	r0, 8015ff0 <_Balloc+0x64>
 8015fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015fda:	e00e      	b.n	8015ffa <_Balloc+0x6e>
 8015fdc:	2221      	movs	r2, #33	; 0x21
 8015fde:	2104      	movs	r1, #4
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f000 fc94 	bl	801690e <_calloc_r>
 8015fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fe8:	60f0      	str	r0, [r6, #12]
 8015fea:	68db      	ldr	r3, [r3, #12]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d1e4      	bne.n	8015fba <_Balloc+0x2e>
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	bd70      	pop	{r4, r5, r6, pc}
 8015ff4:	6802      	ldr	r2, [r0, #0]
 8015ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016000:	e7f7      	b.n	8015ff2 <_Balloc+0x66>
 8016002:	bf00      	nop
 8016004:	08025746 	.word	0x08025746
 8016008:	080258a8 	.word	0x080258a8

0801600c <_Bfree>:
 801600c:	b570      	push	{r4, r5, r6, lr}
 801600e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016010:	4605      	mov	r5, r0
 8016012:	460c      	mov	r4, r1
 8016014:	b976      	cbnz	r6, 8016034 <_Bfree+0x28>
 8016016:	2010      	movs	r0, #16
 8016018:	f7fc fde6 	bl	8012be8 <malloc>
 801601c:	4602      	mov	r2, r0
 801601e:	6268      	str	r0, [r5, #36]	; 0x24
 8016020:	b920      	cbnz	r0, 801602c <_Bfree+0x20>
 8016022:	4b09      	ldr	r3, [pc, #36]	; (8016048 <_Bfree+0x3c>)
 8016024:	4809      	ldr	r0, [pc, #36]	; (801604c <_Bfree+0x40>)
 8016026:	218a      	movs	r1, #138	; 0x8a
 8016028:	f000 fe66 	bl	8016cf8 <__assert_func>
 801602c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016030:	6006      	str	r6, [r0, #0]
 8016032:	60c6      	str	r6, [r0, #12]
 8016034:	b13c      	cbz	r4, 8016046 <_Bfree+0x3a>
 8016036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016038:	6862      	ldr	r2, [r4, #4]
 801603a:	68db      	ldr	r3, [r3, #12]
 801603c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016040:	6021      	str	r1, [r4, #0]
 8016042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016046:	bd70      	pop	{r4, r5, r6, pc}
 8016048:	08025746 	.word	0x08025746
 801604c:	080258a8 	.word	0x080258a8

08016050 <__multadd>:
 8016050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016054:	690d      	ldr	r5, [r1, #16]
 8016056:	4607      	mov	r7, r0
 8016058:	460c      	mov	r4, r1
 801605a:	461e      	mov	r6, r3
 801605c:	f101 0c14 	add.w	ip, r1, #20
 8016060:	2000      	movs	r0, #0
 8016062:	f8dc 3000 	ldr.w	r3, [ip]
 8016066:	b299      	uxth	r1, r3
 8016068:	fb02 6101 	mla	r1, r2, r1, r6
 801606c:	0c1e      	lsrs	r6, r3, #16
 801606e:	0c0b      	lsrs	r3, r1, #16
 8016070:	fb02 3306 	mla	r3, r2, r6, r3
 8016074:	b289      	uxth	r1, r1
 8016076:	3001      	adds	r0, #1
 8016078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801607c:	4285      	cmp	r5, r0
 801607e:	f84c 1b04 	str.w	r1, [ip], #4
 8016082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016086:	dcec      	bgt.n	8016062 <__multadd+0x12>
 8016088:	b30e      	cbz	r6, 80160ce <__multadd+0x7e>
 801608a:	68a3      	ldr	r3, [r4, #8]
 801608c:	42ab      	cmp	r3, r5
 801608e:	dc19      	bgt.n	80160c4 <__multadd+0x74>
 8016090:	6861      	ldr	r1, [r4, #4]
 8016092:	4638      	mov	r0, r7
 8016094:	3101      	adds	r1, #1
 8016096:	f7ff ff79 	bl	8015f8c <_Balloc>
 801609a:	4680      	mov	r8, r0
 801609c:	b928      	cbnz	r0, 80160aa <__multadd+0x5a>
 801609e:	4602      	mov	r2, r0
 80160a0:	4b0c      	ldr	r3, [pc, #48]	; (80160d4 <__multadd+0x84>)
 80160a2:	480d      	ldr	r0, [pc, #52]	; (80160d8 <__multadd+0x88>)
 80160a4:	21b5      	movs	r1, #181	; 0xb5
 80160a6:	f000 fe27 	bl	8016cf8 <__assert_func>
 80160aa:	6922      	ldr	r2, [r4, #16]
 80160ac:	3202      	adds	r2, #2
 80160ae:	f104 010c 	add.w	r1, r4, #12
 80160b2:	0092      	lsls	r2, r2, #2
 80160b4:	300c      	adds	r0, #12
 80160b6:	f7fc fda7 	bl	8012c08 <memcpy>
 80160ba:	4621      	mov	r1, r4
 80160bc:	4638      	mov	r0, r7
 80160be:	f7ff ffa5 	bl	801600c <_Bfree>
 80160c2:	4644      	mov	r4, r8
 80160c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80160c8:	3501      	adds	r5, #1
 80160ca:	615e      	str	r6, [r3, #20]
 80160cc:	6125      	str	r5, [r4, #16]
 80160ce:	4620      	mov	r0, r4
 80160d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160d4:	080257b8 	.word	0x080257b8
 80160d8:	080258a8 	.word	0x080258a8

080160dc <__s2b>:
 80160dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160e0:	460c      	mov	r4, r1
 80160e2:	4615      	mov	r5, r2
 80160e4:	461f      	mov	r7, r3
 80160e6:	2209      	movs	r2, #9
 80160e8:	3308      	adds	r3, #8
 80160ea:	4606      	mov	r6, r0
 80160ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80160f0:	2100      	movs	r1, #0
 80160f2:	2201      	movs	r2, #1
 80160f4:	429a      	cmp	r2, r3
 80160f6:	db09      	blt.n	801610c <__s2b+0x30>
 80160f8:	4630      	mov	r0, r6
 80160fa:	f7ff ff47 	bl	8015f8c <_Balloc>
 80160fe:	b940      	cbnz	r0, 8016112 <__s2b+0x36>
 8016100:	4602      	mov	r2, r0
 8016102:	4b19      	ldr	r3, [pc, #100]	; (8016168 <__s2b+0x8c>)
 8016104:	4819      	ldr	r0, [pc, #100]	; (801616c <__s2b+0x90>)
 8016106:	21ce      	movs	r1, #206	; 0xce
 8016108:	f000 fdf6 	bl	8016cf8 <__assert_func>
 801610c:	0052      	lsls	r2, r2, #1
 801610e:	3101      	adds	r1, #1
 8016110:	e7f0      	b.n	80160f4 <__s2b+0x18>
 8016112:	9b08      	ldr	r3, [sp, #32]
 8016114:	6143      	str	r3, [r0, #20]
 8016116:	2d09      	cmp	r5, #9
 8016118:	f04f 0301 	mov.w	r3, #1
 801611c:	6103      	str	r3, [r0, #16]
 801611e:	dd16      	ble.n	801614e <__s2b+0x72>
 8016120:	f104 0909 	add.w	r9, r4, #9
 8016124:	46c8      	mov	r8, r9
 8016126:	442c      	add	r4, r5
 8016128:	f818 3b01 	ldrb.w	r3, [r8], #1
 801612c:	4601      	mov	r1, r0
 801612e:	3b30      	subs	r3, #48	; 0x30
 8016130:	220a      	movs	r2, #10
 8016132:	4630      	mov	r0, r6
 8016134:	f7ff ff8c 	bl	8016050 <__multadd>
 8016138:	45a0      	cmp	r8, r4
 801613a:	d1f5      	bne.n	8016128 <__s2b+0x4c>
 801613c:	f1a5 0408 	sub.w	r4, r5, #8
 8016140:	444c      	add	r4, r9
 8016142:	1b2d      	subs	r5, r5, r4
 8016144:	1963      	adds	r3, r4, r5
 8016146:	42bb      	cmp	r3, r7
 8016148:	db04      	blt.n	8016154 <__s2b+0x78>
 801614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801614e:	340a      	adds	r4, #10
 8016150:	2509      	movs	r5, #9
 8016152:	e7f6      	b.n	8016142 <__s2b+0x66>
 8016154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016158:	4601      	mov	r1, r0
 801615a:	3b30      	subs	r3, #48	; 0x30
 801615c:	220a      	movs	r2, #10
 801615e:	4630      	mov	r0, r6
 8016160:	f7ff ff76 	bl	8016050 <__multadd>
 8016164:	e7ee      	b.n	8016144 <__s2b+0x68>
 8016166:	bf00      	nop
 8016168:	080257b8 	.word	0x080257b8
 801616c:	080258a8 	.word	0x080258a8

08016170 <__hi0bits>:
 8016170:	0c03      	lsrs	r3, r0, #16
 8016172:	041b      	lsls	r3, r3, #16
 8016174:	b9d3      	cbnz	r3, 80161ac <__hi0bits+0x3c>
 8016176:	0400      	lsls	r0, r0, #16
 8016178:	2310      	movs	r3, #16
 801617a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801617e:	bf04      	itt	eq
 8016180:	0200      	lsleq	r0, r0, #8
 8016182:	3308      	addeq	r3, #8
 8016184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016188:	bf04      	itt	eq
 801618a:	0100      	lsleq	r0, r0, #4
 801618c:	3304      	addeq	r3, #4
 801618e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016192:	bf04      	itt	eq
 8016194:	0080      	lsleq	r0, r0, #2
 8016196:	3302      	addeq	r3, #2
 8016198:	2800      	cmp	r0, #0
 801619a:	db05      	blt.n	80161a8 <__hi0bits+0x38>
 801619c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80161a0:	f103 0301 	add.w	r3, r3, #1
 80161a4:	bf08      	it	eq
 80161a6:	2320      	moveq	r3, #32
 80161a8:	4618      	mov	r0, r3
 80161aa:	4770      	bx	lr
 80161ac:	2300      	movs	r3, #0
 80161ae:	e7e4      	b.n	801617a <__hi0bits+0xa>

080161b0 <__lo0bits>:
 80161b0:	6803      	ldr	r3, [r0, #0]
 80161b2:	f013 0207 	ands.w	r2, r3, #7
 80161b6:	4601      	mov	r1, r0
 80161b8:	d00b      	beq.n	80161d2 <__lo0bits+0x22>
 80161ba:	07da      	lsls	r2, r3, #31
 80161bc:	d423      	bmi.n	8016206 <__lo0bits+0x56>
 80161be:	0798      	lsls	r0, r3, #30
 80161c0:	bf49      	itett	mi
 80161c2:	085b      	lsrmi	r3, r3, #1
 80161c4:	089b      	lsrpl	r3, r3, #2
 80161c6:	2001      	movmi	r0, #1
 80161c8:	600b      	strmi	r3, [r1, #0]
 80161ca:	bf5c      	itt	pl
 80161cc:	600b      	strpl	r3, [r1, #0]
 80161ce:	2002      	movpl	r0, #2
 80161d0:	4770      	bx	lr
 80161d2:	b298      	uxth	r0, r3
 80161d4:	b9a8      	cbnz	r0, 8016202 <__lo0bits+0x52>
 80161d6:	0c1b      	lsrs	r3, r3, #16
 80161d8:	2010      	movs	r0, #16
 80161da:	b2da      	uxtb	r2, r3
 80161dc:	b90a      	cbnz	r2, 80161e2 <__lo0bits+0x32>
 80161de:	3008      	adds	r0, #8
 80161e0:	0a1b      	lsrs	r3, r3, #8
 80161e2:	071a      	lsls	r2, r3, #28
 80161e4:	bf04      	itt	eq
 80161e6:	091b      	lsreq	r3, r3, #4
 80161e8:	3004      	addeq	r0, #4
 80161ea:	079a      	lsls	r2, r3, #30
 80161ec:	bf04      	itt	eq
 80161ee:	089b      	lsreq	r3, r3, #2
 80161f0:	3002      	addeq	r0, #2
 80161f2:	07da      	lsls	r2, r3, #31
 80161f4:	d403      	bmi.n	80161fe <__lo0bits+0x4e>
 80161f6:	085b      	lsrs	r3, r3, #1
 80161f8:	f100 0001 	add.w	r0, r0, #1
 80161fc:	d005      	beq.n	801620a <__lo0bits+0x5a>
 80161fe:	600b      	str	r3, [r1, #0]
 8016200:	4770      	bx	lr
 8016202:	4610      	mov	r0, r2
 8016204:	e7e9      	b.n	80161da <__lo0bits+0x2a>
 8016206:	2000      	movs	r0, #0
 8016208:	4770      	bx	lr
 801620a:	2020      	movs	r0, #32
 801620c:	4770      	bx	lr
	...

08016210 <__i2b>:
 8016210:	b510      	push	{r4, lr}
 8016212:	460c      	mov	r4, r1
 8016214:	2101      	movs	r1, #1
 8016216:	f7ff feb9 	bl	8015f8c <_Balloc>
 801621a:	4602      	mov	r2, r0
 801621c:	b928      	cbnz	r0, 801622a <__i2b+0x1a>
 801621e:	4b05      	ldr	r3, [pc, #20]	; (8016234 <__i2b+0x24>)
 8016220:	4805      	ldr	r0, [pc, #20]	; (8016238 <__i2b+0x28>)
 8016222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016226:	f000 fd67 	bl	8016cf8 <__assert_func>
 801622a:	2301      	movs	r3, #1
 801622c:	6144      	str	r4, [r0, #20]
 801622e:	6103      	str	r3, [r0, #16]
 8016230:	bd10      	pop	{r4, pc}
 8016232:	bf00      	nop
 8016234:	080257b8 	.word	0x080257b8
 8016238:	080258a8 	.word	0x080258a8

0801623c <__multiply>:
 801623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016240:	4691      	mov	r9, r2
 8016242:	690a      	ldr	r2, [r1, #16]
 8016244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016248:	429a      	cmp	r2, r3
 801624a:	bfb8      	it	lt
 801624c:	460b      	movlt	r3, r1
 801624e:	460c      	mov	r4, r1
 8016250:	bfbc      	itt	lt
 8016252:	464c      	movlt	r4, r9
 8016254:	4699      	movlt	r9, r3
 8016256:	6927      	ldr	r7, [r4, #16]
 8016258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801625c:	68a3      	ldr	r3, [r4, #8]
 801625e:	6861      	ldr	r1, [r4, #4]
 8016260:	eb07 060a 	add.w	r6, r7, sl
 8016264:	42b3      	cmp	r3, r6
 8016266:	b085      	sub	sp, #20
 8016268:	bfb8      	it	lt
 801626a:	3101      	addlt	r1, #1
 801626c:	f7ff fe8e 	bl	8015f8c <_Balloc>
 8016270:	b930      	cbnz	r0, 8016280 <__multiply+0x44>
 8016272:	4602      	mov	r2, r0
 8016274:	4b44      	ldr	r3, [pc, #272]	; (8016388 <__multiply+0x14c>)
 8016276:	4845      	ldr	r0, [pc, #276]	; (801638c <__multiply+0x150>)
 8016278:	f240 115d 	movw	r1, #349	; 0x15d
 801627c:	f000 fd3c 	bl	8016cf8 <__assert_func>
 8016280:	f100 0514 	add.w	r5, r0, #20
 8016284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016288:	462b      	mov	r3, r5
 801628a:	2200      	movs	r2, #0
 801628c:	4543      	cmp	r3, r8
 801628e:	d321      	bcc.n	80162d4 <__multiply+0x98>
 8016290:	f104 0314 	add.w	r3, r4, #20
 8016294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016298:	f109 0314 	add.w	r3, r9, #20
 801629c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80162a0:	9202      	str	r2, [sp, #8]
 80162a2:	1b3a      	subs	r2, r7, r4
 80162a4:	3a15      	subs	r2, #21
 80162a6:	f022 0203 	bic.w	r2, r2, #3
 80162aa:	3204      	adds	r2, #4
 80162ac:	f104 0115 	add.w	r1, r4, #21
 80162b0:	428f      	cmp	r7, r1
 80162b2:	bf38      	it	cc
 80162b4:	2204      	movcc	r2, #4
 80162b6:	9201      	str	r2, [sp, #4]
 80162b8:	9a02      	ldr	r2, [sp, #8]
 80162ba:	9303      	str	r3, [sp, #12]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d80c      	bhi.n	80162da <__multiply+0x9e>
 80162c0:	2e00      	cmp	r6, #0
 80162c2:	dd03      	ble.n	80162cc <__multiply+0x90>
 80162c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d05a      	beq.n	8016382 <__multiply+0x146>
 80162cc:	6106      	str	r6, [r0, #16]
 80162ce:	b005      	add	sp, #20
 80162d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d4:	f843 2b04 	str.w	r2, [r3], #4
 80162d8:	e7d8      	b.n	801628c <__multiply+0x50>
 80162da:	f8b3 a000 	ldrh.w	sl, [r3]
 80162de:	f1ba 0f00 	cmp.w	sl, #0
 80162e2:	d024      	beq.n	801632e <__multiply+0xf2>
 80162e4:	f104 0e14 	add.w	lr, r4, #20
 80162e8:	46a9      	mov	r9, r5
 80162ea:	f04f 0c00 	mov.w	ip, #0
 80162ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80162f2:	f8d9 1000 	ldr.w	r1, [r9]
 80162f6:	fa1f fb82 	uxth.w	fp, r2
 80162fa:	b289      	uxth	r1, r1
 80162fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8016300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016304:	f8d9 2000 	ldr.w	r2, [r9]
 8016308:	4461      	add	r1, ip
 801630a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801630e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016316:	b289      	uxth	r1, r1
 8016318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801631c:	4577      	cmp	r7, lr
 801631e:	f849 1b04 	str.w	r1, [r9], #4
 8016322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016326:	d8e2      	bhi.n	80162ee <__multiply+0xb2>
 8016328:	9a01      	ldr	r2, [sp, #4]
 801632a:	f845 c002 	str.w	ip, [r5, r2]
 801632e:	9a03      	ldr	r2, [sp, #12]
 8016330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016334:	3304      	adds	r3, #4
 8016336:	f1b9 0f00 	cmp.w	r9, #0
 801633a:	d020      	beq.n	801637e <__multiply+0x142>
 801633c:	6829      	ldr	r1, [r5, #0]
 801633e:	f104 0c14 	add.w	ip, r4, #20
 8016342:	46ae      	mov	lr, r5
 8016344:	f04f 0a00 	mov.w	sl, #0
 8016348:	f8bc b000 	ldrh.w	fp, [ip]
 801634c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016350:	fb09 220b 	mla	r2, r9, fp, r2
 8016354:	4492      	add	sl, r2
 8016356:	b289      	uxth	r1, r1
 8016358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801635c:	f84e 1b04 	str.w	r1, [lr], #4
 8016360:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016364:	f8be 1000 	ldrh.w	r1, [lr]
 8016368:	0c12      	lsrs	r2, r2, #16
 801636a:	fb09 1102 	mla	r1, r9, r2, r1
 801636e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016372:	4567      	cmp	r7, ip
 8016374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016378:	d8e6      	bhi.n	8016348 <__multiply+0x10c>
 801637a:	9a01      	ldr	r2, [sp, #4]
 801637c:	50a9      	str	r1, [r5, r2]
 801637e:	3504      	adds	r5, #4
 8016380:	e79a      	b.n	80162b8 <__multiply+0x7c>
 8016382:	3e01      	subs	r6, #1
 8016384:	e79c      	b.n	80162c0 <__multiply+0x84>
 8016386:	bf00      	nop
 8016388:	080257b8 	.word	0x080257b8
 801638c:	080258a8 	.word	0x080258a8

08016390 <__pow5mult>:
 8016390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016394:	4615      	mov	r5, r2
 8016396:	f012 0203 	ands.w	r2, r2, #3
 801639a:	4606      	mov	r6, r0
 801639c:	460f      	mov	r7, r1
 801639e:	d007      	beq.n	80163b0 <__pow5mult+0x20>
 80163a0:	4c25      	ldr	r4, [pc, #148]	; (8016438 <__pow5mult+0xa8>)
 80163a2:	3a01      	subs	r2, #1
 80163a4:	2300      	movs	r3, #0
 80163a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80163aa:	f7ff fe51 	bl	8016050 <__multadd>
 80163ae:	4607      	mov	r7, r0
 80163b0:	10ad      	asrs	r5, r5, #2
 80163b2:	d03d      	beq.n	8016430 <__pow5mult+0xa0>
 80163b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80163b6:	b97c      	cbnz	r4, 80163d8 <__pow5mult+0x48>
 80163b8:	2010      	movs	r0, #16
 80163ba:	f7fc fc15 	bl	8012be8 <malloc>
 80163be:	4602      	mov	r2, r0
 80163c0:	6270      	str	r0, [r6, #36]	; 0x24
 80163c2:	b928      	cbnz	r0, 80163d0 <__pow5mult+0x40>
 80163c4:	4b1d      	ldr	r3, [pc, #116]	; (801643c <__pow5mult+0xac>)
 80163c6:	481e      	ldr	r0, [pc, #120]	; (8016440 <__pow5mult+0xb0>)
 80163c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80163cc:	f000 fc94 	bl	8016cf8 <__assert_func>
 80163d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80163d4:	6004      	str	r4, [r0, #0]
 80163d6:	60c4      	str	r4, [r0, #12]
 80163d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80163dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80163e0:	b94c      	cbnz	r4, 80163f6 <__pow5mult+0x66>
 80163e2:	f240 2171 	movw	r1, #625	; 0x271
 80163e6:	4630      	mov	r0, r6
 80163e8:	f7ff ff12 	bl	8016210 <__i2b>
 80163ec:	2300      	movs	r3, #0
 80163ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80163f2:	4604      	mov	r4, r0
 80163f4:	6003      	str	r3, [r0, #0]
 80163f6:	f04f 0900 	mov.w	r9, #0
 80163fa:	07eb      	lsls	r3, r5, #31
 80163fc:	d50a      	bpl.n	8016414 <__pow5mult+0x84>
 80163fe:	4639      	mov	r1, r7
 8016400:	4622      	mov	r2, r4
 8016402:	4630      	mov	r0, r6
 8016404:	f7ff ff1a 	bl	801623c <__multiply>
 8016408:	4639      	mov	r1, r7
 801640a:	4680      	mov	r8, r0
 801640c:	4630      	mov	r0, r6
 801640e:	f7ff fdfd 	bl	801600c <_Bfree>
 8016412:	4647      	mov	r7, r8
 8016414:	106d      	asrs	r5, r5, #1
 8016416:	d00b      	beq.n	8016430 <__pow5mult+0xa0>
 8016418:	6820      	ldr	r0, [r4, #0]
 801641a:	b938      	cbnz	r0, 801642c <__pow5mult+0x9c>
 801641c:	4622      	mov	r2, r4
 801641e:	4621      	mov	r1, r4
 8016420:	4630      	mov	r0, r6
 8016422:	f7ff ff0b 	bl	801623c <__multiply>
 8016426:	6020      	str	r0, [r4, #0]
 8016428:	f8c0 9000 	str.w	r9, [r0]
 801642c:	4604      	mov	r4, r0
 801642e:	e7e4      	b.n	80163fa <__pow5mult+0x6a>
 8016430:	4638      	mov	r0, r7
 8016432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016436:	bf00      	nop
 8016438:	080259f8 	.word	0x080259f8
 801643c:	08025746 	.word	0x08025746
 8016440:	080258a8 	.word	0x080258a8

08016444 <__lshift>:
 8016444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016448:	460c      	mov	r4, r1
 801644a:	6849      	ldr	r1, [r1, #4]
 801644c:	6923      	ldr	r3, [r4, #16]
 801644e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016452:	68a3      	ldr	r3, [r4, #8]
 8016454:	4607      	mov	r7, r0
 8016456:	4691      	mov	r9, r2
 8016458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801645c:	f108 0601 	add.w	r6, r8, #1
 8016460:	42b3      	cmp	r3, r6
 8016462:	db0b      	blt.n	801647c <__lshift+0x38>
 8016464:	4638      	mov	r0, r7
 8016466:	f7ff fd91 	bl	8015f8c <_Balloc>
 801646a:	4605      	mov	r5, r0
 801646c:	b948      	cbnz	r0, 8016482 <__lshift+0x3e>
 801646e:	4602      	mov	r2, r0
 8016470:	4b2a      	ldr	r3, [pc, #168]	; (801651c <__lshift+0xd8>)
 8016472:	482b      	ldr	r0, [pc, #172]	; (8016520 <__lshift+0xdc>)
 8016474:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016478:	f000 fc3e 	bl	8016cf8 <__assert_func>
 801647c:	3101      	adds	r1, #1
 801647e:	005b      	lsls	r3, r3, #1
 8016480:	e7ee      	b.n	8016460 <__lshift+0x1c>
 8016482:	2300      	movs	r3, #0
 8016484:	f100 0114 	add.w	r1, r0, #20
 8016488:	f100 0210 	add.w	r2, r0, #16
 801648c:	4618      	mov	r0, r3
 801648e:	4553      	cmp	r3, sl
 8016490:	db37      	blt.n	8016502 <__lshift+0xbe>
 8016492:	6920      	ldr	r0, [r4, #16]
 8016494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016498:	f104 0314 	add.w	r3, r4, #20
 801649c:	f019 091f 	ands.w	r9, r9, #31
 80164a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80164a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80164a8:	d02f      	beq.n	801650a <__lshift+0xc6>
 80164aa:	f1c9 0e20 	rsb	lr, r9, #32
 80164ae:	468a      	mov	sl, r1
 80164b0:	f04f 0c00 	mov.w	ip, #0
 80164b4:	681a      	ldr	r2, [r3, #0]
 80164b6:	fa02 f209 	lsl.w	r2, r2, r9
 80164ba:	ea42 020c 	orr.w	r2, r2, ip
 80164be:	f84a 2b04 	str.w	r2, [sl], #4
 80164c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80164c6:	4298      	cmp	r0, r3
 80164c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80164cc:	d8f2      	bhi.n	80164b4 <__lshift+0x70>
 80164ce:	1b03      	subs	r3, r0, r4
 80164d0:	3b15      	subs	r3, #21
 80164d2:	f023 0303 	bic.w	r3, r3, #3
 80164d6:	3304      	adds	r3, #4
 80164d8:	f104 0215 	add.w	r2, r4, #21
 80164dc:	4290      	cmp	r0, r2
 80164de:	bf38      	it	cc
 80164e0:	2304      	movcc	r3, #4
 80164e2:	f841 c003 	str.w	ip, [r1, r3]
 80164e6:	f1bc 0f00 	cmp.w	ip, #0
 80164ea:	d001      	beq.n	80164f0 <__lshift+0xac>
 80164ec:	f108 0602 	add.w	r6, r8, #2
 80164f0:	3e01      	subs	r6, #1
 80164f2:	4638      	mov	r0, r7
 80164f4:	612e      	str	r6, [r5, #16]
 80164f6:	4621      	mov	r1, r4
 80164f8:	f7ff fd88 	bl	801600c <_Bfree>
 80164fc:	4628      	mov	r0, r5
 80164fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016502:	f842 0f04 	str.w	r0, [r2, #4]!
 8016506:	3301      	adds	r3, #1
 8016508:	e7c1      	b.n	801648e <__lshift+0x4a>
 801650a:	3904      	subs	r1, #4
 801650c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016510:	f841 2f04 	str.w	r2, [r1, #4]!
 8016514:	4298      	cmp	r0, r3
 8016516:	d8f9      	bhi.n	801650c <__lshift+0xc8>
 8016518:	e7ea      	b.n	80164f0 <__lshift+0xac>
 801651a:	bf00      	nop
 801651c:	080257b8 	.word	0x080257b8
 8016520:	080258a8 	.word	0x080258a8

08016524 <__mcmp>:
 8016524:	b530      	push	{r4, r5, lr}
 8016526:	6902      	ldr	r2, [r0, #16]
 8016528:	690c      	ldr	r4, [r1, #16]
 801652a:	1b12      	subs	r2, r2, r4
 801652c:	d10e      	bne.n	801654c <__mcmp+0x28>
 801652e:	f100 0314 	add.w	r3, r0, #20
 8016532:	3114      	adds	r1, #20
 8016534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801653c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016544:	42a5      	cmp	r5, r4
 8016546:	d003      	beq.n	8016550 <__mcmp+0x2c>
 8016548:	d305      	bcc.n	8016556 <__mcmp+0x32>
 801654a:	2201      	movs	r2, #1
 801654c:	4610      	mov	r0, r2
 801654e:	bd30      	pop	{r4, r5, pc}
 8016550:	4283      	cmp	r3, r0
 8016552:	d3f3      	bcc.n	801653c <__mcmp+0x18>
 8016554:	e7fa      	b.n	801654c <__mcmp+0x28>
 8016556:	f04f 32ff 	mov.w	r2, #4294967295
 801655a:	e7f7      	b.n	801654c <__mcmp+0x28>

0801655c <__mdiff>:
 801655c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016560:	460c      	mov	r4, r1
 8016562:	4606      	mov	r6, r0
 8016564:	4611      	mov	r1, r2
 8016566:	4620      	mov	r0, r4
 8016568:	4690      	mov	r8, r2
 801656a:	f7ff ffdb 	bl	8016524 <__mcmp>
 801656e:	1e05      	subs	r5, r0, #0
 8016570:	d110      	bne.n	8016594 <__mdiff+0x38>
 8016572:	4629      	mov	r1, r5
 8016574:	4630      	mov	r0, r6
 8016576:	f7ff fd09 	bl	8015f8c <_Balloc>
 801657a:	b930      	cbnz	r0, 801658a <__mdiff+0x2e>
 801657c:	4b3a      	ldr	r3, [pc, #232]	; (8016668 <__mdiff+0x10c>)
 801657e:	4602      	mov	r2, r0
 8016580:	f240 2132 	movw	r1, #562	; 0x232
 8016584:	4839      	ldr	r0, [pc, #228]	; (801666c <__mdiff+0x110>)
 8016586:	f000 fbb7 	bl	8016cf8 <__assert_func>
 801658a:	2301      	movs	r3, #1
 801658c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016594:	bfa4      	itt	ge
 8016596:	4643      	movge	r3, r8
 8016598:	46a0      	movge	r8, r4
 801659a:	4630      	mov	r0, r6
 801659c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80165a0:	bfa6      	itte	ge
 80165a2:	461c      	movge	r4, r3
 80165a4:	2500      	movge	r5, #0
 80165a6:	2501      	movlt	r5, #1
 80165a8:	f7ff fcf0 	bl	8015f8c <_Balloc>
 80165ac:	b920      	cbnz	r0, 80165b8 <__mdiff+0x5c>
 80165ae:	4b2e      	ldr	r3, [pc, #184]	; (8016668 <__mdiff+0x10c>)
 80165b0:	4602      	mov	r2, r0
 80165b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80165b6:	e7e5      	b.n	8016584 <__mdiff+0x28>
 80165b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80165bc:	6926      	ldr	r6, [r4, #16]
 80165be:	60c5      	str	r5, [r0, #12]
 80165c0:	f104 0914 	add.w	r9, r4, #20
 80165c4:	f108 0514 	add.w	r5, r8, #20
 80165c8:	f100 0e14 	add.w	lr, r0, #20
 80165cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80165d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80165d4:	f108 0210 	add.w	r2, r8, #16
 80165d8:	46f2      	mov	sl, lr
 80165da:	2100      	movs	r1, #0
 80165dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80165e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80165e4:	fa1f f883 	uxth.w	r8, r3
 80165e8:	fa11 f18b 	uxtah	r1, r1, fp
 80165ec:	0c1b      	lsrs	r3, r3, #16
 80165ee:	eba1 0808 	sub.w	r8, r1, r8
 80165f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80165f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80165fa:	fa1f f888 	uxth.w	r8, r8
 80165fe:	1419      	asrs	r1, r3, #16
 8016600:	454e      	cmp	r6, r9
 8016602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016606:	f84a 3b04 	str.w	r3, [sl], #4
 801660a:	d8e7      	bhi.n	80165dc <__mdiff+0x80>
 801660c:	1b33      	subs	r3, r6, r4
 801660e:	3b15      	subs	r3, #21
 8016610:	f023 0303 	bic.w	r3, r3, #3
 8016614:	3304      	adds	r3, #4
 8016616:	3415      	adds	r4, #21
 8016618:	42a6      	cmp	r6, r4
 801661a:	bf38      	it	cc
 801661c:	2304      	movcc	r3, #4
 801661e:	441d      	add	r5, r3
 8016620:	4473      	add	r3, lr
 8016622:	469e      	mov	lr, r3
 8016624:	462e      	mov	r6, r5
 8016626:	4566      	cmp	r6, ip
 8016628:	d30e      	bcc.n	8016648 <__mdiff+0xec>
 801662a:	f10c 0203 	add.w	r2, ip, #3
 801662e:	1b52      	subs	r2, r2, r5
 8016630:	f022 0203 	bic.w	r2, r2, #3
 8016634:	3d03      	subs	r5, #3
 8016636:	45ac      	cmp	ip, r5
 8016638:	bf38      	it	cc
 801663a:	2200      	movcc	r2, #0
 801663c:	441a      	add	r2, r3
 801663e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016642:	b17b      	cbz	r3, 8016664 <__mdiff+0x108>
 8016644:	6107      	str	r7, [r0, #16]
 8016646:	e7a3      	b.n	8016590 <__mdiff+0x34>
 8016648:	f856 8b04 	ldr.w	r8, [r6], #4
 801664c:	fa11 f288 	uxtah	r2, r1, r8
 8016650:	1414      	asrs	r4, r2, #16
 8016652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016656:	b292      	uxth	r2, r2
 8016658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801665c:	f84e 2b04 	str.w	r2, [lr], #4
 8016660:	1421      	asrs	r1, r4, #16
 8016662:	e7e0      	b.n	8016626 <__mdiff+0xca>
 8016664:	3f01      	subs	r7, #1
 8016666:	e7ea      	b.n	801663e <__mdiff+0xe2>
 8016668:	080257b8 	.word	0x080257b8
 801666c:	080258a8 	.word	0x080258a8

08016670 <__ulp>:
 8016670:	b082      	sub	sp, #8
 8016672:	ed8d 0b00 	vstr	d0, [sp]
 8016676:	9b01      	ldr	r3, [sp, #4]
 8016678:	4912      	ldr	r1, [pc, #72]	; (80166c4 <__ulp+0x54>)
 801667a:	4019      	ands	r1, r3
 801667c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016680:	2900      	cmp	r1, #0
 8016682:	dd05      	ble.n	8016690 <__ulp+0x20>
 8016684:	2200      	movs	r2, #0
 8016686:	460b      	mov	r3, r1
 8016688:	ec43 2b10 	vmov	d0, r2, r3
 801668c:	b002      	add	sp, #8
 801668e:	4770      	bx	lr
 8016690:	4249      	negs	r1, r1
 8016692:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016696:	ea4f 5021 	mov.w	r0, r1, asr #20
 801669a:	f04f 0200 	mov.w	r2, #0
 801669e:	f04f 0300 	mov.w	r3, #0
 80166a2:	da04      	bge.n	80166ae <__ulp+0x3e>
 80166a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80166a8:	fa41 f300 	asr.w	r3, r1, r0
 80166ac:	e7ec      	b.n	8016688 <__ulp+0x18>
 80166ae:	f1a0 0114 	sub.w	r1, r0, #20
 80166b2:	291e      	cmp	r1, #30
 80166b4:	bfda      	itte	le
 80166b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80166ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80166be:	2101      	movgt	r1, #1
 80166c0:	460a      	mov	r2, r1
 80166c2:	e7e1      	b.n	8016688 <__ulp+0x18>
 80166c4:	7ff00000 	.word	0x7ff00000

080166c8 <__b2d>:
 80166c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ca:	6905      	ldr	r5, [r0, #16]
 80166cc:	f100 0714 	add.w	r7, r0, #20
 80166d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80166d4:	1f2e      	subs	r6, r5, #4
 80166d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80166da:	4620      	mov	r0, r4
 80166dc:	f7ff fd48 	bl	8016170 <__hi0bits>
 80166e0:	f1c0 0320 	rsb	r3, r0, #32
 80166e4:	280a      	cmp	r0, #10
 80166e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016764 <__b2d+0x9c>
 80166ea:	600b      	str	r3, [r1, #0]
 80166ec:	dc14      	bgt.n	8016718 <__b2d+0x50>
 80166ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80166f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80166f6:	42b7      	cmp	r7, r6
 80166f8:	ea41 030c 	orr.w	r3, r1, ip
 80166fc:	bf34      	ite	cc
 80166fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016702:	2100      	movcs	r1, #0
 8016704:	3015      	adds	r0, #21
 8016706:	fa04 f000 	lsl.w	r0, r4, r0
 801670a:	fa21 f10e 	lsr.w	r1, r1, lr
 801670e:	ea40 0201 	orr.w	r2, r0, r1
 8016712:	ec43 2b10 	vmov	d0, r2, r3
 8016716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016718:	42b7      	cmp	r7, r6
 801671a:	bf3a      	itte	cc
 801671c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016720:	f1a5 0608 	subcc.w	r6, r5, #8
 8016724:	2100      	movcs	r1, #0
 8016726:	380b      	subs	r0, #11
 8016728:	d017      	beq.n	801675a <__b2d+0x92>
 801672a:	f1c0 0c20 	rsb	ip, r0, #32
 801672e:	fa04 f500 	lsl.w	r5, r4, r0
 8016732:	42be      	cmp	r6, r7
 8016734:	fa21 f40c 	lsr.w	r4, r1, ip
 8016738:	ea45 0504 	orr.w	r5, r5, r4
 801673c:	bf8c      	ite	hi
 801673e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016742:	2400      	movls	r4, #0
 8016744:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016748:	fa01 f000 	lsl.w	r0, r1, r0
 801674c:	fa24 f40c 	lsr.w	r4, r4, ip
 8016750:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016754:	ea40 0204 	orr.w	r2, r0, r4
 8016758:	e7db      	b.n	8016712 <__b2d+0x4a>
 801675a:	ea44 030c 	orr.w	r3, r4, ip
 801675e:	460a      	mov	r2, r1
 8016760:	e7d7      	b.n	8016712 <__b2d+0x4a>
 8016762:	bf00      	nop
 8016764:	3ff00000 	.word	0x3ff00000

08016768 <__d2b>:
 8016768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801676c:	4689      	mov	r9, r1
 801676e:	2101      	movs	r1, #1
 8016770:	ec57 6b10 	vmov	r6, r7, d0
 8016774:	4690      	mov	r8, r2
 8016776:	f7ff fc09 	bl	8015f8c <_Balloc>
 801677a:	4604      	mov	r4, r0
 801677c:	b930      	cbnz	r0, 801678c <__d2b+0x24>
 801677e:	4602      	mov	r2, r0
 8016780:	4b25      	ldr	r3, [pc, #148]	; (8016818 <__d2b+0xb0>)
 8016782:	4826      	ldr	r0, [pc, #152]	; (801681c <__d2b+0xb4>)
 8016784:	f240 310a 	movw	r1, #778	; 0x30a
 8016788:	f000 fab6 	bl	8016cf8 <__assert_func>
 801678c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016794:	bb35      	cbnz	r5, 80167e4 <__d2b+0x7c>
 8016796:	2e00      	cmp	r6, #0
 8016798:	9301      	str	r3, [sp, #4]
 801679a:	d028      	beq.n	80167ee <__d2b+0x86>
 801679c:	4668      	mov	r0, sp
 801679e:	9600      	str	r6, [sp, #0]
 80167a0:	f7ff fd06 	bl	80161b0 <__lo0bits>
 80167a4:	9900      	ldr	r1, [sp, #0]
 80167a6:	b300      	cbz	r0, 80167ea <__d2b+0x82>
 80167a8:	9a01      	ldr	r2, [sp, #4]
 80167aa:	f1c0 0320 	rsb	r3, r0, #32
 80167ae:	fa02 f303 	lsl.w	r3, r2, r3
 80167b2:	430b      	orrs	r3, r1
 80167b4:	40c2      	lsrs	r2, r0
 80167b6:	6163      	str	r3, [r4, #20]
 80167b8:	9201      	str	r2, [sp, #4]
 80167ba:	9b01      	ldr	r3, [sp, #4]
 80167bc:	61a3      	str	r3, [r4, #24]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	bf14      	ite	ne
 80167c2:	2202      	movne	r2, #2
 80167c4:	2201      	moveq	r2, #1
 80167c6:	6122      	str	r2, [r4, #16]
 80167c8:	b1d5      	cbz	r5, 8016800 <__d2b+0x98>
 80167ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80167ce:	4405      	add	r5, r0
 80167d0:	f8c9 5000 	str.w	r5, [r9]
 80167d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80167d8:	f8c8 0000 	str.w	r0, [r8]
 80167dc:	4620      	mov	r0, r4
 80167de:	b003      	add	sp, #12
 80167e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80167e8:	e7d5      	b.n	8016796 <__d2b+0x2e>
 80167ea:	6161      	str	r1, [r4, #20]
 80167ec:	e7e5      	b.n	80167ba <__d2b+0x52>
 80167ee:	a801      	add	r0, sp, #4
 80167f0:	f7ff fcde 	bl	80161b0 <__lo0bits>
 80167f4:	9b01      	ldr	r3, [sp, #4]
 80167f6:	6163      	str	r3, [r4, #20]
 80167f8:	2201      	movs	r2, #1
 80167fa:	6122      	str	r2, [r4, #16]
 80167fc:	3020      	adds	r0, #32
 80167fe:	e7e3      	b.n	80167c8 <__d2b+0x60>
 8016800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016808:	f8c9 0000 	str.w	r0, [r9]
 801680c:	6918      	ldr	r0, [r3, #16]
 801680e:	f7ff fcaf 	bl	8016170 <__hi0bits>
 8016812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016816:	e7df      	b.n	80167d8 <__d2b+0x70>
 8016818:	080257b8 	.word	0x080257b8
 801681c:	080258a8 	.word	0x080258a8

08016820 <__ratio>:
 8016820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016824:	4688      	mov	r8, r1
 8016826:	4669      	mov	r1, sp
 8016828:	4681      	mov	r9, r0
 801682a:	f7ff ff4d 	bl	80166c8 <__b2d>
 801682e:	a901      	add	r1, sp, #4
 8016830:	4640      	mov	r0, r8
 8016832:	ec55 4b10 	vmov	r4, r5, d0
 8016836:	f7ff ff47 	bl	80166c8 <__b2d>
 801683a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801683e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016842:	eba3 0c02 	sub.w	ip, r3, r2
 8016846:	e9dd 3200 	ldrd	r3, r2, [sp]
 801684a:	1a9b      	subs	r3, r3, r2
 801684c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016850:	ec51 0b10 	vmov	r0, r1, d0
 8016854:	2b00      	cmp	r3, #0
 8016856:	bfd6      	itet	le
 8016858:	460a      	movle	r2, r1
 801685a:	462a      	movgt	r2, r5
 801685c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016860:	468b      	mov	fp, r1
 8016862:	462f      	mov	r7, r5
 8016864:	bfd4      	ite	le
 8016866:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801686a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801686e:	4620      	mov	r0, r4
 8016870:	ee10 2a10 	vmov	r2, s0
 8016874:	465b      	mov	r3, fp
 8016876:	4639      	mov	r1, r7
 8016878:	f7ea f800 	bl	800087c <__aeabi_ddiv>
 801687c:	ec41 0b10 	vmov	d0, r0, r1
 8016880:	b003      	add	sp, #12
 8016882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016886 <__copybits>:
 8016886:	3901      	subs	r1, #1
 8016888:	b570      	push	{r4, r5, r6, lr}
 801688a:	1149      	asrs	r1, r1, #5
 801688c:	6914      	ldr	r4, [r2, #16]
 801688e:	3101      	adds	r1, #1
 8016890:	f102 0314 	add.w	r3, r2, #20
 8016894:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016898:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801689c:	1f05      	subs	r5, r0, #4
 801689e:	42a3      	cmp	r3, r4
 80168a0:	d30c      	bcc.n	80168bc <__copybits+0x36>
 80168a2:	1aa3      	subs	r3, r4, r2
 80168a4:	3b11      	subs	r3, #17
 80168a6:	f023 0303 	bic.w	r3, r3, #3
 80168aa:	3211      	adds	r2, #17
 80168ac:	42a2      	cmp	r2, r4
 80168ae:	bf88      	it	hi
 80168b0:	2300      	movhi	r3, #0
 80168b2:	4418      	add	r0, r3
 80168b4:	2300      	movs	r3, #0
 80168b6:	4288      	cmp	r0, r1
 80168b8:	d305      	bcc.n	80168c6 <__copybits+0x40>
 80168ba:	bd70      	pop	{r4, r5, r6, pc}
 80168bc:	f853 6b04 	ldr.w	r6, [r3], #4
 80168c0:	f845 6f04 	str.w	r6, [r5, #4]!
 80168c4:	e7eb      	b.n	801689e <__copybits+0x18>
 80168c6:	f840 3b04 	str.w	r3, [r0], #4
 80168ca:	e7f4      	b.n	80168b6 <__copybits+0x30>

080168cc <__any_on>:
 80168cc:	f100 0214 	add.w	r2, r0, #20
 80168d0:	6900      	ldr	r0, [r0, #16]
 80168d2:	114b      	asrs	r3, r1, #5
 80168d4:	4298      	cmp	r0, r3
 80168d6:	b510      	push	{r4, lr}
 80168d8:	db11      	blt.n	80168fe <__any_on+0x32>
 80168da:	dd0a      	ble.n	80168f2 <__any_on+0x26>
 80168dc:	f011 011f 	ands.w	r1, r1, #31
 80168e0:	d007      	beq.n	80168f2 <__any_on+0x26>
 80168e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80168e6:	fa24 f001 	lsr.w	r0, r4, r1
 80168ea:	fa00 f101 	lsl.w	r1, r0, r1
 80168ee:	428c      	cmp	r4, r1
 80168f0:	d10b      	bne.n	801690a <__any_on+0x3e>
 80168f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d803      	bhi.n	8016902 <__any_on+0x36>
 80168fa:	2000      	movs	r0, #0
 80168fc:	bd10      	pop	{r4, pc}
 80168fe:	4603      	mov	r3, r0
 8016900:	e7f7      	b.n	80168f2 <__any_on+0x26>
 8016902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016906:	2900      	cmp	r1, #0
 8016908:	d0f5      	beq.n	80168f6 <__any_on+0x2a>
 801690a:	2001      	movs	r0, #1
 801690c:	e7f6      	b.n	80168fc <__any_on+0x30>

0801690e <_calloc_r>:
 801690e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016910:	fba1 2402 	umull	r2, r4, r1, r2
 8016914:	b94c      	cbnz	r4, 801692a <_calloc_r+0x1c>
 8016916:	4611      	mov	r1, r2
 8016918:	9201      	str	r2, [sp, #4]
 801691a:	f7fc f9f7 	bl	8012d0c <_malloc_r>
 801691e:	9a01      	ldr	r2, [sp, #4]
 8016920:	4605      	mov	r5, r0
 8016922:	b930      	cbnz	r0, 8016932 <_calloc_r+0x24>
 8016924:	4628      	mov	r0, r5
 8016926:	b003      	add	sp, #12
 8016928:	bd30      	pop	{r4, r5, pc}
 801692a:	220c      	movs	r2, #12
 801692c:	6002      	str	r2, [r0, #0]
 801692e:	2500      	movs	r5, #0
 8016930:	e7f8      	b.n	8016924 <_calloc_r+0x16>
 8016932:	4621      	mov	r1, r4
 8016934:	f7fc f976 	bl	8012c24 <memset>
 8016938:	e7f4      	b.n	8016924 <_calloc_r+0x16>

0801693a <__ssputs_r>:
 801693a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801693e:	688e      	ldr	r6, [r1, #8]
 8016940:	429e      	cmp	r6, r3
 8016942:	4682      	mov	sl, r0
 8016944:	460c      	mov	r4, r1
 8016946:	4690      	mov	r8, r2
 8016948:	461f      	mov	r7, r3
 801694a:	d838      	bhi.n	80169be <__ssputs_r+0x84>
 801694c:	898a      	ldrh	r2, [r1, #12]
 801694e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016952:	d032      	beq.n	80169ba <__ssputs_r+0x80>
 8016954:	6825      	ldr	r5, [r4, #0]
 8016956:	6909      	ldr	r1, [r1, #16]
 8016958:	eba5 0901 	sub.w	r9, r5, r1
 801695c:	6965      	ldr	r5, [r4, #20]
 801695e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016962:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016966:	3301      	adds	r3, #1
 8016968:	444b      	add	r3, r9
 801696a:	106d      	asrs	r5, r5, #1
 801696c:	429d      	cmp	r5, r3
 801696e:	bf38      	it	cc
 8016970:	461d      	movcc	r5, r3
 8016972:	0553      	lsls	r3, r2, #21
 8016974:	d531      	bpl.n	80169da <__ssputs_r+0xa0>
 8016976:	4629      	mov	r1, r5
 8016978:	f7fc f9c8 	bl	8012d0c <_malloc_r>
 801697c:	4606      	mov	r6, r0
 801697e:	b950      	cbnz	r0, 8016996 <__ssputs_r+0x5c>
 8016980:	230c      	movs	r3, #12
 8016982:	f8ca 3000 	str.w	r3, [sl]
 8016986:	89a3      	ldrh	r3, [r4, #12]
 8016988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801698c:	81a3      	strh	r3, [r4, #12]
 801698e:	f04f 30ff 	mov.w	r0, #4294967295
 8016992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016996:	6921      	ldr	r1, [r4, #16]
 8016998:	464a      	mov	r2, r9
 801699a:	f7fc f935 	bl	8012c08 <memcpy>
 801699e:	89a3      	ldrh	r3, [r4, #12]
 80169a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80169a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169a8:	81a3      	strh	r3, [r4, #12]
 80169aa:	6126      	str	r6, [r4, #16]
 80169ac:	6165      	str	r5, [r4, #20]
 80169ae:	444e      	add	r6, r9
 80169b0:	eba5 0509 	sub.w	r5, r5, r9
 80169b4:	6026      	str	r6, [r4, #0]
 80169b6:	60a5      	str	r5, [r4, #8]
 80169b8:	463e      	mov	r6, r7
 80169ba:	42be      	cmp	r6, r7
 80169bc:	d900      	bls.n	80169c0 <__ssputs_r+0x86>
 80169be:	463e      	mov	r6, r7
 80169c0:	6820      	ldr	r0, [r4, #0]
 80169c2:	4632      	mov	r2, r6
 80169c4:	4641      	mov	r1, r8
 80169c6:	f000 fa0b 	bl	8016de0 <memmove>
 80169ca:	68a3      	ldr	r3, [r4, #8]
 80169cc:	1b9b      	subs	r3, r3, r6
 80169ce:	60a3      	str	r3, [r4, #8]
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	4433      	add	r3, r6
 80169d4:	6023      	str	r3, [r4, #0]
 80169d6:	2000      	movs	r0, #0
 80169d8:	e7db      	b.n	8016992 <__ssputs_r+0x58>
 80169da:	462a      	mov	r2, r5
 80169dc:	f000 fa1a 	bl	8016e14 <_realloc_r>
 80169e0:	4606      	mov	r6, r0
 80169e2:	2800      	cmp	r0, #0
 80169e4:	d1e1      	bne.n	80169aa <__ssputs_r+0x70>
 80169e6:	6921      	ldr	r1, [r4, #16]
 80169e8:	4650      	mov	r0, sl
 80169ea:	f7fc f923 	bl	8012c34 <_free_r>
 80169ee:	e7c7      	b.n	8016980 <__ssputs_r+0x46>

080169f0 <_svfiprintf_r>:
 80169f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f4:	4698      	mov	r8, r3
 80169f6:	898b      	ldrh	r3, [r1, #12]
 80169f8:	061b      	lsls	r3, r3, #24
 80169fa:	b09d      	sub	sp, #116	; 0x74
 80169fc:	4607      	mov	r7, r0
 80169fe:	460d      	mov	r5, r1
 8016a00:	4614      	mov	r4, r2
 8016a02:	d50e      	bpl.n	8016a22 <_svfiprintf_r+0x32>
 8016a04:	690b      	ldr	r3, [r1, #16]
 8016a06:	b963      	cbnz	r3, 8016a22 <_svfiprintf_r+0x32>
 8016a08:	2140      	movs	r1, #64	; 0x40
 8016a0a:	f7fc f97f 	bl	8012d0c <_malloc_r>
 8016a0e:	6028      	str	r0, [r5, #0]
 8016a10:	6128      	str	r0, [r5, #16]
 8016a12:	b920      	cbnz	r0, 8016a1e <_svfiprintf_r+0x2e>
 8016a14:	230c      	movs	r3, #12
 8016a16:	603b      	str	r3, [r7, #0]
 8016a18:	f04f 30ff 	mov.w	r0, #4294967295
 8016a1c:	e0d1      	b.n	8016bc2 <_svfiprintf_r+0x1d2>
 8016a1e:	2340      	movs	r3, #64	; 0x40
 8016a20:	616b      	str	r3, [r5, #20]
 8016a22:	2300      	movs	r3, #0
 8016a24:	9309      	str	r3, [sp, #36]	; 0x24
 8016a26:	2320      	movs	r3, #32
 8016a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a30:	2330      	movs	r3, #48	; 0x30
 8016a32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016bdc <_svfiprintf_r+0x1ec>
 8016a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a3a:	f04f 0901 	mov.w	r9, #1
 8016a3e:	4623      	mov	r3, r4
 8016a40:	469a      	mov	sl, r3
 8016a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a46:	b10a      	cbz	r2, 8016a4c <_svfiprintf_r+0x5c>
 8016a48:	2a25      	cmp	r2, #37	; 0x25
 8016a4a:	d1f9      	bne.n	8016a40 <_svfiprintf_r+0x50>
 8016a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8016a50:	d00b      	beq.n	8016a6a <_svfiprintf_r+0x7a>
 8016a52:	465b      	mov	r3, fp
 8016a54:	4622      	mov	r2, r4
 8016a56:	4629      	mov	r1, r5
 8016a58:	4638      	mov	r0, r7
 8016a5a:	f7ff ff6e 	bl	801693a <__ssputs_r>
 8016a5e:	3001      	adds	r0, #1
 8016a60:	f000 80aa 	beq.w	8016bb8 <_svfiprintf_r+0x1c8>
 8016a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a66:	445a      	add	r2, fp
 8016a68:	9209      	str	r2, [sp, #36]	; 0x24
 8016a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	f000 80a2 	beq.w	8016bb8 <_svfiprintf_r+0x1c8>
 8016a74:	2300      	movs	r3, #0
 8016a76:	f04f 32ff 	mov.w	r2, #4294967295
 8016a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a7e:	f10a 0a01 	add.w	sl, sl, #1
 8016a82:	9304      	str	r3, [sp, #16]
 8016a84:	9307      	str	r3, [sp, #28]
 8016a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8016a8c:	4654      	mov	r4, sl
 8016a8e:	2205      	movs	r2, #5
 8016a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a94:	4851      	ldr	r0, [pc, #324]	; (8016bdc <_svfiprintf_r+0x1ec>)
 8016a96:	f7e9 fbbb 	bl	8000210 <memchr>
 8016a9a:	9a04      	ldr	r2, [sp, #16]
 8016a9c:	b9d8      	cbnz	r0, 8016ad6 <_svfiprintf_r+0xe6>
 8016a9e:	06d0      	lsls	r0, r2, #27
 8016aa0:	bf44      	itt	mi
 8016aa2:	2320      	movmi	r3, #32
 8016aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016aa8:	0711      	lsls	r1, r2, #28
 8016aaa:	bf44      	itt	mi
 8016aac:	232b      	movmi	r3, #43	; 0x2b
 8016aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8016ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8016ab8:	d015      	beq.n	8016ae6 <_svfiprintf_r+0xf6>
 8016aba:	9a07      	ldr	r2, [sp, #28]
 8016abc:	4654      	mov	r4, sl
 8016abe:	2000      	movs	r0, #0
 8016ac0:	f04f 0c0a 	mov.w	ip, #10
 8016ac4:	4621      	mov	r1, r4
 8016ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016aca:	3b30      	subs	r3, #48	; 0x30
 8016acc:	2b09      	cmp	r3, #9
 8016ace:	d94e      	bls.n	8016b6e <_svfiprintf_r+0x17e>
 8016ad0:	b1b0      	cbz	r0, 8016b00 <_svfiprintf_r+0x110>
 8016ad2:	9207      	str	r2, [sp, #28]
 8016ad4:	e014      	b.n	8016b00 <_svfiprintf_r+0x110>
 8016ad6:	eba0 0308 	sub.w	r3, r0, r8
 8016ada:	fa09 f303 	lsl.w	r3, r9, r3
 8016ade:	4313      	orrs	r3, r2
 8016ae0:	9304      	str	r3, [sp, #16]
 8016ae2:	46a2      	mov	sl, r4
 8016ae4:	e7d2      	b.n	8016a8c <_svfiprintf_r+0x9c>
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	1d19      	adds	r1, r3, #4
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	9103      	str	r1, [sp, #12]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	bfbb      	ittet	lt
 8016af2:	425b      	neglt	r3, r3
 8016af4:	f042 0202 	orrlt.w	r2, r2, #2
 8016af8:	9307      	strge	r3, [sp, #28]
 8016afa:	9307      	strlt	r3, [sp, #28]
 8016afc:	bfb8      	it	lt
 8016afe:	9204      	strlt	r2, [sp, #16]
 8016b00:	7823      	ldrb	r3, [r4, #0]
 8016b02:	2b2e      	cmp	r3, #46	; 0x2e
 8016b04:	d10c      	bne.n	8016b20 <_svfiprintf_r+0x130>
 8016b06:	7863      	ldrb	r3, [r4, #1]
 8016b08:	2b2a      	cmp	r3, #42	; 0x2a
 8016b0a:	d135      	bne.n	8016b78 <_svfiprintf_r+0x188>
 8016b0c:	9b03      	ldr	r3, [sp, #12]
 8016b0e:	1d1a      	adds	r2, r3, #4
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	9203      	str	r2, [sp, #12]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	bfb8      	it	lt
 8016b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b1c:	3402      	adds	r4, #2
 8016b1e:	9305      	str	r3, [sp, #20]
 8016b20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016bec <_svfiprintf_r+0x1fc>
 8016b24:	7821      	ldrb	r1, [r4, #0]
 8016b26:	2203      	movs	r2, #3
 8016b28:	4650      	mov	r0, sl
 8016b2a:	f7e9 fb71 	bl	8000210 <memchr>
 8016b2e:	b140      	cbz	r0, 8016b42 <_svfiprintf_r+0x152>
 8016b30:	2340      	movs	r3, #64	; 0x40
 8016b32:	eba0 000a 	sub.w	r0, r0, sl
 8016b36:	fa03 f000 	lsl.w	r0, r3, r0
 8016b3a:	9b04      	ldr	r3, [sp, #16]
 8016b3c:	4303      	orrs	r3, r0
 8016b3e:	3401      	adds	r4, #1
 8016b40:	9304      	str	r3, [sp, #16]
 8016b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b46:	4826      	ldr	r0, [pc, #152]	; (8016be0 <_svfiprintf_r+0x1f0>)
 8016b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b4c:	2206      	movs	r2, #6
 8016b4e:	f7e9 fb5f 	bl	8000210 <memchr>
 8016b52:	2800      	cmp	r0, #0
 8016b54:	d038      	beq.n	8016bc8 <_svfiprintf_r+0x1d8>
 8016b56:	4b23      	ldr	r3, [pc, #140]	; (8016be4 <_svfiprintf_r+0x1f4>)
 8016b58:	bb1b      	cbnz	r3, 8016ba2 <_svfiprintf_r+0x1b2>
 8016b5a:	9b03      	ldr	r3, [sp, #12]
 8016b5c:	3307      	adds	r3, #7
 8016b5e:	f023 0307 	bic.w	r3, r3, #7
 8016b62:	3308      	adds	r3, #8
 8016b64:	9303      	str	r3, [sp, #12]
 8016b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b68:	4433      	add	r3, r6
 8016b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8016b6c:	e767      	b.n	8016a3e <_svfiprintf_r+0x4e>
 8016b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b72:	460c      	mov	r4, r1
 8016b74:	2001      	movs	r0, #1
 8016b76:	e7a5      	b.n	8016ac4 <_svfiprintf_r+0xd4>
 8016b78:	2300      	movs	r3, #0
 8016b7a:	3401      	adds	r4, #1
 8016b7c:	9305      	str	r3, [sp, #20]
 8016b7e:	4619      	mov	r1, r3
 8016b80:	f04f 0c0a 	mov.w	ip, #10
 8016b84:	4620      	mov	r0, r4
 8016b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b8a:	3a30      	subs	r2, #48	; 0x30
 8016b8c:	2a09      	cmp	r2, #9
 8016b8e:	d903      	bls.n	8016b98 <_svfiprintf_r+0x1a8>
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d0c5      	beq.n	8016b20 <_svfiprintf_r+0x130>
 8016b94:	9105      	str	r1, [sp, #20]
 8016b96:	e7c3      	b.n	8016b20 <_svfiprintf_r+0x130>
 8016b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	e7f0      	b.n	8016b84 <_svfiprintf_r+0x194>
 8016ba2:	ab03      	add	r3, sp, #12
 8016ba4:	9300      	str	r3, [sp, #0]
 8016ba6:	462a      	mov	r2, r5
 8016ba8:	4b0f      	ldr	r3, [pc, #60]	; (8016be8 <_svfiprintf_r+0x1f8>)
 8016baa:	a904      	add	r1, sp, #16
 8016bac:	4638      	mov	r0, r7
 8016bae:	f7fc f9c1 	bl	8012f34 <_printf_float>
 8016bb2:	1c42      	adds	r2, r0, #1
 8016bb4:	4606      	mov	r6, r0
 8016bb6:	d1d6      	bne.n	8016b66 <_svfiprintf_r+0x176>
 8016bb8:	89ab      	ldrh	r3, [r5, #12]
 8016bba:	065b      	lsls	r3, r3, #25
 8016bbc:	f53f af2c 	bmi.w	8016a18 <_svfiprintf_r+0x28>
 8016bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bc2:	b01d      	add	sp, #116	; 0x74
 8016bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc8:	ab03      	add	r3, sp, #12
 8016bca:	9300      	str	r3, [sp, #0]
 8016bcc:	462a      	mov	r2, r5
 8016bce:	4b06      	ldr	r3, [pc, #24]	; (8016be8 <_svfiprintf_r+0x1f8>)
 8016bd0:	a904      	add	r1, sp, #16
 8016bd2:	4638      	mov	r0, r7
 8016bd4:	f7fc fc52 	bl	801347c <_printf_i>
 8016bd8:	e7eb      	b.n	8016bb2 <_svfiprintf_r+0x1c2>
 8016bda:	bf00      	nop
 8016bdc:	08025a04 	.word	0x08025a04
 8016be0:	08025a0e 	.word	0x08025a0e
 8016be4:	08012f35 	.word	0x08012f35
 8016be8:	0801693b 	.word	0x0801693b
 8016bec:	08025a0a 	.word	0x08025a0a

08016bf0 <nan>:
 8016bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016bf8 <nan+0x8>
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	00000000 	.word	0x00000000
 8016bfc:	7ff80000 	.word	0x7ff80000

08016c00 <nanf>:
 8016c00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c08 <nanf+0x8>
 8016c04:	4770      	bx	lr
 8016c06:	bf00      	nop
 8016c08:	7fc00000 	.word	0x7fc00000

08016c0c <__sread>:
 8016c0c:	b510      	push	{r4, lr}
 8016c0e:	460c      	mov	r4, r1
 8016c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c14:	f000 fa86 	bl	8017124 <_read_r>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	bfab      	itete	ge
 8016c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c20:	181b      	addge	r3, r3, r0
 8016c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c26:	bfac      	ite	ge
 8016c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c2a:	81a3      	strhlt	r3, [r4, #12]
 8016c2c:	bd10      	pop	{r4, pc}

08016c2e <__swrite>:
 8016c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c32:	461f      	mov	r7, r3
 8016c34:	898b      	ldrh	r3, [r1, #12]
 8016c36:	05db      	lsls	r3, r3, #23
 8016c38:	4605      	mov	r5, r0
 8016c3a:	460c      	mov	r4, r1
 8016c3c:	4616      	mov	r6, r2
 8016c3e:	d505      	bpl.n	8016c4c <__swrite+0x1e>
 8016c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c44:	2302      	movs	r3, #2
 8016c46:	2200      	movs	r2, #0
 8016c48:	f000 f8b8 	bl	8016dbc <_lseek_r>
 8016c4c:	89a3      	ldrh	r3, [r4, #12]
 8016c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c56:	81a3      	strh	r3, [r4, #12]
 8016c58:	4632      	mov	r2, r6
 8016c5a:	463b      	mov	r3, r7
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c62:	f000 b837 	b.w	8016cd4 <_write_r>

08016c66 <__sseek>:
 8016c66:	b510      	push	{r4, lr}
 8016c68:	460c      	mov	r4, r1
 8016c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c6e:	f000 f8a5 	bl	8016dbc <_lseek_r>
 8016c72:	1c43      	adds	r3, r0, #1
 8016c74:	89a3      	ldrh	r3, [r4, #12]
 8016c76:	bf15      	itete	ne
 8016c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c82:	81a3      	strheq	r3, [r4, #12]
 8016c84:	bf18      	it	ne
 8016c86:	81a3      	strhne	r3, [r4, #12]
 8016c88:	bd10      	pop	{r4, pc}

08016c8a <__sclose>:
 8016c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c8e:	f000 b851 	b.w	8016d34 <_close_r>

08016c92 <strncmp>:
 8016c92:	b510      	push	{r4, lr}
 8016c94:	b17a      	cbz	r2, 8016cb6 <strncmp+0x24>
 8016c96:	4603      	mov	r3, r0
 8016c98:	3901      	subs	r1, #1
 8016c9a:	1884      	adds	r4, r0, r2
 8016c9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016ca0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016ca4:	4290      	cmp	r0, r2
 8016ca6:	d101      	bne.n	8016cac <strncmp+0x1a>
 8016ca8:	42a3      	cmp	r3, r4
 8016caa:	d101      	bne.n	8016cb0 <strncmp+0x1e>
 8016cac:	1a80      	subs	r0, r0, r2
 8016cae:	bd10      	pop	{r4, pc}
 8016cb0:	2800      	cmp	r0, #0
 8016cb2:	d1f3      	bne.n	8016c9c <strncmp+0xa>
 8016cb4:	e7fa      	b.n	8016cac <strncmp+0x1a>
 8016cb6:	4610      	mov	r0, r2
 8016cb8:	e7f9      	b.n	8016cae <strncmp+0x1c>

08016cba <__ascii_wctomb>:
 8016cba:	b149      	cbz	r1, 8016cd0 <__ascii_wctomb+0x16>
 8016cbc:	2aff      	cmp	r2, #255	; 0xff
 8016cbe:	bf85      	ittet	hi
 8016cc0:	238a      	movhi	r3, #138	; 0x8a
 8016cc2:	6003      	strhi	r3, [r0, #0]
 8016cc4:	700a      	strbls	r2, [r1, #0]
 8016cc6:	f04f 30ff 	movhi.w	r0, #4294967295
 8016cca:	bf98      	it	ls
 8016ccc:	2001      	movls	r0, #1
 8016cce:	4770      	bx	lr
 8016cd0:	4608      	mov	r0, r1
 8016cd2:	4770      	bx	lr

08016cd4 <_write_r>:
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	4d07      	ldr	r5, [pc, #28]	; (8016cf4 <_write_r+0x20>)
 8016cd8:	4604      	mov	r4, r0
 8016cda:	4608      	mov	r0, r1
 8016cdc:	4611      	mov	r1, r2
 8016cde:	2200      	movs	r2, #0
 8016ce0:	602a      	str	r2, [r5, #0]
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	f7ea fc77 	bl	80015d6 <_write>
 8016ce8:	1c43      	adds	r3, r0, #1
 8016cea:	d102      	bne.n	8016cf2 <_write_r+0x1e>
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	b103      	cbz	r3, 8016cf2 <_write_r+0x1e>
 8016cf0:	6023      	str	r3, [r4, #0]
 8016cf2:	bd38      	pop	{r3, r4, r5, pc}
 8016cf4:	2000d06c 	.word	0x2000d06c

08016cf8 <__assert_func>:
 8016cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016cfa:	4614      	mov	r4, r2
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	4b09      	ldr	r3, [pc, #36]	; (8016d24 <__assert_func+0x2c>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	4605      	mov	r5, r0
 8016d04:	68d8      	ldr	r0, [r3, #12]
 8016d06:	b14c      	cbz	r4, 8016d1c <__assert_func+0x24>
 8016d08:	4b07      	ldr	r3, [pc, #28]	; (8016d28 <__assert_func+0x30>)
 8016d0a:	9100      	str	r1, [sp, #0]
 8016d0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d10:	4906      	ldr	r1, [pc, #24]	; (8016d2c <__assert_func+0x34>)
 8016d12:	462b      	mov	r3, r5
 8016d14:	f000 f81e 	bl	8016d54 <fiprintf>
 8016d18:	f000 fa16 	bl	8017148 <abort>
 8016d1c:	4b04      	ldr	r3, [pc, #16]	; (8016d30 <__assert_func+0x38>)
 8016d1e:	461c      	mov	r4, r3
 8016d20:	e7f3      	b.n	8016d0a <__assert_func+0x12>
 8016d22:	bf00      	nop
 8016d24:	200000c8 	.word	0x200000c8
 8016d28:	08025a15 	.word	0x08025a15
 8016d2c:	08025a22 	.word	0x08025a22
 8016d30:	08025a50 	.word	0x08025a50

08016d34 <_close_r>:
 8016d34:	b538      	push	{r3, r4, r5, lr}
 8016d36:	4d06      	ldr	r5, [pc, #24]	; (8016d50 <_close_r+0x1c>)
 8016d38:	2300      	movs	r3, #0
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	4608      	mov	r0, r1
 8016d3e:	602b      	str	r3, [r5, #0]
 8016d40:	f7ea fc65 	bl	800160e <_close>
 8016d44:	1c43      	adds	r3, r0, #1
 8016d46:	d102      	bne.n	8016d4e <_close_r+0x1a>
 8016d48:	682b      	ldr	r3, [r5, #0]
 8016d4a:	b103      	cbz	r3, 8016d4e <_close_r+0x1a>
 8016d4c:	6023      	str	r3, [r4, #0]
 8016d4e:	bd38      	pop	{r3, r4, r5, pc}
 8016d50:	2000d06c 	.word	0x2000d06c

08016d54 <fiprintf>:
 8016d54:	b40e      	push	{r1, r2, r3}
 8016d56:	b503      	push	{r0, r1, lr}
 8016d58:	4601      	mov	r1, r0
 8016d5a:	ab03      	add	r3, sp, #12
 8016d5c:	4805      	ldr	r0, [pc, #20]	; (8016d74 <fiprintf+0x20>)
 8016d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d62:	6800      	ldr	r0, [r0, #0]
 8016d64:	9301      	str	r3, [sp, #4]
 8016d66:	f000 f8ad 	bl	8016ec4 <_vfiprintf_r>
 8016d6a:	b002      	add	sp, #8
 8016d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d70:	b003      	add	sp, #12
 8016d72:	4770      	bx	lr
 8016d74:	200000c8 	.word	0x200000c8

08016d78 <_fstat_r>:
 8016d78:	b538      	push	{r3, r4, r5, lr}
 8016d7a:	4d07      	ldr	r5, [pc, #28]	; (8016d98 <_fstat_r+0x20>)
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	4604      	mov	r4, r0
 8016d80:	4608      	mov	r0, r1
 8016d82:	4611      	mov	r1, r2
 8016d84:	602b      	str	r3, [r5, #0]
 8016d86:	f7ea fc4e 	bl	8001626 <_fstat>
 8016d8a:	1c43      	adds	r3, r0, #1
 8016d8c:	d102      	bne.n	8016d94 <_fstat_r+0x1c>
 8016d8e:	682b      	ldr	r3, [r5, #0]
 8016d90:	b103      	cbz	r3, 8016d94 <_fstat_r+0x1c>
 8016d92:	6023      	str	r3, [r4, #0]
 8016d94:	bd38      	pop	{r3, r4, r5, pc}
 8016d96:	bf00      	nop
 8016d98:	2000d06c 	.word	0x2000d06c

08016d9c <_isatty_r>:
 8016d9c:	b538      	push	{r3, r4, r5, lr}
 8016d9e:	4d06      	ldr	r5, [pc, #24]	; (8016db8 <_isatty_r+0x1c>)
 8016da0:	2300      	movs	r3, #0
 8016da2:	4604      	mov	r4, r0
 8016da4:	4608      	mov	r0, r1
 8016da6:	602b      	str	r3, [r5, #0]
 8016da8:	f7ea fc4d 	bl	8001646 <_isatty>
 8016dac:	1c43      	adds	r3, r0, #1
 8016dae:	d102      	bne.n	8016db6 <_isatty_r+0x1a>
 8016db0:	682b      	ldr	r3, [r5, #0]
 8016db2:	b103      	cbz	r3, 8016db6 <_isatty_r+0x1a>
 8016db4:	6023      	str	r3, [r4, #0]
 8016db6:	bd38      	pop	{r3, r4, r5, pc}
 8016db8:	2000d06c 	.word	0x2000d06c

08016dbc <_lseek_r>:
 8016dbc:	b538      	push	{r3, r4, r5, lr}
 8016dbe:	4d07      	ldr	r5, [pc, #28]	; (8016ddc <_lseek_r+0x20>)
 8016dc0:	4604      	mov	r4, r0
 8016dc2:	4608      	mov	r0, r1
 8016dc4:	4611      	mov	r1, r2
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	602a      	str	r2, [r5, #0]
 8016dca:	461a      	mov	r2, r3
 8016dcc:	f7ea fc46 	bl	800165c <_lseek>
 8016dd0:	1c43      	adds	r3, r0, #1
 8016dd2:	d102      	bne.n	8016dda <_lseek_r+0x1e>
 8016dd4:	682b      	ldr	r3, [r5, #0]
 8016dd6:	b103      	cbz	r3, 8016dda <_lseek_r+0x1e>
 8016dd8:	6023      	str	r3, [r4, #0]
 8016dda:	bd38      	pop	{r3, r4, r5, pc}
 8016ddc:	2000d06c 	.word	0x2000d06c

08016de0 <memmove>:
 8016de0:	4288      	cmp	r0, r1
 8016de2:	b510      	push	{r4, lr}
 8016de4:	eb01 0402 	add.w	r4, r1, r2
 8016de8:	d902      	bls.n	8016df0 <memmove+0x10>
 8016dea:	4284      	cmp	r4, r0
 8016dec:	4623      	mov	r3, r4
 8016dee:	d807      	bhi.n	8016e00 <memmove+0x20>
 8016df0:	1e43      	subs	r3, r0, #1
 8016df2:	42a1      	cmp	r1, r4
 8016df4:	d008      	beq.n	8016e08 <memmove+0x28>
 8016df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016dfe:	e7f8      	b.n	8016df2 <memmove+0x12>
 8016e00:	4402      	add	r2, r0
 8016e02:	4601      	mov	r1, r0
 8016e04:	428a      	cmp	r2, r1
 8016e06:	d100      	bne.n	8016e0a <memmove+0x2a>
 8016e08:	bd10      	pop	{r4, pc}
 8016e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e12:	e7f7      	b.n	8016e04 <memmove+0x24>

08016e14 <_realloc_r>:
 8016e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e18:	4680      	mov	r8, r0
 8016e1a:	4614      	mov	r4, r2
 8016e1c:	460e      	mov	r6, r1
 8016e1e:	b921      	cbnz	r1, 8016e2a <_realloc_r+0x16>
 8016e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e24:	4611      	mov	r1, r2
 8016e26:	f7fb bf71 	b.w	8012d0c <_malloc_r>
 8016e2a:	b92a      	cbnz	r2, 8016e38 <_realloc_r+0x24>
 8016e2c:	f7fb ff02 	bl	8012c34 <_free_r>
 8016e30:	4625      	mov	r5, r4
 8016e32:	4628      	mov	r0, r5
 8016e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e38:	f000 f98d 	bl	8017156 <_malloc_usable_size_r>
 8016e3c:	4284      	cmp	r4, r0
 8016e3e:	4607      	mov	r7, r0
 8016e40:	d802      	bhi.n	8016e48 <_realloc_r+0x34>
 8016e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016e46:	d812      	bhi.n	8016e6e <_realloc_r+0x5a>
 8016e48:	4621      	mov	r1, r4
 8016e4a:	4640      	mov	r0, r8
 8016e4c:	f7fb ff5e 	bl	8012d0c <_malloc_r>
 8016e50:	4605      	mov	r5, r0
 8016e52:	2800      	cmp	r0, #0
 8016e54:	d0ed      	beq.n	8016e32 <_realloc_r+0x1e>
 8016e56:	42bc      	cmp	r4, r7
 8016e58:	4622      	mov	r2, r4
 8016e5a:	4631      	mov	r1, r6
 8016e5c:	bf28      	it	cs
 8016e5e:	463a      	movcs	r2, r7
 8016e60:	f7fb fed2 	bl	8012c08 <memcpy>
 8016e64:	4631      	mov	r1, r6
 8016e66:	4640      	mov	r0, r8
 8016e68:	f7fb fee4 	bl	8012c34 <_free_r>
 8016e6c:	e7e1      	b.n	8016e32 <_realloc_r+0x1e>
 8016e6e:	4635      	mov	r5, r6
 8016e70:	e7df      	b.n	8016e32 <_realloc_r+0x1e>

08016e72 <__sfputc_r>:
 8016e72:	6893      	ldr	r3, [r2, #8]
 8016e74:	3b01      	subs	r3, #1
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	b410      	push	{r4}
 8016e7a:	6093      	str	r3, [r2, #8]
 8016e7c:	da08      	bge.n	8016e90 <__sfputc_r+0x1e>
 8016e7e:	6994      	ldr	r4, [r2, #24]
 8016e80:	42a3      	cmp	r3, r4
 8016e82:	db01      	blt.n	8016e88 <__sfputc_r+0x16>
 8016e84:	290a      	cmp	r1, #10
 8016e86:	d103      	bne.n	8016e90 <__sfputc_r+0x1e>
 8016e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e8c:	f7fd bb94 	b.w	80145b8 <__swbuf_r>
 8016e90:	6813      	ldr	r3, [r2, #0]
 8016e92:	1c58      	adds	r0, r3, #1
 8016e94:	6010      	str	r0, [r2, #0]
 8016e96:	7019      	strb	r1, [r3, #0]
 8016e98:	4608      	mov	r0, r1
 8016e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <__sfputs_r>:
 8016ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ea2:	4606      	mov	r6, r0
 8016ea4:	460f      	mov	r7, r1
 8016ea6:	4614      	mov	r4, r2
 8016ea8:	18d5      	adds	r5, r2, r3
 8016eaa:	42ac      	cmp	r4, r5
 8016eac:	d101      	bne.n	8016eb2 <__sfputs_r+0x12>
 8016eae:	2000      	movs	r0, #0
 8016eb0:	e007      	b.n	8016ec2 <__sfputs_r+0x22>
 8016eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016eb6:	463a      	mov	r2, r7
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f7ff ffda 	bl	8016e72 <__sfputc_r>
 8016ebe:	1c43      	adds	r3, r0, #1
 8016ec0:	d1f3      	bne.n	8016eaa <__sfputs_r+0xa>
 8016ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016ec4 <_vfiprintf_r>:
 8016ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec8:	460d      	mov	r5, r1
 8016eca:	b09d      	sub	sp, #116	; 0x74
 8016ecc:	4614      	mov	r4, r2
 8016ece:	4698      	mov	r8, r3
 8016ed0:	4606      	mov	r6, r0
 8016ed2:	b118      	cbz	r0, 8016edc <_vfiprintf_r+0x18>
 8016ed4:	6983      	ldr	r3, [r0, #24]
 8016ed6:	b90b      	cbnz	r3, 8016edc <_vfiprintf_r+0x18>
 8016ed8:	f7fe fbc2 	bl	8015660 <__sinit>
 8016edc:	4b89      	ldr	r3, [pc, #548]	; (8017104 <_vfiprintf_r+0x240>)
 8016ede:	429d      	cmp	r5, r3
 8016ee0:	d11b      	bne.n	8016f1a <_vfiprintf_r+0x56>
 8016ee2:	6875      	ldr	r5, [r6, #4]
 8016ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ee6:	07d9      	lsls	r1, r3, #31
 8016ee8:	d405      	bmi.n	8016ef6 <_vfiprintf_r+0x32>
 8016eea:	89ab      	ldrh	r3, [r5, #12]
 8016eec:	059a      	lsls	r2, r3, #22
 8016eee:	d402      	bmi.n	8016ef6 <_vfiprintf_r+0x32>
 8016ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ef2:	f7fe ffc6 	bl	8015e82 <__retarget_lock_acquire_recursive>
 8016ef6:	89ab      	ldrh	r3, [r5, #12]
 8016ef8:	071b      	lsls	r3, r3, #28
 8016efa:	d501      	bpl.n	8016f00 <_vfiprintf_r+0x3c>
 8016efc:	692b      	ldr	r3, [r5, #16]
 8016efe:	b9eb      	cbnz	r3, 8016f3c <_vfiprintf_r+0x78>
 8016f00:	4629      	mov	r1, r5
 8016f02:	4630      	mov	r0, r6
 8016f04:	f7fd fbaa 	bl	801465c <__swsetup_r>
 8016f08:	b1c0      	cbz	r0, 8016f3c <_vfiprintf_r+0x78>
 8016f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f0c:	07dc      	lsls	r4, r3, #31
 8016f0e:	d50e      	bpl.n	8016f2e <_vfiprintf_r+0x6a>
 8016f10:	f04f 30ff 	mov.w	r0, #4294967295
 8016f14:	b01d      	add	sp, #116	; 0x74
 8016f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f1a:	4b7b      	ldr	r3, [pc, #492]	; (8017108 <_vfiprintf_r+0x244>)
 8016f1c:	429d      	cmp	r5, r3
 8016f1e:	d101      	bne.n	8016f24 <_vfiprintf_r+0x60>
 8016f20:	68b5      	ldr	r5, [r6, #8]
 8016f22:	e7df      	b.n	8016ee4 <_vfiprintf_r+0x20>
 8016f24:	4b79      	ldr	r3, [pc, #484]	; (801710c <_vfiprintf_r+0x248>)
 8016f26:	429d      	cmp	r5, r3
 8016f28:	bf08      	it	eq
 8016f2a:	68f5      	ldreq	r5, [r6, #12]
 8016f2c:	e7da      	b.n	8016ee4 <_vfiprintf_r+0x20>
 8016f2e:	89ab      	ldrh	r3, [r5, #12]
 8016f30:	0598      	lsls	r0, r3, #22
 8016f32:	d4ed      	bmi.n	8016f10 <_vfiprintf_r+0x4c>
 8016f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f36:	f7fe ffa5 	bl	8015e84 <__retarget_lock_release_recursive>
 8016f3a:	e7e9      	b.n	8016f10 <_vfiprintf_r+0x4c>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8016f40:	2320      	movs	r3, #32
 8016f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f4a:	2330      	movs	r3, #48	; 0x30
 8016f4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017110 <_vfiprintf_r+0x24c>
 8016f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f54:	f04f 0901 	mov.w	r9, #1
 8016f58:	4623      	mov	r3, r4
 8016f5a:	469a      	mov	sl, r3
 8016f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f60:	b10a      	cbz	r2, 8016f66 <_vfiprintf_r+0xa2>
 8016f62:	2a25      	cmp	r2, #37	; 0x25
 8016f64:	d1f9      	bne.n	8016f5a <_vfiprintf_r+0x96>
 8016f66:	ebba 0b04 	subs.w	fp, sl, r4
 8016f6a:	d00b      	beq.n	8016f84 <_vfiprintf_r+0xc0>
 8016f6c:	465b      	mov	r3, fp
 8016f6e:	4622      	mov	r2, r4
 8016f70:	4629      	mov	r1, r5
 8016f72:	4630      	mov	r0, r6
 8016f74:	f7ff ff94 	bl	8016ea0 <__sfputs_r>
 8016f78:	3001      	adds	r0, #1
 8016f7a:	f000 80aa 	beq.w	80170d2 <_vfiprintf_r+0x20e>
 8016f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f80:	445a      	add	r2, fp
 8016f82:	9209      	str	r2, [sp, #36]	; 0x24
 8016f84:	f89a 3000 	ldrb.w	r3, [sl]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	f000 80a2 	beq.w	80170d2 <_vfiprintf_r+0x20e>
 8016f8e:	2300      	movs	r3, #0
 8016f90:	f04f 32ff 	mov.w	r2, #4294967295
 8016f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f98:	f10a 0a01 	add.w	sl, sl, #1
 8016f9c:	9304      	str	r3, [sp, #16]
 8016f9e:	9307      	str	r3, [sp, #28]
 8016fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8016fa6:	4654      	mov	r4, sl
 8016fa8:	2205      	movs	r2, #5
 8016faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fae:	4858      	ldr	r0, [pc, #352]	; (8017110 <_vfiprintf_r+0x24c>)
 8016fb0:	f7e9 f92e 	bl	8000210 <memchr>
 8016fb4:	9a04      	ldr	r2, [sp, #16]
 8016fb6:	b9d8      	cbnz	r0, 8016ff0 <_vfiprintf_r+0x12c>
 8016fb8:	06d1      	lsls	r1, r2, #27
 8016fba:	bf44      	itt	mi
 8016fbc:	2320      	movmi	r3, #32
 8016fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fc2:	0713      	lsls	r3, r2, #28
 8016fc4:	bf44      	itt	mi
 8016fc6:	232b      	movmi	r3, #43	; 0x2b
 8016fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8016fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8016fd2:	d015      	beq.n	8017000 <_vfiprintf_r+0x13c>
 8016fd4:	9a07      	ldr	r2, [sp, #28]
 8016fd6:	4654      	mov	r4, sl
 8016fd8:	2000      	movs	r0, #0
 8016fda:	f04f 0c0a 	mov.w	ip, #10
 8016fde:	4621      	mov	r1, r4
 8016fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fe4:	3b30      	subs	r3, #48	; 0x30
 8016fe6:	2b09      	cmp	r3, #9
 8016fe8:	d94e      	bls.n	8017088 <_vfiprintf_r+0x1c4>
 8016fea:	b1b0      	cbz	r0, 801701a <_vfiprintf_r+0x156>
 8016fec:	9207      	str	r2, [sp, #28]
 8016fee:	e014      	b.n	801701a <_vfiprintf_r+0x156>
 8016ff0:	eba0 0308 	sub.w	r3, r0, r8
 8016ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8016ff8:	4313      	orrs	r3, r2
 8016ffa:	9304      	str	r3, [sp, #16]
 8016ffc:	46a2      	mov	sl, r4
 8016ffe:	e7d2      	b.n	8016fa6 <_vfiprintf_r+0xe2>
 8017000:	9b03      	ldr	r3, [sp, #12]
 8017002:	1d19      	adds	r1, r3, #4
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	9103      	str	r1, [sp, #12]
 8017008:	2b00      	cmp	r3, #0
 801700a:	bfbb      	ittet	lt
 801700c:	425b      	neglt	r3, r3
 801700e:	f042 0202 	orrlt.w	r2, r2, #2
 8017012:	9307      	strge	r3, [sp, #28]
 8017014:	9307      	strlt	r3, [sp, #28]
 8017016:	bfb8      	it	lt
 8017018:	9204      	strlt	r2, [sp, #16]
 801701a:	7823      	ldrb	r3, [r4, #0]
 801701c:	2b2e      	cmp	r3, #46	; 0x2e
 801701e:	d10c      	bne.n	801703a <_vfiprintf_r+0x176>
 8017020:	7863      	ldrb	r3, [r4, #1]
 8017022:	2b2a      	cmp	r3, #42	; 0x2a
 8017024:	d135      	bne.n	8017092 <_vfiprintf_r+0x1ce>
 8017026:	9b03      	ldr	r3, [sp, #12]
 8017028:	1d1a      	adds	r2, r3, #4
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	9203      	str	r2, [sp, #12]
 801702e:	2b00      	cmp	r3, #0
 8017030:	bfb8      	it	lt
 8017032:	f04f 33ff 	movlt.w	r3, #4294967295
 8017036:	3402      	adds	r4, #2
 8017038:	9305      	str	r3, [sp, #20]
 801703a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017120 <_vfiprintf_r+0x25c>
 801703e:	7821      	ldrb	r1, [r4, #0]
 8017040:	2203      	movs	r2, #3
 8017042:	4650      	mov	r0, sl
 8017044:	f7e9 f8e4 	bl	8000210 <memchr>
 8017048:	b140      	cbz	r0, 801705c <_vfiprintf_r+0x198>
 801704a:	2340      	movs	r3, #64	; 0x40
 801704c:	eba0 000a 	sub.w	r0, r0, sl
 8017050:	fa03 f000 	lsl.w	r0, r3, r0
 8017054:	9b04      	ldr	r3, [sp, #16]
 8017056:	4303      	orrs	r3, r0
 8017058:	3401      	adds	r4, #1
 801705a:	9304      	str	r3, [sp, #16]
 801705c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017060:	482c      	ldr	r0, [pc, #176]	; (8017114 <_vfiprintf_r+0x250>)
 8017062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017066:	2206      	movs	r2, #6
 8017068:	f7e9 f8d2 	bl	8000210 <memchr>
 801706c:	2800      	cmp	r0, #0
 801706e:	d03f      	beq.n	80170f0 <_vfiprintf_r+0x22c>
 8017070:	4b29      	ldr	r3, [pc, #164]	; (8017118 <_vfiprintf_r+0x254>)
 8017072:	bb1b      	cbnz	r3, 80170bc <_vfiprintf_r+0x1f8>
 8017074:	9b03      	ldr	r3, [sp, #12]
 8017076:	3307      	adds	r3, #7
 8017078:	f023 0307 	bic.w	r3, r3, #7
 801707c:	3308      	adds	r3, #8
 801707e:	9303      	str	r3, [sp, #12]
 8017080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017082:	443b      	add	r3, r7
 8017084:	9309      	str	r3, [sp, #36]	; 0x24
 8017086:	e767      	b.n	8016f58 <_vfiprintf_r+0x94>
 8017088:	fb0c 3202 	mla	r2, ip, r2, r3
 801708c:	460c      	mov	r4, r1
 801708e:	2001      	movs	r0, #1
 8017090:	e7a5      	b.n	8016fde <_vfiprintf_r+0x11a>
 8017092:	2300      	movs	r3, #0
 8017094:	3401      	adds	r4, #1
 8017096:	9305      	str	r3, [sp, #20]
 8017098:	4619      	mov	r1, r3
 801709a:	f04f 0c0a 	mov.w	ip, #10
 801709e:	4620      	mov	r0, r4
 80170a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170a4:	3a30      	subs	r2, #48	; 0x30
 80170a6:	2a09      	cmp	r2, #9
 80170a8:	d903      	bls.n	80170b2 <_vfiprintf_r+0x1ee>
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d0c5      	beq.n	801703a <_vfiprintf_r+0x176>
 80170ae:	9105      	str	r1, [sp, #20]
 80170b0:	e7c3      	b.n	801703a <_vfiprintf_r+0x176>
 80170b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80170b6:	4604      	mov	r4, r0
 80170b8:	2301      	movs	r3, #1
 80170ba:	e7f0      	b.n	801709e <_vfiprintf_r+0x1da>
 80170bc:	ab03      	add	r3, sp, #12
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	462a      	mov	r2, r5
 80170c2:	4b16      	ldr	r3, [pc, #88]	; (801711c <_vfiprintf_r+0x258>)
 80170c4:	a904      	add	r1, sp, #16
 80170c6:	4630      	mov	r0, r6
 80170c8:	f7fb ff34 	bl	8012f34 <_printf_float>
 80170cc:	4607      	mov	r7, r0
 80170ce:	1c78      	adds	r0, r7, #1
 80170d0:	d1d6      	bne.n	8017080 <_vfiprintf_r+0x1bc>
 80170d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170d4:	07d9      	lsls	r1, r3, #31
 80170d6:	d405      	bmi.n	80170e4 <_vfiprintf_r+0x220>
 80170d8:	89ab      	ldrh	r3, [r5, #12]
 80170da:	059a      	lsls	r2, r3, #22
 80170dc:	d402      	bmi.n	80170e4 <_vfiprintf_r+0x220>
 80170de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170e0:	f7fe fed0 	bl	8015e84 <__retarget_lock_release_recursive>
 80170e4:	89ab      	ldrh	r3, [r5, #12]
 80170e6:	065b      	lsls	r3, r3, #25
 80170e8:	f53f af12 	bmi.w	8016f10 <_vfiprintf_r+0x4c>
 80170ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170ee:	e711      	b.n	8016f14 <_vfiprintf_r+0x50>
 80170f0:	ab03      	add	r3, sp, #12
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	462a      	mov	r2, r5
 80170f6:	4b09      	ldr	r3, [pc, #36]	; (801711c <_vfiprintf_r+0x258>)
 80170f8:	a904      	add	r1, sp, #16
 80170fa:	4630      	mov	r0, r6
 80170fc:	f7fc f9be 	bl	801347c <_printf_i>
 8017100:	e7e4      	b.n	80170cc <_vfiprintf_r+0x208>
 8017102:	bf00      	nop
 8017104:	080257ec 	.word	0x080257ec
 8017108:	0802580c 	.word	0x0802580c
 801710c:	080257cc 	.word	0x080257cc
 8017110:	08025a04 	.word	0x08025a04
 8017114:	08025a0e 	.word	0x08025a0e
 8017118:	08012f35 	.word	0x08012f35
 801711c:	08016ea1 	.word	0x08016ea1
 8017120:	08025a0a 	.word	0x08025a0a

08017124 <_read_r>:
 8017124:	b538      	push	{r3, r4, r5, lr}
 8017126:	4d07      	ldr	r5, [pc, #28]	; (8017144 <_read_r+0x20>)
 8017128:	4604      	mov	r4, r0
 801712a:	4608      	mov	r0, r1
 801712c:	4611      	mov	r1, r2
 801712e:	2200      	movs	r2, #0
 8017130:	602a      	str	r2, [r5, #0]
 8017132:	461a      	mov	r2, r3
 8017134:	f7ea fa32 	bl	800159c <_read>
 8017138:	1c43      	adds	r3, r0, #1
 801713a:	d102      	bne.n	8017142 <_read_r+0x1e>
 801713c:	682b      	ldr	r3, [r5, #0]
 801713e:	b103      	cbz	r3, 8017142 <_read_r+0x1e>
 8017140:	6023      	str	r3, [r4, #0]
 8017142:	bd38      	pop	{r3, r4, r5, pc}
 8017144:	2000d06c 	.word	0x2000d06c

08017148 <abort>:
 8017148:	b508      	push	{r3, lr}
 801714a:	2006      	movs	r0, #6
 801714c:	f000 f834 	bl	80171b8 <raise>
 8017150:	2001      	movs	r0, #1
 8017152:	f7ea fa19 	bl	8001588 <_exit>

08017156 <_malloc_usable_size_r>:
 8017156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801715a:	1f18      	subs	r0, r3, #4
 801715c:	2b00      	cmp	r3, #0
 801715e:	bfbc      	itt	lt
 8017160:	580b      	ldrlt	r3, [r1, r0]
 8017162:	18c0      	addlt	r0, r0, r3
 8017164:	4770      	bx	lr

08017166 <_raise_r>:
 8017166:	291f      	cmp	r1, #31
 8017168:	b538      	push	{r3, r4, r5, lr}
 801716a:	4604      	mov	r4, r0
 801716c:	460d      	mov	r5, r1
 801716e:	d904      	bls.n	801717a <_raise_r+0x14>
 8017170:	2316      	movs	r3, #22
 8017172:	6003      	str	r3, [r0, #0]
 8017174:	f04f 30ff 	mov.w	r0, #4294967295
 8017178:	bd38      	pop	{r3, r4, r5, pc}
 801717a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801717c:	b112      	cbz	r2, 8017184 <_raise_r+0x1e>
 801717e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017182:	b94b      	cbnz	r3, 8017198 <_raise_r+0x32>
 8017184:	4620      	mov	r0, r4
 8017186:	f000 f831 	bl	80171ec <_getpid_r>
 801718a:	462a      	mov	r2, r5
 801718c:	4601      	mov	r1, r0
 801718e:	4620      	mov	r0, r4
 8017190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017194:	f000 b818 	b.w	80171c8 <_kill_r>
 8017198:	2b01      	cmp	r3, #1
 801719a:	d00a      	beq.n	80171b2 <_raise_r+0x4c>
 801719c:	1c59      	adds	r1, r3, #1
 801719e:	d103      	bne.n	80171a8 <_raise_r+0x42>
 80171a0:	2316      	movs	r3, #22
 80171a2:	6003      	str	r3, [r0, #0]
 80171a4:	2001      	movs	r0, #1
 80171a6:	e7e7      	b.n	8017178 <_raise_r+0x12>
 80171a8:	2400      	movs	r4, #0
 80171aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80171ae:	4628      	mov	r0, r5
 80171b0:	4798      	blx	r3
 80171b2:	2000      	movs	r0, #0
 80171b4:	e7e0      	b.n	8017178 <_raise_r+0x12>
	...

080171b8 <raise>:
 80171b8:	4b02      	ldr	r3, [pc, #8]	; (80171c4 <raise+0xc>)
 80171ba:	4601      	mov	r1, r0
 80171bc:	6818      	ldr	r0, [r3, #0]
 80171be:	f7ff bfd2 	b.w	8017166 <_raise_r>
 80171c2:	bf00      	nop
 80171c4:	200000c8 	.word	0x200000c8

080171c8 <_kill_r>:
 80171c8:	b538      	push	{r3, r4, r5, lr}
 80171ca:	4d07      	ldr	r5, [pc, #28]	; (80171e8 <_kill_r+0x20>)
 80171cc:	2300      	movs	r3, #0
 80171ce:	4604      	mov	r4, r0
 80171d0:	4608      	mov	r0, r1
 80171d2:	4611      	mov	r1, r2
 80171d4:	602b      	str	r3, [r5, #0]
 80171d6:	f7ea f9c7 	bl	8001568 <_kill>
 80171da:	1c43      	adds	r3, r0, #1
 80171dc:	d102      	bne.n	80171e4 <_kill_r+0x1c>
 80171de:	682b      	ldr	r3, [r5, #0]
 80171e0:	b103      	cbz	r3, 80171e4 <_kill_r+0x1c>
 80171e2:	6023      	str	r3, [r4, #0]
 80171e4:	bd38      	pop	{r3, r4, r5, pc}
 80171e6:	bf00      	nop
 80171e8:	2000d06c 	.word	0x2000d06c

080171ec <_getpid_r>:
 80171ec:	f7ea b9b4 	b.w	8001558 <_getpid>

080171f0 <_init>:
 80171f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f2:	bf00      	nop
 80171f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171f6:	bc08      	pop	{r3}
 80171f8:	469e      	mov	lr, r3
 80171fa:	4770      	bx	lr

080171fc <_fini>:
 80171fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fe:	bf00      	nop
 8017200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017202:	bc08      	pop	{r3}
 8017204:	469e      	mov	lr, r3
 8017206:	4770      	bx	lr


Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08009348  08009348  00019348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009928  08009928  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009930  08009930  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009934  08009934  00019934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000204  08009b3c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  08009b3c  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a85  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037e8  00000000  00000000  00036cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  0003a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  0003b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019b36  00000000  00000000  0003bf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011784  00000000  00000000  00055a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088f8c  00000000  00000000  000671ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  000f01c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009330 	.word	0x08009330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08009330 	.word	0x08009330

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <apInit>:
void lcdMain(void);



void apInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 8000fbc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fdc7 	bl	8001b54 <cliOpen>
	LCD_CLEAR();
 8000fc6:	f000 fd14 	bl	80019f2 <LCD_CLEAR>
	LCD_XY(6, 0); LCD_PUTS((char *)"AQUARIUM");
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2006      	movs	r0, #6
 8000fce:	f000 fcdd 	bl	800198c <LCD_XY>
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <apInit+0x24>)
 8000fd4:	f000 fd17 	bl	8001a06 <LCD_PUTS>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08009348 	.word	0x08009348

08000fe0 <apMain>:

void apMain(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000fe6:	f000 f87e 	bl	80010e6 <millis>
 8000fea:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8000fec:	f000 f87b 	bl	80010e6 <millis>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffa:	d302      	bcc.n	8001002 <apMain+0x22>
    {
      pre_time = millis();
 8000ffc:	f000 f873 	bl	80010e6 <millis>
 8001000:	6078      	str	r0, [r7, #4]

    }
    Ds18b20_ManualConvert();
 8001002:	f001 fd23 	bl	8002a4c <Ds18b20_ManualConvert>
    LCD_XY(1, 1); LCD_PUTS((char *)"Water_Temp : ");
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fcbf 	bl	800198c <LCD_XY>
 800100e:	4818      	ldr	r0, [pc, #96]	; (8001070 <apMain+0x90>)
 8001010:	f000 fcf9 	bl	8001a06 <LCD_PUTS>
    LCD_XY(13, 1); output_TEMP(ds18b20[0].Temperature*10);
 8001014:	2101      	movs	r1, #1
 8001016:	200d      	movs	r0, #13
 8001018:	f000 fcb8 	bl	800198c <LCD_XY>
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <apMain+0x94>)
 800101e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001022:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	f000 fcff 	bl	8001a30 <output_TEMP>
    LCD_XY(18, 1); LCD_print_SC(223);
 8001032:	2101      	movs	r1, #1
 8001034:	2012      	movs	r0, #18
 8001036:	f000 fca9 	bl	800198c <LCD_XY>
 800103a:	20df      	movs	r0, #223	; 0xdf
 800103c:	f000 fc5e 	bl	80018fc <LCD_print_SC>
    LCD_XY(4, 3); LCD_PUTS((char *)"I LOVE YUJIN");
 8001040:	2103      	movs	r1, #3
 8001042:	2004      	movs	r0, #4
 8001044:	f000 fca2 	bl	800198c <LCD_XY>
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <apMain+0x98>)
 800104a:	f000 fcdc 	bl	8001a06 <LCD_PUTS>
    //LCD_CMD(0x18);

    if(buttonGetPressed(_DEF_BUTTON1))
 800104e:	2000      	movs	r0, #0
 8001050:	f000 faa6 	bl	80015a0 <buttonGetPressed>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <apMain+0x82>
    {
    	ledOn(_DEF_LED1);
 800105a:	2000      	movs	r0, #0
 800105c:	f002 f9e2 	bl	8003424 <ledOn>
 8001060:	e002      	b.n	8001068 <apMain+0x88>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8001062:	2000      	movs	r0, #0
 8001064:	f002 f9fe 	bl	8003464 <ledOff>
    }

    cliMain();
 8001068:	f000 fe2c 	bl	8001cc4 <cliMain>
    if (millis()-pre_time >= 1000)
 800106c:	e7be      	b.n	8000fec <apMain+0xc>
 800106e:	bf00      	nop
 8001070:	08009354 	.word	0x08009354
 8001074:	20000794 	.word	0x20000794
 8001078:	08009364 	.word	0x08009364

0800107c <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  HAL_Init();
 8001082:	f003 f85d 	bl	8004140 <HAL_Init>
  SystemClock_Config();
 8001086:	f000 f835 	bl	80010f4 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <bspInit+0x50>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <bspInit+0x50>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <bspInit+0x50>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <bspInit+0x50>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <bspInit+0x50>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <bspInit+0x50>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <delay>:

void delay(uint32_t ms)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f003 f8a3 	bl	8004224 <HAL_Delay>
#endif
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <millis>:

uint32_t millis(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010ea:	f003 f88f 	bl	800420c <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fe51 	bl	8006daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <SystemClock_Config+0xc8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <SystemClock_Config+0xc8>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <SystemClock_Config+0xc8>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <SystemClock_Config+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <SystemClock_Config+0xcc>)
 800113e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <SystemClock_Config+0xcc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001164:	2308      	movs	r3, #8
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001170:	2304      	movs	r3, #4
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f004 f855 	bl	8005228 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001184:	f000 f81e 	bl	80011c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2103      	movs	r1, #3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 faaf 	bl	8005708 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b0:	f000 f808 	bl	80011c4 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	; 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ca:	e7fe      	b.n	80011ca <Error_Handler+0x6>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f002 ffbc 	bl	80041e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <SPI1_IRQHandler+0x10>)
 8001276:	f004 fc13 	bl	8005aa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200007cc 	.word	0x200007cc

08001284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <USART1_IRQHandler+0x10>)
 800128a:	f004 feaf 	bl	8005fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000944 	.word	0x20000944

08001298 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA2_Stream2_IRQHandler+0x10>)
 800129e:	f003 faab 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200008e4 	.word	0x200008e4

080012ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <DMA2_Stream3_IRQHandler+0x10>)
 80012b2:	f003 faa1 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000824 	.word	0x20000824

080012c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <DMA2_Stream7_IRQHandler+0x10>)
 80012c6:	f003 fa97 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000884 	.word	0x20000884

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f005 fd1c 	bl	8006d40 <__errno>
 8001308:	4602      	mov	r2, r0
 800130a:	230c      	movs	r3, #12
 800130c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	20000220 	.word	0x20000220
 800133c:	20000990 	.word	0x20000990

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <SystemInit+0x28>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <SystemInit+0x28>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SystemInit+0x28>)
 8001356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135a:	609a      	str	r2, [r3, #8]
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001372:	e003      	b.n	800137c <LoopCopyDataInit>

08001374 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001376:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001378:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800137a:	3104      	adds	r1, #4

0800137c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001380:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001382:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001384:	d3f6      	bcc.n	8001374 <CopyDataInit>
  ldr  r2, =_sbss
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001388:	e002      	b.n	8001390 <LoopFillZerobss>

0800138a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800138a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800138c:	f842 3b04 	str.w	r3, [r2], #4

08001390 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001392:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001394:	d3f9      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001396:	f7ff ffd3 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f005 fcd7 	bl	8006d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f005 fcc3 	bl	8006d28 <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013a8:	08009938 	.word	0x08009938
  ldr  r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013b0:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80013b4:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80013b8:	2000098c 	.word	0x2000098c

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>

080013be <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80013be:	b480      	push	{r7}
 80013c0:	b087      	sub	sp, #28
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	60da      	str	r2, [r3, #12]

  return ret;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001400:	2301      	movs	r3, #1
 8001402:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	e026      	b.n	8001458 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	441a      	add	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	440b      	add	r3, r1
 8001422:	7812      	ldrb	r2, [r2, #0]
 8001424:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d00c      	beq.n	800144c <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	6892      	ldr	r2, [r2, #8]
 800143c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001440:	fb02 f201 	mul.w	r2, r2, r1
 8001444:	1a9a      	subs	r2, r3, r2
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	e002      	b.n	8001452 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 800144c:	2300      	movs	r3, #0
 800144e:	75fb      	strb	r3, [r7, #23]
      break;
 8001450:	e006      	b.n	8001460 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	3301      	adds	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8d4      	bhi.n	800140a <qbufferRead+0x16>
    }
  }

  return ret;
 8001460:	7dfb      	ldrb	r3, [r7, #23]
}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6892      	ldr	r2, [r2, #8]
 8001484:	fbb3 f1f2 	udiv	r1, r3, r2
 8001488:	fb02 f201 	mul.w	r2, r2, r1
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <DWT_Delay_Init+0x58>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <DWT_Delay_Init+0x58>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <DWT_Delay_Init+0x58>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <DWT_Delay_Init+0x58>)
 80014b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ba:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <DWT_Delay_Init+0x5c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <DWT_Delay_Init+0x5c>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <DWT_Delay_Init+0x5c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <DWT_Delay_Init+0x5c>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <DWT_Delay_Init+0x5c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80014da:	bf00      	nop
     __ASM volatile ("NOP");
 80014dc:	bf00      	nop
     __ASM volatile ("NOP");
 80014de:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <DWT_Delay_Init+0x5c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80014e8:	2300      	movs	r3, #0
 80014ea:	e000      	b.n	80014ee <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80014ec:	2301      	movs	r3, #1
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000edf0 	.word	0xe000edf0
 80014fc:	e0001000 	.word	0xe0001000

08001500 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  bool ret = true;
 8001506:	2301      	movs	r3, #1
 8001508:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <buttonInit+0x90>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <buttonInit+0x90>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <buttonInit+0x90>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	e019      	b.n	8001576 <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001542:	4914      	ldr	r1, [pc, #80]	; (8001594 <buttonInit+0x94>)
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3304      	adds	r3, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001556:	490f      	ldr	r1, [pc, #60]	; (8001594 <buttonInit+0x94>)
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1d3a      	adds	r2, r7, #4
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fbac 	bl	8004cc8 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dde2      	ble.n	8001542 <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <buttonInit+0x98>)
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <buttonInit+0x9c>)
 8001580:	f001 f8c0 	bl	8002704 <cliAdd>
#endif

  return ret;
 8001584:	7efb      	ldrb	r3, [r7, #27]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	20000004 	.word	0x20000004
 8001598:	08001685 	.word	0x08001685
 800159c:	08009374 	.word	0x08009374

080015a0 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4a31      	ldr	r2, [pc, #196]	; (8001680 <buttonGetPressed+0xe0>)
 80015ba:	4413      	add	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <buttonGetPressed+0x28>
  {
    return false;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e057      	b.n	8001678 <buttonGetPressed+0xd8>
  }

  switch(button->State)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	7a9b      	ldrb	r3, [r3, #10]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <buttonGetPressed+0x36>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d01b      	beq.n	800160c <buttonGetPressed+0x6c>
 80015d4:	e04f      	b.n	8001676 <buttonGetPressed+0xd6>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f003 fdd4 	bl	8005190 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	7a1b      	ldrb	r3, [r3, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d13d      	bne.n	8001670 <buttonGetPressed+0xd0>
  		  {
  			  button->lastDebounceTime = millis();
 80015f4:	f7ff fd77 	bl	80010e6 <millis>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	611a      	str	r2, [r3, #16]
  			  button->State = BUTTON_Pressed;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2201      	movs	r2, #1
 8001602:	729a      	strb	r2, [r3, #10]
  			  button->PinState = GPIO_PIN_SET;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2201      	movs	r2, #1
 8001608:	725a      	strb	r2, [r3, #9]
  		  }
  		  break;
 800160a:	e031      	b.n	8001670 <buttonGetPressed+0xd0>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4619      	mov	r1, r3
 8001618:	4610      	mov	r0, r2
 800161a:	f003 fdb9 	bl	8005190 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	7a1b      	ldrb	r3, [r3, #8]
 8001626:	429a      	cmp	r2, r3
 8001628:	d114      	bne.n	8001654 <buttonGetPressed+0xb4>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 800162a:	f7ff fd5c 	bl	80010e6 <millis>
 800162e:	4602      	mov	r2, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	1ad2      	subs	r2, r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	429a      	cmp	r2, r3
 800163c:	d91a      	bls.n	8001674 <buttonGetPressed+0xd4>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2201      	movs	r2, #1
 8001642:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	7a5b      	ldrb	r3, [r3, #9]
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8001652:	e00f      	b.n	8001674 <buttonGetPressed+0xd4>
			  button->State = BUTTON_IDLE;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2200      	movs	r2, #0
 8001658:	729a      	strb	r2, [r3, #10]
			  button->PinState = GPIO_PIN_RESET;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2200      	movs	r2, #0
 800165e:	725a      	strb	r2, [r3, #9]
			  ret = button->PinState;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	7a5b      	ldrb	r3, [r3, #9]
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf14      	ite	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2300      	moveq	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
		  break;
 800166e:	e001      	b.n	8001674 <buttonGetPressed+0xd4>
  		  break;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <buttonGetPressed+0xd6>
		  break;
 8001674:	bf00      	nop
  }
  return ret;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000004 	.word	0x20000004

08001684 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d128      	bne.n	80016ea <cliButton+0x66>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4919      	ldr	r1, [pc, #100]	; (8001704 <cliButton+0x80>)
 800169e:	2000      	movs	r0, #0
 80016a0:	4798      	blx	r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <cliButton+0x66>
  {
    while(cliKeepLoop())
 80016a8:	e018      	b.n	80016dc <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	e00c      	b.n	80016ca <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff73 	bl	80015a0 <buttonGetPressed>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	4812      	ldr	r0, [pc, #72]	; (8001708 <cliButton+0x84>)
 80016c0:	f000 ff10 	bl	80024e4 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	ddef      	ble.n	80016b0 <cliButton+0x2c>
      }
      cliPrintf("\n");
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <cliButton+0x88>)
 80016d2:	f000 ff07 	bl	80024e4 <cliPrintf>

      delay(100);
 80016d6:	2064      	movs	r0, #100	; 0x64
 80016d8:	f7ff fcfa 	bl	80010d0 <delay>
    while(cliKeepLoop())
 80016dc:	f000 fffc 	bl	80026d8 <cliKeepLoop>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1e1      	bne.n	80016aa <cliButton+0x26>
    }

    ret = true;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <cliButton+0x78>
  {
    cliPrintf("button show\n");
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <cliButton+0x8c>)
 80016f8:	f000 fef4 	bl	80024e4 <cliPrintf>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0800937c 	.word	0x0800937c
 8001708:	08009384 	.word	0x08009384
 800170c:	08009388 	.word	0x08009388
 8001710:	0800938c 	.word	0x0800938c

08001714 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <DWT_Delay_us+0x3c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001722:	f004 f989 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <DWT_Delay_us+0x40>)
 800172a:	fba3 2302 	umull	r2, r3, r3, r2
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001738:	bf00      	nop
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <DWT_Delay_us+0x3c>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	d3f8      	bcc.n	800173a <DWT_Delay_us+0x26>
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	e0001000 	.word	0xe0001000
 8001754:	431bde83 	.word	0x431bde83

08001758 <digit100>:
uint32_t Data_pin[4] = {GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_12};  // MSBFIRST
// RS-B7, R/W-B9, EN-B8, D4-B12, D5-B13, D6-B14, D7-B15

char digit10000(uint16_t v) {return '0' + v / 10000;}
char digit1000(uint16_t v) {return '0' + v / 1000 - (v/10000) * 10;}
char digit100(uint16_t v) {return '0' + v / 100 - (v/1000) * 10;}
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <digit100+0x48>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b29b      	uxth	r3, r3
 800176e:	b2da      	uxtb	r2, r3
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	490c      	ldr	r1, [pc, #48]	; (80017a4 <digit100+0x4c>)
 8001774:	fba1 1303 	umull	r1, r3, r1, r3
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4619      	mov	r1, r3
 8001780:	0149      	lsls	r1, r1, #5
 8001782:	1ac9      	subs	r1, r1, r3
 8001784:	0089      	lsls	r1, r1, #2
 8001786:	1acb      	subs	r3, r1, r3
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4413      	add	r3, r2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3330      	adds	r3, #48	; 0x30
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	51eb851f 	.word	0x51eb851f
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <digit10>:
char digit10(uint16_t v) {return '0' + v / 10 - (v/100) * 10;}
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <digit10+0x48>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	490c      	ldr	r1, [pc, #48]	; (80017f4 <digit10+0x4c>)
 80017c4:	fba1 1303 	umull	r1, r3, r1, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	0149      	lsls	r1, r1, #5
 80017d2:	1ac9      	subs	r1, r1, r3
 80017d4:	0089      	lsls	r1, r1, #2
 80017d6:	1acb      	subs	r3, r1, r3
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3330      	adds	r3, #48	; 0x30
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	51eb851f 	.word	0x51eb851f

080017f8 <digit1>:
char digit1(uint16_t v) {return '0' + v - (v/10) * 10;}
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	490b      	ldr	r1, [pc, #44]	; (8001838 <digit1+0x40>)
 800180a:	fba1 1303 	umull	r1, r3, r1, r3
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	b29b      	uxth	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	0149      	lsls	r1, r1, #5
 8001818:	1ac9      	subs	r1, r1, r3
 800181a:	0089      	lsls	r1, r1, #2
 800181c:	1acb      	subs	r3, r1, r3
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3330      	adds	r3, #48	; 0x30
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	cccccccd 	.word	0xcccccccd

0800183c <EN_PULSE>:

void EN_PULSE(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	EN_H;
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <EN_PULSE+0x2c>)
 8001848:	f003 fcba 	bl	80051c0 <HAL_GPIO_WritePin>
	DWT_Delay_us(50);//250
 800184c:	2032      	movs	r0, #50	; 0x32
 800184e:	f7ff ff61 	bl	8001714 <DWT_Delay_us>
	EN_L;
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <EN_PULSE+0x2c>)
 800185a:	f003 fcb1 	bl	80051c0 <HAL_GPIO_WritePin>
	DWT_Delay_us(50);
 800185e:	2032      	movs	r0, #50	; 0x32
 8001860:	f7ff ff58 	bl	8001714 <DWT_Delay_us>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020400 	.word	0x40020400

0800186c <write_4bit>:

void write_4bit(uint8_t data)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = 0xF0000000|((data&0x0F)<<12);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	031b      	lsls	r3, r3, #12
 800187a:	b29b      	uxth	r3, r3
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <write_4bit+0x24>)
 800187e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001882:	6193      	str	r3, [r2, #24]
	EN_PULSE();
 8001884:	f7ff ffda 	bl	800183c <EN_PULSE>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40020400 	.word	0x40020400

08001894 <LCD_CMD>:
  //GPIOB->CRH = (GPIOB->CRH & 0x0000FFFF)|(0x22220000);

	return temp;
}

void LCD_CMD(char cmd) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  RS_L;
 800189e:	2200      	movs	r2, #0
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <LCD_CMD+0x30>)
 80018a4:	f003 fc8c 	bl	80051c0 <HAL_GPIO_WritePin>
	//while(LCD_readCMD() == 0x80)
	write_4bit(cmd>>4);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffdc 	bl	800186c <write_4bit>
	//while(LCD_readCMD() == 0x80)
	write_4bit(cmd);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffd8 	bl	800186c <write_4bit>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020400 	.word	0x40020400

080018c8 <LCD_DATA>:

void LCD_DATA(char data) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  RS_H;
 80018d2:	2201      	movs	r2, #1
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <LCD_DATA+0x30>)
 80018d8:	f003 fc72 	bl	80051c0 <HAL_GPIO_WritePin>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data>>4);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ffc2 	bl	800186c <write_4bit>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ffbe 	bl	800186c <write_4bit>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020400 	.word	0x40020400

080018fc <LCD_print_SC>:
	write_4bit(data>>4);
	//while(LCD_readCMD() == 0x80)
	write_4bit(data);
}

void LCD_print_SC(uint8_t data) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  RS_H;
 8001906:	2201      	movs	r2, #1
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <LCD_print_SC+0x30>)
 800190c:	f003 fc58 	bl	80051c0 <HAL_GPIO_WritePin>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data>>4);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ffa8 	bl	800186c <write_4bit>
	//while(LCD_readCMD() == 0x80)
	write_4bit(data);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ffa4 	bl	800186c <write_4bit>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020400 	.word	0x40020400

08001930 <LCD_INIT>:
{
	LCD_CMD(0x0C);
}

void LCD_INIT(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
   HAL_Delay(100);
 8001934:	2064      	movs	r0, #100	; 0x64
 8001936:	f002 fc75 	bl	8004224 <HAL_Delay>
   LCD_CMD(0x03); HAL_Delay(45);// 4 bits, 2 line, 5x8 font
 800193a:	2003      	movs	r0, #3
 800193c:	f7ff ffaa 	bl	8001894 <LCD_CMD>
 8001940:	202d      	movs	r0, #45	; 0x2d
 8001942:	f002 fc6f 	bl	8004224 <HAL_Delay>
   LCD_CMD(0x03); HAL_Delay(45);
 8001946:	2003      	movs	r0, #3
 8001948:	f7ff ffa4 	bl	8001894 <LCD_CMD>
 800194c:	202d      	movs	r0, #45	; 0x2d
 800194e:	f002 fc69 	bl	8004224 <HAL_Delay>
   LCD_CMD(0x03); HAL_Delay(45);
 8001952:	2003      	movs	r0, #3
 8001954:	f7ff ff9e 	bl	8001894 <LCD_CMD>
 8001958:	202d      	movs	r0, #45	; 0x2d
 800195a:	f002 fc63 	bl	8004224 <HAL_Delay>
   LCD_CMD(0x02); HAL_Delay(100);
 800195e:	2002      	movs	r0, #2
 8001960:	f7ff ff98 	bl	8001894 <LCD_CMD>
 8001964:	2064      	movs	r0, #100	; 0x64
 8001966:	f002 fc5d 	bl	8004224 <HAL_Delay>
   LCD_CMD(0x28);//4bit mode, 5x8Dot, 2Line
 800196a:	2028      	movs	r0, #40	; 0x28
 800196c:	f7ff ff92 	bl	8001894 <LCD_CMD>
   LCD_CMD(0x0C);//Display on
 8001970:	200c      	movs	r0, #12
 8001972:	f7ff ff8f 	bl	8001894 <LCD_CMD>
   LCD_CMD(0x06);//font direction left
 8001976:	2006      	movs	r0, #6
 8001978:	f7ff ff8c 	bl	8001894 <LCD_CMD>
   LCD_CMD(0x01);//Display Clear
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff ff89 	bl	8001894 <LCD_CMD>
   HAL_Delay(100);
 8001982:	2064      	movs	r0, #100	; 0x64
 8001984:	f002 fc4e 	bl	8004224 <HAL_Delay>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <LCD_XY>:

void LCD_XY(char x, char y) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	71bb      	strb	r3, [r7, #6]
  if     (y==0) LCD_CMD(0x80 + x);
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <LCD_XY+0x24>
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	3b80      	subs	r3, #128	; 0x80
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff73 	bl	8001894 <LCD_CMD>
  else if(y==1) LCD_CMD(0xC0 + x);
  else if(y==2) LCD_CMD(0x94 + x);
  else if(y==3) LCD_CMD(0xD4 + x);
}
 80019ae:	e01c      	b.n	80019ea <LCD_XY+0x5e>
  else if(y==1) LCD_CMD(0xC0 + x);
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d106      	bne.n	80019c4 <LCD_XY+0x38>
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	3b40      	subs	r3, #64	; 0x40
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff69 	bl	8001894 <LCD_CMD>
}
 80019c2:	e012      	b.n	80019ea <LCD_XY+0x5e>
  else if(y==2) LCD_CMD(0x94 + x);
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d106      	bne.n	80019d8 <LCD_XY+0x4c>
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	3b6c      	subs	r3, #108	; 0x6c
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5f 	bl	8001894 <LCD_CMD>
}
 80019d6:	e008      	b.n	80019ea <LCD_XY+0x5e>
  else if(y==3) LCD_CMD(0xD4 + x);
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d105      	bne.n	80019ea <LCD_XY+0x5e>
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	3b2c      	subs	r3, #44	; 0x2c
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff55 	bl	8001894 <LCD_CMD>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <LCD_CLEAR>:

void LCD_CLEAR(void) { LCD_CMD(0x01); HAL_Delay(3); }
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff ff4c 	bl	8001894 <LCD_CMD>
 80019fc:	2003      	movs	r0, #3
 80019fe:	f002 fc11 	bl	8004224 <HAL_Delay>
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <LCD_PUTS>:

void LCD_PUTS(char *str) { while(*str) LCD_DATA(*str++); }
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	e006      	b.n	8001a1e <LCD_PUTS+0x18>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff55 	bl	80018c8 <LCD_DATA>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f4      	bne.n	8001a10 <LCD_PUTS+0xa>
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <output_TEMP>:
  line[12] = '0' + v              - (v/10)         * 10;
  LCD_PUTS(line);
}

void output_TEMP(float temp)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	ed87 0a01 	vstr	s0, [r7, #4]
	static char line[5] = "---.-";
    //                      01234
	if(temp < 0)
 8001a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d503      	bpl.n	8001a50 <output_TEMP+0x20>
	{
		line[0] = '-';
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <output_TEMP+0x88>)
 8001a4a:	222d      	movs	r2, #45	; 0x2d
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	e002      	b.n	8001a56 <output_TEMP+0x26>
	}else
	{
		line[0] = ' ';
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <output_TEMP+0x88>)
 8001a52:	2220      	movs	r2, #32
 8001a54:	701a      	strb	r2, [r3, #0]
	}

	line[1] = digit100(temp);
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5e:	ee17 3a90 	vmov	r3, s15
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fe77 	bl	8001758 <digit100>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <output_TEMP+0x88>)
 8001a70:	705a      	strb	r2, [r3, #1]
	line[2] = digit10(temp);
 8001a72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7a:	ee17 3a90 	vmov	r3, s15
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe91 	bl	80017a8 <digit10>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <output_TEMP+0x88>)
 8001a8c:	709a      	strb	r2, [r3, #2]
    line[4] = digit1(temp);
 8001a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a96:	ee17 3a90 	vmov	r3, s15
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff feab 	bl	80017f8 <digit1>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <output_TEMP+0x88>)
 8001aa8:	711a      	strb	r2, [r3, #4]
	LCD_PUTS(line);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <output_TEMP+0x88>)
 8001aac:	f7ff ffab 	bl	8001a06 <LCD_PUTS>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000018 	.word	0x20000018

08001abc <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <cliInit+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <cliInit+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <cliInit+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <cliInit+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <cliInit+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <cliInit+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <cliInit+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <cliInit+0x74>)
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <cliInit+0x78>)
 8001af6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <cliInit+0x74>)
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <cliInit+0x7c>)
 8001afe:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <cliInit+0x74>)
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <cliInit+0x80>)
 8001b06:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <cliInit+0x74>)
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <cliInit+0x84>)
 8001b0e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <cliInit+0x74>)
 8001b14:	f000 fb5c 	bl	80021d0 <cliLineClean>


  cliAdd("help", cliShowList);
 8001b18:	490a      	ldr	r1, [pc, #40]	; (8001b44 <cliInit+0x88>)
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <cliInit+0x8c>)
 8001b1c:	f000 fdf2 	bl	8002704 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001b20:	490a      	ldr	r1, [pc, #40]	; (8001b4c <cliInit+0x90>)
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <cliInit+0x94>)
 8001b24:	f000 fdee 	bl	8002704 <cliAdd>

  return true;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000034c 	.word	0x2000034c
 8001b34:	08002595 	.word	0x08002595
 8001b38:	080025e5 	.word	0x080025e5
 8001b3c:	0800263d 	.word	0x0800263d
 8001b40:	08002685 	.word	0x08002685
 8001b44:	08002799 	.word	0x08002799
 8001b48:	0800939c 	.word	0x0800939c
 8001b4c:	08002809 	.word	0x08002809
 8001b50:	080093a4 	.word	0x080093a4

08001b54 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <cliOpen+0x38>)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <cliOpen+0x38>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fffb 	bl	8003b6c <uartOpen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <cliOpen+0x38>)
 8001b7c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001b7e:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <cliOpen+0x38>)
 8001b80:	7a1b      	ldrb	r3, [r3, #8]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000034c 	.word	0x2000034c

08001b90 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <cliShowLog+0xdc>)
 8001b9a:	7a5b      	ldrb	r3, [r3, #9]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d061      	beq.n	8001c64 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7a98      	ldrb	r0, [r3, #10]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001baa:	461a      	mov	r2, r3
 8001bac:	4930      	ldr	r1, [pc, #192]	; (8001c70 <cliShowLog+0xe0>)
 8001bae:	f002 f993 	bl	8003ed8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7a98      	ldrb	r0, [r3, #10]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <cliShowLog+0xe4>)
 8001bc0:	f002 f98a 	bl	8003ed8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7a98      	ldrb	r0, [r3, #10]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4929      	ldr	r1, [pc, #164]	; (8001c78 <cliShowLog+0xe8>)
 8001bd2:	f002 f981 	bl	8003ed8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7a98      	ldrb	r0, [r3, #10]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001be0:	461a      	mov	r2, r3
 8001be2:	4926      	ldr	r1, [pc, #152]	; (8001c7c <cliShowLog+0xec>)
 8001be4:	f002 f978 	bl	8003ed8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7a98      	ldrb	r0, [r3, #10]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4922      	ldr	r1, [pc, #136]	; (8001c80 <cliShowLog+0xf0>)
 8001bf6:	f002 f96f 	bl	8003ed8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7a98      	ldrb	r0, [r3, #10]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001c04:	461a      	mov	r2, r3
 8001c06:	491f      	ldr	r1, [pc, #124]	; (8001c84 <cliShowLog+0xf4>)
 8001c08:	f002 f966 	bl	8003ed8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7a98      	ldrb	r0, [r3, #10]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c16:	461a      	mov	r2, r3
 8001c18:	491b      	ldr	r1, [pc, #108]	; (8001c88 <cliShowLog+0xf8>)
 8001c1a:	f002 f95d 	bl	8003ed8 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e012      	b.n	8001c4a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7a98      	ldrb	r0, [r3, #10]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	015b      	lsls	r3, r3, #5
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4913      	ldr	r1, [pc, #76]	; (8001c8c <cliShowLog+0xfc>)
 8001c40:	f002 f94a 	bl	8003ed8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4293      	cmp	r3, r2
 8001c56:	dbe5      	blt.n	8001c24 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7a9b      	ldrb	r3, [r3, #10]
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <cliShowLog+0x100>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 f93a 	bl	8003ed8 <uartPrintf>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000034c 	.word	0x2000034c
 8001c70:	080093a8 	.word	0x080093a8
 8001c74:	080093b8 	.word	0x080093b8
 8001c78:	080093c8 	.word	0x080093c8
 8001c7c:	080093d8 	.word	0x080093d8
 8001c80:	080093e8 	.word	0x080093e8
 8001c84:	080093f8 	.word	0x080093f8
 8001c88:	08009408 	.word	0x08009408
 8001c8c:	08009418 	.word	0x08009418
 8001c90:	08009428 	.word	0x08009428

08001c94 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4906      	ldr	r1, [pc, #24]	; (8001cbc <cliShowPrompt+0x28>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 f918 	bl	8003ed8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <cliShowPrompt+0x2c>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 f912 	bl	8003ed8 <uartPrintf>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0800942c 	.word	0x0800942c
 8001cc0:	08009430 	.word	0x08009430

08001cc4 <cliMain>:

bool cliMain(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <cliMain+0x40>)
 8001cca:	7a1b      	ldrb	r3, [r3, #8]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <cliMain+0x16>
  {
    return false;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e012      	b.n	8001d00 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <cliMain+0x40>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 f856 	bl	8003d90 <uartAvailable>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <cliMain+0x40>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 f894 	bl	8003e1c <uartRead>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <cliMain+0x40>)
 8001cfa:	f000 f805 	bl	8001d08 <cliUpdate>
  }

  return true;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000034c 	.word	0x2000034c

08001d08 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001d20:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7c1b      	ldrb	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8165 	bne.w	8001ff6 <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	2b0d      	cmp	r3, #13
 8001d30:	d009      	beq.n	8001d46 <cliUpdate+0x3e>
 8001d32:	2b0d      	cmp	r3, #13
 8001d34:	dc02      	bgt.n	8001d3c <cliUpdate+0x34>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d065      	beq.n	8001e06 <cliUpdate+0xfe>
 8001d3a:	e0d4      	b.n	8001ee6 <cliUpdate+0x1de>
 8001d3c:	2b1b      	cmp	r3, #27
 8001d3e:	d01c      	beq.n	8001d7a <cliUpdate+0x72>
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	d01e      	beq.n	8001d82 <cliUpdate+0x7a>
 8001d44:	e0cf      	b.n	8001ee6 <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fa57 	bl	8002204 <cliLineAdd>
          cliRunCmd(p_cli);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fb22 	bl	80023a0 <cliRunCmd>
        }

        line->count = 0;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff8e 	bl	8001c94 <cliShowPrompt>
        break;
 8001d78:	e144      	b.n	8002004 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	741a      	strb	r2, [r3, #16]
        break;
 8001d80:	e140      	b.n	8002004 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	f080 8133 	bcs.w	8001ffa <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da8:	e013      	b.n	8001dd2 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	461a      	mov	r2, r3
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	441a      	add	r2, r3
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	69f9      	ldr	r1, [r7, #28]
 8001dc6:	5c89      	ldrb	r1, [r1, r2]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	3301      	adds	r3, #1
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd2:	7efb      	ldrb	r3, [r7, #27]
 8001dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbe7      	blt.n	8001daa <cliUpdate+0xa2>
          }

          line->count--;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001df0:	461a      	mov	r2, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	498e      	ldr	r1, [pc, #568]	; (8002038 <cliUpdate+0x330>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 f86a 	bl	8003ed8 <uartPrintf>
        }
        break;
 8001e04:	e0f9      	b.n	8001ffa <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d055      	beq.n	8001ebc <cliUpdate+0x1b4>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d050      	beq.n	8001ebc <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d10e      	bne.n	8001e48 <cliUpdate+0x140>
          {
            line->count--;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e40:	461a      	mov	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2100      	movs	r1, #0
 8001e46:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d231      	bcs.n	8001ebc <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6c:	e013      	b.n	8001e96 <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e74:	461a      	mov	r2, r3
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	441a      	add	r2, r3
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	4619      	mov	r1, r3
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	440b      	add	r3, r1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	69f9      	ldr	r1, [r7, #28]
 8001e8a:	5c89      	ldrb	r1, [r1, r2]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	3301      	adds	r3, #1
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e96:	7ebb      	ldrb	r3, [r7, #26]
 8001e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dbe7      	blt.n	8001e6e <cliUpdate+0x166>
            }

            line->count--;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 809b 	beq.w	8001ffe <cliUpdate+0x2f6>
        {
          line->cursor--;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4957      	ldr	r1, [pc, #348]	; (800203c <cliUpdate+0x334>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 fffa 	bl	8003ed8 <uartPrintf>
        }
        break;
 8001ee4:	e08b      	b.n	8001ffe <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eec:	3301      	adds	r3, #1
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	f280 8084 	bge.w	8002002 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d124      	bne.n	8001f54 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	1cf9      	adds	r1, r7, #3
 8001f10:	2201      	movs	r2, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 ffa8 	bl	8003e68 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	461a      	mov	r2, r3
 8001f20:	78f9      	ldrb	r1, [r7, #3]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d24e      	bcs.n	8002002 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e013      	b.n	8001fa2 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f80:	461a      	mov	r2, r3
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	1acb      	subs	r3, r1, r3
 8001f94:	69f9      	ldr	r1, [r7, #28]
 8001f96:	5c89      	ldrb	r1, [r1, r2]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	7e7b      	ldrb	r3, [r7, #25]
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbe7      	blt.n	8001f7a <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	78f9      	ldrb	r1, [r7, #3]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	4914      	ldr	r1, [pc, #80]	; (8002040 <cliUpdate+0x338>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 ff72 	bl	8003ed8 <uartPrintf>
          }
        }
        break;
 8001ff4:	e005      	b.n	8002002 <cliUpdate+0x2fa>
    }
  }
 8001ff6:	bf00      	nop
 8001ff8:	e004      	b.n	8002004 <cliUpdate+0x2fc>
        break;
 8001ffa:	bf00      	nop
 8001ffc:	e002      	b.n	8002004 <cliUpdate+0x2fc>
        break;
 8001ffe:	bf00      	nop
 8002000:	e000      	b.n	8002004 <cliUpdate+0x2fc>
        break;
 8002002:	bf00      	nop

  switch(p_cli->state)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7c1b      	ldrb	r3, [r3, #16]
 8002008:	3b01      	subs	r3, #1
 800200a:	2b03      	cmp	r3, #3
 800200c:	f200 80d3 	bhi.w	80021b6 <cliUpdate+0x4ae>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <cliUpdate+0x310>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002029 	.word	0x08002029
 800201c:	08002031 	.word	0x08002031
 8002020:	08002045 	.word	0x08002045
 8002024:	080021ad 	.word	0x080021ad
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	741a      	strb	r2, [r3, #16]
      break;
 800202e:	e0c2      	b.n	80021b6 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	741a      	strb	r2, [r3, #16]
      break;
 8002036:	e0be      	b.n	80021b6 <cliUpdate+0x4ae>
 8002038:	08009438 	.word	0x08009438
 800203c:	08009440 	.word	0x08009440
 8002040:	08009448 	.word	0x08009448

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	2b44      	cmp	r3, #68	; 0x44
 800204e:	d11a      	bne.n	8002086 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <cliUpdate+0x37e>
        {
          line->cursor--;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	3b01      	subs	r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 800206a:	231b      	movs	r3, #27
 800206c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800206e:	235b      	movs	r3, #91	; 0x5b
 8002070:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f107 010c 	add.w	r1, r7, #12
 800207e:	2203      	movs	r2, #3
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fef1 	bl	8003e68 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	2b43      	cmp	r3, #67	; 0x43
 800208a:	d11d      	bne.n	80020c8 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002098:	429a      	cmp	r2, r3
 800209a:	d215      	bcs.n	80020c8 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 80020ac:	231b      	movs	r3, #27
 80020ae:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80020b0:	235b      	movs	r3, #91	; 0x5b
 80020b2:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f107 010c 	add.w	r1, r7, #12
 80020c0:	2203      	movs	r2, #3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 fed0 	bl	8003e68 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	2b41      	cmp	r3, #65	; 0x41
 80020cc:	d10c      	bne.n	80020e8 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80020ce:	2101      	movs	r1, #1
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8db 	bl	800228c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f001 fef8 	bl	8003ed8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b42      	cmp	r3, #66	; 0x42
 80020ec:	d10c      	bne.n	8002108 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8cb 	bl	800228c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f001 fee8 	bl	8003ed8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	2b31      	cmp	r3, #49	; 0x31
 800210c:	d10f      	bne.n	800212e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7818      	ldrb	r0, [r3, #0]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002118:	461a      	mov	r2, r3
 800211a:	492b      	ldr	r1, [pc, #172]	; (80021c8 <cliUpdate+0x4c0>)
 800211c:	f001 fedc 	bl	8003ed8 <uartPrintf>
        line->cursor = 0;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2204      	movs	r2, #4
 800212c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	2b34      	cmp	r3, #52	; 0x34
 8002132:	d13f      	bne.n	80021b4 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002140:	429a      	cmp	r2, r3
 8002142:	d210      	bcs.n	8002166 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800214a:	b29a      	uxth	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002152:	b29b      	uxth	r3, r3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	8afa      	ldrh	r2, [r7, #22]
 800215e:	491b      	ldr	r1, [pc, #108]	; (80021cc <cliUpdate+0x4c4>)
 8002160:	4618      	mov	r0, r3
 8002162:	f001 feb9 	bl	8003ed8 <uartPrintf>
        }
        if (line->cursor > line->count)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002172:	429a      	cmp	r2, r3
 8002174:	d910      	bls.n	8002198 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217c:	b29a      	uxth	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	8afa      	ldrh	r2, [r7, #22]
 8002190:	490d      	ldr	r1, [pc, #52]	; (80021c8 <cliUpdate+0x4c0>)
 8002192:	4618      	mov	r0, r3
 8002194:	f001 fea0 	bl	8003ed8 <uartPrintf>
        }
        line->cursor = line->count;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	741a      	strb	r2, [r3, #16]
      }
      break;
 80021aa:	e003      	b.n	80021b4 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	741a      	strb	r2, [r3, #16]
      break;
 80021b2:	e000      	b.n	80021b6 <cliUpdate+0x4ae>
      break;
 80021b4:	bf00      	nop
  }



  cliShowLog(p_cli);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fcea 	bl	8001b90 <cliShowLog>

  return ret;
 80021bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3730      	adds	r7, #48	; 0x30
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	08009454 	.word	0x08009454
 80021cc:	0800945c 	.word	0x0800945c

080021d0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	223f      	movs	r2, #63	; 0x3f
 80021ec:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002212:	461a      	mov	r2, r3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	440b      	add	r3, r1
 8002222:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4610      	mov	r0, r2
 800222a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800222e:	2243      	movs	r2, #67	; 0x43
 8002230:	4619      	mov	r1, r3
 8002232:	f004 fdaf 	bl	8006d94 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800223c:	2b03      	cmp	r3, #3
 800223e:	d807      	bhi.n	8002250 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002256:	b25a      	sxtb	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002264:	3301      	adds	r3, #1
 8002266:	425a      	negs	r2, r3
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	f002 0203 	and.w	r2, r2, #3
 8002270:	bf58      	it	pl
 8002272:	4253      	negpl	r3, r2
 8002274:	b2da      	uxtb	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d076      	beq.n	8002390 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7818      	ldrb	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80022b6:	461a      	mov	r2, r3
 80022b8:	4937      	ldr	r1, [pc, #220]	; (8002398 <cliLineChange+0x10c>)
 80022ba:	f001 fe0d 	bl	8003ed8 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7818      	ldrb	r0, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80022d2:	461a      	mov	r2, r3
 80022d4:	4931      	ldr	r1, [pc, #196]	; (800239c <cliLineChange+0x110>)
 80022d6:	f001 fdff 	bl	8003ed8 <uartPrintf>
  }


  if (key_up == true)
 80022da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d125      	bne.n	800232e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80022f2:	b25a      	sxtb	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002308:	4413      	add	r3, r2
 800230a:	3b01      	subs	r3, #1
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002312:	fb93 f1f2 	sdiv	r1, r3, r2
 8002316:	fb02 f201 	mul.w	r2, r2, r1
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	b25a      	sxtb	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e013      	b.n	8002356 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002334:	3301      	adds	r3, #1
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800233c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002340:	fb02 f201 	mul.w	r2, r2, r1
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	b25a      	sxtb	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002354:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	015b      	lsls	r3, r3, #5
 8002360:	4413      	add	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	4403      	add	r3, r0
 8002368:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800236c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002370:	4611      	mov	r1, r2
 8002372:	2243      	movs	r2, #67	; 0x43
 8002374:	4618      	mov	r0, r3
 8002376:	f004 fd0d 	bl	8006d94 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800238e:	e000      	b.n	8002392 <cliLineChange+0x106>
    return;
 8002390:	bf00      	nop
}
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	08009454 	.word	0x08009454
 800239c:	08009464 	.word	0x08009464

080023a0 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80023a8:	2300      	movs	r3, #0
 80023aa:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f851 	bl	8002454 <cliParseArgs>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d046      	beq.n	8002446 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80023b8:	4825      	ldr	r0, [pc, #148]	; (8002450 <cliRunCmd+0xb0>)
 80023ba:	f000 f893 	bl	80024e4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f8b1 	bl	800252c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e033      	b.n	8002438 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fd fef8 	bl	80001e0 <strcmp>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11d      	bne.n	8002432 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 800242c:	4610      	mov	r0, r2
 800242e:	4798      	blx	r3
        break;
 8002430:	e009      	b.n	8002446 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4293      	cmp	r3, r2
 8002444:	dbc4      	blt.n	80023d0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002446:	7afb      	ldrb	r3, [r7, #11]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800946c 	.word	0x0800946c

08002454 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002472:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800247a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800247c:	8afb      	ldrh	r3, [r7, #22]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <cliParseArgs+0x8c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f107 0208 	add.w	r2, r7, #8
 8002490:	4619      	mov	r1, r3
 8002492:	6938      	ldr	r0, [r7, #16]
 8002494:	f005 fb2a 	bl	8007aec <strtok_r>
 8002498:	61b8      	str	r0, [r7, #24]
 800249a:	e010      	b.n	80024be <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800249c:	8afb      	ldrh	r3, [r7, #22]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	82fa      	strh	r2, [r7, #22]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <cliParseArgs+0x8c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f107 0208 	add.w	r2, r7, #8
 80024b4:	4619      	mov	r1, r3
 80024b6:	2000      	movs	r0, #0
 80024b8:	f005 fb18 	bl	8007aec <strtok_r>
 80024bc:	61b8      	str	r0, [r7, #24]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1eb      	bne.n	800249c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8afa      	ldrh	r2, [r7, #22]
 80024c8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80024cc:	8afb      	ldrh	r3, [r7, #22]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <cliParseArgs+0x82>
  {
    ret = true;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000020 	.word	0x20000020

080024e4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80024e4:	b40f      	push	{r0, r1, r2, r3}
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <cliPrintf+0x44>)
 80024f4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f103 0011 	add.w	r0, r3, #17
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002504:	f005 fbb2 	bl	8007c6c <vsniprintf>
 8002508:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	7818      	ldrb	r0, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3311      	adds	r3, #17
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4619      	mov	r1, r3
 8002516:	f001 fca7 	bl	8003e68 <uartWrite>
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002524:	b004      	add	sp, #16
 8002526:	4770      	bx	lr
 8002528:	2000034c 	.word	0x2000034c

0800252c <cliToUpper>:

void cliToUpper(char *str)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	81fb      	strh	r3, [r7, #14]
 8002538:	e018      	b.n	800256c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d014      	beq.n	8002574 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800254a:	7b7b      	ldrb	r3, [r7, #13]
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d905      	bls.n	800255c <cliToUpper+0x30>
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	2b7a      	cmp	r3, #122	; 0x7a
 8002554:	d802      	bhi.n	800255c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	3b20      	subs	r3, #32
 800255a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800255c:	89fb      	ldrh	r3, [r7, #14]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	7b7a      	ldrb	r2, [r7, #13]
 8002564:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	3301      	adds	r3, #1
 800256a:	81fb      	strh	r3, [r7, #14]
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	d9e3      	bls.n	800253a <cliToUpper+0xe>
 8002572:	e000      	b.n	8002576 <cliToUpper+0x4a>
      break;
 8002574:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	2b10      	cmp	r3, #16
 800257a:	d105      	bne.n	8002588 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	3b01      	subs	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
  }
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <cliArgsGetData+0x4c>)
 80025a4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d301      	bcc.n	80025b8 <cliArgsGetData+0x24>
  {
    return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e00e      	b.n	80025d6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f005 fb0c 	bl	8007be8 <strtoul>
 80025d0:	4603      	mov	r3, r0
 80025d2:	60fb      	str	r3, [r7, #12]

  return ret;
 80025d4:	68fb      	ldr	r3, [r7, #12]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000034c 	.word	0x2000034c

080025e4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <cliArgsGetFloat+0x54>)
 80025f6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002602:	429a      	cmp	r2, r3
 8002604:	d302      	bcc.n	800260c <cliArgsGetFloat+0x28>
  {
    return 0;
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e00d      	b.n	8002628 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f005 f9e7 	bl	80079f0 <strtof>
 8002622:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	ee07 3a90 	vmov	s15, r3
}
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000034c 	.word	0x2000034c

0800263c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <cliArgsGetStr+0x44>)
 800264c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	b29a      	uxth	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002658:	429a      	cmp	r2, r3
 800265a:	d301      	bcc.n	8002660 <cliArgsGetStr+0x24>
  {
    return 0;
 800265c:	2300      	movs	r3, #0
 800265e:	e008      	b.n	8002672 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000034c 	.word	0x2000034c

08002684 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <cliArgsIsStr+0x50>)
 8002696:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	b29a      	uxth	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d301      	bcc.n	80026aa <cliArgsIsStr+0x26>
  {
    return 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e010      	b.n	80026cc <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f7fd fd90 	bl	80001e0 <strcmp>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <cliArgsIsStr+0x46>
  {
    ret = true;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000034c 	.word	0x2000034c

080026d8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <cliKeepLoop+0x28>)
 80026e0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 fb52 	bl	8003d90 <uartAvailable>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <cliKeepLoop+0x1e>
  {
    return true;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80026f6:	2300      	movs	r3, #0
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	2000034c 	.word	0x2000034c

08002704 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <cliAdd+0x90>)
 8002714:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d901      	bls.n	8002724 <cliAdd+0x20>
  {
    return false;
 8002720:	2300      	movs	r3, #0
 8002722:	e032      	b.n	800278a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800272a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800272c:	89fa      	ldrh	r2, [r7, #14]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fb39 	bl	8006dba <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002748:	89fa      	ldrh	r2, [r7, #14]
 800274a:	6939      	ldr	r1, [r7, #16]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800275e:	89fa      	ldrh	r2, [r7, #14]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	3304      	adds	r3, #4
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff feda 	bl	800252c <cliToUpper>

  p_cli->cmd_count++;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800277e:	3301      	adds	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000034c 	.word	0x2000034c

08002798 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <cliShowList+0x60>)
 80027a2:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80027a4:	4815      	ldr	r0, [pc, #84]	; (80027fc <cliShowList+0x64>)
 80027a6:	f7ff fe9d 	bl	80024e4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80027aa:	4815      	ldr	r0, [pc, #84]	; (8002800 <cliShowList+0x68>)
 80027ac:	f7ff fe9a 	bl	80024e4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e012      	b.n	80027dc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe8a 	bl	80024e4 <cliPrintf>
    cliPrintf("\r\n");
 80027d0:	480a      	ldr	r0, [pc, #40]	; (80027fc <cliShowList+0x64>)
 80027d2:	f7ff fe87 	bl	80024e4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4293      	cmp	r3, r2
 80027e8:	dbe5      	blt.n	80027b6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80027ea:	4806      	ldr	r0, [pc, #24]	; (8002804 <cliShowList+0x6c>)
 80027ec:	f7ff fe7a 	bl	80024e4 <cliPrintf>
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	2000034c 	.word	0x2000034c
 80027fc:	0800946c 	.word	0x0800946c
 8002800:	08009470 	.word	0x08009470
 8002804:	08009490 	.word	0x08009490

08002808 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002810:	2310      	movs	r3, #16
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002828:	4840      	ldr	r0, [pc, #256]	; (800292c <cliMemoryDump+0x124>)
 800282a:	f7ff fe5b 	bl	80024e4 <cliPrintf>
 800282e:	e07a      	b.n	8002926 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b01      	cmp	r3, #1
 8002834:	dd09      	ble.n	800284a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	3304      	adds	r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f005 f9d1 	bl	8007be8 <strtoul>
 8002846:	4603      	mov	r3, r0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f005 f9c8 	bl	8007be8 <strtoul>
 8002858:	4603      	mov	r3, r0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002860:	4833      	ldr	r0, [pc, #204]	; (8002930 <cliMemoryDump+0x128>)
 8002862:	f7ff fe3f 	bl	80024e4 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286a:	e058      	b.n	800291e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	482e      	ldr	r0, [pc, #184]	; (8002934 <cliMemoryDump+0x12c>)
 800287c:	f7ff fe32 	bl	80024e4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	482c      	ldr	r0, [pc, #176]	; (8002938 <cliMemoryDump+0x130>)
 8002888:	f7ff fe2c 	bl	80024e4 <cliPrintf>

    if ((idx%4) == 3)
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	425a      	negs	r2, r3
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	f002 0203 	and.w	r2, r2, #3
 8002898:	bf58      	it	pl
 800289a:	4253      	negpl	r3, r2
 800289c:	2b03      	cmp	r3, #3
 800289e:	d138      	bne.n	8002912 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80028a0:	4826      	ldr	r0, [pc, #152]	; (800293c <cliMemoryDump+0x134>)
 80028a2:	f7ff fe1f 	bl	80024e4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	e02c      	b.n	8002906 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e01d      	b.n	80028f4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80028b8:	f107 020c 	add.w	r2, r7, #12
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b1f      	cmp	r3, #31
 80028c4:	d910      	bls.n	80028e8 <cliMemoryDump+0xe0>
 80028c6:	f107 020c 	add.w	r2, r7, #12
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b7e      	cmp	r3, #126	; 0x7e
 80028d2:	d809      	bhi.n	80028e8 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80028d4:	f107 020c 	add.w	r2, r7, #12
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4817      	ldr	r0, [pc, #92]	; (8002940 <cliMemoryDump+0x138>)
 80028e2:	f7ff fdff 	bl	80024e4 <cliPrintf>
 80028e6:	e002      	b.n	80028ee <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80028e8:	4816      	ldr	r0, [pc, #88]	; (8002944 <cliMemoryDump+0x13c>)
 80028ea:	f7ff fdfb 	bl	80024e4 <cliPrintf>
        for (i=0;i<4;i++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	ddde      	ble.n	80028b8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	3304      	adds	r3, #4
 80028fe:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	3301      	adds	r3, #1
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	2b03      	cmp	r3, #3
 800290a:	ddcf      	ble.n	80028ac <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800290c:	480e      	ldr	r0, [pc, #56]	; (8002948 <cliMemoryDump+0x140>)
 800290e:	f7ff fde9 	bl	80024e4 <cliPrintf>
    }
    addr++;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	3304      	adds	r3, #4
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	3301      	adds	r3, #1
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	429a      	cmp	r2, r3
 8002924:	dba2      	blt.n	800286c <cliMemoryDump+0x64>
  }
}
 8002926:	3730      	adds	r7, #48	; 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	080094b0 	.word	0x080094b0
 8002930:	080094c4 	.word	0x080094c4
 8002934:	080094cc 	.word	0x080094cc
 8002938:	080094d8 	.word	0x080094d8
 800293c:	080094e0 	.word	0x080094e0
 8002940:	080094e4 	.word	0x080094e4
 8002944:	080094e8 	.word	0x080094e8
 8002948:	080094ec 	.word	0x080094ec

0800294c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8002952:	2305      	movs	r3, #5
 8002954:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8002956:	2201      	movs	r2, #1
 8002958:	4937      	ldr	r1, [pc, #220]	; (8002a38 <Ds18b20_Init+0xec>)
 800295a:	4838      	ldr	r0, [pc, #224]	; (8002a3c <Ds18b20_Init+0xf0>)
 800295c:	f000 fe81 	bl	8003662 <OneWire_Init>
		TempSensorCount = 0;
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <Ds18b20_Init+0xf4>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8002966:	e002      	b.n	800296e <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002968:	2064      	movs	r0, #100	; 0x64
 800296a:	f001 fc5b 	bl	8004224 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800296e:	f001 fc4d 	bl	800420c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002978:	429a      	cmp	r2, r3
 800297a:	d9f5      	bls.n	8002968 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800297c:	482f      	ldr	r0, [pc, #188]	; (8002a3c <Ds18b20_Init+0xf0>)
 800297e:	f000 ff5d 	bl	800383c <OneWire_First>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <Ds18b20_Init+0xf8>)
 8002988:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800298a:	e019      	b.n	80029c0 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 800298c:	2064      	movs	r0, #100	; 0x64
 800298e:	f001 fc49 	bl	8004224 <HAL_Delay>
			TempSensorCount++;
 8002992:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <Ds18b20_Init+0xf4>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <Ds18b20_Init+0xf4>)
 800299c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <Ds18b20_Init+0xf4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <Ds18b20_Init+0xfc>)
 80029a8:	4413      	add	r3, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	4823      	ldr	r0, [pc, #140]	; (8002a3c <Ds18b20_Init+0xf0>)
 80029ae:	f001 f859 	bl	8003a64 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80029b2:	4822      	ldr	r0, [pc, #136]	; (8002a3c <Ds18b20_Init+0xf0>)
 80029b4:	f000 ff52 	bl	800385c <OneWire_Next>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <Ds18b20_Init+0xf8>)
 80029be:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <Ds18b20_Init+0xf8>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e1      	bne.n	800298c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <Ds18b20_Init+0xf4>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1bc      	bne.n	8002956 <Ds18b20_Init+0xa>
 80029dc:	e000      	b.n	80029e0 <Ds18b20_Init+0x94>
			break;
 80029de:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <Ds18b20_Init+0x9e>
		return false;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e022      	b.n	8002a30 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	71bb      	strb	r3, [r7, #6]
 80029ee:	e019      	b.n	8002a24 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80029f0:	2032      	movs	r0, #50	; 0x32
 80029f2:	f001 fc17 	bl	8004224 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80029f6:	79bb      	ldrb	r3, [r7, #6]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <Ds18b20_Init+0xfc>)
 80029fc:	4413      	add	r3, r2
 80029fe:	220c      	movs	r2, #12
 8002a00:	4619      	mov	r1, r3
 8002a02:	480e      	ldr	r0, [pc, #56]	; (8002a3c <Ds18b20_Init+0xf0>)
 8002a04:	f000 f9c4 	bl	8002d90 <DS18B20_SetResolution>
		HAL_Delay(50);
 8002a08:	2032      	movs	r0, #50	; 0x32
 8002a0a:	f001 fc0b 	bl	8004224 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <Ds18b20_Init+0xfc>)
 8002a14:	4413      	add	r3, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	4808      	ldr	r0, [pc, #32]	; (8002a3c <Ds18b20_Init+0xf0>)
 8002a1a:	f000 fa52 	bl	8002ec2 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002a1e:	79bb      	ldrb	r3, [r7, #6]
 8002a20:	3301      	adds	r3, #1
 8002a22:	71bb      	strb	r3, [r7, #6]
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <Ds18b20_Init+0xf4>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	79ba      	ldrb	r2, [r7, #6]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3e0      	bcc.n	80029f0 <Ds18b20_Init+0xa4>
	}
	return true;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	200007a4 	.word	0x200007a4
 8002a40:	20000224 	.word	0x20000224
 8002a44:	20000790 	.word	0x20000790
 8002a48:	20000794 	.word	0x20000794

08002a4c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <Ds18b20_ManualConvert+0x104>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <Ds18b20_ManualConvert+0x14>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d013      	beq.n	8002a86 <Ds18b20_ManualConvert+0x3a>
 8002a5e:	e072      	b.n	8002b46 <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002a60:	4b3c      	ldr	r3, [pc, #240]	; (8002b54 <Ds18b20_ManualConvert+0x108>)
 8002a62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a66:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8002a68:	483b      	ldr	r0, [pc, #236]	; (8002b58 <Ds18b20_ManualConvert+0x10c>)
 8002a6a:	f000 f87d 	bl	8002b68 <DS18B20_StartAll>
	  		  pre_time = millis();
 8002a6e:	f7fe fb3a 	bl	80010e6 <millis>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <Ds18b20_ManualConvert+0x110>)
 8002a76:	601a      	str	r2, [r3, #0]
	  		  state++;
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <Ds18b20_ManualConvert+0x104>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <Ds18b20_ManualConvert+0x104>)
 8002a82:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002a84:	e05f      	b.n	8002b46 <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8002a86:	f7fe fb2e 	bl	80010e6 <millis>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <Ds18b20_ManualConvert+0x110>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b09      	cmp	r3, #9
 8002a94:	d956      	bls.n	8002b44 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8002a96:	4830      	ldr	r0, [pc, #192]	; (8002b58 <Ds18b20_ManualConvert+0x10c>)
 8002a98:	f000 fa6e 	bl	8002f78 <DS18B20_AllDone>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d112      	bne.n	8002ac8 <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 8002aa2:	f7fe fb20 	bl	80010e6 <millis>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <Ds18b20_ManualConvert+0x110>)
 8002aaa:	601a      	str	r2, [r3, #0]
					Ds18b20Timeout-=1;
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <Ds18b20_ManualConvert+0x108>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <Ds18b20_ManualConvert+0x108>)
 8002ab6:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <Ds18b20_ManualConvert+0x108>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d141      	bne.n	8002b44 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <Ds18b20_ManualConvert+0x104>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
						break;
 8002ac6:	e03e      	b.n	8002b46 <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <Ds18b20_ManualConvert+0x108>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d024      	beq.n	8002b1a <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	e01b      	b.n	8002b0e <Ds18b20_ManualConvert+0xc2>
	  					{
	  						//HAL_Delay(100);
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <Ds18b20_ManualConvert+0x114>)
 8002adc:	1899      	adds	r1, r3, r2
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <Ds18b20_ManualConvert+0x114>)
 8002ae6:	4413      	add	r3, r2
 8002ae8:	79fc      	ldrb	r4, [r7, #7]
 8002aea:	461a      	mov	r2, r3
 8002aec:	481a      	ldr	r0, [pc, #104]	; (8002b58 <Ds18b20_ManualConvert+0x10c>)
 8002aee:	f000 f84f 	bl	8002b90 <DS18B20_Read>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4619      	mov	r1, r3
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <Ds18b20_ManualConvert+0x114>)
 8002af8:	0123      	lsls	r3, r4, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	330c      	adds	r3, #12
 8002afe:	460a      	mov	r2, r1
 8002b00:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <Ds18b20_ManualConvert+0x104>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	71fb      	strb	r3, [r7, #7]
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <Ds18b20_ManualConvert+0x118>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	79fa      	ldrb	r2, [r7, #7]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3de      	bcc.n	8002ad6 <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8002b18:	e014      	b.n	8002b44 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	71bb      	strb	r3, [r7, #6]
 8002b1e:	e00c      	b.n	8002b3a <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <Ds18b20_ManualConvert+0x114>)
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4413      	add	r3, r2
 8002b28:	330c      	adds	r3, #12
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <Ds18b20_ManualConvert+0x104>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	3301      	adds	r3, #1
 8002b38:	71bb      	strb	r3, [r7, #6]
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <Ds18b20_ManualConvert+0x118>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	79ba      	ldrb	r2, [r7, #6]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3ed      	bcc.n	8002b20 <Ds18b20_ManualConvert+0xd4>
			  break;
 8002b44:	bf00      	nop
	  }
	#endif
}
 8002b46:	bf00      	nop
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	20000228 	.word	0x20000228
 8002b54:	20000226 	.word	0x20000226
 8002b58:	200007a4 	.word	0x200007a4
 8002b5c:	2000022c 	.word	0x2000022c
 8002b60:	20000794 	.word	0x20000794
 8002b64:	20000224 	.word	0x20000224

08002b68 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fd9f 	bl	80036b4 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002b76:	21cc      	movs	r1, #204	; 0xcc
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fe21 	bl	80037c0 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002b7e:	2144      	movs	r1, #68	; 0x44
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fe1d 	bl	80037c0 <OneWire_WriteByte>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	f000 f97a 	bl	8002ea0 <DS18B20_Is>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <DS18B20_Read+0x26>
		return false;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e0e1      	b.n	8002d7a <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fdd8 	bl	800376c <OneWire_ReadBit>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e0d9      	b.n	8002d7a <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fd74 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 ff2a 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002bd4:	21be      	movs	r1, #190	; 0xbe
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fdf2 	bl	80037c0 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e00d      	b.n	8002bfe <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002be2:	7ffc      	ldrb	r4, [r7, #31]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fe08 	bl	80037fa <OneWire_ReadByte>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bf2:	4423      	add	r3, r4
 8002bf4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	7ffb      	ldrb	r3, [r7, #31]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d9ee      	bls.n	8002be2 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2108      	movs	r1, #8
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 ff46 	bl	8003a9c <OneWire_CRC8>
 8002c10:	4603      	mov	r3, r0
 8002c12:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002c14:	7f3b      	ldrb	r3, [r7, #28]
 8002c16:	7fba      	ldrb	r2, [r7, #30]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e0ac      	b.n	8002d7a <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002c20:	7d3b      	ldrb	r3, [r7, #20]
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	7d7b      	ldrb	r3, [r7, #21]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b21b      	sxth	r3, r3
 8002c2e:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fd3f 	bl	80036b4 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002c36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da05      	bge.n	8002c4a <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002c3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c40:	425b      	negs	r3, r3
 8002c42:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002c4a:	7e3b      	ldrb	r3, [r7, #24]
 8002c4c:	115b      	asrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3309      	adds	r3, #9
 8002c58:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c72:	b25a      	sxtb	r2, r3
 8002c74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002c7e:	7f7b      	ldrb	r3, [r7, #29]
 8002c80:	3b09      	subs	r3, #9
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d858      	bhi.n	8002d38 <DS18B20_Read+0x1a8>
 8002c86:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <DS18B20_Read+0xfc>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002ced 	.word	0x08002ced
 8002c98:	08002d15 	.word	0x08002d15
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002c9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cae:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002cb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbe:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002cc2:	e03e      	b.n	8002d42 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002cda:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cde:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002cea:	e02a      	b.n	8002d42 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfe:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d06:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0e:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d12:	e016      	b.n	8002d42 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d22:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002d26:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d2a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002d84 <DS18B20_Read+0x1f4>
 8002d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d32:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d36:	e004      	b.n	8002d42 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <DS18B20_Read+0x1f8>)
 8002d3a:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002d42:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002d5a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002d62:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002d8c <DS18B20_Read+0x1fc>
 8002d66:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6e:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	372c      	adds	r7, #44	; 0x2c
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}
 8002d82:	bf00      	nop
 8002d84:	3d800000 	.word	0x3d800000
 8002d88:	437f0000 	.word	0x437f0000
 8002d8c:	00000000 	.word	0x00000000

08002d90 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002d9e:	68b8      	ldr	r0, [r7, #8]
 8002da0:	f000 f87e 	bl	8002ea0 <DS18B20_Is>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <DS18B20_SetResolution+0x1e>
		return 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e074      	b.n	8002e98 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fc80 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fe36 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002dbc:	21be      	movs	r1, #190	; 0xbe
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fcfe 	bl	80037c0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fd18 	bl	80037fa <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fd15 	bl	80037fa <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fd12 	bl	80037fa <OneWire_ReadByte>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fd0d 	bl	80037fa <OneWire_ReadByte>
 8002de0:	4603      	mov	r3, r0
 8002de2:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fd08 	bl	80037fa <OneWire_ReadByte>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d108      	bne.n	8002e06 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfa:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	f023 0320 	bic.w	r3, r3, #32
 8002e02:	75fb      	strb	r3, [r7, #23]
 8002e04:	e022      	b.n	8002e4c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b0a      	cmp	r3, #10
 8002e0a:	d108      	bne.n	8002e1e <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e12:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	75fb      	strb	r3, [r7, #23]
 8002e1c:	e016      	b.n	8002e4c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b0b      	cmp	r3, #11
 8002e22:	d108      	bne.n	8002e36 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	f023 0320 	bic.w	r3, r3, #32
 8002e32:	75fb      	strb	r3, [r7, #23]
 8002e34:	e00a      	b.n	8002e4c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d107      	bne.n	8002e4c <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e42:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	f043 0320 	orr.w	r3, r3, #32
 8002e4a:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fc31 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fde7 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002e5a:	214e      	movs	r1, #78	; 0x4e
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fcaf 	bl	80037c0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002e62:	7dbb      	ldrb	r3, [r7, #22]
 8002e64:	4619      	mov	r1, r3
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fcaa 	bl	80037c0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002e6c:	7d7b      	ldrb	r3, [r7, #21]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fca5 	bl	80037c0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fca0 	bl	80037c0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fc17 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fdcd 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002e8e:	2148      	movs	r1, #72	; 0x48
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fc95 	bl	80037c0 <OneWire_WriteByte>

	return 1;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b28      	cmp	r3, #40	; 0x28
 8002eae:	d101      	bne.n	8002eb4 <DS18B20_Is+0x14>
		return 1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <DS18B20_Is+0x16>

	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f7ff ffe7 	bl	8002ea0 <DS18B20_Is>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e049      	b.n	8002f70 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fbe9 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fd9f 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002eea:	21be      	movs	r1, #190	; 0xbe
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fc67 	bl	80037c0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fc81 	bl	80037fa <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fc7e 	bl	80037fa <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fc7b 	bl	80037fa <OneWire_ReadByte>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fc76 	bl	80037fa <OneWire_ReadByte>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fc71 	bl	80037fa <OneWire_ReadByte>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002f1c:	237d      	movs	r3, #125	; 0x7d
 8002f1e:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002f20:	23c9      	movs	r3, #201	; 0xc9
 8002f22:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fbc5 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fd7b 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002f32:	214e      	movs	r1, #78	; 0x4e
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fc43 	bl	80037c0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fc3e 	bl	80037c0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fc39 	bl	80037c0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002f4e:	7b7b      	ldrb	r3, [r7, #13]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fc34 	bl	80037c0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fbab 	bl	80036b4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f5e:	6839      	ldr	r1, [r7, #0]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fd61 	bl	8003a28 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f66:	2148      	movs	r1, #72	; 0x48
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fc29 	bl	80037c0 <OneWire_WriteByte>

	return 1;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fbf3 	bl	800376c <OneWire_ReadBit>
 8002f86:	4603      	mov	r3, r0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <gpioInit>:
#endif



bool gpioInit(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
  bool ret = true;
 8002f96:	2301      	movs	r3, #1
 8002f98:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <gpioInit+0xa0>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a23      	ldr	r2, [pc, #140]	; (8003030 <gpioInit+0xa0>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <gpioInit+0xa0>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <gpioInit+0xa0>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <gpioInit+0xa0>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <gpioInit+0xa0>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e01e      	b.n	8003016 <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	b2d8      	uxtb	r0, r3
 8002fdc:	4915      	ldr	r1, [pc, #84]	; (8003034 <gpioInit+0xa4>)
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3308      	adds	r3, #8
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f000 f826 	bl	8003040 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	b2d8      	uxtb	r0, r3
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <gpioInit+0xa4>)
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	330b      	adds	r3, #11
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	f000 f880 	bl	8003110 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b0e      	cmp	r3, #14
 800301a:	dddd      	ble.n	8002fd8 <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 800301c:	4906      	ldr	r1, [pc, #24]	; (8003038 <gpioInit+0xa8>)
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <gpioInit+0xac>)
 8003020:	f7ff fb70 	bl	8002704 <cliAdd>
#endif

  return ret;
 8003024:	7afb      	ldrb	r3, [r7, #11]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	080095cc 	.word	0x080095cc
 8003038:	08003229 	.word	0x08003229
 800303c:	080094fc 	.word	0x080094fc

08003040 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	460a      	mov	r2, r1
 800304a:	71fb      	strb	r3, [r7, #7]
 800304c:	4613      	mov	r3, r2
 800304e:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8003050:	2301      	movs	r3, #1
 8003052:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b0e      	cmp	r3, #14
 8003068:	d901      	bls.n	800306e <gpioPinMode+0x2e>
  {
    return false;
 800306a:	2300      	movs	r3, #0
 800306c:	e049      	b.n	8003102 <gpioPinMode+0xc2>
  }

  switch(mode)
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d82d      	bhi.n	80030d0 <gpioPinMode+0x90>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <gpioPinMode+0x3c>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	08003095 	.word	0x08003095
 8003080:	0800309f 	.word	0x0800309f
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030b3 	.word	0x080030b3
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030c7 	.word	0x080030c7
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
      break;
 800309c:	e018      	b.n	80030d0 <gpioPinMode+0x90>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a2:	2301      	movs	r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
      break;
 80030a6:	e013      	b.n	80030d0 <gpioPinMode+0x90>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030ac:	2302      	movs	r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
      break;
 80030b0:	e00e      	b.n	80030d0 <gpioPinMode+0x90>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	2301      	movs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
      break;
 80030ba:	e009      	b.n	80030d0 <gpioPinMode+0x90>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
      break;
 80030c4:	e004      	b.n	80030d0 <gpioPinMode+0x90>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030ca:	2302      	movs	r3, #2
 80030cc:	613b      	str	r3, [r7, #16]
      break;
 80030ce:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80030d0:	79fa      	ldrb	r2, [r7, #7]
 80030d2:	490e      	ldr	r1, [pc, #56]	; (800310c <gpioPinMode+0xcc>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3304      	adds	r3, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	4909      	ldr	r1, [pc, #36]	; (800310c <gpioPinMode+0xcc>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f107 0208 	add.w	r2, r7, #8
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fde4 	bl	8004cc8 <HAL_GPIO_Init>

  return ret;
 8003100:	7ffb      	ldrb	r3, [r7, #31]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	080095cc 	.word	0x080095cc

08003110 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	460a      	mov	r2, r1
 800311a:	71fb      	strb	r3, [r7, #7]
 800311c:	4613      	mov	r3, r2
 800311e:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	2b0e      	cmp	r3, #14
 8003124:	d842      	bhi.n	80031ac <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 8003126:	79bb      	ldrb	r3, [r7, #6]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01f      	beq.n	800316c <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 800312c:	79fa      	ldrb	r2, [r7, #7]
 800312e:	4921      	ldr	r1, [pc, #132]	; (80031b4 <gpioPinWrite+0xa4>)
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	79fa      	ldrb	r2, [r7, #7]
 800313e:	491d      	ldr	r1, [pc, #116]	; (80031b4 <gpioPinWrite+0xa4>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3304      	adds	r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29c      	uxth	r4, r3
 8003150:	79fa      	ldrb	r2, [r7, #7]
 8003152:	4918      	ldr	r1, [pc, #96]	; (80031b4 <gpioPinWrite+0xa4>)
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3309      	adds	r3, #9
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4621      	mov	r1, r4
 8003166:	f002 f82b 	bl	80051c0 <HAL_GPIO_WritePin>
 800316a:	e020      	b.n	80031ae <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800316c:	79fa      	ldrb	r2, [r7, #7]
 800316e:	4911      	ldr	r1, [pc, #68]	; (80031b4 <gpioPinWrite+0xa4>)
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	79fa      	ldrb	r2, [r7, #7]
 800317e:	490d      	ldr	r1, [pc, #52]	; (80031b4 <gpioPinWrite+0xa4>)
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3304      	adds	r3, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29c      	uxth	r4, r3
 8003190:	79fa      	ldrb	r2, [r7, #7]
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <gpioPinWrite+0xa4>)
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	330a      	adds	r3, #10
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4621      	mov	r1, r4
 80031a6:	f002 f80b 	bl	80051c0 <HAL_GPIO_WritePin>
 80031aa:	e000      	b.n	80031ae <gpioPinWrite+0x9e>
    return;
 80031ac:	bf00      	nop
  }
}
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	080095cc 	.word	0x080095cc

080031b8 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b0e      	cmp	r3, #14
 80031ca:	d901      	bls.n	80031d0 <gpioPinRead+0x18>
  {
    return false;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e024      	b.n	800321a <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80031d0:	79fa      	ldrb	r2, [r7, #7]
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <gpioPinRead+0x6c>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	4910      	ldr	r1, [pc, #64]	; (8003224 <gpioPinRead+0x6c>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	f001 ffcb 	bl	8005190 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4618      	mov	r0, r3
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	4908      	ldr	r1, [pc, #32]	; (8003224 <gpioPinRead+0x6c>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3309      	adds	r3, #9
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4298      	cmp	r0, r3
 8003212:	d101      	bne.n	8003218 <gpioPinRead+0x60>
  {
    ret = true;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	080095cc 	.word	0x080095cc

08003228 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d128      	bne.n	800328e <cliGpio+0x66>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4947      	ldr	r1, [pc, #284]	; (8003360 <cliGpio+0x138>)
 8003242:	2000      	movs	r0, #0
 8003244:	4798      	blx	r3
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <cliGpio+0x66>
  {
    while(cliKeepLoop())
 800324c:	e018      	b.n	8003280 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e00c      	b.n	800326e <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffad 	bl	80031b8 <gpioPinRead>
 800325e:	4603      	mov	r3, r0
 8003260:	4619      	mov	r1, r3
 8003262:	4840      	ldr	r0, [pc, #256]	; (8003364 <cliGpio+0x13c>)
 8003264:	f7ff f93e 	bl	80024e4 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3301      	adds	r3, #1
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b0e      	cmp	r3, #14
 8003272:	ddef      	ble.n	8003254 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8003274:	483c      	ldr	r0, [pc, #240]	; (8003368 <cliGpio+0x140>)
 8003276:	f7ff f935 	bl	80024e4 <cliPrintf>
      delay(100);
 800327a:	2064      	movs	r0, #100	; 0x64
 800327c:	f7fd ff28 	bl	80010d0 <delay>
    while(cliKeepLoop())
 8003280:	f7ff fa2a 	bl	80026d8 <cliKeepLoop>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e1      	bne.n	800324e <cliGpio+0x26>
    }
    ret = true;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d123      	bne.n	80032de <cliGpio+0xb6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4934      	ldr	r1, [pc, #208]	; (800336c <cliGpio+0x144>)
 800329c:	2000      	movs	r0, #0
 800329e:	4798      	blx	r3
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01b      	beq.n	80032de <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2001      	movs	r0, #1
 80032ac:	4798      	blx	r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80032b2:	e00d      	b.n	80032d0 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80032b4:	7bfc      	ldrb	r4, [r7, #15]
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff7d 	bl	80031b8 <gpioPinRead>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	4621      	mov	r1, r4
 80032c4:	482a      	ldr	r0, [pc, #168]	; (8003370 <cliGpio+0x148>)
 80032c6:	f7ff f90d 	bl	80024e4 <cliPrintf>
      delay(100);
 80032ca:	2064      	movs	r0, #100	; 0x64
 80032cc:	f7fd ff00 	bl	80010d0 <delay>
    while(cliKeepLoop())
 80032d0:	f7ff fa02 	bl	80026d8 <cliKeepLoop>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ec      	bne.n	80032b4 <cliGpio+0x8c>
    }

    ret = true;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d126      	bne.n	8003334 <cliGpio+0x10c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	4922      	ldr	r1, [pc, #136]	; (8003374 <cliGpio+0x14c>)
 80032ec:	2000      	movs	r0, #0
 80032ee:	4798      	blx	r3
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01e      	beq.n	8003334 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2001      	movs	r0, #1
 80032fc:	4798      	blx	r3
 80032fe:	4603      	mov	r3, r0
 8003300:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2002      	movs	r0, #2
 8003308:	4798      	blx	r3
 800330a:	4603      	mov	r3, r0
 800330c:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2da      	uxtb	r2, r3
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fef6 	bl	8003110 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	7b7a      	ldrb	r2, [r7, #13]
 8003328:	4619      	mov	r1, r3
 800332a:	4813      	ldr	r0, [pc, #76]	; (8003378 <cliGpio+0x150>)
 800332c:	f7ff f8da 	bl	80024e4 <cliPrintf>
    ret = true;
 8003330:	2301      	movs	r3, #1
 8003332:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8003340:	480e      	ldr	r0, [pc, #56]	; (800337c <cliGpio+0x154>)
 8003342:	f7ff f8cf 	bl	80024e4 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003346:	210e      	movs	r1, #14
 8003348:	480d      	ldr	r0, [pc, #52]	; (8003380 <cliGpio+0x158>)
 800334a:	f7ff f8cb 	bl	80024e4 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 800334e:	210e      	movs	r1, #14
 8003350:	480c      	ldr	r0, [pc, #48]	; (8003384 <cliGpio+0x15c>)
 8003352:	f7ff f8c7 	bl	80024e4 <cliPrintf>
  }
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}
 800335e:	bf00      	nop
 8003360:	08009504 	.word	0x08009504
 8003364:	0800950c 	.word	0x0800950c
 8003368:	08009510 	.word	0x08009510
 800336c:	08009514 	.word	0x08009514
 8003370:	0800951c 	.word	0x0800951c
 8003374:	08009530 	.word	0x08009530
 8003378:	08009538 	.word	0x08009538
 800337c:	0800954c 	.word	0x0800954c
 8003380:	08009558 	.word	0x08009558
 8003384:	0800956c 	.word	0x0800956c

08003388 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
  bool ret = true;
 800338e:	2301      	movs	r3, #1
 8003390:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <ledInit+0x8c>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <ledInit+0x8c>)
 80033aa:	f043 0304 	orr.w	r3, r3, #4
 80033ae:	6313      	str	r3, [r2, #48]	; 0x30
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <ledInit+0x8c>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033bc:	2301      	movs	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e016      	b.n	80033fc <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <ledInit+0x90>)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	889b      	ldrh	r3, [r3, #4]
 80033d8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <ledInit+0x90>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033e2:	1d3a      	adds	r2, r7, #4
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 fc6e 	bl	8004cc8 <HAL_GPIO_Init>

    ledOff(i);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f837 	bl	8003464 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dde5      	ble.n	80033ce <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8003402:	4906      	ldr	r1, [pc, #24]	; (800341c <ledInit+0x94>)
 8003404:	4806      	ldr	r0, [pc, #24]	; (8003420 <ledInit+0x98>)
 8003406:	f7ff f97d 	bl	8002704 <cliAdd>
#endif

  return ret;
 800340a:	7efb      	ldrb	r3, [r7, #27]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	20000024 	.word	0x20000024
 800341c:	080034dd 	.word	0x080034dd
 8003420:	08009588 	.word	0x08009588

08003424 <ledOn>:

void ledOn(uint8_t ch)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d111      	bne.n	8003458 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <ledOn+0x3c>)
 8003438:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	4a08      	ldr	r2, [pc, #32]	; (8003460 <ledOn+0x3c>)
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	8899      	ldrh	r1, [r3, #4]
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4a05      	ldr	r2, [pc, #20]	; (8003460 <ledOn+0x3c>)
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	799b      	ldrb	r3, [r3, #6]
 8003450:	461a      	mov	r2, r3
 8003452:	f001 feb5 	bl	80051c0 <HAL_GPIO_WritePin>
 8003456:	e000      	b.n	800345a <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8003458:	bf00      	nop
}
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000024 	.word	0x20000024

08003464 <ledOff>:

void ledOff(uint8_t ch)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d111      	bne.n	8003498 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <ledOff+0x3c>)
 8003478:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <ledOff+0x3c>)
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	8899      	ldrh	r1, [r3, #4]
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <ledOff+0x3c>)
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	79db      	ldrb	r3, [r3, #7]
 8003490:	461a      	mov	r2, r3
 8003492:	f001 fe95 	bl	80051c0 <HAL_GPIO_WritePin>
 8003496:	e000      	b.n	800349a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8003498:	bf00      	nop
}
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000024 	.word	0x20000024

080034a4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10c      	bne.n	80034ce <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <ledToggle+0x34>)
 80034b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <ledToggle+0x34>)
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	889b      	ldrh	r3, [r3, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f001 fe93 	bl	80051f2 <HAL_GPIO_TogglePin>
 80034cc:	e000      	b.n	80034d0 <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 80034ce:	bf00      	nop
}
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000024 	.word	0x20000024

080034dc <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d133      	bne.n	8003558 <cliLed+0x7c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	491f      	ldr	r1, [pc, #124]	; (8003574 <cliLed+0x98>)
 80034f6:	2000      	movs	r0, #0
 80034f8:	4798      	blx	r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02b      	beq.n	8003558 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2001      	movs	r0, #1
 8003506:	4798      	blx	r3
 8003508:	4603      	mov	r3, r0
 800350a:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2002      	movs	r0, #2
 8003512:	4798      	blx	r3
 8003514:	4603      	mov	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8003518:	7dbb      	ldrb	r3, [r7, #22]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <cliLed+0x48>
    {
      led_ch--;
 800351e:	7dbb      	ldrb	r3, [r7, #22]
 8003520:	3b01      	subs	r3, #1
 8003522:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8003524:	f7fd fddf 	bl	80010e6 <millis>
 8003528:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800352a:	e00e      	b.n	800354a <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 800352c:	f7fd fddb 	bl	80010e6 <millis>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d806      	bhi.n	800354a <cliLed+0x6e>
      {
        pre_time = millis();
 800353c:	f7fd fdd3 	bl	80010e6 <millis>
 8003540:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8003542:	7dbb      	ldrb	r3, [r7, #22]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ffad 	bl	80034a4 <ledToggle>
    while(cliKeepLoop())
 800354a:	f7ff f8c5 	bl	80026d8 <cliKeepLoop>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1eb      	bne.n	800352c <cliLed+0x50>
      }
    }

    ret = true;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	f083 0301 	eor.w	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8003564:	2101      	movs	r1, #1
 8003566:	4804      	ldr	r0, [pc, #16]	; (8003578 <cliLed+0x9c>)
 8003568:	f7fe ffbc 	bl	80024e4 <cliPrintf>
  }
}
 800356c:	bf00      	nop
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	0800958c 	.word	0x0800958c
 8003578:	08009594 	.word	0x08009594

0800357c <DWT_Delay_us>:
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <DWT_Delay_us+0x3c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800358a:	f002 fa55 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <DWT_Delay_us+0x40>)
 8003592:	fba3 2302 	umull	r2, r3, r3, r2
 8003596:	0c9b      	lsrs	r3, r3, #18
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80035a0:	bf00      	nop
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <DWT_Delay_us+0x3c>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d3f8      	bcc.n	80035a2 <DWT_Delay_us+0x26>
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e0001000 	.word	0xe0001000
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	889b      	ldrh	r3, [r3, #4]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	619a      	str	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	889a      	ldrh	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b088      	sub	sp, #32
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800360e:	2302      	movs	r3, #2
 8003610:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	889b      	ldrh	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f107 020c 	add.w	r2, r7, #12
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fb50 	bl	8004cc8 <HAL_GPIO_Init>
}
 8003628:	bf00      	nop
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8003638:	2311      	movs	r3, #17
 800363a:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003640:	2302      	movs	r3, #2
 8003642:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	889b      	ldrh	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f107 020c 	add.w	r2, r7, #12
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fb37 	bl	8004cc8 <HAL_GPIO_Init>

}
 800365a:	bf00      	nop
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff ffd7 	bl	8003630 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ffac 	bl	80035e0 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8003688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800368c:	f7ff ff76 	bl	800357c <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff95 	bl	80035c0 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8003696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800369a:	f7ff ff6f 	bl	800357c <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff ff9e 	bl	80035e0 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 80036a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036a8:	f7ff ff68 	bl	800357c <DWT_Delay_us>
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff7f 	bl	80035c0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffb4 	bl	8003630 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 80036c8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80036cc:	f7ff ff56 	bl	800357c <DWT_Delay_us>
	DWT_Delay_us(20);
 80036d0:	2014      	movs	r0, #20
 80036d2:	f7ff ff53 	bl	800357c <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ff91 	bl	80035fe <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 80036dc:	2046      	movs	r0, #70	; 0x46
 80036de:	f7ff ff4d 	bl	800357c <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	889b      	ldrh	r3, [r3, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f001 fd4f 	bl	8005190 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 80036f6:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80036fa:	f7ff ff3f 	bl	800357c <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ff50 	bl	80035c0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff85 	bl	8003630 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8003726:	200a      	movs	r0, #10
 8003728:	f7ff ff28 	bl	800357c <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff66 	bl	80035fe <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8003732:	2037      	movs	r0, #55	; 0x37
 8003734:	f7ff ff22 	bl	800357c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff60 	bl	80035fe <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 800373e:	e011      	b.n	8003764 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff3d 	bl	80035c0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff72 	bl	8003630 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 800374c:	2041      	movs	r0, #65	; 0x41
 800374e:	f7ff ff15 	bl	800357c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff53 	bl	80035fe <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8003758:	2005      	movs	r0, #5
 800375a:	f7ff ff0f 	bl	800357c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff4d 	bl	80035fe <ONEWIRE_INPUT>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff21 	bl	80035c0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ff56 	bl	8003630 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8003784:	2002      	movs	r0, #2
 8003786:	f7ff fef9 	bl	800357c <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff37 	bl	80035fe <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8003790:	200a      	movs	r0, #10
 8003792:	f7ff fef3 	bl	800357c <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	889b      	ldrh	r3, [r3, #4]
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f001 fcf5 	bl	8005190 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 80037b0:	2032      	movs	r0, #50	; 0x32
 80037b2:	f7ff fee3 	bl	800357c <DWT_Delay_us>

	/* Return bit value */
	return bit;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80037cc:	2308      	movs	r3, #8
 80037ce:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80037d0:	e00a      	b.n	80037e8 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff93 	bl	8003708 <OneWire_WriteBit>
		byte >>= 1;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	73fa      	strb	r2, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ef      	bne.n	80037d2 <OneWire_WriteByte+0x12>
	}
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8003802:	2308      	movs	r3, #8
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	2300      	movs	r3, #0
 8003808:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800380a:	e00d      	b.n	8003828 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ffaa 	bl	800376c <OneWire_ReadBit>
 8003818:	4603      	mov	r3, r0
 800381a:	01db      	lsls	r3, r3, #7
 800381c:	b25a      	sxtb	r2, r3
 800381e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003822:	4313      	orrs	r3, r2
 8003824:	b25b      	sxtb	r3, r3
 8003826:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	73fa      	strb	r2, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ec      	bne.n	800380c <OneWire_ReadByte+0x12>
	}

	return byte;
 8003832:	7bbb      	ldrb	r3, [r7, #14]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f816 	bl	8003876 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800384a:	21f0      	movs	r1, #240	; 0xf0
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f825 	bl	800389c <OneWire_Search>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003864:	21f0      	movs	r1, #240	; 0xf0
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f818 	bl	800389c <OneWire_Search>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	71da      	strb	r2, [r3, #7]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7a1b      	ldrb	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 809a 	bne.w	80039fa <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fef4 	bl	80036b4 <OneWire_Reset>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	71da      	strb	r2, [r3, #7]
			return 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e09b      	b.n	8003a20 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff67 	bl	80037c0 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff3a 	bl	800376c <OneWire_ReadBit>
 80038f8:	4603      	mov	r3, r0
 80038fa:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff35 	bl	800376c <OneWire_ReadBit>
 8003902:	4603      	mov	r3, r0
 8003904:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8003906:	7a7b      	ldrb	r3, [r7, #9]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <OneWire_Search+0x76>
 800390c:	7a3b      	ldrb	r3, [r7, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d064      	beq.n	80039dc <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8003912:	7a7a      	ldrb	r2, [r7, #9]
 8003914:	7a3b      	ldrb	r3, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	d002      	beq.n	8003920 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 800391a:	7a7b      	ldrb	r3, [r7, #9]
 800391c:	72bb      	strb	r3, [r7, #10]
 800391e:	e026      	b.n	800396e <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	799b      	ldrb	r3, [r3, #6]
 8003924:	7bfa      	ldrb	r2, [r7, #15]
 8003926:	429a      	cmp	r2, r3
 8003928:	d20d      	bcs.n	8003946 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800392a:	7b7b      	ldrb	r3, [r7, #13]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	7a5a      	ldrb	r2, [r3, #9]
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	4013      	ands	r3, r2
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	72bb      	strb	r3, [r7, #10]
 8003944:	e008      	b.n	8003958 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	799b      	ldrb	r3, [r3, #6]
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	429a      	cmp	r2, r3
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8003958:	7abb      	ldrb	r3, [r7, #10]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d802      	bhi.n	800396e <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7bba      	ldrb	r2, [r7, #14]
 800396c:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800396e:	7abb      	ldrb	r3, [r7, #10]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003974:	7b7b      	ldrb	r3, [r7, #13]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	7a59      	ldrb	r1, [r3, #9]
 800397c:	7b7b      	ldrb	r3, [r7, #13]
 800397e:	7afa      	ldrb	r2, [r7, #11]
 8003980:	430a      	orrs	r2, r1
 8003982:	b2d1      	uxtb	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	460a      	mov	r2, r1
 800398a:	725a      	strb	r2, [r3, #9]
 800398c:	e010      	b.n	80039b0 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800398e:	7b7b      	ldrb	r3, [r7, #13]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	7a5b      	ldrb	r3, [r3, #9]
 8003996:	b25a      	sxtb	r2, r3
 8003998:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800399c:	43db      	mvns	r3, r3
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	4013      	ands	r3, r2
 80039a2:	b25a      	sxtb	r2, r3
 80039a4:	7b7b      	ldrb	r3, [r7, #13]
 80039a6:	b2d1      	uxtb	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	460a      	mov	r2, r1
 80039ae:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80039b0:	7abb      	ldrb	r3, [r7, #10]
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fea7 	bl	8003708 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	3301      	adds	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80039cc:	7b7b      	ldrb	r3, [r7, #13]
 80039ce:	3301      	adds	r3, #1
 80039d0:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80039d6:	7b7b      	ldrb	r3, [r7, #13]
 80039d8:	2b07      	cmp	r3, #7
 80039da:	d98a      	bls.n	80038f2 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d90b      	bls.n	80039fa <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7bba      	ldrb	r2, [r7, #14]
 80039e6:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	799b      	ldrb	r3, [r3, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80039fa:	7b3b      	ldrb	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <OneWire_Search+0x16c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7a5b      	ldrb	r3, [r3, #9]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8003a1e:	7b3b      	ldrb	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003a32:	2155      	movs	r1, #85	; 0x55
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fec3 	bl	80037c0 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e00a      	b.n	8003a56 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff feb8 	bl	80037c0 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	3301      	adds	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b07      	cmp	r3, #7
 8003a5a:	d9f1      	bls.n	8003a40 <OneWire_SelectWithPointer+0x18>
	}
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e00a      	b.n	8003a8a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	6839      	ldr	r1, [r7, #0]
 8003a7a:	440b      	add	r3, r1
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	440a      	add	r2, r1
 8003a80:	7a52      	ldrb	r2, [r2, #9]
 8003a82:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	3301      	adds	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d9f1      	bls.n	8003a74 <OneWire_GetFullROM+0x10>
	}
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8003aac:	e022      	b.n	8003af4 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8003ab8:	2308      	movs	r3, #8
 8003aba:	737b      	strb	r3, [r7, #13]
 8003abc:	e017      	b.n	8003aee <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	4053      	eors	r3, r2
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003ad2:	7b3b      	ldrb	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8003ae8:	7b7b      	ldrb	r3, [r7, #13]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	737b      	strb	r3, [r7, #13]
 8003aee:	7b7b      	ldrb	r3, [r7, #13]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e4      	bne.n	8003abe <OneWire_CRC8+0x22>
	while (len--) {
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	70fa      	strb	r2, [r7, #3]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d7      	bne.n	8003aae <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_SPI_ErrorCallback>:
}



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_SPI_ErrorCallback+0x28>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8003b22:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <HAL_SPI_ErrorCallback+0x28>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	709a      	strb	r2, [r3, #2]
  }
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	200007b8 	.word	0x200007b8

08003b38 <uartInit>:
#endif



bool uartInit(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e007      	b.n	8003b54 <uartInit+0x1c>
  {
    is_open[i] = false;
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <uartInit+0x30>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3301      	adds	r3, #1
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	ddf4      	ble.n	8003b44 <uartInit+0xc>
  }


  return true;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20000230 	.word	0x20000230

08003b6c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <uartOpen+0x1c>
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d078      	beq.n	8003c78 <uartOpen+0x10c>
 8003b86:	e0ef      	b.n	8003d68 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8003b88:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <uartOpen+0x208>)
 8003b8a:	4a7b      	ldr	r2, [pc, #492]	; (8003d78 <uartOpen+0x20c>)
 8003b8c:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 8003b8e:	4a79      	ldr	r2, [pc, #484]	; (8003d74 <uartOpen+0x208>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8003b94:	4b77      	ldr	r3, [pc, #476]	; (8003d74 <uartOpen+0x208>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8003b9a:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <uartOpen+0x208>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8003ba0:	4b74      	ldr	r3, [pc, #464]	; (8003d74 <uartOpen+0x208>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8003ba6:	4b73      	ldr	r3, [pc, #460]	; (8003d74 <uartOpen+0x208>)
 8003ba8:	220c      	movs	r2, #12
 8003baa:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8003bac:	4b71      	ldr	r3, [pc, #452]	; (8003d74 <uartOpen+0x208>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8003bb2:	4b70      	ldr	r3, [pc, #448]	; (8003d74 <uartOpen+0x208>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8003bb8:	486e      	ldr	r0, [pc, #440]	; (8003d74 <uartOpen+0x208>)
 8003bba:	f002 f8d2 	bl	8005d62 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4a6e      	ldr	r2, [pc, #440]	; (8003d7c <uartOpen+0x210>)
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bca:	496d      	ldr	r1, [pc, #436]	; (8003d80 <uartOpen+0x214>)
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fbf6 	bl	80013be <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <uartOpen+0x218>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a6a      	ldr	r2, [pc, #424]	; (8003d84 <uartOpen+0x218>)
 8003bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <uartOpen+0x218>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	203a      	movs	r0, #58	; 0x3a
 8003bf4:	f000 fc35 	bl	8004462 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003bf8:	203a      	movs	r0, #58	; 0x3a
 8003bfa:	f000 fc4e 	bl	800449a <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	2046      	movs	r0, #70	; 0x46
 8003c04:	f000 fc2d 	bl	8004462 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003c08:	2046      	movs	r0, #70	; 0x46
 8003c0a:	f000 fc46 	bl	800449a <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c0e:	4859      	ldr	r0, [pc, #356]	; (8003d74 <uartOpen+0x208>)
 8003c10:	f002 f85a 	bl	8005cc8 <HAL_UART_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <uartOpen+0xb4>
        {
          ret = false;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8003c1e:	e0a3      	b.n	8003d68 <uartOpen+0x1fc>
          ret = true;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <uartOpen+0x21c>)
 8003c28:	2101      	movs	r1, #1
 8003c2a:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8003c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c30:	4953      	ldr	r1, [pc, #332]	; (8003d80 <uartOpen+0x214>)
 8003c32:	4850      	ldr	r0, [pc, #320]	; (8003d74 <uartOpen+0x208>)
 8003c34:	f002 f95a 	bl	8005eec <HAL_UART_Receive_DMA>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <uartOpen+0xd6>
            ret = false;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4a4d      	ldr	r2, [pc, #308]	; (8003d7c <uartOpen+0x210>)
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <uartOpen+0x220>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	1a8a      	subs	r2, r1, r2
 8003c58:	4948      	ldr	r1, [pc, #288]	; (8003d7c <uartOpen+0x210>)
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	440b      	add	r3, r1
 8003c5e:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8003c60:	79fa      	ldrb	r2, [r7, #7]
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4945      	ldr	r1, [pc, #276]	; (8003d7c <uartOpen+0x210>)
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	440a      	add	r2, r1
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	4943      	ldr	r1, [pc, #268]	; (8003d7c <uartOpen+0x210>)
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	440b      	add	r3, r1
 8003c72:	3304      	adds	r3, #4
 8003c74:	601a      	str	r2, [r3, #0]
      break;
 8003c76:	e077      	b.n	8003d68 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8003c78:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <uartOpen+0x208>)
 8003c7a:	4a3f      	ldr	r2, [pc, #252]	; (8003d78 <uartOpen+0x20c>)
 8003c7c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8003c7e:	4a3d      	ldr	r2, [pc, #244]	; (8003d74 <uartOpen+0x208>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <uartOpen+0x208>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <uartOpen+0x208>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8003c90:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <uartOpen+0x208>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8003c96:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <uartOpen+0x208>)
 8003c98:	220c      	movs	r2, #12
 8003c9a:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <uartOpen+0x208>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <uartOpen+0x208>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8003ca8:	4832      	ldr	r0, [pc, #200]	; (8003d74 <uartOpen+0x208>)
 8003caa:	f002 f85a 	bl	8005d62 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4a32      	ldr	r2, [pc, #200]	; (8003d7c <uartOpen+0x210>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cba:	4931      	ldr	r1, [pc, #196]	; (8003d80 <uartOpen+0x214>)
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd fb7e 	bl	80013be <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <uartOpen+0x218>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <uartOpen+0x218>)
 8003ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <uartOpen+0x218>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	203a      	movs	r0, #58	; 0x3a
 8003ce4:	f000 fbbd 	bl	8004462 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003ce8:	203a      	movs	r0, #58	; 0x3a
 8003cea:	f000 fbd6 	bl	800449a <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	2046      	movs	r0, #70	; 0x46
 8003cf4:	f000 fbb5 	bl	8004462 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003cf8:	2046      	movs	r0, #70	; 0x46
 8003cfa:	f000 fbce 	bl	800449a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cfe:	481d      	ldr	r0, [pc, #116]	; (8003d74 <uartOpen+0x208>)
 8003d00:	f001 ffe2 	bl	8005cc8 <HAL_UART_Init>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <uartOpen+0x1a4>
      {
        ret = false;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8003d0e:	e02a      	b.n	8003d66 <uartOpen+0x1fa>
        ret = true;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <uartOpen+0x21c>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	4917      	ldr	r1, [pc, #92]	; (8003d80 <uartOpen+0x214>)
 8003d22:	4814      	ldr	r0, [pc, #80]	; (8003d74 <uartOpen+0x208>)
 8003d24:	f002 f8e2 	bl	8005eec <HAL_UART_Receive_DMA>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <uartOpen+0x1c6>
          ret = false;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <uartOpen+0x210>)
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	4413      	add	r3, r2
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <uartOpen+0x220>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	1a8a      	subs	r2, r1, r2
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <uartOpen+0x210>)
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	440b      	add	r3, r1
 8003d4e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8003d50:	79fa      	ldrb	r2, [r7, #7]
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4909      	ldr	r1, [pc, #36]	; (8003d7c <uartOpen+0x210>)
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	440a      	add	r2, r1
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	4907      	ldr	r1, [pc, #28]	; (8003d7c <uartOpen+0x210>)
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	440b      	add	r3, r1
 8003d62:	3304      	adds	r3, #4
 8003d64:	601a      	str	r2, [r3, #0]
      break;
 8003d66:	bf00      	nop
  }

  return ret;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000944 	.word	0x20000944
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	20000234 	.word	0x20000234
 8003d80:	20000244 	.word	0x20000244
 8003d84:	40023800 	.word	0x40023800
 8003d88:	20000230 	.word	0x20000230
 8003d8c:	200008e4 	.word	0x200008e4

08003d90 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <uartAvailable+0x1a>
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d018      	beq.n	8003dda <uartAvailable+0x4a>
 8003da8:	e02f      	b.n	8003e0a <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <uartAvailable+0x84>)
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	3308      	adds	r3, #8
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <uartAvailable+0x88>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	1a8a      	subs	r2, r1, r2
 8003dc0:	4914      	ldr	r1, [pc, #80]	; (8003e14 <uartAvailable+0x84>)
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	440b      	add	r3, r1
 8003dc6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <uartAvailable+0x84>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fb4c 	bl	800146e <qbufferAvailable>
 8003dd6:	60f8      	str	r0, [r7, #12]
      break;
 8003dd8:	e017      	b.n	8003e0a <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <uartAvailable+0x84>)
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	3308      	adds	r3, #8
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <uartAvailable+0x88>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	1a8a      	subs	r2, r1, r2
 8003df0:	4908      	ldr	r1, [pc, #32]	; (8003e14 <uartAvailable+0x84>)
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	440b      	add	r3, r1
 8003df6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <uartAvailable+0x84>)
 8003dfe:	4413      	add	r3, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fb34 	bl	800146e <qbufferAvailable>
 8003e06:	60f8      	str	r0, [r7, #12]
      break;
 8003e08:	bf00      	nop
  }

  return ret;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000234 	.word	0x20000234
 8003e18:	200008e4 	.word	0x200008e4

08003e1c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <uartRead+0x1a>
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d008      	beq.n	8003e46 <uartRead+0x2a>
 8003e34:	e00f      	b.n	8003e56 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8003e36:	f107 030f 	add.w	r3, r7, #15
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4808      	ldr	r0, [pc, #32]	; (8003e60 <uartRead+0x44>)
 8003e40:	f7fd fad8 	bl	80013f4 <qbufferRead>
      break;
 8003e44:	e007      	b.n	8003e56 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8003e46:	f107 030f 	add.w	r3, r7, #15
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4805      	ldr	r0, [pc, #20]	; (8003e64 <uartRead+0x48>)
 8003e50:	f7fd fad0 	bl	80013f4 <qbufferRead>
      break;
 8003e54:	bf00      	nop
  }

  return ret;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000234 	.word	0x20000234
 8003e64:	20000244 	.word	0x20000244

08003e68 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <uartWrite+0x1e>
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d00f      	beq.n	8003ea4 <uartWrite+0x3c>
 8003e84:	e020      	b.n	8003ec8 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	2364      	movs	r3, #100	; 0x64
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4811      	ldr	r0, [pc, #68]	; (8003ed4 <uartWrite+0x6c>)
 8003e90:	f001 ff93 	bl	8005dba <HAL_UART_Transmit>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d111      	bne.n	8003ec2 <uartWrite+0x5a>
        {
          ret = length;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	617b      	str	r3, [r7, #20]
        }
      break;
 8003ea2:	e00e      	b.n	8003ec2 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	2364      	movs	r3, #100	; 0x64
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	4809      	ldr	r0, [pc, #36]	; (8003ed4 <uartWrite+0x6c>)
 8003eae:	f001 ff84 	bl	8005dba <HAL_UART_Transmit>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <uartWrite+0x5e>
      {
        ret = length;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	617b      	str	r3, [r7, #20]
      }
      break;
 8003ec0:	e001      	b.n	8003ec6 <uartWrite+0x5e>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <uartWrite+0x60>
      break;
 8003ec6:	bf00      	nop
  }

  return ret;
 8003ec8:	697b      	ldr	r3, [r7, #20]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000944 	.word	0x20000944

08003ed8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8003ed8:	b40e      	push	{r1, r2, r3}
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b0c7      	sub	sp, #284	; 0x11c
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	1dfb      	adds	r3, r7, #7
 8003ee4:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003ee6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	f107 0010 	add.w	r0, r7, #16
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f02:	f003 feb3 	bl	8007c6c <vsniprintf>
 8003f06:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8003f0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f0e:	f107 0110 	add.w	r1, r7, #16
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ffa6 	bl	8003e68 <uartWrite>
 8003f1c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8003f20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f30:	b003      	add	sp, #12
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a4c      	ldr	r2, [pc, #304]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	f040 8092 	bne.w	80040a4 <HAL_UART_MspInit+0x148>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	4a49      	ldr	r2, [pc, #292]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003f8a:	f043 0310 	orr.w	r3, r3, #16
 8003f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f90:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	4a42      	ldr	r2, [pc, #264]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6313      	str	r3, [r2, #48]	; 0x30
 8003fac:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
	    /**USART1 GPIO Configuration
	    PA9     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fbc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fca:	2307      	movs	r3, #7
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4837      	ldr	r0, [pc, #220]	; (80040b4 <HAL_UART_MspInit+0x158>)
 8003fd6:	f000 fe77 	bl	8004cc8 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003fda:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8003fdc:	4a37      	ldr	r2, [pc, #220]	; (80040bc <HAL_UART_MspInit+0x160>)
 8003fde:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8003fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fe6:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fe8:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fee:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ff4:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8003ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ffa:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004002:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004008:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8004010:	2200      	movs	r2, #0
 8004012:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004014:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8004016:	2200      	movs	r2, #0
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800401a:	4827      	ldr	r0, [pc, #156]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 800401c:	f000 fa66 	bl	80044ec <HAL_DMA_Init>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_UART_MspInit+0xce>
	    {
	      Error_Handler();
 8004026:	f7fd f8cd 	bl	80011c4 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
 8004030:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004038:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_UART_MspInit+0x168>)
 800403a:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_UART_MspInit+0x164>)
 800403e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004042:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_UART_MspInit+0x164>)
 800404c:	2200      	movs	r2, #0
 800404e:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004056:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_UART_MspInit+0x164>)
 800405a:	2200      	movs	r2, #0
 800405c:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004064:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406a:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_UART_MspInit+0x164>)
 800406e:	2200      	movs	r2, #0
 8004070:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004072:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004074:	2200      	movs	r2, #0
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004078:	4811      	ldr	r0, [pc, #68]	; (80040c0 <HAL_UART_MspInit+0x164>)
 800407a:	f000 fa37 	bl	80044ec <HAL_DMA_Init>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8004084:	f7fd f89e 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0d      	ldr	r2, [pc, #52]	; (80040c0 <HAL_UART_MspInit+0x164>)
 800408c:	635a      	str	r2, [r3, #52]	; 0x34
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	2100      	movs	r1, #0
 8004098:	2025      	movs	r0, #37	; 0x25
 800409a:	f000 f9e2 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800409e:	2025      	movs	r0, #37	; 0x25
 80040a0:	f000 f9fb 	bl	800449a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80040a4:	bf00      	nop
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	20000884 	.word	0x20000884
 80040bc:	400264b8 	.word	0x400264b8
 80040c0:	200008e4 	.word	0x200008e4
 80040c4:	40026440 	.word	0x40026440

080040c8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <HAL_UART_MspDeInit+0x40>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d112      	bne.n	8004100 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_UART_MspDeInit+0x44>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a0b      	ldr	r2, [pc, #44]	; (800410c <HAL_UART_MspDeInit+0x44>)
 80040e0:	f023 0310 	bic.w	r3, r3, #16
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80040e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040ea:	4809      	ldr	r0, [pc, #36]	; (8004110 <HAL_UART_MspDeInit+0x48>)
 80040ec:	f000 ff6e 	bl	8004fcc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 faa7 	bl	8004648 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80040fa:	2025      	movs	r0, #37	; 0x25
 80040fc:	f000 f9db 	bl	80044b6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40011000 	.word	0x40011000
 800410c:	40023800 	.word	0x40023800
 8004110:	40020000 	.word	0x40020000

08004114 <hwInit>:




void hwInit(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  bspInit();
 8004118:	f7fc ffb0 	bl	800107c <bspInit>
  cliInit();
 800411c:	f7fd fcce 	bl	8001abc <cliInit>
  uartInit();
 8004120:	f7ff fd0a 	bl	8003b38 <uartInit>
  DWT_Delay_Init();
 8004124:	f7fd f9bc 	bl	80014a0 <DWT_Delay_Init>
  ledInit();
 8004128:	f7ff f92e 	bl	8003388 <ledInit>
  buttonInit();
 800412c:	f7fd f9e8 	bl	8001500 <buttonInit>
  gpioInit();
 8004130:	f7fe ff2e 	bl	8002f90 <gpioInit>
  Ds18b20_Init();
 8004134:	f7fe fc0a 	bl	800294c <Ds18b20_Init>
  LCD_INIT();
 8004138:	f7fd fbfa 	bl	8001930 <LCD_INIT>
}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_Init+0x40>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <HAL_Init+0x40>)
 800414a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_Init+0x40>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_Init+0x40>)
 8004156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_Init+0x40>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a07      	ldr	r2, [pc, #28]	; (8004180 <HAL_Init+0x40>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004168:	2003      	movs	r0, #3
 800416a:	f000 f96f 	bl	800444c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800416e:	2000      	movs	r0, #0
 8004170:	f000 f808 	bl	8004184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004174:	f7fd f82a 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023c00 	.word	0x40023c00

08004184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_InitTick+0x54>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_InitTick+0x58>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4619      	mov	r1, r3
 8004196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800419a:	fbb3 f3f1 	udiv	r3, r3, r1
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f995 	bl	80044d2 <HAL_SYSTICK_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00e      	b.n	80041d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d80a      	bhi.n	80041ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041b8:	2200      	movs	r2, #0
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	f000 f94f 	bl	8004462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041c4:	4a06      	ldr	r2, [pc, #24]	; (80041e0 <HAL_InitTick+0x5c>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000000 	.word	0x20000000
 80041dc:	20000030 	.word	0x20000030
 80041e0:	2000002c 	.word	0x2000002c

080041e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <HAL_IncTick+0x20>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_IncTick+0x24>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4413      	add	r3, r2
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <HAL_IncTick+0x24>)
 80041f6:	6013      	str	r3, [r2, #0]
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000030 	.word	0x20000030
 8004208:	20000984 	.word	0x20000984

0800420c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return uwTick;
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <HAL_GetTick+0x14>)
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000984 	.word	0x20000984

08004224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7ff ffee 	bl	800420c <HAL_GetTick>
 8004230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d005      	beq.n	800424a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_Delay+0x40>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800424a:	bf00      	nop
 800424c:	f7ff ffde 	bl	800420c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	429a      	cmp	r2, r3
 800425a:	d8f7      	bhi.n	800424c <HAL_Delay+0x28>
  {
  }
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000030 	.word	0x20000030

08004268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429a:	4a04      	ldr	r2, [pc, #16]	; (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	60d3      	str	r3, [r2, #12]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <__NVIC_GetPriorityGrouping+0x18>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 0307 	and.w	r3, r3, #7
}
 80042be:	4618      	mov	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db0b      	blt.n	80042f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	4907      	ldr	r1, [pc, #28]	; (8004304 <__NVIC_EnableIRQ+0x38>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2001      	movs	r0, #1
 80042ee:	fa00 f202 	lsl.w	r2, r0, r2
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db10      	blt.n	800433c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4909      	ldr	r1, [pc, #36]	; (8004348 <__NVIC_DisableIRQ+0x40>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	3320      	adds	r3, #32
 8004330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004338:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100

0800434c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	6039      	str	r1, [r7, #0]
 8004356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	2b00      	cmp	r3, #0
 800435e:	db0a      	blt.n	8004376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	490c      	ldr	r1, [pc, #48]	; (8004398 <__NVIC_SetPriority+0x4c>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	440b      	add	r3, r1
 8004370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004374:	e00a      	b.n	800438c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4908      	ldr	r1, [pc, #32]	; (800439c <__NVIC_SetPriority+0x50>)
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	3b04      	subs	r3, #4
 8004384:	0112      	lsls	r2, r2, #4
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	440b      	add	r3, r1
 800438a:	761a      	strb	r2, [r3, #24]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f1c3 0307 	rsb	r3, r3, #7
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	bf28      	it	cs
 80043be:	2304      	movcs	r3, #4
 80043c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d902      	bls.n	80043d0 <NVIC_EncodePriority+0x30>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3b03      	subs	r3, #3
 80043ce:	e000      	b.n	80043d2 <NVIC_EncodePriority+0x32>
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	401a      	ands	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	43d9      	mvns	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	4313      	orrs	r3, r2
         );
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004418:	d301      	bcc.n	800441e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800441a:	2301      	movs	r3, #1
 800441c:	e00f      	b.n	800443e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <SysTick_Config+0x40>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004426:	210f      	movs	r1, #15
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f7ff ff8e 	bl	800434c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SysTick_Config+0x40>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <SysTick_Config+0x40>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	e000e010 	.word	0xe000e010

0800444c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff07 	bl	8004268 <__NVIC_SetPriorityGrouping>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004474:	f7ff ff1c 	bl	80042b0 <__NVIC_GetPriorityGrouping>
 8004478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f7ff ff8e 	bl	80043a0 <NVIC_EncodePriority>
 8004484:	4602      	mov	r2, r0
 8004486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff5d 	bl	800434c <__NVIC_SetPriority>
}
 8004492:	bf00      	nop
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff0f 	bl	80042cc <__NVIC_EnableIRQ>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff1f 	bl	8004308 <__NVIC_DisableIRQ>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ff94 	bl	8004408 <SysTick_Config>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044f8:	f7ff fe88 	bl	800420c <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e099      	b.n	800463c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004528:	e00f      	b.n	800454a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800452a:	f7ff fe6f 	bl	800420c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b05      	cmp	r3, #5
 8004536:	d908      	bls.n	800454a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2203      	movs	r2, #3
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e078      	b.n	800463c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e8      	bne.n	800452a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4b38      	ldr	r3, [pc, #224]	; (8004644 <HAL_DMA_Init+0x158>)
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4313      	orrs	r3, r2
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d117      	bne.n	800460e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 faef 	bl	8004bd4 <DMA_CheckFifoParam>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800460a:	2301      	movs	r3, #1
 800460c:	e016      	b.n	800463c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 faa6 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 800461c:	4603      	mov	r3, r0
 800461e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	223f      	movs	r2, #63	; 0x3f
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	f010803f 	.word	0xf010803f

08004648 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e050      	b.n	80046fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d101      	bne.n	800466a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
 8004668:	e048      	b.n	80046fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2221      	movs	r2, #33	; 0x21
 80046a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa5c 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 80046b0:	4603      	mov	r3, r0
 80046b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	223f      	movs	r2, #63	; 0x3f
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_DMA_Start_IT+0x26>
 8004726:	2302      	movs	r3, #2
 8004728:	e040      	b.n	80047ac <HAL_DMA_Start_IT+0xa8>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d12f      	bne.n	800479e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9da 	bl	8004b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	223f      	movs	r2, #63	; 0x3f
 800475e:	409a      	lsls	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0216 	orr.w	r2, r2, #22
 8004772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0208 	orr.w	r2, r2, #8
 800478a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e005      	b.n	80047aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
 80047a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d004      	beq.n	80047d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00c      	b.n	80047ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2205      	movs	r2, #5
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004804:	4b92      	ldr	r3, [pc, #584]	; (8004a50 <HAL_DMA_IRQHandler+0x258>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a92      	ldr	r2, [pc, #584]	; (8004a54 <HAL_DMA_IRQHandler+0x25c>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	2208      	movs	r2, #8
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	2208      	movs	r2, #8
 8004852:	409a      	lsls	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	2201      	movs	r2, #1
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2204      	movs	r2, #4
 80048a0:	409a      	lsls	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	2204      	movs	r2, #4
 80048be:	409a      	lsls	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2210      	movs	r2, #16
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d043      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03c      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	2210      	movs	r2, #16
 80048f4:	409a      	lsls	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d018      	beq.n	800493a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e01f      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e016      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0208 	bic.w	r2, r2, #8
 8004956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	2220      	movs	r2, #32
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 808e 	beq.w	8004a96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8086 	beq.w	8004a96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	2220      	movs	r2, #32
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d136      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0216 	bic.w	r2, r2, #22
 80049b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x1da>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0208 	bic.w	r2, r2, #8
 80049e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	223f      	movs	r2, #63	; 0x3f
 80049e8:	409a      	lsls	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d07d      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
        }
        return;
 8004a0e:	e078      	b.n	8004b02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01c      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d108      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d030      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e02b      	b.n	8004a96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d027      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
 8004a4e:	e022      	b.n	8004a96 <HAL_DMA_IRQHandler+0x29e>
 8004a50:	20000000 	.word	0x20000000
 8004a54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0210 	bic.w	r2, r2, #16
 8004a74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d032      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d022      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2205      	movs	r2, #5
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d307      	bcc.n	8004ade <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f2      	bne.n	8004ac2 <HAL_DMA_IRQHandler+0x2ca>
 8004adc:	e000      	b.n	8004ae0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ade:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
 8004b00:	e000      	b.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b02:	bf00      	nop
    }
  }
}
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop

08004b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d108      	bne.n	8004b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b4a:	e007      	b.n	8004b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	3b10      	subs	r3, #16
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <DMA_CalcBaseAndBitshift+0x64>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d909      	bls.n	8004baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba8:	e007      	b.n	8004bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	aaaaaaab 	.word	0xaaaaaaab
 8004bd0:	08009680 	.word	0x08009680

08004bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11f      	bne.n	8004c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d855      	bhi.n	8004ca0 <DMA_CheckFifoParam+0xcc>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <DMA_CheckFifoParam+0x28>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1f 	.word	0x08004c1f
 8004c04:	08004c0d 	.word	0x08004c0d
 8004c08:	08004ca1 	.word	0x08004ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d045      	beq.n	8004ca4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1c:	e042      	b.n	8004ca4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c26:	d13f      	bne.n	8004ca8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e03c      	b.n	8004ca8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	d121      	bne.n	8004c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d836      	bhi.n	8004cac <DMA_CheckFifoParam+0xd8>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <DMA_CheckFifoParam+0x70>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c5b 	.word	0x08004c5b
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004c6d 	.word	0x08004c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e02f      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d024      	beq.n	8004cb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e021      	b.n	8004cb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c74:	d11e      	bne.n	8004cb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c7a:	e01b      	b.n	8004cb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <DMA_CheckFifoParam+0xb4>
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d003      	beq.n	8004c8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c86:	e018      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e015      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9e:	e00b      	b.n	8004cb8 <DMA_CheckFifoParam+0xe4>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e00a      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004ca4:	bf00      	nop
 8004ca6:	e008      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004ca8:	bf00      	nop
 8004caa:	e006      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004cac:	bf00      	nop
 8004cae:	e004      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004cb0:	bf00      	nop
 8004cb2:	e002      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;   
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004cb8:	bf00      	nop
    }
  } 
  
  return status; 
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	e159      	b.n	8004f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	f040 8148 	bne.w	8004f92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d00b      	beq.n	8004d22 <HAL_GPIO_Init+0x5a>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d007      	beq.n	8004d22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d16:	2b11      	cmp	r3, #17
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b12      	cmp	r3, #18
 8004d20:	d130      	bne.n	8004d84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 0201 	and.w	r2, r3, #1
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0xfc>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b12      	cmp	r3, #18
 8004dc2:	d123      	bne.n	8004e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	08da      	lsrs	r2, r3, #3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3208      	adds	r2, #8
 8004dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	220f      	movs	r2, #15
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	08da      	lsrs	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3208      	adds	r2, #8
 8004e06:	69b9      	ldr	r1, [r7, #24]
 8004e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	2203      	movs	r2, #3
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0203 	and.w	r2, r3, #3
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80a2 	beq.w	8004f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4b56      	ldr	r3, [pc, #344]	; (8004fac <HAL_GPIO_Init+0x2e4>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	4a55      	ldr	r2, [pc, #340]	; (8004fac <HAL_GPIO_Init+0x2e4>)
 8004e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5e:	4b53      	ldr	r3, [pc, #332]	; (8004fac <HAL_GPIO_Init+0x2e4>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e6a:	4a51      	ldr	r2, [pc, #324]	; (8004fb0 <HAL_GPIO_Init+0x2e8>)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	3302      	adds	r3, #2
 8004e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a48      	ldr	r2, [pc, #288]	; (8004fb4 <HAL_GPIO_Init+0x2ec>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d019      	beq.n	8004eca <HAL_GPIO_Init+0x202>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a47      	ldr	r2, [pc, #284]	; (8004fb8 <HAL_GPIO_Init+0x2f0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_GPIO_Init+0x1fe>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a46      	ldr	r2, [pc, #280]	; (8004fbc <HAL_GPIO_Init+0x2f4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_GPIO_Init+0x1fa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a45      	ldr	r2, [pc, #276]	; (8004fc0 <HAL_GPIO_Init+0x2f8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <HAL_GPIO_Init+0x1f6>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a44      	ldr	r2, [pc, #272]	; (8004fc4 <HAL_GPIO_Init+0x2fc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_GPIO_Init+0x1f2>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e008      	b.n	8004ecc <HAL_GPIO_Init+0x204>
 8004eba:	2307      	movs	r3, #7
 8004ebc:	e006      	b.n	8004ecc <HAL_GPIO_Init+0x204>
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e004      	b.n	8004ecc <HAL_GPIO_Init+0x204>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e002      	b.n	8004ecc <HAL_GPIO_Init+0x204>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <HAL_GPIO_Init+0x204>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	f002 0203 	and.w	r2, r2, #3
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	4093      	lsls	r3, r2
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004edc:	4934      	ldr	r1, [pc, #208]	; (8004fb0 <HAL_GPIO_Init+0x2e8>)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eea:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f14:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f38:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f62:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f8c:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <HAL_GPIO_Init+0x300>)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3301      	adds	r3, #1
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	f67f aea2 	bls.w	8004ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3724      	adds	r7, #36	; 0x24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	40020400 	.word	0x40020400
 8004fbc:	40020800 	.word	0x40020800
 8004fc0:	40020c00 	.word	0x40020c00
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40013c00 	.word	0x40013c00

08004fcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	e0bb      	b.n	8005160 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fe8:	2201      	movs	r2, #1
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f040 80ab 	bne.w	800515a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005004:	4a5b      	ldr	r2, [pc, #364]	; (8005174 <HAL_GPIO_DeInit+0x1a8>)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	3302      	adds	r3, #2
 800500c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005010:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	220f      	movs	r2, #15
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	4013      	ands	r3, r2
 8005024:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a53      	ldr	r2, [pc, #332]	; (8005178 <HAL_GPIO_DeInit+0x1ac>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d019      	beq.n	8005062 <HAL_GPIO_DeInit+0x96>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a52      	ldr	r2, [pc, #328]	; (800517c <HAL_GPIO_DeInit+0x1b0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_GPIO_DeInit+0x92>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a51      	ldr	r2, [pc, #324]	; (8005180 <HAL_GPIO_DeInit+0x1b4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00d      	beq.n	800505a <HAL_GPIO_DeInit+0x8e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a50      	ldr	r2, [pc, #320]	; (8005184 <HAL_GPIO_DeInit+0x1b8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <HAL_GPIO_DeInit+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a4f      	ldr	r2, [pc, #316]	; (8005188 <HAL_GPIO_DeInit+0x1bc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_GPIO_DeInit+0x86>
 800504e:	2304      	movs	r3, #4
 8005050:	e008      	b.n	8005064 <HAL_GPIO_DeInit+0x98>
 8005052:	2307      	movs	r3, #7
 8005054:	e006      	b.n	8005064 <HAL_GPIO_DeInit+0x98>
 8005056:	2303      	movs	r3, #3
 8005058:	e004      	b.n	8005064 <HAL_GPIO_DeInit+0x98>
 800505a:	2302      	movs	r3, #2
 800505c:	e002      	b.n	8005064 <HAL_GPIO_DeInit+0x98>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_GPIO_DeInit+0x98>
 8005062:	2300      	movs	r3, #0
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	f002 0203 	and.w	r2, r2, #3
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	4093      	lsls	r3, r2
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d132      	bne.n	80050da <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005074:	4b45      	ldr	r3, [pc, #276]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	43db      	mvns	r3, r3
 800507c:	4943      	ldr	r1, [pc, #268]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 800507e:	4013      	ands	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005082:	4b42      	ldr	r3, [pc, #264]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	43db      	mvns	r3, r3
 800508a:	4940      	ldr	r1, [pc, #256]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 800508c:	4013      	ands	r3, r2
 800508e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005090:	4b3e      	ldr	r3, [pc, #248]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43db      	mvns	r3, r3
 8005098:	493c      	ldr	r1, [pc, #240]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 800509a:	4013      	ands	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	4939      	ldr	r1, [pc, #228]	; (800518c <HAL_GPIO_DeInit+0x1c0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	220f      	movs	r2, #15
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050bc:	4a2d      	ldr	r2, [pc, #180]	; (8005174 <HAL_GPIO_DeInit+0x1a8>)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	3302      	adds	r3, #2
 80050c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	43da      	mvns	r2, r3
 80050cc:	4829      	ldr	r0, [pc, #164]	; (8005174 <HAL_GPIO_DeInit+0x1a8>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	400a      	ands	r2, r1
 80050d4:	3302      	adds	r3, #2
 80050d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2103      	movs	r1, #3
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	401a      	ands	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	08da      	lsrs	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3208      	adds	r2, #8
 80050f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	220f      	movs	r2, #15
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	08d2      	lsrs	r2, r2, #3
 8005110:	4019      	ands	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3208      	adds	r2, #8
 8005116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2103      	movs	r1, #3
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	401a      	ands	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	2101      	movs	r1, #1
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	401a      	ands	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2103      	movs	r1, #3
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	401a      	ands	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	3301      	adds	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	f67f af40 	bls.w	8004fe8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40013800 	.word	0x40013800
 8005178:	40020000 	.word	0x40020000
 800517c:	40020400 	.word	0x40020400
 8005180:	40020800 	.word	0x40020800
 8005184:	40020c00 	.word	0x40020c00
 8005188:	40021000 	.word	0x40021000
 800518c:	40013c00 	.word	0x40013c00

08005190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	887b      	ldrh	r3, [r7, #2]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	e001      	b.n	80051b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	807b      	strh	r3, [r7, #2]
 80051cc:	4613      	mov	r3, r2
 80051ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051d0:	787b      	ldrb	r3, [r7, #1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051d6:	887a      	ldrh	r2, [r7, #2]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051dc:	e003      	b.n	80051e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051de:	887b      	ldrh	r3, [r7, #2]
 80051e0:	041a      	lsls	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	619a      	str	r2, [r3, #24]
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	401a      	ands	r2, r3
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	429a      	cmp	r2, r3
 800520a:	d104      	bne.n	8005216 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800520c:	887b      	ldrh	r3, [r7, #2]
 800520e:	041a      	lsls	r2, r3, #16
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005214:	e002      	b.n	800521c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e25b      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d075      	beq.n	8005332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005246:	4ba3      	ldr	r3, [pc, #652]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d00c      	beq.n	800526c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005252:	4ba0      	ldr	r3, [pc, #640]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800525a:	2b08      	cmp	r3, #8
 800525c:	d112      	bne.n	8005284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525e:	4b9d      	ldr	r3, [pc, #628]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d10b      	bne.n	8005284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526c:	4b99      	ldr	r3, [pc, #612]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05b      	beq.n	8005330 <HAL_RCC_OscConfig+0x108>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d157      	bne.n	8005330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e236      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d106      	bne.n	800529c <HAL_RCC_OscConfig+0x74>
 800528e:	4b91      	ldr	r3, [pc, #580]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a90      	ldr	r2, [pc, #576]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e01d      	b.n	80052d8 <HAL_RCC_OscConfig+0xb0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x98>
 80052a6:	4b8b      	ldr	r3, [pc, #556]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a8a      	ldr	r2, [pc, #552]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4b88      	ldr	r3, [pc, #544]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a87      	ldr	r2, [pc, #540]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e00b      	b.n	80052d8 <HAL_RCC_OscConfig+0xb0>
 80052c0:	4b84      	ldr	r3, [pc, #528]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a83      	ldr	r2, [pc, #524]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b81      	ldr	r3, [pc, #516]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a80      	ldr	r2, [pc, #512]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fe ff94 	bl	800420c <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e8:	f7fe ff90 	bl	800420c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e1fb      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fa:	4b76      	ldr	r3, [pc, #472]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0xc0>
 8005306:	e014      	b.n	8005332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fe ff80 	bl	800420c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005310:	f7fe ff7c 	bl	800420c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e1e7      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005322:	4b6c      	ldr	r3, [pc, #432]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0xe8>
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d063      	beq.n	8005406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800533e:	4b65      	ldr	r3, [pc, #404]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800534a:	4b62      	ldr	r3, [pc, #392]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d11c      	bne.n	8005390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005356:	4b5f      	ldr	r3, [pc, #380]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d116      	bne.n	8005390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	4b5c      	ldr	r3, [pc, #368]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_RCC_OscConfig+0x152>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d001      	beq.n	800537a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e1bb      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537a:	4b56      	ldr	r3, [pc, #344]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4952      	ldr	r1, [pc, #328]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538e:	e03a      	b.n	8005406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005398:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <HAL_RCC_OscConfig+0x2b0>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fe ff35 	bl	800420c <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a6:	f7fe ff31 	bl	800420c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e19c      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b8:	4b46      	ldr	r3, [pc, #280]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c4:	4b43      	ldr	r3, [pc, #268]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4940      	ldr	r1, [pc, #256]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
 80053d8:	e015      	b.n	8005406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053da:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCC_OscConfig+0x2b0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fe ff14 	bl	800420c <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e8:	f7fe ff10 	bl	800420c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e17b      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d030      	beq.n	8005474 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541a:	4b30      	ldr	r3, [pc, #192]	; (80054dc <HAL_RCC_OscConfig+0x2b4>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fe fef4 	bl	800420c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005428:	f7fe fef0 	bl	800420c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e15b      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543a:	4b26      	ldr	r3, [pc, #152]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x200>
 8005446:	e015      	b.n	8005474 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005448:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCC_OscConfig+0x2b4>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544e:	f7fe fedd 	bl	800420c <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005456:	f7fe fed9 	bl	800420c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e144      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800546a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a0 	beq.w	80055c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 800549c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <HAL_RCC_OscConfig+0x2b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d121      	bne.n	8005502 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <HAL_RCC_OscConfig+0x2b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <HAL_RCC_OscConfig+0x2b8>)
 80054c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ca:	f7fe fe9f 	bl	800420c <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d0:	e011      	b.n	80054f6 <HAL_RCC_OscConfig+0x2ce>
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800
 80054d8:	42470000 	.word	0x42470000
 80054dc:	42470e80 	.word	0x42470e80
 80054e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e4:	f7fe fe92 	bl	800420c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0fd      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	4b81      	ldr	r3, [pc, #516]	; (80056fc <HAL_RCC_OscConfig+0x4d4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d106      	bne.n	8005518 <HAL_RCC_OscConfig+0x2f0>
 800550a:	4b7d      	ldr	r3, [pc, #500]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	4a7c      	ldr	r2, [pc, #496]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	6713      	str	r3, [r2, #112]	; 0x70
 8005516:	e01c      	b.n	8005552 <HAL_RCC_OscConfig+0x32a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b05      	cmp	r3, #5
 800551e:	d10c      	bne.n	800553a <HAL_RCC_OscConfig+0x312>
 8005520:	4b77      	ldr	r3, [pc, #476]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	4a76      	ldr	r2, [pc, #472]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005526:	f043 0304 	orr.w	r3, r3, #4
 800552a:	6713      	str	r3, [r2, #112]	; 0x70
 800552c:	4b74      	ldr	r3, [pc, #464]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	4a73      	ldr	r2, [pc, #460]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6713      	str	r3, [r2, #112]	; 0x70
 8005538:	e00b      	b.n	8005552 <HAL_RCC_OscConfig+0x32a>
 800553a:	4b71      	ldr	r3, [pc, #452]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	4a70      	ldr	r2, [pc, #448]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	6713      	str	r3, [r2, #112]	; 0x70
 8005546:	4b6e      	ldr	r3, [pc, #440]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a6d      	ldr	r2, [pc, #436]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 800554c:	f023 0304 	bic.w	r3, r3, #4
 8005550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d015      	beq.n	8005586 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fe fe57 	bl	800420c <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fe fe53 	bl	800420c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0bc      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	4b61      	ldr	r3, [pc, #388]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ee      	beq.n	8005562 <HAL_RCC_OscConfig+0x33a>
 8005584:	e014      	b.n	80055b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005586:	f7fe fe41 	bl	800420c <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fe fe3d 	bl	800420c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0a6      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a4:	4b56      	ldr	r3, [pc, #344]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ee      	bne.n	800558e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b52      	ldr	r3, [pc, #328]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	4a51      	ldr	r2, [pc, #324]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8092 	beq.w	80056f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055cc:	4b4c      	ldr	r3, [pc, #304]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d05c      	beq.n	8005692 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d141      	bne.n	8005664 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e0:	4b48      	ldr	r3, [pc, #288]	; (8005704 <HAL_RCC_OscConfig+0x4dc>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fe11 	bl	800420c <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fe fe0d 	bl	800420c <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e078      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005600:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	019b      	lsls	r3, r3, #6
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	3b01      	subs	r3, #1
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	061b      	lsls	r3, r3, #24
 8005630:	4933      	ldr	r1, [pc, #204]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005636:	4b33      	ldr	r3, [pc, #204]	; (8005704 <HAL_RCC_OscConfig+0x4dc>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fe fde6 	bl	800420c <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005644:	f7fe fde2 	bl	800420c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e04d      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005656:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0x41c>
 8005662:	e045      	b.n	80056f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005664:	4b27      	ldr	r3, [pc, #156]	; (8005704 <HAL_RCC_OscConfig+0x4dc>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fe fdcf 	bl	800420c <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe fdcb 	bl	800420c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e036      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005684:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x44a>
 8005690:	e02e      	b.n	80056f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e029      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800569e:	4b18      	ldr	r3, [pc, #96]	; (8005700 <HAL_RCC_OscConfig+0x4d8>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d11c      	bne.n	80056ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d115      	bne.n	80056ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056c6:	4013      	ands	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10d      	bne.n	80056ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d106      	bne.n	80056ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40007000 	.word	0x40007000
 8005700:	40023800 	.word	0x40023800
 8005704:	42470060 	.word	0x42470060

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fe fd08 	bl	800420c <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fe fd04 	bl	800420c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f821 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005892:	4601      	mov	r1, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5cd3      	ldrb	r3, [r2, r3]
 80058a2:	fa21 f303 	lsr.w	r3, r1, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fc68 	bl	8004184 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	080095b4 	.word	0x080095b4
 80058cc:	20000000 	.word	0x20000000
 80058d0:	2000002c 	.word	0x2000002c

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	2300      	movs	r3, #0
 80058e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ea:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x158>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d007      	beq.n	8005906 <HAL_RCC_GetSysClockFreq+0x32>
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d008      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x38>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 808d 	bne.w	8005a1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005900:	4b4b      	ldr	r3, [pc, #300]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005902:	60bb      	str	r3, [r7, #8]
       break;
 8005904:	e08c      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005906:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x160>)
 8005908:	60bb      	str	r3, [r7, #8]
      break;
 800590a:	e089      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800590c:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x158>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005914:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005916:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x158>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d023      	beq.n	800596a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005922:	4b42      	ldr	r3, [pc, #264]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x158>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	ea03 0501 	and.w	r5, r3, r1
 8005938:	ea04 0602 	and.w	r6, r4, r2
 800593c:	4a3d      	ldr	r2, [pc, #244]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x160>)
 800593e:	fb02 f106 	mul.w	r1, r2, r6
 8005942:	2200      	movs	r2, #0
 8005944:	fb02 f205 	mul.w	r2, r2, r5
 8005948:	440a      	add	r2, r1
 800594a:	493a      	ldr	r1, [pc, #232]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x160>)
 800594c:	fba5 0101 	umull	r0, r1, r5, r1
 8005950:	1853      	adds	r3, r2, r1
 8005952:	4619      	mov	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	461a      	mov	r2, r3
 800595c:	4623      	mov	r3, r4
 800595e:	f7fb f9ab 	bl	8000cb8 <__aeabi_uldivmod>
 8005962:	4603      	mov	r3, r0
 8005964:	460c      	mov	r4, r1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e049      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596a:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x158>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	099b      	lsrs	r3, r3, #6
 8005970:	f04f 0400 	mov.w	r4, #0
 8005974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	ea03 0501 	and.w	r5, r3, r1
 8005980:	ea04 0602 	and.w	r6, r4, r2
 8005984:	4629      	mov	r1, r5
 8005986:	4632      	mov	r2, r6
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	0154      	lsls	r4, r2, #5
 8005992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005996:	014b      	lsls	r3, r1, #5
 8005998:	4619      	mov	r1, r3
 800599a:	4622      	mov	r2, r4
 800599c:	1b49      	subs	r1, r1, r5
 800599e:	eb62 0206 	sbc.w	r2, r2, r6
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	f04f 0400 	mov.w	r4, #0
 80059aa:	0194      	lsls	r4, r2, #6
 80059ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059b0:	018b      	lsls	r3, r1, #6
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	eb64 0402 	sbc.w	r4, r4, r2
 80059b8:	f04f 0100 	mov.w	r1, #0
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	00e2      	lsls	r2, r4, #3
 80059c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059c6:	00d9      	lsls	r1, r3, #3
 80059c8:	460b      	mov	r3, r1
 80059ca:	4614      	mov	r4, r2
 80059cc:	195b      	adds	r3, r3, r5
 80059ce:	eb44 0406 	adc.w	r4, r4, r6
 80059d2:	f04f 0100 	mov.w	r1, #0
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	02a2      	lsls	r2, r4, #10
 80059dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80059e0:	0299      	lsls	r1, r3, #10
 80059e2:	460b      	mov	r3, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	4621      	mov	r1, r4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	461a      	mov	r2, r3
 80059f2:	4623      	mov	r3, r4
 80059f4:	f7fb f960 	bl	8000cb8 <__aeabi_uldivmod>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x158>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	3301      	adds	r3, #1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	60bb      	str	r3, [r7, #8]
      break;
 8005a18:	e002      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a1c:	60bb      	str	r3, [r7, #8]
      break;
 8005a1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a20:	68bb      	ldr	r3, [r7, #8]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	00f42400 	.word	0x00f42400
 8005a34:	017d7840 	.word	0x017d7840

08005a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000000 	.word	0x20000000

08005a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a54:	f7ff fff0 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a58:	4601      	mov	r1, r0
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	0a9b      	lsrs	r3, r3, #10
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4a03      	ldr	r2, [pc, #12]	; (8005a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a66:	5cd3      	ldrb	r3, [r2, r3]
 8005a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40023800 	.word	0x40023800
 8005a74:	080095c4 	.word	0x080095c4

08005a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a7c:	f7ff ffdc 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a80:	4601      	mov	r1, r0
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	0b5b      	lsrs	r3, r3, #13
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	4a03      	ldr	r2, [pc, #12]	; (8005a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a8e:	5cd3      	ldrb	r3, [r2, r3]
 8005a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	080095c4 	.word	0x080095c4

08005aa0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
    return;
 8005ae2:	e0d8      	b.n	8005c96 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_SPI_IRQHandler+0x66>
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
    return;
 8005b04:	e0c7      	b.n	8005c96 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10c      	bne.n	8005b2c <HAL_SPI_IRQHandler+0x8c>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	099b      	lsrs	r3, r3, #6
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80b5 	beq.w	8005c96 <HAL_SPI_IRQHandler+0x1f6>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80ae 	beq.w	8005c96 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	099b      	lsrs	r3, r3, #6
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d023      	beq.n	8005b8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d011      	beq.n	8005b76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	f043 0204 	orr.w	r2, r3, #4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	e00b      	b.n	8005b8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	693b      	ldr	r3, [r7, #16]
        return;
 8005b8c:	e083      	b.n	8005c96 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d014      	beq.n	8005bc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f043 0201 	orr.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00c      	beq.n	8005bea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0208 	orr.w	r2, r3, #8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d050      	beq.n	8005c94 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <HAL_SPI_IRQHandler+0x17e>
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d034      	beq.n	8005c88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0203 	bic.w	r2, r2, #3
 8005c2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d011      	beq.n	8005c5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3a:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_SPI_IRQHandler+0x1fc>)
 8005c3c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fdb6 	bl	80047b4 <HAL_DMA_Abort_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d016      	beq.n	8005c90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c66:	4a0d      	ldr	r2, [pc, #52]	; (8005c9c <HAL_SPI_IRQHandler+0x1fc>)
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fda0 	bl	80047b4 <HAL_DMA_Abort_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005c86:	e003      	b.n	8005c90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7fd ff3f 	bl	8003b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c8e:	e000      	b.n	8005c92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005c90:	bf00      	nop
    return;
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
  }
}
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08005ca1 	.word	0x08005ca1

08005ca0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fd ff26 	bl	8003b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e03f      	b.n	8005d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fe f934 	bl	8003f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fc8f 	bl	8006630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e01e      	b.n	8005db2 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2224      	movs	r2, #36	; 0x24
 8005d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d8a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fe f99b 	bl	80040c8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	af02      	add	r7, sp, #8
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	f040 8083 	bne.w	8005ee2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_UART_Transmit+0x2e>
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e07b      	b.n	8005ee4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Transmit+0x40>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e074      	b.n	8005ee4 <HAL_UART_Transmit+0x12a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2221      	movs	r2, #33	; 0x21
 8005e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005e10:	f7fe f9fc 	bl	800420c <HAL_GetTick>
 8005e14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005e2a:	e042      	b.n	8005eb2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e42:	d122      	bne.n	8005e8a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2180      	movs	r1, #128	; 0x80
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fa6c 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e042      	b.n	8005ee4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	e017      	b.n	8005eb2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	e013      	b.n	8005eb2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2180      	movs	r1, #128	; 0x80
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fa49 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e01f      	b.n	8005ee4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	60ba      	str	r2, [r7, #8]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1b7      	bne.n	8005e2c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2140      	movs	r1, #64	; 0x40
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fa30 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e006      	b.n	8005ee4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e000      	b.n	8005ee4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d166      	bne.n	8005fd4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_UART_Receive_DMA+0x26>
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e05f      	b.n	8005fd6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_UART_Receive_DMA+0x38>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e058      	b.n	8005fd6 <HAL_UART_Receive_DMA+0xea>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2222      	movs	r2, #34	; 0x22
 8005f42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <HAL_UART_Receive_DMA+0xf4>)
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	4a24      	ldr	r2, [pc, #144]	; (8005fe4 <HAL_UART_Receive_DMA+0xf8>)
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <HAL_UART_Receive_DMA+0xfc>)
 8005f5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f62:	2200      	movs	r2, #0
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005f66:	f107 0308 	add.w	r3, r7, #8
 8005f6a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	f7fe fbc1 	bl	8004704 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e000      	b.n	8005fd6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005fd4:	2302      	movs	r3, #2
  }
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	08006215 	.word	0x08006215
 8005fe4:	0800627d 	.word	0x0800627d
 8005fe8:	08006299 	.word	0x08006299

08005fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10d      	bne.n	800603e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_UART_IRQHandler+0x52>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa78 	bl	800652c <UART_Receive_IT>
      return;
 800603c:	e0d1      	b.n	80061e2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80b0 	beq.w	80061a6 <HAL_UART_IRQHandler+0x1ba>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <HAL_UART_IRQHandler+0x70>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80a5 	beq.w	80061a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <HAL_UART_IRQHandler+0x90>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006074:	f043 0201 	orr.w	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <HAL_UART_IRQHandler+0xb0>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	f043 0202 	orr.w	r2, r3, #2
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_UART_IRQHandler+0xd0>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00f      	beq.n	80060e6 <HAL_UART_IRQHandler+0xfa>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <HAL_UART_IRQHandler+0xee>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	f043 0208 	orr.w	r2, r3, #8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d078      	beq.n	80061e0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <HAL_UART_IRQHandler+0x11c>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa12 	bl	800652c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <HAL_UART_IRQHandler+0x144>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d031      	beq.n	8006194 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f95b 	bl	80063ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d123      	bne.n	800618c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006152:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_UART_IRQHandler+0x1fc>)
 8006162:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fb23 	bl	80047b4 <HAL_DMA_Abort_IT>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d016      	beq.n	80061a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800617e:	4610      	mov	r0, r2
 8006180:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006182:	e00e      	b.n	80061a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fd fed5 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618a:	e00a      	b.n	80061a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fd fed1 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006192:	e006      	b.n	80061a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fd fecd 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80061a0:	e01e      	b.n	80061e0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a2:	bf00      	nop
    return;
 80061a4:	e01c      	b.n	80061e0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1d6>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f948 	bl	8006450 <UART_Transmit_IT>
    return;
 80061c0:	e00f      	b.n	80061e2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <HAL_UART_IRQHandler+0x1f6>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f990 	bl	80064fc <UART_EndTransmit_IT>
    return;
 80061dc:	bf00      	nop
 80061de:	e000      	b.n	80061e2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80061e0:	bf00      	nop
  }
}
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	08006429 	.word	0x08006429

080061ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d11e      	bne.n	800626e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006244:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006264:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7fd fe6a 	bl	8003f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff ffb8 	bl	8006200 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b4:	2b80      	cmp	r3, #128	; 0x80
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b21      	cmp	r3, #33	; 0x21
 80062ca:	d108      	bne.n	80062de <UART_DMAError+0x46>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062d8:	68b8      	ldr	r0, [r7, #8]
 80062da:	f000 f871 	bl	80063c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b22      	cmp	r3, #34	; 0x22
 80062fe:	d108      	bne.n	8006312 <UART_DMAError+0x7a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2200      	movs	r2, #0
 800630a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800630c:	68b8      	ldr	r0, [r7, #8]
 800630e:	f000 f86d 	bl	80063ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	f043 0210 	orr.w	r2, r3, #16
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800631e:	68b8      	ldr	r0, [r7, #8]
 8006320:	f7fd fe08 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	4613      	mov	r3, r2
 800633a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633c:	e02c      	b.n	8006398 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d028      	beq.n	8006398 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0x30>
 800634c:	f7fd ff5e 	bl	800420c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	429a      	cmp	r2, r3
 800635a:	d21d      	bcs.n	8006398 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800636a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e00f      	b.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4013      	ands	r3, r2
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d0c3      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063d6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006402:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7fd fd76 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b21      	cmp	r3, #33	; 0x21
 8006462:	d144      	bne.n	80064ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d11a      	bne.n	80064a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006482:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	1c9a      	adds	r2, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	621a      	str	r2, [r3, #32]
 8006496:	e00e      	b.n	80064b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	621a      	str	r2, [r3, #32]
 80064a2:	e008      	b.n	80064b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	1c59      	adds	r1, r3, #1
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6211      	str	r1, [r2, #32]
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29b      	uxth	r3, r3
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4619      	mov	r1, r3
 80064c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e000      	b.n	80064f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064ee:	2302      	movs	r3, #2
  }
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006512:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fe65 	bl	80061ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b22      	cmp	r3, #34	; 0x22
 800653e:	d171      	bne.n	8006624 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d123      	bne.n	8006592 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10e      	bne.n	8006576 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	1c9a      	adds	r2, r3, #2
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	629a      	str	r2, [r3, #40]	; 0x28
 8006574:	e029      	b.n	80065ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	b29b      	uxth	r3, r3
 800657e:	b2db      	uxtb	r3, r3
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
 8006590:	e01b      	b.n	80065ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6858      	ldr	r0, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6291      	str	r1, [r2, #40]	; 0x28
 80065aa:	b2c2      	uxtb	r2, r0
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e00c      	b.n	80065ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	1c58      	adds	r0, r3, #1
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	6288      	str	r0, [r1, #40]	; 0x28
 80065c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4619      	mov	r1, r3
 80065d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d120      	bne.n	8006620 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0220 	bic.w	r2, r2, #32
 80065ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fd fc96 	bl	8003f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e002      	b.n	8006626 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006672:	f023 030c 	bic.w	r3, r3, #12
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	430b      	orrs	r3, r1
 800667e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669e:	f040 818b 	bne.w	80069b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4ac1      	ldr	r2, [pc, #772]	; (80069ac <UART_SetConfig+0x37c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d005      	beq.n	80066b8 <UART_SetConfig+0x88>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4abf      	ldr	r2, [pc, #764]	; (80069b0 <UART_SetConfig+0x380>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	f040 80bd 	bne.w	8006832 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7ff f9de 	bl	8005a78 <HAL_RCC_GetPCLK2Freq>
 80066bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	461d      	mov	r5, r3
 80066c2:	f04f 0600 	mov.w	r6, #0
 80066c6:	46a8      	mov	r8, r5
 80066c8:	46b1      	mov	r9, r6
 80066ca:	eb18 0308 	adds.w	r3, r8, r8
 80066ce:	eb49 0409 	adc.w	r4, r9, r9
 80066d2:	4698      	mov	r8, r3
 80066d4:	46a1      	mov	r9, r4
 80066d6:	eb18 0805 	adds.w	r8, r8, r5
 80066da:	eb49 0906 	adc.w	r9, r9, r6
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066f2:	4688      	mov	r8, r1
 80066f4:	4691      	mov	r9, r2
 80066f6:	eb18 0005 	adds.w	r0, r8, r5
 80066fa:	eb49 0106 	adc.w	r1, r9, r6
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	461d      	mov	r5, r3
 8006704:	f04f 0600 	mov.w	r6, #0
 8006708:	196b      	adds	r3, r5, r5
 800670a:	eb46 0406 	adc.w	r4, r6, r6
 800670e:	461a      	mov	r2, r3
 8006710:	4623      	mov	r3, r4
 8006712:	f7fa fad1 	bl	8000cb8 <__aeabi_uldivmod>
 8006716:	4603      	mov	r3, r0
 8006718:	460c      	mov	r4, r1
 800671a:	461a      	mov	r2, r3
 800671c:	4ba5      	ldr	r3, [pc, #660]	; (80069b4 <UART_SetConfig+0x384>)
 800671e:	fba3 2302 	umull	r2, r3, r3, r2
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	461d      	mov	r5, r3
 800672c:	f04f 0600 	mov.w	r6, #0
 8006730:	46a9      	mov	r9, r5
 8006732:	46b2      	mov	sl, r6
 8006734:	eb19 0309 	adds.w	r3, r9, r9
 8006738:	eb4a 040a 	adc.w	r4, sl, sl
 800673c:	4699      	mov	r9, r3
 800673e:	46a2      	mov	sl, r4
 8006740:	eb19 0905 	adds.w	r9, r9, r5
 8006744:	eb4a 0a06 	adc.w	sl, sl, r6
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800675c:	4689      	mov	r9, r1
 800675e:	4692      	mov	sl, r2
 8006760:	eb19 0005 	adds.w	r0, r9, r5
 8006764:	eb4a 0106 	adc.w	r1, sl, r6
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	461d      	mov	r5, r3
 800676e:	f04f 0600 	mov.w	r6, #0
 8006772:	196b      	adds	r3, r5, r5
 8006774:	eb46 0406 	adc.w	r4, r6, r6
 8006778:	461a      	mov	r2, r3
 800677a:	4623      	mov	r3, r4
 800677c:	f7fa fa9c 	bl	8000cb8 <__aeabi_uldivmod>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	461a      	mov	r2, r3
 8006786:	4b8b      	ldr	r3, [pc, #556]	; (80069b4 <UART_SetConfig+0x384>)
 8006788:	fba3 1302 	umull	r1, r3, r3, r2
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	2164      	movs	r1, #100	; 0x64
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	3332      	adds	r3, #50	; 0x32
 800679a:	4a86      	ldr	r2, [pc, #536]	; (80069b4 <UART_SetConfig+0x384>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a8:	4498      	add	r8, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	461d      	mov	r5, r3
 80067ae:	f04f 0600 	mov.w	r6, #0
 80067b2:	46a9      	mov	r9, r5
 80067b4:	46b2      	mov	sl, r6
 80067b6:	eb19 0309 	adds.w	r3, r9, r9
 80067ba:	eb4a 040a 	adc.w	r4, sl, sl
 80067be:	4699      	mov	r9, r3
 80067c0:	46a2      	mov	sl, r4
 80067c2:	eb19 0905 	adds.w	r9, r9, r5
 80067c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80067ca:	f04f 0100 	mov.w	r1, #0
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067de:	4689      	mov	r9, r1
 80067e0:	4692      	mov	sl, r2
 80067e2:	eb19 0005 	adds.w	r0, r9, r5
 80067e6:	eb4a 0106 	adc.w	r1, sl, r6
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	461d      	mov	r5, r3
 80067f0:	f04f 0600 	mov.w	r6, #0
 80067f4:	196b      	adds	r3, r5, r5
 80067f6:	eb46 0406 	adc.w	r4, r6, r6
 80067fa:	461a      	mov	r2, r3
 80067fc:	4623      	mov	r3, r4
 80067fe:	f7fa fa5b 	bl	8000cb8 <__aeabi_uldivmod>
 8006802:	4603      	mov	r3, r0
 8006804:	460c      	mov	r4, r1
 8006806:	461a      	mov	r2, r3
 8006808:	4b6a      	ldr	r3, [pc, #424]	; (80069b4 <UART_SetConfig+0x384>)
 800680a:	fba3 1302 	umull	r1, r3, r3, r2
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	2164      	movs	r1, #100	; 0x64
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	3332      	adds	r3, #50	; 0x32
 800681c:	4a65      	ldr	r2, [pc, #404]	; (80069b4 <UART_SetConfig+0x384>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	f003 0207 	and.w	r2, r3, #7
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4442      	add	r2, r8
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	e26f      	b.n	8006d12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006832:	f7ff f90d 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 8006836:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	461d      	mov	r5, r3
 800683c:	f04f 0600 	mov.w	r6, #0
 8006840:	46a8      	mov	r8, r5
 8006842:	46b1      	mov	r9, r6
 8006844:	eb18 0308 	adds.w	r3, r8, r8
 8006848:	eb49 0409 	adc.w	r4, r9, r9
 800684c:	4698      	mov	r8, r3
 800684e:	46a1      	mov	r9, r4
 8006850:	eb18 0805 	adds.w	r8, r8, r5
 8006854:	eb49 0906 	adc.w	r9, r9, r6
 8006858:	f04f 0100 	mov.w	r1, #0
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006864:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006868:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800686c:	4688      	mov	r8, r1
 800686e:	4691      	mov	r9, r2
 8006870:	eb18 0005 	adds.w	r0, r8, r5
 8006874:	eb49 0106 	adc.w	r1, r9, r6
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	461d      	mov	r5, r3
 800687e:	f04f 0600 	mov.w	r6, #0
 8006882:	196b      	adds	r3, r5, r5
 8006884:	eb46 0406 	adc.w	r4, r6, r6
 8006888:	461a      	mov	r2, r3
 800688a:	4623      	mov	r3, r4
 800688c:	f7fa fa14 	bl	8000cb8 <__aeabi_uldivmod>
 8006890:	4603      	mov	r3, r0
 8006892:	460c      	mov	r4, r1
 8006894:	461a      	mov	r2, r3
 8006896:	4b47      	ldr	r3, [pc, #284]	; (80069b4 <UART_SetConfig+0x384>)
 8006898:	fba3 2302 	umull	r2, r3, r3, r2
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	461d      	mov	r5, r3
 80068a6:	f04f 0600 	mov.w	r6, #0
 80068aa:	46a9      	mov	r9, r5
 80068ac:	46b2      	mov	sl, r6
 80068ae:	eb19 0309 	adds.w	r3, r9, r9
 80068b2:	eb4a 040a 	adc.w	r4, sl, sl
 80068b6:	4699      	mov	r9, r3
 80068b8:	46a2      	mov	sl, r4
 80068ba:	eb19 0905 	adds.w	r9, r9, r5
 80068be:	eb4a 0a06 	adc.w	sl, sl, r6
 80068c2:	f04f 0100 	mov.w	r1, #0
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068d6:	4689      	mov	r9, r1
 80068d8:	4692      	mov	sl, r2
 80068da:	eb19 0005 	adds.w	r0, r9, r5
 80068de:	eb4a 0106 	adc.w	r1, sl, r6
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	461d      	mov	r5, r3
 80068e8:	f04f 0600 	mov.w	r6, #0
 80068ec:	196b      	adds	r3, r5, r5
 80068ee:	eb46 0406 	adc.w	r4, r6, r6
 80068f2:	461a      	mov	r2, r3
 80068f4:	4623      	mov	r3, r4
 80068f6:	f7fa f9df 	bl	8000cb8 <__aeabi_uldivmod>
 80068fa:	4603      	mov	r3, r0
 80068fc:	460c      	mov	r4, r1
 80068fe:	461a      	mov	r2, r3
 8006900:	4b2c      	ldr	r3, [pc, #176]	; (80069b4 <UART_SetConfig+0x384>)
 8006902:	fba3 1302 	umull	r1, r3, r3, r2
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	2164      	movs	r1, #100	; 0x64
 800690a:	fb01 f303 	mul.w	r3, r1, r3
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	3332      	adds	r3, #50	; 0x32
 8006914:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <UART_SetConfig+0x384>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006922:	4498      	add	r8, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	461d      	mov	r5, r3
 8006928:	f04f 0600 	mov.w	r6, #0
 800692c:	46a9      	mov	r9, r5
 800692e:	46b2      	mov	sl, r6
 8006930:	eb19 0309 	adds.w	r3, r9, r9
 8006934:	eb4a 040a 	adc.w	r4, sl, sl
 8006938:	4699      	mov	r9, r3
 800693a:	46a2      	mov	sl, r4
 800693c:	eb19 0905 	adds.w	r9, r9, r5
 8006940:	eb4a 0a06 	adc.w	sl, sl, r6
 8006944:	f04f 0100 	mov.w	r1, #0
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006950:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006954:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006958:	4689      	mov	r9, r1
 800695a:	4692      	mov	sl, r2
 800695c:	eb19 0005 	adds.w	r0, r9, r5
 8006960:	eb4a 0106 	adc.w	r1, sl, r6
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	461d      	mov	r5, r3
 800696a:	f04f 0600 	mov.w	r6, #0
 800696e:	196b      	adds	r3, r5, r5
 8006970:	eb46 0406 	adc.w	r4, r6, r6
 8006974:	461a      	mov	r2, r3
 8006976:	4623      	mov	r3, r4
 8006978:	f7fa f99e 	bl	8000cb8 <__aeabi_uldivmod>
 800697c:	4603      	mov	r3, r0
 800697e:	460c      	mov	r4, r1
 8006980:	461a      	mov	r2, r3
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <UART_SetConfig+0x384>)
 8006984:	fba3 1302 	umull	r1, r3, r3, r2
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	2164      	movs	r1, #100	; 0x64
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	3332      	adds	r3, #50	; 0x32
 8006996:	4a07      	ldr	r2, [pc, #28]	; (80069b4 <UART_SetConfig+0x384>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	f003 0207 	and.w	r2, r3, #7
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4442      	add	r2, r8
 80069a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069aa:	e1b2      	b.n	8006d12 <UART_SetConfig+0x6e2>
 80069ac:	40011000 	.word	0x40011000
 80069b0:	40011400 	.word	0x40011400
 80069b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4ad7      	ldr	r2, [pc, #860]	; (8006d1c <UART_SetConfig+0x6ec>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d005      	beq.n	80069ce <UART_SetConfig+0x39e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4ad6      	ldr	r2, [pc, #856]	; (8006d20 <UART_SetConfig+0x6f0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	f040 80d1 	bne.w	8006b70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069ce:	f7ff f853 	bl	8005a78 <HAL_RCC_GetPCLK2Freq>
 80069d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	469a      	mov	sl, r3
 80069d8:	f04f 0b00 	mov.w	fp, #0
 80069dc:	46d0      	mov	r8, sl
 80069de:	46d9      	mov	r9, fp
 80069e0:	eb18 0308 	adds.w	r3, r8, r8
 80069e4:	eb49 0409 	adc.w	r4, r9, r9
 80069e8:	4698      	mov	r8, r3
 80069ea:	46a1      	mov	r9, r4
 80069ec:	eb18 080a 	adds.w	r8, r8, sl
 80069f0:	eb49 090b 	adc.w	r9, r9, fp
 80069f4:	f04f 0100 	mov.w	r1, #0
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a08:	4688      	mov	r8, r1
 8006a0a:	4691      	mov	r9, r2
 8006a0c:	eb1a 0508 	adds.w	r5, sl, r8
 8006a10:	eb4b 0609 	adc.w	r6, fp, r9
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	f04f 0400 	mov.w	r4, #0
 8006a26:	0094      	lsls	r4, r2, #2
 8006a28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a2c:	008b      	lsls	r3, r1, #2
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4623      	mov	r3, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	4631      	mov	r1, r6
 8006a36:	f7fa f93f 	bl	8000cb8 <__aeabi_uldivmod>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4bb8      	ldr	r3, [pc, #736]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006a42:	fba3 2302 	umull	r2, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	469b      	mov	fp, r3
 8006a50:	f04f 0c00 	mov.w	ip, #0
 8006a54:	46d9      	mov	r9, fp
 8006a56:	46e2      	mov	sl, ip
 8006a58:	eb19 0309 	adds.w	r3, r9, r9
 8006a5c:	eb4a 040a 	adc.w	r4, sl, sl
 8006a60:	4699      	mov	r9, r3
 8006a62:	46a2      	mov	sl, r4
 8006a64:	eb19 090b 	adds.w	r9, r9, fp
 8006a68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a6c:	f04f 0100 	mov.w	r1, #0
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a80:	4689      	mov	r9, r1
 8006a82:	4692      	mov	sl, r2
 8006a84:	eb1b 0509 	adds.w	r5, fp, r9
 8006a88:	eb4c 060a 	adc.w	r6, ip, sl
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4619      	mov	r1, r3
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	f04f 0400 	mov.w	r4, #0
 8006a9e:	0094      	lsls	r4, r2, #2
 8006aa0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aa4:	008b      	lsls	r3, r1, #2
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	4631      	mov	r1, r6
 8006aae:	f7fa f903 	bl	8000cb8 <__aeabi_uldivmod>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4b9a      	ldr	r3, [pc, #616]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006aba:	fba3 1302 	umull	r1, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2164      	movs	r1, #100	; 0x64
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	3332      	adds	r3, #50	; 0x32
 8006acc:	4a95      	ldr	r2, [pc, #596]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ad8:	4498      	add	r8, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	469b      	mov	fp, r3
 8006ade:	f04f 0c00 	mov.w	ip, #0
 8006ae2:	46d9      	mov	r9, fp
 8006ae4:	46e2      	mov	sl, ip
 8006ae6:	eb19 0309 	adds.w	r3, r9, r9
 8006aea:	eb4a 040a 	adc.w	r4, sl, sl
 8006aee:	4699      	mov	r9, r3
 8006af0:	46a2      	mov	sl, r4
 8006af2:	eb19 090b 	adds.w	r9, r9, fp
 8006af6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006afa:	f04f 0100 	mov.w	r1, #0
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b0e:	4689      	mov	r9, r1
 8006b10:	4692      	mov	sl, r2
 8006b12:	eb1b 0509 	adds.w	r5, fp, r9
 8006b16:	eb4c 060a 	adc.w	r6, ip, sl
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	f04f 0400 	mov.w	r4, #0
 8006b2c:	0094      	lsls	r4, r2, #2
 8006b2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b32:	008b      	lsls	r3, r1, #2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4623      	mov	r3, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	f7fa f8bc 	bl	8000cb8 <__aeabi_uldivmod>
 8006b40:	4603      	mov	r3, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b77      	ldr	r3, [pc, #476]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006b48:	fba3 1302 	umull	r1, r3, r3, r2
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	2164      	movs	r1, #100	; 0x64
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	3332      	adds	r3, #50	; 0x32
 8006b5a:	4a72      	ldr	r2, [pc, #456]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	f003 020f 	and.w	r2, r3, #15
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4442      	add	r2, r8
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	e0d0      	b.n	8006d12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fe ff6e 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 8006b74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f04f 0b00 	mov.w	fp, #0
 8006b7e:	46d0      	mov	r8, sl
 8006b80:	46d9      	mov	r9, fp
 8006b82:	eb18 0308 	adds.w	r3, r8, r8
 8006b86:	eb49 0409 	adc.w	r4, r9, r9
 8006b8a:	4698      	mov	r8, r3
 8006b8c:	46a1      	mov	r9, r4
 8006b8e:	eb18 080a 	adds.w	r8, r8, sl
 8006b92:	eb49 090b 	adc.w	r9, r9, fp
 8006b96:	f04f 0100 	mov.w	r1, #0
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ba2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ba6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006baa:	4688      	mov	r8, r1
 8006bac:	4691      	mov	r9, r2
 8006bae:	eb1a 0508 	adds.w	r5, sl, r8
 8006bb2:	eb4b 0609 	adc.w	r6, fp, r9
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	f04f 0400 	mov.w	r4, #0
 8006bc8:	0094      	lsls	r4, r2, #2
 8006bca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bce:	008b      	lsls	r3, r1, #2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4623      	mov	r3, r4
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	f7fa f86e 	bl	8000cb8 <__aeabi_uldivmod>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	461a      	mov	r2, r3
 8006be2:	4b50      	ldr	r3, [pc, #320]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006be4:	fba3 2302 	umull	r2, r3, r3, r2
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	469b      	mov	fp, r3
 8006bf2:	f04f 0c00 	mov.w	ip, #0
 8006bf6:	46d9      	mov	r9, fp
 8006bf8:	46e2      	mov	sl, ip
 8006bfa:	eb19 0309 	adds.w	r3, r9, r9
 8006bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8006c02:	4699      	mov	r9, r3
 8006c04:	46a2      	mov	sl, r4
 8006c06:	eb19 090b 	adds.w	r9, r9, fp
 8006c0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c0e:	f04f 0100 	mov.w	r1, #0
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c22:	4689      	mov	r9, r1
 8006c24:	4692      	mov	sl, r2
 8006c26:	eb1b 0509 	adds.w	r5, fp, r9
 8006c2a:	eb4c 060a 	adc.w	r6, ip, sl
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4619      	mov	r1, r3
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	f04f 0400 	mov.w	r4, #0
 8006c40:	0094      	lsls	r4, r2, #2
 8006c42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c46:	008b      	lsls	r3, r1, #2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	4631      	mov	r1, r6
 8006c50:	f7fa f832 	bl	8000cb8 <__aeabi_uldivmod>
 8006c54:	4603      	mov	r3, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	2164      	movs	r1, #100	; 0x64
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	3332      	adds	r3, #50	; 0x32
 8006c6e:	4a2d      	ldr	r2, [pc, #180]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006c70:	fba2 2303 	umull	r2, r3, r2, r3
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c7a:	4498      	add	r8, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	469b      	mov	fp, r3
 8006c80:	f04f 0c00 	mov.w	ip, #0
 8006c84:	46d9      	mov	r9, fp
 8006c86:	46e2      	mov	sl, ip
 8006c88:	eb19 0309 	adds.w	r3, r9, r9
 8006c8c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c90:	4699      	mov	r9, r3
 8006c92:	46a2      	mov	sl, r4
 8006c94:	eb19 090b 	adds.w	r9, r9, fp
 8006c98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	4692      	mov	sl, r2
 8006cb4:	eb1b 0509 	adds.w	r5, fp, r9
 8006cb8:	eb4c 060a 	adc.w	r6, ip, sl
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	f04f 0400 	mov.w	r4, #0
 8006cce:	0094      	lsls	r4, r2, #2
 8006cd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cd4:	008b      	lsls	r3, r1, #2
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4623      	mov	r3, r4
 8006cda:	4628      	mov	r0, r5
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f7f9 ffeb 	bl	8000cb8 <__aeabi_uldivmod>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006cea:	fba3 1302 	umull	r1, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2164      	movs	r1, #100	; 0x64
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	3332      	adds	r3, #50	; 0x32
 8006cfc:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <UART_SetConfig+0x6f4>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4442      	add	r2, r8
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	e7ff      	b.n	8006d12 <UART_SetConfig+0x6e2>
 8006d12:	bf00      	nop
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	40011000 	.word	0x40011000
 8006d20:	40011400 	.word	0x40011400
 8006d24:	51eb851f 	.word	0x51eb851f

08006d28 <main>:




int main(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  hwInit();
 8006d2c:	f7fd f9f2 	bl	8004114 <hwInit>
  apInit();
 8006d30:	f7fa f942 	bl	8000fb8 <apInit>

  apMain();
 8006d34:	f7fa f954 	bl	8000fe0 <apMain>

  return 0;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	; (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000034 	.word	0x20000034

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4e0d      	ldr	r6, [pc, #52]	; (8006d84 <__libc_init_array+0x38>)
 8006d50:	4c0d      	ldr	r4, [pc, #52]	; (8006d88 <__libc_init_array+0x3c>)
 8006d52:	1ba4      	subs	r4, r4, r6
 8006d54:	10a4      	asrs	r4, r4, #2
 8006d56:	2500      	movs	r5, #0
 8006d58:	42a5      	cmp	r5, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	4e0b      	ldr	r6, [pc, #44]	; (8006d8c <__libc_init_array+0x40>)
 8006d5e:	4c0c      	ldr	r4, [pc, #48]	; (8006d90 <__libc_init_array+0x44>)
 8006d60:	f002 fae6 	bl	8009330 <_init>
 8006d64:	1ba4      	subs	r4, r4, r6
 8006d66:	10a4      	asrs	r4, r4, #2
 8006d68:	2500      	movs	r5, #0
 8006d6a:	42a5      	cmp	r5, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d74:	4798      	blx	r3
 8006d76:	3501      	adds	r5, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d7e:	4798      	blx	r3
 8006d80:	3501      	adds	r5, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	08009930 	.word	0x08009930
 8006d88:	08009930 	.word	0x08009930
 8006d8c:	08009930 	.word	0x08009930
 8006d90:	08009934 	.word	0x08009934

08006d94 <memcpy>:
 8006d94:	b510      	push	{r4, lr}
 8006d96:	1e43      	subs	r3, r0, #1
 8006d98:	440a      	add	r2, r1
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	d100      	bne.n	8006da0 <memcpy+0xc>
 8006d9e:	bd10      	pop	{r4, pc}
 8006da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da8:	e7f7      	b.n	8006d9a <memcpy+0x6>

08006daa <memset>:
 8006daa:	4402      	add	r2, r0
 8006dac:	4603      	mov	r3, r0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d100      	bne.n	8006db4 <memset+0xa>
 8006db2:	4770      	bx	lr
 8006db4:	f803 1b01 	strb.w	r1, [r3], #1
 8006db8:	e7f9      	b.n	8006dae <memset+0x4>

08006dba <strcpy>:
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc0:	f803 2b01 	strb.w	r2, [r3], #1
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	d1f9      	bne.n	8006dbc <strcpy+0x2>
 8006dc8:	4770      	bx	lr

08006dca <sulp>:
 8006dca:	b570      	push	{r4, r5, r6, lr}
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	ec45 4b10 	vmov	d0, r4, r5
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	f001 fd5f 	bl	8008898 <__ulp>
 8006dda:	ec51 0b10 	vmov	r0, r1, d0
 8006dde:	b17e      	cbz	r6, 8006e00 <sulp+0x36>
 8006de0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006de4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dd09      	ble.n	8006e00 <sulp+0x36>
 8006dec:	051b      	lsls	r3, r3, #20
 8006dee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006df2:	2400      	movs	r4, #0
 8006df4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	f7f9 fc14 	bl	8000628 <__aeabi_dmul>
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	0000      	movs	r0, r0
 8006e04:	0000      	movs	r0, r0
	...

08006e08 <_strtod_l>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	461f      	mov	r7, r3
 8006e0e:	b0a1      	sub	sp, #132	; 0x84
 8006e10:	2300      	movs	r3, #0
 8006e12:	4681      	mov	r9, r0
 8006e14:	4638      	mov	r0, r7
 8006e16:	460e      	mov	r6, r1
 8006e18:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e1a:	931c      	str	r3, [sp, #112]	; 0x70
 8006e1c:	f001 fa5d 	bl	80082da <__localeconv_l>
 8006e20:	4680      	mov	r8, r0
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	f7f9 f9e6 	bl	80001f4 <strlen>
 8006e28:	f04f 0a00 	mov.w	sl, #0
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	f04f 0b00 	mov.w	fp, #0
 8006e32:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	2a0d      	cmp	r2, #13
 8006e3a:	d832      	bhi.n	8006ea2 <_strtod_l+0x9a>
 8006e3c:	2a09      	cmp	r2, #9
 8006e3e:	d236      	bcs.n	8006eae <_strtod_l+0xa6>
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d03e      	beq.n	8006ec2 <_strtod_l+0xba>
 8006e44:	2300      	movs	r3, #0
 8006e46:	930d      	str	r3, [sp, #52]	; 0x34
 8006e48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006e4a:	782b      	ldrb	r3, [r5, #0]
 8006e4c:	2b30      	cmp	r3, #48	; 0x30
 8006e4e:	f040 80ac 	bne.w	8006faa <_strtod_l+0x1a2>
 8006e52:	786b      	ldrb	r3, [r5, #1]
 8006e54:	2b58      	cmp	r3, #88	; 0x58
 8006e56:	d001      	beq.n	8006e5c <_strtod_l+0x54>
 8006e58:	2b78      	cmp	r3, #120	; 0x78
 8006e5a:	d167      	bne.n	8006f2c <_strtod_l+0x124>
 8006e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	ab1c      	add	r3, sp, #112	; 0x70
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	9702      	str	r7, [sp, #8]
 8006e66:	ab1d      	add	r3, sp, #116	; 0x74
 8006e68:	4a88      	ldr	r2, [pc, #544]	; (800708c <_strtod_l+0x284>)
 8006e6a:	a91b      	add	r1, sp, #108	; 0x6c
 8006e6c:	4648      	mov	r0, r9
 8006e6e:	f000 ff5a 	bl	8007d26 <__gethex>
 8006e72:	f010 0407 	ands.w	r4, r0, #7
 8006e76:	4606      	mov	r6, r0
 8006e78:	d005      	beq.n	8006e86 <_strtod_l+0x7e>
 8006e7a:	2c06      	cmp	r4, #6
 8006e7c:	d12b      	bne.n	8006ed6 <_strtod_l+0xce>
 8006e7e:	3501      	adds	r5, #1
 8006e80:	2300      	movs	r3, #0
 8006e82:	951b      	str	r5, [sp, #108]	; 0x6c
 8006e84:	930d      	str	r3, [sp, #52]	; 0x34
 8006e86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 859a 	bne.w	80079c2 <_strtod_l+0xbba>
 8006e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e90:	b1e3      	cbz	r3, 8006ecc <_strtod_l+0xc4>
 8006e92:	4652      	mov	r2, sl
 8006e94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e98:	ec43 2b10 	vmov	d0, r2, r3
 8006e9c:	b021      	add	sp, #132	; 0x84
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	2a2b      	cmp	r2, #43	; 0x2b
 8006ea4:	d015      	beq.n	8006ed2 <_strtod_l+0xca>
 8006ea6:	2a2d      	cmp	r2, #45	; 0x2d
 8006ea8:	d004      	beq.n	8006eb4 <_strtod_l+0xac>
 8006eaa:	2a20      	cmp	r2, #32
 8006eac:	d1ca      	bne.n	8006e44 <_strtod_l+0x3c>
 8006eae:	3301      	adds	r3, #1
 8006eb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006eb2:	e7bf      	b.n	8006e34 <_strtod_l+0x2c>
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	920d      	str	r2, [sp, #52]	; 0x34
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1c2      	bne.n	8006e48 <_strtod_l+0x40>
 8006ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ec4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8579 	bne.w	80079be <_strtod_l+0xbb6>
 8006ecc:	4652      	mov	r2, sl
 8006ece:	465b      	mov	r3, fp
 8006ed0:	e7e2      	b.n	8006e98 <_strtod_l+0x90>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	e7ef      	b.n	8006eb6 <_strtod_l+0xae>
 8006ed6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ed8:	b13a      	cbz	r2, 8006eea <_strtod_l+0xe2>
 8006eda:	2135      	movs	r1, #53	; 0x35
 8006edc:	a81e      	add	r0, sp, #120	; 0x78
 8006ede:	f001 fdd3 	bl	8008a88 <__copybits>
 8006ee2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	f001 fa40 	bl	800836a <_Bfree>
 8006eea:	3c01      	subs	r4, #1
 8006eec:	2c04      	cmp	r4, #4
 8006eee:	d806      	bhi.n	8006efe <_strtod_l+0xf6>
 8006ef0:	e8df f004 	tbb	[pc, r4]
 8006ef4:	1714030a 	.word	0x1714030a
 8006ef8:	0a          	.byte	0x0a
 8006ef9:	00          	.byte	0x00
 8006efa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006efe:	0730      	lsls	r0, r6, #28
 8006f00:	d5c1      	bpl.n	8006e86 <_strtod_l+0x7e>
 8006f02:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f06:	e7be      	b.n	8006e86 <_strtod_l+0x7e>
 8006f08:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006f0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f12:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f1a:	e7f0      	b.n	8006efe <_strtod_l+0xf6>
 8006f1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007090 <_strtod_l+0x288>
 8006f20:	e7ed      	b.n	8006efe <_strtod_l+0xf6>
 8006f22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006f26:	f04f 3aff 	mov.w	sl, #4294967295
 8006f2a:	e7e8      	b.n	8006efe <_strtod_l+0xf6>
 8006f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d0f9      	beq.n	8006f2c <_strtod_l+0x124>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0a4      	beq.n	8006e86 <_strtod_l+0x7e>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	2500      	movs	r5, #0
 8006f40:	9306      	str	r3, [sp, #24]
 8006f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f44:	9308      	str	r3, [sp, #32]
 8006f46:	9507      	str	r5, [sp, #28]
 8006f48:	9505      	str	r5, [sp, #20]
 8006f4a:	220a      	movs	r2, #10
 8006f4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006f4e:	7807      	ldrb	r7, [r0, #0]
 8006f50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006f54:	b2d9      	uxtb	r1, r3
 8006f56:	2909      	cmp	r1, #9
 8006f58:	d929      	bls.n	8006fae <_strtod_l+0x1a6>
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	f8d8 1000 	ldr.w	r1, [r8]
 8006f60:	f002 f926 	bl	80091b0 <strncmp>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d031      	beq.n	8006fcc <_strtod_l+0x1c4>
 8006f68:	2000      	movs	r0, #0
 8006f6a:	9c05      	ldr	r4, [sp, #20]
 8006f6c:	9004      	str	r0, [sp, #16]
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4602      	mov	r2, r0
 8006f72:	2b65      	cmp	r3, #101	; 0x65
 8006f74:	d001      	beq.n	8006f7a <_strtod_l+0x172>
 8006f76:	2b45      	cmp	r3, #69	; 0x45
 8006f78:	d114      	bne.n	8006fa4 <_strtod_l+0x19c>
 8006f7a:	b924      	cbnz	r4, 8006f86 <_strtod_l+0x17e>
 8006f7c:	b910      	cbnz	r0, 8006f84 <_strtod_l+0x17c>
 8006f7e:	9b06      	ldr	r3, [sp, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d09e      	beq.n	8006ec2 <_strtod_l+0xba>
 8006f84:	2400      	movs	r4, #0
 8006f86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006f88:	1c73      	adds	r3, r6, #1
 8006f8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f8c:	7873      	ldrb	r3, [r6, #1]
 8006f8e:	2b2b      	cmp	r3, #43	; 0x2b
 8006f90:	d078      	beq.n	8007084 <_strtod_l+0x27c>
 8006f92:	2b2d      	cmp	r3, #45	; 0x2d
 8006f94:	d070      	beq.n	8007078 <_strtod_l+0x270>
 8006f96:	f04f 0c00 	mov.w	ip, #0
 8006f9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006f9e:	2f09      	cmp	r7, #9
 8006fa0:	d97c      	bls.n	800709c <_strtod_l+0x294>
 8006fa2:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fa4:	f04f 0e00 	mov.w	lr, #0
 8006fa8:	e09a      	b.n	80070e0 <_strtod_l+0x2d8>
 8006faa:	2300      	movs	r3, #0
 8006fac:	e7c7      	b.n	8006f3e <_strtod_l+0x136>
 8006fae:	9905      	ldr	r1, [sp, #20]
 8006fb0:	2908      	cmp	r1, #8
 8006fb2:	bfdd      	ittte	le
 8006fb4:	9907      	ldrle	r1, [sp, #28]
 8006fb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fba:	9307      	strle	r3, [sp, #28]
 8006fbc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006fc0:	9b05      	ldr	r3, [sp, #20]
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	901b      	str	r0, [sp, #108]	; 0x6c
 8006fca:	e7bf      	b.n	8006f4c <_strtod_l+0x144>
 8006fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fce:	191a      	adds	r2, r3, r4
 8006fd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006fd2:	9a05      	ldr	r2, [sp, #20]
 8006fd4:	5d1b      	ldrb	r3, [r3, r4]
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d037      	beq.n	800704a <_strtod_l+0x242>
 8006fda:	9c05      	ldr	r4, [sp, #20]
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006fe2:	2909      	cmp	r1, #9
 8006fe4:	d913      	bls.n	800700e <_strtod_l+0x206>
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	9104      	str	r1, [sp, #16]
 8006fea:	e7c2      	b.n	8006f72 <_strtod_l+0x16a>
 8006fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	2b30      	cmp	r3, #48	; 0x30
 8006ff8:	d0f8      	beq.n	8006fec <_strtod_l+0x1e4>
 8006ffa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006ffe:	2a08      	cmp	r2, #8
 8007000:	f200 84e4 	bhi.w	80079cc <_strtod_l+0xbc4>
 8007004:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007006:	9208      	str	r2, [sp, #32]
 8007008:	4602      	mov	r2, r0
 800700a:	2000      	movs	r0, #0
 800700c:	4604      	mov	r4, r0
 800700e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007012:	f100 0101 	add.w	r1, r0, #1
 8007016:	d012      	beq.n	800703e <_strtod_l+0x236>
 8007018:	440a      	add	r2, r1
 800701a:	eb00 0c04 	add.w	ip, r0, r4
 800701e:	4621      	mov	r1, r4
 8007020:	270a      	movs	r7, #10
 8007022:	458c      	cmp	ip, r1
 8007024:	d113      	bne.n	800704e <_strtod_l+0x246>
 8007026:	1821      	adds	r1, r4, r0
 8007028:	2908      	cmp	r1, #8
 800702a:	f104 0401 	add.w	r4, r4, #1
 800702e:	4404      	add	r4, r0
 8007030:	dc19      	bgt.n	8007066 <_strtod_l+0x25e>
 8007032:	9b07      	ldr	r3, [sp, #28]
 8007034:	210a      	movs	r1, #10
 8007036:	fb01 e303 	mla	r3, r1, r3, lr
 800703a:	9307      	str	r3, [sp, #28]
 800703c:	2100      	movs	r1, #0
 800703e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007040:	1c58      	adds	r0, r3, #1
 8007042:	901b      	str	r0, [sp, #108]	; 0x6c
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	4608      	mov	r0, r1
 8007048:	e7c9      	b.n	8006fde <_strtod_l+0x1d6>
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	e7d3      	b.n	8006ff6 <_strtod_l+0x1ee>
 800704e:	2908      	cmp	r1, #8
 8007050:	f101 0101 	add.w	r1, r1, #1
 8007054:	dc03      	bgt.n	800705e <_strtod_l+0x256>
 8007056:	9b07      	ldr	r3, [sp, #28]
 8007058:	437b      	muls	r3, r7
 800705a:	9307      	str	r3, [sp, #28]
 800705c:	e7e1      	b.n	8007022 <_strtod_l+0x21a>
 800705e:	2910      	cmp	r1, #16
 8007060:	bfd8      	it	le
 8007062:	437d      	mulle	r5, r7
 8007064:	e7dd      	b.n	8007022 <_strtod_l+0x21a>
 8007066:	2c10      	cmp	r4, #16
 8007068:	bfdc      	itt	le
 800706a:	210a      	movle	r1, #10
 800706c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007070:	e7e4      	b.n	800703c <_strtod_l+0x234>
 8007072:	2301      	movs	r3, #1
 8007074:	9304      	str	r3, [sp, #16]
 8007076:	e781      	b.n	8006f7c <_strtod_l+0x174>
 8007078:	f04f 0c01 	mov.w	ip, #1
 800707c:	1cb3      	adds	r3, r6, #2
 800707e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007080:	78b3      	ldrb	r3, [r6, #2]
 8007082:	e78a      	b.n	8006f9a <_strtod_l+0x192>
 8007084:	f04f 0c00 	mov.w	ip, #0
 8007088:	e7f8      	b.n	800707c <_strtod_l+0x274>
 800708a:	bf00      	nop
 800708c:	08009694 	.word	0x08009694
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007096:	1c5f      	adds	r7, r3, #1
 8007098:	971b      	str	r7, [sp, #108]	; 0x6c
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b30      	cmp	r3, #48	; 0x30
 800709e:	d0f9      	beq.n	8007094 <_strtod_l+0x28c>
 80070a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80070a4:	2f08      	cmp	r7, #8
 80070a6:	f63f af7d 	bhi.w	8006fa4 <_strtod_l+0x19c>
 80070aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80070ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070b0:	930a      	str	r3, [sp, #40]	; 0x28
 80070b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070b4:	1c5f      	adds	r7, r3, #1
 80070b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80070be:	f1b8 0f09 	cmp.w	r8, #9
 80070c2:	d937      	bls.n	8007134 <_strtod_l+0x32c>
 80070c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070c6:	1a7f      	subs	r7, r7, r1
 80070c8:	2f08      	cmp	r7, #8
 80070ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80070ce:	dc37      	bgt.n	8007140 <_strtod_l+0x338>
 80070d0:	45be      	cmp	lr, r7
 80070d2:	bfa8      	it	ge
 80070d4:	46be      	movge	lr, r7
 80070d6:	f1bc 0f00 	cmp.w	ip, #0
 80070da:	d001      	beq.n	80070e0 <_strtod_l+0x2d8>
 80070dc:	f1ce 0e00 	rsb	lr, lr, #0
 80070e0:	2c00      	cmp	r4, #0
 80070e2:	d151      	bne.n	8007188 <_strtod_l+0x380>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f47f aece 	bne.w	8006e86 <_strtod_l+0x7e>
 80070ea:	9a06      	ldr	r2, [sp, #24]
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	f47f aeca 	bne.w	8006e86 <_strtod_l+0x7e>
 80070f2:	9a04      	ldr	r2, [sp, #16]
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	f47f aee4 	bne.w	8006ec2 <_strtod_l+0xba>
 80070fa:	2b4e      	cmp	r3, #78	; 0x4e
 80070fc:	d027      	beq.n	800714e <_strtod_l+0x346>
 80070fe:	dc21      	bgt.n	8007144 <_strtod_l+0x33c>
 8007100:	2b49      	cmp	r3, #73	; 0x49
 8007102:	f47f aede 	bne.w	8006ec2 <_strtod_l+0xba>
 8007106:	49a0      	ldr	r1, [pc, #640]	; (8007388 <_strtod_l+0x580>)
 8007108:	a81b      	add	r0, sp, #108	; 0x6c
 800710a:	f001 f83f 	bl	800818c <__match>
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f aed7 	beq.w	8006ec2 <_strtod_l+0xba>
 8007114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007116:	499d      	ldr	r1, [pc, #628]	; (800738c <_strtod_l+0x584>)
 8007118:	3b01      	subs	r3, #1
 800711a:	a81b      	add	r0, sp, #108	; 0x6c
 800711c:	931b      	str	r3, [sp, #108]	; 0x6c
 800711e:	f001 f835 	bl	800818c <__match>
 8007122:	b910      	cbnz	r0, 800712a <_strtod_l+0x322>
 8007124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007126:	3301      	adds	r3, #1
 8007128:	931b      	str	r3, [sp, #108]	; 0x6c
 800712a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80073a0 <_strtod_l+0x598>
 800712e:	f04f 0a00 	mov.w	sl, #0
 8007132:	e6a8      	b.n	8006e86 <_strtod_l+0x7e>
 8007134:	210a      	movs	r1, #10
 8007136:	fb01 3e0e 	mla	lr, r1, lr, r3
 800713a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800713e:	e7b8      	b.n	80070b2 <_strtod_l+0x2aa>
 8007140:	46be      	mov	lr, r7
 8007142:	e7c8      	b.n	80070d6 <_strtod_l+0x2ce>
 8007144:	2b69      	cmp	r3, #105	; 0x69
 8007146:	d0de      	beq.n	8007106 <_strtod_l+0x2fe>
 8007148:	2b6e      	cmp	r3, #110	; 0x6e
 800714a:	f47f aeba 	bne.w	8006ec2 <_strtod_l+0xba>
 800714e:	4990      	ldr	r1, [pc, #576]	; (8007390 <_strtod_l+0x588>)
 8007150:	a81b      	add	r0, sp, #108	; 0x6c
 8007152:	f001 f81b 	bl	800818c <__match>
 8007156:	2800      	cmp	r0, #0
 8007158:	f43f aeb3 	beq.w	8006ec2 <_strtod_l+0xba>
 800715c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b28      	cmp	r3, #40	; 0x28
 8007162:	d10e      	bne.n	8007182 <_strtod_l+0x37a>
 8007164:	aa1e      	add	r2, sp, #120	; 0x78
 8007166:	498b      	ldr	r1, [pc, #556]	; (8007394 <_strtod_l+0x58c>)
 8007168:	a81b      	add	r0, sp, #108	; 0x6c
 800716a:	f001 f823 	bl	80081b4 <__hexnan>
 800716e:	2805      	cmp	r0, #5
 8007170:	d107      	bne.n	8007182 <_strtod_l+0x37a>
 8007172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007174:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007178:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800717c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007180:	e681      	b.n	8006e86 <_strtod_l+0x7e>
 8007182:	f8df b224 	ldr.w	fp, [pc, #548]	; 80073a8 <_strtod_l+0x5a0>
 8007186:	e7d2      	b.n	800712e <_strtod_l+0x326>
 8007188:	ebae 0302 	sub.w	r3, lr, r2
 800718c:	9306      	str	r3, [sp, #24]
 800718e:	9b05      	ldr	r3, [sp, #20]
 8007190:	9807      	ldr	r0, [sp, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf08      	it	eq
 8007196:	4623      	moveq	r3, r4
 8007198:	2c10      	cmp	r4, #16
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	46a0      	mov	r8, r4
 800719e:	bfa8      	it	ge
 80071a0:	f04f 0810 	movge.w	r8, #16
 80071a4:	f7f9 f9c6 	bl	8000534 <__aeabi_ui2d>
 80071a8:	2c09      	cmp	r4, #9
 80071aa:	4682      	mov	sl, r0
 80071ac:	468b      	mov	fp, r1
 80071ae:	dc13      	bgt.n	80071d8 <_strtod_l+0x3d0>
 80071b0:	9b06      	ldr	r3, [sp, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f43f ae67 	beq.w	8006e86 <_strtod_l+0x7e>
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	dd7a      	ble.n	80072b2 <_strtod_l+0x4aa>
 80071bc:	2b16      	cmp	r3, #22
 80071be:	dc61      	bgt.n	8007284 <_strtod_l+0x47c>
 80071c0:	4a75      	ldr	r2, [pc, #468]	; (8007398 <_strtod_l+0x590>)
 80071c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80071c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80071ca:	4652      	mov	r2, sl
 80071cc:	465b      	mov	r3, fp
 80071ce:	f7f9 fa2b 	bl	8000628 <__aeabi_dmul>
 80071d2:	4682      	mov	sl, r0
 80071d4:	468b      	mov	fp, r1
 80071d6:	e656      	b.n	8006e86 <_strtod_l+0x7e>
 80071d8:	4b6f      	ldr	r3, [pc, #444]	; (8007398 <_strtod_l+0x590>)
 80071da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80071de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071e2:	f7f9 fa21 	bl	8000628 <__aeabi_dmul>
 80071e6:	4606      	mov	r6, r0
 80071e8:	4628      	mov	r0, r5
 80071ea:	460f      	mov	r7, r1
 80071ec:	f7f9 f9a2 	bl	8000534 <__aeabi_ui2d>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4630      	mov	r0, r6
 80071f6:	4639      	mov	r1, r7
 80071f8:	f7f9 f860 	bl	80002bc <__adddf3>
 80071fc:	2c0f      	cmp	r4, #15
 80071fe:	4682      	mov	sl, r0
 8007200:	468b      	mov	fp, r1
 8007202:	ddd5      	ble.n	80071b0 <_strtod_l+0x3a8>
 8007204:	9b06      	ldr	r3, [sp, #24]
 8007206:	eba4 0808 	sub.w	r8, r4, r8
 800720a:	4498      	add	r8, r3
 800720c:	f1b8 0f00 	cmp.w	r8, #0
 8007210:	f340 8096 	ble.w	8007340 <_strtod_l+0x538>
 8007214:	f018 030f 	ands.w	r3, r8, #15
 8007218:	d00a      	beq.n	8007230 <_strtod_l+0x428>
 800721a:	495f      	ldr	r1, [pc, #380]	; (8007398 <_strtod_l+0x590>)
 800721c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007220:	4652      	mov	r2, sl
 8007222:	465b      	mov	r3, fp
 8007224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007228:	f7f9 f9fe 	bl	8000628 <__aeabi_dmul>
 800722c:	4682      	mov	sl, r0
 800722e:	468b      	mov	fp, r1
 8007230:	f038 080f 	bics.w	r8, r8, #15
 8007234:	d073      	beq.n	800731e <_strtod_l+0x516>
 8007236:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800723a:	dd47      	ble.n	80072cc <_strtod_l+0x4c4>
 800723c:	2400      	movs	r4, #0
 800723e:	46a0      	mov	r8, r4
 8007240:	9407      	str	r4, [sp, #28]
 8007242:	9405      	str	r4, [sp, #20]
 8007244:	2322      	movs	r3, #34	; 0x22
 8007246:	f8df b158 	ldr.w	fp, [pc, #344]	; 80073a0 <_strtod_l+0x598>
 800724a:	f8c9 3000 	str.w	r3, [r9]
 800724e:	f04f 0a00 	mov.w	sl, #0
 8007252:	9b07      	ldr	r3, [sp, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f43f ae16 	beq.w	8006e86 <_strtod_l+0x7e>
 800725a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800725c:	4648      	mov	r0, r9
 800725e:	f001 f884 	bl	800836a <_Bfree>
 8007262:	9905      	ldr	r1, [sp, #20]
 8007264:	4648      	mov	r0, r9
 8007266:	f001 f880 	bl	800836a <_Bfree>
 800726a:	4641      	mov	r1, r8
 800726c:	4648      	mov	r0, r9
 800726e:	f001 f87c 	bl	800836a <_Bfree>
 8007272:	9907      	ldr	r1, [sp, #28]
 8007274:	4648      	mov	r0, r9
 8007276:	f001 f878 	bl	800836a <_Bfree>
 800727a:	4621      	mov	r1, r4
 800727c:	4648      	mov	r0, r9
 800727e:	f001 f874 	bl	800836a <_Bfree>
 8007282:	e600      	b.n	8006e86 <_strtod_l+0x7e>
 8007284:	9a06      	ldr	r2, [sp, #24]
 8007286:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800728a:	4293      	cmp	r3, r2
 800728c:	dbba      	blt.n	8007204 <_strtod_l+0x3fc>
 800728e:	4d42      	ldr	r5, [pc, #264]	; (8007398 <_strtod_l+0x590>)
 8007290:	f1c4 040f 	rsb	r4, r4, #15
 8007294:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007298:	4652      	mov	r2, sl
 800729a:	465b      	mov	r3, fp
 800729c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a0:	f7f9 f9c2 	bl	8000628 <__aeabi_dmul>
 80072a4:	9b06      	ldr	r3, [sp, #24]
 80072a6:	1b1c      	subs	r4, r3, r4
 80072a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80072ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072b0:	e78d      	b.n	80071ce <_strtod_l+0x3c6>
 80072b2:	f113 0f16 	cmn.w	r3, #22
 80072b6:	dba5      	blt.n	8007204 <_strtod_l+0x3fc>
 80072b8:	4a37      	ldr	r2, [pc, #220]	; (8007398 <_strtod_l+0x590>)
 80072ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80072be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80072c2:	4650      	mov	r0, sl
 80072c4:	4659      	mov	r1, fp
 80072c6:	f7f9 fad9 	bl	800087c <__aeabi_ddiv>
 80072ca:	e782      	b.n	80071d2 <_strtod_l+0x3ca>
 80072cc:	2300      	movs	r3, #0
 80072ce:	4e33      	ldr	r6, [pc, #204]	; (800739c <_strtod_l+0x594>)
 80072d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80072d4:	4650      	mov	r0, sl
 80072d6:	4659      	mov	r1, fp
 80072d8:	461d      	mov	r5, r3
 80072da:	f1b8 0f01 	cmp.w	r8, #1
 80072de:	dc21      	bgt.n	8007324 <_strtod_l+0x51c>
 80072e0:	b10b      	cbz	r3, 80072e6 <_strtod_l+0x4de>
 80072e2:	4682      	mov	sl, r0
 80072e4:	468b      	mov	fp, r1
 80072e6:	4b2d      	ldr	r3, [pc, #180]	; (800739c <_strtod_l+0x594>)
 80072e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80072ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80072f0:	4652      	mov	r2, sl
 80072f2:	465b      	mov	r3, fp
 80072f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80072f8:	f7f9 f996 	bl	8000628 <__aeabi_dmul>
 80072fc:	4b28      	ldr	r3, [pc, #160]	; (80073a0 <_strtod_l+0x598>)
 80072fe:	460a      	mov	r2, r1
 8007300:	400b      	ands	r3, r1
 8007302:	4928      	ldr	r1, [pc, #160]	; (80073a4 <_strtod_l+0x59c>)
 8007304:	428b      	cmp	r3, r1
 8007306:	4682      	mov	sl, r0
 8007308:	d898      	bhi.n	800723c <_strtod_l+0x434>
 800730a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800730e:	428b      	cmp	r3, r1
 8007310:	bf86      	itte	hi
 8007312:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80073ac <_strtod_l+0x5a4>
 8007316:	f04f 3aff 	movhi.w	sl, #4294967295
 800731a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800731e:	2300      	movs	r3, #0
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	e077      	b.n	8007414 <_strtod_l+0x60c>
 8007324:	f018 0f01 	tst.w	r8, #1
 8007328:	d006      	beq.n	8007338 <_strtod_l+0x530>
 800732a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f9 f979 	bl	8000628 <__aeabi_dmul>
 8007336:	2301      	movs	r3, #1
 8007338:	3501      	adds	r5, #1
 800733a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800733e:	e7cc      	b.n	80072da <_strtod_l+0x4d2>
 8007340:	d0ed      	beq.n	800731e <_strtod_l+0x516>
 8007342:	f1c8 0800 	rsb	r8, r8, #0
 8007346:	f018 020f 	ands.w	r2, r8, #15
 800734a:	d00a      	beq.n	8007362 <_strtod_l+0x55a>
 800734c:	4b12      	ldr	r3, [pc, #72]	; (8007398 <_strtod_l+0x590>)
 800734e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007352:	4650      	mov	r0, sl
 8007354:	4659      	mov	r1, fp
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f9 fa8f 	bl	800087c <__aeabi_ddiv>
 800735e:	4682      	mov	sl, r0
 8007360:	468b      	mov	fp, r1
 8007362:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007366:	d0da      	beq.n	800731e <_strtod_l+0x516>
 8007368:	f1b8 0f1f 	cmp.w	r8, #31
 800736c:	dd20      	ble.n	80073b0 <_strtod_l+0x5a8>
 800736e:	2400      	movs	r4, #0
 8007370:	46a0      	mov	r8, r4
 8007372:	9407      	str	r4, [sp, #28]
 8007374:	9405      	str	r4, [sp, #20]
 8007376:	2322      	movs	r3, #34	; 0x22
 8007378:	f04f 0a00 	mov.w	sl, #0
 800737c:	f04f 0b00 	mov.w	fp, #0
 8007380:	f8c9 3000 	str.w	r3, [r9]
 8007384:	e765      	b.n	8007252 <_strtod_l+0x44a>
 8007386:	bf00      	nop
 8007388:	08009688 	.word	0x08009688
 800738c:	0800968b 	.word	0x0800968b
 8007390:	08009691 	.word	0x08009691
 8007394:	080096a8 	.word	0x080096a8
 8007398:	08009720 	.word	0x08009720
 800739c:	080096f8 	.word	0x080096f8
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	7ca00000 	.word	0x7ca00000
 80073a8:	fff80000 	.word	0xfff80000
 80073ac:	7fefffff 	.word	0x7fefffff
 80073b0:	f018 0310 	ands.w	r3, r8, #16
 80073b4:	bf18      	it	ne
 80073b6:	236a      	movne	r3, #106	; 0x6a
 80073b8:	4da0      	ldr	r5, [pc, #640]	; (800763c <_strtod_l+0x834>)
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	4650      	mov	r0, sl
 80073be:	4659      	mov	r1, fp
 80073c0:	2300      	movs	r3, #0
 80073c2:	f1b8 0f00 	cmp.w	r8, #0
 80073c6:	f300 810a 	bgt.w	80075de <_strtod_l+0x7d6>
 80073ca:	b10b      	cbz	r3, 80073d0 <_strtod_l+0x5c8>
 80073cc:	4682      	mov	sl, r0
 80073ce:	468b      	mov	fp, r1
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	b1bb      	cbz	r3, 8007404 <_strtod_l+0x5fc>
 80073d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80073d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073dc:	2b00      	cmp	r3, #0
 80073de:	4659      	mov	r1, fp
 80073e0:	dd10      	ble.n	8007404 <_strtod_l+0x5fc>
 80073e2:	2b1f      	cmp	r3, #31
 80073e4:	f340 8107 	ble.w	80075f6 <_strtod_l+0x7ee>
 80073e8:	2b34      	cmp	r3, #52	; 0x34
 80073ea:	bfde      	ittt	le
 80073ec:	3b20      	suble	r3, #32
 80073ee:	f04f 32ff 	movle.w	r2, #4294967295
 80073f2:	fa02 f303 	lslle.w	r3, r2, r3
 80073f6:	f04f 0a00 	mov.w	sl, #0
 80073fa:	bfcc      	ite	gt
 80073fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007400:	ea03 0b01 	andle.w	fp, r3, r1
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	4650      	mov	r0, sl
 800740a:	4659      	mov	r1, fp
 800740c:	f7f9 fb74 	bl	8000af8 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d1ac      	bne.n	800736e <_strtod_l+0x566>
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	9a05      	ldr	r2, [sp, #20]
 800741a:	9908      	ldr	r1, [sp, #32]
 800741c:	4623      	mov	r3, r4
 800741e:	4648      	mov	r0, r9
 8007420:	f000 fff5 	bl	800840e <__s2b>
 8007424:	9007      	str	r0, [sp, #28]
 8007426:	2800      	cmp	r0, #0
 8007428:	f43f af08 	beq.w	800723c <_strtod_l+0x434>
 800742c:	9a06      	ldr	r2, [sp, #24]
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	2a00      	cmp	r2, #0
 8007432:	f1c3 0300 	rsb	r3, r3, #0
 8007436:	bfa8      	it	ge
 8007438:	2300      	movge	r3, #0
 800743a:	930e      	str	r3, [sp, #56]	; 0x38
 800743c:	2400      	movs	r4, #0
 800743e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007442:	9316      	str	r3, [sp, #88]	; 0x58
 8007444:	46a0      	mov	r8, r4
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	4648      	mov	r0, r9
 800744a:	6859      	ldr	r1, [r3, #4]
 800744c:	f000 ff59 	bl	8008302 <_Balloc>
 8007450:	9005      	str	r0, [sp, #20]
 8007452:	2800      	cmp	r0, #0
 8007454:	f43f aef6 	beq.w	8007244 <_strtod_l+0x43c>
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	3202      	adds	r2, #2
 800745e:	f103 010c 	add.w	r1, r3, #12
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	300c      	adds	r0, #12
 8007466:	f7ff fc95 	bl	8006d94 <memcpy>
 800746a:	aa1e      	add	r2, sp, #120	; 0x78
 800746c:	a91d      	add	r1, sp, #116	; 0x74
 800746e:	ec4b ab10 	vmov	d0, sl, fp
 8007472:	4648      	mov	r0, r9
 8007474:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007478:	f001 fa84 	bl	8008984 <__d2b>
 800747c:	901c      	str	r0, [sp, #112]	; 0x70
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f aee0 	beq.w	8007244 <_strtod_l+0x43c>
 8007484:	2101      	movs	r1, #1
 8007486:	4648      	mov	r0, r9
 8007488:	f001 f84d 	bl	8008526 <__i2b>
 800748c:	4680      	mov	r8, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f aed8 	beq.w	8007244 <_strtod_l+0x43c>
 8007494:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007496:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007498:	2e00      	cmp	r6, #0
 800749a:	bfab      	itete	ge
 800749c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800749e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80074a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80074a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80074a4:	bfac      	ite	ge
 80074a6:	18f7      	addge	r7, r6, r3
 80074a8:	1b9d      	sublt	r5, r3, r6
 80074aa:	9b04      	ldr	r3, [sp, #16]
 80074ac:	1af6      	subs	r6, r6, r3
 80074ae:	4416      	add	r6, r2
 80074b0:	4b63      	ldr	r3, [pc, #396]	; (8007640 <_strtod_l+0x838>)
 80074b2:	3e01      	subs	r6, #1
 80074b4:	429e      	cmp	r6, r3
 80074b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074ba:	f280 80af 	bge.w	800761c <_strtod_l+0x814>
 80074be:	1b9b      	subs	r3, r3, r6
 80074c0:	2b1f      	cmp	r3, #31
 80074c2:	eba2 0203 	sub.w	r2, r2, r3
 80074c6:	f04f 0101 	mov.w	r1, #1
 80074ca:	f300 809b 	bgt.w	8007604 <_strtod_l+0x7fc>
 80074ce:	fa01 f303 	lsl.w	r3, r1, r3
 80074d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d4:	2300      	movs	r3, #0
 80074d6:	930a      	str	r3, [sp, #40]	; 0x28
 80074d8:	18be      	adds	r6, r7, r2
 80074da:	9b04      	ldr	r3, [sp, #16]
 80074dc:	42b7      	cmp	r7, r6
 80074de:	4415      	add	r5, r2
 80074e0:	441d      	add	r5, r3
 80074e2:	463b      	mov	r3, r7
 80074e4:	bfa8      	it	ge
 80074e6:	4633      	movge	r3, r6
 80074e8:	42ab      	cmp	r3, r5
 80074ea:	bfa8      	it	ge
 80074ec:	462b      	movge	r3, r5
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfc2      	ittt	gt
 80074f2:	1af6      	subgt	r6, r6, r3
 80074f4:	1aed      	subgt	r5, r5, r3
 80074f6:	1aff      	subgt	r7, r7, r3
 80074f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074fa:	b1bb      	cbz	r3, 800752c <_strtod_l+0x724>
 80074fc:	4641      	mov	r1, r8
 80074fe:	461a      	mov	r2, r3
 8007500:	4648      	mov	r0, r9
 8007502:	f001 f8af 	bl	8008664 <__pow5mult>
 8007506:	4680      	mov	r8, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	f43f ae9b 	beq.w	8007244 <_strtod_l+0x43c>
 800750e:	4601      	mov	r1, r0
 8007510:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007512:	4648      	mov	r0, r9
 8007514:	f001 f810 	bl	8008538 <__multiply>
 8007518:	900c      	str	r0, [sp, #48]	; 0x30
 800751a:	2800      	cmp	r0, #0
 800751c:	f43f ae92 	beq.w	8007244 <_strtod_l+0x43c>
 8007520:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007522:	4648      	mov	r0, r9
 8007524:	f000 ff21 	bl	800836a <_Bfree>
 8007528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800752a:	931c      	str	r3, [sp, #112]	; 0x70
 800752c:	2e00      	cmp	r6, #0
 800752e:	dc7a      	bgt.n	8007626 <_strtod_l+0x81e>
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dd08      	ble.n	8007548 <_strtod_l+0x740>
 8007536:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007538:	9905      	ldr	r1, [sp, #20]
 800753a:	4648      	mov	r0, r9
 800753c:	f001 f892 	bl	8008664 <__pow5mult>
 8007540:	9005      	str	r0, [sp, #20]
 8007542:	2800      	cmp	r0, #0
 8007544:	f43f ae7e 	beq.w	8007244 <_strtod_l+0x43c>
 8007548:	2d00      	cmp	r5, #0
 800754a:	dd08      	ble.n	800755e <_strtod_l+0x756>
 800754c:	462a      	mov	r2, r5
 800754e:	9905      	ldr	r1, [sp, #20]
 8007550:	4648      	mov	r0, r9
 8007552:	f001 f8d5 	bl	8008700 <__lshift>
 8007556:	9005      	str	r0, [sp, #20]
 8007558:	2800      	cmp	r0, #0
 800755a:	f43f ae73 	beq.w	8007244 <_strtod_l+0x43c>
 800755e:	2f00      	cmp	r7, #0
 8007560:	dd08      	ble.n	8007574 <_strtod_l+0x76c>
 8007562:	4641      	mov	r1, r8
 8007564:	463a      	mov	r2, r7
 8007566:	4648      	mov	r0, r9
 8007568:	f001 f8ca 	bl	8008700 <__lshift>
 800756c:	4680      	mov	r8, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f ae68 	beq.w	8007244 <_strtod_l+0x43c>
 8007574:	9a05      	ldr	r2, [sp, #20]
 8007576:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007578:	4648      	mov	r0, r9
 800757a:	f001 f92f 	bl	80087dc <__mdiff>
 800757e:	4604      	mov	r4, r0
 8007580:	2800      	cmp	r0, #0
 8007582:	f43f ae5f 	beq.w	8007244 <_strtod_l+0x43c>
 8007586:	68c3      	ldr	r3, [r0, #12]
 8007588:	930c      	str	r3, [sp, #48]	; 0x30
 800758a:	2300      	movs	r3, #0
 800758c:	60c3      	str	r3, [r0, #12]
 800758e:	4641      	mov	r1, r8
 8007590:	f001 f90a 	bl	80087a8 <__mcmp>
 8007594:	2800      	cmp	r0, #0
 8007596:	da55      	bge.n	8007644 <_strtod_l+0x83c>
 8007598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800759a:	b9e3      	cbnz	r3, 80075d6 <_strtod_l+0x7ce>
 800759c:	f1ba 0f00 	cmp.w	sl, #0
 80075a0:	d119      	bne.n	80075d6 <_strtod_l+0x7ce>
 80075a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075a6:	b9b3      	cbnz	r3, 80075d6 <_strtod_l+0x7ce>
 80075a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075ac:	0d1b      	lsrs	r3, r3, #20
 80075ae:	051b      	lsls	r3, r3, #20
 80075b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075b4:	d90f      	bls.n	80075d6 <_strtod_l+0x7ce>
 80075b6:	6963      	ldr	r3, [r4, #20]
 80075b8:	b913      	cbnz	r3, 80075c0 <_strtod_l+0x7b8>
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	dd0a      	ble.n	80075d6 <_strtod_l+0x7ce>
 80075c0:	4621      	mov	r1, r4
 80075c2:	2201      	movs	r2, #1
 80075c4:	4648      	mov	r0, r9
 80075c6:	f001 f89b 	bl	8008700 <__lshift>
 80075ca:	4641      	mov	r1, r8
 80075cc:	4604      	mov	r4, r0
 80075ce:	f001 f8eb 	bl	80087a8 <__mcmp>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	dc67      	bgt.n	80076a6 <_strtod_l+0x89e>
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d171      	bne.n	80076c0 <_strtod_l+0x8b8>
 80075dc:	e63d      	b.n	800725a <_strtod_l+0x452>
 80075de:	f018 0f01 	tst.w	r8, #1
 80075e2:	d004      	beq.n	80075ee <_strtod_l+0x7e6>
 80075e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075e8:	f7f9 f81e 	bl	8000628 <__aeabi_dmul>
 80075ec:	2301      	movs	r3, #1
 80075ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80075f2:	3508      	adds	r5, #8
 80075f4:	e6e5      	b.n	80073c2 <_strtod_l+0x5ba>
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	ea03 0a0a 	and.w	sl, r3, sl
 8007602:	e6ff      	b.n	8007404 <_strtod_l+0x5fc>
 8007604:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007608:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800760c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007610:	36e2      	adds	r6, #226	; 0xe2
 8007612:	fa01 f306 	lsl.w	r3, r1, r6
 8007616:	930a      	str	r3, [sp, #40]	; 0x28
 8007618:	910f      	str	r1, [sp, #60]	; 0x3c
 800761a:	e75d      	b.n	80074d8 <_strtod_l+0x6d0>
 800761c:	2300      	movs	r3, #0
 800761e:	930a      	str	r3, [sp, #40]	; 0x28
 8007620:	2301      	movs	r3, #1
 8007622:	930f      	str	r3, [sp, #60]	; 0x3c
 8007624:	e758      	b.n	80074d8 <_strtod_l+0x6d0>
 8007626:	4632      	mov	r2, r6
 8007628:	991c      	ldr	r1, [sp, #112]	; 0x70
 800762a:	4648      	mov	r0, r9
 800762c:	f001 f868 	bl	8008700 <__lshift>
 8007630:	901c      	str	r0, [sp, #112]	; 0x70
 8007632:	2800      	cmp	r0, #0
 8007634:	f47f af7c 	bne.w	8007530 <_strtod_l+0x728>
 8007638:	e604      	b.n	8007244 <_strtod_l+0x43c>
 800763a:	bf00      	nop
 800763c:	080096c0 	.word	0x080096c0
 8007640:	fffffc02 	.word	0xfffffc02
 8007644:	465d      	mov	r5, fp
 8007646:	f040 8086 	bne.w	8007756 <_strtod_l+0x94e>
 800764a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800764c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007650:	b32a      	cbz	r2, 800769e <_strtod_l+0x896>
 8007652:	4aaf      	ldr	r2, [pc, #700]	; (8007910 <_strtod_l+0xb08>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d153      	bne.n	8007700 <_strtod_l+0x8f8>
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	4650      	mov	r0, sl
 800765c:	b1d3      	cbz	r3, 8007694 <_strtod_l+0x88c>
 800765e:	4aad      	ldr	r2, [pc, #692]	; (8007914 <_strtod_l+0xb0c>)
 8007660:	402a      	ands	r2, r5
 8007662:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007666:	f04f 31ff 	mov.w	r1, #4294967295
 800766a:	d816      	bhi.n	800769a <_strtod_l+0x892>
 800766c:	0d12      	lsrs	r2, r2, #20
 800766e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007672:	fa01 f303 	lsl.w	r3, r1, r3
 8007676:	4298      	cmp	r0, r3
 8007678:	d142      	bne.n	8007700 <_strtod_l+0x8f8>
 800767a:	4ba7      	ldr	r3, [pc, #668]	; (8007918 <_strtod_l+0xb10>)
 800767c:	429d      	cmp	r5, r3
 800767e:	d102      	bne.n	8007686 <_strtod_l+0x87e>
 8007680:	3001      	adds	r0, #1
 8007682:	f43f addf 	beq.w	8007244 <_strtod_l+0x43c>
 8007686:	4ba3      	ldr	r3, [pc, #652]	; (8007914 <_strtod_l+0xb0c>)
 8007688:	402b      	ands	r3, r5
 800768a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800768e:	f04f 0a00 	mov.w	sl, #0
 8007692:	e7a0      	b.n	80075d6 <_strtod_l+0x7ce>
 8007694:	f04f 33ff 	mov.w	r3, #4294967295
 8007698:	e7ed      	b.n	8007676 <_strtod_l+0x86e>
 800769a:	460b      	mov	r3, r1
 800769c:	e7eb      	b.n	8007676 <_strtod_l+0x86e>
 800769e:	bb7b      	cbnz	r3, 8007700 <_strtod_l+0x8f8>
 80076a0:	f1ba 0f00 	cmp.w	sl, #0
 80076a4:	d12c      	bne.n	8007700 <_strtod_l+0x8f8>
 80076a6:	9904      	ldr	r1, [sp, #16]
 80076a8:	4a9a      	ldr	r2, [pc, #616]	; (8007914 <_strtod_l+0xb0c>)
 80076aa:	465b      	mov	r3, fp
 80076ac:	b1f1      	cbz	r1, 80076ec <_strtod_l+0x8e4>
 80076ae:	ea02 010b 	and.w	r1, r2, fp
 80076b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076b6:	dc19      	bgt.n	80076ec <_strtod_l+0x8e4>
 80076b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076bc:	f77f ae5b 	ble.w	8007376 <_strtod_l+0x56e>
 80076c0:	4a96      	ldr	r2, [pc, #600]	; (800791c <_strtod_l+0xb14>)
 80076c2:	2300      	movs	r3, #0
 80076c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80076c8:	4650      	mov	r0, sl
 80076ca:	4659      	mov	r1, fp
 80076cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80076d0:	f7f8 ffaa 	bl	8000628 <__aeabi_dmul>
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	2900      	cmp	r1, #0
 80076da:	f47f adbe 	bne.w	800725a <_strtod_l+0x452>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f47f adbb 	bne.w	800725a <_strtod_l+0x452>
 80076e4:	2322      	movs	r3, #34	; 0x22
 80076e6:	f8c9 3000 	str.w	r3, [r9]
 80076ea:	e5b6      	b.n	800725a <_strtod_l+0x452>
 80076ec:	4013      	ands	r3, r2
 80076ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80076f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80076fa:	f04f 3aff 	mov.w	sl, #4294967295
 80076fe:	e76a      	b.n	80075d6 <_strtod_l+0x7ce>
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	b193      	cbz	r3, 800772a <_strtod_l+0x922>
 8007704:	422b      	tst	r3, r5
 8007706:	f43f af66 	beq.w	80075d6 <_strtod_l+0x7ce>
 800770a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	4650      	mov	r0, sl
 8007710:	4659      	mov	r1, fp
 8007712:	b173      	cbz	r3, 8007732 <_strtod_l+0x92a>
 8007714:	f7ff fb59 	bl	8006dca <sulp>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007720:	f7f8 fdcc 	bl	80002bc <__adddf3>
 8007724:	4682      	mov	sl, r0
 8007726:	468b      	mov	fp, r1
 8007728:	e755      	b.n	80075d6 <_strtod_l+0x7ce>
 800772a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800772c:	ea13 0f0a 	tst.w	r3, sl
 8007730:	e7e9      	b.n	8007706 <_strtod_l+0x8fe>
 8007732:	f7ff fb4a 	bl	8006dca <sulp>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800773e:	f7f8 fdbb 	bl	80002b8 <__aeabi_dsub>
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	4682      	mov	sl, r0
 8007748:	468b      	mov	fp, r1
 800774a:	f7f9 f9d5 	bl	8000af8 <__aeabi_dcmpeq>
 800774e:	2800      	cmp	r0, #0
 8007750:	f47f ae11 	bne.w	8007376 <_strtod_l+0x56e>
 8007754:	e73f      	b.n	80075d6 <_strtod_l+0x7ce>
 8007756:	4641      	mov	r1, r8
 8007758:	4620      	mov	r0, r4
 800775a:	f001 f962 	bl	8008a22 <__ratio>
 800775e:	ec57 6b10 	vmov	r6, r7, d0
 8007762:	2200      	movs	r2, #0
 8007764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007768:	ee10 0a10 	vmov	r0, s0
 800776c:	4639      	mov	r1, r7
 800776e:	f7f9 f9d7 	bl	8000b20 <__aeabi_dcmple>
 8007772:	2800      	cmp	r0, #0
 8007774:	d077      	beq.n	8007866 <_strtod_l+0xa5e>
 8007776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007778:	2b00      	cmp	r3, #0
 800777a:	d04a      	beq.n	8007812 <_strtod_l+0xa0a>
 800777c:	4b68      	ldr	r3, [pc, #416]	; (8007920 <_strtod_l+0xb18>)
 800777e:	2200      	movs	r2, #0
 8007780:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007784:	4f66      	ldr	r7, [pc, #408]	; (8007920 <_strtod_l+0xb18>)
 8007786:	2600      	movs	r6, #0
 8007788:	4b62      	ldr	r3, [pc, #392]	; (8007914 <_strtod_l+0xb0c>)
 800778a:	402b      	ands	r3, r5
 800778c:	930f      	str	r3, [sp, #60]	; 0x3c
 800778e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007790:	4b64      	ldr	r3, [pc, #400]	; (8007924 <_strtod_l+0xb1c>)
 8007792:	429a      	cmp	r2, r3
 8007794:	f040 80ce 	bne.w	8007934 <_strtod_l+0xb2c>
 8007798:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800779c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80077a4:	ec4b ab10 	vmov	d0, sl, fp
 80077a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80077ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077b0:	f001 f872 	bl	8008898 <__ulp>
 80077b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077b8:	ec53 2b10 	vmov	r2, r3, d0
 80077bc:	f7f8 ff34 	bl	8000628 <__aeabi_dmul>
 80077c0:	4652      	mov	r2, sl
 80077c2:	465b      	mov	r3, fp
 80077c4:	f7f8 fd7a 	bl	80002bc <__adddf3>
 80077c8:	460b      	mov	r3, r1
 80077ca:	4952      	ldr	r1, [pc, #328]	; (8007914 <_strtod_l+0xb0c>)
 80077cc:	4a56      	ldr	r2, [pc, #344]	; (8007928 <_strtod_l+0xb20>)
 80077ce:	4019      	ands	r1, r3
 80077d0:	4291      	cmp	r1, r2
 80077d2:	4682      	mov	sl, r0
 80077d4:	d95b      	bls.n	800788e <_strtod_l+0xa86>
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80077dc:	4293      	cmp	r3, r2
 80077de:	d103      	bne.n	80077e8 <_strtod_l+0x9e0>
 80077e0:	9b08      	ldr	r3, [sp, #32]
 80077e2:	3301      	adds	r3, #1
 80077e4:	f43f ad2e 	beq.w	8007244 <_strtod_l+0x43c>
 80077e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007918 <_strtod_l+0xb10>
 80077ec:	f04f 3aff 	mov.w	sl, #4294967295
 80077f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077f2:	4648      	mov	r0, r9
 80077f4:	f000 fdb9 	bl	800836a <_Bfree>
 80077f8:	9905      	ldr	r1, [sp, #20]
 80077fa:	4648      	mov	r0, r9
 80077fc:	f000 fdb5 	bl	800836a <_Bfree>
 8007800:	4641      	mov	r1, r8
 8007802:	4648      	mov	r0, r9
 8007804:	f000 fdb1 	bl	800836a <_Bfree>
 8007808:	4621      	mov	r1, r4
 800780a:	4648      	mov	r0, r9
 800780c:	f000 fdad 	bl	800836a <_Bfree>
 8007810:	e619      	b.n	8007446 <_strtod_l+0x63e>
 8007812:	f1ba 0f00 	cmp.w	sl, #0
 8007816:	d11a      	bne.n	800784e <_strtod_l+0xa46>
 8007818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800781c:	b9eb      	cbnz	r3, 800785a <_strtod_l+0xa52>
 800781e:	2200      	movs	r2, #0
 8007820:	4b3f      	ldr	r3, [pc, #252]	; (8007920 <_strtod_l+0xb18>)
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	f7f9 f971 	bl	8000b0c <__aeabi_dcmplt>
 800782a:	b9c8      	cbnz	r0, 8007860 <_strtod_l+0xa58>
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	2200      	movs	r2, #0
 8007832:	4b3e      	ldr	r3, [pc, #248]	; (800792c <_strtod_l+0xb24>)
 8007834:	f7f8 fef8 	bl	8000628 <__aeabi_dmul>
 8007838:	4606      	mov	r6, r0
 800783a:	460f      	mov	r7, r1
 800783c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007840:	9618      	str	r6, [sp, #96]	; 0x60
 8007842:	9319      	str	r3, [sp, #100]	; 0x64
 8007844:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007848:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800784c:	e79c      	b.n	8007788 <_strtod_l+0x980>
 800784e:	f1ba 0f01 	cmp.w	sl, #1
 8007852:	d102      	bne.n	800785a <_strtod_l+0xa52>
 8007854:	2d00      	cmp	r5, #0
 8007856:	f43f ad8e 	beq.w	8007376 <_strtod_l+0x56e>
 800785a:	2200      	movs	r2, #0
 800785c:	4b34      	ldr	r3, [pc, #208]	; (8007930 <_strtod_l+0xb28>)
 800785e:	e78f      	b.n	8007780 <_strtod_l+0x978>
 8007860:	2600      	movs	r6, #0
 8007862:	4f32      	ldr	r7, [pc, #200]	; (800792c <_strtod_l+0xb24>)
 8007864:	e7ea      	b.n	800783c <_strtod_l+0xa34>
 8007866:	4b31      	ldr	r3, [pc, #196]	; (800792c <_strtod_l+0xb24>)
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	2200      	movs	r2, #0
 800786e:	f7f8 fedb 	bl	8000628 <__aeabi_dmul>
 8007872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	b933      	cbnz	r3, 8007888 <_strtod_l+0xa80>
 800787a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800787e:	9010      	str	r0, [sp, #64]	; 0x40
 8007880:	9311      	str	r3, [sp, #68]	; 0x44
 8007882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007886:	e7df      	b.n	8007848 <_strtod_l+0xa40>
 8007888:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800788c:	e7f9      	b.n	8007882 <_strtod_l+0xa7a>
 800788e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1ab      	bne.n	80077f0 <_strtod_l+0x9e8>
 8007898:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800789c:	0d1b      	lsrs	r3, r3, #20
 800789e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078a0:	051b      	lsls	r3, r3, #20
 80078a2:	429a      	cmp	r2, r3
 80078a4:	465d      	mov	r5, fp
 80078a6:	d1a3      	bne.n	80077f0 <_strtod_l+0x9e8>
 80078a8:	4639      	mov	r1, r7
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7f9 f96c 	bl	8000b88 <__aeabi_d2iz>
 80078b0:	f7f8 fe50 	bl	8000554 <__aeabi_i2d>
 80078b4:	460b      	mov	r3, r1
 80078b6:	4602      	mov	r2, r0
 80078b8:	4639      	mov	r1, r7
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7f8 fcfc 	bl	80002b8 <__aeabi_dsub>
 80078c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	b933      	cbnz	r3, 80078d6 <_strtod_l+0xace>
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	d103      	bne.n	80078d6 <_strtod_l+0xace>
 80078ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80078d2:	2d00      	cmp	r5, #0
 80078d4:	d06d      	beq.n	80079b2 <_strtod_l+0xbaa>
 80078d6:	a30a      	add	r3, pc, #40	; (adr r3, 8007900 <_strtod_l+0xaf8>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f914 	bl	8000b0c <__aeabi_dcmplt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f47f acb8 	bne.w	800725a <_strtod_l+0x452>
 80078ea:	a307      	add	r3, pc, #28	; (adr r3, 8007908 <_strtod_l+0xb00>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f9 f928 	bl	8000b48 <__aeabi_dcmpgt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f43f af79 	beq.w	80077f0 <_strtod_l+0x9e8>
 80078fe:	e4ac      	b.n	800725a <_strtod_l+0x452>
 8007900:	94a03595 	.word	0x94a03595
 8007904:	3fdfffff 	.word	0x3fdfffff
 8007908:	35afe535 	.word	0x35afe535
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	000fffff 	.word	0x000fffff
 8007914:	7ff00000 	.word	0x7ff00000
 8007918:	7fefffff 	.word	0x7fefffff
 800791c:	39500000 	.word	0x39500000
 8007920:	3ff00000 	.word	0x3ff00000
 8007924:	7fe00000 	.word	0x7fe00000
 8007928:	7c9fffff 	.word	0x7c9fffff
 800792c:	3fe00000 	.word	0x3fe00000
 8007930:	bff00000 	.word	0xbff00000
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	b333      	cbz	r3, 8007986 <_strtod_l+0xb7e>
 8007938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800793a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800793e:	d822      	bhi.n	8007986 <_strtod_l+0xb7e>
 8007940:	a327      	add	r3, pc, #156	; (adr r3, 80079e0 <_strtod_l+0xbd8>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f9 f8e9 	bl	8000b20 <__aeabi_dcmple>
 800794e:	b1a0      	cbz	r0, 800797a <_strtod_l+0xb72>
 8007950:	4639      	mov	r1, r7
 8007952:	4630      	mov	r0, r6
 8007954:	f7f9 f940 	bl	8000bd8 <__aeabi_d2uiz>
 8007958:	2800      	cmp	r0, #0
 800795a:	bf08      	it	eq
 800795c:	2001      	moveq	r0, #1
 800795e:	f7f8 fde9 	bl	8000534 <__aeabi_ui2d>
 8007962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	bb03      	cbnz	r3, 80079ac <_strtod_l+0xba4>
 800796a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800796e:	9012      	str	r0, [sp, #72]	; 0x48
 8007970:	9313      	str	r3, [sp, #76]	; 0x4c
 8007972:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007976:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800797e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	930b      	str	r3, [sp, #44]	; 0x2c
 8007986:	ed9d 0b08 	vldr	d0, [sp, #32]
 800798a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800798e:	f000 ff83 	bl	8008898 <__ulp>
 8007992:	4650      	mov	r0, sl
 8007994:	ec53 2b10 	vmov	r2, r3, d0
 8007998:	4659      	mov	r1, fp
 800799a:	f7f8 fe45 	bl	8000628 <__aeabi_dmul>
 800799e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079a2:	f7f8 fc8b 	bl	80002bc <__adddf3>
 80079a6:	4682      	mov	sl, r0
 80079a8:	468b      	mov	fp, r1
 80079aa:	e772      	b.n	8007892 <_strtod_l+0xa8a>
 80079ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80079b0:	e7df      	b.n	8007972 <_strtod_l+0xb6a>
 80079b2:	a30d      	add	r3, pc, #52	; (adr r3, 80079e8 <_strtod_l+0xbe0>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f7f9 f8a8 	bl	8000b0c <__aeabi_dcmplt>
 80079bc:	e79c      	b.n	80078f8 <_strtod_l+0xaf0>
 80079be:	2300      	movs	r3, #0
 80079c0:	930d      	str	r3, [sp, #52]	; 0x34
 80079c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f7ff ba61 	b.w	8006e8e <_strtod_l+0x86>
 80079cc:	2b65      	cmp	r3, #101	; 0x65
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f43f ab4e 	beq.w	8007072 <_strtod_l+0x26a>
 80079d6:	2101      	movs	r1, #1
 80079d8:	4614      	mov	r4, r2
 80079da:	9104      	str	r1, [sp, #16]
 80079dc:	f7ff bacb 	b.w	8006f76 <_strtod_l+0x16e>
 80079e0:	ffc00000 	.word	0xffc00000
 80079e4:	41dfffff 	.word	0x41dfffff
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <strtof>:
 80079f0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80079f4:	4e24      	ldr	r6, [pc, #144]	; (8007a88 <strtof+0x98>)
 80079f6:	4a25      	ldr	r2, [pc, #148]	; (8007a8c <strtof+0x9c>)
 80079f8:	6834      	ldr	r4, [r6, #0]
 80079fa:	6a23      	ldr	r3, [r4, #32]
 80079fc:	ed2d 8b02 	vpush	{d8}
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf08      	it	eq
 8007a04:	4613      	moveq	r3, r2
 8007a06:	460a      	mov	r2, r1
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f7ff f9fc 	bl	8006e08 <_strtod_l>
 8007a10:	ec55 4b10 	vmov	r4, r5, d0
 8007a14:	ee10 2a10 	vmov	r2, s0
 8007a18:	462b      	mov	r3, r5
 8007a1a:	ee10 0a10 	vmov	r0, s0
 8007a1e:	4629      	mov	r1, r5
 8007a20:	f7f9 f89c 	bl	8000b5c <__aeabi_dcmpun>
 8007a24:	b130      	cbz	r0, 8007a34 <strtof+0x44>
 8007a26:	ecbd 8b02 	vpop	{d8}
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8007a30:	f001 bbb8 	b.w	80091a4 <nanf>
 8007a34:	4620      	mov	r0, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	f7f9 f8ee 	bl	8000c18 <__aeabi_d2f>
 8007a3c:	ee08 0a10 	vmov	s16, r0
 8007a40:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007a90 <strtof+0xa0>
 8007a44:	eeb0 7ac8 	vabs.f32	s14, s16
 8007a48:	eeb4 7a67 	vcmp.f32	s14, s15
 8007a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a50:	dd14      	ble.n	8007a7c <strtof+0x8c>
 8007a52:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <strtof+0xa4>)
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4649      	mov	r1, r9
 8007a60:	f7f9 f87c 	bl	8000b5c <__aeabi_dcmpun>
 8007a64:	b938      	cbnz	r0, 8007a76 <strtof+0x86>
 8007a66:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <strtof+0xa4>)
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f9 f856 	bl	8000b20 <__aeabi_dcmple>
 8007a74:	b110      	cbz	r0, 8007a7c <strtof+0x8c>
 8007a76:	6833      	ldr	r3, [r6, #0]
 8007a78:	2222      	movs	r2, #34	; 0x22
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007a80:	ecbd 8b02 	vpop	{d8}
 8007a84:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007a88:	20000034 	.word	0x20000034
 8007a8c:	20000098 	.word	0x20000098
 8007a90:	7f7fffff 	.word	0x7f7fffff
 8007a94:	7fefffff 	.word	0x7fefffff

08007a98 <__strtok_r>:
 8007a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9a:	b918      	cbnz	r0, 8007aa4 <__strtok_r+0xc>
 8007a9c:	6810      	ldr	r0, [r2, #0]
 8007a9e:	b908      	cbnz	r0, 8007aa4 <__strtok_r+0xc>
 8007aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007aac:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ab0:	b91e      	cbnz	r6, 8007aba <__strtok_r+0x22>
 8007ab2:	b96d      	cbnz	r5, 8007ad0 <__strtok_r+0x38>
 8007ab4:	6015      	str	r5, [r2, #0]
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	e7f2      	b.n	8007aa0 <__strtok_r+0x8>
 8007aba:	42b5      	cmp	r5, r6
 8007abc:	d1f6      	bne.n	8007aac <__strtok_r+0x14>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1ef      	bne.n	8007aa2 <__strtok_r+0xa>
 8007ac2:	6014      	str	r4, [r2, #0]
 8007ac4:	7003      	strb	r3, [r0, #0]
 8007ac6:	e7eb      	b.n	8007aa0 <__strtok_r+0x8>
 8007ac8:	462b      	mov	r3, r5
 8007aca:	e00d      	b.n	8007ae8 <__strtok_r+0x50>
 8007acc:	b926      	cbnz	r6, 8007ad8 <__strtok_r+0x40>
 8007ace:	461c      	mov	r4, r3
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007ad8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007adc:	42b5      	cmp	r5, r6
 8007ade:	d1f5      	bne.n	8007acc <__strtok_r+0x34>
 8007ae0:	2d00      	cmp	r5, #0
 8007ae2:	d0f1      	beq.n	8007ac8 <__strtok_r+0x30>
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	7021      	strb	r1, [r4, #0]
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	e7d9      	b.n	8007aa0 <__strtok_r+0x8>

08007aec <strtok_r>:
 8007aec:	2301      	movs	r3, #1
 8007aee:	f7ff bfd3 	b.w	8007a98 <__strtok_r>

08007af2 <_strtoul_l.isra.0>:
 8007af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af6:	4680      	mov	r8, r0
 8007af8:	4689      	mov	r9, r1
 8007afa:	4692      	mov	sl, r2
 8007afc:	461e      	mov	r6, r3
 8007afe:	460f      	mov	r7, r1
 8007b00:	463d      	mov	r5, r7
 8007b02:	9808      	ldr	r0, [sp, #32]
 8007b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b08:	f000 fbe4 	bl	80082d4 <__locale_ctype_ptr_l>
 8007b0c:	4420      	add	r0, r4
 8007b0e:	7843      	ldrb	r3, [r0, #1]
 8007b10:	f013 0308 	ands.w	r3, r3, #8
 8007b14:	d130      	bne.n	8007b78 <_strtoul_l.isra.0+0x86>
 8007b16:	2c2d      	cmp	r4, #45	; 0x2d
 8007b18:	d130      	bne.n	8007b7c <_strtoul_l.isra.0+0x8a>
 8007b1a:	787c      	ldrb	r4, [r7, #1]
 8007b1c:	1cbd      	adds	r5, r7, #2
 8007b1e:	2101      	movs	r1, #1
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	d05c      	beq.n	8007bde <_strtoul_l.isra.0+0xec>
 8007b24:	2e10      	cmp	r6, #16
 8007b26:	d109      	bne.n	8007b3c <_strtoul_l.isra.0+0x4a>
 8007b28:	2c30      	cmp	r4, #48	; 0x30
 8007b2a:	d107      	bne.n	8007b3c <_strtoul_l.isra.0+0x4a>
 8007b2c:	782b      	ldrb	r3, [r5, #0]
 8007b2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b32:	2b58      	cmp	r3, #88	; 0x58
 8007b34:	d14e      	bne.n	8007bd4 <_strtoul_l.isra.0+0xe2>
 8007b36:	786c      	ldrb	r4, [r5, #1]
 8007b38:	2610      	movs	r6, #16
 8007b3a:	3502      	adds	r5, #2
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	2300      	movs	r3, #0
 8007b42:	fbb2 f2f6 	udiv	r2, r2, r6
 8007b46:	fb06 fc02 	mul.w	ip, r6, r2
 8007b4a:	ea6f 0c0c 	mvn.w	ip, ip
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007b54:	2f09      	cmp	r7, #9
 8007b56:	d817      	bhi.n	8007b88 <_strtoul_l.isra.0+0x96>
 8007b58:	463c      	mov	r4, r7
 8007b5a:	42a6      	cmp	r6, r4
 8007b5c:	dd23      	ble.n	8007ba6 <_strtoul_l.isra.0+0xb4>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db1e      	blt.n	8007ba0 <_strtoul_l.isra.0+0xae>
 8007b62:	4282      	cmp	r2, r0
 8007b64:	d31c      	bcc.n	8007ba0 <_strtoul_l.isra.0+0xae>
 8007b66:	d101      	bne.n	8007b6c <_strtoul_l.isra.0+0x7a>
 8007b68:	45a4      	cmp	ip, r4
 8007b6a:	db19      	blt.n	8007ba0 <_strtoul_l.isra.0+0xae>
 8007b6c:	fb00 4006 	mla	r0, r0, r6, r4
 8007b70:	2301      	movs	r3, #1
 8007b72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b76:	e7eb      	b.n	8007b50 <_strtoul_l.isra.0+0x5e>
 8007b78:	462f      	mov	r7, r5
 8007b7a:	e7c1      	b.n	8007b00 <_strtoul_l.isra.0+0xe>
 8007b7c:	2c2b      	cmp	r4, #43	; 0x2b
 8007b7e:	bf04      	itt	eq
 8007b80:	1cbd      	addeq	r5, r7, #2
 8007b82:	787c      	ldrbeq	r4, [r7, #1]
 8007b84:	4619      	mov	r1, r3
 8007b86:	e7cb      	b.n	8007b20 <_strtoul_l.isra.0+0x2e>
 8007b88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007b8c:	2f19      	cmp	r7, #25
 8007b8e:	d801      	bhi.n	8007b94 <_strtoul_l.isra.0+0xa2>
 8007b90:	3c37      	subs	r4, #55	; 0x37
 8007b92:	e7e2      	b.n	8007b5a <_strtoul_l.isra.0+0x68>
 8007b94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007b98:	2f19      	cmp	r7, #25
 8007b9a:	d804      	bhi.n	8007ba6 <_strtoul_l.isra.0+0xb4>
 8007b9c:	3c57      	subs	r4, #87	; 0x57
 8007b9e:	e7dc      	b.n	8007b5a <_strtoul_l.isra.0+0x68>
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	e7e5      	b.n	8007b72 <_strtoul_l.isra.0+0x80>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da09      	bge.n	8007bbe <_strtoul_l.isra.0+0xcc>
 8007baa:	2322      	movs	r3, #34	; 0x22
 8007bac:	f8c8 3000 	str.w	r3, [r8]
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	f1ba 0f00 	cmp.w	sl, #0
 8007bb8:	d107      	bne.n	8007bca <_strtoul_l.isra.0+0xd8>
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	b101      	cbz	r1, 8007bc2 <_strtoul_l.isra.0+0xd0>
 8007bc0:	4240      	negs	r0, r0
 8007bc2:	f1ba 0f00 	cmp.w	sl, #0
 8007bc6:	d0f8      	beq.n	8007bba <_strtoul_l.isra.0+0xc8>
 8007bc8:	b10b      	cbz	r3, 8007bce <_strtoul_l.isra.0+0xdc>
 8007bca:	f105 39ff 	add.w	r9, r5, #4294967295
 8007bce:	f8ca 9000 	str.w	r9, [sl]
 8007bd2:	e7f2      	b.n	8007bba <_strtoul_l.isra.0+0xc8>
 8007bd4:	2430      	movs	r4, #48	; 0x30
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	d1b0      	bne.n	8007b3c <_strtoul_l.isra.0+0x4a>
 8007bda:	2608      	movs	r6, #8
 8007bdc:	e7ae      	b.n	8007b3c <_strtoul_l.isra.0+0x4a>
 8007bde:	2c30      	cmp	r4, #48	; 0x30
 8007be0:	d0a4      	beq.n	8007b2c <_strtoul_l.isra.0+0x3a>
 8007be2:	260a      	movs	r6, #10
 8007be4:	e7aa      	b.n	8007b3c <_strtoul_l.isra.0+0x4a>
	...

08007be8 <strtoul>:
 8007be8:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <strtoul+0x24>)
 8007bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bec:	681c      	ldr	r4, [r3, #0]
 8007bee:	4d08      	ldr	r5, [pc, #32]	; (8007c10 <strtoul+0x28>)
 8007bf0:	6a23      	ldr	r3, [r4, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf08      	it	eq
 8007bf6:	462b      	moveq	r3, r5
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	460a      	mov	r2, r1
 8007bfe:	4601      	mov	r1, r0
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7ff ff76 	bl	8007af2 <_strtoul_l.isra.0>
 8007c06:	b003      	add	sp, #12
 8007c08:	bd30      	pop	{r4, r5, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000034 	.word	0x20000034
 8007c10:	20000098 	.word	0x20000098

08007c14 <_vsniprintf_r>:
 8007c14:	b530      	push	{r4, r5, lr}
 8007c16:	1e14      	subs	r4, r2, #0
 8007c18:	4605      	mov	r5, r0
 8007c1a:	b09b      	sub	sp, #108	; 0x6c
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	da05      	bge.n	8007c2c <_vsniprintf_r+0x18>
 8007c20:	238b      	movs	r3, #139	; 0x8b
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	b01b      	add	sp, #108	; 0x6c
 8007c2a:	bd30      	pop	{r4, r5, pc}
 8007c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c30:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c34:	bf14      	ite	ne
 8007c36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c3a:	4623      	moveq	r3, r4
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c44:	9100      	str	r1, [sp, #0]
 8007c46:	9104      	str	r1, [sp, #16]
 8007c48:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c50:	4669      	mov	r1, sp
 8007c52:	4628      	mov	r0, r5
 8007c54:	f001 f816 	bl	8008c84 <_svfiprintf_r>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	bfbc      	itt	lt
 8007c5c:	238b      	movlt	r3, #139	; 0x8b
 8007c5e:	602b      	strlt	r3, [r5, #0]
 8007c60:	2c00      	cmp	r4, #0
 8007c62:	d0e1      	beq.n	8007c28 <_vsniprintf_r+0x14>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	2200      	movs	r2, #0
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e7dd      	b.n	8007c28 <_vsniprintf_r+0x14>

08007c6c <vsniprintf>:
 8007c6c:	b507      	push	{r0, r1, r2, lr}
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	460a      	mov	r2, r1
 8007c74:	4601      	mov	r1, r0
 8007c76:	4803      	ldr	r0, [pc, #12]	; (8007c84 <vsniprintf+0x18>)
 8007c78:	6800      	ldr	r0, [r0, #0]
 8007c7a:	f7ff ffcb 	bl	8007c14 <_vsniprintf_r>
 8007c7e:	b003      	add	sp, #12
 8007c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c84:	20000034 	.word	0x20000034

08007c88 <rshift>:
 8007c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8a:	6906      	ldr	r6, [r0, #16]
 8007c8c:	114b      	asrs	r3, r1, #5
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	f100 0414 	add.w	r4, r0, #20
 8007c94:	dd30      	ble.n	8007cf8 <rshift+0x70>
 8007c96:	f011 011f 	ands.w	r1, r1, #31
 8007c9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007c9e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007ca2:	d108      	bne.n	8007cb6 <rshift+0x2e>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	42b2      	cmp	r2, r6
 8007ca8:	460b      	mov	r3, r1
 8007caa:	d211      	bcs.n	8007cd0 <rshift+0x48>
 8007cac:	f852 3b04 	ldr.w	r3, [r2], #4
 8007cb0:	f841 3b04 	str.w	r3, [r1], #4
 8007cb4:	e7f7      	b.n	8007ca6 <rshift+0x1e>
 8007cb6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007cba:	f1c1 0c20 	rsb	ip, r1, #32
 8007cbe:	40cd      	lsrs	r5, r1
 8007cc0:	3204      	adds	r2, #4
 8007cc2:	4623      	mov	r3, r4
 8007cc4:	42b2      	cmp	r2, r6
 8007cc6:	4617      	mov	r7, r2
 8007cc8:	d30c      	bcc.n	8007ce4 <rshift+0x5c>
 8007cca:	601d      	str	r5, [r3, #0]
 8007ccc:	b105      	cbz	r5, 8007cd0 <rshift+0x48>
 8007cce:	3304      	adds	r3, #4
 8007cd0:	1b1a      	subs	r2, r3, r4
 8007cd2:	42a3      	cmp	r3, r4
 8007cd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007cd8:	bf08      	it	eq
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	6102      	str	r2, [r0, #16]
 8007cde:	bf08      	it	eq
 8007ce0:	6143      	streq	r3, [r0, #20]
 8007ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce4:	683f      	ldr	r7, [r7, #0]
 8007ce6:	fa07 f70c 	lsl.w	r7, r7, ip
 8007cea:	433d      	orrs	r5, r7
 8007cec:	f843 5b04 	str.w	r5, [r3], #4
 8007cf0:	f852 5b04 	ldr.w	r5, [r2], #4
 8007cf4:	40cd      	lsrs	r5, r1
 8007cf6:	e7e5      	b.n	8007cc4 <rshift+0x3c>
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	e7e9      	b.n	8007cd0 <rshift+0x48>

08007cfc <__hexdig_fun>:
 8007cfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d00:	2b09      	cmp	r3, #9
 8007d02:	d802      	bhi.n	8007d0a <__hexdig_fun+0xe>
 8007d04:	3820      	subs	r0, #32
 8007d06:	b2c0      	uxtb	r0, r0
 8007d08:	4770      	bx	lr
 8007d0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d801      	bhi.n	8007d16 <__hexdig_fun+0x1a>
 8007d12:	3847      	subs	r0, #71	; 0x47
 8007d14:	e7f7      	b.n	8007d06 <__hexdig_fun+0xa>
 8007d16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d801      	bhi.n	8007d22 <__hexdig_fun+0x26>
 8007d1e:	3827      	subs	r0, #39	; 0x27
 8007d20:	e7f1      	b.n	8007d06 <__hexdig_fun+0xa>
 8007d22:	2000      	movs	r0, #0
 8007d24:	4770      	bx	lr

08007d26 <__gethex>:
 8007d26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	b08b      	sub	sp, #44	; 0x2c
 8007d2c:	468a      	mov	sl, r1
 8007d2e:	9002      	str	r0, [sp, #8]
 8007d30:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007d32:	9306      	str	r3, [sp, #24]
 8007d34:	4690      	mov	r8, r2
 8007d36:	f000 fad0 	bl	80082da <__localeconv_l>
 8007d3a:	6803      	ldr	r3, [r0, #0]
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7f8 fa58 	bl	80001f4 <strlen>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	9001      	str	r0, [sp, #4]
 8007d48:	4403      	add	r3, r0
 8007d4a:	f04f 0b00 	mov.w	fp, #0
 8007d4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d52:	9307      	str	r3, [sp, #28]
 8007d54:	f8da 3000 	ldr.w	r3, [sl]
 8007d58:	3302      	adds	r3, #2
 8007d5a:	461f      	mov	r7, r3
 8007d5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d60:	2830      	cmp	r0, #48	; 0x30
 8007d62:	d06c      	beq.n	8007e3e <__gethex+0x118>
 8007d64:	f7ff ffca 	bl	8007cfc <__hexdig_fun>
 8007d68:	4604      	mov	r4, r0
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d16a      	bne.n	8007e44 <__gethex+0x11e>
 8007d6e:	9a01      	ldr	r2, [sp, #4]
 8007d70:	9903      	ldr	r1, [sp, #12]
 8007d72:	4638      	mov	r0, r7
 8007d74:	f001 fa1c 	bl	80091b0 <strncmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d166      	bne.n	8007e4a <__gethex+0x124>
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	5cf8      	ldrb	r0, [r7, r3]
 8007d80:	18fe      	adds	r6, r7, r3
 8007d82:	f7ff ffbb 	bl	8007cfc <__hexdig_fun>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d062      	beq.n	8007e50 <__gethex+0x12a>
 8007d8a:	4633      	mov	r3, r6
 8007d8c:	7818      	ldrb	r0, [r3, #0]
 8007d8e:	2830      	cmp	r0, #48	; 0x30
 8007d90:	461f      	mov	r7, r3
 8007d92:	f103 0301 	add.w	r3, r3, #1
 8007d96:	d0f9      	beq.n	8007d8c <__gethex+0x66>
 8007d98:	f7ff ffb0 	bl	8007cfc <__hexdig_fun>
 8007d9c:	fab0 f580 	clz	r5, r0
 8007da0:	096d      	lsrs	r5, r5, #5
 8007da2:	4634      	mov	r4, r6
 8007da4:	f04f 0b01 	mov.w	fp, #1
 8007da8:	463a      	mov	r2, r7
 8007daa:	4616      	mov	r6, r2
 8007dac:	3201      	adds	r2, #1
 8007dae:	7830      	ldrb	r0, [r6, #0]
 8007db0:	f7ff ffa4 	bl	8007cfc <__hexdig_fun>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d1f8      	bne.n	8007daa <__gethex+0x84>
 8007db8:	9a01      	ldr	r2, [sp, #4]
 8007dba:	9903      	ldr	r1, [sp, #12]
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f001 f9f7 	bl	80091b0 <strncmp>
 8007dc2:	b950      	cbnz	r0, 8007dda <__gethex+0xb4>
 8007dc4:	b954      	cbnz	r4, 8007ddc <__gethex+0xb6>
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	18f4      	adds	r4, r6, r3
 8007dca:	4622      	mov	r2, r4
 8007dcc:	4616      	mov	r6, r2
 8007dce:	3201      	adds	r2, #1
 8007dd0:	7830      	ldrb	r0, [r6, #0]
 8007dd2:	f7ff ff93 	bl	8007cfc <__hexdig_fun>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d1f8      	bne.n	8007dcc <__gethex+0xa6>
 8007dda:	b10c      	cbz	r4, 8007de0 <__gethex+0xba>
 8007ddc:	1ba4      	subs	r4, r4, r6
 8007dde:	00a4      	lsls	r4, r4, #2
 8007de0:	7833      	ldrb	r3, [r6, #0]
 8007de2:	2b50      	cmp	r3, #80	; 0x50
 8007de4:	d001      	beq.n	8007dea <__gethex+0xc4>
 8007de6:	2b70      	cmp	r3, #112	; 0x70
 8007de8:	d140      	bne.n	8007e6c <__gethex+0x146>
 8007dea:	7873      	ldrb	r3, [r6, #1]
 8007dec:	2b2b      	cmp	r3, #43	; 0x2b
 8007dee:	d031      	beq.n	8007e54 <__gethex+0x12e>
 8007df0:	2b2d      	cmp	r3, #45	; 0x2d
 8007df2:	d033      	beq.n	8007e5c <__gethex+0x136>
 8007df4:	1c71      	adds	r1, r6, #1
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	7808      	ldrb	r0, [r1, #0]
 8007dfc:	f7ff ff7e 	bl	8007cfc <__hexdig_fun>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b18      	cmp	r3, #24
 8007e06:	d831      	bhi.n	8007e6c <__gethex+0x146>
 8007e08:	f1a0 0210 	sub.w	r2, r0, #16
 8007e0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e10:	f7ff ff74 	bl	8007cfc <__hexdig_fun>
 8007e14:	1e43      	subs	r3, r0, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b18      	cmp	r3, #24
 8007e1a:	d922      	bls.n	8007e62 <__gethex+0x13c>
 8007e1c:	f1b9 0f00 	cmp.w	r9, #0
 8007e20:	d000      	beq.n	8007e24 <__gethex+0xfe>
 8007e22:	4252      	negs	r2, r2
 8007e24:	4414      	add	r4, r2
 8007e26:	f8ca 1000 	str.w	r1, [sl]
 8007e2a:	b30d      	cbz	r5, 8007e70 <__gethex+0x14a>
 8007e2c:	f1bb 0f00 	cmp.w	fp, #0
 8007e30:	bf0c      	ite	eq
 8007e32:	2706      	moveq	r7, #6
 8007e34:	2700      	movne	r7, #0
 8007e36:	4638      	mov	r0, r7
 8007e38:	b00b      	add	sp, #44	; 0x2c
 8007e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3e:	f10b 0b01 	add.w	fp, fp, #1
 8007e42:	e78a      	b.n	8007d5a <__gethex+0x34>
 8007e44:	2500      	movs	r5, #0
 8007e46:	462c      	mov	r4, r5
 8007e48:	e7ae      	b.n	8007da8 <__gethex+0x82>
 8007e4a:	463e      	mov	r6, r7
 8007e4c:	2501      	movs	r5, #1
 8007e4e:	e7c7      	b.n	8007de0 <__gethex+0xba>
 8007e50:	4604      	mov	r4, r0
 8007e52:	e7fb      	b.n	8007e4c <__gethex+0x126>
 8007e54:	f04f 0900 	mov.w	r9, #0
 8007e58:	1cb1      	adds	r1, r6, #2
 8007e5a:	e7ce      	b.n	8007dfa <__gethex+0xd4>
 8007e5c:	f04f 0901 	mov.w	r9, #1
 8007e60:	e7fa      	b.n	8007e58 <__gethex+0x132>
 8007e62:	230a      	movs	r3, #10
 8007e64:	fb03 0202 	mla	r2, r3, r2, r0
 8007e68:	3a10      	subs	r2, #16
 8007e6a:	e7cf      	b.n	8007e0c <__gethex+0xe6>
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	e7da      	b.n	8007e26 <__gethex+0x100>
 8007e70:	1bf3      	subs	r3, r6, r7
 8007e72:	3b01      	subs	r3, #1
 8007e74:	4629      	mov	r1, r5
 8007e76:	2b07      	cmp	r3, #7
 8007e78:	dc49      	bgt.n	8007f0e <__gethex+0x1e8>
 8007e7a:	9802      	ldr	r0, [sp, #8]
 8007e7c:	f000 fa41 	bl	8008302 <_Balloc>
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	f100 0914 	add.w	r9, r0, #20
 8007e86:	f04f 0b00 	mov.w	fp, #0
 8007e8a:	f1c3 0301 	rsb	r3, r3, #1
 8007e8e:	4605      	mov	r5, r0
 8007e90:	f8cd 9010 	str.w	r9, [sp, #16]
 8007e94:	46da      	mov	sl, fp
 8007e96:	9308      	str	r3, [sp, #32]
 8007e98:	42b7      	cmp	r7, r6
 8007e9a:	d33b      	bcc.n	8007f14 <__gethex+0x1ee>
 8007e9c:	9804      	ldr	r0, [sp, #16]
 8007e9e:	f840 ab04 	str.w	sl, [r0], #4
 8007ea2:	eba0 0009 	sub.w	r0, r0, r9
 8007ea6:	1080      	asrs	r0, r0, #2
 8007ea8:	6128      	str	r0, [r5, #16]
 8007eaa:	0147      	lsls	r7, r0, #5
 8007eac:	4650      	mov	r0, sl
 8007eae:	f000 faec 	bl	800848a <__hi0bits>
 8007eb2:	f8d8 6000 	ldr.w	r6, [r8]
 8007eb6:	1a3f      	subs	r7, r7, r0
 8007eb8:	42b7      	cmp	r7, r6
 8007eba:	dd64      	ble.n	8007f86 <__gethex+0x260>
 8007ebc:	1bbf      	subs	r7, r7, r6
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f000 fdfb 	bl	8008abc <__any_on>
 8007ec6:	4682      	mov	sl, r0
 8007ec8:	b178      	cbz	r0, 8007eea <__gethex+0x1c4>
 8007eca:	1e7b      	subs	r3, r7, #1
 8007ecc:	1159      	asrs	r1, r3, #5
 8007ece:	f003 021f 	and.w	r2, r3, #31
 8007ed2:	f04f 0a01 	mov.w	sl, #1
 8007ed6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007eda:	fa0a f202 	lsl.w	r2, sl, r2
 8007ede:	420a      	tst	r2, r1
 8007ee0:	d003      	beq.n	8007eea <__gethex+0x1c4>
 8007ee2:	4553      	cmp	r3, sl
 8007ee4:	dc46      	bgt.n	8007f74 <__gethex+0x24e>
 8007ee6:	f04f 0a02 	mov.w	sl, #2
 8007eea:	4639      	mov	r1, r7
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7ff fecb 	bl	8007c88 <rshift>
 8007ef2:	443c      	add	r4, r7
 8007ef4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	da52      	bge.n	8007fa2 <__gethex+0x27c>
 8007efc:	4629      	mov	r1, r5
 8007efe:	9802      	ldr	r0, [sp, #8]
 8007f00:	f000 fa33 	bl	800836a <_Bfree>
 8007f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f06:	2300      	movs	r3, #0
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	27a3      	movs	r7, #163	; 0xa3
 8007f0c:	e793      	b.n	8007e36 <__gethex+0x110>
 8007f0e:	3101      	adds	r1, #1
 8007f10:	105b      	asrs	r3, r3, #1
 8007f12:	e7b0      	b.n	8007e76 <__gethex+0x150>
 8007f14:	1e73      	subs	r3, r6, #1
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	9a07      	ldr	r2, [sp, #28]
 8007f1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d018      	beq.n	8007f54 <__gethex+0x22e>
 8007f22:	f1bb 0f20 	cmp.w	fp, #32
 8007f26:	d107      	bne.n	8007f38 <__gethex+0x212>
 8007f28:	9b04      	ldr	r3, [sp, #16]
 8007f2a:	f8c3 a000 	str.w	sl, [r3]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	f04f 0a00 	mov.w	sl, #0
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	46d3      	mov	fp, sl
 8007f38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f3c:	f7ff fede 	bl	8007cfc <__hexdig_fun>
 8007f40:	f000 000f 	and.w	r0, r0, #15
 8007f44:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f48:	ea4a 0a00 	orr.w	sl, sl, r0
 8007f4c:	f10b 0b04 	add.w	fp, fp, #4
 8007f50:	9b05      	ldr	r3, [sp, #20]
 8007f52:	e00d      	b.n	8007f70 <__gethex+0x24a>
 8007f54:	9b05      	ldr	r3, [sp, #20]
 8007f56:	9a08      	ldr	r2, [sp, #32]
 8007f58:	4413      	add	r3, r2
 8007f5a:	42bb      	cmp	r3, r7
 8007f5c:	d3e1      	bcc.n	8007f22 <__gethex+0x1fc>
 8007f5e:	4618      	mov	r0, r3
 8007f60:	9a01      	ldr	r2, [sp, #4]
 8007f62:	9903      	ldr	r1, [sp, #12]
 8007f64:	9309      	str	r3, [sp, #36]	; 0x24
 8007f66:	f001 f923 	bl	80091b0 <strncmp>
 8007f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d1d8      	bne.n	8007f22 <__gethex+0x1fc>
 8007f70:	461e      	mov	r6, r3
 8007f72:	e791      	b.n	8007e98 <__gethex+0x172>
 8007f74:	1eb9      	subs	r1, r7, #2
 8007f76:	4628      	mov	r0, r5
 8007f78:	f000 fda0 	bl	8008abc <__any_on>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d0b2      	beq.n	8007ee6 <__gethex+0x1c0>
 8007f80:	f04f 0a03 	mov.w	sl, #3
 8007f84:	e7b1      	b.n	8007eea <__gethex+0x1c4>
 8007f86:	da09      	bge.n	8007f9c <__gethex+0x276>
 8007f88:	1bf7      	subs	r7, r6, r7
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	463a      	mov	r2, r7
 8007f8e:	9802      	ldr	r0, [sp, #8]
 8007f90:	f000 fbb6 	bl	8008700 <__lshift>
 8007f94:	1be4      	subs	r4, r4, r7
 8007f96:	4605      	mov	r5, r0
 8007f98:	f100 0914 	add.w	r9, r0, #20
 8007f9c:	f04f 0a00 	mov.w	sl, #0
 8007fa0:	e7a8      	b.n	8007ef4 <__gethex+0x1ce>
 8007fa2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007fa6:	42a0      	cmp	r0, r4
 8007fa8:	dd6a      	ble.n	8008080 <__gethex+0x35a>
 8007faa:	1b04      	subs	r4, r0, r4
 8007fac:	42a6      	cmp	r6, r4
 8007fae:	dc2e      	bgt.n	800800e <__gethex+0x2e8>
 8007fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d022      	beq.n	8007ffe <__gethex+0x2d8>
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d024      	beq.n	8008006 <__gethex+0x2e0>
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d115      	bne.n	8007fec <__gethex+0x2c6>
 8007fc0:	42a6      	cmp	r6, r4
 8007fc2:	d113      	bne.n	8007fec <__gethex+0x2c6>
 8007fc4:	2e01      	cmp	r6, #1
 8007fc6:	dc0b      	bgt.n	8007fe0 <__gethex+0x2ba>
 8007fc8:	9a06      	ldr	r2, [sp, #24]
 8007fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	612b      	str	r3, [r5, #16]
 8007fd4:	f8c9 3000 	str.w	r3, [r9]
 8007fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fda:	2762      	movs	r7, #98	; 0x62
 8007fdc:	601d      	str	r5, [r3, #0]
 8007fde:	e72a      	b.n	8007e36 <__gethex+0x110>
 8007fe0:	1e71      	subs	r1, r6, #1
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f000 fd6a 	bl	8008abc <__any_on>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d1ed      	bne.n	8007fc8 <__gethex+0x2a2>
 8007fec:	4629      	mov	r1, r5
 8007fee:	9802      	ldr	r0, [sp, #8]
 8007ff0:	f000 f9bb 	bl	800836a <_Bfree>
 8007ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	2750      	movs	r7, #80	; 0x50
 8007ffc:	e71b      	b.n	8007e36 <__gethex+0x110>
 8007ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0e1      	beq.n	8007fc8 <__gethex+0x2a2>
 8008004:	e7f2      	b.n	8007fec <__gethex+0x2c6>
 8008006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1dd      	bne.n	8007fc8 <__gethex+0x2a2>
 800800c:	e7ee      	b.n	8007fec <__gethex+0x2c6>
 800800e:	1e67      	subs	r7, r4, #1
 8008010:	f1ba 0f00 	cmp.w	sl, #0
 8008014:	d131      	bne.n	800807a <__gethex+0x354>
 8008016:	b127      	cbz	r7, 8008022 <__gethex+0x2fc>
 8008018:	4639      	mov	r1, r7
 800801a:	4628      	mov	r0, r5
 800801c:	f000 fd4e 	bl	8008abc <__any_on>
 8008020:	4682      	mov	sl, r0
 8008022:	117a      	asrs	r2, r7, #5
 8008024:	2301      	movs	r3, #1
 8008026:	f007 071f 	and.w	r7, r7, #31
 800802a:	fa03 f707 	lsl.w	r7, r3, r7
 800802e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008032:	4621      	mov	r1, r4
 8008034:	421f      	tst	r7, r3
 8008036:	4628      	mov	r0, r5
 8008038:	bf18      	it	ne
 800803a:	f04a 0a02 	orrne.w	sl, sl, #2
 800803e:	1b36      	subs	r6, r6, r4
 8008040:	f7ff fe22 	bl	8007c88 <rshift>
 8008044:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008048:	2702      	movs	r7, #2
 800804a:	f1ba 0f00 	cmp.w	sl, #0
 800804e:	d048      	beq.n	80080e2 <__gethex+0x3bc>
 8008050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d015      	beq.n	8008084 <__gethex+0x35e>
 8008058:	2b03      	cmp	r3, #3
 800805a:	d017      	beq.n	800808c <__gethex+0x366>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d109      	bne.n	8008074 <__gethex+0x34e>
 8008060:	f01a 0f02 	tst.w	sl, #2
 8008064:	d006      	beq.n	8008074 <__gethex+0x34e>
 8008066:	f8d9 3000 	ldr.w	r3, [r9]
 800806a:	ea4a 0a03 	orr.w	sl, sl, r3
 800806e:	f01a 0f01 	tst.w	sl, #1
 8008072:	d10e      	bne.n	8008092 <__gethex+0x36c>
 8008074:	f047 0710 	orr.w	r7, r7, #16
 8008078:	e033      	b.n	80080e2 <__gethex+0x3bc>
 800807a:	f04f 0a01 	mov.w	sl, #1
 800807e:	e7d0      	b.n	8008022 <__gethex+0x2fc>
 8008080:	2701      	movs	r7, #1
 8008082:	e7e2      	b.n	800804a <__gethex+0x324>
 8008084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008086:	f1c3 0301 	rsb	r3, r3, #1
 800808a:	9315      	str	r3, [sp, #84]	; 0x54
 800808c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <__gethex+0x34e>
 8008092:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008096:	f105 0314 	add.w	r3, r5, #20
 800809a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800809e:	eb03 010a 	add.w	r1, r3, sl
 80080a2:	f04f 0c00 	mov.w	ip, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80080b0:	d01c      	beq.n	80080ec <__gethex+0x3c6>
 80080b2:	3201      	adds	r2, #1
 80080b4:	6002      	str	r2, [r0, #0]
 80080b6:	2f02      	cmp	r7, #2
 80080b8:	f105 0314 	add.w	r3, r5, #20
 80080bc:	d138      	bne.n	8008130 <__gethex+0x40a>
 80080be:	f8d8 2000 	ldr.w	r2, [r8]
 80080c2:	3a01      	subs	r2, #1
 80080c4:	42b2      	cmp	r2, r6
 80080c6:	d10a      	bne.n	80080de <__gethex+0x3b8>
 80080c8:	1171      	asrs	r1, r6, #5
 80080ca:	2201      	movs	r2, #1
 80080cc:	f006 061f 	and.w	r6, r6, #31
 80080d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080d4:	fa02 f606 	lsl.w	r6, r2, r6
 80080d8:	421e      	tst	r6, r3
 80080da:	bf18      	it	ne
 80080dc:	4617      	movne	r7, r2
 80080de:	f047 0720 	orr.w	r7, r7, #32
 80080e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080e4:	601d      	str	r5, [r3, #0]
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	601c      	str	r4, [r3, #0]
 80080ea:	e6a4      	b.n	8007e36 <__gethex+0x110>
 80080ec:	4299      	cmp	r1, r3
 80080ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80080f2:	d8d8      	bhi.n	80080a6 <__gethex+0x380>
 80080f4:	68ab      	ldr	r3, [r5, #8]
 80080f6:	4599      	cmp	r9, r3
 80080f8:	db12      	blt.n	8008120 <__gethex+0x3fa>
 80080fa:	6869      	ldr	r1, [r5, #4]
 80080fc:	9802      	ldr	r0, [sp, #8]
 80080fe:	3101      	adds	r1, #1
 8008100:	f000 f8ff 	bl	8008302 <_Balloc>
 8008104:	692a      	ldr	r2, [r5, #16]
 8008106:	3202      	adds	r2, #2
 8008108:	f105 010c 	add.w	r1, r5, #12
 800810c:	4683      	mov	fp, r0
 800810e:	0092      	lsls	r2, r2, #2
 8008110:	300c      	adds	r0, #12
 8008112:	f7fe fe3f 	bl	8006d94 <memcpy>
 8008116:	4629      	mov	r1, r5
 8008118:	9802      	ldr	r0, [sp, #8]
 800811a:	f000 f926 	bl	800836a <_Bfree>
 800811e:	465d      	mov	r5, fp
 8008120:	692b      	ldr	r3, [r5, #16]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008128:	612a      	str	r2, [r5, #16]
 800812a:	2201      	movs	r2, #1
 800812c:	615a      	str	r2, [r3, #20]
 800812e:	e7c2      	b.n	80080b6 <__gethex+0x390>
 8008130:	692a      	ldr	r2, [r5, #16]
 8008132:	454a      	cmp	r2, r9
 8008134:	dd0b      	ble.n	800814e <__gethex+0x428>
 8008136:	2101      	movs	r1, #1
 8008138:	4628      	mov	r0, r5
 800813a:	f7ff fda5 	bl	8007c88 <rshift>
 800813e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008142:	3401      	adds	r4, #1
 8008144:	42a3      	cmp	r3, r4
 8008146:	f6ff aed9 	blt.w	8007efc <__gethex+0x1d6>
 800814a:	2701      	movs	r7, #1
 800814c:	e7c7      	b.n	80080de <__gethex+0x3b8>
 800814e:	f016 061f 	ands.w	r6, r6, #31
 8008152:	d0fa      	beq.n	800814a <__gethex+0x424>
 8008154:	449a      	add	sl, r3
 8008156:	f1c6 0620 	rsb	r6, r6, #32
 800815a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800815e:	f000 f994 	bl	800848a <__hi0bits>
 8008162:	42b0      	cmp	r0, r6
 8008164:	dbe7      	blt.n	8008136 <__gethex+0x410>
 8008166:	e7f0      	b.n	800814a <__gethex+0x424>

08008168 <L_shift>:
 8008168:	f1c2 0208 	rsb	r2, r2, #8
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	b570      	push	{r4, r5, r6, lr}
 8008170:	f1c2 0620 	rsb	r6, r2, #32
 8008174:	6843      	ldr	r3, [r0, #4]
 8008176:	6804      	ldr	r4, [r0, #0]
 8008178:	fa03 f506 	lsl.w	r5, r3, r6
 800817c:	432c      	orrs	r4, r5
 800817e:	40d3      	lsrs	r3, r2
 8008180:	6004      	str	r4, [r0, #0]
 8008182:	f840 3f04 	str.w	r3, [r0, #4]!
 8008186:	4288      	cmp	r0, r1
 8008188:	d3f4      	bcc.n	8008174 <L_shift+0xc>
 800818a:	bd70      	pop	{r4, r5, r6, pc}

0800818c <__match>:
 800818c:	b530      	push	{r4, r5, lr}
 800818e:	6803      	ldr	r3, [r0, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008196:	b914      	cbnz	r4, 800819e <__match+0x12>
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	2001      	movs	r0, #1
 800819c:	bd30      	pop	{r4, r5, pc}
 800819e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80081a6:	2d19      	cmp	r5, #25
 80081a8:	bf98      	it	ls
 80081aa:	3220      	addls	r2, #32
 80081ac:	42a2      	cmp	r2, r4
 80081ae:	d0f0      	beq.n	8008192 <__match+0x6>
 80081b0:	2000      	movs	r0, #0
 80081b2:	e7f3      	b.n	800819c <__match+0x10>

080081b4 <__hexnan>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	680b      	ldr	r3, [r1, #0]
 80081ba:	6801      	ldr	r1, [r0, #0]
 80081bc:	115f      	asrs	r7, r3, #5
 80081be:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80081c2:	f013 031f 	ands.w	r3, r3, #31
 80081c6:	b087      	sub	sp, #28
 80081c8:	bf18      	it	ne
 80081ca:	3704      	addne	r7, #4
 80081cc:	2500      	movs	r5, #0
 80081ce:	1f3e      	subs	r6, r7, #4
 80081d0:	4682      	mov	sl, r0
 80081d2:	4690      	mov	r8, r2
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	f847 5c04 	str.w	r5, [r7, #-4]
 80081da:	46b1      	mov	r9, r6
 80081dc:	4634      	mov	r4, r6
 80081de:	9502      	str	r5, [sp, #8]
 80081e0:	46ab      	mov	fp, r5
 80081e2:	784a      	ldrb	r2, [r1, #1]
 80081e4:	1c4b      	adds	r3, r1, #1
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	b342      	cbz	r2, 800823c <__hexnan+0x88>
 80081ea:	4610      	mov	r0, r2
 80081ec:	9105      	str	r1, [sp, #20]
 80081ee:	9204      	str	r2, [sp, #16]
 80081f0:	f7ff fd84 	bl	8007cfc <__hexdig_fun>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d143      	bne.n	8008280 <__hexnan+0xcc>
 80081f8:	9a04      	ldr	r2, [sp, #16]
 80081fa:	9905      	ldr	r1, [sp, #20]
 80081fc:	2a20      	cmp	r2, #32
 80081fe:	d818      	bhi.n	8008232 <__hexnan+0x7e>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	459b      	cmp	fp, r3
 8008204:	dd13      	ble.n	800822e <__hexnan+0x7a>
 8008206:	454c      	cmp	r4, r9
 8008208:	d206      	bcs.n	8008218 <__hexnan+0x64>
 800820a:	2d07      	cmp	r5, #7
 800820c:	dc04      	bgt.n	8008218 <__hexnan+0x64>
 800820e:	462a      	mov	r2, r5
 8008210:	4649      	mov	r1, r9
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff ffa8 	bl	8008168 <L_shift>
 8008218:	4544      	cmp	r4, r8
 800821a:	d944      	bls.n	80082a6 <__hexnan+0xf2>
 800821c:	2300      	movs	r3, #0
 800821e:	f1a4 0904 	sub.w	r9, r4, #4
 8008222:	f844 3c04 	str.w	r3, [r4, #-4]
 8008226:	f8cd b008 	str.w	fp, [sp, #8]
 800822a:	464c      	mov	r4, r9
 800822c:	461d      	mov	r5, r3
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	e7d7      	b.n	80081e2 <__hexnan+0x2e>
 8008232:	2a29      	cmp	r2, #41	; 0x29
 8008234:	d14a      	bne.n	80082cc <__hexnan+0x118>
 8008236:	3102      	adds	r1, #2
 8008238:	f8ca 1000 	str.w	r1, [sl]
 800823c:	f1bb 0f00 	cmp.w	fp, #0
 8008240:	d044      	beq.n	80082cc <__hexnan+0x118>
 8008242:	454c      	cmp	r4, r9
 8008244:	d206      	bcs.n	8008254 <__hexnan+0xa0>
 8008246:	2d07      	cmp	r5, #7
 8008248:	dc04      	bgt.n	8008254 <__hexnan+0xa0>
 800824a:	462a      	mov	r2, r5
 800824c:	4649      	mov	r1, r9
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff ff8a 	bl	8008168 <L_shift>
 8008254:	4544      	cmp	r4, r8
 8008256:	d928      	bls.n	80082aa <__hexnan+0xf6>
 8008258:	4643      	mov	r3, r8
 800825a:	f854 2b04 	ldr.w	r2, [r4], #4
 800825e:	f843 2b04 	str.w	r2, [r3], #4
 8008262:	42a6      	cmp	r6, r4
 8008264:	d2f9      	bcs.n	800825a <__hexnan+0xa6>
 8008266:	2200      	movs	r2, #0
 8008268:	f843 2b04 	str.w	r2, [r3], #4
 800826c:	429e      	cmp	r6, r3
 800826e:	d2fb      	bcs.n	8008268 <__hexnan+0xb4>
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	b91b      	cbnz	r3, 800827c <__hexnan+0xc8>
 8008274:	4546      	cmp	r6, r8
 8008276:	d127      	bne.n	80082c8 <__hexnan+0x114>
 8008278:	2301      	movs	r3, #1
 800827a:	6033      	str	r3, [r6, #0]
 800827c:	2005      	movs	r0, #5
 800827e:	e026      	b.n	80082ce <__hexnan+0x11a>
 8008280:	3501      	adds	r5, #1
 8008282:	2d08      	cmp	r5, #8
 8008284:	f10b 0b01 	add.w	fp, fp, #1
 8008288:	dd06      	ble.n	8008298 <__hexnan+0xe4>
 800828a:	4544      	cmp	r4, r8
 800828c:	d9cf      	bls.n	800822e <__hexnan+0x7a>
 800828e:	2300      	movs	r3, #0
 8008290:	f844 3c04 	str.w	r3, [r4, #-4]
 8008294:	2501      	movs	r5, #1
 8008296:	3c04      	subs	r4, #4
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	f000 000f 	and.w	r0, r0, #15
 800829e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80082a2:	6020      	str	r0, [r4, #0]
 80082a4:	e7c3      	b.n	800822e <__hexnan+0x7a>
 80082a6:	2508      	movs	r5, #8
 80082a8:	e7c1      	b.n	800822e <__hexnan+0x7a>
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0df      	beq.n	8008270 <__hexnan+0xbc>
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	f1c3 0320 	rsb	r3, r3, #32
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
 80082bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80082c0:	401a      	ands	r2, r3
 80082c2:	f847 2c04 	str.w	r2, [r7, #-4]
 80082c6:	e7d3      	b.n	8008270 <__hexnan+0xbc>
 80082c8:	3e04      	subs	r6, #4
 80082ca:	e7d1      	b.n	8008270 <__hexnan+0xbc>
 80082cc:	2004      	movs	r0, #4
 80082ce:	b007      	add	sp, #28
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082d4 <__locale_ctype_ptr_l>:
 80082d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80082d8:	4770      	bx	lr

080082da <__localeconv_l>:
 80082da:	30f0      	adds	r0, #240	; 0xf0
 80082dc:	4770      	bx	lr

080082de <__ascii_mbtowc>:
 80082de:	b082      	sub	sp, #8
 80082e0:	b901      	cbnz	r1, 80082e4 <__ascii_mbtowc+0x6>
 80082e2:	a901      	add	r1, sp, #4
 80082e4:	b142      	cbz	r2, 80082f8 <__ascii_mbtowc+0x1a>
 80082e6:	b14b      	cbz	r3, 80082fc <__ascii_mbtowc+0x1e>
 80082e8:	7813      	ldrb	r3, [r2, #0]
 80082ea:	600b      	str	r3, [r1, #0]
 80082ec:	7812      	ldrb	r2, [r2, #0]
 80082ee:	1c10      	adds	r0, r2, #0
 80082f0:	bf18      	it	ne
 80082f2:	2001      	movne	r0, #1
 80082f4:	b002      	add	sp, #8
 80082f6:	4770      	bx	lr
 80082f8:	4610      	mov	r0, r2
 80082fa:	e7fb      	b.n	80082f4 <__ascii_mbtowc+0x16>
 80082fc:	f06f 0001 	mvn.w	r0, #1
 8008300:	e7f8      	b.n	80082f4 <__ascii_mbtowc+0x16>

08008302 <_Balloc>:
 8008302:	b570      	push	{r4, r5, r6, lr}
 8008304:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008306:	4604      	mov	r4, r0
 8008308:	460e      	mov	r6, r1
 800830a:	b93d      	cbnz	r5, 800831c <_Balloc+0x1a>
 800830c:	2010      	movs	r0, #16
 800830e:	f000 ff6f 	bl	80091f0 <malloc>
 8008312:	6260      	str	r0, [r4, #36]	; 0x24
 8008314:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008318:	6005      	str	r5, [r0, #0]
 800831a:	60c5      	str	r5, [r0, #12]
 800831c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800831e:	68eb      	ldr	r3, [r5, #12]
 8008320:	b183      	cbz	r3, 8008344 <_Balloc+0x42>
 8008322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800832a:	b9b8      	cbnz	r0, 800835c <_Balloc+0x5a>
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f506 	lsl.w	r5, r1, r6
 8008332:	1d6a      	adds	r2, r5, #5
 8008334:	0092      	lsls	r2, r2, #2
 8008336:	4620      	mov	r0, r4
 8008338:	f000 fbe1 	bl	8008afe <_calloc_r>
 800833c:	b160      	cbz	r0, 8008358 <_Balloc+0x56>
 800833e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008342:	e00e      	b.n	8008362 <_Balloc+0x60>
 8008344:	2221      	movs	r2, #33	; 0x21
 8008346:	2104      	movs	r1, #4
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fbd8 	bl	8008afe <_calloc_r>
 800834e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008350:	60e8      	str	r0, [r5, #12]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e4      	bne.n	8008322 <_Balloc+0x20>
 8008358:	2000      	movs	r0, #0
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	6802      	ldr	r2, [r0, #0]
 800835e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008362:	2300      	movs	r3, #0
 8008364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008368:	e7f7      	b.n	800835a <_Balloc+0x58>

0800836a <_Bfree>:
 800836a:	b570      	push	{r4, r5, r6, lr}
 800836c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800836e:	4606      	mov	r6, r0
 8008370:	460d      	mov	r5, r1
 8008372:	b93c      	cbnz	r4, 8008384 <_Bfree+0x1a>
 8008374:	2010      	movs	r0, #16
 8008376:	f000 ff3b 	bl	80091f0 <malloc>
 800837a:	6270      	str	r0, [r6, #36]	; 0x24
 800837c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008380:	6004      	str	r4, [r0, #0]
 8008382:	60c4      	str	r4, [r0, #12]
 8008384:	b13d      	cbz	r5, 8008396 <_Bfree+0x2c>
 8008386:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008388:	686a      	ldr	r2, [r5, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008390:	6029      	str	r1, [r5, #0]
 8008392:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008396:	bd70      	pop	{r4, r5, r6, pc}

08008398 <__multadd>:
 8008398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839c:	690d      	ldr	r5, [r1, #16]
 800839e:	461f      	mov	r7, r3
 80083a0:	4606      	mov	r6, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	f101 0c14 	add.w	ip, r1, #20
 80083a8:	2300      	movs	r3, #0
 80083aa:	f8dc 0000 	ldr.w	r0, [ip]
 80083ae:	b281      	uxth	r1, r0
 80083b0:	fb02 7101 	mla	r1, r2, r1, r7
 80083b4:	0c0f      	lsrs	r7, r1, #16
 80083b6:	0c00      	lsrs	r0, r0, #16
 80083b8:	fb02 7000 	mla	r0, r2, r0, r7
 80083bc:	b289      	uxth	r1, r1
 80083be:	3301      	adds	r3, #1
 80083c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80083c4:	429d      	cmp	r5, r3
 80083c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80083ca:	f84c 1b04 	str.w	r1, [ip], #4
 80083ce:	dcec      	bgt.n	80083aa <__multadd+0x12>
 80083d0:	b1d7      	cbz	r7, 8008408 <__multadd+0x70>
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	42ab      	cmp	r3, r5
 80083d6:	dc12      	bgt.n	80083fe <__multadd+0x66>
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	4630      	mov	r0, r6
 80083dc:	3101      	adds	r1, #1
 80083de:	f7ff ff90 	bl	8008302 <_Balloc>
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	3202      	adds	r2, #2
 80083e6:	f104 010c 	add.w	r1, r4, #12
 80083ea:	4680      	mov	r8, r0
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	300c      	adds	r0, #12
 80083f0:	f7fe fcd0 	bl	8006d94 <memcpy>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ffb7 	bl	800836a <_Bfree>
 80083fc:	4644      	mov	r4, r8
 80083fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008402:	3501      	adds	r5, #1
 8008404:	615f      	str	r7, [r3, #20]
 8008406:	6125      	str	r5, [r4, #16]
 8008408:	4620      	mov	r0, r4
 800840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800840e <__s2b>:
 800840e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	4615      	mov	r5, r2
 8008416:	461f      	mov	r7, r3
 8008418:	2209      	movs	r2, #9
 800841a:	3308      	adds	r3, #8
 800841c:	4606      	mov	r6, r0
 800841e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008422:	2100      	movs	r1, #0
 8008424:	2201      	movs	r2, #1
 8008426:	429a      	cmp	r2, r3
 8008428:	db20      	blt.n	800846c <__s2b+0x5e>
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ff69 	bl	8008302 <_Balloc>
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	6143      	str	r3, [r0, #20]
 8008434:	2d09      	cmp	r5, #9
 8008436:	f04f 0301 	mov.w	r3, #1
 800843a:	6103      	str	r3, [r0, #16]
 800843c:	dd19      	ble.n	8008472 <__s2b+0x64>
 800843e:	f104 0809 	add.w	r8, r4, #9
 8008442:	46c1      	mov	r9, r8
 8008444:	442c      	add	r4, r5
 8008446:	f819 3b01 	ldrb.w	r3, [r9], #1
 800844a:	4601      	mov	r1, r0
 800844c:	3b30      	subs	r3, #48	; 0x30
 800844e:	220a      	movs	r2, #10
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff ffa1 	bl	8008398 <__multadd>
 8008456:	45a1      	cmp	r9, r4
 8008458:	d1f5      	bne.n	8008446 <__s2b+0x38>
 800845a:	eb08 0405 	add.w	r4, r8, r5
 800845e:	3c08      	subs	r4, #8
 8008460:	1b2d      	subs	r5, r5, r4
 8008462:	1963      	adds	r3, r4, r5
 8008464:	42bb      	cmp	r3, r7
 8008466:	db07      	blt.n	8008478 <__s2b+0x6a>
 8008468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846c:	0052      	lsls	r2, r2, #1
 800846e:	3101      	adds	r1, #1
 8008470:	e7d9      	b.n	8008426 <__s2b+0x18>
 8008472:	340a      	adds	r4, #10
 8008474:	2509      	movs	r5, #9
 8008476:	e7f3      	b.n	8008460 <__s2b+0x52>
 8008478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800847c:	4601      	mov	r1, r0
 800847e:	3b30      	subs	r3, #48	; 0x30
 8008480:	220a      	movs	r2, #10
 8008482:	4630      	mov	r0, r6
 8008484:	f7ff ff88 	bl	8008398 <__multadd>
 8008488:	e7eb      	b.n	8008462 <__s2b+0x54>

0800848a <__hi0bits>:
 800848a:	0c02      	lsrs	r2, r0, #16
 800848c:	0412      	lsls	r2, r2, #16
 800848e:	4603      	mov	r3, r0
 8008490:	b9b2      	cbnz	r2, 80084c0 <__hi0bits+0x36>
 8008492:	0403      	lsls	r3, r0, #16
 8008494:	2010      	movs	r0, #16
 8008496:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800849a:	bf04      	itt	eq
 800849c:	021b      	lsleq	r3, r3, #8
 800849e:	3008      	addeq	r0, #8
 80084a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084a4:	bf04      	itt	eq
 80084a6:	011b      	lsleq	r3, r3, #4
 80084a8:	3004      	addeq	r0, #4
 80084aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084ae:	bf04      	itt	eq
 80084b0:	009b      	lsleq	r3, r3, #2
 80084b2:	3002      	addeq	r0, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	db06      	blt.n	80084c6 <__hi0bits+0x3c>
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	d503      	bpl.n	80084c4 <__hi0bits+0x3a>
 80084bc:	3001      	adds	r0, #1
 80084be:	4770      	bx	lr
 80084c0:	2000      	movs	r0, #0
 80084c2:	e7e8      	b.n	8008496 <__hi0bits+0xc>
 80084c4:	2020      	movs	r0, #32
 80084c6:	4770      	bx	lr

080084c8 <__lo0bits>:
 80084c8:	6803      	ldr	r3, [r0, #0]
 80084ca:	f013 0207 	ands.w	r2, r3, #7
 80084ce:	4601      	mov	r1, r0
 80084d0:	d00b      	beq.n	80084ea <__lo0bits+0x22>
 80084d2:	07da      	lsls	r2, r3, #31
 80084d4:	d423      	bmi.n	800851e <__lo0bits+0x56>
 80084d6:	0798      	lsls	r0, r3, #30
 80084d8:	bf49      	itett	mi
 80084da:	085b      	lsrmi	r3, r3, #1
 80084dc:	089b      	lsrpl	r3, r3, #2
 80084de:	2001      	movmi	r0, #1
 80084e0:	600b      	strmi	r3, [r1, #0]
 80084e2:	bf5c      	itt	pl
 80084e4:	600b      	strpl	r3, [r1, #0]
 80084e6:	2002      	movpl	r0, #2
 80084e8:	4770      	bx	lr
 80084ea:	b298      	uxth	r0, r3
 80084ec:	b9a8      	cbnz	r0, 800851a <__lo0bits+0x52>
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	2010      	movs	r0, #16
 80084f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084f6:	bf04      	itt	eq
 80084f8:	0a1b      	lsreq	r3, r3, #8
 80084fa:	3008      	addeq	r0, #8
 80084fc:	071a      	lsls	r2, r3, #28
 80084fe:	bf04      	itt	eq
 8008500:	091b      	lsreq	r3, r3, #4
 8008502:	3004      	addeq	r0, #4
 8008504:	079a      	lsls	r2, r3, #30
 8008506:	bf04      	itt	eq
 8008508:	089b      	lsreq	r3, r3, #2
 800850a:	3002      	addeq	r0, #2
 800850c:	07da      	lsls	r2, r3, #31
 800850e:	d402      	bmi.n	8008516 <__lo0bits+0x4e>
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	d006      	beq.n	8008522 <__lo0bits+0x5a>
 8008514:	3001      	adds	r0, #1
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	4770      	bx	lr
 800851a:	4610      	mov	r0, r2
 800851c:	e7e9      	b.n	80084f2 <__lo0bits+0x2a>
 800851e:	2000      	movs	r0, #0
 8008520:	4770      	bx	lr
 8008522:	2020      	movs	r0, #32
 8008524:	4770      	bx	lr

08008526 <__i2b>:
 8008526:	b510      	push	{r4, lr}
 8008528:	460c      	mov	r4, r1
 800852a:	2101      	movs	r1, #1
 800852c:	f7ff fee9 	bl	8008302 <_Balloc>
 8008530:	2201      	movs	r2, #1
 8008532:	6144      	str	r4, [r0, #20]
 8008534:	6102      	str	r2, [r0, #16]
 8008536:	bd10      	pop	{r4, pc}

08008538 <__multiply>:
 8008538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4614      	mov	r4, r2
 800853e:	690a      	ldr	r2, [r1, #16]
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	429a      	cmp	r2, r3
 8008544:	bfb8      	it	lt
 8008546:	460b      	movlt	r3, r1
 8008548:	4688      	mov	r8, r1
 800854a:	bfbc      	itt	lt
 800854c:	46a0      	movlt	r8, r4
 800854e:	461c      	movlt	r4, r3
 8008550:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008554:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008558:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800855c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008560:	eb07 0609 	add.w	r6, r7, r9
 8008564:	42b3      	cmp	r3, r6
 8008566:	bfb8      	it	lt
 8008568:	3101      	addlt	r1, #1
 800856a:	f7ff feca 	bl	8008302 <_Balloc>
 800856e:	f100 0514 	add.w	r5, r0, #20
 8008572:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008576:	462b      	mov	r3, r5
 8008578:	2200      	movs	r2, #0
 800857a:	4573      	cmp	r3, lr
 800857c:	d316      	bcc.n	80085ac <__multiply+0x74>
 800857e:	f104 0214 	add.w	r2, r4, #20
 8008582:	f108 0114 	add.w	r1, r8, #20
 8008586:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800858a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	9b00      	ldr	r3, [sp, #0]
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	4293      	cmp	r3, r2
 8008596:	d80c      	bhi.n	80085b2 <__multiply+0x7a>
 8008598:	2e00      	cmp	r6, #0
 800859a:	dd03      	ble.n	80085a4 <__multiply+0x6c>
 800859c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d05d      	beq.n	8008660 <__multiply+0x128>
 80085a4:	6106      	str	r6, [r0, #16]
 80085a6:	b003      	add	sp, #12
 80085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ac:	f843 2b04 	str.w	r2, [r3], #4
 80085b0:	e7e3      	b.n	800857a <__multiply+0x42>
 80085b2:	f8b2 b000 	ldrh.w	fp, [r2]
 80085b6:	f1bb 0f00 	cmp.w	fp, #0
 80085ba:	d023      	beq.n	8008604 <__multiply+0xcc>
 80085bc:	4689      	mov	r9, r1
 80085be:	46ac      	mov	ip, r5
 80085c0:	f04f 0800 	mov.w	r8, #0
 80085c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80085c8:	f8dc a000 	ldr.w	sl, [ip]
 80085cc:	b2a3      	uxth	r3, r4
 80085ce:	fa1f fa8a 	uxth.w	sl, sl
 80085d2:	fb0b a303 	mla	r3, fp, r3, sl
 80085d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80085da:	f8dc 4000 	ldr.w	r4, [ip]
 80085de:	4443      	add	r3, r8
 80085e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085e4:	fb0b 840a 	mla	r4, fp, sl, r8
 80085e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80085ec:	46e2      	mov	sl, ip
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085f4:	454f      	cmp	r7, r9
 80085f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085fa:	f84a 3b04 	str.w	r3, [sl], #4
 80085fe:	d82b      	bhi.n	8008658 <__multiply+0x120>
 8008600:	f8cc 8004 	str.w	r8, [ip, #4]
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800860a:	3204      	adds	r2, #4
 800860c:	f1ba 0f00 	cmp.w	sl, #0
 8008610:	d020      	beq.n	8008654 <__multiply+0x11c>
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	4689      	mov	r9, r1
 8008616:	46a8      	mov	r8, r5
 8008618:	f04f 0b00 	mov.w	fp, #0
 800861c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008620:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008624:	fb0a 440c 	mla	r4, sl, ip, r4
 8008628:	445c      	add	r4, fp
 800862a:	46c4      	mov	ip, r8
 800862c:	b29b      	uxth	r3, r3
 800862e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008632:	f84c 3b04 	str.w	r3, [ip], #4
 8008636:	f859 3b04 	ldr.w	r3, [r9], #4
 800863a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800863e:	0c1b      	lsrs	r3, r3, #16
 8008640:	fb0a b303 	mla	r3, sl, r3, fp
 8008644:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008648:	454f      	cmp	r7, r9
 800864a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800864e:	d805      	bhi.n	800865c <__multiply+0x124>
 8008650:	f8c8 3004 	str.w	r3, [r8, #4]
 8008654:	3504      	adds	r5, #4
 8008656:	e79b      	b.n	8008590 <__multiply+0x58>
 8008658:	46d4      	mov	ip, sl
 800865a:	e7b3      	b.n	80085c4 <__multiply+0x8c>
 800865c:	46e0      	mov	r8, ip
 800865e:	e7dd      	b.n	800861c <__multiply+0xe4>
 8008660:	3e01      	subs	r6, #1
 8008662:	e799      	b.n	8008598 <__multiply+0x60>

08008664 <__pow5mult>:
 8008664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008668:	4615      	mov	r5, r2
 800866a:	f012 0203 	ands.w	r2, r2, #3
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	d007      	beq.n	8008684 <__pow5mult+0x20>
 8008674:	3a01      	subs	r2, #1
 8008676:	4c21      	ldr	r4, [pc, #132]	; (80086fc <__pow5mult+0x98>)
 8008678:	2300      	movs	r3, #0
 800867a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800867e:	f7ff fe8b 	bl	8008398 <__multadd>
 8008682:	4607      	mov	r7, r0
 8008684:	10ad      	asrs	r5, r5, #2
 8008686:	d035      	beq.n	80086f4 <__pow5mult+0x90>
 8008688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800868a:	b93c      	cbnz	r4, 800869c <__pow5mult+0x38>
 800868c:	2010      	movs	r0, #16
 800868e:	f000 fdaf 	bl	80091f0 <malloc>
 8008692:	6270      	str	r0, [r6, #36]	; 0x24
 8008694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008698:	6004      	str	r4, [r0, #0]
 800869a:	60c4      	str	r4, [r0, #12]
 800869c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086a4:	b94c      	cbnz	r4, 80086ba <__pow5mult+0x56>
 80086a6:	f240 2171 	movw	r1, #625	; 0x271
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff ff3b 	bl	8008526 <__i2b>
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80086b6:	4604      	mov	r4, r0
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	f04f 0800 	mov.w	r8, #0
 80086be:	07eb      	lsls	r3, r5, #31
 80086c0:	d50a      	bpl.n	80086d8 <__pow5mult+0x74>
 80086c2:	4639      	mov	r1, r7
 80086c4:	4622      	mov	r2, r4
 80086c6:	4630      	mov	r0, r6
 80086c8:	f7ff ff36 	bl	8008538 <__multiply>
 80086cc:	4639      	mov	r1, r7
 80086ce:	4681      	mov	r9, r0
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7ff fe4a 	bl	800836a <_Bfree>
 80086d6:	464f      	mov	r7, r9
 80086d8:	106d      	asrs	r5, r5, #1
 80086da:	d00b      	beq.n	80086f4 <__pow5mult+0x90>
 80086dc:	6820      	ldr	r0, [r4, #0]
 80086de:	b938      	cbnz	r0, 80086f0 <__pow5mult+0x8c>
 80086e0:	4622      	mov	r2, r4
 80086e2:	4621      	mov	r1, r4
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff ff27 	bl	8008538 <__multiply>
 80086ea:	6020      	str	r0, [r4, #0]
 80086ec:	f8c0 8000 	str.w	r8, [r0]
 80086f0:	4604      	mov	r4, r0
 80086f2:	e7e4      	b.n	80086be <__pow5mult+0x5a>
 80086f4:	4638      	mov	r0, r7
 80086f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fa:	bf00      	nop
 80086fc:	080097e8 	.word	0x080097e8

08008700 <__lshift>:
 8008700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	460c      	mov	r4, r1
 8008706:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	6849      	ldr	r1, [r1, #4]
 800870e:	eb0a 0903 	add.w	r9, sl, r3
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	4607      	mov	r7, r0
 8008716:	4616      	mov	r6, r2
 8008718:	f109 0501 	add.w	r5, r9, #1
 800871c:	42ab      	cmp	r3, r5
 800871e:	db32      	blt.n	8008786 <__lshift+0x86>
 8008720:	4638      	mov	r0, r7
 8008722:	f7ff fdee 	bl	8008302 <_Balloc>
 8008726:	2300      	movs	r3, #0
 8008728:	4680      	mov	r8, r0
 800872a:	f100 0114 	add.w	r1, r0, #20
 800872e:	461a      	mov	r2, r3
 8008730:	4553      	cmp	r3, sl
 8008732:	db2b      	blt.n	800878c <__lshift+0x8c>
 8008734:	6920      	ldr	r0, [r4, #16]
 8008736:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800873a:	f104 0314 	add.w	r3, r4, #20
 800873e:	f016 021f 	ands.w	r2, r6, #31
 8008742:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008746:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800874a:	d025      	beq.n	8008798 <__lshift+0x98>
 800874c:	f1c2 0e20 	rsb	lr, r2, #32
 8008750:	2000      	movs	r0, #0
 8008752:	681e      	ldr	r6, [r3, #0]
 8008754:	468a      	mov	sl, r1
 8008756:	4096      	lsls	r6, r2
 8008758:	4330      	orrs	r0, r6
 800875a:	f84a 0b04 	str.w	r0, [sl], #4
 800875e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008762:	459c      	cmp	ip, r3
 8008764:	fa20 f00e 	lsr.w	r0, r0, lr
 8008768:	d814      	bhi.n	8008794 <__lshift+0x94>
 800876a:	6048      	str	r0, [r1, #4]
 800876c:	b108      	cbz	r0, 8008772 <__lshift+0x72>
 800876e:	f109 0502 	add.w	r5, r9, #2
 8008772:	3d01      	subs	r5, #1
 8008774:	4638      	mov	r0, r7
 8008776:	f8c8 5010 	str.w	r5, [r8, #16]
 800877a:	4621      	mov	r1, r4
 800877c:	f7ff fdf5 	bl	800836a <_Bfree>
 8008780:	4640      	mov	r0, r8
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	3101      	adds	r1, #1
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	e7c7      	b.n	800871c <__lshift+0x1c>
 800878c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008790:	3301      	adds	r3, #1
 8008792:	e7cd      	b.n	8008730 <__lshift+0x30>
 8008794:	4651      	mov	r1, sl
 8008796:	e7dc      	b.n	8008752 <__lshift+0x52>
 8008798:	3904      	subs	r1, #4
 800879a:	f853 2b04 	ldr.w	r2, [r3], #4
 800879e:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a2:	459c      	cmp	ip, r3
 80087a4:	d8f9      	bhi.n	800879a <__lshift+0x9a>
 80087a6:	e7e4      	b.n	8008772 <__lshift+0x72>

080087a8 <__mcmp>:
 80087a8:	6903      	ldr	r3, [r0, #16]
 80087aa:	690a      	ldr	r2, [r1, #16]
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	b530      	push	{r4, r5, lr}
 80087b0:	d10c      	bne.n	80087cc <__mcmp+0x24>
 80087b2:	0092      	lsls	r2, r2, #2
 80087b4:	3014      	adds	r0, #20
 80087b6:	3114      	adds	r1, #20
 80087b8:	1884      	adds	r4, r0, r2
 80087ba:	4411      	add	r1, r2
 80087bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087c4:	4295      	cmp	r5, r2
 80087c6:	d003      	beq.n	80087d0 <__mcmp+0x28>
 80087c8:	d305      	bcc.n	80087d6 <__mcmp+0x2e>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4618      	mov	r0, r3
 80087ce:	bd30      	pop	{r4, r5, pc}
 80087d0:	42a0      	cmp	r0, r4
 80087d2:	d3f3      	bcc.n	80087bc <__mcmp+0x14>
 80087d4:	e7fa      	b.n	80087cc <__mcmp+0x24>
 80087d6:	f04f 33ff 	mov.w	r3, #4294967295
 80087da:	e7f7      	b.n	80087cc <__mcmp+0x24>

080087dc <__mdiff>:
 80087dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	460d      	mov	r5, r1
 80087e2:	4607      	mov	r7, r0
 80087e4:	4611      	mov	r1, r2
 80087e6:	4628      	mov	r0, r5
 80087e8:	4614      	mov	r4, r2
 80087ea:	f7ff ffdd 	bl	80087a8 <__mcmp>
 80087ee:	1e06      	subs	r6, r0, #0
 80087f0:	d108      	bne.n	8008804 <__mdiff+0x28>
 80087f2:	4631      	mov	r1, r6
 80087f4:	4638      	mov	r0, r7
 80087f6:	f7ff fd84 	bl	8008302 <_Balloc>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008804:	bfa4      	itt	ge
 8008806:	4623      	movge	r3, r4
 8008808:	462c      	movge	r4, r5
 800880a:	4638      	mov	r0, r7
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	bfa6      	itte	ge
 8008810:	461d      	movge	r5, r3
 8008812:	2600      	movge	r6, #0
 8008814:	2601      	movlt	r6, #1
 8008816:	f7ff fd74 	bl	8008302 <_Balloc>
 800881a:	692b      	ldr	r3, [r5, #16]
 800881c:	60c6      	str	r6, [r0, #12]
 800881e:	6926      	ldr	r6, [r4, #16]
 8008820:	f105 0914 	add.w	r9, r5, #20
 8008824:	f104 0214 	add.w	r2, r4, #20
 8008828:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800882c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008830:	f100 0514 	add.w	r5, r0, #20
 8008834:	f04f 0e00 	mov.w	lr, #0
 8008838:	f852 ab04 	ldr.w	sl, [r2], #4
 800883c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008840:	fa1e f18a 	uxtah	r1, lr, sl
 8008844:	b2a3      	uxth	r3, r4
 8008846:	1ac9      	subs	r1, r1, r3
 8008848:	0c23      	lsrs	r3, r4, #16
 800884a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800884e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008852:	b289      	uxth	r1, r1
 8008854:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008858:	45c8      	cmp	r8, r9
 800885a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800885e:	4694      	mov	ip, r2
 8008860:	f845 3b04 	str.w	r3, [r5], #4
 8008864:	d8e8      	bhi.n	8008838 <__mdiff+0x5c>
 8008866:	45bc      	cmp	ip, r7
 8008868:	d304      	bcc.n	8008874 <__mdiff+0x98>
 800886a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800886e:	b183      	cbz	r3, 8008892 <__mdiff+0xb6>
 8008870:	6106      	str	r6, [r0, #16]
 8008872:	e7c5      	b.n	8008800 <__mdiff+0x24>
 8008874:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008878:	fa1e f381 	uxtah	r3, lr, r1
 800887c:	141a      	asrs	r2, r3, #16
 800887e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008888:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800888c:	f845 3b04 	str.w	r3, [r5], #4
 8008890:	e7e9      	b.n	8008866 <__mdiff+0x8a>
 8008892:	3e01      	subs	r6, #1
 8008894:	e7e9      	b.n	800886a <__mdiff+0x8e>
	...

08008898 <__ulp>:
 8008898:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <__ulp+0x4c>)
 800889a:	ee10 2a90 	vmov	r2, s1
 800889e:	401a      	ands	r2, r3
 80088a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd04      	ble.n	80088b2 <__ulp+0x1a>
 80088a8:	2000      	movs	r0, #0
 80088aa:	4619      	mov	r1, r3
 80088ac:	ec41 0b10 	vmov	d0, r0, r1
 80088b0:	4770      	bx	lr
 80088b2:	425b      	negs	r3, r3
 80088b4:	151b      	asrs	r3, r3, #20
 80088b6:	2b13      	cmp	r3, #19
 80088b8:	f04f 0000 	mov.w	r0, #0
 80088bc:	f04f 0100 	mov.w	r1, #0
 80088c0:	dc04      	bgt.n	80088cc <__ulp+0x34>
 80088c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80088c6:	fa42 f103 	asr.w	r1, r2, r3
 80088ca:	e7ef      	b.n	80088ac <__ulp+0x14>
 80088cc:	3b14      	subs	r3, #20
 80088ce:	2b1e      	cmp	r3, #30
 80088d0:	f04f 0201 	mov.w	r2, #1
 80088d4:	bfda      	itte	le
 80088d6:	f1c3 031f 	rsble	r3, r3, #31
 80088da:	fa02 f303 	lslle.w	r3, r2, r3
 80088de:	4613      	movgt	r3, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	e7e3      	b.n	80088ac <__ulp+0x14>
 80088e4:	7ff00000 	.word	0x7ff00000

080088e8 <__b2d>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	6905      	ldr	r5, [r0, #16]
 80088ec:	f100 0714 	add.w	r7, r0, #20
 80088f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80088f4:	1f2e      	subs	r6, r5, #4
 80088f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff fdc5 	bl	800848a <__hi0bits>
 8008900:	f1c0 0320 	rsb	r3, r0, #32
 8008904:	280a      	cmp	r0, #10
 8008906:	600b      	str	r3, [r1, #0]
 8008908:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008980 <__b2d+0x98>
 800890c:	dc14      	bgt.n	8008938 <__b2d+0x50>
 800890e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008912:	fa24 f10e 	lsr.w	r1, r4, lr
 8008916:	42b7      	cmp	r7, r6
 8008918:	ea41 030c 	orr.w	r3, r1, ip
 800891c:	bf34      	ite	cc
 800891e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008922:	2100      	movcs	r1, #0
 8008924:	3015      	adds	r0, #21
 8008926:	fa04 f000 	lsl.w	r0, r4, r0
 800892a:	fa21 f10e 	lsr.w	r1, r1, lr
 800892e:	ea40 0201 	orr.w	r2, r0, r1
 8008932:	ec43 2b10 	vmov	d0, r2, r3
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	42b7      	cmp	r7, r6
 800893a:	bf3a      	itte	cc
 800893c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008940:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008944:	2100      	movcs	r1, #0
 8008946:	380b      	subs	r0, #11
 8008948:	d015      	beq.n	8008976 <__b2d+0x8e>
 800894a:	4084      	lsls	r4, r0
 800894c:	f1c0 0520 	rsb	r5, r0, #32
 8008950:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008954:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008958:	42be      	cmp	r6, r7
 800895a:	fa21 fc05 	lsr.w	ip, r1, r5
 800895e:	ea44 030c 	orr.w	r3, r4, ip
 8008962:	bf8c      	ite	hi
 8008964:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008968:	2400      	movls	r4, #0
 800896a:	fa01 f000 	lsl.w	r0, r1, r0
 800896e:	40ec      	lsrs	r4, r5
 8008970:	ea40 0204 	orr.w	r2, r0, r4
 8008974:	e7dd      	b.n	8008932 <__b2d+0x4a>
 8008976:	ea44 030c 	orr.w	r3, r4, ip
 800897a:	460a      	mov	r2, r1
 800897c:	e7d9      	b.n	8008932 <__b2d+0x4a>
 800897e:	bf00      	nop
 8008980:	3ff00000 	.word	0x3ff00000

08008984 <__d2b>:
 8008984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008988:	460e      	mov	r6, r1
 800898a:	2101      	movs	r1, #1
 800898c:	ec59 8b10 	vmov	r8, r9, d0
 8008990:	4615      	mov	r5, r2
 8008992:	f7ff fcb6 	bl	8008302 <_Balloc>
 8008996:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800899a:	4607      	mov	r7, r0
 800899c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089a0:	bb34      	cbnz	r4, 80089f0 <__d2b+0x6c>
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	f1b8 0300 	subs.w	r3, r8, #0
 80089a8:	d027      	beq.n	80089fa <__d2b+0x76>
 80089aa:	a802      	add	r0, sp, #8
 80089ac:	f840 3d08 	str.w	r3, [r0, #-8]!
 80089b0:	f7ff fd8a 	bl	80084c8 <__lo0bits>
 80089b4:	9900      	ldr	r1, [sp, #0]
 80089b6:	b1f0      	cbz	r0, 80089f6 <__d2b+0x72>
 80089b8:	9a01      	ldr	r2, [sp, #4]
 80089ba:	f1c0 0320 	rsb	r3, r0, #32
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	430b      	orrs	r3, r1
 80089c4:	40c2      	lsrs	r2, r0
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	9201      	str	r2, [sp, #4]
 80089ca:	9b01      	ldr	r3, [sp, #4]
 80089cc:	61bb      	str	r3, [r7, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bf14      	ite	ne
 80089d2:	2102      	movne	r1, #2
 80089d4:	2101      	moveq	r1, #1
 80089d6:	6139      	str	r1, [r7, #16]
 80089d8:	b1c4      	cbz	r4, 8008a0c <__d2b+0x88>
 80089da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80089de:	4404      	add	r4, r0
 80089e0:	6034      	str	r4, [r6, #0]
 80089e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089e6:	6028      	str	r0, [r5, #0]
 80089e8:	4638      	mov	r0, r7
 80089ea:	b003      	add	sp, #12
 80089ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089f4:	e7d5      	b.n	80089a2 <__d2b+0x1e>
 80089f6:	6179      	str	r1, [r7, #20]
 80089f8:	e7e7      	b.n	80089ca <__d2b+0x46>
 80089fa:	a801      	add	r0, sp, #4
 80089fc:	f7ff fd64 	bl	80084c8 <__lo0bits>
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	2101      	movs	r1, #1
 8008a06:	6139      	str	r1, [r7, #16]
 8008a08:	3020      	adds	r0, #32
 8008a0a:	e7e5      	b.n	80089d8 <__d2b+0x54>
 8008a0c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a14:	6030      	str	r0, [r6, #0]
 8008a16:	6918      	ldr	r0, [r3, #16]
 8008a18:	f7ff fd37 	bl	800848a <__hi0bits>
 8008a1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a20:	e7e1      	b.n	80089e6 <__d2b+0x62>

08008a22 <__ratio>:
 8008a22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a26:	4688      	mov	r8, r1
 8008a28:	4669      	mov	r1, sp
 8008a2a:	4681      	mov	r9, r0
 8008a2c:	f7ff ff5c 	bl	80088e8 <__b2d>
 8008a30:	a901      	add	r1, sp, #4
 8008a32:	4640      	mov	r0, r8
 8008a34:	ec57 6b10 	vmov	r6, r7, d0
 8008a38:	f7ff ff56 	bl	80088e8 <__b2d>
 8008a3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a40:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008a44:	eba3 0c02 	sub.w	ip, r3, r2
 8008a48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008a4c:	1a9b      	subs	r3, r3, r2
 8008a4e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008a52:	ec5b ab10 	vmov	sl, fp, d0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bfce      	itee	gt
 8008a5a:	463a      	movgt	r2, r7
 8008a5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a60:	465a      	movle	r2, fp
 8008a62:	4659      	mov	r1, fp
 8008a64:	463d      	mov	r5, r7
 8008a66:	bfd4      	ite	le
 8008a68:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008a6c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008a70:	4630      	mov	r0, r6
 8008a72:	ee10 2a10 	vmov	r2, s0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 feff 	bl	800087c <__aeabi_ddiv>
 8008a7e:	ec41 0b10 	vmov	d0, r0, r1
 8008a82:	b003      	add	sp, #12
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a88 <__copybits>:
 8008a88:	3901      	subs	r1, #1
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	1149      	asrs	r1, r1, #5
 8008a8e:	6914      	ldr	r4, [r2, #16]
 8008a90:	3101      	adds	r1, #1
 8008a92:	f102 0314 	add.w	r3, r2, #20
 8008a96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a9e:	42a3      	cmp	r3, r4
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	d303      	bcc.n	8008aac <__copybits+0x24>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	428a      	cmp	r2, r1
 8008aa8:	d305      	bcc.n	8008ab6 <__copybits+0x2e>
 8008aaa:	bd10      	pop	{r4, pc}
 8008aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab0:	f840 2b04 	str.w	r2, [r0], #4
 8008ab4:	e7f3      	b.n	8008a9e <__copybits+0x16>
 8008ab6:	f842 3b04 	str.w	r3, [r2], #4
 8008aba:	e7f4      	b.n	8008aa6 <__copybits+0x1e>

08008abc <__any_on>:
 8008abc:	f100 0214 	add.w	r2, r0, #20
 8008ac0:	6900      	ldr	r0, [r0, #16]
 8008ac2:	114b      	asrs	r3, r1, #5
 8008ac4:	4298      	cmp	r0, r3
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	db11      	blt.n	8008aee <__any_on+0x32>
 8008aca:	dd0a      	ble.n	8008ae2 <__any_on+0x26>
 8008acc:	f011 011f 	ands.w	r1, r1, #31
 8008ad0:	d007      	beq.n	8008ae2 <__any_on+0x26>
 8008ad2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ad6:	fa24 f001 	lsr.w	r0, r4, r1
 8008ada:	fa00 f101 	lsl.w	r1, r0, r1
 8008ade:	428c      	cmp	r4, r1
 8008ae0:	d10b      	bne.n	8008afa <__any_on+0x3e>
 8008ae2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d803      	bhi.n	8008af2 <__any_on+0x36>
 8008aea:	2000      	movs	r0, #0
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	4603      	mov	r3, r0
 8008af0:	e7f7      	b.n	8008ae2 <__any_on+0x26>
 8008af2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008af6:	2900      	cmp	r1, #0
 8008af8:	d0f5      	beq.n	8008ae6 <__any_on+0x2a>
 8008afa:	2001      	movs	r0, #1
 8008afc:	e7f6      	b.n	8008aec <__any_on+0x30>

08008afe <_calloc_r>:
 8008afe:	b538      	push	{r3, r4, r5, lr}
 8008b00:	fb02 f401 	mul.w	r4, r2, r1
 8008b04:	4621      	mov	r1, r4
 8008b06:	f000 f809 	bl	8008b1c <_malloc_r>
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	b118      	cbz	r0, 8008b16 <_calloc_r+0x18>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	2100      	movs	r1, #0
 8008b12:	f7fe f94a 	bl	8006daa <memset>
 8008b16:	4628      	mov	r0, r5
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
	...

08008b1c <_malloc_r>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	1ccd      	adds	r5, r1, #3
 8008b20:	f025 0503 	bic.w	r5, r5, #3
 8008b24:	3508      	adds	r5, #8
 8008b26:	2d0c      	cmp	r5, #12
 8008b28:	bf38      	it	cc
 8008b2a:	250c      	movcc	r5, #12
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	4606      	mov	r6, r0
 8008b30:	db01      	blt.n	8008b36 <_malloc_r+0x1a>
 8008b32:	42a9      	cmp	r1, r5
 8008b34:	d903      	bls.n	8008b3e <_malloc_r+0x22>
 8008b36:	230c      	movs	r3, #12
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	bd70      	pop	{r4, r5, r6, pc}
 8008b3e:	f000 fb78 	bl	8009232 <__malloc_lock>
 8008b42:	4a21      	ldr	r2, [pc, #132]	; (8008bc8 <_malloc_r+0xac>)
 8008b44:	6814      	ldr	r4, [r2, #0]
 8008b46:	4621      	mov	r1, r4
 8008b48:	b991      	cbnz	r1, 8008b70 <_malloc_r+0x54>
 8008b4a:	4c20      	ldr	r4, [pc, #128]	; (8008bcc <_malloc_r+0xb0>)
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	b91b      	cbnz	r3, 8008b58 <_malloc_r+0x3c>
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 fb17 	bl	8009184 <_sbrk_r>
 8008b56:	6020      	str	r0, [r4, #0]
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 fb12 	bl	8009184 <_sbrk_r>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d124      	bne.n	8008bae <_malloc_r+0x92>
 8008b64:	230c      	movs	r3, #12
 8008b66:	6033      	str	r3, [r6, #0]
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fb63 	bl	8009234 <__malloc_unlock>
 8008b6e:	e7e4      	b.n	8008b3a <_malloc_r+0x1e>
 8008b70:	680b      	ldr	r3, [r1, #0]
 8008b72:	1b5b      	subs	r3, r3, r5
 8008b74:	d418      	bmi.n	8008ba8 <_malloc_r+0x8c>
 8008b76:	2b0b      	cmp	r3, #11
 8008b78:	d90f      	bls.n	8008b9a <_malloc_r+0x7e>
 8008b7a:	600b      	str	r3, [r1, #0]
 8008b7c:	50cd      	str	r5, [r1, r3]
 8008b7e:	18cc      	adds	r4, r1, r3
 8008b80:	4630      	mov	r0, r6
 8008b82:	f000 fb57 	bl	8009234 <__malloc_unlock>
 8008b86:	f104 000b 	add.w	r0, r4, #11
 8008b8a:	1d23      	adds	r3, r4, #4
 8008b8c:	f020 0007 	bic.w	r0, r0, #7
 8008b90:	1ac3      	subs	r3, r0, r3
 8008b92:	d0d3      	beq.n	8008b3c <_malloc_r+0x20>
 8008b94:	425a      	negs	r2, r3
 8008b96:	50e2      	str	r2, [r4, r3]
 8008b98:	e7d0      	b.n	8008b3c <_malloc_r+0x20>
 8008b9a:	428c      	cmp	r4, r1
 8008b9c:	684b      	ldr	r3, [r1, #4]
 8008b9e:	bf16      	itet	ne
 8008ba0:	6063      	strne	r3, [r4, #4]
 8008ba2:	6013      	streq	r3, [r2, #0]
 8008ba4:	460c      	movne	r4, r1
 8008ba6:	e7eb      	b.n	8008b80 <_malloc_r+0x64>
 8008ba8:	460c      	mov	r4, r1
 8008baa:	6849      	ldr	r1, [r1, #4]
 8008bac:	e7cc      	b.n	8008b48 <_malloc_r+0x2c>
 8008bae:	1cc4      	adds	r4, r0, #3
 8008bb0:	f024 0403 	bic.w	r4, r4, #3
 8008bb4:	42a0      	cmp	r0, r4
 8008bb6:	d005      	beq.n	8008bc4 <_malloc_r+0xa8>
 8008bb8:	1a21      	subs	r1, r4, r0
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f000 fae2 	bl	8009184 <_sbrk_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d0cf      	beq.n	8008b64 <_malloc_r+0x48>
 8008bc4:	6025      	str	r5, [r4, #0]
 8008bc6:	e7db      	b.n	8008b80 <_malloc_r+0x64>
 8008bc8:	20000344 	.word	0x20000344
 8008bcc:	20000348 	.word	0x20000348

08008bd0 <__ssputs_r>:
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	688e      	ldr	r6, [r1, #8]
 8008bd6:	429e      	cmp	r6, r3
 8008bd8:	4682      	mov	sl, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	4690      	mov	r8, r2
 8008bde:	4699      	mov	r9, r3
 8008be0:	d837      	bhi.n	8008c52 <__ssputs_r+0x82>
 8008be2:	898a      	ldrh	r2, [r1, #12]
 8008be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008be8:	d031      	beq.n	8008c4e <__ssputs_r+0x7e>
 8008bea:	6825      	ldr	r5, [r4, #0]
 8008bec:	6909      	ldr	r1, [r1, #16]
 8008bee:	1a6f      	subs	r7, r5, r1
 8008bf0:	6965      	ldr	r5, [r4, #20]
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008bfc:	f109 0301 	add.w	r3, r9, #1
 8008c00:	443b      	add	r3, r7
 8008c02:	429d      	cmp	r5, r3
 8008c04:	bf38      	it	cc
 8008c06:	461d      	movcc	r5, r3
 8008c08:	0553      	lsls	r3, r2, #21
 8008c0a:	d530      	bpl.n	8008c6e <__ssputs_r+0x9e>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7ff ff85 	bl	8008b1c <_malloc_r>
 8008c12:	4606      	mov	r6, r0
 8008c14:	b950      	cbnz	r0, 8008c2c <__ssputs_r+0x5c>
 8008c16:	230c      	movs	r3, #12
 8008c18:	f8ca 3000 	str.w	r3, [sl]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2c:	463a      	mov	r2, r7
 8008c2e:	6921      	ldr	r1, [r4, #16]
 8008c30:	f7fe f8b0 	bl	8006d94 <memcpy>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	6126      	str	r6, [r4, #16]
 8008c42:	6165      	str	r5, [r4, #20]
 8008c44:	443e      	add	r6, r7
 8008c46:	1bed      	subs	r5, r5, r7
 8008c48:	6026      	str	r6, [r4, #0]
 8008c4a:	60a5      	str	r5, [r4, #8]
 8008c4c:	464e      	mov	r6, r9
 8008c4e:	454e      	cmp	r6, r9
 8008c50:	d900      	bls.n	8008c54 <__ssputs_r+0x84>
 8008c52:	464e      	mov	r6, r9
 8008c54:	4632      	mov	r2, r6
 8008c56:	4641      	mov	r1, r8
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	f000 fad1 	bl	8009200 <memmove>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	1b9b      	subs	r3, r3, r6
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	441e      	add	r6, r3
 8008c68:	6026      	str	r6, [r4, #0]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e7dc      	b.n	8008c28 <__ssputs_r+0x58>
 8008c6e:	462a      	mov	r2, r5
 8008c70:	f000 fb30 	bl	80092d4 <_realloc_r>
 8008c74:	4606      	mov	r6, r0
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1e2      	bne.n	8008c40 <__ssputs_r+0x70>
 8008c7a:	6921      	ldr	r1, [r4, #16]
 8008c7c:	4650      	mov	r0, sl
 8008c7e:	f000 fadb 	bl	8009238 <_free_r>
 8008c82:	e7c8      	b.n	8008c16 <__ssputs_r+0x46>

08008c84 <_svfiprintf_r>:
 8008c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c88:	461d      	mov	r5, r3
 8008c8a:	898b      	ldrh	r3, [r1, #12]
 8008c8c:	061f      	lsls	r7, r3, #24
 8008c8e:	b09d      	sub	sp, #116	; 0x74
 8008c90:	4680      	mov	r8, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4616      	mov	r6, r2
 8008c96:	d50f      	bpl.n	8008cb8 <_svfiprintf_r+0x34>
 8008c98:	690b      	ldr	r3, [r1, #16]
 8008c9a:	b96b      	cbnz	r3, 8008cb8 <_svfiprintf_r+0x34>
 8008c9c:	2140      	movs	r1, #64	; 0x40
 8008c9e:	f7ff ff3d 	bl	8008b1c <_malloc_r>
 8008ca2:	6020      	str	r0, [r4, #0]
 8008ca4:	6120      	str	r0, [r4, #16]
 8008ca6:	b928      	cbnz	r0, 8008cb4 <_svfiprintf_r+0x30>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	f8c8 3000 	str.w	r3, [r8]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	e0c8      	b.n	8008e46 <_svfiprintf_r+0x1c2>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbc:	2320      	movs	r3, #32
 8008cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cc2:	2330      	movs	r3, #48	; 0x30
 8008cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc8:	9503      	str	r5, [sp, #12]
 8008cca:	f04f 0b01 	mov.w	fp, #1
 8008cce:	4637      	mov	r7, r6
 8008cd0:	463d      	mov	r5, r7
 8008cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008cd6:	b10b      	cbz	r3, 8008cdc <_svfiprintf_r+0x58>
 8008cd8:	2b25      	cmp	r3, #37	; 0x25
 8008cda:	d13e      	bne.n	8008d5a <_svfiprintf_r+0xd6>
 8008cdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ce0:	d00b      	beq.n	8008cfa <_svfiprintf_r+0x76>
 8008ce2:	4653      	mov	r3, sl
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4640      	mov	r0, r8
 8008cea:	f7ff ff71 	bl	8008bd0 <__ssputs_r>
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f000 80a4 	beq.w	8008e3c <_svfiprintf_r+0x1b8>
 8008cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf6:	4453      	add	r3, sl
 8008cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfa:	783b      	ldrb	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 809d 	beq.w	8008e3c <_svfiprintf_r+0x1b8>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f04f 32ff 	mov.w	r2, #4294967295
 8008d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d14:	931a      	str	r3, [sp, #104]	; 0x68
 8008d16:	462f      	mov	r7, r5
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d1e:	4850      	ldr	r0, [pc, #320]	; (8008e60 <_svfiprintf_r+0x1dc>)
 8008d20:	f7f7 fa76 	bl	8000210 <memchr>
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	b9d0      	cbnz	r0, 8008d5e <_svfiprintf_r+0xda>
 8008d28:	06d9      	lsls	r1, r3, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2220      	movmi	r2, #32
 8008d2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d32:	071a      	lsls	r2, r3, #28
 8008d34:	bf44      	itt	mi
 8008d36:	222b      	movmi	r2, #43	; 0x2b
 8008d38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d3c:	782a      	ldrb	r2, [r5, #0]
 8008d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8008d40:	d015      	beq.n	8008d6e <_svfiprintf_r+0xea>
 8008d42:	9a07      	ldr	r2, [sp, #28]
 8008d44:	462f      	mov	r7, r5
 8008d46:	2000      	movs	r0, #0
 8008d48:	250a      	movs	r5, #10
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d50:	3b30      	subs	r3, #48	; 0x30
 8008d52:	2b09      	cmp	r3, #9
 8008d54:	d94d      	bls.n	8008df2 <_svfiprintf_r+0x16e>
 8008d56:	b1b8      	cbz	r0, 8008d88 <_svfiprintf_r+0x104>
 8008d58:	e00f      	b.n	8008d7a <_svfiprintf_r+0xf6>
 8008d5a:	462f      	mov	r7, r5
 8008d5c:	e7b8      	b.n	8008cd0 <_svfiprintf_r+0x4c>
 8008d5e:	4a40      	ldr	r2, [pc, #256]	; (8008e60 <_svfiprintf_r+0x1dc>)
 8008d60:	1a80      	subs	r0, r0, r2
 8008d62:	fa0b f000 	lsl.w	r0, fp, r0
 8008d66:	4318      	orrs	r0, r3
 8008d68:	9004      	str	r0, [sp, #16]
 8008d6a:	463d      	mov	r5, r7
 8008d6c:	e7d3      	b.n	8008d16 <_svfiprintf_r+0x92>
 8008d6e:	9a03      	ldr	r2, [sp, #12]
 8008d70:	1d11      	adds	r1, r2, #4
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	9103      	str	r1, [sp, #12]
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	db01      	blt.n	8008d7e <_svfiprintf_r+0xfa>
 8008d7a:	9207      	str	r2, [sp, #28]
 8008d7c:	e004      	b.n	8008d88 <_svfiprintf_r+0x104>
 8008d7e:	4252      	negs	r2, r2
 8008d80:	f043 0302 	orr.w	r3, r3, #2
 8008d84:	9207      	str	r2, [sp, #28]
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	783b      	ldrb	r3, [r7, #0]
 8008d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8c:	d10c      	bne.n	8008da8 <_svfiprintf_r+0x124>
 8008d8e:	787b      	ldrb	r3, [r7, #1]
 8008d90:	2b2a      	cmp	r3, #42	; 0x2a
 8008d92:	d133      	bne.n	8008dfc <_svfiprintf_r+0x178>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	1d1a      	adds	r2, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	9203      	str	r2, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfb8      	it	lt
 8008da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008da4:	3702      	adds	r7, #2
 8008da6:	9305      	str	r3, [sp, #20]
 8008da8:	4d2e      	ldr	r5, [pc, #184]	; (8008e64 <_svfiprintf_r+0x1e0>)
 8008daa:	7839      	ldrb	r1, [r7, #0]
 8008dac:	2203      	movs	r2, #3
 8008dae:	4628      	mov	r0, r5
 8008db0:	f7f7 fa2e 	bl	8000210 <memchr>
 8008db4:	b138      	cbz	r0, 8008dc6 <_svfiprintf_r+0x142>
 8008db6:	2340      	movs	r3, #64	; 0x40
 8008db8:	1b40      	subs	r0, r0, r5
 8008dba:	fa03 f000 	lsl.w	r0, r3, r0
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	4303      	orrs	r3, r0
 8008dc2:	3701      	adds	r7, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	7839      	ldrb	r1, [r7, #0]
 8008dc8:	4827      	ldr	r0, [pc, #156]	; (8008e68 <_svfiprintf_r+0x1e4>)
 8008dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dce:	2206      	movs	r2, #6
 8008dd0:	1c7e      	adds	r6, r7, #1
 8008dd2:	f7f7 fa1d 	bl	8000210 <memchr>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d038      	beq.n	8008e4c <_svfiprintf_r+0x1c8>
 8008dda:	4b24      	ldr	r3, [pc, #144]	; (8008e6c <_svfiprintf_r+0x1e8>)
 8008ddc:	bb13      	cbnz	r3, 8008e24 <_svfiprintf_r+0x1a0>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3307      	adds	r3, #7
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dec:	444b      	add	r3, r9
 8008dee:	9309      	str	r3, [sp, #36]	; 0x24
 8008df0:	e76d      	b.n	8008cce <_svfiprintf_r+0x4a>
 8008df2:	fb05 3202 	mla	r2, r5, r2, r3
 8008df6:	2001      	movs	r0, #1
 8008df8:	460f      	mov	r7, r1
 8008dfa:	e7a6      	b.n	8008d4a <_svfiprintf_r+0xc6>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	3701      	adds	r7, #1
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	4619      	mov	r1, r3
 8008e04:	250a      	movs	r5, #10
 8008e06:	4638      	mov	r0, r7
 8008e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0c:	3a30      	subs	r2, #48	; 0x30
 8008e0e:	2a09      	cmp	r2, #9
 8008e10:	d903      	bls.n	8008e1a <_svfiprintf_r+0x196>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0c8      	beq.n	8008da8 <_svfiprintf_r+0x124>
 8008e16:	9105      	str	r1, [sp, #20]
 8008e18:	e7c6      	b.n	8008da8 <_svfiprintf_r+0x124>
 8008e1a:	fb05 2101 	mla	r1, r5, r1, r2
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4607      	mov	r7, r0
 8008e22:	e7f0      	b.n	8008e06 <_svfiprintf_r+0x182>
 8008e24:	ab03      	add	r3, sp, #12
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	4622      	mov	r2, r4
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <_svfiprintf_r+0x1ec>)
 8008e2c:	a904      	add	r1, sp, #16
 8008e2e:	4640      	mov	r0, r8
 8008e30:	f3af 8000 	nop.w
 8008e34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e38:	4681      	mov	r9, r0
 8008e3a:	d1d6      	bne.n	8008dea <_svfiprintf_r+0x166>
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	065b      	lsls	r3, r3, #25
 8008e40:	f53f af35 	bmi.w	8008cae <_svfiprintf_r+0x2a>
 8008e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e46:	b01d      	add	sp, #116	; 0x74
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4622      	mov	r2, r4
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <_svfiprintf_r+0x1ec>)
 8008e54:	a904      	add	r1, sp, #16
 8008e56:	4640      	mov	r0, r8
 8008e58:	f000 f882 	bl	8008f60 <_printf_i>
 8008e5c:	e7ea      	b.n	8008e34 <_svfiprintf_r+0x1b0>
 8008e5e:	bf00      	nop
 8008e60:	080097f4 	.word	0x080097f4
 8008e64:	080097fa 	.word	0x080097fa
 8008e68:	080097fe 	.word	0x080097fe
 8008e6c:	00000000 	.word	0x00000000
 8008e70:	08008bd1 	.word	0x08008bd1

08008e74 <_printf_common>:
 8008e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	4691      	mov	r9, r2
 8008e7a:	461f      	mov	r7, r3
 8008e7c:	688a      	ldr	r2, [r1, #8]
 8008e7e:	690b      	ldr	r3, [r1, #16]
 8008e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e84:	4293      	cmp	r3, r2
 8008e86:	bfb8      	it	lt
 8008e88:	4613      	movlt	r3, r2
 8008e8a:	f8c9 3000 	str.w	r3, [r9]
 8008e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e92:	4606      	mov	r6, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	b112      	cbz	r2, 8008e9e <_printf_common+0x2a>
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f8c9 3000 	str.w	r3, [r9]
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	0699      	lsls	r1, r3, #26
 8008ea2:	bf42      	ittt	mi
 8008ea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ea8:	3302      	addmi	r3, #2
 8008eaa:	f8c9 3000 	strmi.w	r3, [r9]
 8008eae:	6825      	ldr	r5, [r4, #0]
 8008eb0:	f015 0506 	ands.w	r5, r5, #6
 8008eb4:	d107      	bne.n	8008ec6 <_printf_common+0x52>
 8008eb6:	f104 0a19 	add.w	sl, r4, #25
 8008eba:	68e3      	ldr	r3, [r4, #12]
 8008ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	42ab      	cmp	r3, r5
 8008ec4:	dc28      	bgt.n	8008f18 <_printf_common+0xa4>
 8008ec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	3300      	adds	r3, #0
 8008ece:	bf18      	it	ne
 8008ed0:	2301      	movne	r3, #1
 8008ed2:	0692      	lsls	r2, r2, #26
 8008ed4:	d42d      	bmi.n	8008f32 <_printf_common+0xbe>
 8008ed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eda:	4639      	mov	r1, r7
 8008edc:	4630      	mov	r0, r6
 8008ede:	47c0      	blx	r8
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d020      	beq.n	8008f26 <_printf_common+0xb2>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	68e5      	ldr	r5, [r4, #12]
 8008ee8:	f8d9 2000 	ldr.w	r2, [r9]
 8008eec:	f003 0306 	and.w	r3, r3, #6
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	bf08      	it	eq
 8008ef4:	1aad      	subeq	r5, r5, r2
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	6922      	ldr	r2, [r4, #16]
 8008efa:	bf0c      	ite	eq
 8008efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f00:	2500      	movne	r5, #0
 8008f02:	4293      	cmp	r3, r2
 8008f04:	bfc4      	itt	gt
 8008f06:	1a9b      	subgt	r3, r3, r2
 8008f08:	18ed      	addgt	r5, r5, r3
 8008f0a:	f04f 0900 	mov.w	r9, #0
 8008f0e:	341a      	adds	r4, #26
 8008f10:	454d      	cmp	r5, r9
 8008f12:	d11a      	bne.n	8008f4a <_printf_common+0xd6>
 8008f14:	2000      	movs	r0, #0
 8008f16:	e008      	b.n	8008f2a <_printf_common+0xb6>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4630      	mov	r0, r6
 8008f20:	47c0      	blx	r8
 8008f22:	3001      	adds	r0, #1
 8008f24:	d103      	bne.n	8008f2e <_printf_common+0xba>
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2e:	3501      	adds	r5, #1
 8008f30:	e7c3      	b.n	8008eba <_printf_common+0x46>
 8008f32:	18e1      	adds	r1, r4, r3
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	2030      	movs	r0, #48	; 0x30
 8008f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f3c:	4422      	add	r2, r4
 8008f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f46:	3302      	adds	r3, #2
 8008f48:	e7c5      	b.n	8008ed6 <_printf_common+0x62>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4630      	mov	r0, r6
 8008f52:	47c0      	blx	r8
 8008f54:	3001      	adds	r0, #1
 8008f56:	d0e6      	beq.n	8008f26 <_printf_common+0xb2>
 8008f58:	f109 0901 	add.w	r9, r9, #1
 8008f5c:	e7d8      	b.n	8008f10 <_printf_common+0x9c>
	...

08008f60 <_printf_i>:
 8008f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f68:	460c      	mov	r4, r1
 8008f6a:	7e09      	ldrb	r1, [r1, #24]
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	296e      	cmp	r1, #110	; 0x6e
 8008f70:	4617      	mov	r7, r2
 8008f72:	4606      	mov	r6, r0
 8008f74:	4698      	mov	r8, r3
 8008f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f78:	f000 80b3 	beq.w	80090e2 <_printf_i+0x182>
 8008f7c:	d822      	bhi.n	8008fc4 <_printf_i+0x64>
 8008f7e:	2963      	cmp	r1, #99	; 0x63
 8008f80:	d036      	beq.n	8008ff0 <_printf_i+0x90>
 8008f82:	d80a      	bhi.n	8008f9a <_printf_i+0x3a>
 8008f84:	2900      	cmp	r1, #0
 8008f86:	f000 80b9 	beq.w	80090fc <_printf_i+0x19c>
 8008f8a:	2958      	cmp	r1, #88	; 0x58
 8008f8c:	f000 8083 	beq.w	8009096 <_printf_i+0x136>
 8008f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f98:	e032      	b.n	8009000 <_printf_i+0xa0>
 8008f9a:	2964      	cmp	r1, #100	; 0x64
 8008f9c:	d001      	beq.n	8008fa2 <_printf_i+0x42>
 8008f9e:	2969      	cmp	r1, #105	; 0x69
 8008fa0:	d1f6      	bne.n	8008f90 <_printf_i+0x30>
 8008fa2:	6820      	ldr	r0, [r4, #0]
 8008fa4:	6813      	ldr	r3, [r2, #0]
 8008fa6:	0605      	lsls	r5, r0, #24
 8008fa8:	f103 0104 	add.w	r1, r3, #4
 8008fac:	d52a      	bpl.n	8009004 <_printf_i+0xa4>
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6011      	str	r1, [r2, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da03      	bge.n	8008fbe <_printf_i+0x5e>
 8008fb6:	222d      	movs	r2, #45	; 0x2d
 8008fb8:	425b      	negs	r3, r3
 8008fba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008fbe:	486f      	ldr	r0, [pc, #444]	; (800917c <_printf_i+0x21c>)
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	e039      	b.n	8009038 <_printf_i+0xd8>
 8008fc4:	2973      	cmp	r1, #115	; 0x73
 8008fc6:	f000 809d 	beq.w	8009104 <_printf_i+0x1a4>
 8008fca:	d808      	bhi.n	8008fde <_printf_i+0x7e>
 8008fcc:	296f      	cmp	r1, #111	; 0x6f
 8008fce:	d020      	beq.n	8009012 <_printf_i+0xb2>
 8008fd0:	2970      	cmp	r1, #112	; 0x70
 8008fd2:	d1dd      	bne.n	8008f90 <_printf_i+0x30>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	f043 0320 	orr.w	r3, r3, #32
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	e003      	b.n	8008fe6 <_printf_i+0x86>
 8008fde:	2975      	cmp	r1, #117	; 0x75
 8008fe0:	d017      	beq.n	8009012 <_printf_i+0xb2>
 8008fe2:	2978      	cmp	r1, #120	; 0x78
 8008fe4:	d1d4      	bne.n	8008f90 <_printf_i+0x30>
 8008fe6:	2378      	movs	r3, #120	; 0x78
 8008fe8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fec:	4864      	ldr	r0, [pc, #400]	; (8009180 <_printf_i+0x220>)
 8008fee:	e055      	b.n	800909c <_printf_i+0x13c>
 8008ff0:	6813      	ldr	r3, [r2, #0]
 8008ff2:	1d19      	adds	r1, r3, #4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6011      	str	r1, [r2, #0]
 8008ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009000:	2301      	movs	r3, #1
 8009002:	e08c      	b.n	800911e <_printf_i+0x1be>
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6011      	str	r1, [r2, #0]
 8009008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800900c:	bf18      	it	ne
 800900e:	b21b      	sxthne	r3, r3
 8009010:	e7cf      	b.n	8008fb2 <_printf_i+0x52>
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	6825      	ldr	r5, [r4, #0]
 8009016:	1d18      	adds	r0, r3, #4
 8009018:	6010      	str	r0, [r2, #0]
 800901a:	0628      	lsls	r0, r5, #24
 800901c:	d501      	bpl.n	8009022 <_printf_i+0xc2>
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	e002      	b.n	8009028 <_printf_i+0xc8>
 8009022:	0668      	lsls	r0, r5, #25
 8009024:	d5fb      	bpl.n	800901e <_printf_i+0xbe>
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	4854      	ldr	r0, [pc, #336]	; (800917c <_printf_i+0x21c>)
 800902a:	296f      	cmp	r1, #111	; 0x6f
 800902c:	bf14      	ite	ne
 800902e:	220a      	movne	r2, #10
 8009030:	2208      	moveq	r2, #8
 8009032:	2100      	movs	r1, #0
 8009034:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009038:	6865      	ldr	r5, [r4, #4]
 800903a:	60a5      	str	r5, [r4, #8]
 800903c:	2d00      	cmp	r5, #0
 800903e:	f2c0 8095 	blt.w	800916c <_printf_i+0x20c>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	f021 0104 	bic.w	r1, r1, #4
 8009048:	6021      	str	r1, [r4, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d13d      	bne.n	80090ca <_printf_i+0x16a>
 800904e:	2d00      	cmp	r5, #0
 8009050:	f040 808e 	bne.w	8009170 <_printf_i+0x210>
 8009054:	4665      	mov	r5, ip
 8009056:	2a08      	cmp	r2, #8
 8009058:	d10b      	bne.n	8009072 <_printf_i+0x112>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	07db      	lsls	r3, r3, #31
 800905e:	d508      	bpl.n	8009072 <_printf_i+0x112>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	bfde      	ittt	le
 8009068:	2330      	movle	r3, #48	; 0x30
 800906a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800906e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009072:	ebac 0305 	sub.w	r3, ip, r5
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	f8cd 8000 	str.w	r8, [sp]
 800907c:	463b      	mov	r3, r7
 800907e:	aa03      	add	r2, sp, #12
 8009080:	4621      	mov	r1, r4
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff fef6 	bl	8008e74 <_printf_common>
 8009088:	3001      	adds	r0, #1
 800908a:	d14d      	bne.n	8009128 <_printf_i+0x1c8>
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	b005      	add	sp, #20
 8009092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009096:	4839      	ldr	r0, [pc, #228]	; (800917c <_printf_i+0x21c>)
 8009098:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800909c:	6813      	ldr	r3, [r2, #0]
 800909e:	6821      	ldr	r1, [r4, #0]
 80090a0:	1d1d      	adds	r5, r3, #4
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6015      	str	r5, [r2, #0]
 80090a6:	060a      	lsls	r2, r1, #24
 80090a8:	d50b      	bpl.n	80090c2 <_printf_i+0x162>
 80090aa:	07ca      	lsls	r2, r1, #31
 80090ac:	bf44      	itt	mi
 80090ae:	f041 0120 	orrmi.w	r1, r1, #32
 80090b2:	6021      	strmi	r1, [r4, #0]
 80090b4:	b91b      	cbnz	r3, 80090be <_printf_i+0x15e>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	f022 0220 	bic.w	r2, r2, #32
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	2210      	movs	r2, #16
 80090c0:	e7b7      	b.n	8009032 <_printf_i+0xd2>
 80090c2:	064d      	lsls	r5, r1, #25
 80090c4:	bf48      	it	mi
 80090c6:	b29b      	uxthmi	r3, r3
 80090c8:	e7ef      	b.n	80090aa <_printf_i+0x14a>
 80090ca:	4665      	mov	r5, ip
 80090cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80090d0:	fb02 3311 	mls	r3, r2, r1, r3
 80090d4:	5cc3      	ldrb	r3, [r0, r3]
 80090d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80090da:	460b      	mov	r3, r1
 80090dc:	2900      	cmp	r1, #0
 80090de:	d1f5      	bne.n	80090cc <_printf_i+0x16c>
 80090e0:	e7b9      	b.n	8009056 <_printf_i+0xf6>
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	6961      	ldr	r1, [r4, #20]
 80090e8:	1d18      	adds	r0, r3, #4
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	0628      	lsls	r0, r5, #24
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	d501      	bpl.n	80090f6 <_printf_i+0x196>
 80090f2:	6019      	str	r1, [r3, #0]
 80090f4:	e002      	b.n	80090fc <_printf_i+0x19c>
 80090f6:	066a      	lsls	r2, r5, #25
 80090f8:	d5fb      	bpl.n	80090f2 <_printf_i+0x192>
 80090fa:	8019      	strh	r1, [r3, #0]
 80090fc:	2300      	movs	r3, #0
 80090fe:	6123      	str	r3, [r4, #16]
 8009100:	4665      	mov	r5, ip
 8009102:	e7b9      	b.n	8009078 <_printf_i+0x118>
 8009104:	6813      	ldr	r3, [r2, #0]
 8009106:	1d19      	adds	r1, r3, #4
 8009108:	6011      	str	r1, [r2, #0]
 800910a:	681d      	ldr	r5, [r3, #0]
 800910c:	6862      	ldr	r2, [r4, #4]
 800910e:	2100      	movs	r1, #0
 8009110:	4628      	mov	r0, r5
 8009112:	f7f7 f87d 	bl	8000210 <memchr>
 8009116:	b108      	cbz	r0, 800911c <_printf_i+0x1bc>
 8009118:	1b40      	subs	r0, r0, r5
 800911a:	6060      	str	r0, [r4, #4]
 800911c:	6863      	ldr	r3, [r4, #4]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	2300      	movs	r3, #0
 8009122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009126:	e7a7      	b.n	8009078 <_printf_i+0x118>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	462a      	mov	r2, r5
 800912c:	4639      	mov	r1, r7
 800912e:	4630      	mov	r0, r6
 8009130:	47c0      	blx	r8
 8009132:	3001      	adds	r0, #1
 8009134:	d0aa      	beq.n	800908c <_printf_i+0x12c>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	079b      	lsls	r3, r3, #30
 800913a:	d413      	bmi.n	8009164 <_printf_i+0x204>
 800913c:	68e0      	ldr	r0, [r4, #12]
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	4298      	cmp	r0, r3
 8009142:	bfb8      	it	lt
 8009144:	4618      	movlt	r0, r3
 8009146:	e7a3      	b.n	8009090 <_printf_i+0x130>
 8009148:	2301      	movs	r3, #1
 800914a:	464a      	mov	r2, r9
 800914c:	4639      	mov	r1, r7
 800914e:	4630      	mov	r0, r6
 8009150:	47c0      	blx	r8
 8009152:	3001      	adds	r0, #1
 8009154:	d09a      	beq.n	800908c <_printf_i+0x12c>
 8009156:	3501      	adds	r5, #1
 8009158:	68e3      	ldr	r3, [r4, #12]
 800915a:	9a03      	ldr	r2, [sp, #12]
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	42ab      	cmp	r3, r5
 8009160:	dcf2      	bgt.n	8009148 <_printf_i+0x1e8>
 8009162:	e7eb      	b.n	800913c <_printf_i+0x1dc>
 8009164:	2500      	movs	r5, #0
 8009166:	f104 0919 	add.w	r9, r4, #25
 800916a:	e7f5      	b.n	8009158 <_printf_i+0x1f8>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1ac      	bne.n	80090ca <_printf_i+0x16a>
 8009170:	7803      	ldrb	r3, [r0, #0]
 8009172:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009176:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800917a:	e76c      	b.n	8009056 <_printf_i+0xf6>
 800917c:	08009805 	.word	0x08009805
 8009180:	08009816 	.word	0x08009816

08009184 <_sbrk_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4c06      	ldr	r4, [pc, #24]	; (80091a0 <_sbrk_r+0x1c>)
 8009188:	2300      	movs	r3, #0
 800918a:	4605      	mov	r5, r0
 800918c:	4608      	mov	r0, r1
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	f7f8 f8a0 	bl	80012d4 <_sbrk>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_sbrk_r+0x1a>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	b103      	cbz	r3, 800919e <_sbrk_r+0x1a>
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20000988 	.word	0x20000988

080091a4 <nanf>:
 80091a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80091ac <nanf+0x8>
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	7fc00000 	.word	0x7fc00000

080091b0 <strncmp>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	b16a      	cbz	r2, 80091d0 <strncmp+0x20>
 80091b4:	3901      	subs	r1, #1
 80091b6:	1884      	adds	r4, r0, r2
 80091b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d103      	bne.n	80091cc <strncmp+0x1c>
 80091c4:	42a0      	cmp	r0, r4
 80091c6:	d001      	beq.n	80091cc <strncmp+0x1c>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f5      	bne.n	80091b8 <strncmp+0x8>
 80091cc:	1a98      	subs	r0, r3, r2
 80091ce:	bd10      	pop	{r4, pc}
 80091d0:	4610      	mov	r0, r2
 80091d2:	e7fc      	b.n	80091ce <strncmp+0x1e>

080091d4 <__ascii_wctomb>:
 80091d4:	b149      	cbz	r1, 80091ea <__ascii_wctomb+0x16>
 80091d6:	2aff      	cmp	r2, #255	; 0xff
 80091d8:	bf85      	ittet	hi
 80091da:	238a      	movhi	r3, #138	; 0x8a
 80091dc:	6003      	strhi	r3, [r0, #0]
 80091de:	700a      	strbls	r2, [r1, #0]
 80091e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80091e4:	bf98      	it	ls
 80091e6:	2001      	movls	r0, #1
 80091e8:	4770      	bx	lr
 80091ea:	4608      	mov	r0, r1
 80091ec:	4770      	bx	lr
	...

080091f0 <malloc>:
 80091f0:	4b02      	ldr	r3, [pc, #8]	; (80091fc <malloc+0xc>)
 80091f2:	4601      	mov	r1, r0
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	f7ff bc91 	b.w	8008b1c <_malloc_r>
 80091fa:	bf00      	nop
 80091fc:	20000034 	.word	0x20000034

08009200 <memmove>:
 8009200:	4288      	cmp	r0, r1
 8009202:	b510      	push	{r4, lr}
 8009204:	eb01 0302 	add.w	r3, r1, r2
 8009208:	d807      	bhi.n	800921a <memmove+0x1a>
 800920a:	1e42      	subs	r2, r0, #1
 800920c:	4299      	cmp	r1, r3
 800920e:	d00a      	beq.n	8009226 <memmove+0x26>
 8009210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009214:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009218:	e7f8      	b.n	800920c <memmove+0xc>
 800921a:	4283      	cmp	r3, r0
 800921c:	d9f5      	bls.n	800920a <memmove+0xa>
 800921e:	1881      	adds	r1, r0, r2
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	42d3      	cmn	r3, r2
 8009224:	d100      	bne.n	8009228 <memmove+0x28>
 8009226:	bd10      	pop	{r4, pc}
 8009228:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800922c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009230:	e7f7      	b.n	8009222 <memmove+0x22>

08009232 <__malloc_lock>:
 8009232:	4770      	bx	lr

08009234 <__malloc_unlock>:
 8009234:	4770      	bx	lr
	...

08009238 <_free_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4605      	mov	r5, r0
 800923c:	2900      	cmp	r1, #0
 800923e:	d045      	beq.n	80092cc <_free_r+0x94>
 8009240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009244:	1f0c      	subs	r4, r1, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfb8      	it	lt
 800924a:	18e4      	addlt	r4, r4, r3
 800924c:	f7ff fff1 	bl	8009232 <__malloc_lock>
 8009250:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <_free_r+0x98>)
 8009252:	6813      	ldr	r3, [r2, #0]
 8009254:	4610      	mov	r0, r2
 8009256:	b933      	cbnz	r3, 8009266 <_free_r+0x2e>
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	6014      	str	r4, [r2, #0]
 800925c:	4628      	mov	r0, r5
 800925e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009262:	f7ff bfe7 	b.w	8009234 <__malloc_unlock>
 8009266:	42a3      	cmp	r3, r4
 8009268:	d90c      	bls.n	8009284 <_free_r+0x4c>
 800926a:	6821      	ldr	r1, [r4, #0]
 800926c:	1862      	adds	r2, r4, r1
 800926e:	4293      	cmp	r3, r2
 8009270:	bf04      	itt	eq
 8009272:	681a      	ldreq	r2, [r3, #0]
 8009274:	685b      	ldreq	r3, [r3, #4]
 8009276:	6063      	str	r3, [r4, #4]
 8009278:	bf04      	itt	eq
 800927a:	1852      	addeq	r2, r2, r1
 800927c:	6022      	streq	r2, [r4, #0]
 800927e:	6004      	str	r4, [r0, #0]
 8009280:	e7ec      	b.n	800925c <_free_r+0x24>
 8009282:	4613      	mov	r3, r2
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	b10a      	cbz	r2, 800928c <_free_r+0x54>
 8009288:	42a2      	cmp	r2, r4
 800928a:	d9fa      	bls.n	8009282 <_free_r+0x4a>
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	1858      	adds	r0, r3, r1
 8009290:	42a0      	cmp	r0, r4
 8009292:	d10b      	bne.n	80092ac <_free_r+0x74>
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	4401      	add	r1, r0
 8009298:	1858      	adds	r0, r3, r1
 800929a:	4282      	cmp	r2, r0
 800929c:	6019      	str	r1, [r3, #0]
 800929e:	d1dd      	bne.n	800925c <_free_r+0x24>
 80092a0:	6810      	ldr	r0, [r2, #0]
 80092a2:	6852      	ldr	r2, [r2, #4]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	4401      	add	r1, r0
 80092a8:	6019      	str	r1, [r3, #0]
 80092aa:	e7d7      	b.n	800925c <_free_r+0x24>
 80092ac:	d902      	bls.n	80092b4 <_free_r+0x7c>
 80092ae:	230c      	movs	r3, #12
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	e7d3      	b.n	800925c <_free_r+0x24>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	1821      	adds	r1, r4, r0
 80092b8:	428a      	cmp	r2, r1
 80092ba:	bf04      	itt	eq
 80092bc:	6811      	ldreq	r1, [r2, #0]
 80092be:	6852      	ldreq	r2, [r2, #4]
 80092c0:	6062      	str	r2, [r4, #4]
 80092c2:	bf04      	itt	eq
 80092c4:	1809      	addeq	r1, r1, r0
 80092c6:	6021      	streq	r1, [r4, #0]
 80092c8:	605c      	str	r4, [r3, #4]
 80092ca:	e7c7      	b.n	800925c <_free_r+0x24>
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
 80092ce:	bf00      	nop
 80092d0:	20000344 	.word	0x20000344

080092d4 <_realloc_r>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	4607      	mov	r7, r0
 80092d8:	4614      	mov	r4, r2
 80092da:	460e      	mov	r6, r1
 80092dc:	b921      	cbnz	r1, 80092e8 <_realloc_r+0x14>
 80092de:	4611      	mov	r1, r2
 80092e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092e4:	f7ff bc1a 	b.w	8008b1c <_malloc_r>
 80092e8:	b922      	cbnz	r2, 80092f4 <_realloc_r+0x20>
 80092ea:	f7ff ffa5 	bl	8009238 <_free_r>
 80092ee:	4625      	mov	r5, r4
 80092f0:	4628      	mov	r0, r5
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f4:	f000 f814 	bl	8009320 <_malloc_usable_size_r>
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d20f      	bcs.n	800931c <_realloc_r+0x48>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4638      	mov	r0, r7
 8009300:	f7ff fc0c 	bl	8008b1c <_malloc_r>
 8009304:	4605      	mov	r5, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d0f2      	beq.n	80092f0 <_realloc_r+0x1c>
 800930a:	4631      	mov	r1, r6
 800930c:	4622      	mov	r2, r4
 800930e:	f7fd fd41 	bl	8006d94 <memcpy>
 8009312:	4631      	mov	r1, r6
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff ff8f 	bl	8009238 <_free_r>
 800931a:	e7e9      	b.n	80092f0 <_realloc_r+0x1c>
 800931c:	4635      	mov	r5, r6
 800931e:	e7e7      	b.n	80092f0 <_realloc_r+0x1c>

08009320 <_malloc_usable_size_r>:
 8009320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009324:	1f18      	subs	r0, r3, #4
 8009326:	2b00      	cmp	r3, #0
 8009328:	bfbc      	itt	lt
 800932a:	580b      	ldrlt	r3, [r1, r0]
 800932c:	18c0      	addlt	r0, r0, r3
 800932e:	4770      	bx	lr

08009330 <_init>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr

0800933c <_fini>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr
